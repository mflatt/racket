  EVAL_ONE_STR(
"(linklet"
"()"
"((1/module-path-index? module-path-index?)"
"(1/identifier-binding identifier-binding)"
"(1/module-declared? module-declared?)"
"(1/bound-identifier=? bound-identifier=?)"
"(1/module-path? module-path?)"
"(seal seal)"
"(1/syntax-shift-phase-level syntax-shift-phase-level)"
"(embedded-load embedded-load)"
"(1/syntax->datum syntax->datum)"
"(1/dynamic-require dynamic-require)"
"(1/namespace-attach-module-declaration namespace-attach-module-declaration)"
"(make-namespace make-namespace)"
"(1/resolved-module-path? resolved-module-path?)"
"(boot boot)"
"(1/current-namespace current-namespace)"
"(expand$1 expand)"
"(1/namespace-mapped-symbols namespace-mapped-symbols)"
"(1/namespace-attach-module namespace-attach-module)"
"(compile-to-linklets compile-to-linklets)"
"(1/module-compiled-indirect-exports module-compiled-indirect-exports)"
"(1/read-accept-compiled read-accept-compiled)"
"(datum->kernel-syntax datum->kernel-syntax)"
"(identifier? identifier?)"
"(1/syntax-e syntax-e)"
"(1/syntax-debug-info syntax-debug-info)"
"(namespace->instance namespace->instance)"
"(1/namespace-module-identifier namespace-module-identifier)"
"(1/eval eval)"
"(1/namespace-require namespace-require)"
"(maybe-syntax->datum maybe-syntax->datum)"
"(maybe-raise-missing-module maybe-raise-missing-module)"
"(syntax?$1 syntax?)"
"(1/read read)"
"(1/module-compiled-exports module-compiled-exports)"
"(1/module-path-index-join module-path-index-join)"
"(1/read-syntax read-syntax)"
"(syntax-property$1 syntax-property)"
"(1/module->language-info module->language-info)"
"(1/namespace-syntax-introduce namespace-syntax-introduce)"
"(1/compile compile)"
"(1/datum->syntax datum->syntax))"
"(define-values"
"(qq-append)"
"  (lambda (a_0 b_0) (if (list? a_0) (append a_0 b_0) (raise-argument-error 'unquote-splicing \"list?\" a_0))))"
"(define-values(call/ec) call-with-escape-continuation)"
" (define-values (bad-list$1) (lambda (who_0 orig-l_0) (raise-mismatch-error who_0 \"not a proper list: \" orig-l_0)))"
"(define-values"
"(memq memv member)"
"(let-values()"
"(let-values()"
"(values"
"(let-values(((memq_0)"
"(lambda(v_0 orig-l_1)"
"((letrec-values(((loop_0)"
"(lambda(ls_0)"
"(if(null? ls_0)"
"(let-values() #f)"
"(if(not(pair? ls_0))"
"(let-values()(bad-list$1 'memq orig-l_1))"
"(if(eq? v_0(car ls_0))"
"(let-values() ls_0)"
"(let-values()(loop_0(cdr ls_0)))))))))"
" loop_0)"
" orig-l_1))))"
" memq_0)"
"(let-values(((memv_0)"
"(lambda(v_1 orig-l_2)"
"((letrec-values(((loop_1)"
"(lambda(ls_1)"
"(if(null? ls_1)"
"(let-values() #f)"
"(if(not(pair? ls_1))"
"(let-values()(bad-list$1 'memv orig-l_2))"
"(if(eqv? v_1(car ls_1))"
"(let-values() ls_1)"
"(let-values()(loop_1(cdr ls_1)))))))))"
" loop_1)"
" orig-l_2))))"
" memv_0)"
"(let-values(((default_0)"
"(let-values(((member_0)"
"(lambda(v_2 orig-l_3)"
"((letrec-values(((loop_2)"
"(lambda(ls_2)"
"(if(null? ls_2)"
"(let-values() #f)"
"(if(not(pair? ls_2))"
"(let-values()(bad-list$1 'member orig-l_3))"
"(if(equal? v_2(car ls_2))"
"(let-values() ls_2)"
"(let-values()(loop_2(cdr ls_2)))))))))"
" loop_2)"
" orig-l_3))))"
" member_0)))"
"(let-values(((member_1)"
"(case-lambda"
"((v_3 orig-l_4)(default_0 v_3 orig-l_4))"
"((v_4 orig-l_5 eq?_0)"
"(begin"
"(if(if(procedure? eq?_0)(procedure-arity-includes? eq?_0 2) #f)"
"(void)"
"                             (raise-argument-error 'member \"(procedure-arity-includes/c 2)\" eq?_0))"
"((let-values(((member_2)"
"(lambda(v_5 orig-l_6)"
"((letrec-values(((loop_3)"
"(lambda(ls_3)"
"(if(null? ls_3)"
"(let-values() #f)"
"(if(not(pair? ls_3))"
"(let-values()(bad-list$1 'member orig-l_6))"
"(if(eq?_0 v_5(car ls_3))"
"(let-values() ls_3)"
"(let-values()(loop_3(cdr ls_3)))))))))"
" loop_3)"
" orig-l_6))))"
" member_2)"
" v_4"
" orig-l_5))))))"
" member_1))))))"
"(define-values"
"(select-handler/no-breaks)"
"(lambda(e_0 bpz_0 l_0)"
"(with-continuation-mark"
" break-enabled-key"
"(make-thread-cell #f)"
"((letrec-values(((loop_4)"
"(lambda(l_1)"
"(if(null? l_1)"
"(let-values()(raise e_0))"
"(if((caar l_1) e_0)"
"(let-values()"
"(begin0"
"((cdar l_1) e_0)"
"(with-continuation-mark break-enabled-key bpz_0(check-for-break))))"
"(let-values()(loop_4(cdr l_1))))))))"
" loop_4)"
" l_0))))"
"(define-values(false-thread-cell)(make-thread-cell #f))"
"(define-values(handler-prompt-key)(make-continuation-prompt-tag 'handler-prompt-tag))"
"(define-values"
"(call-handled-body)"
"(lambda(bpz_1 handle-proc_0 body-thunk_0)"
"(with-continuation-mark"
" break-enabled-key"
" false-thread-cell"
"(call-with-continuation-prompt"
"(lambda(bpz_2 body-thunk_1)"
"(with-continuation-mark"
" break-enabled-key"
" bpz_2"
"(with-continuation-mark"
" exception-handler-key"
"(lambda(e_1)(abort-current-continuation handler-prompt-key e_1))"
"(body-thunk_1))))"
" handler-prompt-key"
" handle-proc_0"
" bpz_1"
" body-thunk_0))))"
"(define-values"
"(call-with-exception-handler)"
"(lambda(exnh_0 thunk_0)(begin0(with-continuation-mark exception-handler-key exnh_0(thunk_0))(void))))"
"(define-values"
"(hash-update hash-update! hash-has-key? hash-ref!)"
"(let-values(((not-there_0)(gensym)))"
"(let-values(((up_0)"
"(lambda(who_1 mut?_0 set_0 ht_0 key_0 xform_0 default_1)"
"(begin"
"(if(if(hash? ht_0)(if mut?_0(not(immutable? ht_0))(immutable? ht_0)) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_1"
"                           (if mut?_0 \"(and/c hash? (not/c immutable?))\" \"(and/c hash? immutable?)\")"
" ht_0)))"
"(if(if(procedure? xform_0)(procedure-arity-includes? xform_0 1) #f)"
"(void)"
"                        (let-values () (raise-argument-error who_1 \"(any/c . -> . any/c)\" xform_0)))"
"(let-values(((v_6)(hash-ref ht_0 key_0 default_1)))"
"(if(eq? v_6 not-there_0)"
"                          (raise-mismatch-error who_1 \"no value found for key: \" key_0)"
"(set_0 ht_0 key_0(xform_0 v_6))))))))"
"(let-values(((hash-update_0)"
"(case-lambda"
"((ht_1 key_1 xform_1 default_2)(up_0 'hash-update #f hash-set ht_1 key_1 xform_1 default_2))"
"((ht_2 key_2 xform_2)(hash-update ht_2 key_2 xform_2 not-there_0))))"
"((hash-update!_0)"
"(case-lambda"
"((ht_3 key_3 xform_3 default_3)(up_0 'hash-update! #t hash-set! ht_3 key_3 xform_3 default_3))"
"((ht_4 key_4 xform_4)(hash-update! ht_4 key_4 xform_4 not-there_0))))"
"((hash-has-key?_0)"
"(lambda(ht_5 key_5)"
"(begin"
"(if(hash? ht_5)"
"(void)"
"                          (let-values () (raise-argument-error 'hash-has-key? \"hash?\" 0 ht_5 key_5)))"
"(not(eq? not-there_0(hash-ref ht_5 key_5 not-there_0))))))"
"((hash-ref!_0)"
"(lambda(ht_6 key_6 new_0)"
"(begin"
"(if(if(hash? ht_6)(not(immutable? ht_6)) #f)"
"(void)"
"(let-values()"
"                            (raise-argument-error 'hash-ref! \"(and/c hash? (not/c immutable?))\" 0 ht_6 key_6 new_0)))"
"(let-values(((v_7)(hash-ref ht_6 key_6 not-there_0)))"
"(if(eq? not-there_0 v_7)"
"(let-values(((n_0)(if(procedure? new_0)(new_0) new_0)))"
"(begin(hash-set! ht_6 key_6 n_0) n_0))"
" v_7))))))"
"(values hash-update_0 hash-update!_0 hash-has-key?_0 hash-ref!_0)))))"
"(define-values"
"(path-string?)"
"(lambda(s_0)"
"(let-values(((or-part_0)(path? s_0)))"
"(if or-part_0"
" or-part_0"
"(if(string? s_0)"
"(let-values(((or-part_1)(relative-path? s_0)))(if or-part_1 or-part_1(absolute-path? s_0)))"
" #f)))))"
"(define-values(bsbs)(string '#\\\\ '#\\\\))"
"(define-values"
"(normal-case-path)"
"(lambda(s_1)"
"(begin"
"(if(let-values(((or-part_2)(path-for-some-system? s_1)))(if or-part_2 or-part_2(path-string? s_1)))"
"(void)"
"        (let-values () (raise-argument-error 'normal-path-case \"(or/c path-for-some-system? path-string?)\" s_1)))"
"(if(if(path-for-some-system? s_1)(eq?(path-convention-type s_1) 'windows)(eq?(system-type) 'windows))"
"(let-values()"
"(let-values(((str_0)(if(string? s_1) s_1(bytes->string/locale(path->bytes s_1)))))"
"            (if (regexp-match? '#rx\"^[\\\\][\\\\][?][\\\\]\" str_0)"
"(if(string? s_1)(string->path s_1) s_1)"
"(let-values(((s_2)(string-locale-downcase str_0)))"
"(bytes->path"
"(string->bytes/locale"
"(regexp-replace*"
"                   '#rx\"/\""
"                   (if (regexp-match? '#rx\"[/\\\\][. ]+[/\\\\]*$\" s_2) s_2 (regexp-replace* '#rx\"[ .]+([/\\\\]*)$\" s_2 \"\\\\1\"))"
" bsbs))"
" 'windows)))))"
"(if(string? s_1)(let-values()(string->path s_1))(let-values() s_1))))))"
"(define-values"
"(check-extension-call)"
"(lambda(s_3 sfx_0 who_2)"
"(begin"
"(if(let-values(((or-part_3)(path-for-some-system? s_3)))(if or-part_3 or-part_3(path-string? s_3)))"
"(void)"
"        (let-values () (raise-argument-error who_2 \"(or/c path-for-some-system? path-string?)\" 0 s_3 sfx_0)))"
"(if(let-values(((or-part_4)(string? sfx_0)))(if or-part_4 or-part_4(bytes? sfx_0)))"
"(void)"
"        (let-values () (raise-argument-error who_2 \"(or/c string? bytes?)\" 1 s_3 sfx_0)))"
"(let-values(((base_0 name_0 dir?_0)(split-path s_3)))"
"(begin"
"(if(not base_0)"
"            (let-values () (raise-mismatch-error who_2 \"cannot add an extension to a root path: \" s_3))"
"(void))"
"(values base_0 name_0))))))"
"(define-values"
"(path-adjust-extension)"
"(lambda(name_1 sep_0 rest-bytes_0 s_4 sfx_1)"
"(let-values(((base_1 name_2)(check-extension-call s_4 sfx_1 name_1)))"
"(let-values(((bs_0)(path-element->bytes name_2)))"
"(let-values(((finish_0)"
"(lambda(i_0 sep_1 i2_0)"
"(bytes->path-element"
"(bytes-append"
"(subbytes bs_0 0 i_0)"
" sep_1"
"(rest-bytes_0 bs_0 i2_0)"
"(if(string? sfx_1)(string->bytes/locale sfx_1(char->integer '#\\?)) sfx_1))"
"(if(path-for-some-system? s_4)(path-convention-type s_4)(system-path-convention-type))))))"
"(let-values(((new-name_0)"
"(letrec-values(((loop_5)"
"(lambda(i_1)"
"(if(zero? i_1)"
"                                             (finish_0 (bytes-length bs_0) #\"\" (bytes-length bs_0))"
"(let-values(((i_2)(sub1 i_1)))"
"(if(if(not(zero? i_2))"
"(eq?(char->integer '#\\.)(bytes-ref bs_0 i_2))"
" #f)"
"(finish_0 i_2 sep_0(add1 i_2))"
"(loop_5 i_2)))))))"
"(loop_5(bytes-length bs_0)))))"
"(if(path-for-some-system? base_1)(build-path base_1 new-name_0) new-name_0)))))))"
"(define-values"
"(path-replace-extension)"
"  (lambda (s_5 sfx_2) (path-adjust-extension 'path-replace-extension #\"\" (lambda (bs_1 i_3) #\"\") s_5 sfx_2)))"
"(define-values"
"(path-add-extension)"
"  (lambda (s_6 sfx_3) (path-adjust-extension 'path-add-extension #\"_\" subbytes s_6 sfx_3)))"
"(define-values"
"(reroot-path)"
"(lambda(p_0 root_0)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_5)(path-string? p_0)))"
"(if or-part_5 or-part_5(path-for-some-system? p_0)))"
"(void)"
"(let-values()"
"                        (raise-argument-error 'reroot-path \"(or/c path-string? path-for-some-system?)\" 0 p_0 root_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_6)(path-string? root_0)))"
"(if or-part_6 or-part_6(path-for-some-system? root_0)))"
"(void)"
"(let-values()"
"                          (raise-argument-error 'reroot-path \"(or/c path-string? path-for-some-system?)\" 1 p_0 root_0)))"
"(values))))"
"(let-values(((conv_0)"
"(if(path-for-some-system? p_0)(path-convention-type p_0)(system-path-convention-type))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_7)(complete-path? p_0)))"
"(if or-part_7 or-part_7(eq?(system-path-convention-type) conv_0)))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                               \"path is not complete and not the platform's convention\""
"                               \"path\""
" p_0"
"                               \"platform convention type\""
"(system-path-convention-type))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?"
"(if(path-for-some-system? root_0)"
"(path-convention-type root_0)"
"(system-path-convention-type))"
" conv_0)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                                 \"given paths use different conventions\""
"                                 \"path\""
" p_0"
"                                 \"root path\""
" root_0)))"
"(values))))"
"(let-values(((c-p_0)"
"(normal-case-path(cleanse-path(if(complete-path? p_0) p_0(path->complete-path p_0))))))"
"(let-values(((bstr_0)(path->bytes c-p_0)))"
"(if(eq? conv_0 'unix)"
"(let-values()"
"                      (if (bytes=? bstr_0 #\"/\")"
"(if(path-for-some-system? root_0) root_0(string->path root_0))"
"(build-path root_0(bytes->path(subbytes(path->bytes c-p_0) 1) conv_0))))"
"(if(eq? conv_0 'windows)"
"(let-values()"
"(build-path"
" root_0"
"(bytes->path"
"                          (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\[a-z]:\" bstr_0)"
"(let-values()"
"                              (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_0 4 5) #\"\\\\\" (subbytes bstr_0 6)))"
"                            (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_0)"
"                              (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_0 4)))"
"                              (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_0)"
"                                (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_0 4)))"
"                                (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\\" bstr_0)"
"                                  (let-values () (bytes-append #\"UNC\\\\\" (subbytes bstr_0 2)))"
"                                  (if (regexp-match? '#rx\"^[a-z]:\" bstr_0)"
"(let-values()(bytes-append(subbytes bstr_0 0 1)(subbytes bstr_0 2)))"
"(void))))))"
" conv_0)))"
"(void))))))))))))"
"(define-values"
"(path-list-string->path-list)"
"(let-values(((r_0) #f)"
"((cons-path_0)"
"(lambda(default_4 s_1 l_2)"
"                  (let-values (((s_7) (if (eq? (system-type) 'windows) (regexp-replace* '#rx#\"\\\"\" s_1 #\"\") s_1)))"
"                    (if (bytes=? s_7 #\"\") (append default_4 l_2) (cons (bytes->path s_7) l_2))))))"
"(lambda(s_2 default_5)"
"(begin"
"(if r_0"
"(void)"
"(let-values()"
"(set! r_0"
"(byte-regexp"
"(string->bytes/utf-8"
"                (let-values (((sep_2) (if (eq? (system-type) 'windows) \";\" \":\")))"
"                  (format \"([^~a]*)~a(.*)\" sep_2 sep_2)))))))"
"(if(let-values(((or-part_8)(bytes? s_2)))(if or-part_8 or-part_8(string? s_2)))"
"(void)"
"          (let-values () (raise-argument-error 'path-list-string->path-list \"(or/c bytes? string?)\" s_2)))"
"(if(if(list? default_5)(andmap path? default_5) #f)"
"(void)"
"          (let-values () (raise-argument-error 'path-list-string->path-list \"(listof path?)\" default_5)))"
"((letrec-values(((loop_6)"
"(lambda(s_8)"
"(let-values(((m_0)(regexp-match r_0 s_8)))"
"(if m_0"
"(cons-path_0 default_5(cadr m_0)(loop_6(caddr m_0)))"
"(cons-path_0 default_5 s_8 null))))))"
" loop_6)"
"(if(string? s_2)(string->bytes/utf-8 s_2) s_2))))))"
"(define-values"
"(find-executable-path)"
"(case-lambda"
"((program_0 libpath_0 reverse?_0)"
"(begin"
"(if(path-string? program_0)"
"(void)"
"        (let-values () (raise-argument-error 'find-executable-path \"path-string?\" program_0)))"
"(if(let-values(((or-part_9)(not libpath_0)))"
"(if or-part_9 or-part_9(if(path-string? libpath_0)(relative-path? libpath_0) #f)))"
"(void)"
"(let-values()"
"          (raise-argument-error 'find-executable-path \"(or/c #f (and/c path-string? relative-path?))\" libpath_0)))"
"(letrec-values(((found-exec_0)"
"(lambda(exec-name_0)"
"(if libpath_0"
"(let-values(((base_2 name_3 isdir?_0)(split-path exec-name_0)))"
"(let-values(((next_0)"
"(lambda()"
"(let-values(((resolved_0)(resolve-path exec-name_0)))"
"(if(equal? resolved_0 exec-name_0)"
"(let-values() #f)"
"(if(relative-path? resolved_0)"
"(let-values()(found-exec_0(build-path base_2 resolved_0)))"
"(let-values()(found-exec_0 resolved_0))))))))"
"(let-values(((or-part_4)(if reverse?_0(next_0) #f)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_10)"
"(if(path? base_2)"
"(let-values(((lib_0)(build-path base_2 libpath_0)))"
"(if(let-values(((or-part_11)(directory-exists? lib_0)))"
"(if or-part_11 or-part_11(file-exists? lib_0)))"
" lib_0"
" #f))"
" #f)))"
"(if or-part_10 or-part_10(if(not reverse?_0)(next_0) #f)))))))"
" exec-name_0))))"
"(if(if(relative-path? program_0)"
"(let-values(((base_3 name_4 dir?_1)(split-path program_0)))(eq? base_3 'relative))"
" #f)"
"          (let-values (((paths-str_0) (environment-variables-ref (current-environment-variables) #\"PATH\"))"
"                       ((win-add_0) (lambda (s_9) (if (eq? (system-type) 'windows) (cons (bytes->path #\".\") s_9) s_9))))"
"((letrec-values(((loop_7)"
"(lambda(paths_0)"
"(if(null? paths_0)"
" #f"
"(let-values(((base_4)(path->complete-path(car paths_0))))"
"(let-values(((name_5)(build-path base_4 program_0)))"
"(if(file-exists? name_5)(found-exec_0 name_5)(loop_7(cdr paths_0)))))))))"
" loop_7)"
"(win-add_0"
"(if paths-str_0(path-list-string->path-list(bytes->string/locale paths-str_0 '#\\?) null) null))))"
"(let-values(((p_1)(path->complete-path program_0)))(if(file-exists? p_1)(found-exec_0 p_1) #f))))))"
"((program_1 libpath_1)(find-executable-path program_1 libpath_1 #f))"
"((program_2)(find-executable-path program_2 #f #f))))"
"(define-values"
"(call-with-default-reading-parameterization)"
"(lambda(thunk_1)"
"(if(if(procedure? thunk_1)(procedure-arity-includes? thunk_1 0) #f)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-case-sensitive"
" #t"
" 1/read-square-bracket-as-paren"
" #t"
" 1/read-curly-brace-as-paren"
" #t"
" 1/read-square-bracket-with-tag"
" #f"
" 1/read-curly-brace-with-tag"
" #f"
" 1/read-accept-box"
" #t"
" 1/read-accept-compiled"
" #f"
" read-accept-bar-quote"
" #t"
" 1/read-accept-graph"
" #t"
" read-decimal-as-inexact"
" #t"
" 1/read-cdot"
" #f"
" 1/read-accept-dot"
" #t"
" 1/read-accept-infix-dot"
" #t"
" 1/read-accept-quasiquote"
" #t"
" 1/read-accept-reader"
" #f"
" 1/read-accept-lang"
" #t"
" 1/current-readtable"
" #f)"
"(let-values()(thunk_1)))"
"      (raise-argument-error 'call-with-default-reading-parameterization \"(procedure-arity-includes/c 0)\" thunk_1))))"
"(define-values"
"(find-main-collects)"
"(lambda()(cache-configuration 0(lambda()(exe-relative-path->complete-path(find-system-path 'collects-dir))))))"
"(define-values"
"(find-main-config)"
"(lambda()(cache-configuration 1(lambda()(exe-relative-path->complete-path(find-system-path 'config-dir))))))"
"(define-values"
"(exe-relative-path->complete-path)"
"(lambda(collects-path_0)"
"(if(complete-path? collects-path_0)"
"(let-values()(simplify-path collects-path_0))"
"(if(absolute-path? collects-path_0)"
"(let-values()"
"(let-values(((exec_0)"
"(path->complete-path"
"(find-executable-path(find-system-path 'exec-file))"
"(find-system-path 'orig-dir))))"
"(let-values(((base_5 name_6 dir?_2)(split-path exec_0)))"
"(simplify-path(path->complete-path collects-path_0 base_5)))))"
"(let-values()"
"(let-values(((p_2)(find-executable-path(find-system-path 'exec-file) collects-path_0 #t)))"
"(if p_2(simplify-path p_2) #f)))))))"
"(define-values"
"(-check-relpath)"
"(lambda(who_0 s_10)"
"(begin"
"      (if (path-string? s_10) (void) (let-values () (raise-argument-error who_0 \"path-string?\" s_10)))"
"(if(relative-path? s_10)"
"(void)"
"        (let-values () (raise-arguments-error who_0 \"invalid relative path\" \"path\" s_10))))))"
"(define-values"
"(-check-collection)"
"(lambda(who_3 collection_0 collection-path_0)"
"(begin(-check-relpath who_3 collection_0)(for-each(lambda(p_2)(-check-relpath who_3 p_2)) collection-path_0))))"
"(define-values"
"(-check-fail)"
"(lambda(who_4 fail_0)"
"(if(if(procedure? fail_0)(procedure-arity-includes? fail_0 1) #f)"
"(void)"
"      (let-values () (raise-argument-error who_4 \"(any/c . -> . any)\" fail_0)))))"
"(define-values"
"(collection-path)"
"(lambda(fail_1 collection_1 collection-path_1)"
"(begin"
"(-check-collection 'collection-path collection_1 collection-path_1)"
"(-check-fail 'collection-path fail_1)"
"(find-col-file fail_1 collection_1 collection-path_1 #f #f))))"
"(define-values"
"(collection-file-path)"
"(lambda(fail_2 check-compiled?_0 file-name_0 collection_2 collection-path_2)"
"(begin"
"(-check-relpath 'collection-file-path file-name_0)"
"(-check-collection 'collection-file-path collection_2 collection-path_2)"
"(-check-fail 'collection-file-path fail_2)"
"(find-col-file fail_2 collection_2 collection-path_2 file-name_0 check-compiled?_0))))"
"(define-values"
"(get-config-table)"
"(lambda(d_0)"
"    (let-values (((p_3) (if d_0 (build-path d_0 \"config.rktd\") #f)))"
"(let-values(((or-part_12)"
"(if p_3"
"(if(file-exists? p_3)"
"(with-input-from-file"
" p_3"
"(lambda()"
"(let-values(((v_8)(call-with-default-reading-parameterization 1/read)))"
"(if(hash? v_8) v_8 #f))))"
" #f)"
" #f)))"
"(if or-part_12 or-part_12 '#hash())))))"
"(define-values"
"(get-installation-name)"
"(lambda(config-table_0)(hash-ref config-table_0 'installation-name(version))))"
"(define-values"
"(coerce-to-path)"
"(lambda(p_4)"
"(if(string? p_4)"
"(let-values()(collects-relative-path->complete-path(string->path p_4)))"
"(if(bytes? p_4)"
"(let-values()(collects-relative-path->complete-path(bytes->path p_4)))"
"(if(path? p_4)(let-values()(collects-relative-path->complete-path p_4))(let-values() p_4))))))"
"(define-values"
"(collects-relative-path->complete-path)"
"(lambda(p_5)"
"(if(complete-path? p_5)"
"(let-values() p_5)"
"(let-values()"
"(path->complete-path"
" p_5"
"(let-values(((or-part_13)(find-main-collects)))(if or-part_13 or-part_13(current-directory))))))))"
"(define-values"
"(add-config-search)"
"(lambda(ht_7 key_7 orig-l_7)"
"(let-values(((l_3)(hash-ref ht_7 key_7 #f)))"
"(if l_3"
"((letrec-values(((loop_5)"
"(lambda(l_4)"
"(if(null? l_4)"
"(let-values() null)"
"(if(not(car l_4))"
"(let-values()(append orig-l_7(loop_5(cdr l_4))))"
"(let-values()(cons(coerce-to-path(car l_4))(loop_5(cdr l_4)))))))))"
" loop_5)"
" l_3)"
" orig-l_7))))"
"(define-values"
"(find-library-collection-links)"
"(lambda()"
"(let-values(((ht_8)(get-config-table(find-main-config))))"
"(let-values(((lf_0)"
"(coerce-to-path"
"(let-values(((or-part_14)(hash-ref ht_8 'links-file #f)))"
"(if or-part_14"
" or-part_14"
"(build-path"
"(let-values(((or-part_15)(hash-ref ht_8 'share-dir #f)))"
"                            (if or-part_15 or-part_15 (build-path 'up \"share\")))"
"                          \"links.rktd\"))))))"
"(append"
"(list #f)"
"(if(if(use-user-specific-search-paths)(use-collection-link-paths) #f)"
"           (list (build-path (find-system-path 'addon-dir) (get-installation-name ht_8) \"links.rktd\"))"
" null)"
"(if(use-collection-link-paths)(add-config-search ht_8 'links-search-files(list lf_0)) null))))))"
"(define-values(links-cache)(make-weak-hash))"
"(define-values(stamp-prompt-tag)(make-continuation-prompt-tag 'stamp))"
"(define-values"
"(file->stamp)"
"(lambda(path_0 old-stamp_0)"
"(if(if old-stamp_0(if(cdr old-stamp_0)(not(sync/timeout 0(cdr old-stamp_0))) #f) #f)"
"(let-values() old-stamp_0)"
"(let-values()"
"(call-with-continuation-prompt"
"(lambda()"
"(with-continuation-mark"
" exception-handler-key"
"(lambda(exn_0)"
"(abort-current-continuation"
" stamp-prompt-tag"
"(if(exn:fail:filesystem? exn_0)(lambda() #f)(lambda()(raise exn_0)))))"
"(let-values(((dir-evt_0)"
"(if(vector-ref(system-type 'fs-change) 2)"
"((letrec-values(((loop_8)"
"(lambda(path_1)"
"(let-values(((base_6 name_7 dir?_3)(split-path path_1)))"
"(if(path? base_6)"
"(if(directory-exists? base_6)"
"(filesystem-change-evt base_6(lambda() #f))"
"(loop_8 base_6))"
" #f)))))"
" loop_8)"
" path_0)"
" #f)))"
"(if(not(file-exists? path_0))"
"(cons #f dir-evt_0)"
"(let-values(((evt_0)"
"(if(vector-ref(system-type 'fs-change) 2)"
"(filesystem-change-evt path_0(lambda() #f))"
" #f)))"
"(begin"
"(if dir-evt_0(let-values()(filesystem-change-evt-cancel dir-evt_0))(void))"
"(cons"
"(let-values(((p_6)(open-input-file path_0)))"
"(dynamic-wind"
" void"
"(lambda()"
"(let-values(((bstr_1)(read-bytes 8192 p_6)))"
"(if(if(bytes? bstr_1)(>=(bytes-length bstr_1) 8192) #f)"
"(apply"
" bytes-append"
"(cons"
" bstr_1"
"((letrec-values(((loop_9)"
"(lambda()"
"(let-values(((bstr_2)(read-bytes 8192 p_6)))"
"(if(eof-object? bstr_2) null(cons bstr_2(loop_9)))))))"
" loop_9))))"
" bstr_1)))"
"(lambda()(close-input-port p_6))))"
" evt_0)))))))"
" stamp-prompt-tag)))))"
"(define-values"
"(no-file-stamp?)"
"(lambda(a_1)(let-values(((or-part_16)(not a_1)))(if or-part_16 or-part_16(not(car a_1))))))"
"(define-values"
"(get-linked-collections)"
"(lambda(links-path_0)"
"(call-with-escape-continuation"
"(lambda(esc_0)"
"(let-values(((make-handler_0)"
"(lambda(ts_0)"
"(lambda(exn_1)"
"(begin"
"(if(exn:fail? exn_1)"
"(let-values(((l_5)(current-logger)))"
"(if(log-level? l_5 'error)"
"(let-values()"
"(log-message"
" l_5"
" 'error"
"(format"
"                                     \"error reading collection links file ~s: ~a\""
" links-path_0"
"(exn-message exn_1))"
"(current-continuation-marks)))"
"(void)))"
"(void))"
"(if ts_0(let-values()(hash-set! links-cache links-path_0(cons ts_0 '#hasheq())))(void))"
"(if(exn:fail? exn_1)(esc_0(make-hasheq)) exn_1))))))"
"(with-continuation-mark"
" exception-handler-key"
"(make-handler_0 #f)"
"(let-values(((links-stamp+cache_0)(hash-ref links-cache links-path_0 '(#f . #hasheq()))))"
"(let-values(((a-links-stamp_0)(car links-stamp+cache_0)))"
"(let-values(((ts_1)(file->stamp links-path_0 a-links-stamp_0)))"
"(if(not(equal? ts_1 a-links-stamp_0))"
"(with-continuation-mark"
" exception-handler-key"
"(make-handler_0 ts_1)"
"(call-with-default-reading-parameterization"
"(lambda()"
"(let-values(((v_9)"
"(if(no-file-stamp? ts_1)"
" null"
"(let-values(((p_7)(open-input-file links-path_0 'binary)))"
"(dynamic-wind"
" void"
"(lambda()"
"(begin0"
"(1/read p_7)"
"(if(eof-object?(1/read p_7))"
"(void)"
"                                               (let-values () (error \"expected a single S-expression\")))))"
"(lambda()(close-input-port p_7)))))))"
"(begin"
"(if(if(list? v_9)"
"(andmap"
"(lambda(p_8)"
"(if(list? p_8)"
"(if(let-values(((or-part_17)(= 2(length p_8))))"
"(if or-part_17 or-part_17(= 3(length p_8))))"
"(if(let-values(((or-part_18)(string?(car p_8))))"
"(if or-part_18"
" or-part_18"
"(let-values(((or-part_19)(eq? 'root(car p_8))))"
"(if or-part_19 or-part_19(eq? 'static-root(car p_8))))))"
"(if(path-string?(cadr p_8))"
"(let-values(((or-part_20)(null?(cddr p_8))))"
"(if or-part_20 or-part_20(regexp?(caddr p_8))))"
" #f)"
" #f)"
" #f)"
" #f))"
" v_9)"
" #f)"
"(void)"
"                            (let-values () (error \"ill-formed content\")))"
"(let-values(((ht_9)(make-hasheq))"
"((dir_0)"
"(let-values(((base_7 name_8 dir?_4)(split-path links-path_0))) base_7)))"
"(begin"
"(for-each"
"(lambda(p_9)"
"(if(let-values(((or-part_21)(null?(cddr p_9))))"
"(if or-part_21 or-part_21(regexp-match?(caddr p_9)(version))))"
"(let-values()"
"(let-values(((dir_1)(simplify-path(path->complete-path(cadr p_9) dir_0))))"
"(if(eq?(car p_9) 'static-root)"
"(let-values()"
"(for-each"
"(lambda(sub_0)"
"(if(directory-exists?(build-path dir_1 sub_0))"
"(let-values()"
"(let-values(((k_0)(string->symbol(path->string sub_0))))"
"(hash-set! ht_9 k_0(cons dir_1(hash-ref ht_9 k_0 null)))))"
"(void)))"
"(directory-list dir_1)))"
"(if(eq?(car p_9) 'root)"
"(let-values()"
"(begin"
"(if(hash-ref ht_9 #f #f)"
"(void)"
"(let-values()(hash-set! ht_9 #f null)))"
"(hash-for-each"
" ht_9"
"(lambda(k_1 v_10)(hash-set! ht_9 k_1(cons dir_1 v_10))))))"
"(let-values()"
"(let-values(((s_11)(string->symbol(car p_9))))"
"(hash-set! ht_9 s_11(cons(box dir_1)(hash-ref ht_9 s_11 null)))))))))"
"(void)))"
" v_9)"
"(hash-for-each ht_9(lambda(k_2 v_11)(hash-set! ht_9 k_2(reverse v_11))))"
"(hash-set! links-cache links-path_0(cons ts_1 ht_9))"
" ht_9)))))))"
"(cdr links-stamp+cache_0)))))))))))"
"(define-values"
"(normalize-collection-reference)"
"(lambda(collection_3 collection-path_3)"
"(if(string? collection_3)"
"(let-values()"
"        (let-values (((m_1) (regexp-match-positions '#rx\"/+\" collection_3)))"
"(if m_1"
"(if(=(caar m_1)(sub1(string-length collection_3)))"
"(let-values()(values(substring collection_3 0(caar m_1)) collection-path_3))"
"(let-values()"
"(values"
"(substring collection_3 0(caar m_1))"
"(cons(substring collection_3(cdar m_1)) collection-path_3))))"
"(values collection_3 collection-path_3))))"
"(let-values()"
"(let-values(((base_8 name_9 dir?_5)(split-path collection_3)))"
"(if(eq? base_8 'relative)"
"(values name_9 collection-path_3)"
"(normalize-collection-reference base_8(cons name_9 collection-path_3))))))))"
"(define-values"
"(find-col-file)"
"(lambda(fail_3 collection_4 collection-path_4 file-name_1 check-compiled?_1)"
"(let-values(((collection_5 collection-path_5)(normalize-collection-reference collection_4 collection-path_4)))"
"(let-values(((all-paths_0)"
"(let-values(((sym_0)"
"(string->symbol(if(path? collection_5)(path->string collection_5) collection_5))))"
"((letrec-values(((loop_10)"
"(lambda(l_6)"
"(if(null? l_6)"
"(let-values() null)"
"(if(not(car l_6))"
"(let-values()"
"(append(current-library-collection-paths)(loop_10(cdr l_6))))"
"(if(hash?(car l_6))"
"(let-values()"
"(append"
"(map box(hash-ref(car l_6) sym_0 null))"
"(hash-ref(car l_6) #f null)"
"(loop_10(cdr l_6))))"
"(let-values()"
"(let-values(((ht_10)(get-linked-collections(car l_6))))"
"(append"
"(hash-ref ht_10 sym_0 null)"
"(hash-ref ht_10 #f null)"
"(loop_10(cdr l_6)))))))))))"
" loop_10)"
"(current-library-collection-links)))))"
"(let-values(((done_0)(lambda(p_10)(if file-name_1(build-path p_10 file-name_1) p_10))))"
"(let-values(((*build-path-rep_0)(lambda(p_11 c_0)(if(path? p_11)(build-path p_11 c_0)(unbox p_11)))))"
"(let-values(((*directory-exists?_0)"
"(lambda(orig_0 p_12)(if(path? orig_0)(directory-exists? p_12) #t))))"
"(let-values(((to-string_0)(lambda(p_13)(if(path? p_13)(path->string p_13) p_13))))"
"((letrec-values(((cloop_0)"
"(lambda(paths_1 found-col_0)"
"(if(null? paths_1)"
"(if found-col_0"
"(done_0 found-col_0)"
"(let-values(((rest-coll_0)"
"(if(null? collection-path_5)"
"                                                        \"\""
"(apply"
" string-append"
"((letrec-values(((loop_11)"
"(lambda(cp_0)"
"(if(null?(cdr cp_0))"
"(list(to-string_0(car cp_0)))"
"(list*"
"(to-string_0(car cp_0))"
"                                                                                \"/\""
"(loop_11(cdr cp_0)))))))"
" loop_11)"
" collection-path_5)))))"
"(letrec-values(((filter_0)"
"(lambda(f_0 l_7)"
"(if(null? l_7)"
" null"
"(if(f_0(car l_7))"
"(cons(car l_7)(filter_0 f_0(cdr l_7)))"
"(filter_0 f_0(cdr l_7)))))))"
"(fail_3"
"(format"
"                                              \"collection not found\\n  collection: ~s\\n  in collection directories:~a~a\""
"(if(null? collection-path_5)"
"(to-string_0 collection_5)"
"                                                (string-append (to-string_0 collection_5) \"/\" rest-coll_0))"
"(apply"
" string-append"
"(map"
"                                                (lambda (p_14) (format \"\\n ~a ~a\" \" \" p_14))"
"(let-values(((len_0)(length all-paths_0))"
"((clen_0)(length(current-library-collection-paths))))"
"(if(<(- len_0 clen_0) 5)"
" all-paths_0"
"(append"
"(current-library-collection-paths)"
"(list"
"(format"
"                                                       \"... [~a additional linked and package directories]\""
"(- len_0 clen_0))))))))"
"(if(ormap box? all-paths_0)"
"(format"
"                                                 \"\\n   sub-collection: ~s\\n  in parent directories:~a\""
" rest-coll_0"
"(apply"
" string-append"
"(map"
"                                                   (lambda (p_15) (format \"\\n   ~a\" (unbox p_15)))"
"(filter_0 box? all-paths_0))))"
"                                                \"\"))))))"
"(let-values(((dir_2)(*build-path-rep_0(car paths_1) collection_5)))"
"(if(*directory-exists?_0(car paths_1) dir_2)"
"(let-values(((cpath_0)(apply build-path dir_2 collection-path_5)))"
"(if(if(null? collection-path_5) #t(directory-exists? cpath_0))"
"(if file-name_1"
"(if(let-values(((or-part_22)"
"(file-exists?/maybe-compiled"
" cpath_0"
" file-name_1"
" check-compiled?_1)))"
"(if or-part_22"
" or-part_22"
"(let-values(((alt-file-name_0)"
"(let-values(((file-name_2)"
"(if(path? file-name_1)"
"(path->string file-name_1)"
" file-name_1)))"
"(let-values(((len_1)"
"(string-length file-name_2)))"
"(if(>= len_1 4)"
"(if(string=?"
"                                                                                 \".rkt\""
"(substring file-name_2(- len_1 4)))"
"(string-append"
"(substring file-name_2 0(- len_1 4))"
"                                                                               \".ss\")"
" #f)"
" #f)))))"
"(if alt-file-name_0"
"(file-exists?/maybe-compiled"
" cpath_0"
" alt-file-name_0"
" check-compiled?_1)"
" #f))))"
"(done_0 cpath_0)"
"(cloop_0"
"(cdr paths_1)"
"(let-values(((or-part_23) found-col_0))"
"(if or-part_23 or-part_23 cpath_0))))"
"(done_0 cpath_0))"
"(cloop_0(cdr paths_1) found-col_0)))"
"(cloop_0(cdr paths_1) found-col_0)))))))"
" cloop_0)"
" all-paths_0"
" #f)))))))))"
"(define-values"
"(file-exists?/maybe-compiled)"
"(lambda(dir_3 path_2 check-compiled?_2)"
"(let-values(((or-part_24)(file-exists?(build-path dir_3 path_2))))"
"(if or-part_24"
" or-part_24"
"(if check-compiled?_2"
"          (let-values (((try-path_0) (path-add-extension path_2 #\".zo\"))"
"((modes_0)(use-compiled-file-paths))"
"((roots_0)(current-compiled-file-roots)))"
"(ormap"
"(lambda(d_1)"
"(ormap"
"(lambda(mode_0)"
"(file-exists?"
"(let-values(((p_16)(build-path dir_3 mode_0 try-path_0)))"
"(if(eq? d_1 'same)"
"(let-values() p_16)"
"(if(relative-path? d_1)"
"(let-values()(build-path p_16 d_1))"
"(let-values()(reroot-path p_16 d_1)))))))"
" modes_0))"
" roots_0))"
" #f)))))"
"(define-values"
"(find-library-collection-paths)"
"(case-lambda"
"(()(find-library-collection-paths null null))"
"((extra-collects-dirs_0)(find-library-collection-paths extra-collects-dirs_0 null))"
"((extra-collects-dirs_1 post-collects-dirs_0)"
"(let-values(((user-too?_0)(use-user-specific-search-paths))"
"((cons-if_0)(lambda(f_1 r_1)(if f_1(cons f_1 r_1) r_1)))"
"((config-table_1)(get-config-table(find-main-config))))"
"(path-list-string->path-list"
"(if user-too?_0"
"         (let-values (((c_1) (environment-variables-ref (current-environment-variables) #\"PLTCOLLECTS\")))"
"           (if c_1 (bytes->string/locale c_1 '#\\?) \"\"))"
"         \"\")"
"(add-config-search"
" config-table_1"
" 'collects-search-dirs"
"(cons-if_0"
"(if user-too?_0"
"           (build-path (find-system-path 'addon-dir) (get-installation-name config-table_1) \"collects\")"
" #f)"
"((letrec-values(((loop_12)"
"(lambda(l_8)"
"(if(null? l_8)"
" null"
"(let-values(((collects-path_1)(car l_8)))"
"(let-values(((v_12)(exe-relative-path->complete-path collects-path_1)))"
"(if v_12"
"(cons"
"(simplify-path(path->complete-path v_12(current-directory)))"
"(loop_12(cdr l_8)))"
"(loop_12(cdr l_8)))))))))"
" loop_12)"
"(append extra-collects-dirs_1(list(find-system-path 'collects-dir)) post-collects-dirs_0)))))))))"
"(define-values(load/use-compiled)(lambda(f_2)((current-load/use-compiled) f_2 #f)))"
"(define-values"
"(embedded-load)"
"(lambda(start_0 end_0 str_1)"
"(let-values(((s_12)"
"(if str_1"
" str_1"
"(let-values(((sp_0)(find-system-path 'exec-file)))"
"(let-values(((exe_0)(find-executable-path sp_0 #f)))"
"(let-values(((start_1)"
"(let-values(((or-part_25)(string->number start_0)))"
"(if or-part_25 or-part_25 0))))"
"(let-values(((end_1)"
"(let-values(((or-part_3)(string->number end_0)))(if or-part_3 or-part_3 0))))"
"(with-input-from-file"
" exe_0"
"(lambda()"
"(begin"
"(file-position(current-input-port) start_1)"
"(read-bytes(max 0(- end_1 start_1)))))))))))))"
"(let-values(((p_17)(open-input-bytes s_12)))"
"((letrec-values(((loop_13)"
"(lambda()"
"(let-values(((e_2)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/read-accept-compiled"
" #t"
" 1/read-accept-reader"
" #t"
" 1/read-accept-lang"
" #t"
" read-on-demand-source"
" #t)"
"(let-values()(1/read p_17)))))"
"(if(eof-object? e_2)(void)(let-values()(begin((current-eval) e_2)(loop_13))))))))"
" loop_13))))))"
"(define-values"
"(prop:procedure-accessor procedure-accessor? procedure-accessor-ref)"
"(make-struct-type-property"
" 'procedure"
"(lambda(v_13 info-l_0)(if(exact-integer? v_13)(make-struct-field-accessor(list-ref info-l_0 3) v_13) #f))))"
"(define-values"
"(new-prop:procedure new-procedure? new-procedure-ref)"
"(make-struct-type-property 'procedure #f(list(cons prop:procedure values)(cons prop:procedure-accessor values))))"
"(define-values(print-values)(lambda vs_0(begin(for-each(current-print) vs_0)(apply values vs_0))))"
"(define-values"
"(reverse$1)"
"(lambda(l_9)"
"(begin"
"      (if (list? l_9) (void) (raise-argument-error 'reverse \"list?\" l_9))"
"(letrec-values(((loop_14)(lambda(a_2 l_10)(if(null? l_10) a_2(loop_14(cons(car l_10) a_2)(cdr l_10))))))"
"(loop_14 null l_9)))))"
"(define-values"
"(sort vector-sort vector-sort!)"
"(let-values()"
"(let-values(((precompiled-sorts_0) #f))"
"(let-values(((precompile-sorts!_0)"
"(lambda()"
"(let-values(((sorts_0)(make-hasheq)))"
"(let-values()"
"(begin"
"(let-values(((sort-proc_0)"
"(lambda(A_0 n_1)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_0)(unsafe-fxrshift n_1 1)))"
"(let-values(((n/2+_0)(unsafe-fx- n_1 n/2-_0)))"
"(letrec-values(((copying-mergesort_0)"
"(lambda(Alo_0 Blo_0 n_2)"
"(if(unsafe-fx= n_2 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_0"
" Blo_0"
"(unsafe-vector-ref A_0 Alo_0)))"
"(if(unsafe-fx= n_2 2)"
"(let-values()"
"(let-values(((x_0)"
"(unsafe-vector-ref"
" A_0"
" Alo_0))"
"((y_0)"
"(unsafe-vector-ref"
" A_0"
"(unsafe-fx+ Alo_0 1))))"
"(if(unsafe-fl< y_0 x_0)"
"(begin"
"(unsafe-vector-set! A_0 Blo_0 y_0)"
"(unsafe-vector-set!"
" A_0"
"(unsafe-fx+ Blo_0 1)"
" x_0))"
"(begin"
"(unsafe-vector-set! A_0 Blo_0 x_0)"
"(unsafe-vector-set!"
" A_0"
"(unsafe-fx+ Blo_0 1)"
" y_0)))))"
"(if(unsafe-fx< n_2 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_0"
" Blo_0"
"(unsafe-vector-ref A_0 Alo_0))"
"((letrec-values(((iloop_0)"
"(lambda(i_4)"
"(if(unsafe-fx<"
" i_4"
" n_2)"
"(let-values()"
"(let-values(((ref-i_0)"
"(unsafe-vector-ref"
" A_0"
"(unsafe-fx+"
" Alo_0"
" i_4))))"
"((letrec-values(((jloop_0)"
"(lambda(j_0)"
"(let-values(((ref-j-1_0)"
"(unsafe-vector-ref"
" A_0"
"(unsafe-fx-"
" j_0"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_0"
" j_0)"
"(unsafe-fl<"
" ref-i_0"
" ref-j-1_0)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_0"
" j_0"
" ref-j-1_0)"
"(jloop_0"
"(unsafe-fx-"
" j_0"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_0"
" j_0"
" ref-i_0)"
"(iloop_0"
"(unsafe-fx+"
" i_4"
" 1))))))))"
" jloop_0)"
"(unsafe-fx+"
" Blo_0"
" i_4))))"
"(void)))))"
" iloop_0)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1)"
"(unsafe-fxrshift n_2 1)))"
"(let-values(((n/2+_1)"
"(unsafe-fx- n_2 n/2-_1)))"
"(let-values(((Amid1_0)"
"(unsafe-fx+"
" Alo_0"
" n/2-_1))"
"((Amid2_0)"
"(unsafe-fx+"
" Alo_0"
" n/2+_1))"
"((Bmid1_0)"
"(unsafe-fx+"
" Blo_0"
" n/2-_1)))"
"(begin"
"(copying-mergesort_0"
" Amid1_0"
" Bmid1_0"
" n/2+_1)"
"(copying-mergesort_0"
" Alo_0"
" Amid2_0"
" n/2-_1)"
"(let-values(((b2_0)"
"(unsafe-fx+"
" Blo_0"
" n_2)))"
"((letrec-values(((loop_15)"
"(lambda(a1_0"
" b1_0"
" c1_0)"
"(let-values(((x_1)"
"(unsafe-vector-ref"
" A_0"
" a1_0))"
"((y_1)"
"(unsafe-vector-ref"
" A_0"
" b1_0)))"
"(if(not"
"(unsafe-fl<"
" y_1"
" x_1))"
"(begin"
"(unsafe-vector-set!"
" A_0"
" c1_0"
" x_1)"
"(let-values(((a1_1)"
"(unsafe-fx+"
" a1_0"
" 1))"
"((c1_1)"
"(unsafe-fx+"
" c1_0"
" 1)))"
"(if(unsafe-fx<"
" c1_1"
" b1_0)"
"(let-values()"
"(loop_15"
" a1_1"
" b1_0"
" c1_1))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_0"
" c1_0"
" y_1)"
"(let-values(((b1_1)"
"(unsafe-fx+"
" b1_0"
" 1))"
"((c1_2)"
"(unsafe-fx+"
" c1_0"
" 1)))"
"(if(unsafe-fx<="
" b2_0"
" b1_1)"
"((letrec-values(((loop_16)"
"(lambda(a1_2"
" c1_3)"
"(if(unsafe-fx<"
" c1_3"
" b1_1)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_0"
" c1_3"
"(unsafe-vector-ref"
" A_0"
" a1_2))"
"(loop_16"
"(unsafe-fx+"
" a1_2"
" 1)"
"(unsafe-fx+"
" c1_3"
" 1))))"
"(void)))))"
" loop_16)"
" a1_0"
" c1_2)"
"(loop_15"
" a1_0"
" b1_1"
" c1_2)))))))))"
" loop_15)"
" Amid2_0"
" Bmid1_0"
" Blo_0)))))))))))))"
"(let-values(((Alo_1) 0)"
"((Amid1_1) n/2-_0)"
"((Amid2_1) n/2+_0)"
"((Ahi_0) n_1)"
"((B1lo_0) n_1))"
"(begin"
"(copying-mergesort_0 Amid1_1 B1lo_0 n/2+_0)"
"(if(zero? n/2-_0)"
"(void)"
"(let-values()(copying-mergesort_0 Alo_1 Amid2_1 n/2-_0)))"
"(let-values(((b2_1) Ahi_0))"
"((letrec-values(((loop_17)"
"(lambda(a1_3 b1_2 c1_4)"
"(let-values(((x_2)"
"(unsafe-vector-ref"
" A_0"
" a1_3))"
"((y_2)"
"(unsafe-vector-ref"
" A_0"
" b1_2)))"
"(if(unsafe-fl< x_2 y_2)"
"(begin"
"(unsafe-vector-set! A_0 c1_4 x_2)"
"(let-values(((a1_4)"
"(unsafe-fx+ a1_3 1))"
"((c1_5)"
"(unsafe-fx+"
" c1_4"
" 1)))"
"(if(unsafe-fx< c1_5 b1_2)"
"(let-values()"
"(loop_17 a1_4 b1_2 c1_5))"
"(void))))"
"(begin"
"(unsafe-vector-set! A_0 c1_4 y_2)"
"(let-values(((b1_3)"
"(unsafe-fx+ b1_2 1))"
"((c1_6)"
"(unsafe-fx+"
" c1_4"
" 1)))"
"(if(unsafe-fx<= b2_1 b1_3)"
"((letrec-values(((loop_18)"
"(lambda(a1_5"
" c1_7)"
"(if(unsafe-fx<"
" c1_7"
" b1_3)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_0"
" c1_7"
"(unsafe-vector-ref"
" A_0"
" a1_5))"
"(loop_18"
"(unsafe-fx+"
" a1_5"
" 1)"
"(unsafe-fx+"
" c1_7"
" 1))))"
"(void)))))"
" loop_18)"
" a1_3"
" c1_6)"
"(loop_17"
" a1_3"
" b1_3"
" c1_6)))))))))"
" loop_17)"
" B1lo_0"
" Amid2_1"
" Alo_1))))))))))))"
"(begin"
"(hash-set! sorts_0 unsafe-fl< sort-proc_0)"
"(hash-set! sorts_0 unsafe-fl<= sort-proc_0)))"
"(let-values(((sort-proc_1)"
"(lambda(A_1 n_3)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_2)(unsafe-fxrshift n_3 1)))"
"(let-values(((n/2+_2)(unsafe-fx- n_3 n/2-_2)))"
"(letrec-values(((copying-mergesort_1)"
"(lambda(Alo_2 Blo_1 n_4)"
"(if(unsafe-fx= n_4 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1"
" Blo_1"
"(unsafe-vector-ref A_1 Alo_2)))"
"(if(unsafe-fx= n_4 2)"
"(let-values()"
"(let-values(((x_3)"
"(unsafe-vector-ref"
" A_1"
" Alo_2))"
"((y_3)"
"(unsafe-vector-ref"
" A_1"
"(unsafe-fx+ Alo_2 1))))"
"(if(unsafe-fl> y_3 x_3)"
"(begin"
"(unsafe-vector-set! A_1 Blo_1 y_3)"
"(unsafe-vector-set!"
" A_1"
"(unsafe-fx+ Blo_1 1)"
" x_3))"
"(begin"
"(unsafe-vector-set! A_1 Blo_1 x_3)"
"(unsafe-vector-set!"
" A_1"
"(unsafe-fx+ Blo_1 1)"
" y_3)))))"
"(if(unsafe-fx< n_4 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1"
" Blo_1"
"(unsafe-vector-ref A_1 Alo_2))"
"((letrec-values(((iloop_1)"
"(lambda(i_5)"
"(if(unsafe-fx<"
" i_5"
" n_4)"
"(let-values()"
"(let-values(((ref-i_1)"
"(unsafe-vector-ref"
" A_1"
"(unsafe-fx+"
" Alo_2"
" i_5))))"
"((letrec-values(((jloop_1)"
"(lambda(j_1)"
"(let-values(((ref-j-1_1)"
"(unsafe-vector-ref"
" A_1"
"(unsafe-fx-"
" j_1"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1"
" j_1)"
"(unsafe-fl>"
" ref-i_1"
" ref-j-1_1)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1"
" j_1"
" ref-j-1_1)"
"(jloop_1"
"(unsafe-fx-"
" j_1"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1"
" j_1"
" ref-i_1)"
"(iloop_1"
"(unsafe-fx+"
" i_5"
" 1))))))))"
" jloop_1)"
"(unsafe-fx+"
" Blo_1"
" i_5))))"
"(void)))))"
" iloop_1)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_3)"
"(unsafe-fxrshift n_4 1)))"
"(let-values(((n/2+_3)"
"(unsafe-fx- n_4 n/2-_3)))"
"(let-values(((Amid1_2)"
"(unsafe-fx+"
" Alo_2"
" n/2-_3))"
"((Amid2_2)"
"(unsafe-fx+"
" Alo_2"
" n/2+_3))"
"((Bmid1_1)"
"(unsafe-fx+"
" Blo_1"
" n/2-_3)))"
"(begin"
"(copying-mergesort_1"
" Amid1_2"
" Bmid1_1"
" n/2+_3)"
"(copying-mergesort_1"
" Alo_2"
" Amid2_2"
" n/2-_3)"
"(let-values(((b2_2)"
"(unsafe-fx+"
" Blo_1"
" n_4)))"
"((letrec-values(((loop_19)"
"(lambda(a1_6"
" b1_4"
" c1_8)"
"(let-values(((x_4)"
"(unsafe-vector-ref"
" A_1"
" a1_6))"
"((y_4)"
"(unsafe-vector-ref"
" A_1"
" b1_4)))"
"(if(not"
"(unsafe-fl>"
" y_4"
" x_4))"
"(begin"
"(unsafe-vector-set!"
" A_1"
" c1_8"
" x_4)"
"(let-values(((a1_7)"
"(unsafe-fx+"
" a1_6"
" 1))"
"((c1_9)"
"(unsafe-fx+"
" c1_8"
" 1)))"
"(if(unsafe-fx<"
" c1_9"
" b1_4)"
"(let-values()"
"(loop_19"
" a1_7"
" b1_4"
" c1_9))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1"
" c1_8"
" y_4)"
"(let-values(((b1_5)"
"(unsafe-fx+"
" b1_4"
" 1))"
"((c1_10)"
"(unsafe-fx+"
" c1_8"
" 1)))"
"(if(unsafe-fx<="
" b2_2"
" b1_5)"
"((letrec-values(((loop_20)"
"(lambda(a1_8"
" c1_11)"
"(if(unsafe-fx<"
" c1_11"
" b1_5)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1"
" c1_11"
"(unsafe-vector-ref"
" A_1"
" a1_8))"
"(loop_20"
"(unsafe-fx+"
" a1_8"
" 1)"
"(unsafe-fx+"
" c1_11"
" 1))))"
"(void)))))"
" loop_20)"
" a1_6"
" c1_10)"
"(loop_19"
" a1_6"
" b1_5"
" c1_10)))))))))"
" loop_19)"
" Amid2_2"
" Bmid1_1"
" Blo_1)))))))))))))"
"(let-values(((Alo_3) 0)"
"((Amid1_3) n/2-_2)"
"((Amid2_3) n/2+_2)"
"((Ahi_1) n_3)"
"((B1lo_1) n_3))"
"(begin"
"(copying-mergesort_1 Amid1_3 B1lo_1 n/2+_2)"
"(if(zero? n/2-_2)"
"(void)"
"(let-values()(copying-mergesort_1 Alo_3 Amid2_3 n/2-_2)))"
"(let-values(((b2_3) Ahi_1))"
"((letrec-values(((loop_21)"
"(lambda(a1_9 b1_6 c1_12)"
"(let-values(((x_5)"
"(unsafe-vector-ref"
" A_1"
" a1_9))"
"((y_5)"
"(unsafe-vector-ref"
" A_1"
" b1_6)))"
"(if(unsafe-fl> x_5 y_5)"
"(begin"
"(unsafe-vector-set! A_1 c1_12 x_5)"
"(let-values(((a1_10)"
"(unsafe-fx+ a1_9 1))"
"((c1_13)"
"(unsafe-fx+"
" c1_12"
" 1)))"
"(if(unsafe-fx< c1_13 b1_6)"
"(let-values()"
"(loop_21 a1_10 b1_6 c1_13))"
"(void))))"
"(begin"
"(unsafe-vector-set! A_1 c1_12 y_5)"
"(let-values(((b1_7)"
"(unsafe-fx+ b1_6 1))"
"((c1_14)"
"(unsafe-fx+"
" c1_12"
" 1)))"
"(if(unsafe-fx<= b2_3 b1_7)"
"((letrec-values(((loop_22)"
"(lambda(a1_11"
" c1_15)"
"(if(unsafe-fx<"
" c1_15"
" b1_7)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1"
" c1_15"
"(unsafe-vector-ref"
" A_1"
" a1_11))"
"(loop_22"
"(unsafe-fx+"
" a1_11"
" 1)"
"(unsafe-fx+"
" c1_15"
" 1))))"
"(void)))))"
" loop_22)"
" a1_9"
" c1_14)"
"(loop_21"
" a1_9"
" b1_7"
" c1_14)))))))))"
" loop_21)"
" B1lo_1"
" Amid2_3"
" Alo_3))))))))))))"
"(begin"
"(hash-set! sorts_0 unsafe-fl> sort-proc_1)"
"(hash-set! sorts_0 unsafe-fl>= sort-proc_1)))"
"(let-values(((sort-proc_2)"
"(lambda(A_2 n_5)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_4)(unsafe-fxrshift n_5 1)))"
"(let-values(((n/2+_4)(unsafe-fx- n_5 n/2-_4)))"
"(letrec-values(((copying-mergesort_2)"
"(lambda(Alo_4 Blo_2 n_6)"
"(if(unsafe-fx= n_6 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_2"
" Blo_2"
"(unsafe-vector-ref A_2 Alo_4)))"
"(if(unsafe-fx= n_6 2)"
"(let-values()"
"(let-values(((x_6)"
"(unsafe-vector-ref"
" A_2"
" Alo_4))"
"((y_6)"
"(unsafe-vector-ref"
" A_2"
"(unsafe-fx+ Alo_4 1))))"
"(if(unsafe-fx< y_6 x_6)"
"(begin"
"(unsafe-vector-set! A_2 Blo_2 y_6)"
"(unsafe-vector-set!"
" A_2"
"(unsafe-fx+ Blo_2 1)"
" x_6))"
"(begin"
"(unsafe-vector-set! A_2 Blo_2 x_6)"
"(unsafe-vector-set!"
" A_2"
"(unsafe-fx+ Blo_2 1)"
" y_6)))))"
"(if(unsafe-fx< n_6 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_2"
" Blo_2"
"(unsafe-vector-ref A_2 Alo_4))"
"((letrec-values(((iloop_2)"
"(lambda(i_6)"
"(if(unsafe-fx<"
" i_6"
" n_6)"
"(let-values()"
"(let-values(((ref-i_2)"
"(unsafe-vector-ref"
" A_2"
"(unsafe-fx+"
" Alo_4"
" i_6))))"
"((letrec-values(((jloop_2)"
"(lambda(j_2)"
"(let-values(((ref-j-1_2)"
"(unsafe-vector-ref"
" A_2"
"(unsafe-fx-"
" j_2"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_2"
" j_2)"
"(unsafe-fx<"
" ref-i_2"
" ref-j-1_2)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_2"
" j_2"
" ref-j-1_2)"
"(jloop_2"
"(unsafe-fx-"
" j_2"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_2"
" j_2"
" ref-i_2)"
"(iloop_2"
"(unsafe-fx+"
" i_6"
" 1))))))))"
" jloop_2)"
"(unsafe-fx+"
" Blo_2"
" i_6))))"
"(void)))))"
" iloop_2)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_5)"
"(unsafe-fxrshift n_6 1)))"
"(let-values(((n/2+_5)"
"(unsafe-fx- n_6 n/2-_5)))"
"(let-values(((Amid1_4)"
"(unsafe-fx+"
" Alo_4"
" n/2-_5))"
"((Amid2_4)"
"(unsafe-fx+"
" Alo_4"
" n/2+_5))"
"((Bmid1_2)"
"(unsafe-fx+"
" Blo_2"
" n/2-_5)))"
"(begin"
"(copying-mergesort_2"
" Amid1_4"
" Bmid1_2"
" n/2+_5)"
"(copying-mergesort_2"
" Alo_4"
" Amid2_4"
" n/2-_5)"
"(let-values(((b2_4)"
"(unsafe-fx+"
" Blo_2"
" n_6)))"
"((letrec-values(((loop_23)"
"(lambda(a1_12"
" b1_8"
" c1_16)"
"(let-values(((x_7)"
"(unsafe-vector-ref"
" A_2"
" a1_12))"
"((y_7)"
"(unsafe-vector-ref"
" A_2"
" b1_8)))"
"(if(not"
"(unsafe-fx<"
" y_7"
" x_7))"
"(begin"
"(unsafe-vector-set!"
" A_2"
" c1_16"
" x_7)"
"(let-values(((a1_13)"
"(unsafe-fx+"
" a1_12"
" 1))"
"((c1_17)"
"(unsafe-fx+"
" c1_16"
" 1)))"
"(if(unsafe-fx<"
" c1_17"
" b1_8)"
"(let-values()"
"(loop_23"
" a1_13"
" b1_8"
" c1_17))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_2"
" c1_16"
" y_7)"
"(let-values(((b1_9)"
"(unsafe-fx+"
" b1_8"
" 1))"
"((c1_18)"
"(unsafe-fx+"
" c1_16"
" 1)))"
"(if(unsafe-fx<="
" b2_4"
" b1_9)"
"((letrec-values(((loop_24)"
"(lambda(a1_14"
" c1_19)"
"(if(unsafe-fx<"
" c1_19"
" b1_9)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_2"
" c1_19"
"(unsafe-vector-ref"
" A_2"
" a1_14))"
"(loop_24"
"(unsafe-fx+"
" a1_14"
" 1)"
"(unsafe-fx+"
" c1_19"
" 1))))"
"(void)))))"
" loop_24)"
" a1_12"
" c1_18)"
"(loop_23"
" a1_12"
" b1_9"
" c1_18)))))))))"
" loop_23)"
" Amid2_4"
" Bmid1_2"
" Blo_2)))))))))))))"
"(let-values(((Alo_5) 0)"
"((Amid1_5) n/2-_4)"
"((Amid2_5) n/2+_4)"
"((Ahi_2) n_5)"
"((B1lo_2) n_5))"
"(begin"
"(copying-mergesort_2 Amid1_5 B1lo_2 n/2+_4)"
"(if(zero? n/2-_4)"
"(void)"
"(let-values()(copying-mergesort_2 Alo_5 Amid2_5 n/2-_4)))"
"(let-values(((b2_5) Ahi_2))"
"((letrec-values(((loop_25)"
"(lambda(a1_15 b1_10 c1_20)"
"(let-values(((x_8)"
"(unsafe-vector-ref"
" A_2"
" a1_15))"
"((y_8)"
"(unsafe-vector-ref"
" A_2"
" b1_10)))"
"(if(unsafe-fx< x_8 y_8)"
"(begin"
"(unsafe-vector-set! A_2 c1_20 x_8)"
"(let-values(((a1_16)"
"(unsafe-fx+"
" a1_15"
" 1))"
"((c1_21)"
"(unsafe-fx+"
" c1_20"
" 1)))"
"(if(unsafe-fx< c1_21 b1_10)"
"(let-values()"
"(loop_25 a1_16 b1_10 c1_21))"
"(void))))"
"(begin"
"(unsafe-vector-set! A_2 c1_20 y_8)"
"(let-values(((b1_11)"
"(unsafe-fx+"
" b1_10"
" 1))"
"((c1_22)"
"(unsafe-fx+"
" c1_20"
" 1)))"
"(if(unsafe-fx<= b2_5 b1_11)"
"((letrec-values(((loop_26)"
"(lambda(a1_17"
" c1_23)"
"(if(unsafe-fx<"
" c1_23"
" b1_11)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_2"
" c1_23"
"(unsafe-vector-ref"
" A_2"
" a1_17))"
"(loop_26"
"(unsafe-fx+"
" a1_17"
" 1)"
"(unsafe-fx+"
" c1_23"
" 1))))"
"(void)))))"
" loop_26)"
" a1_15"
" c1_22)"
"(loop_25"
" a1_15"
" b1_11"
" c1_22)))))))))"
" loop_25)"
" B1lo_2"
" Amid2_5"
" Alo_5))))))))))))"
"(begin"
"(hash-set! sorts_0 unsafe-fx< sort-proc_2)"
"(hash-set! sorts_0 unsafe-fx<= sort-proc_2)))"
"(let-values(((sort-proc_3)"
"(lambda(A_3 n_7)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_6)(unsafe-fxrshift n_7 1)))"
"(let-values(((n/2+_6)(unsafe-fx- n_7 n/2-_6)))"
"(letrec-values(((copying-mergesort_3)"
"(lambda(Alo_6 Blo_3 n_8)"
"(if(unsafe-fx= n_8 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_3"
" Blo_3"
"(unsafe-vector-ref A_3 Alo_6)))"
"(if(unsafe-fx= n_8 2)"
"(let-values()"
"(let-values(((x_9)"
"(unsafe-vector-ref"
" A_3"
" Alo_6))"
"((y_9)"
"(unsafe-vector-ref"
" A_3"
"(unsafe-fx+ Alo_6 1))))"
"(if(unsafe-fx> y_9 x_9)"
"(begin"
"(unsafe-vector-set! A_3 Blo_3 y_9)"
"(unsafe-vector-set!"
" A_3"
"(unsafe-fx+ Blo_3 1)"
" x_9))"
"(begin"
"(unsafe-vector-set! A_3 Blo_3 x_9)"
"(unsafe-vector-set!"
" A_3"
"(unsafe-fx+ Blo_3 1)"
" y_9)))))"
"(if(unsafe-fx< n_8 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_3"
" Blo_3"
"(unsafe-vector-ref A_3 Alo_6))"
"((letrec-values(((iloop_3)"
"(lambda(i_7)"
"(if(unsafe-fx<"
" i_7"
" n_8)"
"(let-values()"
"(let-values(((ref-i_3)"
"(unsafe-vector-ref"
" A_3"
"(unsafe-fx+"
" Alo_6"
" i_7))))"
"((letrec-values(((jloop_3)"
"(lambda(j_3)"
"(let-values(((ref-j-1_3)"
"(unsafe-vector-ref"
" A_3"
"(unsafe-fx-"
" j_3"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_3"
" j_3)"
"(unsafe-fx>"
" ref-i_3"
" ref-j-1_3)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_3"
" j_3"
" ref-j-1_3)"
"(jloop_3"
"(unsafe-fx-"
" j_3"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_3"
" j_3"
" ref-i_3)"
"(iloop_3"
"(unsafe-fx+"
" i_7"
" 1))))))))"
" jloop_3)"
"(unsafe-fx+"
" Blo_3"
" i_7))))"
"(void)))))"
" iloop_3)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_7)"
"(unsafe-fxrshift n_8 1)))"
"(let-values(((n/2+_7)"
"(unsafe-fx- n_8 n/2-_7)))"
"(let-values(((Amid1_6)"
"(unsafe-fx+"
" Alo_6"
" n/2-_7))"
"((Amid2_6)"
"(unsafe-fx+"
" Alo_6"
" n/2+_7))"
"((Bmid1_3)"
"(unsafe-fx+"
" Blo_3"
" n/2-_7)))"
"(begin"
"(copying-mergesort_3"
" Amid1_6"
" Bmid1_3"
" n/2+_7)"
"(copying-mergesort_3"
" Alo_6"
" Amid2_6"
" n/2-_7)"
"(let-values(((b2_6)"
"(unsafe-fx+"
" Blo_3"
" n_8)))"
"((letrec-values(((loop_27)"
"(lambda(a1_18"
" b1_12"
" c1_24)"
"(let-values(((x_10)"
"(unsafe-vector-ref"
" A_3"
" a1_18))"
"((y_10)"
"(unsafe-vector-ref"
" A_3"
" b1_12)))"
"(if(not"
"(unsafe-fx>"
" y_10"
" x_10))"
"(begin"
"(unsafe-vector-set!"
" A_3"
" c1_24"
" x_10)"
"(let-values(((a1_19)"
"(unsafe-fx+"
" a1_18"
" 1))"
"((c1_25)"
"(unsafe-fx+"
" c1_24"
" 1)))"
"(if(unsafe-fx<"
" c1_25"
" b1_12)"
"(let-values()"
"(loop_27"
" a1_19"
" b1_12"
" c1_25))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_3"
" c1_24"
" y_10)"
"(let-values(((b1_13)"
"(unsafe-fx+"
" b1_12"
" 1))"
"((c1_26)"
"(unsafe-fx+"
" c1_24"
" 1)))"
"(if(unsafe-fx<="
" b2_6"
" b1_13)"
"((letrec-values(((loop_28)"
"(lambda(a1_20"
" c1_27)"
"(if(unsafe-fx<"
" c1_27"
" b1_13)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_3"
" c1_27"
"(unsafe-vector-ref"
" A_3"
" a1_20))"
"(loop_28"
"(unsafe-fx+"
" a1_20"
" 1)"
"(unsafe-fx+"
" c1_27"
" 1))))"
"(void)))))"
" loop_28)"
" a1_18"
" c1_26)"
"(loop_27"
" a1_18"
" b1_13"
" c1_26)))))))))"
" loop_27)"
" Amid2_6"
" Bmid1_3"
" Blo_3)))))))))))))"
"(let-values(((Alo_7) 0)"
"((Amid1_7) n/2-_6)"
"((Amid2_7) n/2+_6)"
"((Ahi_3) n_7)"
"((B1lo_3) n_7))"
"(begin"
"(copying-mergesort_3 Amid1_7 B1lo_3 n/2+_6)"
"(if(zero? n/2-_6)"
"(void)"
"(let-values()(copying-mergesort_3 Alo_7 Amid2_7 n/2-_6)))"
"(let-values(((b2_7) Ahi_3))"
"((letrec-values(((loop_29)"
"(lambda(a1_21 b1_14 c1_28)"
"(let-values(((x_11)"
"(unsafe-vector-ref"
" A_3"
" a1_21))"
"((y_11)"
"(unsafe-vector-ref"
" A_3"
" b1_14)))"
"(if(unsafe-fx> x_11 y_11)"
"(begin"
"(unsafe-vector-set!"
" A_3"
" c1_28"
" x_11)"
"(let-values(((a1_22)"
"(unsafe-fx+"
" a1_21"
" 1))"
"((c1_29)"
"(unsafe-fx+"
" c1_28"
" 1)))"
"(if(unsafe-fx< c1_29 b1_14)"
"(let-values()"
"(loop_29 a1_22 b1_14 c1_29))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_3"
" c1_28"
" y_11)"
"(let-values(((b1_15)"
"(unsafe-fx+"
" b1_14"
" 1))"
"((c1_30)"
"(unsafe-fx+"
" c1_28"
" 1)))"
"(if(unsafe-fx<= b2_7 b1_15)"
"((letrec-values(((loop_30)"
"(lambda(a1_23"
" c1_31)"
"(if(unsafe-fx<"
" c1_31"
" b1_15)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_3"
" c1_31"
"(unsafe-vector-ref"
" A_3"
" a1_23))"
"(loop_30"
"(unsafe-fx+"
" a1_23"
" 1)"
"(unsafe-fx+"
" c1_31"
" 1))))"
"(void)))))"
" loop_30)"
" a1_21"
" c1_30)"
"(loop_29"
" a1_21"
" b1_15"
" c1_30)))))))))"
" loop_29)"
" B1lo_3"
" Amid2_7"
" Alo_7))))))))))))"
"(begin"
"(hash-set! sorts_0 unsafe-fx> sort-proc_3)"
"(hash-set! sorts_0 unsafe-fx>= sort-proc_3)))"
"(let-values(((sort-proc_4)"
"(lambda(A_4 n_9)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_8)(unsafe-fxrshift n_9 1)))"
"(let-values(((n/2+_8)(unsafe-fx- n_9 n/2-_8)))"
"(letrec-values(((copying-mergesort_4)"
"(lambda(Alo_8 Blo_4 n_10)"
"(if(unsafe-fx= n_10 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_4"
" Blo_4"
"(unsafe-vector-ref A_4 Alo_8)))"
"(if(unsafe-fx= n_10 2)"
"(let-values()"
"(let-values(((x_12)"
"(unsafe-vector-ref"
" A_4"
" Alo_8))"
"((y_12)"
"(unsafe-vector-ref"
" A_4"
"(unsafe-fx+ Alo_8 1))))"
"(if(< y_12 x_12)"
"(begin"
"(unsafe-vector-set! A_4 Blo_4 y_12)"
"(unsafe-vector-set!"
" A_4"
"(unsafe-fx+ Blo_4 1)"
" x_12))"
"(begin"
"(unsafe-vector-set! A_4 Blo_4 x_12)"
"(unsafe-vector-set!"
" A_4"
"(unsafe-fx+ Blo_4 1)"
" y_12)))))"
"(if(unsafe-fx< n_10 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_4"
" Blo_4"
"(unsafe-vector-ref A_4 Alo_8))"
"((letrec-values(((iloop_4)"
"(lambda(i_8)"
"(if(unsafe-fx<"
" i_8"
" n_10)"
"(let-values()"
"(let-values(((ref-i_4)"
"(unsafe-vector-ref"
" A_4"
"(unsafe-fx+"
" Alo_8"
" i_8))))"
"((letrec-values(((jloop_4)"
"(lambda(j_4)"
"(let-values(((ref-j-1_4)"
"(unsafe-vector-ref"
" A_4"
"(unsafe-fx-"
" j_4"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_4"
" j_4)"
"(<"
" ref-i_4"
" ref-j-1_4)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_4"
" j_4"
" ref-j-1_4)"
"(jloop_4"
"(unsafe-fx-"
" j_4"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_4"
" j_4"
" ref-i_4)"
"(iloop_4"
"(unsafe-fx+"
" i_8"
" 1))))))))"
" jloop_4)"
"(unsafe-fx+"
" Blo_4"
" i_8))))"
"(void)))))"
" iloop_4)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_9)"
"(unsafe-fxrshift n_10 1)))"
"(let-values(((n/2+_9)"
"(unsafe-fx-"
" n_10"
" n/2-_9)))"
"(let-values(((Amid1_8)"
"(unsafe-fx+"
" Alo_8"
" n/2-_9))"
"((Amid2_8)"
"(unsafe-fx+"
" Alo_8"
" n/2+_9))"
"((Bmid1_4)"
"(unsafe-fx+"
" Blo_4"
" n/2-_9)))"
"(begin"
"(copying-mergesort_4"
" Amid1_8"
" Bmid1_4"
" n/2+_9)"
"(copying-mergesort_4"
" Alo_8"
" Amid2_8"
" n/2-_9)"
"(let-values(((b2_8)"
"(unsafe-fx+"
" Blo_4"
" n_10)))"
"((letrec-values(((loop_31)"
"(lambda(a1_24"
" b1_16"
" c1_32)"
"(let-values(((x_13)"
"(unsafe-vector-ref"
" A_4"
" a1_24))"
"((y_13)"
"(unsafe-vector-ref"
" A_4"
" b1_16)))"
"(if(not"
"(<"
" y_13"
" x_13))"
"(begin"
"(unsafe-vector-set!"
" A_4"
" c1_32"
" x_13)"
"(let-values(((a1_25)"
"(unsafe-fx+"
" a1_24"
" 1))"
"((c1_33)"
"(unsafe-fx+"
" c1_32"
" 1)))"
"(if(unsafe-fx<"
" c1_33"
" b1_16)"
"(let-values()"
"(loop_31"
" a1_25"
" b1_16"
" c1_33))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_4"
" c1_32"
" y_13)"
"(let-values(((b1_17)"
"(unsafe-fx+"
" b1_16"
" 1))"
"((c1_34)"
"(unsafe-fx+"
" c1_32"
" 1)))"
"(if(unsafe-fx<="
" b2_8"
" b1_17)"
"((letrec-values(((loop_32)"
"(lambda(a1_26"
" c1_35)"
"(if(unsafe-fx<"
" c1_35"
" b1_17)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_4"
" c1_35"
"(unsafe-vector-ref"
" A_4"
" a1_26))"
"(loop_32"
"(unsafe-fx+"
" a1_26"
" 1)"
"(unsafe-fx+"
" c1_35"
" 1))))"
"(void)))))"
" loop_32)"
" a1_24"
" c1_34)"
"(loop_31"
" a1_24"
" b1_17"
" c1_34)))))))))"
" loop_31)"
" Amid2_8"
" Bmid1_4"
" Blo_4)))))))))))))"
"(let-values(((Alo_9) 0)"
"((Amid1_9) n/2-_8)"
"((Amid2_9) n/2+_8)"
"((Ahi_4) n_9)"
"((B1lo_4) n_9))"
"(begin"
"(copying-mergesort_4 Amid1_9 B1lo_4 n/2+_8)"
"(if(zero? n/2-_8)"
"(void)"
"(let-values()(copying-mergesort_4 Alo_9 Amid2_9 n/2-_8)))"
"(let-values(((b2_9) Ahi_4))"
"((letrec-values(((loop_33)"
"(lambda(a1_27 b1_18 c1_36)"
"(let-values(((x_14)"
"(unsafe-vector-ref"
" A_4"
" a1_27))"
"((y_14)"
"(unsafe-vector-ref"
" A_4"
" b1_18)))"
"(if(< x_14 y_14)"
"(begin"
"(unsafe-vector-set!"
" A_4"
" c1_36"
" x_14)"
"(let-values(((a1_28)"
"(unsafe-fx+"
" a1_27"
" 1))"
"((c1_37)"
"(unsafe-fx+"
" c1_36"
" 1)))"
"(if(unsafe-fx< c1_37 b1_18)"
"(let-values()"
"(loop_33 a1_28 b1_18 c1_37))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_4"
" c1_36"
" y_14)"
"(let-values(((b1_19)"
"(unsafe-fx+"
" b1_18"
" 1))"
"((c1_38)"
"(unsafe-fx+"
" c1_36"
" 1)))"
"(if(unsafe-fx<= b2_9 b1_19)"
"((letrec-values(((loop_34)"
"(lambda(a1_29"
" c1_39)"
"(if(unsafe-fx<"
" c1_39"
" b1_19)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_4"
" c1_39"
"(unsafe-vector-ref"
" A_4"
" a1_29))"
"(loop_34"
"(unsafe-fx+"
" a1_29"
" 1)"
"(unsafe-fx+"
" c1_39"
" 1))))"
"(void)))))"
" loop_34)"
" a1_27"
" c1_38)"
"(loop_33"
" a1_27"
" b1_19"
" c1_38)))))))))"
" loop_33)"
" B1lo_4"
" Amid2_9"
" Alo_9))))))))))))"
"(begin(hash-set! sorts_0 < sort-proc_4)(hash-set! sorts_0 <= sort-proc_4)))"
"(let-values(((sort-proc_5)"
"(lambda(A_5 n_11)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_10)(unsafe-fxrshift n_11 1)))"
"(let-values(((n/2+_10)(unsafe-fx- n_11 n/2-_10)))"
"(letrec-values(((copying-mergesort_5)"
"(lambda(Alo_10 Blo_5 n_12)"
"(if(unsafe-fx= n_12 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_5"
" Blo_5"
"(unsafe-vector-ref A_5 Alo_10)))"
"(if(unsafe-fx= n_12 2)"
"(let-values()"
"(let-values(((x_15)"
"(unsafe-vector-ref"
" A_5"
" Alo_10))"
"((y_15)"
"(unsafe-vector-ref"
" A_5"
"(unsafe-fx+ Alo_10 1))))"
"(if(> y_15 x_15)"
"(begin"
"(unsafe-vector-set! A_5 Blo_5 y_15)"
"(unsafe-vector-set!"
" A_5"
"(unsafe-fx+ Blo_5 1)"
" x_15))"
"(begin"
"(unsafe-vector-set! A_5 Blo_5 x_15)"
"(unsafe-vector-set!"
" A_5"
"(unsafe-fx+ Blo_5 1)"
" y_15)))))"
"(if(unsafe-fx< n_12 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_5"
" Blo_5"
"(unsafe-vector-ref A_5 Alo_10))"
"((letrec-values(((iloop_5)"
"(lambda(i_9)"
"(if(unsafe-fx<"
" i_9"
" n_12)"
"(let-values()"
"(let-values(((ref-i_5)"
"(unsafe-vector-ref"
" A_5"
"(unsafe-fx+"
" Alo_10"
" i_9))))"
"((letrec-values(((jloop_5)"
"(lambda(j_5)"
"(let-values(((ref-j-1_5)"
"(unsafe-vector-ref"
" A_5"
"(unsafe-fx-"
" j_5"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_5"
" j_5)"
"(>"
" ref-i_5"
" ref-j-1_5)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_5"
" j_5"
" ref-j-1_5)"
"(jloop_5"
"(unsafe-fx-"
" j_5"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_5"
" j_5"
" ref-i_5)"
"(iloop_5"
"(unsafe-fx+"
" i_9"
" 1))))))))"
" jloop_5)"
"(unsafe-fx+"
" Blo_5"
" i_9))))"
"(void)))))"
" iloop_5)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_11)"
"(unsafe-fxrshift n_12 1)))"
"(let-values(((n/2+_11)"
"(unsafe-fx-"
" n_12"
" n/2-_11)))"
"(let-values(((Amid1_10)"
"(unsafe-fx+"
" Alo_10"
" n/2-_11))"
"((Amid2_10)"
"(unsafe-fx+"
" Alo_10"
" n/2+_11))"
"((Bmid1_5)"
"(unsafe-fx+"
" Blo_5"
" n/2-_11)))"
"(begin"
"(copying-mergesort_5"
" Amid1_10"
" Bmid1_5"
" n/2+_11)"
"(copying-mergesort_5"
" Alo_10"
" Amid2_10"
" n/2-_11)"
"(let-values(((b2_10)"
"(unsafe-fx+"
" Blo_5"
" n_12)))"
"((letrec-values(((loop_35)"
"(lambda(a1_30"
" b1_20"
" c1_40)"
"(let-values(((x_16)"
"(unsafe-vector-ref"
" A_5"
" a1_30))"
"((y_16)"
"(unsafe-vector-ref"
" A_5"
" b1_20)))"
"(if(not"
"(>"
" y_16"
" x_16))"
"(begin"
"(unsafe-vector-set!"
" A_5"
" c1_40"
" x_16)"
"(let-values(((a1_31)"
"(unsafe-fx+"
" a1_30"
" 1))"
"((c1_41)"
"(unsafe-fx+"
" c1_40"
" 1)))"
"(if(unsafe-fx<"
" c1_41"
" b1_20)"
"(let-values()"
"(loop_35"
" a1_31"
" b1_20"
" c1_41))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_5"
" c1_40"
" y_16)"
"(let-values(((b1_21)"
"(unsafe-fx+"
" b1_20"
" 1))"
"((c1_42)"
"(unsafe-fx+"
" c1_40"
" 1)))"
"(if(unsafe-fx<="
" b2_10"
" b1_21)"
"((letrec-values(((loop_36)"
"(lambda(a1_32"
" c1_43)"
"(if(unsafe-fx<"
" c1_43"
" b1_21)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_5"
" c1_43"
"(unsafe-vector-ref"
" A_5"
" a1_32))"
"(loop_36"
"(unsafe-fx+"
" a1_32"
" 1)"
"(unsafe-fx+"
" c1_43"
" 1))))"
"(void)))))"
" loop_36)"
" a1_30"
" c1_42)"
"(loop_35"
" a1_30"
" b1_21"
" c1_42)))))))))"
" loop_35)"
" Amid2_10"
" Bmid1_5"
" Blo_5)))))))))))))"
"(let-values(((Alo_11) 0)"
"((Amid1_11) n/2-_10)"
"((Amid2_11) n/2+_10)"
"((Ahi_5) n_11)"
"((B1lo_5) n_11))"
"(begin"
"(copying-mergesort_5 Amid1_11 B1lo_5 n/2+_10)"
"(if(zero? n/2-_10)"
"(void)"
"(let-values()"
"(copying-mergesort_5 Alo_11 Amid2_11 n/2-_10)))"
"(let-values(((b2_11) Ahi_5))"
"((letrec-values(((loop_37)"
"(lambda(a1_33 b1_22 c1_44)"
"(let-values(((x_17)"
"(unsafe-vector-ref"
" A_5"
" a1_33))"
"((y_17)"
"(unsafe-vector-ref"
" A_5"
" b1_22)))"
"(if(> x_17 y_17)"
"(begin"
"(unsafe-vector-set!"
" A_5"
" c1_44"
" x_17)"
"(let-values(((a1_34)"
"(unsafe-fx+"
" a1_33"
" 1))"
"((c1_45)"
"(unsafe-fx+"
" c1_44"
" 1)))"
"(if(unsafe-fx< c1_45 b1_22)"
"(let-values()"
"(loop_37 a1_34 b1_22 c1_45))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_5"
" c1_44"
" y_17)"
"(let-values(((b1_23)"
"(unsafe-fx+"
" b1_22"
" 1))"
"((c1_46)"
"(unsafe-fx+"
" c1_44"
" 1)))"
"(if(unsafe-fx<= b2_11 b1_23)"
"((letrec-values(((loop_38)"
"(lambda(a1_35"
" c1_47)"
"(if(unsafe-fx<"
" c1_47"
" b1_23)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_5"
" c1_47"
"(unsafe-vector-ref"
" A_5"
" a1_35))"
"(loop_38"
"(unsafe-fx+"
" a1_35"
" 1)"
"(unsafe-fx+"
" c1_47"
" 1))))"
"(void)))))"
" loop_38)"
" a1_33"
" c1_46)"
"(loop_37"
" a1_33"
" b1_23"
" c1_46)))))))))"
" loop_37)"
" B1lo_5"
" Amid2_11"
" Alo_11))))))))))))"
"(begin(hash-set! sorts_0 > sort-proc_5)(hash-set! sorts_0 >= sort-proc_5)))"
"(let-values(((sort-proc_6)"
"(lambda(A_6 n_13)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_12)(unsafe-fxrshift n_13 1)))"
"(let-values(((n/2+_12)(unsafe-fx- n_13 n/2-_12)))"
"(letrec-values(((copying-mergesort_6)"
"(lambda(Alo_12 Blo_6 n_14)"
"(if(unsafe-fx= n_14 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_6"
" Blo_6"
"(unsafe-vector-ref A_6 Alo_12)))"
"(if(unsafe-fx= n_14 2)"
"(let-values()"
"(let-values(((x_18)"
"(unsafe-vector-ref"
" A_6"
" Alo_12))"
"((y_18)"
"(unsafe-vector-ref"
" A_6"
"(unsafe-fx+ Alo_12 1))))"
"(if(string<? y_18 x_18)"
"(begin"
"(unsafe-vector-set! A_6 Blo_6 y_18)"
"(unsafe-vector-set!"
" A_6"
"(unsafe-fx+ Blo_6 1)"
" x_18))"
"(begin"
"(unsafe-vector-set! A_6 Blo_6 x_18)"
"(unsafe-vector-set!"
" A_6"
"(unsafe-fx+ Blo_6 1)"
" y_18)))))"
"(if(unsafe-fx< n_14 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_6"
" Blo_6"
"(unsafe-vector-ref A_6 Alo_12))"
"((letrec-values(((iloop_6)"
"(lambda(i_10)"
"(if(unsafe-fx<"
" i_10"
" n_14)"
"(let-values()"
"(let-values(((ref-i_6)"
"(unsafe-vector-ref"
" A_6"
"(unsafe-fx+"
" Alo_12"
" i_10))))"
"((letrec-values(((jloop_6)"
"(lambda(j_6)"
"(let-values(((ref-j-1_6)"
"(unsafe-vector-ref"
" A_6"
"(unsafe-fx-"
" j_6"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_6"
" j_6)"
"(string<?"
" ref-i_6"
" ref-j-1_6)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_6"
" j_6"
" ref-j-1_6)"
"(jloop_6"
"(unsafe-fx-"
" j_6"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_6"
" j_6"
" ref-i_6)"
"(iloop_6"
"(unsafe-fx+"
" i_10"
" 1))))))))"
" jloop_6)"
"(unsafe-fx+"
" Blo_6"
" i_10))))"
"(void)))))"
" iloop_6)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_13)"
"(unsafe-fxrshift n_14 1)))"
"(let-values(((n/2+_13)"
"(unsafe-fx-"
" n_14"
" n/2-_13)))"
"(let-values(((Amid1_12)"
"(unsafe-fx+"
" Alo_12"
" n/2-_13))"
"((Amid2_12)"
"(unsafe-fx+"
" Alo_12"
" n/2+_13))"
"((Bmid1_6)"
"(unsafe-fx+"
" Blo_6"
" n/2-_13)))"
"(begin"
"(copying-mergesort_6"
" Amid1_12"
" Bmid1_6"
" n/2+_13)"
"(copying-mergesort_6"
" Alo_12"
" Amid2_12"
" n/2-_13)"
"(let-values(((b2_12)"
"(unsafe-fx+"
" Blo_6"
" n_14)))"
"((letrec-values(((loop_39)"
"(lambda(a1_36"
" b1_24"
" c1_48)"
"(let-values(((x_19)"
"(unsafe-vector-ref"
" A_6"
" a1_36))"
"((y_19)"
"(unsafe-vector-ref"
" A_6"
" b1_24)))"
"(if(not"
"(string<?"
" y_19"
" x_19))"
"(begin"
"(unsafe-vector-set!"
" A_6"
" c1_48"
" x_19)"
"(let-values(((a1_37)"
"(unsafe-fx+"
" a1_36"
" 1))"
"((c1_49)"
"(unsafe-fx+"
" c1_48"
" 1)))"
"(if(unsafe-fx<"
" c1_49"
" b1_24)"
"(let-values()"
"(loop_39"
" a1_37"
" b1_24"
" c1_49))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_6"
" c1_48"
" y_19)"
"(let-values(((b1_25)"
"(unsafe-fx+"
" b1_24"
" 1))"
"((c1_50)"
"(unsafe-fx+"
" c1_48"
" 1)))"
"(if(unsafe-fx<="
" b2_12"
" b1_25)"
"((letrec-values(((loop_40)"
"(lambda(a1_38"
" c1_51)"
"(if(unsafe-fx<"
" c1_51"
" b1_25)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_6"
" c1_51"
"(unsafe-vector-ref"
" A_6"
" a1_38))"
"(loop_40"
"(unsafe-fx+"
" a1_38"
" 1)"
"(unsafe-fx+"
" c1_51"
" 1))))"
"(void)))))"
" loop_40)"
" a1_36"
" c1_50)"
"(loop_39"
" a1_36"
" b1_25"
" c1_50)))))))))"
" loop_39)"
" Amid2_12"
" Bmid1_6"
" Blo_6)))))))))))))"
"(let-values(((Alo_13) 0)"
"((Amid1_13) n/2-_12)"
"((Amid2_13) n/2+_12)"
"((Ahi_6) n_13)"
"((B1lo_6) n_13))"
"(begin"
"(copying-mergesort_6 Amid1_13 B1lo_6 n/2+_12)"
"(if(zero? n/2-_12)"
"(void)"
"(let-values()"
"(copying-mergesort_6 Alo_13 Amid2_13 n/2-_12)))"
"(let-values(((b2_13) Ahi_6))"
"((letrec-values(((loop_41)"
"(lambda(a1_39 b1_26 c1_52)"
"(let-values(((x_20)"
"(unsafe-vector-ref"
" A_6"
" a1_39))"
"((y_20)"
"(unsafe-vector-ref"
" A_6"
" b1_26)))"
"(if(string<? x_20 y_20)"
"(begin"
"(unsafe-vector-set!"
" A_6"
" c1_52"
" x_20)"
"(let-values(((a1_40)"
"(unsafe-fx+"
" a1_39"
" 1))"
"((c1_53)"
"(unsafe-fx+"
" c1_52"
" 1)))"
"(if(unsafe-fx< c1_53 b1_26)"
"(let-values()"
"(loop_41 a1_40 b1_26 c1_53))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_6"
" c1_52"
" y_20)"
"(let-values(((b1_27)"
"(unsafe-fx+"
" b1_26"
" 1))"
"((c1_54)"
"(unsafe-fx+"
" c1_52"
" 1)))"
"(if(unsafe-fx<= b2_13 b1_27)"
"((letrec-values(((loop_42)"
"(lambda(a1_41"
" c1_55)"
"(if(unsafe-fx<"
" c1_55"
" b1_27)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_6"
" c1_55"
"(unsafe-vector-ref"
" A_6"
" a1_41))"
"(loop_42"
"(unsafe-fx+"
" a1_41"
" 1)"
"(unsafe-fx+"
" c1_55"
" 1))))"
"(void)))))"
" loop_42)"
" a1_39"
" c1_54)"
"(loop_41"
" a1_39"
" b1_27"
" c1_54)))))))))"
" loop_41)"
" B1lo_6"
" Amid2_13"
" Alo_13))))))))))))"
"(begin"
"(hash-set! sorts_0 string<? sort-proc_6)"
"(hash-set! sorts_0 string<=? sort-proc_6)))"
"(let-values(((sort-proc_7)"
"(lambda(A_7 n_15)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_14)(unsafe-fxrshift n_15 1)))"
"(let-values(((n/2+_14)(unsafe-fx- n_15 n/2-_14)))"
"(letrec-values(((copying-mergesort_7)"
"(lambda(Alo_14 Blo_7 n_16)"
"(if(unsafe-fx= n_16 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_7"
" Blo_7"
"(unsafe-vector-ref A_7 Alo_14)))"
"(if(unsafe-fx= n_16 2)"
"(let-values()"
"(let-values(((x_21)"
"(unsafe-vector-ref"
" A_7"
" Alo_14))"
"((y_21)"
"(unsafe-vector-ref"
" A_7"
"(unsafe-fx+ Alo_14 1))))"
"(if(string>? y_21 x_21)"
"(begin"
"(unsafe-vector-set! A_7 Blo_7 y_21)"
"(unsafe-vector-set!"
" A_7"
"(unsafe-fx+ Blo_7 1)"
" x_21))"
"(begin"
"(unsafe-vector-set! A_7 Blo_7 x_21)"
"(unsafe-vector-set!"
" A_7"
"(unsafe-fx+ Blo_7 1)"
" y_21)))))"
"(if(unsafe-fx< n_16 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_7"
" Blo_7"
"(unsafe-vector-ref A_7 Alo_14))"
"((letrec-values(((iloop_7)"
"(lambda(i_11)"
"(if(unsafe-fx<"
" i_11"
" n_16)"
"(let-values()"
"(let-values(((ref-i_7)"
"(unsafe-vector-ref"
" A_7"
"(unsafe-fx+"
" Alo_14"
" i_11))))"
"((letrec-values(((jloop_7)"
"(lambda(j_7)"
"(let-values(((ref-j-1_7)"
"(unsafe-vector-ref"
" A_7"
"(unsafe-fx-"
" j_7"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_7"
" j_7)"
"(string>?"
" ref-i_7"
" ref-j-1_7)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_7"
" j_7"
" ref-j-1_7)"
"(jloop_7"
"(unsafe-fx-"
" j_7"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_7"
" j_7"
" ref-i_7)"
"(iloop_7"
"(unsafe-fx+"
" i_11"
" 1))))))))"
" jloop_7)"
"(unsafe-fx+"
" Blo_7"
" i_11))))"
"(void)))))"
" iloop_7)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_15)"
"(unsafe-fxrshift n_16 1)))"
"(let-values(((n/2+_15)"
"(unsafe-fx-"
" n_16"
" n/2-_15)))"
"(let-values(((Amid1_14)"
"(unsafe-fx+"
" Alo_14"
" n/2-_15))"
"((Amid2_14)"
"(unsafe-fx+"
" Alo_14"
" n/2+_15))"
"((Bmid1_7)"
"(unsafe-fx+"
" Blo_7"
" n/2-_15)))"
"(begin"
"(copying-mergesort_7"
" Amid1_14"
" Bmid1_7"
" n/2+_15)"
"(copying-mergesort_7"
" Alo_14"
" Amid2_14"
" n/2-_15)"
"(let-values(((b2_14)"
"(unsafe-fx+"
" Blo_7"
" n_16)))"
"((letrec-values(((loop_43)"
"(lambda(a1_42"
" b1_28"
" c1_56)"
"(let-values(((x_22)"
"(unsafe-vector-ref"
" A_7"
" a1_42))"
"((y_22)"
"(unsafe-vector-ref"
" A_7"
" b1_28)))"
"(if(not"
"(string>?"
" y_22"
" x_22))"
"(begin"
"(unsafe-vector-set!"
" A_7"
" c1_56"
" x_22)"
"(let-values(((a1_43)"
"(unsafe-fx+"
" a1_42"
" 1))"
"((c1_57)"
"(unsafe-fx+"
" c1_56"
" 1)))"
"(if(unsafe-fx<"
" c1_57"
" b1_28)"
"(let-values()"
"(loop_43"
" a1_43"
" b1_28"
" c1_57))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_7"
" c1_56"
" y_22)"
"(let-values(((b1_29)"
"(unsafe-fx+"
" b1_28"
" 1))"
"((c1_58)"
"(unsafe-fx+"
" c1_56"
" 1)))"
"(if(unsafe-fx<="
" b2_14"
" b1_29)"
"((letrec-values(((loop_44)"
"(lambda(a1_44"
" c1_59)"
"(if(unsafe-fx<"
" c1_59"
" b1_29)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_7"
" c1_59"
"(unsafe-vector-ref"
" A_7"
" a1_44))"
"(loop_44"
"(unsafe-fx+"
" a1_44"
" 1)"
"(unsafe-fx+"
" c1_59"
" 1))))"
"(void)))))"
" loop_44)"
" a1_42"
" c1_58)"
"(loop_43"
" a1_42"
" b1_29"
" c1_58)))))))))"
" loop_43)"
" Amid2_14"
" Bmid1_7"
" Blo_7)))))))))))))"
"(let-values(((Alo_15) 0)"
"((Amid1_15) n/2-_14)"
"((Amid2_15) n/2+_14)"
"((Ahi_7) n_15)"
"((B1lo_7) n_15))"
"(begin"
"(copying-mergesort_7 Amid1_15 B1lo_7 n/2+_14)"
"(if(zero? n/2-_14)"
"(void)"
"(let-values()"
"(copying-mergesort_7 Alo_15 Amid2_15 n/2-_14)))"
"(let-values(((b2_15) Ahi_7))"
"((letrec-values(((loop_45)"
"(lambda(a1_45 b1_30 c1_60)"
"(let-values(((x_23)"
"(unsafe-vector-ref"
" A_7"
" a1_45))"
"((y_23)"
"(unsafe-vector-ref"
" A_7"
" b1_30)))"
"(if(string>? x_23 y_23)"
"(begin"
"(unsafe-vector-set!"
" A_7"
" c1_60"
" x_23)"
"(let-values(((a1_46)"
"(unsafe-fx+"
" a1_45"
" 1))"
"((c1_61)"
"(unsafe-fx+"
" c1_60"
" 1)))"
"(if(unsafe-fx< c1_61 b1_30)"
"(let-values()"
"(loop_45 a1_46 b1_30 c1_61))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_7"
" c1_60"
" y_23)"
"(let-values(((b1_31)"
"(unsafe-fx+"
" b1_30"
" 1))"
"((c1_62)"
"(unsafe-fx+"
" c1_60"
" 1)))"
"(if(unsafe-fx<= b2_15 b1_31)"
"((letrec-values(((loop_46)"
"(lambda(a1_47"
" c1_63)"
"(if(unsafe-fx<"
" c1_63"
" b1_31)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_7"
" c1_63"
"(unsafe-vector-ref"
" A_7"
" a1_47))"
"(loop_46"
"(unsafe-fx+"
" a1_47"
" 1)"
"(unsafe-fx+"
" c1_63"
" 1))))"
"(void)))))"
" loop_46)"
" a1_45"
" c1_62)"
"(loop_45"
" a1_45"
" b1_31"
" c1_62)))))))))"
" loop_45)"
" B1lo_7"
" Amid2_15"
" Alo_15))))))))))))"
"(begin"
"(hash-set! sorts_0 string>? sort-proc_7)"
"(hash-set! sorts_0 string>=? sort-proc_7)))"
"(let-values(((sort-proc_8)"
"(lambda(A_8 n_17)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_16)(unsafe-fxrshift n_17 1)))"
"(let-values(((n/2+_16)(unsafe-fx- n_17 n/2-_16)))"
"(letrec-values(((copying-mergesort_8)"
"(lambda(Alo_16 Blo_8 n_18)"
"(if(unsafe-fx= n_18 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_8"
" Blo_8"
"(unsafe-vector-ref A_8 Alo_16)))"
"(if(unsafe-fx= n_18 2)"
"(let-values()"
"(let-values(((x_24)"
"(unsafe-vector-ref"
" A_8"
" Alo_16))"
"((y_24)"
"(unsafe-vector-ref"
" A_8"
"(unsafe-fx+ Alo_16 1))))"
"(if(string-ci<? y_24 x_24)"
"(begin"
"(unsafe-vector-set! A_8 Blo_8 y_24)"
"(unsafe-vector-set!"
" A_8"
"(unsafe-fx+ Blo_8 1)"
" x_24))"
"(begin"
"(unsafe-vector-set! A_8 Blo_8 x_24)"
"(unsafe-vector-set!"
" A_8"
"(unsafe-fx+ Blo_8 1)"
" y_24)))))"
"(if(unsafe-fx< n_18 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_8"
" Blo_8"
"(unsafe-vector-ref A_8 Alo_16))"
"((letrec-values(((iloop_8)"
"(lambda(i_12)"
"(if(unsafe-fx<"
" i_12"
" n_18)"
"(let-values()"
"(let-values(((ref-i_8)"
"(unsafe-vector-ref"
" A_8"
"(unsafe-fx+"
" Alo_16"
" i_12))))"
"((letrec-values(((jloop_8)"
"(lambda(j_8)"
"(let-values(((ref-j-1_8)"
"(unsafe-vector-ref"
" A_8"
"(unsafe-fx-"
" j_8"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_8"
" j_8)"
"(string-ci<?"
" ref-i_8"
" ref-j-1_8)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_8"
" j_8"
" ref-j-1_8)"
"(jloop_8"
"(unsafe-fx-"
" j_8"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_8"
" j_8"
" ref-i_8)"
"(iloop_8"
"(unsafe-fx+"
" i_12"
" 1))))))))"
" jloop_8)"
"(unsafe-fx+"
" Blo_8"
" i_12))))"
"(void)))))"
" iloop_8)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_17)"
"(unsafe-fxrshift n_18 1)))"
"(let-values(((n/2+_17)"
"(unsafe-fx-"
" n_18"
" n/2-_17)))"
"(let-values(((Amid1_16)"
"(unsafe-fx+"
" Alo_16"
" n/2-_17))"
"((Amid2_16)"
"(unsafe-fx+"
" Alo_16"
" n/2+_17))"
"((Bmid1_8)"
"(unsafe-fx+"
" Blo_8"
" n/2-_17)))"
"(begin"
"(copying-mergesort_8"
" Amid1_16"
" Bmid1_8"
" n/2+_17)"
"(copying-mergesort_8"
" Alo_16"
" Amid2_16"
" n/2-_17)"
"(let-values(((b2_16)"
"(unsafe-fx+"
" Blo_8"
" n_18)))"
"((letrec-values(((loop_47)"
"(lambda(a1_48"
" b1_32"
" c1_64)"
"(let-values(((x_25)"
"(unsafe-vector-ref"
" A_8"
" a1_48))"
"((y_25)"
"(unsafe-vector-ref"
" A_8"
" b1_32)))"
"(if(not"
"(string-ci<?"
" y_25"
" x_25))"
"(begin"
"(unsafe-vector-set!"
" A_8"
" c1_64"
" x_25)"
"(let-values(((a1_49)"
"(unsafe-fx+"
" a1_48"
" 1))"
"((c1_65)"
"(unsafe-fx+"
" c1_64"
" 1)))"
"(if(unsafe-fx<"
" c1_65"
" b1_32)"
"(let-values()"
"(loop_47"
" a1_49"
" b1_32"
" c1_65))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_8"
" c1_64"
" y_25)"
"(let-values(((b1_33)"
"(unsafe-fx+"
" b1_32"
" 1))"
"((c1_66)"
"(unsafe-fx+"
" c1_64"
" 1)))"
"(if(unsafe-fx<="
" b2_16"
" b1_33)"
"((letrec-values(((loop_48)"
"(lambda(a1_50"
" c1_67)"
"(if(unsafe-fx<"
" c1_67"
" b1_33)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_8"
" c1_67"
"(unsafe-vector-ref"
" A_8"
" a1_50))"
"(loop_48"
"(unsafe-fx+"
" a1_50"
" 1)"
"(unsafe-fx+"
" c1_67"
" 1))))"
"(void)))))"
" loop_48)"
" a1_48"
" c1_66)"
"(loop_47"
" a1_48"
" b1_33"
" c1_66)))))))))"
" loop_47)"
" Amid2_16"
" Bmid1_8"
" Blo_8)))))))))))))"
"(let-values(((Alo_17) 0)"
"((Amid1_17) n/2-_16)"
"((Amid2_17) n/2+_16)"
"((Ahi_8) n_17)"
"((B1lo_8) n_17))"
"(begin"
"(copying-mergesort_8 Amid1_17 B1lo_8 n/2+_16)"
"(if(zero? n/2-_16)"
"(void)"
"(let-values()"
"(copying-mergesort_8 Alo_17 Amid2_17 n/2-_16)))"
"(let-values(((b2_17) Ahi_8))"
"((letrec-values(((loop_49)"
"(lambda(a1_51 b1_34 c1_68)"
"(let-values(((x_26)"
"(unsafe-vector-ref"
" A_8"
" a1_51))"
"((y_26)"
"(unsafe-vector-ref"
" A_8"
" b1_34)))"
"(if(string-ci<? x_26 y_26)"
"(begin"
"(unsafe-vector-set!"
" A_8"
" c1_68"
" x_26)"
"(let-values(((a1_52)"
"(unsafe-fx+"
" a1_51"
" 1))"
"((c1_69)"
"(unsafe-fx+"
" c1_68"
" 1)))"
"(if(unsafe-fx< c1_69 b1_34)"
"(let-values()"
"(loop_49 a1_52 b1_34 c1_69))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_8"
" c1_68"
" y_26)"
"(let-values(((b1_35)"
"(unsafe-fx+"
" b1_34"
" 1))"
"((c1_70)"
"(unsafe-fx+"
" c1_68"
" 1)))"
"(if(unsafe-fx<= b2_17 b1_35)"
"((letrec-values(((loop_50)"
"(lambda(a1_53"
" c1_71)"
"(if(unsafe-fx<"
" c1_71"
" b1_35)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_8"
" c1_71"
"(unsafe-vector-ref"
" A_8"
" a1_53))"
"(loop_50"
"(unsafe-fx+"
" a1_53"
" 1)"
"(unsafe-fx+"
" c1_71"
" 1))))"
"(void)))))"
" loop_50)"
" a1_51"
" c1_70)"
"(loop_49"
" a1_51"
" b1_35"
" c1_70)))))))))"
" loop_49)"
" B1lo_8"
" Amid2_17"
" Alo_17))))))))))))"
"(begin"
"(hash-set! sorts_0 string-ci<? sort-proc_8)"
"(hash-set! sorts_0 string-ci<=? sort-proc_8)))"
"(let-values(((sort-proc_9)"
"(lambda(A_9 n_19)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_18)(unsafe-fxrshift n_19 1)))"
"(let-values(((n/2+_18)(unsafe-fx- n_19 n/2-_18)))"
"(letrec-values(((copying-mergesort_9)"
"(lambda(Alo_18 Blo_9 n_20)"
"(if(unsafe-fx= n_20 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_9"
" Blo_9"
"(unsafe-vector-ref A_9 Alo_18)))"
"(if(unsafe-fx= n_20 2)"
"(let-values()"
"(let-values(((x_27)"
"(unsafe-vector-ref"
" A_9"
" Alo_18))"
"((y_27)"
"(unsafe-vector-ref"
" A_9"
"(unsafe-fx+ Alo_18 1))))"
"(if(string-ci>? y_27 x_27)"
"(begin"
"(unsafe-vector-set! A_9 Blo_9 y_27)"
"(unsafe-vector-set!"
" A_9"
"(unsafe-fx+ Blo_9 1)"
" x_27))"
"(begin"
"(unsafe-vector-set! A_9 Blo_9 x_27)"
"(unsafe-vector-set!"
" A_9"
"(unsafe-fx+ Blo_9 1)"
" y_27)))))"
"(if(unsafe-fx< n_20 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_9"
" Blo_9"
"(unsafe-vector-ref A_9 Alo_18))"
"((letrec-values(((iloop_9)"
"(lambda(i_13)"
"(if(unsafe-fx<"
" i_13"
" n_20)"
"(let-values()"
"(let-values(((ref-i_9)"
"(unsafe-vector-ref"
" A_9"
"(unsafe-fx+"
" Alo_18"
" i_13))))"
"((letrec-values(((jloop_9)"
"(lambda(j_9)"
"(let-values(((ref-j-1_9)"
"(unsafe-vector-ref"
" A_9"
"(unsafe-fx-"
" j_9"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_9"
" j_9)"
"(string-ci>?"
" ref-i_9"
" ref-j-1_9)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_9"
" j_9"
" ref-j-1_9)"
"(jloop_9"
"(unsafe-fx-"
" j_9"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_9"
" j_9"
" ref-i_9)"
"(iloop_9"
"(unsafe-fx+"
" i_13"
" 1))))))))"
" jloop_9)"
"(unsafe-fx+"
" Blo_9"
" i_13))))"
"(void)))))"
" iloop_9)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_19)"
"(unsafe-fxrshift n_20 1)))"
"(let-values(((n/2+_19)"
"(unsafe-fx-"
" n_20"
" n/2-_19)))"
"(let-values(((Amid1_18)"
"(unsafe-fx+"
" Alo_18"
" n/2-_19))"
"((Amid2_18)"
"(unsafe-fx+"
" Alo_18"
" n/2+_19))"
"((Bmid1_9)"
"(unsafe-fx+"
" Blo_9"
" n/2-_19)))"
"(begin"
"(copying-mergesort_9"
" Amid1_18"
" Bmid1_9"
" n/2+_19)"
"(copying-mergesort_9"
" Alo_18"
" Amid2_18"
" n/2-_19)"
"(let-values(((b2_18)"
"(unsafe-fx+"
" Blo_9"
" n_20)))"
"((letrec-values(((loop_51)"
"(lambda(a1_54"
" b1_36"
" c1_72)"
"(let-values(((x_28)"
"(unsafe-vector-ref"
" A_9"
" a1_54))"
"((y_28)"
"(unsafe-vector-ref"
" A_9"
" b1_36)))"
"(if(not"
"(string-ci>?"
" y_28"
" x_28))"
"(begin"
"(unsafe-vector-set!"
" A_9"
" c1_72"
" x_28)"
"(let-values(((a1_55)"
"(unsafe-fx+"
" a1_54"
" 1))"
"((c1_73)"
"(unsafe-fx+"
" c1_72"
" 1)))"
"(if(unsafe-fx<"
" c1_73"
" b1_36)"
"(let-values()"
"(loop_51"
" a1_55"
" b1_36"
" c1_73))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_9"
" c1_72"
" y_28)"
"(let-values(((b1_37)"
"(unsafe-fx+"
" b1_36"
" 1))"
"((c1_74)"
"(unsafe-fx+"
" c1_72"
" 1)))"
"(if(unsafe-fx<="
" b2_18"
" b1_37)"
"((letrec-values(((loop_52)"
"(lambda(a1_56"
" c1_75)"
"(if(unsafe-fx<"
" c1_75"
" b1_37)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_9"
" c1_75"
"(unsafe-vector-ref"
" A_9"
" a1_56))"
"(loop_52"
"(unsafe-fx+"
" a1_56"
" 1)"
"(unsafe-fx+"
" c1_75"
" 1))))"
"(void)))))"
" loop_52)"
" a1_54"
" c1_74)"
"(loop_51"
" a1_54"
" b1_37"
" c1_74)))))))))"
" loop_51)"
" Amid2_18"
" Bmid1_9"
" Blo_9)))))))))))))"
"(let-values(((Alo_19) 0)"
"((Amid1_19) n/2-_18)"
"((Amid2_19) n/2+_18)"
"((Ahi_9) n_19)"
"((B1lo_9) n_19))"
"(begin"
"(copying-mergesort_9 Amid1_19 B1lo_9 n/2+_18)"
"(if(zero? n/2-_18)"
"(void)"
"(let-values()"
"(copying-mergesort_9 Alo_19 Amid2_19 n/2-_18)))"
"(let-values(((b2_19) Ahi_9))"
"((letrec-values(((loop_53)"
"(lambda(a1_57 b1_38 c1_76)"
"(let-values(((x_29)"
"(unsafe-vector-ref"
" A_9"
" a1_57))"
"((y_29)"
"(unsafe-vector-ref"
" A_9"
" b1_38)))"
"(if(string-ci>? x_29 y_29)"
"(begin"
"(unsafe-vector-set!"
" A_9"
" c1_76"
" x_29)"
"(let-values(((a1_58)"
"(unsafe-fx+"
" a1_57"
" 1))"
"((c1_77)"
"(unsafe-fx+"
" c1_76"
" 1)))"
"(if(unsafe-fx< c1_77 b1_38)"
"(let-values()"
"(loop_53 a1_58 b1_38 c1_77))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_9"
" c1_76"
" y_29)"
"(let-values(((b1_39)"
"(unsafe-fx+"
" b1_38"
" 1))"
"((c1_78)"
"(unsafe-fx+"
" c1_76"
" 1)))"
"(if(unsafe-fx<= b2_19 b1_39)"
"((letrec-values(((loop_54)"
"(lambda(a1_59"
" c1_79)"
"(if(unsafe-fx<"
" c1_79"
" b1_39)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_9"
" c1_79"
"(unsafe-vector-ref"
" A_9"
" a1_59))"
"(loop_54"
"(unsafe-fx+"
" a1_59"
" 1)"
"(unsafe-fx+"
" c1_79"
" 1))))"
"(void)))))"
" loop_54)"
" a1_57"
" c1_78)"
"(loop_53"
" a1_57"
" b1_39"
" c1_78)))))))))"
" loop_53)"
" B1lo_9"
" Amid2_19"
" Alo_19))))))))))))"
"(begin"
"(hash-set! sorts_0 string-ci>? sort-proc_9)"
"(hash-set! sorts_0 string-ci>=? sort-proc_9)))"
"(let-values(((sort-proc_10)"
"(lambda(A_10 n_21)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_20)(unsafe-fxrshift n_21 1)))"
"(let-values(((n/2+_20)(unsafe-fx- n_21 n/2-_20)))"
"(letrec-values(((copying-mergesort_10)"
"(lambda(Alo_20 Blo_10 n_22)"
"(if(unsafe-fx= n_22 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_10"
" Blo_10"
"(unsafe-vector-ref A_10 Alo_20)))"
"(if(unsafe-fx= n_22 2)"
"(let-values()"
"(let-values(((x_30)"
"(unsafe-vector-ref"
" A_10"
" Alo_20))"
"((y_30)"
"(unsafe-vector-ref"
" A_10"
"(unsafe-fx+ Alo_20 1))))"
"(if(char<? y_30 x_30)"
"(begin"
"(unsafe-vector-set! A_10 Blo_10 y_30)"
"(unsafe-vector-set!"
" A_10"
"(unsafe-fx+ Blo_10 1)"
" x_30))"
"(begin"
"(unsafe-vector-set! A_10 Blo_10 x_30)"
"(unsafe-vector-set!"
" A_10"
"(unsafe-fx+ Blo_10 1)"
" y_30)))))"
"(if(unsafe-fx< n_22 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_10"
" Blo_10"
"(unsafe-vector-ref A_10 Alo_20))"
"((letrec-values(((iloop_10)"
"(lambda(i_14)"
"(if(unsafe-fx<"
" i_14"
" n_22)"
"(let-values()"
"(let-values(((ref-i_10)"
"(unsafe-vector-ref"
" A_10"
"(unsafe-fx+"
" Alo_20"
" i_14))))"
"((letrec-values(((jloop_10)"
"(lambda(j_10)"
"(let-values(((ref-j-1_10)"
"(unsafe-vector-ref"
" A_10"
"(unsafe-fx-"
" j_10"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_10"
" j_10)"
"(char<?"
" ref-i_10"
" ref-j-1_10)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_10"
" j_10"
" ref-j-1_10)"
"(jloop_10"
"(unsafe-fx-"
" j_10"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_10"
" j_10"
" ref-i_10)"
"(iloop_10"
"(unsafe-fx+"
" i_14"
" 1))))))))"
" jloop_10)"
"(unsafe-fx+"
" Blo_10"
" i_14))))"
"(void)))))"
" iloop_10)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_21)"
"(unsafe-fxrshift n_22 1)))"
"(let-values(((n/2+_21)"
"(unsafe-fx-"
" n_22"
" n/2-_21)))"
"(let-values(((Amid1_20)"
"(unsafe-fx+"
" Alo_20"
" n/2-_21))"
"((Amid2_20)"
"(unsafe-fx+"
" Alo_20"
" n/2+_21))"
"((Bmid1_10)"
"(unsafe-fx+"
" Blo_10"
" n/2-_21)))"
"(begin"
"(copying-mergesort_10"
" Amid1_20"
" Bmid1_10"
" n/2+_21)"
"(copying-mergesort_10"
" Alo_20"
" Amid2_20"
" n/2-_21)"
"(let-values(((b2_20)"
"(unsafe-fx+"
" Blo_10"
" n_22)))"
"((letrec-values(((loop_55)"
"(lambda(a1_60"
" b1_40"
" c1_80)"
"(let-values(((x_31)"
"(unsafe-vector-ref"
" A_10"
" a1_60))"
"((y_31)"
"(unsafe-vector-ref"
" A_10"
" b1_40)))"
"(if(not"
"(char<?"
" y_31"
" x_31))"
"(begin"
"(unsafe-vector-set!"
" A_10"
" c1_80"
" x_31)"
"(let-values(((a1_61)"
"(unsafe-fx+"
" a1_60"
" 1))"
"((c1_81)"
"(unsafe-fx+"
" c1_80"
" 1)))"
"(if(unsafe-fx<"
" c1_81"
" b1_40)"
"(let-values()"
"(loop_55"
" a1_61"
" b1_40"
" c1_81))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_10"
" c1_80"
" y_31)"
"(let-values(((b1_41)"
"(unsafe-fx+"
" b1_40"
" 1))"
"((c1_82)"
"(unsafe-fx+"
" c1_80"
" 1)))"
"(if(unsafe-fx<="
" b2_20"
" b1_41)"
"((letrec-values(((loop_56)"
"(lambda(a1_62"
" c1_83)"
"(if(unsafe-fx<"
" c1_83"
" b1_41)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_10"
" c1_83"
"(unsafe-vector-ref"
" A_10"
" a1_62))"
"(loop_56"
"(unsafe-fx+"
" a1_62"
" 1)"
"(unsafe-fx+"
" c1_83"
" 1))))"
"(void)))))"
" loop_56)"
" a1_60"
" c1_82)"
"(loop_55"
" a1_60"
" b1_41"
" c1_82)))))))))"
" loop_55)"
" Amid2_20"
" Bmid1_10"
" Blo_10)))))))))))))"
"(let-values(((Alo_21) 0)"
"((Amid1_21) n/2-_20)"
"((Amid2_21) n/2+_20)"
"((Ahi_10) n_21)"
"((B1lo_10) n_21))"
"(begin"
"(copying-mergesort_10 Amid1_21 B1lo_10 n/2+_20)"
"(if(zero? n/2-_20)"
"(void)"
"(let-values()"
"(copying-mergesort_10 Alo_21 Amid2_21 n/2-_20)))"
"(let-values(((b2_21) Ahi_10))"
"((letrec-values(((loop_57)"
"(lambda(a1_63 b1_42 c1_84)"
"(let-values(((x_32)"
"(unsafe-vector-ref"
" A_10"
" a1_63))"
"((y_32)"
"(unsafe-vector-ref"
" A_10"
" b1_42)))"
"(if(char<? x_32 y_32)"
"(begin"
"(unsafe-vector-set!"
" A_10"
" c1_84"
" x_32)"
"(let-values(((a1_64)"
"(unsafe-fx+"
" a1_63"
" 1))"
"((c1_85)"
"(unsafe-fx+"
" c1_84"
" 1)))"
"(if(unsafe-fx< c1_85 b1_42)"
"(let-values()"
"(loop_57 a1_64 b1_42 c1_85))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_10"
" c1_84"
" y_32)"
"(let-values(((b1_43)"
"(unsafe-fx+"
" b1_42"
" 1))"
"((c1_86)"
"(unsafe-fx+"
" c1_84"
" 1)))"
"(if(unsafe-fx<= b2_21 b1_43)"
"((letrec-values(((loop_58)"
"(lambda(a1_65"
" c1_87)"
"(if(unsafe-fx<"
" c1_87"
" b1_43)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_10"
" c1_87"
"(unsafe-vector-ref"
" A_10"
" a1_65))"
"(loop_58"
"(unsafe-fx+"
" a1_65"
" 1)"
"(unsafe-fx+"
" c1_87"
" 1))))"
"(void)))))"
" loop_58)"
" a1_63"
" c1_86)"
"(loop_57"
" a1_63"
" b1_43"
" c1_86)))))))))"
" loop_57)"
" B1lo_10"
" Amid2_21"
" Alo_21))))))))))))"
"(begin(hash-set! sorts_0 char<? sort-proc_10)(hash-set! sorts_0 char<=? sort-proc_10)))"
"(let-values(((sort-proc_11)"
"(lambda(A_11 n_23)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_22)(unsafe-fxrshift n_23 1)))"
"(let-values(((n/2+_22)(unsafe-fx- n_23 n/2-_22)))"
"(letrec-values(((copying-mergesort_11)"
"(lambda(Alo_22 Blo_11 n_24)"
"(if(unsafe-fx= n_24 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_11"
" Blo_11"
"(unsafe-vector-ref A_11 Alo_22)))"
"(if(unsafe-fx= n_24 2)"
"(let-values()"
"(let-values(((x_33)"
"(unsafe-vector-ref"
" A_11"
" Alo_22))"
"((y_33)"
"(unsafe-vector-ref"
" A_11"
"(unsafe-fx+ Alo_22 1))))"
"(if(char>? y_33 x_33)"
"(begin"
"(unsafe-vector-set! A_11 Blo_11 y_33)"
"(unsafe-vector-set!"
" A_11"
"(unsafe-fx+ Blo_11 1)"
" x_33))"
"(begin"
"(unsafe-vector-set! A_11 Blo_11 x_33)"
"(unsafe-vector-set!"
" A_11"
"(unsafe-fx+ Blo_11 1)"
" y_33)))))"
"(if(unsafe-fx< n_24 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_11"
" Blo_11"
"(unsafe-vector-ref A_11 Alo_22))"
"((letrec-values(((iloop_11)"
"(lambda(i_15)"
"(if(unsafe-fx<"
" i_15"
" n_24)"
"(let-values()"
"(let-values(((ref-i_11)"
"(unsafe-vector-ref"
" A_11"
"(unsafe-fx+"
" Alo_22"
" i_15))))"
"((letrec-values(((jloop_11)"
"(lambda(j_11)"
"(let-values(((ref-j-1_11)"
"(unsafe-vector-ref"
" A_11"
"(unsafe-fx-"
" j_11"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_11"
" j_11)"
"(char>?"
" ref-i_11"
" ref-j-1_11)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_11"
" j_11"
" ref-j-1_11)"
"(jloop_11"
"(unsafe-fx-"
" j_11"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_11"
" j_11"
" ref-i_11)"
"(iloop_11"
"(unsafe-fx+"
" i_15"
" 1))))))))"
" jloop_11)"
"(unsafe-fx+"
" Blo_11"
" i_15))))"
"(void)))))"
" iloop_11)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_23)"
"(unsafe-fxrshift n_24 1)))"
"(let-values(((n/2+_23)"
"(unsafe-fx-"
" n_24"
" n/2-_23)))"
"(let-values(((Amid1_22)"
"(unsafe-fx+"
" Alo_22"
" n/2-_23))"
"((Amid2_22)"
"(unsafe-fx+"
" Alo_22"
" n/2+_23))"
"((Bmid1_11)"
"(unsafe-fx+"
" Blo_11"
" n/2-_23)))"
"(begin"
"(copying-mergesort_11"
" Amid1_22"
" Bmid1_11"
" n/2+_23)"
"(copying-mergesort_11"
" Alo_22"
" Amid2_22"
" n/2-_23)"
"(let-values(((b2_22)"
"(unsafe-fx+"
" Blo_11"
" n_24)))"
"((letrec-values(((loop_59)"
"(lambda(a1_66"
" b1_44"
" c1_88)"
"(let-values(((x_34)"
"(unsafe-vector-ref"
" A_11"
" a1_66))"
"((y_34)"
"(unsafe-vector-ref"
" A_11"
" b1_44)))"
"(if(not"
"(char>?"
" y_34"
" x_34))"
"(begin"
"(unsafe-vector-set!"
" A_11"
" c1_88"
" x_34)"
"(let-values(((a1_67)"
"(unsafe-fx+"
" a1_66"
" 1))"
"((c1_89)"
"(unsafe-fx+"
" c1_88"
" 1)))"
"(if(unsafe-fx<"
" c1_89"
" b1_44)"
"(let-values()"
"(loop_59"
" a1_67"
" b1_44"
" c1_89))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_11"
" c1_88"
" y_34)"
"(let-values(((b1_45)"
"(unsafe-fx+"
" b1_44"
" 1))"
"((c1_90)"
"(unsafe-fx+"
" c1_88"
" 1)))"
"(if(unsafe-fx<="
" b2_22"
" b1_45)"
"((letrec-values(((loop_60)"
"(lambda(a1_68"
" c1_91)"
"(if(unsafe-fx<"
" c1_91"
" b1_45)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_11"
" c1_91"
"(unsafe-vector-ref"
" A_11"
" a1_68))"
"(loop_60"
"(unsafe-fx+"
" a1_68"
" 1)"
"(unsafe-fx+"
" c1_91"
" 1))))"
"(void)))))"
" loop_60)"
" a1_66"
" c1_90)"
"(loop_59"
" a1_66"
" b1_45"
" c1_90)))))))))"
" loop_59)"
" Amid2_22"
" Bmid1_11"
" Blo_11)))))))))))))"
"(let-values(((Alo_23) 0)"
"((Amid1_23) n/2-_22)"
"((Amid2_23) n/2+_22)"
"((Ahi_11) n_23)"
"((B1lo_11) n_23))"
"(begin"
"(copying-mergesort_11 Amid1_23 B1lo_11 n/2+_22)"
"(if(zero? n/2-_22)"
"(void)"
"(let-values()"
"(copying-mergesort_11 Alo_23 Amid2_23 n/2-_22)))"
"(let-values(((b2_23) Ahi_11))"
"((letrec-values(((loop_61)"
"(lambda(a1_69 b1_46 c1_92)"
"(let-values(((x_35)"
"(unsafe-vector-ref"
" A_11"
" a1_69))"
"((y_35)"
"(unsafe-vector-ref"
" A_11"
" b1_46)))"
"(if(char>? x_35 y_35)"
"(begin"
"(unsafe-vector-set!"
" A_11"
" c1_92"
" x_35)"
"(let-values(((a1_70)"
"(unsafe-fx+"
" a1_69"
" 1))"
"((c1_93)"
"(unsafe-fx+"
" c1_92"
" 1)))"
"(if(unsafe-fx< c1_93 b1_46)"
"(let-values()"
"(loop_61 a1_70 b1_46 c1_93))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_11"
" c1_92"
" y_35)"
"(let-values(((b1_47)"
"(unsafe-fx+"
" b1_46"
" 1))"
"((c1_94)"
"(unsafe-fx+"
" c1_92"
" 1)))"
"(if(unsafe-fx<= b2_23 b1_47)"
"((letrec-values(((loop_62)"
"(lambda(a1_71"
" c1_95)"
"(if(unsafe-fx<"
" c1_95"
" b1_47)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_11"
" c1_95"
"(unsafe-vector-ref"
" A_11"
" a1_71))"
"(loop_62"
"(unsafe-fx+"
" a1_71"
" 1)"
"(unsafe-fx+"
" c1_95"
" 1))))"
"(void)))))"
" loop_62)"
" a1_69"
" c1_94)"
"(loop_61"
" a1_69"
" b1_47"
" c1_94)))))))))"
" loop_61)"
" B1lo_11"
" Amid2_23"
" Alo_23))))))))))))"
"(begin(hash-set! sorts_0 char>? sort-proc_11)(hash-set! sorts_0 char>=? sort-proc_11)))"
"(let-values(((sort-proc_12)"
"(lambda(A_12 n_25)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_24)(unsafe-fxrshift n_25 1)))"
"(let-values(((n/2+_24)(unsafe-fx- n_25 n/2-_24)))"
"(letrec-values(((copying-mergesort_12)"
"(lambda(Alo_24 Blo_12 n_26)"
"(if(unsafe-fx= n_26 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_12"
" Blo_12"
"(unsafe-vector-ref A_12 Alo_24)))"
"(if(unsafe-fx= n_26 2)"
"(let-values()"
"(let-values(((x_36)"
"(unsafe-vector-ref"
" A_12"
" Alo_24))"
"((y_36)"
"(unsafe-vector-ref"
" A_12"
"(unsafe-fx+ Alo_24 1))))"
"(if(keyword<? y_36 x_36)"
"(begin"
"(unsafe-vector-set! A_12 Blo_12 y_36)"
"(unsafe-vector-set!"
" A_12"
"(unsafe-fx+ Blo_12 1)"
" x_36))"
"(begin"
"(unsafe-vector-set! A_12 Blo_12 x_36)"
"(unsafe-vector-set!"
" A_12"
"(unsafe-fx+ Blo_12 1)"
" y_36)))))"
"(if(unsafe-fx< n_26 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_12"
" Blo_12"
"(unsafe-vector-ref A_12 Alo_24))"
"((letrec-values(((iloop_12)"
"(lambda(i_16)"
"(if(unsafe-fx<"
" i_16"
" n_26)"
"(let-values()"
"(let-values(((ref-i_12)"
"(unsafe-vector-ref"
" A_12"
"(unsafe-fx+"
" Alo_24"
" i_16))))"
"((letrec-values(((jloop_12)"
"(lambda(j_12)"
"(let-values(((ref-j-1_12)"
"(unsafe-vector-ref"
" A_12"
"(unsafe-fx-"
" j_12"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_12"
" j_12)"
"(keyword<?"
" ref-i_12"
" ref-j-1_12)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_12"
" j_12"
" ref-j-1_12)"
"(jloop_12"
"(unsafe-fx-"
" j_12"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_12"
" j_12"
" ref-i_12)"
"(iloop_12"
"(unsafe-fx+"
" i_16"
" 1))))))))"
" jloop_12)"
"(unsafe-fx+"
" Blo_12"
" i_16))))"
"(void)))))"
" iloop_12)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_25)"
"(unsafe-fxrshift n_26 1)))"
"(let-values(((n/2+_25)"
"(unsafe-fx-"
" n_26"
" n/2-_25)))"
"(let-values(((Amid1_24)"
"(unsafe-fx+"
" Alo_24"
" n/2-_25))"
"((Amid2_24)"
"(unsafe-fx+"
" Alo_24"
" n/2+_25))"
"((Bmid1_12)"
"(unsafe-fx+"
" Blo_12"
" n/2-_25)))"
"(begin"
"(copying-mergesort_12"
" Amid1_24"
" Bmid1_12"
" n/2+_25)"
"(copying-mergesort_12"
" Alo_24"
" Amid2_24"
" n/2-_25)"
"(let-values(((b2_24)"
"(unsafe-fx+"
" Blo_12"
" n_26)))"
"((letrec-values(((loop_63)"
"(lambda(a1_72"
" b1_48"
" c1_96)"
"(let-values(((x_37)"
"(unsafe-vector-ref"
" A_12"
" a1_72))"
"((y_37)"
"(unsafe-vector-ref"
" A_12"
" b1_48)))"
"(if(not"
"(keyword<?"
" y_37"
" x_37))"
"(begin"
"(unsafe-vector-set!"
" A_12"
" c1_96"
" x_37)"
"(let-values(((a1_73)"
"(unsafe-fx+"
" a1_72"
" 1))"
"((c1_97)"
"(unsafe-fx+"
" c1_96"
" 1)))"
"(if(unsafe-fx<"
" c1_97"
" b1_48)"
"(let-values()"
"(loop_63"
" a1_73"
" b1_48"
" c1_97))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_12"
" c1_96"
" y_37)"
"(let-values(((b1_49)"
"(unsafe-fx+"
" b1_48"
" 1))"
"((c1_98)"
"(unsafe-fx+"
" c1_96"
" 1)))"
"(if(unsafe-fx<="
" b2_24"
" b1_49)"
"((letrec-values(((loop_64)"
"(lambda(a1_74"
" c1_99)"
"(if(unsafe-fx<"
" c1_99"
" b1_49)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_12"
" c1_99"
"(unsafe-vector-ref"
" A_12"
" a1_74))"
"(loop_64"
"(unsafe-fx+"
" a1_74"
" 1)"
"(unsafe-fx+"
" c1_99"
" 1))))"
"(void)))))"
" loop_64)"
" a1_72"
" c1_98)"
"(loop_63"
" a1_72"
" b1_49"
" c1_98)))))))))"
" loop_63)"
" Amid2_24"
" Bmid1_12"
" Blo_12)))))))))))))"
"(let-values(((Alo_25) 0)"
"((Amid1_25) n/2-_24)"
"((Amid2_25) n/2+_24)"
"((Ahi_12) n_25)"
"((B1lo_12) n_25))"
"(begin"
"(copying-mergesort_12 Amid1_25 B1lo_12 n/2+_24)"
"(if(zero? n/2-_24)"
"(void)"
"(let-values()"
"(copying-mergesort_12 Alo_25 Amid2_25 n/2-_24)))"
"(let-values(((b2_25) Ahi_12))"
"((letrec-values(((loop_65)"
"(lambda(a1_75 b1_50 c1_100)"
"(let-values(((x_38)"
"(unsafe-vector-ref"
" A_12"
" a1_75))"
"((y_38)"
"(unsafe-vector-ref"
" A_12"
" b1_50)))"
"(if(keyword<? x_38 y_38)"
"(begin"
"(unsafe-vector-set!"
" A_12"
" c1_100"
" x_38)"
"(let-values(((a1_76)"
"(unsafe-fx+"
" a1_75"
" 1))"
"((c1_101)"
"(unsafe-fx+"
" c1_100"
" 1)))"
"(if(unsafe-fx< c1_101 b1_50)"
"(let-values()"
"(loop_65"
" a1_76"
" b1_50"
" c1_101))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_12"
" c1_100"
" y_38)"
"(let-values(((b1_51)"
"(unsafe-fx+"
" b1_50"
" 1))"
"((c1_102)"
"(unsafe-fx+"
" c1_100"
" 1)))"
"(if(unsafe-fx<= b2_25 b1_51)"
"((letrec-values(((loop_66)"
"(lambda(a1_77"
" c1_103)"
"(if(unsafe-fx<"
" c1_103"
" b1_51)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_12"
" c1_103"
"(unsafe-vector-ref"
" A_12"
" a1_77))"
"(loop_66"
"(unsafe-fx+"
" a1_77"
" 1)"
"(unsafe-fx+"
" c1_103"
" 1))))"
"(void)))))"
" loop_66)"
" a1_75"
" c1_102)"
"(loop_65"
" a1_75"
" b1_51"
" c1_102)))))))))"
" loop_65)"
" B1lo_12"
" Amid2_25"
" Alo_25))))))))))))"
"(hash-set! sorts_0 keyword<? sort-proc_12))"
"(make-immutable-hasheq(hash-map sorts_0 cons))"
"(set! precompiled-sorts_0 sorts_0)"
" sorts_0))))))"
"(let-values(((generic-sort_0)"
"(lambda(A_13 less-than?_0 n_27)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_26)(unsafe-fxrshift n_27 1)))"
"(let-values(((n/2+_26)(unsafe-fx- n_27 n/2-_26)))"
"(letrec-values(((copying-mergesort_13)"
"(lambda(Alo_26 Blo_13 n_28)"
"(if(unsafe-fx= n_28 1)"
"(let-values()"
"(unsafe-vector-set! A_13 Blo_13(unsafe-vector-ref A_13 Alo_26)))"
"(if(unsafe-fx= n_28 2)"
"(let-values()"
"(let-values(((x_39)(unsafe-vector-ref A_13 Alo_26))"
"((y_39)"
"(unsafe-vector-ref A_13(unsafe-fx+ Alo_26 1))))"
"(if(less-than?_0 y_39 x_39)"
"(begin"
"(unsafe-vector-set! A_13 Blo_13 y_39)"
"(unsafe-vector-set! A_13(unsafe-fx+ Blo_13 1) x_39))"
"(begin"
"(unsafe-vector-set! A_13 Blo_13 x_39)"
"(unsafe-vector-set! A_13(unsafe-fx+ Blo_13 1) y_39)))))"
"(if(unsafe-fx< n_28 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_13"
" Blo_13"
"(unsafe-vector-ref A_13 Alo_26))"
"((letrec-values(((iloop_13)"
"(lambda(i_17)"
"(if(unsafe-fx< i_17 n_28)"
"(let-values()"
"(let-values(((ref-i_13)"
"(unsafe-vector-ref"
" A_13"
"(unsafe-fx+"
" Alo_26"
" i_17))))"
"((letrec-values(((jloop_13)"
"(lambda(j_13)"
"(let-values(((ref-j-1_13)"
"(unsafe-vector-ref"
" A_13"
"(unsafe-fx-"
" j_13"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_13"
" j_13)"
"(less-than?_0"
" ref-i_13"
" ref-j-1_13)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_13"
" j_13"
" ref-j-1_13)"
"(jloop_13"
"(unsafe-fx-"
" j_13"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_13"
" j_13"
" ref-i_13)"
"(iloop_13"
"(unsafe-fx+"
" i_17"
" 1))))))))"
" jloop_13)"
"(unsafe-fx+ Blo_13 i_17))))"
"(void)))))"
" iloop_13)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_27)(unsafe-fxrshift n_28 1)))"
"(let-values(((n/2+_27)(unsafe-fx- n_28 n/2-_27)))"
"(let-values(((Amid1_26)(unsafe-fx+ Alo_26 n/2-_27))"
"((Amid2_26)(unsafe-fx+ Alo_26 n/2+_27))"
"((Bmid1_13)(unsafe-fx+ Blo_13 n/2-_27)))"
"(begin"
"(copying-mergesort_13 Amid1_26 Bmid1_13 n/2+_27)"
"(copying-mergesort_13 Alo_26 Amid2_26 n/2-_27)"
"(let-values(((b2_26)(unsafe-fx+ Blo_13 n_28)))"
"((letrec-values(((loop_67)"
"(lambda(a1_78 b1_52 c1_104)"
"(let-values(((x_40)"
"(unsafe-vector-ref"
" A_13"
" a1_78))"
"((y_40)"
"(unsafe-vector-ref"
" A_13"
" b1_52)))"
"(if(not"
"(less-than?_0"
" y_40"
" x_40))"
"(begin"
"(unsafe-vector-set!"
" A_13"
" c1_104"
" x_40)"
"(let-values(((a1_79)"
"(unsafe-fx+"
" a1_78"
" 1))"
"((c1_105)"
"(unsafe-fx+"
" c1_104"
" 1)))"
"(if(unsafe-fx<"
" c1_105"
" b1_52)"
"(let-values()"
"(loop_67"
" a1_79"
" b1_52"
" c1_105))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_13"
" c1_104"
" y_40)"
"(let-values(((b1_53)"
"(unsafe-fx+"
" b1_52"
" 1))"
"((c1_106)"
"(unsafe-fx+"
" c1_104"
" 1)))"
"(if(unsafe-fx<="
" b2_26"
" b1_53)"
"((letrec-values(((loop_68)"
"(lambda(a1_80"
" c1_107)"
"(if(unsafe-fx<"
" c1_107"
" b1_53)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_13"
" c1_107"
"(unsafe-vector-ref"
" A_13"
" a1_80))"
"(loop_68"
"(unsafe-fx+"
" a1_80"
" 1)"
"(unsafe-fx+"
" c1_107"
" 1))))"
"(void)))))"
" loop_68)"
" a1_78"
" c1_106)"
"(loop_67"
" a1_78"
" b1_53"
" c1_106)))))))))"
" loop_67)"
" Amid2_26"
" Bmid1_13"
" Blo_13)))))))))))))"
"(let-values(((Alo_27) 0)"
"((Amid1_27) n/2-_26)"
"((Amid2_27) n/2+_26)"
"((Ahi_13) n_27)"
"((B1lo_13) n_27))"
"(begin"
"(copying-mergesort_13 Amid1_27 B1lo_13 n/2+_26)"
"(if(zero? n/2-_26)"
"(void)"
"(let-values()(copying-mergesort_13 Alo_27 Amid2_27 n/2-_26)))"
"(let-values(((b2_27) Ahi_13))"
"((letrec-values(((loop_69)"
"(lambda(a1_81 b1_54 c1_108)"
"(let-values(((x_41)(unsafe-vector-ref A_13 a1_81))"
"((y_41)(unsafe-vector-ref A_13 b1_54)))"
"(if(less-than?_0 x_41 y_41)"
"(begin"
"(unsafe-vector-set! A_13 c1_108 x_41)"
"(let-values(((a1_82)(unsafe-fx+ a1_81 1))"
"((c1_109)(unsafe-fx+ c1_108 1)))"
"(if(unsafe-fx< c1_109 b1_54)"
"(let-values()(loop_69 a1_82 b1_54 c1_109))"
"(void))))"
"(begin"
"(unsafe-vector-set! A_13 c1_108 y_41)"
"(let-values(((b1_55)(unsafe-fx+ b1_54 1))"
"((c1_110)(unsafe-fx+ c1_108 1)))"
"(if(unsafe-fx<= b2_27 b1_55)"
"((letrec-values(((loop_70)"
"(lambda(a1_83 c1_111)"
"(if(unsafe-fx< c1_111 b1_55)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_13"
" c1_111"
"(unsafe-vector-ref"
" A_13"
" a1_83))"
"(loop_70"
"(unsafe-fx+ a1_83 1)"
"(unsafe-fx+"
" c1_111"
" 1))))"
"(void)))))"
" loop_70)"
" a1_81"
" c1_110)"
"(loop_69 a1_81 b1_55 c1_110)))))))))"
" loop_69)"
" B1lo_13"
" Amid2_27"
" Alo_27))))))))))))"
"(let-values(((generic-sort/key_0)"
"(lambda(A_14 less-than?_1 n_29 key_8)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_28)(unsafe-fxrshift n_29 1)))"
"(let-values(((n/2+_28)(unsafe-fx- n_29 n/2-_28)))"
"(letrec-values(((copying-mergesort_14)"
"(lambda(Alo_28 Blo_14 n_30)"
"(if(unsafe-fx= n_30 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_14"
" Blo_14"
"(unsafe-vector-ref A_14 Alo_28)))"
"(if(unsafe-fx= n_30 2)"
"(let-values()"
"(let-values(((x_42)(unsafe-vector-ref A_14 Alo_28))"
"((y_42)"
"(unsafe-vector-ref"
" A_14"
"(unsafe-fx+ Alo_28 1))))"
"(if(if key_8"
"(less-than?_1(key_8 y_42)(key_8 x_42))"
"(less-than?_1 y_42 x_42))"
"(begin"
"(unsafe-vector-set! A_14 Blo_14 y_42)"
"(unsafe-vector-set! A_14(unsafe-fx+ Blo_14 1) x_42))"
"(begin"
"(unsafe-vector-set! A_14 Blo_14 x_42)"
"(unsafe-vector-set!"
" A_14"
"(unsafe-fx+ Blo_14 1)"
" y_42)))))"
"(if(unsafe-fx< n_30 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_14"
" Blo_14"
"(unsafe-vector-ref A_14 Alo_28))"
"((letrec-values(((iloop_14)"
"(lambda(i_18)"
"(if(unsafe-fx< i_18 n_30)"
"(let-values()"
"(let-values(((ref-i_14)"
"(unsafe-vector-ref"
" A_14"
"(unsafe-fx+"
" Alo_28"
" i_18))))"
"((letrec-values(((jloop_14)"
"(lambda(j_14)"
"(let-values(((ref-j-1_14)"
"(unsafe-vector-ref"
" A_14"
"(unsafe-fx-"
" j_14"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_14"
" j_14)"
"(if key_8"
"(less-than?_1"
"(key_8"
" ref-i_14)"
"(key_8"
" ref-j-1_14))"
"(less-than?_1"
" ref-i_14"
" ref-j-1_14))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_14"
" j_14"
" ref-j-1_14)"
"(jloop_14"
"(unsafe-fx-"
" j_14"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_14"
" j_14"
" ref-i_14)"
"(iloop_14"
"(unsafe-fx+"
" i_18"
" 1))))))))"
" jloop_14)"
"(unsafe-fx+ Blo_14 i_18))))"
"(void)))))"
" iloop_14)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_29)(unsafe-fxrshift n_30 1)))"
"(let-values(((n/2+_29)(unsafe-fx- n_30 n/2-_29)))"
"(let-values(((Amid1_28)(unsafe-fx+ Alo_28 n/2-_29))"
"((Amid2_28)(unsafe-fx+ Alo_28 n/2+_29))"
"((Bmid1_14)(unsafe-fx+ Blo_14 n/2-_29)))"
"(begin"
"(copying-mergesort_14 Amid1_28 Bmid1_14 n/2+_29)"
"(copying-mergesort_14 Alo_28 Amid2_28 n/2-_29)"
"(let-values(((b2_28)(unsafe-fx+ Blo_14 n_30)))"
"((letrec-values(((loop_71)"
"(lambda(a1_84 b1_56 c1_112)"
"(let-values(((x_43)"
"(unsafe-vector-ref"
" A_14"
" a1_84))"
"((y_43)"
"(unsafe-vector-ref"
" A_14"
" b1_56)))"
"(if(not"
"(if key_8"
"(less-than?_1"
"(key_8 y_43)"
"(key_8 x_43))"
"(less-than?_1"
" y_43"
" x_43)))"
"(begin"
"(unsafe-vector-set!"
" A_14"
" c1_112"
" x_43)"
"(let-values(((a1_85)"
"(unsafe-fx+"
" a1_84"
" 1))"
"((c1_113)"
"(unsafe-fx+"
" c1_112"
" 1)))"
"(if(unsafe-fx<"
" c1_113"
" b1_56)"
"(let-values()"
"(loop_71"
" a1_85"
" b1_56"
" c1_113))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_14"
" c1_112"
" y_43)"
"(let-values(((b1_57)"
"(unsafe-fx+"
" b1_56"
" 1))"
"((c1_114)"
"(unsafe-fx+"
" c1_112"
" 1)))"
"(if(unsafe-fx<="
" b2_28"
" b1_57)"
"((letrec-values(((loop_72)"
"(lambda(a1_86"
" c1_115)"
"(if(unsafe-fx<"
" c1_115"
" b1_57)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_14"
" c1_115"
"(unsafe-vector-ref"
" A_14"
" a1_86))"
"(loop_72"
"(unsafe-fx+"
" a1_86"
" 1)"
"(unsafe-fx+"
" c1_115"
" 1))))"
"(void)))))"
" loop_72)"
" a1_84"
" c1_114)"
"(loop_71"
" a1_84"
" b1_57"
" c1_114)))))))))"
" loop_71)"
" Amid2_28"
" Bmid1_14"
" Blo_14)))))))))))))"
"(let-values(((Alo_29) 0)"
"((Amid1_29) n/2-_28)"
"((Amid2_29) n/2+_28)"
"((Ahi_14) n_29)"
"((B1lo_14) n_29))"
"(begin"
"(copying-mergesort_14 Amid1_29 B1lo_14 n/2+_28)"
"(if(zero? n/2-_28)"
"(void)"
"(let-values()(copying-mergesort_14 Alo_29 Amid2_29 n/2-_28)))"
"(let-values(((b2_29) Ahi_14))"
"((letrec-values(((loop_73)"
"(lambda(a1_87 b1_58 c1_116)"
"(let-values(((x_44)(unsafe-vector-ref A_14 a1_87))"
"((y_44)(unsafe-vector-ref A_14 b1_58)))"
"(if(if key_8"
"(less-than?_1(key_8 x_44)(key_8 y_44))"
"(less-than?_1 x_44 y_44))"
"(begin"
"(unsafe-vector-set! A_14 c1_116 x_44)"
"(let-values(((a1_88)(unsafe-fx+ a1_87 1))"
"((c1_117)(unsafe-fx+ c1_116 1)))"
"(if(unsafe-fx< c1_117 b1_58)"
"(let-values()(loop_73 a1_88 b1_58 c1_117))"
"(void))))"
"(begin"
"(unsafe-vector-set! A_14 c1_116 y_44)"
"(let-values(((b1_59)(unsafe-fx+ b1_58 1))"
"((c1_118)(unsafe-fx+ c1_116 1)))"
"(if(unsafe-fx<= b2_29 b1_59)"
"((letrec-values(((loop_74)"
"(lambda(a1_89 c1_119)"
"(if(unsafe-fx<"
" c1_119"
" b1_59)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_14"
" c1_119"
"(unsafe-vector-ref"
" A_14"
" a1_89))"
"(loop_74"
"(unsafe-fx+ a1_89 1)"
"(unsafe-fx+"
" c1_119"
" 1))))"
"(void)))))"
" loop_74)"
" a1_87"
" c1_118)"
"(loop_73 a1_87 b1_59 c1_118)))))))))"
" loop_73)"
" B1lo_14"
" Amid2_29"
" Alo_29))))))))))))"
"(values"
"(case-lambda"
"((lst_0 less-than?_2)"
"(let-values(((n_31)(length lst_0)))"
"(let-values()"
"(if(unsafe-fx= n_31 0)"
"(let-values() lst_0)"
"(if((letrec-values(((loop_75)"
"(lambda(last_0 next_1)"
"(let-values(((or-part_26)(null? next_1)))"
"(if or-part_26"
" or-part_26"
"(if(not(less-than?_2(unsafe-car next_1) last_0))"
"(loop_75(unsafe-car next_1)(unsafe-cdr next_1))"
" #f))))))"
" loop_75)"
"(car lst_0)"
"(cdr lst_0))"
"(let-values() lst_0)"
"(if(unsafe-fx<= n_31 3)"
"(let-values()"
"(if(unsafe-fx= n_31 1)"
"(let-values() lst_0)"
"(if(unsafe-fx= n_31 2)"
"(let-values()(list(cadr lst_0)(car lst_0)))"
"(let-values()"
"(let-values(((a_3)(car lst_0))((b_1)(cadr lst_0))((c_2)(caddr lst_0)))"
"(if(less-than?_2 b_1 a_3)"
"(if(less-than?_2 c_2 b_1)"
"(list c_2 b_1 a_3)"
"(if(less-than?_2 c_2 a_3)(list b_1 c_2 a_3)(list b_1 a_3 c_2)))"
"(if(less-than?_2 c_2 a_3)(list c_2 a_3 b_1)(list a_3 c_2 b_1))))))))"
"(let-values()"
"(let-values(((vec_0)(make-vector(+ n_31(ceiling(/ n_31 2))))))"
"(begin"
"((letrec-values(((loop_76)"
"(lambda(i_19 lst_1)"
"(if(pair? lst_1)"
"(let-values()"
"(begin"
"(vector-set! vec_0 i_19(car lst_1))"
"(loop_76(add1 i_19)(cdr lst_1))))"
"(void)))))"
" loop_76)"
" 0"
" lst_0)"
"(let-values(((precomp_0)"
"(hash-ref"
"(let-values(((or-part_27) precompiled-sorts_0))"
"(if or-part_27 or-part_27(precompile-sorts!_0)))"
" less-than?_2"
" #f)))"
"(if precomp_0(precomp_0 vec_0 n_31)(generic-sort_0 vec_0 less-than?_2 n_31)))"
"((letrec-values(((loop_77)"
"(lambda(i_20 r_2)"
"(let-values(((i_21)(sub1 i_20)))"
"(if(< i_21 0)"
" r_2"
"(loop_77 i_21(cons(vector-ref vec_0 i_21) r_2)))))))"
" loop_77)"
" n_31"
" '()))))))))))"
"((lst_2 less-than?_3 getkey_0)"
"(if(if getkey_0(not(eq? values getkey_0)) #f)"
"(sort lst_2 less-than?_3 getkey_0 #f)"
"(sort lst_2 less-than?_3)))"
"((lst_3 less-than?_4 getkey_1 cache-keys?_0)"
"(if(if getkey_1(not(eq? values getkey_1)) #f)"
"(let-values(((n_32)(length lst_3)))"
"(let-values()"
"(if(unsafe-fx= n_32 0)"
"(let-values() lst_3)"
"(if cache-keys?_0"
"(let-values()"
"(let-values(((vec_1)(make-vector(+ n_32(ceiling(/ n_32 2))))))"
"(begin"
"((letrec-values(((loop_78)"
"(lambda(i_22 lst_4)"
"(if(pair? lst_4)"
"(let-values()"
"(let-values(((x_45)(car lst_4)))"
"(begin"
"(unsafe-vector-set! vec_1 i_22(cons(getkey_1 x_45) x_45))"
"(loop_78(unsafe-fx+ i_22 1)(cdr lst_4)))))"
"(void)))))"
" loop_78)"
" 0"
" lst_3)"
"(generic-sort/key_0 vec_1 less-than?_4 n_32 unsafe-car)"
"((letrec-values(((loop_79)"
"(lambda(i_23 r_3)"
"(let-values(((i_24)(unsafe-fx- i_23 1)))"
"(if(unsafe-fx< i_24 0)"
" r_3"
"(loop_79"
" i_24"
"(cons(unsafe-cdr(unsafe-vector-ref vec_1 i_24)) r_3)))))))"
" loop_79)"
" n_32"
" '()))))"
"(if((letrec-values(((loop_80)"
"(lambda(last_1 next_2)"
"(let-values(((or-part_28)(null? next_2)))"
"(if or-part_28"
" or-part_28"
"(if(not"
"(if getkey_1"
"(less-than?_4"
"(getkey_1(unsafe-car next_2))"
"(getkey_1 last_1))"
"(less-than?_4(unsafe-car next_2) last_1)))"
"(loop_80(unsafe-car next_2)(unsafe-cdr next_2))"
" #f))))))"
" loop_80)"
"(car lst_3)"
"(cdr lst_3))"
"(let-values() lst_3)"
"(if(unsafe-fx<= n_32 3)"
"(let-values()"
"(if(unsafe-fx= n_32 1)"
"(let-values() lst_3)"
"(if(unsafe-fx= n_32 2)"
"(let-values()(list(cadr lst_3)(car lst_3)))"
"(let-values()"
"(let-values(((a_4)(car lst_3))((b_2)(cadr lst_3))((c_3)(caddr lst_3)))"
"(if(if getkey_1"
"(less-than?_4(getkey_1 b_2)(getkey_1 a_4))"
"(less-than?_4 b_2 a_4))"
"(if(if getkey_1"
"(less-than?_4(getkey_1 c_3)(getkey_1 b_2))"
"(less-than?_4 c_3 b_2))"
"(list c_3 b_2 a_4)"
"(if(if getkey_1"
"(less-than?_4(getkey_1 c_3)(getkey_1 a_4))"
"(less-than?_4 c_3 a_4))"
"(list b_2 c_3 a_4)"
"(list b_2 a_4 c_3)))"
"(if(if getkey_1"
"(less-than?_4(getkey_1 c_3)(getkey_1 a_4))"
"(less-than?_4 c_3 a_4))"
"(list c_3 a_4 b_2)"
"(list a_4 c_3 b_2))))))))"
"(let-values()"
"(let-values(((vec_2)(make-vector(+ n_32(ceiling(/ n_32 2))))))"
"(begin"
"((letrec-values(((loop_81)"
"(lambda(i_25 lst_5)"
"(if(pair? lst_5)"
"(let-values()"
"(begin"
"(vector-set! vec_2 i_25(car lst_5))"
"(loop_81(add1 i_25)(cdr lst_5))))"
"(void)))))"
" loop_81)"
" 0"
" lst_3)"
"(generic-sort/key_0 vec_2 less-than?_4 n_32 getkey_1)"
"((letrec-values(((loop_82)"
"(lambda(i_26 r_4)"
"(let-values(((i_27)(sub1 i_26)))"
"(if(< i_27 0)"
" r_4"
"(loop_82 i_27(cons(vector-ref vec_2 i_27) r_4)))))))"
" loop_82)"
" n_32"
" '()))))))))))"
"(sort lst_3 less-than?_4))))"
"(case-lambda"
"((vec_3 less-than?_5 start_2 end_2)"
"(let-values(((n_33)(- end_2 start_2)))"
"(let-values(((dst-vec_0)(make-vector n_33)))"
"(let-values(((dst-start_0) 0))"
"(begin"
"(if(unsafe-fx= n_33 0)"
"(let-values()(void))"
"(if((letrec-values(((loop_83)"
"(lambda(prev-val_0 next-index_0)"
"(let-values(((or-part_29)(unsafe-fx= next-index_0 end_2)))"
"(if or-part_29"
" or-part_29"
"(let-values(((next-val_0)(unsafe-vector-ref vec_3 next-index_0)))"
"(if(not(less-than?_5 next-val_0 prev-val_0))"
"(loop_83 next-val_0(unsafe-fx+ next-index_0 1))"
" #f)))))))"
" loop_83)"
"(unsafe-vector-ref vec_3 start_2)"
"(unsafe-fx+ start_2 1))"
"(let-values()(let-values()(vector-copy! dst-vec_0 dst-start_0 vec_3 start_2 end_2)))"
"(if(unsafe-fx<= n_33 3)"
"(let-values()"
"(begin"
"(let-values()(vector-copy! dst-vec_0 dst-start_0 vec_3 start_2 end_2))"
"(if(unsafe-fx= n_33 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_33 2)"
"(let-values()"
"(let-values(((tmp_0)(unsafe-vector-ref dst-vec_0(unsafe-fx+ dst-start_0 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_0"
"(unsafe-fx+ dst-start_0 0)"
"(unsafe-vector-ref dst-vec_0(unsafe-fx+ dst-start_0 1)))"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 1) tmp_0))))"
"(let-values()"
"(let-values(((a_5)(unsafe-vector-ref dst-vec_0(unsafe-fx+ dst-start_0 0)))"
"((b_3)(unsafe-vector-ref dst-vec_0(unsafe-fx+ dst-start_0 1)))"
"((c_4)(unsafe-vector-ref dst-vec_0(unsafe-fx+ dst-start_0 2))))"
"(if(less-than?_5 b_3 a_5)"
"(let-values()"
"(if(less-than?_5 c_4 b_3)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 0) c_4)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 2) a_5)))"
"(if(less-than?_5 c_4 a_5)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 0) b_3)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 1) c_4)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 2) a_5)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 0) b_3)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 1) a_5))))))"
"(if(less-than?_5 c_4 a_5)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 0) c_4)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 1) a_5)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 2) b_3)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 1) c_4)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 2) b_3)))))))))))"
"(let-values()"
"(let-values(((work-vec_0)(make-vector(+ n_33(ceiling(/ n_33 2))) #f)))"
"(begin"
"(vector-copy! work-vec_0 0 vec_3 start_2 end_2)"
"(let-values(((precomp_1)"
"(hash-ref"
"(let-values(((or-part_30) precompiled-sorts_0))"
"(if or-part_30 or-part_30(precompile-sorts!_0)))"
" less-than?_5"
" #f)))"
"(if precomp_1"
"(precomp_1 work-vec_0 n_33)"
"(generic-sort_0 work-vec_0 less-than?_5 n_33)))"
"(vector-copy! dst-vec_0 dst-start_0 work-vec_0 0 n_33)))))))"
" dst-vec_0)))))"
"((vec_4 less-than?_6 start_3 end_3 getkey_2 cache-keys?_1)"
"(if(if getkey_2(not(eq? values getkey_2)) #f)"
"(let-values(((n_34)(- end_3 start_3)))"
"(let-values(((dst-vec_1)(make-vector n_34)))"
"(let-values(((dst-start_1) 0))"
"(begin"
"(if(unsafe-fx= n_34 0)"
"(let-values()(void))"
"(if cache-keys?_1"
"(let-values()"
"(let-values(((work-vec_1)(make-vector(+ n_34(ceiling(/ n_34 2))) #t)))"
"(begin"
"((letrec-values(((loop_84)"
"(lambda(i_28)"
"(if(unsafe-fx< i_28 n_34)"
"(let-values()"
"(begin"
"(let-values(((x_46)"
"(unsafe-vector-ref"
" vec_4"
"(unsafe-fx+ i_28 start_3))))"
"(unsafe-vector-set!"
" work-vec_1"
" i_28"
"(cons(getkey_2 x_46) x_46)))"
"(loop_84(unsafe-fx+ i_28 1))))"
"(void)))))"
" loop_84)"
" 0)"
"(generic-sort/key_0 work-vec_1 less-than?_6 n_34 unsafe-car)"
"((letrec-values(((loop_85)"
"(lambda(i_29)"
"(if(unsafe-fx< i_29 n_34)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_1"
"(unsafe-fx+ i_29 dst-start_1)"
"(unsafe-cdr(unsafe-vector-ref work-vec_1 i_29)))"
"(loop_85(unsafe-fx+ i_29 1))))"
"(void)))))"
" loop_85)"
" 0))))"
"(if((letrec-values(((loop_86)"
"(lambda(prev-val_1 next-index_1)"
"(let-values(((or-part_31)(unsafe-fx= next-index_1 end_3)))"
"(if or-part_31"
" or-part_31"
"(let-values(((next-val_1)"
"(unsafe-vector-ref vec_4 next-index_1)))"
"(if(not"
"(if getkey_2"
"(less-than?_6"
"(getkey_2 next-val_1)"
"(getkey_2 prev-val_1))"
"(less-than?_6 next-val_1 prev-val_1)))"
"(loop_86 next-val_1(unsafe-fx+ next-index_1 1))"
" #f)))))))"
" loop_86)"
"(unsafe-vector-ref vec_4 start_3)"
"(unsafe-fx+ start_3 1))"
"(let-values()(let-values()(vector-copy! dst-vec_1 dst-start_1 vec_4 start_3 end_3)))"
"(if(unsafe-fx<= n_34 3)"
"(let-values()"
"(begin"
"(let-values()(vector-copy! dst-vec_1 dst-start_1 vec_4 start_3 end_3))"
"(if(unsafe-fx= n_34 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_34 2)"
"(let-values()"
"(let-values(((tmp_1)"
"(unsafe-vector-ref dst-vec_1(unsafe-fx+ dst-start_1 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_1"
"(unsafe-fx+ dst-start_1 0)"
"(unsafe-vector-ref dst-vec_1(unsafe-fx+ dst-start_1 1)))"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 1) tmp_1))))"
"(let-values()"
"(let-values(((a_6)(unsafe-vector-ref dst-vec_1(unsafe-fx+ dst-start_1 0)))"
"((b_4)(unsafe-vector-ref dst-vec_1(unsafe-fx+ dst-start_1 1)))"
"((c_5)"
"(unsafe-vector-ref dst-vec_1(unsafe-fx+ dst-start_1 2))))"
"(if(if getkey_2"
"(less-than?_6(getkey_2 b_4)(getkey_2 a_6))"
"(less-than?_6 b_4 a_6))"
"(let-values()"
"(if(if getkey_2"
"(less-than?_6(getkey_2 c_5)(getkey_2 b_4))"
"(less-than?_6 c_5 b_4))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 0) c_5)"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 2) a_6)))"
"(if(if getkey_2"
"(less-than?_6(getkey_2 c_5)(getkey_2 a_6))"
"(less-than?_6 c_5 a_6))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 0) b_4)"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 1) c_5)"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 2) a_6)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 0) b_4)"
"(unsafe-vector-set!"
" dst-vec_1"
"(unsafe-fx+ dst-start_1 1)"
" a_6))))))"
"(if(if getkey_2"
"(less-than?_6(getkey_2 c_5)(getkey_2 a_6))"
"(less-than?_6 c_5 a_6))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 0) c_5)"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 1) a_6)"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 2) b_4)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 1) c_5)"
"(unsafe-vector-set!"
" dst-vec_1"
"(unsafe-fx+ dst-start_1 2)"
" b_4)))))))))))"
"(let-values()"
"(let-values(((work-vec_2)(make-vector(+ n_34(ceiling(/ n_34 2))) #f)))"
"(begin"
"(vector-copy! work-vec_2 0 vec_4 start_3 end_3)"
"(generic-sort/key_0 work-vec_2 less-than?_6 n_34 getkey_2)"
"(vector-copy! dst-vec_1 dst-start_1 work-vec_2 0 n_34))))))))"
" dst-vec_1))))"
"(vector-sort vec_4 less-than?_6 start_3 end_3))))"
"(case-lambda"
"((vec_5 less-than?_7 start_4 end_4)"
"(let-values(((n_35)(- end_4 start_4)))"
"(let-values(((dst-vec_2) vec_5))"
"(let-values(((dst-start_2) start_4))"
"(begin"
"(if(unsafe-fx= n_35 0)"
"(let-values()(void))"
"(if((letrec-values(((loop_87)"
"(lambda(prev-val_2 next-index_2)"
"(let-values(((or-part_32)(unsafe-fx= next-index_2 end_4)))"
"(if or-part_32"
" or-part_32"
"(let-values(((next-val_2)(unsafe-vector-ref vec_5 next-index_2)))"
"(if(not(less-than?_7 next-val_2 prev-val_2))"
"(loop_87 next-val_2(unsafe-fx+ next-index_2 1))"
" #f)))))))"
" loop_87)"
"(unsafe-vector-ref vec_5 start_4)"
"(unsafe-fx+ start_4 1))"
"(let-values()(void))"
"(if(unsafe-fx<= n_35 3)"
"(let-values()"
"(begin"
"(void)"
"(if(unsafe-fx= n_35 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_35 2)"
"(let-values()"
"(let-values(((tmp_2)(unsafe-vector-ref dst-vec_2(unsafe-fx+ dst-start_2 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2"
"(unsafe-fx+ dst-start_2 0)"
"(unsafe-vector-ref dst-vec_2(unsafe-fx+ dst-start_2 1)))"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 1) tmp_2))))"
"(let-values()"
"(let-values(((a_7)(unsafe-vector-ref dst-vec_2(unsafe-fx+ dst-start_2 0)))"
"((b_5)(unsafe-vector-ref dst-vec_2(unsafe-fx+ dst-start_2 1)))"
"((c_6)(unsafe-vector-ref dst-vec_2(unsafe-fx+ dst-start_2 2))))"
"(if(less-than?_7 b_5 a_7)"
"(let-values()"
"(if(less-than?_7 c_6 b_5)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 0) c_6)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 2) a_7)))"
"(if(less-than?_7 c_6 a_7)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 0) b_5)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 1) c_6)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 2) a_7)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 0) b_5)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 1) a_7))))))"
"(if(less-than?_7 c_6 a_7)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 0) c_6)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 1) a_7)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 2) b_5)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 1) c_6)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 2) b_5)))))))))))"
"(let-values()"
"(let-values(((work-vec_3)(make-vector(+ n_35(ceiling(/ n_35 2))) #f)))"
"(begin"
"(vector-copy! work-vec_3 0 vec_5 start_4 end_4)"
"(let-values(((precomp_2)"
"(hash-ref"
"(let-values(((or-part_33) precompiled-sorts_0))"
"(if or-part_33 or-part_33(precompile-sorts!_0)))"
" less-than?_7"
" #f)))"
"(if precomp_2"
"(precomp_2 work-vec_3 n_35)"
"(generic-sort_0 work-vec_3 less-than?_7 n_35)))"
"(vector-copy! dst-vec_2 dst-start_2 work-vec_3 0 n_35)))))))"
"(void))))))"
"((vec_6 less-than?_8 start_5 end_5 getkey_3 cache-keys?_2)"
"(if(if getkey_3(not(eq? values getkey_3)) #f)"
"(let-values(((n_36)(- end_5 start_5)))"
"(let-values(((dst-vec_3) vec_6))"
"(let-values(((dst-start_3) start_5))"
"(begin"
"(if(unsafe-fx= n_36 0)"
"(let-values()(void))"
"(if cache-keys?_2"
"(let-values()"
"(let-values(((work-vec_4)(make-vector(+ n_36(ceiling(/ n_36 2))) #t)))"
"(begin"
"((letrec-values(((loop_88)"
"(lambda(i_30)"
"(if(unsafe-fx< i_30 n_36)"
"(let-values()"
"(begin"
"(let-values(((x_47)"
"(unsafe-vector-ref"
" vec_6"
"(unsafe-fx+ i_30 start_5))))"
"(unsafe-vector-set!"
" work-vec_4"
" i_30"
"(cons(getkey_3 x_47) x_47)))"
"(loop_88(unsafe-fx+ i_30 1))))"
"(void)))))"
" loop_88)"
" 0)"
"(generic-sort/key_0 work-vec_4 less-than?_8 n_36 unsafe-car)"
"((letrec-values(((loop_89)"
"(lambda(i_31)"
"(if(unsafe-fx< i_31 n_36)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_3"
"(unsafe-fx+ i_31 dst-start_3)"
"(unsafe-cdr(unsafe-vector-ref work-vec_4 i_31)))"
"(loop_89(unsafe-fx+ i_31 1))))"
"(void)))))"
" loop_89)"
" 0))))"
"(if((letrec-values(((loop_90)"
"(lambda(prev-val_3 next-index_3)"
"(let-values(((or-part_34)(unsafe-fx= next-index_3 end_5)))"
"(if or-part_34"
" or-part_34"
"(let-values(((next-val_3)"
"(unsafe-vector-ref vec_6 next-index_3)))"
"(if(not"
"(if getkey_3"
"(less-than?_8"
"(getkey_3 next-val_3)"
"(getkey_3 prev-val_3))"
"(less-than?_8 next-val_3 prev-val_3)))"
"(loop_90 next-val_3(unsafe-fx+ next-index_3 1))"
" #f)))))))"
" loop_90)"
"(unsafe-vector-ref vec_6 start_5)"
"(unsafe-fx+ start_5 1))"
"(let-values()(void))"
"(if(unsafe-fx<= n_36 3)"
"(let-values()"
"(begin"
"(void)"
"(if(unsafe-fx= n_36 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_36 2)"
"(let-values()"
"(let-values(((tmp_3)"
"(unsafe-vector-ref dst-vec_3(unsafe-fx+ dst-start_3 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_3"
"(unsafe-fx+ dst-start_3 0)"
"(unsafe-vector-ref dst-vec_3(unsafe-fx+ dst-start_3 1)))"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 1) tmp_3))))"
"(let-values()"
"(let-values(((a_8)(unsafe-vector-ref dst-vec_3(unsafe-fx+ dst-start_3 0)))"
"((b_6)(unsafe-vector-ref dst-vec_3(unsafe-fx+ dst-start_3 1)))"
"((c_7)"
"(unsafe-vector-ref dst-vec_3(unsafe-fx+ dst-start_3 2))))"
"(if(if getkey_3"
"(less-than?_8(getkey_3 b_6)(getkey_3 a_8))"
"(less-than?_8 b_6 a_8))"
"(let-values()"
"(if(if getkey_3"
"(less-than?_8(getkey_3 c_7)(getkey_3 b_6))"
"(less-than?_8 c_7 b_6))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 0) c_7)"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 2) a_8)))"
"(if(if getkey_3"
"(less-than?_8(getkey_3 c_7)(getkey_3 a_8))"
"(less-than?_8 c_7 a_8))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 0) b_6)"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 1) c_7)"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 2) a_8)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 0) b_6)"
"(unsafe-vector-set!"
" dst-vec_3"
"(unsafe-fx+ dst-start_3 1)"
" a_8))))))"
"(if(if getkey_3"
"(less-than?_8(getkey_3 c_7)(getkey_3 a_8))"
"(less-than?_8 c_7 a_8))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 0) c_7)"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 1) a_8)"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 2) b_6)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 1) c_7)"
"(unsafe-vector-set!"
" dst-vec_3"
"(unsafe-fx+ dst-start_3 2)"
" b_6)))))))))))"
"(let-values()"
"(let-values(((work-vec_5)(make-vector(+ n_36(ceiling(/ n_36 2))) #f)))"
"(begin"
"(vector-copy! work-vec_5 0 vec_6 start_5 end_5)"
"(generic-sort/key_0 work-vec_5 less-than?_8 n_36 getkey_3)"
"(vector-copy! dst-vec_3 dst-start_3 work-vec_5 0 n_36))))))))"
"(void)))))"
"(vector-sort! vec_6 less-than?_8 start_5 end_5)))))))))))"
"(define-values"
"(prop:stream stream-via-prop? stream-ref)"
"(make-struct-type-property"
" 'stream"
"(lambda(v_14 si_0)"
"(begin"
"(if(if(vector? v_14)"
"(if(= 3(vector-length v_14))"
"(if(procedure?(vector-ref v_14 0))"
"(if(procedure-arity-includes?(vector-ref v_14 0) 1)"
"(if(procedure?(vector-ref v_14 1))"
"(if(procedure-arity-includes?(vector-ref v_14 1) 1)"
"(if(procedure?(vector-ref v_14 2))(procedure-arity-includes?(vector-ref v_14 2) 1) #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:stream"
"(string-append"
"             \"(vector/c (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1))\")"
" v_14)))"
"(vector->immutable-vector v_14)))))"
"(define-values"
"(prop:gen-sequence sequence-via-prop? sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_15 si_1)"
"(begin"
"(if(if(procedure? v_15)(procedure-arity-includes? v_15 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:sequence \"(procedure-arity-includes/c 1)\" v_15)))"
" v_15))))"
"(define-values"
"(struct:range make-range range? range-ref range-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_16)(let-values(((cont?_0)(range-ref v_16 2)))(if cont?_0(not(cont?_0(range-ref v_16 0))) #f)))"
"(lambda(v_17)(range-ref v_17 0))"
"(lambda(v_18)(make-range((range-ref v_18 1)(range-ref v_18 0))(range-ref v_18 1)(range-ref v_18 2)))))"
"(cons"
" prop:gen-sequence"
"(lambda(v_19)(values values #f(range-ref v_19 1)(range-ref v_19 0)(range-ref v_19 2) #f #f))))))"
"(define-values"
"(check-range)"
"(lambda(a_9 b_7 step_0)"
"(begin"
"      (if (real? a_9) (void) (let-values () (raise-argument-error 'in-range \"real?\" a_9)))"
"      (if (real? b_7) (void) (let-values () (raise-argument-error 'in-range \"real?\" b_7)))"
"      (if (real? step_0) (void) (let-values () (raise-argument-error 'in-range \"real?\" step_0))))))"
"(define-values"
"(check-naturals)"
"(lambda(n_37)"
"(if(if(integer? n_37)(if(exact? n_37)(>= n_37 0) #f) #f)"
"(void)"
"      (let-values () (raise-argument-error 'in-naturals \"exact-nonnegative-integer?\" n_37)))))"
"(define-values"
"(struct:list-stream make-list-stream list-stream? list-stream-ref list-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_20)(not(pair?(list-stream-ref v_20 0))))"
"(lambda(v_21)(car(list-stream-ref v_21 0)))"
"(lambda(v_22)(make-list-stream(cdr(list-stream-ref v_22 0))))))"
"(cons prop:gen-sequence(lambda(v_23)(values car cdr values(list-stream-ref v_23 0) pair? #f #f))))))"
"(define-values"
"(check-list)"
"  (lambda (l_11) (if (list? l_11) (void) (let-values () (raise-argument-error 'in-list \"list?\" l_11)))))"
"(define-values"
"(check-in-hash)"
"(lambda(ht_11)"
"    (if ((lambda (ht_12) (hash? ht_12)) ht_11) (void) (let-values () (raise-argument-error 'in-hash \"hash?\" ht_11)))))"
"(define-values"
"(check-in-immutable-hash)"
"(lambda(ht_13)"
"(if((lambda(ht_14)(if(hash? ht_14)(immutable? ht_14) #f)) ht_13)"
"(void)"
"      (let-values () (raise-argument-error 'in-immutable-hash \"(and/c hash? immutable?)\" ht_13)))))"
"(define-values"
"(check-in-hash-keys)"
"(lambda(ht_15)"
"(if((lambda(ht_16)(hash? ht_16)) ht_15)"
"(void)"
"      (let-values () (raise-argument-error 'in-hash-keys \"hash?\" ht_15)))))"
"(define-values"
"(check-in-immutable-hash-keys)"
"(lambda(ht_17)"
"(if((lambda(ht_18)(if(hash? ht_18)(immutable? ht_18) #f)) ht_17)"
"(void)"
"      (let-values () (raise-argument-error 'in-immutable-hash-keys \"(and/c hash? immutable?)\" ht_17)))))"
"(define-values"
"(check-in-hash-values)"
"(lambda(ht_19)"
"(if((lambda(ht_20)(hash? ht_20)) ht_19)"
"(void)"
"      (let-values () (raise-argument-error 'in-hash-values \"hash?\" ht_19)))))"
"(define-values"
"(check-ranges)"
"(lambda(who_5 vec_7 start_6 stop_0 step_1 len_2)"
"(begin"
"(if(if(exact-nonnegative-integer? start_6)"
"(let-values(((or-part_35)(< start_6 len_2)))(if or-part_35 or-part_35(= len_2 start_6 stop_0)))"
" #f)"
"(void)"
"        (let-values () (raise-range-error who_5 \"vector\" \"starting \" start_6 vec_7 0 (sub1 len_2))))"
"(if(if(exact-integer? stop_0)(if(<= -1 stop_0)(<= stop_0 len_2) #f) #f)"
"(void)"
"        (let-values () (raise-range-error who_5 \"vector\" \"stopping \" stop_0 vec_7 -1 len_2)))"
"(if(if(exact-integer? step_1)(not(zero? step_1)) #f)"
"(void)"
"        (let-values () (raise-argument-error who_5 \"(and/c exact-integer? (not/c zero?))\" step_1)))"
"(if(if(< start_6 stop_0)(< step_1 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_5"
"           \"starting index less than stopping index, but given a negative step\""
"           \"starting index\""
" start_6"
"           \"stopping index\""
" stop_0"
"           \"step\""
" step_1))"
"(void))"
"(if(if(< stop_0 start_6)(> step_1 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_5"
"           \"starting index more than stopping index, but given a positive step\""
"           \"starting index\""
" start_6"
"           \"stopping index\""
" stop_0"
"           \"step\""
" step_1))"
"(void)))))"
"(define-values"
"(normalise-inputs)"
"(lambda(who_6 type-name_0 vector?_0 unsafe-vector-length_0 vec_8 start_7 stop_1 step_2)"
"(begin"
"(if(vector?_0 vec_8)(void)(let-values()(raise-argument-error who_6 type-name_0 vec_8)))"
"(let-values(((len_3)(unsafe-vector-length_0 vec_8)))"
"(let-values(((stop*_0)(if stop_1 stop_1 len_3)))"
"(begin(check-ranges who_6 vec_8 start_7 stop*_0 step_2 len_3)(values vec_8 start_7 stop*_0 step_2)))))))"
"(define-values"
"(check-vector)"
"  (lambda (v_24) (if (vector? v_24) (void) (let-values () (raise-argument-error 'in-vector \"vector\" v_24)))))"
"(define-values"
"(check-string)"
"  (lambda (v_25) (if (string? v_25) (void) (let-values () (raise-argument-error 'in-string \"string\" v_25)))))"
"(define-values"
"(check-bytes)"
"  (lambda (v_26) (if (bytes? v_26) (void) (let-values () (raise-argument-error 'in-bytes \"bytes\" v_26)))))"
"(define-values"
"(struct:do-stream make-do-stream do-stream? do-stream-ref do-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_27)((do-stream-ref v_27 0)))"
"(lambda(v_28)((do-stream-ref v_28 1)))"
"(lambda(v_29)((do-stream-ref v_29 2))))))))"
"(define-values(empty-stream)(make-do-stream(lambda() #t) void void))"
"(define-values"
"(grow-vector)"
"(lambda(vec_9)"
"(let-values(((n_38)(vector-length vec_9)))"
"(let-values(((new-vec_0)(make-vector(* 2 n_38))))(begin(vector-copy! new-vec_0 0 vec_9 0 n_38) new-vec_0)))))"
"(define-values"
"(shrink-vector)"
"(lambda(vec_10 i_32)"
"(let-values(((new-vec_1)(make-vector i_32)))(begin(vector-copy! new-vec_1 0 vec_10 0 i_32) new-vec_1))))"
"(define-values"
"(map2)"
"(let-values(((map_0)"
"(case-lambda"
"((f_3 l_12)"
"(if(if(procedure? f_3)(if(procedure-arity-includes? f_3 1)(list? l_12) #f) #f)"
"((letrec-values(((loop_91)"
"(lambda(l_2)"
"(if(null? l_2)"
"(let-values() null)"
"(let-values()"
"(let-values(((r_5)(cdr l_2)))(cons(f_3(car l_2))(loop_91 r_5))))))))"
" loop_91)"
" l_12)"
"(map f_3 l_12)))"
"((f_4 l1_0 l2_0)"
"(if(if(procedure? f_4)"
"(if(procedure-arity-includes? f_4 2)"
"(if(list? l1_0)(if(list? l2_0)(=(length l1_0)(length l2_0)) #f) #f)"
" #f)"
" #f)"
"((letrec-values(((loop_92)"
"(lambda(l1_1 l2_1)"
"(if(null? l1_1)"
"(let-values() null)"
"(let-values()"
"(let-values(((r1_0)(cdr l1_1))((r2_0)(cdr l2_1)))"
"(cons(f_4(car l1_1)(car l2_1))(loop_92 r1_0 r2_0))))))))"
" loop_92)"
" l1_0"
" l2_0)"
"(map f_4 l1_0 l2_0)))"
"((f_5 l_13 . args_0)(apply map f_5 l_13 args_0)))))"
" map_0))"
"(define-values"
"(for-each2)"
"(let-values(((for-each_0)"
"(case-lambda"
"((f_6 l_14)"
"(if(if(procedure? f_6)(if(procedure-arity-includes? f_6 1)(list? l_14) #f) #f)"
"((letrec-values(((loop_93)"
"(lambda(l_15)"
"(if(null? l_15)"
"(let-values()(void))"
"(let-values()"
"(let-values(((r_6)(cdr l_15)))"
"(begin(f_6(car l_15))(loop_93 r_6))))))))"
" loop_93)"
" l_14)"
"(for-each f_6 l_14)))"
"((f_7 l1_2 l2_2)"
"(if(if(procedure? f_7)"
"(if(procedure-arity-includes? f_7 2)"
"(if(list? l1_2)(if(list? l2_2)(=(length l1_2)(length l2_2)) #f) #f)"
" #f)"
" #f)"
"((letrec-values(((loop_94)"
"(lambda(l1_3 l2_3)"
"(if(null? l1_3)"
"(let-values()(void))"
"(let-values()"
"(let-values(((r1_1)(cdr l1_3))((r2_1)(cdr l2_3)))"
"(begin(f_7(car l1_3)(car l2_3))(loop_94 r1_1 r2_1))))))))"
" loop_94)"
" l1_2"
" l2_2)"
"(for-each f_7 l1_2 l2_2)))"
"((f_8 l_16 . args_1)(apply for-each f_8 l_16 args_1)))))"
" for-each_0))"
"(define-values"
"(andmap2)"
"(let-values(((andmap_0)"
"(case-lambda"
"((f_9 l_17)"
"(if(if(procedure? f_9)(if(procedure-arity-includes? f_9 1)(list? l_17) #f) #f)"
"(if(null? l_17)"
" #t"
"((letrec-values(((loop_95)"
"(lambda(l_18)"
"(if(null?(cdr l_18))"
"(let-values()(f_9(car l_18)))"
"(let-values()"
"(let-values(((r_7)(cdr l_18)))"
"(if(f_9(car l_18))(loop_95 r_7) #f)))))))"
" loop_95)"
" l_17))"
"(andmap f_9 l_17)))"
"((f_10 l1_4 l2_4)"
"(if(if(procedure? f_10)"
"(if(procedure-arity-includes? f_10 2)"
"(if(list? l1_4)(if(list? l2_4)(=(length l1_4)(length l2_4)) #f) #f)"
" #f)"
" #f)"
"(if(null? l1_4)"
" #t"
"((letrec-values(((loop_96)"
"(lambda(l1_5 l2_5)"
"(if(null?(cdr l1_5))"
"(let-values()(f_10(car l1_5)(car l2_5)))"
"(let-values()"
"(let-values(((r1_2)(cdr l1_5))((r2_2)(cdr l2_5)))"
"(if(f_10(car l1_5)(car l2_5))(loop_96 r1_2 r2_2) #f)))))))"
" loop_96)"
" l1_4"
" l2_4))"
"(andmap f_10 l1_4 l2_4)))"
"((f_11 l_19 . args_2)(apply andmap f_11 l_19 args_2)))))"
" andmap_0))"
"(define-values"
"(ormap2)"
"(let-values(((ormap_0)"
"(case-lambda"
"((f_12 l_20)"
"(if(if(procedure? f_12)(if(procedure-arity-includes? f_12 1)(list? l_20) #f) #f)"
"(if(null? l_20)"
" #f"
"((letrec-values(((loop_97)"
"(lambda(l_5)"
"(if(null?(cdr l_5))"
"(let-values()(f_12(car l_5)))"
"(let-values()"
"(let-values(((r_8)(cdr l_5)))"
"(let-values(((or-part_36)(f_12(car l_5))))"
"(if or-part_36 or-part_36(loop_97 r_8)))))))))"
" loop_97)"
" l_20))"
"(ormap f_12 l_20)))"
"((f_13 l1_6 l2_6)"
"(if(if(procedure? f_13)"
"(if(procedure-arity-includes? f_13 2)"
"(if(list? l1_6)(if(list? l2_6)(=(length l1_6)(length l2_6)) #f) #f)"
" #f)"
" #f)"
"(if(null? l1_6)"
" #f"
"((letrec-values(((loop_98)"
"(lambda(l1_7 l2_7)"
"(if(null?(cdr l1_7))"
"(let-values()(f_13(car l1_7)(car l2_7)))"
"(let-values()"
"(let-values(((r1_3)(cdr l1_7))((r2_3)(cdr l2_7)))"
"(let-values(((or-part_37)(f_13(car l1_7)(car l2_7))))"
"(if or-part_37 or-part_37(loop_98 r1_3 r2_3)))))))))"
" loop_98)"
" l1_6"
" l2_6))"
"(ormap f_13 l1_6 l2_6)))"
"((f_14 l_21 . args_3)(apply ormap f_14 l_21 args_3)))))"
" ormap_0))"
"(define-values"
"(hash-keys)"
"(lambda(h_0)"
"((letrec-values(((loop_14)"
"(lambda(pos_0)"
"(if pos_0(cons(hash-iterate-key h_0 pos_0)(loop_14(hash-iterate-next h_0 pos_0))) null))))"
" loop_14)"
"(hash-iterate-first h_0))))"
"(define-values"
"(sort7.1)"
"(lambda(cache-keys?2_0 cache-keys?4_0 key1_0 key3_0 lst5_0 less?6_0)"
"(let-values(((lst_6) lst5_0))"
"(let-values(((less?_0) less?6_0))"
"(let-values(((getkey_4)(if key3_0 key1_0 #f)))"
"(let-values(((cache-keys?_3)(if cache-keys?4_0 cache-keys?2_0 #f)))"
"(let-values()"
"(begin"
"                (if (list? lst_6) (void) (let-values () (raise-argument-error 'sort \"list?\" lst_6)))"
"(if(if(procedure? less?_0)(procedure-arity-includes? less?_0 2) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'sort \"(any/c any/c . -> . any/c)\" less?_0)))"
"(if(if getkey_4(not(if(procedure? getkey_4)(procedure-arity-includes? getkey_4 1) #f)) #f)"
"                  (let-values () (raise-argument-error 'sort \"(any/c . -> . any/c)\" getkey_4))"
"(void))"
"(if getkey_4(sort lst_6 less?_0 getkey_4 cache-keys?_3)(sort lst_6 less?_0))))))))))"
" (define-values (bad-list) (lambda (who_7 orig-l_8) (raise-mismatch-error who_7 \"not a proper list: \" orig-l_8)))"
"(define-values"
"(bad-item)"
"  (lambda (who_8 a_10 orig-l_9) (raise-mismatch-error who_8 \"non-pair found in list: \" a_10 \" in \" orig-l_9)))"
"(define-values"
"(1/assq 1/assv 1/assoc assf)"
"(let-values()"
"(let-values()"
"(let-values(((assq_0)"
"(lambda(x_48 l_22)"
"((letrec-values(((loop_99)"
"(lambda(l_23 t_0)"
"(if(pair? l_23)"
"(let-values()"
"(let-values(((a_0)(unsafe-car l_23)))"
"(if(pair? a_0)"
"(if(eq? x_48(unsafe-car a_0))"
" a_0"
"(let-values(((l_24)(unsafe-cdr l_23)))"
"(if(pair? l_24)"
"(let-values()"
"(let-values(((a_11)(unsafe-car l_24)))"
"(if(pair? a_11)"
"(if(eq? x_48(unsafe-car a_11))"
" a_11"
"(let-values(((t_1)(unsafe-cdr t_0))"
"((l_25)(unsafe-cdr l_24)))"
"(if(eq? l_25 t_1)"
"(bad-list 'assq l_22)"
"(loop_99 l_25 t_1))))"
"(bad-item 'assq a_11 l_22))))"
"(if(null? l_24)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_22))))))"
"(bad-item 'assq a_0 l_22))))"
"(if(null? l_23)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_22)))))))"
" loop_99)"
" l_22"
" l_22)))"
"((assv_0)"
"(lambda(x_49 l_26)"
"((letrec-values(((loop_100)"
"(lambda(l_27 t_2)"
"(if(pair? l_27)"
"(let-values()"
"(let-values(((a_12)(unsafe-car l_27)))"
"(if(pair? a_12)"
"(if(eqv? x_49(unsafe-car a_12))"
" a_12"
"(let-values(((l_28)(unsafe-cdr l_27)))"
"(if(pair? l_28)"
"(let-values()"
"(let-values(((a_13)(unsafe-car l_28)))"
"(if(pair? a_13)"
"(if(eqv? x_49(unsafe-car a_13))"
" a_13"
"(let-values(((t_3)(unsafe-cdr t_2))"
"((l_29)(unsafe-cdr l_28)))"
"(if(eq? l_29 t_3)"
"(bad-list 'assv l_26)"
"(loop_100 l_29 t_3))))"
"(bad-item 'assv a_13 l_26))))"
"(if(null? l_28)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_26))))))"
"(bad-item 'assv a_12 l_26))))"
"(if(null? l_27)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_26)))))))"
" loop_100)"
" l_26"
" l_26)))"
"((assoc_0)"
"(case-lambda"
"((x_50 l_30)"
"((letrec-values(((loop_101)"
"(lambda(l_31 t_4)"
"(if(pair? l_31)"
"(let-values()"
"(let-values(((a_14)(unsafe-car l_31)))"
"(if(pair? a_14)"
"(if(equal? x_50(unsafe-car a_14))"
" a_14"
"(let-values(((l_32)(unsafe-cdr l_31)))"
"(if(pair? l_32)"
"(let-values()"
"(let-values(((a_15)(unsafe-car l_32)))"
"(if(pair? a_15)"
"(if(equal? x_50(unsafe-car a_15))"
" a_15"
"(let-values(((t_5)(unsafe-cdr t_4))"
"((l_33)(unsafe-cdr l_32)))"
"(if(eq? l_33 t_5)"
"(bad-list 'assoc l_30)"
"(loop_101 l_33 t_5))))"
"(bad-item 'assoc a_15 l_30))))"
"(if(null? l_32)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_30))))))"
"(bad-item 'assoc a_14 l_30))))"
"(if(null? l_31)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_30)))))))"
" loop_101)"
" l_30"
" l_30))"
"((x_51 l_34 is-equal?_0)"
"(begin"
"(if(if(procedure? is-equal?_0)(procedure-arity-includes? is-equal?_0 2) #f)"
"(void)"
"                          (let-values () (raise-argument-error 'assoc \"(any/c any/c . -> . any/c)\" is-equal?_0)))"
"((letrec-values(((loop_102)"
"(lambda(l_35 t_6)"
"(if(pair? l_35)"
"(let-values()"
"(let-values(((a_16)(unsafe-car l_35)))"
"(if(pair? a_16)"
"(if(is-equal?_0 x_51(unsafe-car a_16))"
" a_16"
"(let-values(((l_36)(unsafe-cdr l_35)))"
"(if(pair? l_36)"
"(let-values()"
"(let-values(((a_17)(unsafe-car l_36)))"
"(if(pair? a_17)"
"(if(is-equal?_0 x_51(unsafe-car a_17))"
" a_17"
"(let-values(((t_7)(unsafe-cdr t_6))"
"((l_37)(unsafe-cdr l_36)))"
"(if(eq? l_37 t_7)"
"(bad-list 'assoc l_34)"
"(loop_102 l_37 t_7))))"
"(bad-item 'assoc a_17 l_34))))"
"(if(null? l_36)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_34))))))"
"(bad-item 'assoc a_16 l_34))))"
"(if(null? l_35)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_34)))))))"
" loop_102)"
" l_34"
" l_34)))))"
"((assf_0)"
"(lambda(f_15 l_38)"
"(begin"
"(if(if(procedure? f_15)(procedure-arity-includes? f_15 1) #f)"
"(void)"
"                          (let-values () (raise-argument-error 'assf \"(any/c any/c . -> . any/c)\" f_15)))"
"((letrec-values(((loop_103)"
"(lambda(l_39 t_8)"
"(if(pair? l_39)"
"(let-values()"
"(let-values(((a_18)(unsafe-car l_39)))"
"(if(pair? a_18)"
"(if((lambda(__0 a_19)(f_15 a_19)) #f(unsafe-car a_18))"
" a_18"
"(let-values(((l_8)(unsafe-cdr l_39)))"
"(if(pair? l_8)"
"(let-values()"
"(let-values(((a_20)(unsafe-car l_8)))"
"(if(pair? a_20)"
"(if((lambda(__1 a_21)(f_15 a_21))"
" #f"
"(unsafe-car a_20))"
" a_20"
"(let-values(((t_9)(unsafe-cdr t_8))"
"((l_40)(unsafe-cdr l_8)))"
"(if(eq? l_40 t_9)"
"(bad-list 'assf l_38)"
"(loop_103 l_40 t_9))))"
"(bad-item 'assf a_20 l_38))))"
"(if(null? l_8)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_38))))))"
"(bad-item 'assf a_18 l_38))))"
"(if(null? l_39)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_38)))))))"
" loop_103)"
" l_38"
" l_38)))))"
"(values assq_0 assv_0 assoc_0 assf_0)))))"
"(define-values"
"(filter)"
"(lambda(f_16 list_0)"
"(begin"
"(if(if(procedure? f_16)(procedure-arity-includes? f_16 1) #f)"
"(void)"
"        (let-values () (raise-argument-error 'filter \"(any/c . -> . any/c)\" f_16)))"
"      (if (list? list_0) (void) (let-values () (raise-argument-error 'filter \"list?\" list_0)))"
"((letrec-values(((loop_104)"
"(lambda(l_41 result_0)"
"(if(null? l_41)"
"(reverse$1 result_0)"
"(loop_104(cdr l_41)(if(f_16(car l_41))(cons(car l_41) result_0) result_0))))))"
" loop_104)"
" list_0"
" null))))"
"(define-values(no-empty-edge-table)(make-hash))"
" (define-values (binary-or-text-desc) \"(or/c 'binary 'text)\")"
"(define-values"
"(open-input-file6.1)"
"(lambda(for-module?2_0 for-module?4_0 mode1_0 mode3_0 path5_0)"
"(let-values(((path_3) path5_0))"
"(let-values(((mode_1)(if mode3_0 mode1_0 'binary)))"
"(let-values(((for-module?_0)(if for-module?4_0 for-module?2_0 #f)))"
"(let-values()"
"(begin"
"(if(path-string? path_3)"
"(void)"
"                (let-values () (raise-argument-error 'open-input-file \"path-string?\" path_3)))"
"(if(memq mode_1 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-input-file binary-or-text-desc mode_1)))"
"(open-input-file path_3 mode_1(if for-module?_0 'module 'none)))))))))"
"(define-values"
"(call-with-input-file*61.1)"
"(lambda(mode57_0 mode58_0 path59_0 proc60_0)"
"(let-values(((path_4) path59_0))"
"(let-values(((proc_0) proc60_0))"
"(let-values(((mode_2)(if mode58_0 mode57_0 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_4)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file* \"path-string?\" path_4)))"
"(if(if(procedure? proc_0)(procedure-arity-includes? proc_0 1) #f)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file* \"(input-port? . -> . any)\" proc_0)))"
"(if(memq mode_2 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-input-file* binary-or-text-desc mode_2)))"
"(let-values(((p_18)(open-input-file path_4 mode_2)))"
"(dynamic-wind void(lambda()(proc_0 p_18))(lambda()(close-input-port p_18)))))))))))"
"(define-values(the-empty-hash) '#hash())"
"(define-values(the-empty-hasheq) '#hasheq())"
"(define-values(the-empty-hasheqv) '#hasheqv())"
"(define-values"
"(set)"
"(case-lambda"
"(() the-empty-hash)"
"(l_42"
"(let-values(((lst_7) l_42))"
"(begin"
"(check-list lst_7)"
"((letrec-values(((for-loop_0)"
"(lambda(s_13 lst_8)"
"(if(pair? lst_8)"
"(let-values(((e_3)(unsafe-car lst_8))((rest_0)(unsafe-cdr lst_8)))"
"(let-values(((s_14)"
"(let-values(((s_11) s_13))"
"(let-values(((s_15)(let-values()(hash-set s_11 e_3 #t))))"
"(values s_15)))))"
"(if(not #f)(for-loop_0 s_14 rest_0) s_14)))"
" s_13))))"
" for-loop_0)"
" the-empty-hash"
" lst_7))))))"
"(define-values"
"(seteq)"
"(case-lambda"
"(() the-empty-hasheq)"
"(l_43"
"(let-values(((lst_9) l_43))"
"(begin"
"(check-list lst_9)"
"((letrec-values(((for-loop_1)"
"(lambda(s_16 lst_10)"
"(if(pair? lst_10)"
"(let-values(((e_4)(unsafe-car lst_10))((rest_1)(unsafe-cdr lst_10)))"
"(let-values(((s_17)"
"(let-values(((s_18) s_16))"
"(let-values(((s_19)(let-values()(hash-set s_18 e_4 #t))))"
"(values s_19)))))"
"(if(not #f)(for-loop_1 s_17 rest_1) s_17)))"
" s_16))))"
" for-loop_1)"
" the-empty-hasheq"
" lst_9))))))"
"(define-values(seteqv)(lambda() the-empty-hasheqv))"
"(define-values(set?)(lambda(s_20)(hash? s_20)))"
"(define-values(set-empty?)(lambda(s_21)(zero?(hash-count s_21))))"
"(define-values(set-member?)(lambda(s_22 e_5)(hash-ref s_22 e_5 #f)))"
"(define-values(set-count)(lambda(s_23)(hash-count s_23)))"
"(define-values(set-add)(lambda(s_24 e_6)(hash-set s_24 e_6 #t)))"
"(define-values(set-remove)(lambda(s_25 e_7)(hash-remove s_25 e_7)))"
"(define-values(set-first)(lambda(s_26)(hash-iterate-key s_26(hash-iterate-first s_26))))"
"(define-values(subset?)(lambda(s1_0 s2_0)(hash-keys-subset? s1_0 s2_0)))"
"(define-values"
"(set=?)"
"(lambda(s1_1 s2_1)"
"(let-values(((or-part_38)(eq? s1_1 s2_1)))"
"(if or-part_38 or-part_38(if(=(hash-count s1_1)(hash-count s2_1))(hash-keys-subset? s1_1 s2_1) #f)))))"
"(define-values"
"(set-subtract)"
"(lambda(s1_2 s2_2)"
"(let-values(((ht_21) s2_2))"
"(begin"
"(check-in-immutable-hash-keys ht_21)"
"((letrec-values(((for-loop_2)"
"(lambda(s1_3 i_33)"
"(if i_33"
"(let-values(((k_3)(unsafe-immutable-hash-iterate-key ht_21 i_33)))"
"(let-values(((s1_4)"
"(let-values(((s1_5) s1_3))"
"(let-values(((s1_6)(let-values()(hash-remove s1_5 k_3))))"
"(values s1_6)))))"
"(if(not #f)(for-loop_2 s1_4(unsafe-immutable-hash-iterate-next ht_21 i_33)) s1_4)))"
" s1_3))))"
" for-loop_2)"
" s1_2"
"(unsafe-immutable-hash-iterate-first ht_21))))))"
"(define-values"
"(set-union)"
"(lambda(s1_7 s2_3)"
"(if(<(set-count s1_7)(set-count s2_3))"
"(set-union s2_3 s1_7)"
"(let-values(((ht_22) s2_3))"
"(begin"
"(check-in-immutable-hash-keys ht_22)"
"((letrec-values(((for-loop_3)"
"(lambda(s1_8 i_34)"
"(if i_34"
"(let-values(((k_4)(unsafe-immutable-hash-iterate-key ht_22 i_34)))"
"(let-values(((s1_9)"
"(let-values(((s1_10) s1_8))"
"(let-values(((s1_11)(let-values()(hash-set s1_10 k_4 #t))))"
"(values s1_11)))))"
"(if(not #f)"
"(for-loop_3 s1_9(unsafe-immutable-hash-iterate-next ht_22 i_34))"
" s1_9)))"
" s1_8))))"
" for-loop_3)"
" s1_7"
"(unsafe-immutable-hash-iterate-first ht_22)))))))"
"(define-values"
"(set-intersect)"
"(lambda(s1_12 s2_4)"
"(if(<(set-count s1_12)(set-count s2_4))"
"(set-intersect s2_4 s1_12)"
"(let-values(((ht_23) s2_4))"
"(begin"
"(check-in-immutable-hash-keys ht_23)"
"((letrec-values(((for-loop_4)"
"(lambda(s_27 i_35)"
"(if i_35"
"(let-values(((k_5)(unsafe-immutable-hash-iterate-key ht_23 i_35)))"
"(let-values(((s_28)"
"(let-values(((s_29) s_27))"
"(let-values(((s_30)"
"(let-values()"
"(if(hash-ref s1_12 k_5 #f)"
" s_29"
"(hash-remove s_29 k_5)))))"
"(values s_30)))))"
"(if(not #f)"
"(for-loop_4 s_28(unsafe-immutable-hash-iterate-next ht_23 i_35))"
" s_28)))"
" s_27))))"
" for-loop_4)"
" s2_4"
"(unsafe-immutable-hash-iterate-first ht_23)))))))"
"(define-values"
"(set-partition)"
"(lambda(s_31 pred_0 empty-y-set_0 empty-n-set_0)"
"(let-values(((ht_24) s_31))"
"(begin"
"(check-in-immutable-hash-keys ht_24)"
"((letrec-values(((for-loop_5)"
"(lambda(y_45 n_39 i_36)"
"(if i_36"
"(let-values(((v_30)(unsafe-immutable-hash-iterate-key ht_24 i_36)))"
"(let-values(((y_46 n_40)"
"(let-values(((y_47) y_45)((n_41) n_39))"
"(let-values(((y_48 n_42)"
"(let-values()"
"(if(pred_0 v_30)"
"(values(set-add y_47 v_30) n_41)"
"(values y_47(set-add n_41 v_30))))))"
"(values y_48 n_42)))))"
"(if(not #f)"
"(for-loop_5 y_46 n_40(unsafe-immutable-hash-iterate-next ht_24 i_36))"
"(values y_46 n_40))))"
"(values y_45 n_39)))))"
" for-loop_5)"
" empty-y-set_0"
" empty-n-set_0"
"(unsafe-immutable-hash-iterate-first ht_24))))))"
"(define-values"
"(set->list)"
"(lambda(s_32)"
"(let-values(((ht_25) s_32))"
"(begin"
"(check-in-immutable-hash-keys ht_25)"
"((letrec-values(((for-loop_6)"
"(lambda(i_37)"
"(if i_37"
"(let-values(((k_6)(unsafe-immutable-hash-iterate-key ht_25 i_37)))"
"(let-values(((post-guard-var_0)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_0)(let-values()(let-values() k_6))))"
"(let-values(((result_1)"
"(if(post-guard-var_0)"
"(for-loop_6(unsafe-immutable-hash-iterate-next ht_25 i_37))"
" null)))"
"(cons elem_0 result_1))))))"
" null))))"
" for-loop_6)"
"(unsafe-immutable-hash-iterate-first ht_25))))))"
"(define-values"
"(list->set)"
"(lambda(l_44)"
"(let-values(((lst_11) l_44))"
"(begin"
"(check-list lst_11)"
"((letrec-values(((for-loop_7)"
"(lambda(table_0 lst_12)"
"(if(pair? lst_12)"
"(let-values(((k_7)(unsafe-car lst_12))((rest_2)(unsafe-cdr lst_12)))"
"(let-values(((table_1)"
"(let-values(((table_2) table_0))"
"(let-values(((table_3)"
"(let-values()"
"(let-values(((key_9 val_0)"
"(let-values()"
"(values(let-values() k_7) #t))))"
"(hash-set table_2 key_9 val_0)))))"
"(values table_3)))))"
"(if(not #f)(for-loop_7 table_1 rest_2) table_1)))"
" table_0))))"
" for-loop_7)"
" '#hash()"
" lst_11)))))"
"(define-values"
"(list->seteq)"
"(lambda(l_45)"
"(let-values(((lst_13) l_45))"
"(begin"
"(check-list lst_13)"
"((letrec-values(((for-loop_8)"
"(lambda(table_4 lst_14)"
"(if(pair? lst_14)"
"(let-values(((k_8)(unsafe-car lst_14))((rest_3)(unsafe-cdr lst_14)))"
"(let-values(((table_5)"
"(let-values(((table_6) table_4))"
"(let-values(((table_7)"
"(let-values()"
"(let-values(((key_10 val_1)"
"(let-values()"
"(values(let-values() k_8) #t))))"
"(hash-set table_6 key_10 val_1)))))"
"(values table_7)))))"
"(if(not #f)(for-loop_8 table_5 rest_3) table_5)))"
" table_4))))"
" for-loop_8)"
" '#hasheq()"
" lst_13)))))"
"(define-values(prop:serialize serialize? serialize-ref)(make-struct-type-property 'serialize))"
"(define-values"
"(prop:serialize-fill! serialize-fill!? serialize-fill!-ref)"
"(make-struct-type-property 'serialize-fill!))"
"(define-values(prop:reach-scopes reach-scopes? reach-scopes-ref)(make-struct-type-property 'reach-scopes))"
"(define-values"
"(prop:scope-with-bindings scope-with-bindings? scope-with-bindings-ref)"
"(make-struct-type-property 'scope-with-bindings))"
"(define-values"
"(prop:binding-reach-scopes binding-reach-scopes? binding-reach-scopes-ref)"
"(make-struct-type-property 'binding-reach-scopes))"
"(define-values"
"(1/module-path?)"
"(lambda(v_31)"
"(let-values(((or-part_0)(if(pair? v_31)(if(eq?(car v_31) 'submod)(submodule-module-path? v_31) #f) #f)))"
"(if or-part_0 or-part_0(root-module-path? v_31)))))"
"(define-values"
"(root-module-path?)"
"(lambda(v_32)"
"(let-values(((or-part_9)(path? v_32)))"
"(if or-part_9"
" or-part_9"
"(let-values(((or-part_2)(if(string? v_32)(string-module-path? v_32) #f)))"
"(if or-part_2"
" or-part_2"
"(let-values(((or-part_39)(if(symbol? v_32)(symbol-module-path? v_32) #f)))"
"(if or-part_39"
" or-part_39"
"(if(pair? v_32)"
"(let-values(((tmp_4)(car v_32)))"
"(if(equal? tmp_4 'quote)"
"(let-values()(if(pair?(cdr v_32))(if(symbol?(cadr v_32))(null?(cddr v_32)) #f) #f))"
"(if(equal? tmp_4 'lib)"
"(let-values()(lib-module-path? v_32))"
"(if(equal? tmp_4 'file)"
"(let-values()"
"(if(pair?(cdr v_32))"
"(if(string?(cadr v_32))(if(path-string?(cadr v_32))(null?(cddr v_32)) #f) #f)"
" #f))"
"(if(equal? tmp_4 'planet)(let-values()(planet-module-path? v_32))(let-values() #f))))))"
" #f)))))))))"
"(define-values"
"(submodule-module-path?)"
"(lambda(v_33)"
"(if(pair?(cdr v_33))"
"(if(list? v_33)"
"        (if (let-values (((or-part_25) (equal? (cadr v_33) \"..\")))"
"(if or-part_25"
" or-part_25"
"                (let-values (((or-part_8) (equal? (cadr v_33) \".\")))"
"(if or-part_8 or-part_8(root-module-path?(cadr v_33))))))"
"(let-values(((lst_15)(cddr v_33)))"
"(begin"
"(check-list lst_15)"
"((letrec-values(((for-loop_9)"
"(lambda(result_2 lst_16)"
"(if(pair? lst_16)"
"(let-values(((e_8)(unsafe-car lst_16))((rest_4)(unsafe-cdr lst_16)))"
"(let-values(((result_3)"
"(let-values()"
"(let-values(((result_4)"
"(let-values()"
"(let-values()"
"                                                                        (let-values (((or-part_40) (equal? e_8 \"..\")))"
"(if or-part_40 or-part_40(symbol? e_8)))))))"
"(values result_4)))))"
"(if(if(not((lambda x_52(not result_3)) e_8))(not #f) #f)"
"(for-loop_9 result_3 rest_4)"
" result_3)))"
" result_2))))"
" for-loop_9)"
" #t"
" lst_15)))"
" #f)"
" #f)"
" #f)))"
"(define-values"
"(string-module-path?)"
"(lambda(v_34)"
"(let-values(((temp14_0) #t)((temp15_0) #t)((temp16_0) #t))"
"(module-path-string?10.1 temp14_0 #t temp16_0 #t #f #f temp15_0 #t v_34))))"
"(define-values"
"(symbol-module-path?)"
"(lambda(v_35)"
"(let-values(((temp17_0)(symbol->string v_35)))(module-path-string?10.1 #f #f #f #f #f #f #f #f temp17_0))))"
"(define-values"
"(lib-module-path?)"
"(lambda(v_36)"
"(if(list? v_36)"
"(if(pair?(cdr v_36))"
"((letrec-values(((loop_5)"
"(lambda(v_37 first?_0)"
"(let-values(((or-part_41)(null? v_37)))"
"(if or-part_41"
" or-part_41"
"(if(string?(car v_37))"
"(if(let-values(((temp18_0)(car v_37))"
"((first?19_0) first?_0)"
"((first?20_0) first?_0))"
"(module-path-string?10.1 #f #f first?20_0 #t #f #f first?19_0 #t temp18_0))"
"(loop_5(cdr v_37) #f)"
" #f)"
" #f))))))"
" loop_5)"
"(cdr v_36)"
" #t)"
" #f)"
" #f)))"
"(define-values"
"(planet-module-path?)"
"(lambda(v_38)"
"(if(list? v_38)"
"(let-values(((tmp_5)(length v_38)))"
"(if(equal? tmp_5 1)"
"(let-values() #f)"
"(if(equal? tmp_5 2)"
"(let-values()"
"(let-values(((e_9)(cadr v_38)))"
"(if(string? e_9)"
"(let-values()"
"(let-values(((temp22_0) #t)((temp23_0) #t))"
"(module-path-string?10.1 #f #f temp23_0 #t temp22_0 #t #f #f e_9)))"
"(if(symbol? e_9)"
"(let-values()"
"(let-values(((temp24_0)(symbol->string e_9))((temp25_0) #t))"
"(module-path-string?10.1 #f #f #f #f temp25_0 #t #f #f temp24_0)))"
"(let-values() #f)))))"
"(let-values()"
"(let-values(((file_0)(cadr v_38)))"
"(let-values(((pkg_0)(caddr v_38)))"
"(let-values(((subs_0)(cdddr v_38)))"
"(if file_0"
"(if(let-values(((temp27_0) #t)((temp28_0) #t))"
"(module-path-string?10.1 #f #f temp28_0 #t #f #f temp27_0 #t file_0))"
"(if(if(list? pkg_0)"
"(if(<= 2(length pkg_0) 4)"
"(if(planet-user/pkg-string?(car pkg_0))"
"(if(planet-user/pkg-string?(cadr pkg_0))"
"(let-values(((or-part_42)(null?(cddr pkg_0))))"
"(if or-part_42"
" or-part_42"
"(let-values(((or-part_43)(planet-version-number?(caddr pkg_0))))"
"(if or-part_43"
" or-part_43"
"(let-values(((or-part_16)(null?(cddr pkg_0))))"
"(if or-part_16"
" or-part_16"
"(planet-version-minor-spec?(cadddr pkg_0))))))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values(((lst_17) subs_0))"
"(begin"
"(check-list lst_17)"
"((letrec-values(((for-loop_10)"
"(lambda(result_5 lst_18)"
"(if(pair? lst_18)"
"(let-values(((sub_1)(unsafe-car lst_18))"
"((rest_5)(unsafe-cdr lst_18)))"
"(let-values(((result_6)"
"(let-values()"
"(let-values(((result_7)"
"(let-values()"
"(let-values()"
"(let-values(((sub29_0) sub_1))"
"(module-path-string?10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" sub29_0))))))"
"(values result_7)))))"
"(if(if(not((lambda x_53(not result_6)) sub_1))(not #f) #f)"
"(for-loop_10 result_6 rest_5)"
" result_6)))"
" result_5))))"
" for-loop_10)"
" #t"
" lst_17)))"
" #f)"
" #f)"
" #f))))))))"
" #f)))"
"(define-values(planet-version-number?)(lambda(v_39)(exact-nonnegative-integer? v_39)))"
"(define-values"
"(planet-version-minor-spec?)"
"(lambda(v_40)"
"(let-values(((or-part_18)(planet-version-number? v_40)))"
"(if or-part_18"
" or-part_18"
"(if(pair? v_40)"
"(if(list? v_40)"
"(if(= 2(length v_40))"
"(let-values(((tmp_6)(car v_40)))"
"(if(if(equal? tmp_6 '=) #t(if(equal? tmp_6 '+) #t(equal? tmp_6 '-)))"
"(let-values()(planet-version-number?(cadr v_40)))"
"(let-values()(if(planet-version-number?(car v_40))(planet-version-number?(cadr v_40)) #f))))"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(module-path-string?10.1)"
"(lambda(dots-dir-ok?2_0"
" dots-dir-ok?6_0"
" file-end-ok?4_0"
" file-end-ok?8_0"
" for-planet?1_0"
" for-planet?5_0"
" just-file-ok?3_0"
" just-file-ok?7_0"
" v9_0)"
"(let-values(((v_41) v9_0))"
"(let-values(((for-planet?_0)(if for-planet?5_0 for-planet?1_0 #f)))"
"(let-values(((dots-dir-ok?_0)(if dots-dir-ok?6_0 dots-dir-ok?2_0 #f)))"
"(let-values(((just-file-ok?_0)(if just-file-ok?7_0 just-file-ok?3_0 #f)))"
"(let-values(((file-end-ok?_0)(if file-end-ok?8_0 file-end-ok?4_0 #f)))"
"(let-values()"
"(let-values(((len_4)(string-length v_41)))"
"(if(positive? len_4)"
"(if(not(char=? '#\\/(string-ref v_41 0)))"
"(if(not(char=? '#\\/(string-ref v_41(sub1 len_4))))"
"(let-values(((start-package-version-pos_0 end-package-version-pos_0)"
"(if for-planet?_0(check-planet-part v_41 len_4)(values 0 0))))"
"(if start-package-version-pos_0"
"((letrec-values(((loop_105)"
"(lambda(i_38 prev-was-slash?_0 saw-slash?_0 saw-dot?_0)"
"(if(not(zero? i_38))"
"(let-values()"
"(let-values(((c_8)(string-ref v_41 i_38)))"
"(if(char=? c_8 '#\\/)"
"(let-values()"
"(if(not prev-was-slash?_0)"
"(loop_105(sub1 i_38) #t #t saw-dot?_0)"
" #f))"
"(if(char=? c_8 '#\\.)"
"(let-values()"
"(if(if(<(add1 i_38) len_4)"
"(if(not(char=?(string-ref v_41(add1 i_38)) '#\\/))"
"(not(char=?(string-ref v_41(add1 i_38)) '#\\.))"
" #f)"
" #f)"
"(if(not saw-slash?_0)"
"(loop_105(sub1 i_38) #f saw-slash?_0 #t)"
" #f)"
"(loop_105(sub1 i_38) #f saw-slash?_0 saw-dot?_0)))"
"(if(let-values(((or-part_44)(plain-char? c_8)))"
"(if or-part_44"
" or-part_44"
"(if(char=? c_8 '#\\%)"
"(if(<(+ i_38 2) len_4)"
"(hex-sequence? v_41(add1 i_38))"
" #f)"
" #f)))"
"(let-values()"
"(loop_105(sub1 i_38) #f saw-slash?_0 saw-dot?_0))"
"(if(if(>= i_38 start-package-version-pos_0)"
"(< i_38 end-package-version-pos_0)"
" #f)"
"(let-values()"
"(loop_105(sub1 i_38) #f saw-slash?_0 saw-dot?_0))"
"(let-values() #f)))))))"
"(let-values()"
"(if(not"
"(if(not just-file-ok?_0)"
"(if saw-dot?_0(not saw-slash?_0) #f)"
" #f))"
"(let-values(((or-part_45) dots-dir-ok?_0))"
"(if or-part_45"
" or-part_45"
"((letrec-values(((loop_106)"
"(lambda(i_39)"
"(if(= i_39 len_4)"
"(let-values() #t)"
"(if(char=?(string-ref v_41 i_39) '#\\.)"
"(let-values()"
"(if(not"
"(let-values(((or-part_46)"
"(="
" len_4"
"(add1 i_39))))"
"(if or-part_46"
" or-part_46"
"(char=?"
"(string-ref"
" v_41"
"(add1 i_39))"
" '#\\/))))"
"(if(not"
"(if(char=?"
"(string-ref"
" v_41"
"(add1 i_39))"
" '#\\.)"
"(let-values(((or-part_47)"
"(="
" len_4"
"(+"
" i_39"
" 2))))"
"(if or-part_47"
" or-part_47"
"(char=?"
"(string-ref"
" v_41"
"(+ i_39 2))"
" '#\\/)))"
" #f))"
"(loop_106"
"((letrec-values(((loop_107)"
"(lambda(i_40)"
"(if(char=?"
" '#\\."
"(string-ref"
" v_41"
" i_40))"
"(loop_107"
"(add1"
" i_40))"
" i_40))))"
" loop_107)"
" i_39))"
" #f)"
" #f))"
"(let-values()"
"(loop_106(add1 i_39))))))))"
" loop_106)"
" 0)))"
" #f))))))"
" loop_105)"
"(sub1 len_4)"
" #f"
"(not file-end-ok?_0)"
" #f)"
" #f))"
" #f)"
" #f)"
" #f))))))))))"
"(define-values"
"(planet-user/pkg-string?)"
"(lambda(v_42)"
"(if(string? v_42)"
"(let-values(((len_5)(string-length v_42)))"
"(if(positive? len_5)"
"(let-values(((vec_11 len_6)"
"(let-values(((vec_12) v_42))"
"(begin(check-string vec_12)(values vec_12(unsafe-string-length vec_12)))))"
"((start_8) 0))"
"(begin"
" #f"
"(check-naturals start_8)"
"((letrec-values(((for-loop_11)"
"(lambda(result_8 pos_1 pos_2)"
"(if(if(unsafe-fx< pos_1 len_6) #t #f)"
"(let-values(((c_9)(string-ref vec_11 pos_1))((i_41) pos_2))"
"(let-values(((result_9)"
"(let-values()"
"(let-values(((result_10)"
"(let-values()"
"(let-values()"
"(let-values(((or-part_48)(plain-char? c_9)))"
"(if or-part_48"
" or-part_48"
"(let-values(((or-part_49)"
"(char=? '#\\. c_9)))"
"(if or-part_49"
" or-part_49"
"(if(char=? '#\\% c_9)"
"(if(< i_41(- len_5 2))"
"(hex-sequence? v_42(add1 i_41))"
" #f)"
" #f)))))))))"
"(values result_10)))))"
"(if(if(not((lambda x_54(not result_9)) c_9))"
"(if(not((lambda x_55(not result_9)) i_41))(not #f) #f)"
" #f)"
"(for-loop_11 result_9(unsafe-fx+ 1 pos_1)(+ pos_2 1))"
" result_9)))"
" result_8))))"
" for-loop_11)"
" #t"
" 0"
" start_8)))"
" #f))"
" #f)))"
"(define-values"
"(plain-char?)"
"(lambda(c_1)"
"(let-values(((or-part_50)(char<=? '#\\a c_1 '#\\z)))"
"(if or-part_50"
" or-part_50"
"(let-values(((or-part_51)(char<=? '#\\A c_1 '#\\Z)))"
"(if or-part_51"
" or-part_51"
"(let-values(((or-part_52)(char<=? '#\\0 c_1 '#\\9)))"
"(if or-part_52"
" or-part_52"
"(let-values(((or-part_53)(char=? '#\\- c_1)))"
"(if or-part_53"
" or-part_53"
"(let-values(((or-part_54)(char=? '#\\_ c_1)))"
"(if or-part_54 or-part_54(char=? '#\\+ c_1)))))))))))))"
"(define-values"
"(hex-sequence?)"
"(lambda(s_33 i_37)"
"(let-values(((c1_120)(string-ref s_33 i_37)))"
"(let-values(((c2_0)(string-ref s_33(add1 i_37))))"
"(if(hex-char? c1_120)"
"(if(hex-char? c2_0)"
"(let-values(((c_10)(integer->char(+(*(hex-char->integer c1_120) 16)(hex-char->integer c2_0)))))"
"(not(plain-char? c_10)))"
" #f)"
" #f)))))"
"(define-values"
"(hex-char?)"
"(lambda(c_11)"
"(let-values(((or-part_55)(char<=? '#\\a c_11 '#\\f)))(if or-part_55 or-part_55(char<=? '#\\0 c_11 '#\\9)))))"
"(define-values"
"(hex-char->integer)"
"(lambda(c_12)"
"(if(char<=? '#\\a c_12 '#\\f)"
"(let-values()(-(char->integer c_12)(+ 10(char->integer '#\\a))))"
"(if(char<=? '#\\A c_12 '#\\F)"
"(let-values()(-(char->integer c_12)(+ 10(char->integer '#\\A))))"
"(let-values()(-(char->integer c_12)(char->integer '#\\0)))))))"
"(define-values"
"(check-planet-part)"
"(lambda(v_43 len_7)"
"(let-values(((start-package-version-pos_1 end-package-version-pos_1 colon1-pos_0 colon2-pos_0)"
"((letrec-values(((loop_108)"
"(lambda(j_15"
" start-package-version-pos_2"
" end-package-version-pos_2"
" colon1-pos_1"
" colon2-pos_1)"
"(if(= j_15 len_7)"
"(let-values()"
"(values"
" start-package-version-pos_2"
"(let-values(((or-part_56) end-package-version-pos_2))"
"(if or-part_56 or-part_56 j_15))"
" colon1-pos_1"
" colon2-pos_1))"
"(let-values()"
"(let-values(((tmp_7)(string-ref v_43 j_15)))"
"(if(equal? tmp_7 '#\\/)"
"(let-values()"
"(loop_108"
"(add1 j_15)"
"(let-values(((or-part_57) start-package-version-pos_2))"
"(if or-part_57 or-part_57(add1 j_15)))"
"(if start-package-version-pos_2"
"(let-values(((or-part_58) end-package-version-pos_2))"
"(if or-part_58 or-part_58 j_15))"
" #f)"
" colon1-pos_1"
" colon2-pos_1))"
"(if(equal? tmp_7 '#\\:)"
"(let-values()"
"(if colon2-pos_1"
"(let-values()(values #f #f #f #f))"
"(if colon1-pos_1"
"(let-values()"
"(loop_108"
"(add1 j_15)"
" start-package-version-pos_2"
" end-package-version-pos_2"
" colon1-pos_1"
" j_15))"
"(let-values()"
"(loop_108"
"(add1 j_15)"
" start-package-version-pos_2"
" end-package-version-pos_2"
" j_15"
" #f)))))"
"(let-values()"
"(loop_108"
"(add1 j_15)"
" start-package-version-pos_2"
" end-package-version-pos_2"
" colon1-pos_1"
" colon2-pos_1))))))))))"
" loop_108)"
" 0"
" #f"
" #f"
" #f"
" #f)))"
"(if(if start-package-version-pos_1"
"(if(> end-package-version-pos_1 start-package-version-pos_1)"
"(let-values(((or-part_59)(not colon2-pos_0)))"
"(if or-part_59 or-part_59(<(add1 colon2-pos_0) end-package-version-pos_1)))"
" #f)"
" #f)"
"(let-values()"
"(if colon1-pos_0"
"(let-values()"
"(let-values(((colon1-end_0)"
"(let-values(((or-part_60) colon2-pos_0))"
"(if or-part_60 or-part_60 end-package-version-pos_1))))"
"(if(if(integer-sequence? v_43(add1 colon1-pos_0) colon1-end_0)"
"(let-values(((or-part_61)(not colon2-pos_0)))"
"(if or-part_61"
" or-part_61"
"(let-values(((tmp_8)(string-ref v_43(add1 colon2-pos_0))))"
"(if(equal? tmp_8 '#\\=)"
"(let-values()(integer-sequence? v_43(+ 2 colon2-pos_0) end-package-version-pos_1))"
"(if(if(equal? tmp_8 '#\\>) #t(equal? tmp_8 '#\\<))"
"(let-values()"
"(if(if(<(+ 2 colon2-pos_0) end-package-version-pos_1)"
"(char=? '#\\=(string-ref v_43(+ colon2-pos_0 2)))"
" #f)"
"(let-values()"
"(integer-sequence? v_43(+ 3 colon2-pos_0) end-package-version-pos_1))"
"(let-values()"
"(integer-sequence? v_43(+ 2 colon2-pos_0) end-package-version-pos_1))))"
"(let-values()"
"(integer-range-sequence? v_43(add1 colon2-pos_0) end-package-version-pos_1)))))))"
" #f)"
"(let-values()(values colon1-pos_0 end-package-version-pos_1))"
"(let-values()(values #f #f)))))"
"(let-values()(values 0 0))))"
"(let-values()(values #f #f))))))"
"(define-values"
"(integer-sequence?)"
"(lambda(s_34 start_9 end_6)"
"(if(< start_9 end_6)"
"(let-values(((start_10) start_9)((end_7) end_6)((inc_0) 1))"
"(begin"
"(check-range start_10 end_7 inc_0)"
"((letrec-values(((for-loop_12)"
"(lambda(result_11 pos_3)"
"(if(< pos_3 end_7)"
"(let-values(((i_42) pos_3))"
"(let-values(((result_12)"
"(let-values()"
"(let-values(((result_13)"
"(let-values()"
"(let-values()"
"(char<=? '#\\0(string-ref s_34 i_42) '#\\9)))))"
"(values result_13)))))"
"(if(if(not((lambda x_56(not result_12)) i_42))(not #f) #f)"
"(for-loop_12 result_12(+ pos_3 inc_0))"
" result_12)))"
" result_11))))"
" for-loop_12)"
" #t"
" start_10)))"
" #f)))"
"(define-values"
"(integer-range-sequence?)"
"(lambda(s_35 start_11 end_8)"
"(if(< start_11 end_8)"
"(if(let-values(((start_12) start_11)((end_9) end_8)((inc_1) 1))"
"(begin"
"(check-range start_12 end_9 inc_1)"
"((letrec-values(((for-loop_13)"
"(lambda(result_14 pos_4)"
"(if(< pos_4 end_9)"
"(let-values(((i_43) pos_4))"
"(let-values(((result_15)"
"(let-values()"
"(let-values(((result_16)"
"(let-values()"
"(let-values()"
"(let-values(((c_13)(string-ref s_35 i_43)))"
"(let-values(((or-part_62)"
"(char=? c_13 '#\\-)))"
"(if or-part_62"
" or-part_62"
"(char<=? '#\\0 c_13 '#\\9))))))))"
"(values result_16)))))"
"(if(if(not((lambda x_57(not result_15)) i_43))(not #f) #f)"
"(for-loop_13 result_15(+ pos_4 inc_1))"
" result_15)))"
" result_14))))"
" for-loop_13)"
" #t"
" start_12)))"
"(>="
" 1"
"(let-values(((start_13) start_11)((end_10) end_8)((inc_2) 1))"
"(begin"
"(check-range start_13 end_10 inc_2)"
"((letrec-values(((for-loop_14)"
"(lambda(result_17 pos_5)"
"(if(< pos_5 end_10)"
"(let-values(((i_44) pos_5))"
"(let-values(((result_18)"
"(let-values(((result_19) result_17))"
"(let-values(((result_20)"
"(let-values()"
"(+"
" result_19"
"(let-values()"
"(if(char=?(string-ref s_35 i_44) '#\\-)"
" 1"
" 0))))))"
"(values result_20)))))"
"(if(not #f)(for-loop_14 result_18(+ pos_5 inc_2)) result_18)))"
" result_17))))"
" for-loop_14)"
" 0"
" start_13))))"
" #f)"
" #f)))"
"(define-values"
"(struct:weak-intern-table weak-intern-table1.1 weak-intern-table? weak-intern-table-box)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'weak-intern-table"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'weak-intern-table)))))"
"(values struct:_0 make-_0 ?_0(make-struct-field-accessor -ref_0 0 'box))))"
"(define-values"
"(struct:table table2.1 table? table-ht table-count table-prune-at)"
"(let-values(((struct:_1 make-_1 ?_1 -ref_1 -set!_1)"
"(let-values()"
"(let-values()(make-struct-type 'table #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'table)))))"
"(values"
" struct:_1"
" make-_1"
" ?_1"
"(make-struct-field-accessor -ref_1 0 'ht)"
"(make-struct-field-accessor -ref_1 1 'count)"
"(make-struct-field-accessor -ref_1 2 'prune-at))))"
"(define-values(make-weak-intern-table)(lambda()(weak-intern-table1.1(box(table2.1(hasheqv) 0 128)))))"
"(define-values"
"(weak-intern!)"
"(lambda(tt_0 v_44)"
"(let-values(((b_8)(weak-intern-table-box tt_0)))"
"(let-values(((t_10)(unbox b_8)))"
"(let-values(((code_0)(equal-hash-code v_44)))"
"(let-values(((vals_0)(hash-ref(table-ht t_10) code_0 null)))"
"(let-values(((or-part_63)"
"(let-values(((lst_19) vals_0))"
"(begin"
"(check-list lst_19)"
"((letrec-values(((for-loop_15)"
"(lambda(result_21 lst_20)"
"(if(pair? lst_20)"
"(let-values(((b_9)(unsafe-car lst_20))"
"((rest_6)(unsafe-cdr lst_20)))"
"(let-values(((result_22)"
"(let-values()"
"(let-values(((result_23)"
"(let-values()"
"(let-values()"
"(let-values(((bv_0)"
"(weak-box-value"
" b_9)))"
"(if(equal? bv_0 v_44)"
" bv_0"
" #f))))))"
"(values result_23)))))"
"(if(if(not((lambda x_58 result_22) b_9))(not #f) #f)"
"(for-loop_15 result_22 rest_6)"
" result_22)))"
" result_21))))"
" for-loop_15)"
" #f"
" lst_19)))))"
"(if or-part_63"
" or-part_63"
"(let-values(((pruned-t_0)(if(=(table-count t_10)(table-prune-at t_10))(prune-table t_10) t_10)))"
"(let-values(((ht_26)(table-ht pruned-t_0)))"
"(let-values(((new-t_0)"
"(table2.1"
"(hash-set ht_26 code_0(cons(make-weak-box v_44)(hash-ref ht_26 code_0 null)))"
"(add1(table-count pruned-t_0))"
"(table-prune-at pruned-t_0))))"
"(let-values(((or-part_64)(if(box-cas! b_8 t_10 new-t_0) v_44 #f)))"
"(if or-part_64 or-part_64(weak-intern! tt_0 v_44))))))))))))))"
"(define-values"
"(prune-table)"
"(lambda(t_11)"
"(let-values(((new-ht_0)"
"(let-values(((ht_27)(table-ht t_11)))"
"(begin"
"(check-in-hash ht_27)"
"((letrec-values(((for-loop_16)"
"(lambda(table_8 i_45)"
"(if i_45"
"(let-values(((k_2 vals_1)(hash-iterate-key+value ht_27 i_45)))"
"(let-values(((table_9)"
"(let-values(((new-vals_0)"
"(let-values(((lst_21) vals_1))"
"(begin"
"(check-list lst_21)"
"((letrec-values(((for-loop_17)"
"(lambda(lst_22)"
"(if(pair? lst_22)"
"(let-values(((b_10)"
"(unsafe-car"
" lst_22))"
"((rest_7)"
"(unsafe-cdr"
" lst_22)))"
"(let-values(((post-guard-var_1)"
"(lambda()"
" #t)))"
"(let-values()"
"(if(weak-box-value"
" b_10)"
"(let-values()"
"(let-values(((elem_1)"
"(let-values()"
"(let-values()"
" b_10))))"
"(let-values(((result_24)"
"(if(post-guard-var_1)"
"(for-loop_17"
" rest_7)"
" null)))"
"(cons"
" elem_1"
" result_24))))"
"(if(post-guard-var_1)"
"(for-loop_17"
" rest_7)"
" null)))))"
" null))))"
" for-loop_17)"
" lst_21)))))"
"(begin"
" #t"
"((letrec-values(((for-loop_18)"
"(lambda(table_10)"
"(let-values()"
"(let-values(((table_11)"
"(let-values(((table_12)"
" table_10))"
"(if(pair?"
" new-vals_0)"
"(let-values(((table_13)"
" table_12))"
"(let-values(((table_14)"
"(let-values()"
"(let-values(((key_11"
" val_2)"
"(let-values()"
"(values"
" k_2"
" new-vals_0))))"
"(hash-set"
" table_13"
" key_11"
" val_2)))))"
"(values"
" table_14)))"
" table_12))))"
" table_11)))))"
" for-loop_18)"
" table_8)))))"
"(if(not #f)"
"(for-loop_16 table_9(hash-iterate-next ht_27 i_45))"
" table_9)))"
" table_8))))"
" for-loop_16)"
" '#hash()"
"(hash-iterate-first ht_27))))))"
"(let-values(((count_0)"
"(let-values(((ht_28) new-ht_0))"
"(begin"
"(check-in-hash ht_28)"
"((letrec-values(((for-loop_19)"
"(lambda(result_25 i_46)"
"(if i_46"
"(let-values(((k_9 vals_2)(hash-iterate-key+value ht_28 i_46)))"
"(let-values(((result_26)"
"(let-values(((result_27) result_25))"
"(let-values(((result_28)"
"(let-values()"
"(+"
" result_27"
"(let-values()(length vals_2))))))"
"(values result_28)))))"
"(if(not #f)"
"(for-loop_19 result_26(hash-iterate-next ht_28 i_46))"
" result_26)))"
" result_25))))"
" for-loop_19)"
" 0"
"(hash-iterate-first ht_28))))))"
"(table2.1 new-ht_0 count_0(max 128(* 2 count_0)))))))"
"(define-values"
"(struct:resolved-module-path resolved-module-path1.1 1/resolved-module-path? 1/resolved-module-path-name)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'resolved-module-path"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(r_9 ser-push!_0 state_0)"
"(begin"
"(ser-push!_0 'tag '#:resolved-module-path)"
"(ser-push!_0(1/resolved-module-path-name r_9)))))"
"(cons"
" prop:custom-write"
"(lambda(r_10 port_0 mode_3)"
"(begin"
"                           (if mode_3 (let-values () (write-string \"#<resolved-module-path:\" port_0)) (void))"
"                           (fprintf port_0 \"~a\" (format-resolved-module-path-name (1/resolved-module-path-name r_10)))"
"                           (if mode_3 (let-values () (write-string \">\" port_0)) (void)))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_22 b_11 eql?_0)"
"(eql?_0(1/resolved-module-path-name a_22)(1/resolved-module-path-name b_11)))"
"(lambda(a_23 hash-code_0)(hash-code_0(1/resolved-module-path-name a_23)))"
"(lambda(a_24 hash-code_1)(hash-code_1(1/resolved-module-path-name a_24))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'resolved-module-path)))))"
"(values struct:_0 make-_0 ?_0(make-struct-field-accessor -ref_0 0 'name))))"
"(define-values"
"(format-resolved-module-path-name)"
"(lambda(p_19)"
"(if(path? p_19)"
"      (let-values () (string-append \"\\\"\" (path->string p_19) \"\\\"\"))"
"(if(symbol? p_19)"
"(let-values()(format-symbol p_19))"
"(let-values()(format-submod(format-resolved-module-path-name(car p_19))(cdr p_19)))))))"
"(define-values"
"(format-symbol)"
"  (lambda (p_20) (format \"'~s~a\" p_20 (if (symbol-interned? p_20) \"\" (format \"[~a]\" (eq-hash-code p_20))))))"
"(define-values"
"(format-submod)"
"(lambda(base_9 syms_0)"
"(format"
"     \"(submod ~a~a)\""
" base_9"
"(apply"
" string-append"
"(let-values(((lst_23) syms_0))"
"(begin"
"(check-list lst_23)"
"((letrec-values(((for-loop_20)"
"(lambda(lst_18)"
"(if(pair? lst_18)"
"(let-values(((i_47)(unsafe-car lst_18))((rest_5)(unsafe-cdr lst_18)))"
"(let-values(((post-guard-var_2)(lambda() #t)))"
"(let-values()"
"                                      (let-values (((elem_2) (let-values () (let-values () (format \" ~s\" i_47)))))"
"(let-values(((result_7)(if(post-guard-var_2)(for-loop_20 rest_5) null)))"
"(cons elem_2 result_7))))))"
" null))))"
" for-loop_20)"
" lst_23)))))))"
"(define-values"
"(resolved-module-path-root-name)"
"(lambda(r_11)"
"(let-values(((name_10)(1/resolved-module-path-name r_11)))(if(pair? name_10)(car name_10) name_10))))"
"(define-values(resolved-module-paths)(make-weak-intern-table))"
"(define-values"
"(1/make-resolved-module-path)"
"(lambda(p_8)"
"(begin"
"(if(let-values(((or-part_17)(symbol? p_8)))"
"(if or-part_17"
" or-part_17"
"(let-values(((or-part_18)(if(path? p_8)(complete-path? p_8) #f)))"
"(if or-part_18"
" or-part_18"
"(if(pair? p_8)"
"(if(pair?(cdr p_8))"
"(if(list? p_8)"
"(if(let-values(((or-part_19)(symbol?(car p_8))))"
"(if or-part_19 or-part_19(if(path?(car p_8))(complete-path?(car p_8)) #f)))"
"(let-values(((lst_24)(cdr p_8)))"
"(begin"
"(check-list lst_24)"
"((letrec-values(((for-loop_21)"
"(lambda(result_29 lst_25)"
"(if(pair? lst_25)"
"(let-values(((s_36)(unsafe-car lst_25))"
"((rest_8)(unsafe-cdr lst_25)))"
"(let-values(((result_30)"
"(let-values()"
"(let-values(((result_31)"
"(let-values()"
"(let-values()(symbol? s_36)))))"
"(values result_31)))))"
"(if(if(not((lambda x_59(not result_30)) s_36))(not #f) #f)"
"(for-loop_21 result_30 rest_8)"
" result_30)))"
" result_29))))"
" for-loop_21)"
" #t"
" lst_24)))"
" #f)"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-resolved-module-path"
"(string-append"
"            \"(or/c symbol?\\n\""
"            \"      (and/c path? complete-path?)\\n\""
"            \"      (cons/c (or/c symbol?\\n\""
"            \"                    (and/c path? complete-path?))\\n\""
"            \"              (non-empty-listof symbol?)))\")"
" p_8)))"
"(weak-intern! resolved-module-paths(resolved-module-path1.1 p_8)))))"
"(define-values"
"(resolved-module-path->module-path)"
"(lambda(r_12)"
"(let-values(((name_11)(1/resolved-module-path-name r_12)))"
"(let-values(((root-name_0)(if(pair? name_11)(car name_11) name_11)))"
"(let-values(((root-mod-path_0)(if(path? root-name_0) root-name_0(list 'quote root-name_0))))"
"(if(pair? name_11)(list* 'submod root-mod-path_0(cdr name_11)) root-mod-path_0))))))"
"(define-values"
"(struct:module-path-index"
" module-path-index2.1"
" 1/module-path-index?"
" module-path-index-path"
" module-path-index-base"
" module-path-index-resolved"
" module-path-index-shift-cache"
" set-module-path-index-resolved!"
" set-module-path-index-shift-cache!)"
"(let-values(((struct:_2 make-_2 ?_2 -ref_2 -set!_2)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-path-index"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(r_13 port_1 mode_4)"
"(begin"
"                           (write-string \"#<module-path-index\" port_1)"
"(if(top-level-module-path-index? r_13)"
"                             (let-values () (fprintf port_1 \":top-level\"))"
"(if(module-path-index-path r_13)"
"(let-values()"
"(let-values(((l_37)"
"((letrec-values(((loop_109)"
"(lambda(r_14)"
"(if(not r_14)"
"(let-values() null)"
"(if(1/resolved-module-path? r_14)"
"                                                                       (let-values () (list \"+\" (format \"~a\" r_14)))"
"(if(module-path-index-path r_14)"
"(let-values()"
"(cons"
"((letrec-values(((loop_103)"
"(lambda(v_30)"
"(if(if(pair? v_30)"
"(if(eq?"
" 'quote"
"(car v_30))"
"(null?"
"(cddr v_30))"
" #f)"
" #f)"
"(let-values()"
"(format-symbol"
"(cadr v_30)))"
"(if(if(pair? v_30)"
"(eq?"
" 'submod"
"(car v_30))"
" #f)"
"(let-values()"
"(format-submod"
"(loop_103"
"(cadr v_30))"
"(cddr v_30)))"
"(let-values()"
"(format"
"                                                                                                       \"~.s\""
"(module-path-index-path"
" r_14))))))))"
" loop_103)"
"(module-path-index-path r_14))"
"(loop_109(module-path-index-base r_14))))"
"(if(module-path-index-resolved r_14)"
"(let-values()"
"(list"
"                                                                              \"+\""
"(format"
"                                                                               \"~a\""
"(module-path-index-resolved r_14))))"
"(let-values() null))))))))"
" loop_109)"
" r_13)))"
"(fprintf"
" port_1"
"                                    \":~.a\""
"(apply"
" string-append"
"(car l_37)"
"(let-values(((lst_26)(cdr l_37)))"
"(begin"
"(check-list lst_26)"
"((letrec-values(((for-loop_22)"
"(lambda(lst_27)"
"(if(pair? lst_27)"
"(let-values(((i_48)(unsafe-car lst_27))"
"((rest_9)(unsafe-cdr lst_27)))"
"(let-values(((post-guard-var_3)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_3)"
"(let-values()"
"(let-values()"
"                                                                                       (format \" ~a\" i_48)))))"
"(let-values(((result_32)"
"(if(post-guard-var_3)"
"(for-loop_22 rest_9)"
" null)))"
"(cons elem_3 result_32))))))"
" null))))"
" for-loop_22)"
" lst_26)))))))"
"(if(module-path-index-resolved r_13)"
"                                 (let-values () (fprintf port_1 \"=~a\" (module-path-index-resolved r_13)))"
"(void))))"
"                           (write-string \">\" port_1))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_25 b_12 eql?_1)"
"(if(eql?_1(module-path-index-path a_25)(module-path-index-path b_12))"
"(eql?_1(module-path-index-base a_25)(module-path-index-base b_12))"
" #f))"
"(lambda(a_26 hash-code_2)"
"(+(hash-code_2(module-path-index-path a_26))(hash-code_2(module-path-index-base a_26))))"
"(lambda(a_27 hash-code_3)"
"(+"
"(hash-code_3(module-path-index-path a_27))"
"(hash-code_3(module-path-index-base a_27)))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-path-index)))))"
"(values"
" struct:_2"
" make-_2"
" ?_2"
"(make-struct-field-accessor -ref_2 0 'path)"
"(make-struct-field-accessor -ref_2 1 'base)"
"(make-struct-field-accessor -ref_2 2 'resolved)"
"(make-struct-field-accessor -ref_2 3 'shift-cache)"
"(make-struct-field-mutator -set!_2 2 'resolved)"
"(make-struct-field-mutator -set!_2 3 'shift-cache))))"
"(define-values"
"(deserialize-module-path-index)"
"(case-lambda"
"((path_5 base_10)(1/module-path-index-join path_5 base_10))"
"((name_12)(make-self-module-path-index(1/make-resolved-module-path name_12)))"
"(() top-level-module-path-index)))"
"(define-values"
"(1/module-path-index-resolve)"
"(let-values(((module-path-index-resolve6_0)"
"(lambda(mpi5_0 load?3_0 load?4_0)"
"(let-values(((mpi_0) mpi5_0))"
"(let-values(((load?_0)(if load?4_0 load?3_0 #f)))"
"(let-values()"
"(begin"
"(if(1/module-path-index? mpi_0)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'module-path-index-resolve \"module-path-index?\" mpi_0)))"
"(let-values(((or-part_65)(module-path-index-resolved mpi_0)))"
"(if or-part_65"
" or-part_65"
"(let-values(((mod-name_0)"
"((1/current-module-name-resolver)"
"(module-path-index-path mpi_0)"
"(module-path-index-resolve/maybe(module-path-index-base mpi_0) load?_0)"
" #f"
" load?_0)))"
"(begin"
"(if(1/resolved-module-path? mod-name_0)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-resolve"
"                                       \"current module name resolver's result is not a resolved module path\""
"                                       \"result\""
" mod-name_0)))"
"(set-module-path-index-resolved! mpi_0 mod-name_0)"
" mod-name_0)))))))))))"
"(case-lambda"
"((mpi_1)(module-path-index-resolve6_0 mpi_1 #f #f))"
"((mpi_2 load?3_1)(module-path-index-resolve6_0 mpi_2 load?3_1 #t)))))"
"(define-values"
"(module-path-index-unresolve)"
"(lambda(mpi_3)"
"(if(module-path-index-resolved mpi_3)"
"(let-values()"
"(let-values(((path_6 base_11)(1/module-path-index-split mpi_3)))(1/module-path-index-join path_6 base_11)))"
"(let-values() mpi_3))))"
"(define-values"
"(1/module-path-index-join)"
"(let-values(((module-path-index-join12_0)"
"(lambda(mod-path10_0 base11_0 submod8_0 submod9_0)"
"(let-values(((mod-path_0) mod-path10_0))"
"(let-values(((base_12) base11_0))"
"(let-values(((submod_0)(if submod9_0 submod8_0 #f)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_66)(not mod-path_0)))"
"(if or-part_66 or-part_66(1/module-path? mod-path_0)))"
"(void)"
"(let-values()"
"                                (raise-argument-error 'module-path-index-join \"(or/c #f module-path?)\" mod-path_0)))"
"(if(let-values(((or-part_67)(not base_12)))"
"(if or-part_67"
" or-part_67"
"(let-values(((or-part_68)(1/resolved-module-path? base_12)))"
"(if or-part_68 or-part_68(1/module-path-index? base_12)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                 \"(or/c #f resolved-module-path? module-path-index?)\""
" base_12)))"
"(if(let-values(((or-part_69)(not submod_0)))"
"(if or-part_69"
" or-part_69"
"(if(pair? submod_0)(if(list? submod_0)(andmap2 symbol? submod_0) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                 \"(or/c #f (non-empty-listof symbol?))\""
" submod_0)))"
"(if(if(not mod-path_0) base_12 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                 \"cannot combine #f path with non-#f base\""
"                                 \"given base\""
" base_12))"
"(void))"
"(if(if submod_0 mod-path_0 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                 \"cannot combine #f submodule list with non-#f module path\""
"                                 \"given module path\""
" mod-path_0"
"                                 \"given submodule list\""
" submod_0))"
"(void))"
"(if submod_0"
"(let-values()"
"(make-self-module-path-index"
"(1/make-resolved-module-path(cons generic-module-name submod_0))))"
"(let-values()"
"(let-values(((keep-base_0)"
"((letrec-values(((loop_110)"
"(lambda(mod-path_1)"
"(if(path? mod-path_1)"
"(let-values() #f)"
"(if(if(pair? mod-path_1)"
"(eq? 'quote(car mod-path_1))"
" #f)"
"(let-values() #f)"
"(if(symbol? mod-path_1)"
"(let-values() #f)"
"(if(if(pair? mod-path_1)"
"(eq? 'submod(car mod-path_1))"
" #f)"
"(let-values()(loop_110(cadr mod-path_1)))"
"(let-values() base_12))))))))"
" loop_110)"
" mod-path_0)))"
"(module-path-index2.1 mod-path_0 keep-base_0 #f #f))))))))))))"
"(case-lambda"
"((mod-path_2 base_13)(module-path-index-join12_0 mod-path_2 base_13 #f #f))"
"((mod-path_3 base_14 submod8_1)(module-path-index-join12_0 mod-path_3 base_14 submod8_1 #t)))))"
"(define-values"
"(module-path-index-resolve/maybe)"
"(lambda(base_15 load?_1)(if(1/module-path-index? base_15)(1/module-path-index-resolve base_15 load?_1) base_15)))"
"(define-values"
"(1/module-path-index-split)"
"(lambda(mpi_4)"
"(begin"
"(if(1/module-path-index? mpi_4)"
"(void)"
"        (let-values () (raise-argument-error 'module-path-index-split \"module-path-index?\" mpi_4)))"
"(values(module-path-index-path mpi_4)(module-path-index-base mpi_4)))))"
"(define-values"
"(1/module-path-index-submodule)"
"(lambda(mpi_5)"
"(begin"
"(if(1/module-path-index? mpi_5)"
"(void)"
"        (let-values () (raise-argument-error 'module-path-index-submodule \"module-path-index?\" mpi_5)))"
"(if(not(module-path-index-path mpi_5))"
"(let-values(((r_15)(module-path-index-resolved mpi_5)))"
"(if r_15(let-values(((p_21)(1/resolved-module-path-name r_15)))(if(pair? p_21)(cdr p_21) #f)) #f))"
" #f))))"
"(define-values"
"(make-self-module-path-index)"
"(case-lambda"
"((name_13)(module-path-index2.1 #f #f name_13 #f))"
"((name_14 enclosing_0)"
"(make-self-module-path-index"
"(let-values(((name23_0) name_14)((temp24_1)(if enclosing_0(1/module-path-index-resolve enclosing_0) #f)))"
"(build-module-name18.1 #f #f name23_0 temp24_1))))))"
"(define-values(generic-self-mpis)(make-weak-hash))"
"(define-values(generic-module-name) '|expanded module|)"
"(define-values"
"(make-generic-self-module-path-index)"
"(lambda(self_0)"
"(let-values(((r_16)(resolved-module-path-to-generic-resolved-module-path(module-path-index-resolved self_0))))"
"(let-values(((or-part_62)"
"(let-values(((e_10)(hash-ref generic-self-mpis r_16 #f)))(if e_10(ephemeron-value e_10) #f))))"
"(if or-part_62"
" or-part_62"
"(let-values(((mpi_6)(module-path-index2.1 #f #f r_16 #f)))"
"(begin(hash-set! generic-self-mpis r_16(make-ephemeron r_16 mpi_6)) mpi_6)))))))"
"(define-values"
"(resolved-module-path-to-generic-resolved-module-path)"
"(lambda(r_17)"
"(let-values(((name_15)(1/resolved-module-path-name r_17)))"
"(1/make-resolved-module-path"
"(if(symbol? name_15) generic-module-name(cons generic-module-name(cdr name_15)))))))"
"(define-values"
"(imitate-generic-module-path-index!)"
"(lambda(mpi_7)"
"(let-values(((r_18)(module-path-index-resolved mpi_7)))"
"(if r_18"
"(let-values()"
"(set-module-path-index-resolved! mpi_7(resolved-module-path-to-generic-resolved-module-path r_18)))"
"(void)))))"
"(define-values"
"(module-path-index-shift)"
"(lambda(mpi_8 from-mpi_0 to-mpi_0)"
"(if(eq? mpi_8 from-mpi_0)"
"(let-values() to-mpi_0)"
"(let-values()"
"(let-values(((base_16)(module-path-index-base mpi_8)))"
"(if(not base_16)"
"(let-values() mpi_8)"
"(let-values()"
"(let-values(((shifted-base_0)(module-path-index-shift base_16 from-mpi_0 to-mpi_0)))"
"(if(eq? shifted-base_0 base_16)"
"(let-values() mpi_8)"
"(let-values(((c1_121)(shift-cache-ref(module-path-index-shift-cache shifted-base_0) mpi_8)))"
"(if c1_121"
" c1_121"
"(let-values()"
"(let-values(((shifted-mpi_0)"
"(module-path-index2.1(module-path-index-path mpi_8) shifted-base_0 #f #f)))"
"(begin"
"(shift-cache-set!(module-path-index-shift-cache! shifted-base_0) mpi_8 shifted-mpi_0)"
" shifted-mpi_0))))))))))))))"
"(define-values"
"(module-path-index-shift-cache!)"
"(lambda(mpi_9)"
"(let-values(((or-part_70)"
"(let-values(((cache_0)(module-path-index-shift-cache mpi_9)))"
"(if cache_0(if(weak-box-value cache_0) cache_0 #f) #f))))"
"(if or-part_70"
" or-part_70"
"(let-values(((cache_1)(make-weak-box(box '#hasheq()))))"
"(begin(set-module-path-index-shift-cache! mpi_9 cache_1) cache_1))))))"
"(define-values"
"(shift-cache-ref)"
"(lambda(cache_2 v_45)"
"(if cache_2(let-values(((b_13)(weak-box-value cache_2)))(if b_13(hash-ref(unbox b_13) v_45 #f) #f)) #f)))"
"(define-values"
"(shift-cache-set!)"
"(lambda(cache_3 v_46 r_19)"
"(let-values(((b_14)(weak-box-value cache_3)))"
"(if b_14(let-values()(set-box! b_14(hash-set(unbox b_14) v_46 r_19)))(void)))))"
"(define-values(top-level-module-path-index)(make-self-module-path-index(1/make-resolved-module-path 'top-level)))"
"(define-values(top-level-module-path-index?)(lambda(mpi_10)(eq? top-level-module-path-index mpi_10)))"
"(define-values"
"(core-module-name-resolver)"
"(case-lambda"
"((name_16 from-namespace_0)(void))"
"((p_22 enclosing_1 source-stx-stx_0 load?_2)"
"(begin"
"(if(1/module-path? p_22)"
"(void)"
"        (let-values () (raise-argument-error 'core-module-name-resolver \"module-path?\" p_22)))"
"(if(let-values(((or-part_71)(not enclosing_1)))"
"(if or-part_71 or-part_71(1/resolved-module-path? enclosing_1)))"
"(void)"
"        (let-values () (raise-argument-error 'core-module-name-resolver \"resolved-module-path?\" enclosing_1)))"
"(if(if(list? p_22)(if(=(length p_22) 2)(if(eq? 'quote(car p_22))(symbol?(cadr p_22)) #f) #f) #f)"
"(let-values()(1/make-resolved-module-path(cadr p_22)))"
"        (if (if (list? p_22) (if (eq? 'submod (car p_22)) (equal? \"..\" (cadr p_22)) #f) #f)"
"(let-values()"
"(let-values(((lst_28)(cdr p_22)))"
"(begin"
"(check-list lst_28)"
"((letrec-values(((for-loop_23)"
"(lambda(enclosing_2 lst_29)"
"(if(pair? lst_29)"
"(let-values(((s_37)(unsafe-car lst_29))((rest_10)(unsafe-cdr lst_29)))"
"(let-values(((enclosing_3)"
"(let-values(((enclosing_4) enclosing_2))"
"(let-values(((enclosing_5)"
"(let-values()"
"(let-values(((p27_0) p_22))"
"(build-module-name18.1"
" p27_0"
" #t"
" s_37"
" enclosing_4)))))"
"(values enclosing_5)))))"
"(if(not #f)(for-loop_23 enclosing_3 rest_10) enclosing_3)))"
" enclosing_2))))"
" for-loop_23)"
" enclosing_1"
" lst_28))))"
"          (if (if (list? p_22) (if (eq? 'submod (car p_22)) (equal? \".\" (cadr p_22)) #f) #f)"
"(let-values()"
"(let-values(((lst_30)(cddr p_22)))"
"(begin"
"(check-list lst_30)"
"((letrec-values(((for-loop_24)"
"(lambda(enclosing_6 lst_31)"
"(if(pair? lst_31)"
"(let-values(((s_38)(unsafe-car lst_31))((rest_11)(unsafe-cdr lst_31)))"
"(let-values(((enclosing_7)"
"(let-values(((enclosing_8) enclosing_6))"
"(let-values(((enclosing_9)"
"(let-values()"
"(let-values(((p30_0) p_22))"
"(build-module-name18.1"
" p30_0"
" #t"
" s_38"
" enclosing_8)))))"
"(values enclosing_9)))))"
"(if(not #f)(for-loop_24 enclosing_7 rest_11) enclosing_7)))"
" enclosing_6))))"
" for-loop_24)"
" enclosing_1"
" lst_30))))"
"(if(if(list? p_22)(eq? 'submod(car p_22)) #f)"
"(let-values()"
"(let-values(((base_17)((1/current-module-name-resolver)(cadr p_22) enclosing_1 #f #f)))"
"(let-values(((lst_32)(cddr p_22)))"
"(begin"
"(check-list lst_32)"
"((letrec-values(((for-loop_25)"
"(lambda(enclosing_10 lst_33)"
"(if(pair? lst_33)"
"(let-values(((s_39)(unsafe-car lst_33))((rest_12)(unsafe-cdr lst_33)))"
"(let-values(((enclosing_11)"
"(let-values(((enclosing_12) enclosing_10))"
"(let-values(((enclosing_13)"
"(let-values()"
"(let-values(((p33_0) p_22))"
"(build-module-name18.1"
" p33_0"
" #t"
" s_39"
" enclosing_12)))))"
"(values enclosing_13)))))"
"(if(not #f)(for-loop_25 enclosing_11 rest_12) enclosing_11)))"
" enclosing_10))))"
" for-loop_25)"
" base_17"
" lst_32)))))"
"              (let-values () (error 'core-module-name-resolver \"not a supported module path: ~v\" p_22))))))))))"
"(define-values"
"(build-module-name18.1)"
"(lambda(original14_0 original15_0 name16_0 enclosing17_0)"
"(let-values(((name_17) name16_0))"
"(let-values(((enclosing_14) enclosing17_0))"
"(let-values(((orig-name_0)(if original15_0 original14_0 name_17)))"
"(let-values()"
"(let-values(((enclosing-module-name_0)(if enclosing_14(1/resolved-module-path-name enclosing_14) #f)))"
"(1/make-resolved-module-path"
"(if(not enclosing-module-name_0)"
"(let-values() name_17)"
"(if(symbol? enclosing-module-name_0)"
"(let-values()(list enclosing-module-name_0 name_17))"
"                   (if (equal? name_17 \"..\")"
"(let-values()"
"(if(symbol? enclosing-module-name_0)"
"                         (let-values () (error \"too many \\\"..\\\"s:\" orig-name_0))"
"(if(= 2(length enclosing-module-name_0))"
"(let-values()(car enclosing-module-name_0))"
"(let-values()(reverse$1(cdr(reverse$1 enclosing-module-name_0)))))))"
"(let-values()(append enclosing-module-name_0(list name_17))))))))))))))"
"(define-values"
"(1/current-module-name-resolver)"
"(make-parameter"
" core-module-name-resolver"
"(lambda(v_47)"
"(begin"
"(if(if(procedure? v_47)(if(procedure-arity-includes? v_47 2)(procedure-arity-includes? v_47 4) #f) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-name-resolver"
"            \"(and/c (procedure-arity-includes/c 2) (procedure-arity-includes/c 4))\""
" v_47)))"
" v_47))))"
"(define-values"
"(1/current-module-declare-name)"
"(make-parameter"
" #f"
"(lambda(r_20)"
"(begin"
"(if(let-values(((or-part_72)(not r_20)))(if or-part_72 or-part_72(1/resolved-module-path? r_20)))"
"(void)"
"         (let-values () (raise-argument-error 'current-module-declare-name \"(or/c #f resolved-module-path?)\" r_20)))"
" r_20))))"
"(define-values"
"(1/current-module-declare-source)"
"(make-parameter"
" #f"
"(lambda(s_40)"
"(begin"
"(if(let-values(((or-part_73)(not s_40)))"
"(if or-part_73"
" or-part_73"
"(let-values(((or-part_74)(symbol? s_40)))"
"(if or-part_74 or-part_74(if(path? s_40)(complete-path? s_40) #f)))))"
"(void)"
"(let-values()"
"           (raise-argument-error 'current-module-declare-source \"(or/c #f symbol? (and/c path? complete-path?))\" s_40)))"
" s_40))))"
"(define-values"
"(substitute-module-declare-name)"
"(lambda(default-name_0)"
"(let-values(((current-name_0)(1/current-module-declare-name)))"
"(let-values(((root-name_1)"
"(if current-name_0"
"(resolved-module-path-root-name current-name_0)"
"(if(pair? default-name_0)(car default-name_0) default-name_0))))"
"(1/make-resolved-module-path"
"(if(pair? default-name_0)(cons root-name_1(cdr default-name_0)) root-name_1))))))"
"(define-values"
"(force/composable)"
"(lambda(root_1)"
"(let-values(((v_48)(unsafe-struct-ref root_1 0)))"
"(if(procedure? v_48)"
"(let-values()"
"(begin"
"(unsafe-struct-set! root_1 0(make-running(object-name v_48)))"
"(call-with-exception-handler"
"(lambda(e_11)(begin(unsafe-struct-set! root_1 0(make-reraise e_11)) e_11))"
"(lambda()"
"((letrec-values(((loop_111)"
"(lambda(v_49)"
"(if(composable-promise? v_49)"
"(let-values()"
"(let-values(((v*_0)(unsafe-struct-ref v_49 0)))"
"(begin"
"(unsafe-struct-set! v_49 0 root_1)"
"(if(procedure? v*_0)"
"(let-values()(loop_111(v*_0)))"
"(if(pair? v*_0)"
"(let-values()"
"(begin(unsafe-struct-set! root_1 0 v*_0)(unsafe-car v*_0)))"
"(let-values()(loop_111 v*_0)))))))"
"(if(promise? v_49)"
"(let-values()(begin(unsafe-struct-set! root_1 0 v_49)(force v_49)))"
"(let-values()(begin(unsafe-struct-set! root_1 0(list v_49)) v_49)))))))"
" loop_111)"
"(v_48))))))"
"(if(pair? v_48)"
"(let-values()(if(null?(unsafe-cdr v_48))(unsafe-car v_48)(apply values v_48)))"
"(if(composable-promise? v_48)"
"(let-values()(force/composable v_48))"
"(if(null? v_48)"
"(let-values()(values))"
"(if(promise? v_48)"
"(let-values()(force v_48))"
"                (let-values () (error 'force \"composable promise with invalid contents: ~e\" v_48))))))))))"
"(define-values"
"(reify-result)"
"(lambda(v_50)"
"(if(pair? v_50)"
"(let-values()(if(null?(unsafe-cdr v_50))(unsafe-car v_50)(apply values v_50)))"
"(if(null? v_50)"
"(let-values()(values))"
"(if(reraise? v_50)"
"(let-values()(v_50))"
"          (let-values () (error 'force \"promise with invalid contents: ~e\" v_50)))))))"
"(define-values"
"(force/generic)"
"(lambda(promise_0)"
"(reify-result"
"(let-values(((v_51)(unsafe-struct-ref promise_0 0)))"
"(if(procedure? v_51)"
"(begin"
"(unsafe-struct-set! promise_0 0(make-running(object-name v_51)))"
"(call-with-exception-handler"
"(lambda(e_12)(begin(unsafe-struct-set! promise_0 0(make-reraise e_12)) e_12))"
"(lambda()"
"(let-values(((vs_1)(call-with-values v_51 list)))(begin(unsafe-struct-set! promise_0 0 vs_1) vs_1)))))"
" v_51)))))"
"(define-values(force)(lambda(promise_1)(if(promise? promise_1)((promise-forcer promise_1) promise_1) promise_1)))"
"(define-values"
"(promise-printer)"
"(lambda(promise_2 port_2 write?_0)"
"((letrec-values(((loop_100)"
"(lambda(v_52)"
"(if(reraise? v_52)"
"(let-values()"
"(let-values(((r_21)(reraise-val v_52)))"
"(if(exn? r_21)"
"(fprintf"
" port_2"
"                                 (if write?_0 \"#<promise!exn!~s>\" \"#<promise!exn!~a>\")"
"(exn-message r_21))"
"                                (fprintf port_2 (if write?_0 \"#<promise!raise!~s>\" \"#<promise!raise!~a>\") r_21))))"
"(if(running? v_52)"
"(let-values()"
"(let-values(((r_22)(running-name v_52)))"
"(if r_22"
"                                  (fprintf port_2 \"#<promise:!running!~a>\" r_22)"
"                                  (fprintf port_2 \"#<promise:!running>\"))))"
"(if(procedure? v_52)"
"(let-values()"
"(let-values(((c1_122)(object-name v_52)))"
"(if c1_122"
"                                    ((lambda (n_43) (fprintf port_2 \"#<promise:~a>\" n_43)) c1_122)"
"                                    (let-values () (display \"#<promise>\" port_2)))))"
"(if(promise? v_52)"
"(let-values()(loop_100(unsafe-struct-ref v_52 0)))"
"(if(null? v_52)"
"                                  (let-values () (fprintf port_2 \"#<promise!(values)>\"))"
"(if(null?(cdr v_52))"
"(let-values()"
"                                      (fprintf port_2 (if write?_0 \"#<promise!~s>\" \"#<promise!~a>\") (car v_52)))"
"(let-values()"
"(begin"
"                                        (display \"#<promise!(values\" port_2)"
"                                        (let-values (((fmt_0) (if write?_0 \" ~s\" \" ~a\")))"
"(for-each(lambda(x_60)(fprintf port_2 fmt_0 x_60)) v_52))"
"                                        (display \")>\" port_2))))))))))))"
" loop_100)"
"(unsafe-struct-ref promise_2 0))))"
"(define-values"
"(prop:force promise-forcer)"
"(let-values(((prop_0 pred?_0 get_0)"
"(make-struct-type-property"
" 'forcer"
"(lambda(v_53 info_0)"
"(begin"
"(if(if(procedure? v_53)(procedure-arity-includes? v_53 1) #f)"
"(void)"
"                       (let-values () (raise-argument-error 'prop:force \"(any/c . -> . any)\" v_53)))"
" v_53))"
" null"
" #t)))"
"(values prop_0 get_0)))"
"(define-values"
"(struct:promise make-promise promise? promise-val set-promise-val!)"
"(let-values(((struct:_3 make-_3 ?_3 -ref_3 -set!_3)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:force force/generic)(cons prop:custom-write promise-printer))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise)))))"
"(values"
" struct:_3"
" make-_3"
" ?_3"
"(make-struct-field-accessor -ref_3 0 'val)"
"(make-struct-field-mutator -set!_3 0 'val))))"
"(define-values"
"(struct:composable-promise make-composable-promise composable-promise?)"
"(let-values(((struct:_4 make-_4 ?_4 -ref_4 -set!_4)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'composable-promise"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force force/composable))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'composable-promise)))))"
"(values struct:_4 make-_4 ?_4)))"
"(define-values(delay) make-promise)"
"(define-values"
"(struct:reraise make-reraise reraise? reraise-val)"
"(let-values(((struct:_5 make-_5 ?_5 -ref_5 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'reraise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:procedure(lambda(this_0)(raise(reraise-val this_0)))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'reraise)))))"
"(values struct:_5 make-_5 ?_5(make-struct-field-accessor -ref_5 0 'val))))"
"(define-values"
"(struct:running make-running running? running-name)"
"(let-values(((struct:_6 make-_6 ?_6 -ref_6 -set!_6)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'running"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(this_1 port_3 write?_1)"
"                         (fprintf port_3 (if write?_1 \"#<running:~s>\" \"#<running:~a>\") (running-name this_1))))"
"(cons"
" prop:procedure"
"(lambda(this_2)"
"(let-values(((name_18)(running-name this_2)))"
"(if name_18"
"                             (error 'force \"reentrant promise `~.s'\" name_18)"
"                             (error 'force \"reentrant promise\"))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running)))))"
"(values struct:_6 make-_6 ?_6(make-struct-field-accessor -ref_6 0 'name))))"
"(define-values"
"(struct:promise/name make-promise/name promise/name?)"
"(let-values(((struct:_7 make-_7 ?_7 -ref_7 -set!_7)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/name"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force(lambda(p_23)((unsafe-struct-ref p_23 0)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/name)))))"
"(values struct:_7 make-_7 ?_7)))"
"(define-values"
"(struct:promise/strict make-promise/strict promise/strict?)"
"(let-values(((struct:_8 make-_8 ?_8 -ref_8 -set!_8)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/strict"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force(lambda(p_24)(reify-result(unsafe-struct-ref p_24 0)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/strict)))))"
"(values struct:_8 make-_8 ?_8)))"
"(define-values"
"(struct:running-thread make-running-thread running-thread? running-thread-thread)"
"(let-values(((struct:_9 make-_9 ?_9 -ref_9 -set!_9)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'running-thread"
" struct:running"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running-thread)))))"
"(values struct:_9 make-_9 ?_9(make-struct-field-accessor -ref_9 0 'thread))))"
"(define-values"
"(struct:syncinfo"
" make-syncinfo"
" syncinfo?"
" syncinfo-thunk"
" syncinfo-done-evt"
" syncinfo-done-sema"
" syncinfo-access-sema"
" set-syncinfo-thunk!)"
"(let-values(((struct:_10 make-_10 ?_10 -ref_10 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type 'syncinfo #f 4 0 #f null(current-inspector) #f '(1 2 3) #f 'syncinfo)))))"
"(values"
" struct:_10"
" make-_10"
" ?_10"
"(make-struct-field-accessor -ref_10 0 'thunk)"
"(make-struct-field-accessor -ref_10 1 'done-evt)"
"(make-struct-field-accessor -ref_10 2 'done-sema)"
"(make-struct-field-accessor -ref_10 3 'access-sema)"
"(make-struct-field-mutator -set!_10 0 'thunk))))"
"(define-values"
"(struct:promise/sync make-promise/sync promise/sync?)"
"(let-values(((struct:_11 make-_11 ?_11 -ref_11 -set!_11)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/sync"
" struct:promise"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:evt"
"(lambda(p_25)"
"(let-values(((v_54)(unsafe-struct-ref p_25 0)))"
"(wrap-evt(if(syncinfo? v_54)(syncinfo-done-evt v_54) always-evt) void))))"
"(cons"
" prop:force"
"(lambda(p_26)"
"(let-values(((v_55)(unsafe-struct-ref p_26 0)))"
"(reify-result"
"(if(not(syncinfo? v_55))"
"(let-values() v_55)"
"(if(running-thread?(syncinfo-thunk v_55))"
"(let-values()"
"(let-values(((r_23)(syncinfo-thunk v_55)))"
"(if(eq?(running-thread-thread r_23)(current-thread))"
"(r_23)"
"(begin(sync(syncinfo-done-evt v_55))(unsafe-struct-ref p_26 0)))))"
"(let-values()"
"(begin"
"(call-with-semaphore"
"(syncinfo-access-sema v_55)"
"(lambda(p_27 v_56)"
"(let-values(((thunk_2)(syncinfo-thunk v_56)))"
"(let-values(((done_1)(syncinfo-done-sema v_56)))"
"(if(running-thread? thunk_2)"
"(void)"
"(let-values()"
"(begin"
"(set-syncinfo-thunk!"
" v_56"
"(make-running-thread(object-name thunk_2)(current-thread)))"
"(call-with-exception-handler"
"(lambda(e_13)"
"(begin"
"(unsafe-struct-set! p_27 0(make-reraise e_13))"
"(semaphore-post done_1)"
" e_13))"
"(lambda()"
"(begin"
"(unsafe-struct-set! p_27 0(call-with-values thunk_2 list))"
"(semaphore-post done_1))))))))))"
" #f"
" p_26"
" v_55)"
"(unsafe-struct-ref p_26 0)))))))))"
"(cons"
" prop:custom-write"
"(lambda(p_28 port_4 write?_2)"
"(let-values(((v_57)(unsafe-struct-ref p_28 0)))"
"(promise-printer"
"(if(syncinfo? v_57)(make-promise(syncinfo-thunk v_57)) p_28)"
" port_4"
" write?_2)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/sync)))))"
"(values struct:_11 make-_11 ?_11)))"
"(define-values"
"(struct:promise/thread make-promise/thread promise/thread?)"
"(let-values(((struct:_12 make-_12 ?_12 -ref_12 -set!_12)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/thread"
" struct:promise"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:evt"
"(lambda(p_29)"
"(let-values(((v_58)(unsafe-struct-ref p_29 0)))"
"(wrap-evt(if(running? v_58)(running-thread-thread v_58) always-evt) void))))"
"(cons"
" prop:force"
"(lambda(p_30)"
"(let-values(((v_59)(unsafe-struct-ref p_30 0)))"
"(reify-result"
"(if(running-thread? v_59)"
"(let-values(((t_12)(running-thread-thread v_59)))"
"(let-values((()(begin(thread-wait t_12)(values))))"
"(let-values(((v_60)(unsafe-struct-ref p_30 0)))"
"(if(running-thread? v_60)"
"(error"
" 'force"
"                                       \"promise's thread terminated ~a\\n  promise: ~e\""
"                                       \"without result or exception\""
" p_30)"
" v_60))))"
" v_59))))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/thread)))))"
"(values struct:_12 make-_12 ?_12)))"
"(define-values"
"(struct:promise/idle make-promise/idle promise/idle?)"
"(let-values(((struct:_13 make-_13 ?_13 -ref_13 -set!_13)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/idle"
" struct:promise/thread"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:force"
"(lambda(p_31)"
"(let-values(((v_61)(unsafe-struct-ref p_31 0)))"
"(reify-result"
"(if(procedure? v_61)"
"(let-values(((controller_0)"
"(if(running-thread? v_61)(running-thread-thread v_61)(v_61))))"
"(begin"
"(thread-send controller_0 'force!)"
"(thread-wait controller_0)"
"(unsafe-struct-ref p_31 0)))"
" v_61))))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/idle)))))"
"(values struct:_13 make-_13 ?_13)))"
"(define-values"
"(phase?)"
"(lambda(v_31)(let-values(((or-part_0)(not v_31)))(if or-part_0 or-part_0(exact-integer? v_31)))))"
"(define-values(phase+)(lambda(a_2 b_15)(if a_2(if b_15(+ a_2 b_15) #f) #f)))"
"(define-values(phase-)(lambda(a_28 b_16)(if a_28(if b_16(- a_28 b_16) #f) #f)))"
"(define-values"
"(phase<?)"
"(lambda(a_29 b_17)"
"(if(not b_17)(let-values() #f)(if(not a_29)(let-values() #t)(let-values()(< a_29 b_17))))))"
"(define-values(zero-phase?)(lambda(a_30)(eq? a_30 0)))"
"(define-values(label-phase?)(lambda(a_31)(not a_31)))"
" (define-values (phase?-string) \"(or/c exact-integer? #f)\")"
"(define-values"
"(struct:serialize-state"
" serialize-state1.1"
" serialize-state?"
" serialize-state-reachable-scopes"
" serialize-state-bindings-intern"
" serialize-state-bulk-bindings-intern"
" serialize-state-scopes"
" serialize-state-shifted-multi-scopes"
" serialize-state-mpi-shifts"
" serialize-state-context-triples"
" serialize-state-props"
" serialize-state-interned-props"
" serialize-state-syntax-context"
" serialize-state-sharing-syntaxes)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'serialize-state"
" #f"
" 11"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10)"
" #f"
" 'serialize-state)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'reachable-scopes)"
"(make-struct-field-accessor -ref_0 1 'bindings-intern)"
"(make-struct-field-accessor -ref_0 2 'bulk-bindings-intern)"
"(make-struct-field-accessor -ref_0 3 'scopes)"
"(make-struct-field-accessor -ref_0 4 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_0 5 'mpi-shifts)"
"(make-struct-field-accessor -ref_0 6 'context-triples)"
"(make-struct-field-accessor -ref_0 7 'props)"
"(make-struct-field-accessor -ref_0 8 'interned-props)"
"(make-struct-field-accessor -ref_0 9 'syntax-context)"
"(make-struct-field-accessor -ref_0 10 'sharing-syntaxes))))"
"(define-values"
"(make-serialize-state)"
"(lambda(reachable-scopes_0)"
"(serialize-state1.1"
" reachable-scopes_0"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(make-hash)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(box null)"
"(make-hasheq))))"
"(define-values"
"(intern-scopes)"
"(lambda(scs_0 state_1)"
"(let-values(((or-part_75)(hash-ref(serialize-state-scopes state_1) scs_0 #f)))"
"(if or-part_75 or-part_75(begin(hash-set!(serialize-state-scopes state_1) scs_0 scs_0) scs_0)))))"
"(define-values"
"(intern-shifted-multi-scopes)"
"(lambda(sms_0 state_2)"
"(let-values(((or-part_76)(hash-ref(serialize-state-shifted-multi-scopes state_2) sms_0 #f)))"
"(if or-part_76 or-part_76(begin(hash-set!(serialize-state-shifted-multi-scopes state_2) sms_0 sms_0) sms_0)))))"
"(define-values"
"(intern-mpi-shifts)"
"(lambda(mpi-shifts_0 state_3)"
"(if(null? mpi-shifts_0)"
"(let-values() null)"
"(let-values()"
"(let-values(((tail_0)(intern-mpi-shifts(cdr mpi-shifts_0) state_3)))"
"(let-values(((tail-table_0)"
"(let-values(((or-part_77)(hash-ref(serialize-state-mpi-shifts state_3) tail_0 #f)))"
"(if or-part_77"
" or-part_77"
"(let-values(((ht_29)(make-hasheq)))"
"(begin(hash-set!(serialize-state-mpi-shifts state_3) tail_0 ht_29) ht_29))))))"
"(let-values(((or-part_78)(hash-ref tail-table_0(car mpi-shifts_0) #f)))"
"(if or-part_78"
" or-part_78"
"(let-values(((v_62)(cons(car mpi-shifts_0) tail_0)))"
"(begin(hash-set! tail-table_0(car mpi-shifts_0) v_62) v_62))))))))))"
"(define-values"
"(intern-context-triple)"
"(lambda(scs_1 sms_1 mpi-shifts_1 state_4)"
"(let-values(((scs-ht_0)"
"(let-values(((or-part_79)(hash-ref(serialize-state-context-triples state_4) scs_1 #f)))"
"(if or-part_79"
" or-part_79"
"(let-values(((ht_30)(make-hasheq)))"
"(begin(hash-set!(serialize-state-context-triples state_4) scs_1 ht_30) ht_30))))))"
"(let-values(((sms-ht_0)"
"(let-values(((or-part_47)(hash-ref scs-ht_0 sms_1 #f)))"
"(if or-part_47"
" or-part_47"
"(let-values(((ht_31)(make-hasheq)))(begin(hash-set! scs-ht_0 sms_1 ht_31) ht_31))))))"
"(let-values(((or-part_80)(hash-ref sms-ht_0 mpi-shifts_1 #f)))"
"(if or-part_80"
" or-part_80"
"(let-values(((vec_13)(vector-immutable scs_1 sms_1 mpi-shifts_1)))"
"(begin(hash-set! sms-ht_0 mpi-shifts_1 vec_13) vec_13))))))))"
"(define-values"
"(intern-properties)"
"(lambda(all-props_0 get-preserved-props_0 state_5)"
"(let-values(((v_63)(hash-ref(serialize-state-props state_5) all-props_0 'no)))"
"(if(eq? v_63 'no)"
"(let-values()"
"(let-values(((preserved-props_0)(get-preserved-props_0)))"
"(let-values(((p_32)"
"(if(zero?(hash-count preserved-props_0))"
"(let-values() #f)"
"(let-values(((c1_123)"
"(hash-ref(serialize-state-interned-props state_5) preserved-props_0 #f)))"
"(if c1_123"
"((lambda(p_11) p_11) c1_123)"
"(let-values()"
"(begin"
"(hash-set!"
"(serialize-state-interned-props state_5)"
" preserved-props_0"
" preserved-props_0)"
" preserved-props_0)))))))"
"(begin(hash-set!(serialize-state-props state_5) all-props_0 p_32) p_32))))"
"(let-values() v_63)))))"
"(define-values"
"(push-syntax-context!)"
"(lambda(state_6 v_64)"
"(let-values(((b_18)(serialize-state-syntax-context state_6)))(set-box! b_18(cons v_64(unbox b_18))))))"
"(define-values"
"(get-syntax-context)"
"(lambda(state_7)"
"(let-values(((b_19)(serialize-state-syntax-context state_7)))(if(null?(unbox b_19)) #f(car(unbox b_19))))))"
"(define-values"
"(pop-syntax-context!)"
"(lambda(state_8)"
"(let-values(((b_20)(serialize-state-syntax-context state_8)))(set-box! b_20(cdr(unbox b_20))))))"
"(define-values"
"(immutable-prefab-struct-key)"
"(lambda(v_31)"
"(let-values(((k_10)(prefab-struct-key v_31)))(if k_10(if(all-fields-immutable? k_10) k_10 #f) #f))))"
"(define-values"
"(all-fields-immutable?)"
"(lambda(k_11)"
"(let-values(((or-part_9)(symbol? k_11)))"
"(if or-part_9"
" or-part_9"
"(let-values(((or-part_2)(null? k_11)))"
"(if or-part_2"
" or-part_2"
"(let-values(((rk_0)(cdr k_11)))"
"(let-values(((rk_1)(if(if(pair? rk_0)(exact-integer?(car rk_0)) #f)(cdr rk_0) rk_0)))"
"(let-values(((rk_2)"
"(if(if(pair? rk_1)(pair?(car rk_1)) #f)"
"(if(zero?(caar rk_1))(cdr rk_1)(cons '#(1)(cdr rk_1)))"
" rk_1)))"
"(if(if(pair? rk_2)(vector?(car rk_2)) #f)"
"(if(zero?(vector-length(car rk_2)))(all-fields-immutable?(cdr rk_2)) #f)"
"(all-fields-immutable? rk_2)))))))))))"
"(define-values"
"(datum-map-slow)"
"(lambda(tail?_0 s_41 f_17 seen_0)"
"((letrec-values(((loop_112)"
"(lambda(tail?_1 s_42 prev-seen_0)"
"(let-values(((seen_1)"
"(if(if prev-seen_0(datum-has-elements? s_42) #f)"
"(let-values()"
"(if(hash-ref prev-seen_0 s_42 #f)"
"(let-values()((hash-ref prev-seen_0 'cycle-fail) s_42))"
"(let-values()(hash-set prev-seen_0 s_42 #t))))"
"(let-values() prev-seen_0))))"
"(if(null? s_42)"
"(let-values()(f_17 tail?_1 s_42))"
"(if(pair? s_42)"
"(let-values()"
"(f_17 tail?_1(cons(loop_112 #f(car s_42) seen_1)(loop_112 #t(cdr s_42) seen_1))))"
"(if(let-values(((or-part_81)(symbol? s_42)))"
"(if or-part_81"
" or-part_81"
"(let-values(((or-part_82)(boolean? s_42)))"
"(if or-part_82 or-part_82(number? s_42)))))"
"(let-values()(f_17 #f s_42))"
"(if(vector? s_42)"
"(let-values()"
"(f_17"
" #f"
"(vector->immutable-vector"
"(let-values(((len_8)(vector-length s_42)))"
"(begin"
"(if(exact-nonnegative-integer? len_8)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_8)))"
"(let-values(((v_65)(make-vector len_8 0)))"
"(begin"
"(if(zero? len_8)"
"(void)"
"(let-values()"
"(let-values(((vec_14 len_9)"
"(let-values(((vec_15) s_42))"
"(begin"
"(check-vector vec_15)"
"(values vec_15(unsafe-vector-length vec_15))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_26)"
"(lambda(i_49 pos_6)"
"(if(unsafe-fx< pos_6 len_9)"
"(let-values(((e_14)"
"(unsafe-vector-ref"
" vec_14"
" pos_6)))"
"(let-values(((i_50)"
"(let-values(((i_51) i_49))"
"(let-values(((i_52)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_65"
" i_51"
"(let-values()"
"(loop_112"
" #f"
" e_14"
" seen_1)))"
"(unsafe-fx+"
" 1"
" i_51)))))"
"(values i_52)))))"
"(if(if(not"
"((lambda x_61"
"(unsafe-fx= i_50 len_8))"
" e_14))"
"(not #f)"
" #f)"
"(for-loop_26"
" i_50"
"(unsafe-fx+ 1 pos_6))"
" i_50)))"
" i_49))))"
" for-loop_26)"
" 0"
" 0)))))"
" v_65)))))))"
"(if(box? s_42)"
"(let-values()(f_17 #f(box-immutable(loop_112 #f(unbox s_42) seen_1))))"
"(let-values(((c1_124)(immutable-prefab-struct-key s_42)))"
"(if c1_124"
"((lambda(key_12)"
"(f_17"
" #f"
"(apply"
" make-prefab-struct"
" key_12"
"(let-values(((v*_1 start*_0 stop*_1 step*_0)"
"(normalise-inputs"
" 'in-vector"
"                                                            \"vector\""
"(lambda(x_62)(vector? x_62))"
"(lambda(x_63)(unsafe-vector-length x_63))"
"(struct->vector s_42)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_27)"
"(lambda(idx_0)"
"(if(unsafe-fx< idx_0 stop*_1)"
"(let-values(((e_15)"
"(unsafe-vector-ref v*_1 idx_0)))"
"(let-values(((post-guard-var_4)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_4)"
"(let-values()"
"(let-values()"
"(loop_112"
" #f"
" e_15"
" seen_1)))))"
"(let-values(((result_33)"
"(if(post-guard-var_4)"
"(for-loop_27"
"(unsafe-fx+ idx_0 1))"
" null)))"
"(cons elem_4 result_33))))))"
" null))))"
" for-loop_27)"
" start*_0))))))"
" c1_124)"
"(if(if(hash? s_42)(immutable? s_42) #f)"
"(let-values()"
"(if(hash-eq? s_42)"
"(let-values()"
"(f_17"
" #f"
"(let-values(((ht_32) s_42))"
"(begin"
"(check-in-hash ht_32)"
"((letrec-values(((for-loop_21)"
"(lambda(table_15 i_53)"
"(if i_53"
"(let-values(((k_12 v_66)"
"(hash-iterate-key+value"
" ht_32"
" i_53)))"
"(let-values(((table_16)"
"(let-values(((table_17)"
" table_15))"
"(let-values(((table_18)"
"(let-values()"
"(let-values(((key_13"
" val_3)"
"(let-values()"
"(values"
" k_12"
"(loop_112"
" #f"
" v_66"
" seen_1)))))"
"(hash-set"
" table_17"
" key_13"
" val_3)))))"
"(values table_18)))))"
"(if(not #f)"
"(for-loop_21"
" table_16"
"(hash-iterate-next ht_32 i_53))"
" table_16)))"
" table_15))))"
" for-loop_21)"
" '#hasheq()"
"(hash-iterate-first ht_32))))))"
"(if(hash-eqv? s_42)"
"(let-values()"
"(f_17"
" #f"
"(let-values(((ht_33) s_42))"
"(begin"
"(check-in-hash ht_33)"
"((letrec-values(((for-loop_28)"
"(lambda(table_19 i_54)"
"(if i_54"
"(let-values(((k_13 v_67)"
"(hash-iterate-key+value"
" ht_33"
" i_54)))"
"(let-values(((table_20)"
"(let-values(((table_21)"
" table_19))"
"(let-values(((table_22)"
"(let-values()"
"(let-values(((key_14"
" val_4)"
"(let-values()"
"(values"
" k_13"
"(loop_112"
" #f"
" v_67"
" seen_1)))))"
"(hash-set"
" table_21"
" key_14"
" val_4)))))"
"(values table_22)))))"
"(if(not #f)"
"(for-loop_28"
" table_20"
"(hash-iterate-next ht_33 i_54))"
" table_20)))"
" table_19))))"
" for-loop_28)"
" '#hasheqv()"
"(hash-iterate-first ht_33))))))"
"(let-values()"
"(f_17"
" #f"
"(let-values(((ht_34) s_42))"
"(begin"
"(check-in-hash ht_34)"
"((letrec-values(((for-loop_29)"
"(lambda(table_23 i_55)"
"(if i_55"
"(let-values(((k_14 v_68)"
"(hash-iterate-key+value"
" ht_34"
" i_55)))"
"(let-values(((table_11)"
"(let-values(((table_12)"
" table_23))"
"(let-values(((table_13)"
"(let-values()"
"(let-values(((key_15"
" val_5)"
"(let-values()"
"(values"
" k_14"
"(loop_112"
" #f"
" v_68"
" seen_1)))))"
"(hash-set"
" table_12"
" key_15"
" val_5)))))"
"(values table_13)))))"
"(if(not #f)"
"(for-loop_29"
" table_11"
"(hash-iterate-next ht_34 i_55))"
" table_11)))"
" table_23))))"
" for-loop_29)"
" '#hash()"
"(hash-iterate-first ht_34)))))))))"
"(let-values()(f_17 #f s_42))))))))))))))"
" loop_112)"
" tail?_0"
" s_41"
" seen_0)))"
"(define-values"
"(datum-has-elements?)"
"(lambda(d_2)"
"(let-values(((or-part_83)(pair? d_2)))"
"(if or-part_83"
" or-part_83"
"(let-values(((or-part_84)(vector? d_2)))"
"(if or-part_84"
" or-part_84"
"(let-values(((or-part_85)(box? d_2)))"
"(if or-part_85"
" or-part_85"
"(let-values(((or-part_86)(immutable-prefab-struct-key d_2)))"
"(if or-part_86"
" or-part_86"
"(if(hash? d_2)(if(immutable? d_2)(positive?(hash-count d_2)) #f) #f)))))))))))"
"(define-values"
"(struct:preserved-property-value"
" preserved-property-value1.1"
" preserved-property-value?"
" preserved-property-value-content)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'preserved-property-value"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'preserved-property-value)))))"
"(values struct:_0 make-_0 ?_0(make-struct-field-accessor -ref_0 0 'content))))"
"(define-values"
"(plain-property-value)"
"(lambda(v_69)(if(preserved-property-value? v_69)(preserved-property-value-content v_69) v_69)))"
"(define-values"
"(check-value-to-preserve)"
"(lambda(v_70 syntax?_0)"
"(let-values(((s_43) v_70)"
"((f_18)"
"(lambda(tail?_0 v_3)"
"(begin"
"(if(let-values(((or-part_87)(null? v_3)))"
"(if or-part_87"
" or-part_87"
"(let-values(((or-part_88)(boolean? v_3)))"
"(if or-part_88"
" or-part_88"
"(let-values(((or-part_41)(symbol? v_3)))"
"(if or-part_41"
" or-part_41"
"(let-values(((or-part_14)(number? v_3)))"
"(if or-part_14"
" or-part_14"
"(let-values(((or-part_15)(char? v_3)))"
"(if or-part_15"
" or-part_15"
"(let-values(((or-part_89)(string? v_3)))"
"(if or-part_89"
" or-part_89"
"(let-values(((or-part_90)(bytes? v_3)))"
"(if or-part_90"
" or-part_90"
"(let-values(((or-part_81)(regexp? v_3)))"
"(if or-part_81"
" or-part_81"
"(let-values(((or-part_82)(syntax?_0 v_3)))"
"(if or-part_82"
" or-part_82"
"(let-values(((or-part_91)(pair? v_3)))"
"(if or-part_91"
" or-part_91"
"(let-values(((or-part_92)(vector? v_3)))"
"(if or-part_92"
" or-part_92"
"(let-values(((or-part_93)(box? v_3)))"
"(if or-part_93"
" or-part_93"
"(let-values(((or-part_94)(hash? v_3)))"
"(if or-part_94"
" or-part_94"
"(immutable-prefab-struct-key"
" v_3)))))))))))))))))))))))))))"
"(void)"
"(let-values()"
"                          (raise-arguments-error 'write \"disallowed value in preserved syntax property\" \"value\" v_3)))"
" v_3)))"
"((seen_2) disallow-cycles$1))"
"((letrec-values(((loop_113)"
"(lambda(tail?_2 s_44 prev-depth_0)"
"(let-values(((depth_0)(add1 prev-depth_0)))"
"(if(if seen_2(> depth_0 32) #f)"
"(let-values()"
"(datum-map-slow tail?_2 s_44(lambda(tail?_3 s_45)(f_18 tail?_3 s_45)) seen_2))"
"(if(null? s_44)"
"(let-values()(f_18 tail?_2 s_44))"
"(if(pair? s_44)"
"(let-values()"
"(f_18"
" tail?_2"
"(cons(loop_113 #f(car s_44) depth_0)(loop_113 #t(cdr s_44) depth_0))))"
"(if(let-values(((or-part_16)(symbol? s_44)))"
"(if or-part_16"
" or-part_16"
"(let-values(((or-part_95)(boolean? s_44)))"
"(if or-part_95 or-part_95(number? s_44)))))"
"(let-values()(f_18 #f s_44))"
"(if(let-values(((or-part_96)(vector? s_44)))"
"(if or-part_96"
" or-part_96"
"(let-values(((or-part_97)(box? s_44)))"
"(if or-part_97"
" or-part_97"
"(let-values(((or-part_98)(prefab-struct-key s_44)))"
"(if or-part_98 or-part_98(hash? s_44)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_2"
" s_44"
"(lambda(tail?_4 s_46)(f_18 tail?_4 s_46))"
" seen_2))"
"(let-values()(f_18 #f s_44)))))))))))"
" loop_113)"
" #f"
" s_43"
" 0))))"
"(define-values"
"(disallow-cycles$1)"
"(hash"
" 'cycle-fail"
"   (lambda (v_71) (raise-arguments-error 'write \"disallowed cycle in preserved syntax property\" \"at\" v_71))))"
"(define-values"
"(tamper?)"
"(lambda(v_31)"
"(let-values(((or-part_0)(not v_31)))"
"(if or-part_0 or-part_0(let-values(((or-part_1)(symbol? v_31)))(if or-part_1 or-part_1(set? v_31)))))))"
"(define-values(tamper-tainted?)(lambda(v_72)(symbol? v_72)))"
"(define-values(tamper-armed?)(lambda(v_73)(set? v_73)))"
"(define-values(tamper-clean?)(lambda(v_74)(not v_74)))"
"(define-values"
"(tamper-tainted-for-content)"
"(lambda(v_75)(if(datum-has-elements? v_75) 'tainted/need-propagate 'tainted)))"
"(define-values(tamper-needs-propagate?)(lambda(t_13)(eq? t_13 'tainted/need-propagate)))"
"(define-values(tamper-propagated)(lambda(t_14)(if(eq? t_14 'tainted/need-propagate) 'tainted t_14)))"
"(define-values(serialize-tamper)(lambda(t_15)(if(tamper-armed? t_15) 'armed t_15)))"
"(define-values(current-arm-inspectors)(make-parameter(seteq)))"
"(define-values(deserialize-tamper)(lambda(t_16)(if(eq? t_16 'armed)(current-arm-inspectors) t_16)))"
"(define-values"
"(struct:syntax"
" syntax1.1"
" syntax?$1"
" syntax-content"
" syntax-scopes"
" syntax-shifted-multi-scopes"
" syntax-scope-propagations+tamper"
" syntax-mpi-shifts"
" syntax-srcloc"
" syntax-props"
" syntax-inspector"
" set-syntax-content!"
" set-syntax-scope-propagations+tamper!)"
"(let-values(((struct:_14 make-_14 ?_14 -ref_14 -set!_14)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'syntax"
" #f"
" 8"
" 0"
" #f"
"(list"
"(cons"
" prop:reach-scopes"
"(lambda(s_47 reach_0)"
"(let-values(((prop_1)(syntax-scope-propagations+tamper s_47)))"
"(begin"
"(reach_0"
"(if(propagation?$1 prop_1)((propagation-ref prop_1) s_47)(syntax-content s_47)))"
"(reach_0(syntax-scopes s_47))"
"(reach_0(syntax-shifted-multi-scopes s_47))"
"(let-values(((ht_35)(syntax-props s_47)))"
"(begin"
"(check-in-immutable-hash ht_35)"
"((letrec-values(((for-loop_7)"
"(lambda(i_56)"
"(if i_56"
"(let-values(((k_15 v_58)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_35"
" i_56)))"
"(let-values((()"
"(let-values()"
"(if(preserved-property-value? v_58)"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(reach_0"
"(plain-property-value"
" v_58)))"
"(values)))))"
"(values)))"
"(values)))))"
"(if(not #f)"
"(for-loop_7"
"(unsafe-immutable-hash-iterate-next ht_35 i_56))"
"(values))))"
"(values)))))"
" for-loop_7)"
"(unsafe-immutable-hash-iterate-first ht_35))))"
"(void)))))"
"(cons"
" prop:serialize"
"(lambda(s_48 ser-push!_1 state_9)"
"(let-values(((prop_2)(syntax-scope-propagations+tamper s_48)))"
"(let-values(((content_0)"
"(if(propagation?$1 prop_2)"
"((propagation-ref prop_2) s_48)"
"(syntax-content s_48))))"
"(let-values(((properties_0)"
"(intern-properties"
"(syntax-props s_48)"
"(lambda()"
"(let-values(((ht_36)(syntax-props s_48)))"
"(begin"
"(check-in-hash ht_36)"
"((letrec-values(((for-loop_30)"
"(lambda(table_24 i_57)"
"(if i_57"
"(let-values(((k_16 v_76)"
"(hash-iterate-key+value"
" ht_36"
" i_57)))"
"(let-values(((table_25)"
"(let-values(((table_5)"
" table_24))"
"(if(preserved-property-value?"
" v_76)"
"(let-values(((table_6)"
" table_5))"
"(let-values(((table_7)"
"(let-values()"
"(let-values(((key_10"
" val_1)"
"(let-values()"
"(values"
" k_16"
"(check-value-to-preserve"
"(plain-property-value"
" v_76)"
" syntax?$1)))))"
"(hash-set"
" table_6"
" key_10"
" val_1)))))"
"(values table_7)))"
" table_5))))"
"(if(not #f)"
"(for-loop_30"
" table_25"
"(hash-iterate-next ht_36 i_57))"
" table_25)))"
" table_24))))"
" for-loop_30)"
" '#hasheq()"
"(hash-iterate-first ht_36)))))"
" state_9)))"
"(let-values(((tamper_0)(serialize-tamper(syntax-tamper s_48))))"
"(let-values(((context-triple_0)"
"(intern-context-triple"
"(intern-scopes(syntax-scopes s_48) state_9)"
"(intern-shifted-multi-scopes(syntax-shifted-multi-scopes s_48) state_9)"
"(intern-mpi-shifts(syntax-mpi-shifts s_48) state_9)"
" state_9)))"
"(let-values(((stx-state_0)(get-syntax-context state_9)))"
"(if(let-values(((or-part_67) properties_0))(if or-part_67 or-part_67 tamper_0))"
"(let-values()"
"(begin"
"(ser-push!_1 'tag '#:syntax+props)"
"(push-syntax-context! state_9 #f)"
"(ser-push!_1 content_0)"
"(pop-syntax-context! state_9)"
"(ser-push!_1 'reference context-triple_0)"
"(ser-push!_1 'reference(syntax-srcloc s_48))"
"(ser-push!_1 properties_0)"
"(ser-push!_1 tamper_0)"
"(if stx-state_0"
"(let-values()(set-syntax-state-all-sharing?! stx-state_0 #f))"
"(void))))"
"(let-values()"
"(let-values(((sharing-mode_0)"
"(hash-ref"
"(serialize-state-sharing-syntaxes state_9)"
" s_48"
" 'unknown)))"
"(begin"
"(if(eq? sharing-mode_0 'share)"
"(let-values()"
"(begin"
"(ser-push!_1 'tag '#:datum->syntax)"
"(ser-push!_1(syntax->datum$1 s_48))))"
"(if(eq? sharing-mode_0 'unknown)"
"(let-values()"
"(let-values((()(begin(ser-push!_1 'tag '#:syntax)(values))))"
"(let-values(((this-state_0)"
"(if(no-pair-syntax-in-cdr? content_0)"
"(syntax-state19.1"
" #t"
" context-triple_0"
"(syntax-srcloc s_48))"
" #f)))"
"(let-values((()"
"(begin"
"(push-syntax-context! state_9 this-state_0)"
"(values))))"
"(let-values((()(begin(ser-push!_1 content_0)(values))))"
"(let-values((()"
"(begin"
"(pop-syntax-context! state_9)"
"(values))))"
"(let-values(((new-sharing-mode_0)"
"(if(if this-state_0"
"(syntax-state-all-sharing?"
" this-state_0)"
" #f)"
" 'share"
" 'none)))"
"(begin"
"(hash-set!"
"(serialize-state-sharing-syntaxes state_9)"
" s_48"
"(if(datum-has-elements? content_0)"
" new-sharing-mode_0"
" 'none))"
"(if(if stx-state_0(eq? new-sharing-mode_0 'none) #f)"
"(let-values()"
"(set-syntax-state-all-sharing?! stx-state_0 #f))"
"(void))))))))))"
"(let-values()"
"(begin"
"(ser-push!_1 'tag '#:syntax)"
"(push-syntax-context! state_9 #f)"
"(ser-push!_1 content_0)"
"(pop-syntax-context! state_9)))))"
"(ser-push!_1 'reference context-triple_0)"
"(ser-push!_1 'reference(syntax-srcloc s_48))"
"(if stx-state_0"
"(let-values()"
"(if(if(eq?"
" context-triple_0"
"(syntax-state-context-triple stx-state_0))"
"(equal?(syntax-srcloc s_48)(syntax-state-srcloc stx-state_0))"
" #f)"
"(void)"
"(let-values()(set-syntax-state-all-sharing?! stx-state_0 #f))))"
"(void))))))))))))))"
"(cons"
" prop:custom-write"
"(lambda(s_49 port_5 mode_5)"
"                         (let-values ((() (begin (write-string \"#<syntax\" port_5) (values))))"
"(let-values(((srcloc_0)(syntax-srcloc s_49)))"
"(begin"
"(if srcloc_0"
"(let-values()"
"(let-values(((srcloc-str_0)(srcloc->string srcloc_0)))"
"                                     (if srcloc-str_0 (let-values () (fprintf port_5 \":~a\" srcloc-str_0)) (void))))"
"(void))"
"                               (fprintf port_5 \" ~.s\" (syntax->datum$1 s_49))"
"                               (write-string \">\" port_5)))))))"
"(current-inspector)"
" #f"
" '(1 2 4 5 6 7)"
" #f"
" 'syntax)))))"
"(values"
" struct:_14"
" make-_14"
" ?_14"
"(make-struct-field-accessor -ref_14 0 'content)"
"(make-struct-field-accessor -ref_14 1 'scopes)"
"(make-struct-field-accessor -ref_14 2 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_14 3 'scope-propagations+tamper)"
"(make-struct-field-accessor -ref_14 4 'mpi-shifts)"
"(make-struct-field-accessor -ref_14 5 'srcloc)"
"(make-struct-field-accessor -ref_14 6 'props)"
"(make-struct-field-accessor -ref_14 7 'inspector)"
"(make-struct-field-mutator -set!_14 0 'content)"
"(make-struct-field-mutator -set!_14 3 'scope-propagations+tamper))))"
"(define-values(prop:propagation propagation?$1 propagation-ref)(make-struct-type-property 'propagation))"
"(define-values"
"(prop:propagation-tamper propagation-tamper? propagation-tamper-ref)"
"(make-struct-type-property 'propagation-tamper))"
"(define-values"
"(prop:propagation-set-tamper propagation-set-tamper? propagation-set-tamper-ref)"
"(make-struct-type-property 'propagation-set-tamper))"
"(define-values"
"(syntax-tamper)"
"(lambda(s_50)"
"(let-values(((v_77)(syntax-scope-propagations+tamper s_50)))"
"(if(tamper? v_77) v_77((propagation-tamper-ref v_77) v_77)))))"
"(define-values(empty-scopes)(seteq))"
"(define-values(empty-shifted-multi-scopes)(seteq))"
"(define-values(empty-mpi-shifts) null)"
"(define-values(empty-props) '#hasheq())"
"(define-values"
"(empty-syntax)"
"(syntax1.1 #f empty-scopes empty-shifted-multi-scopes #f empty-mpi-shifts #f empty-props #f))"
"(define-values(identifier?)(lambda(s_51)(if(syntax?$1 s_51)(symbol?(syntax-content s_51)) #f)))"
"(define-values"
"(syntax->datum$1)"
"(lambda(s_52)"
"(let-values(((s_53) s_52)"
"((f_19)(lambda(tail?_5 x_64) x_64))"
"((d->s_0)(lambda(s_54 d_3) d_3))"
"((s-e_0) syntax-content)"
"((seen_3) #f))"
"((letrec-values(((loop_114)"
"(lambda(s_55)"
"(let-values(((s_56) s_55)"
"((f_20)"
"(lambda(tail?_6 v_78)"
"(if(syntax?$1 v_78)"
"(let-values()(d->s_0 v_78(loop_114(s-e_0 v_78))))"
"(let-values()(f_19 tail?_6 v_78)))))"
"((seen_4) seen_3))"
"((letrec-values(((loop_115)"
"(lambda(tail?_7 s_57 prev-depth_1)"
"(let-values(((depth_1)(add1 prev-depth_1)))"
"(if(if seen_4(> depth_1 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_7"
" s_57"
"(lambda(tail?_8 s_58)(f_20 tail?_8 s_58))"
" seen_4))"
"(if(null? s_57)"
"(let-values()(f_20 tail?_7 s_57))"
"(if(pair? s_57)"
"(let-values()"
"(f_20"
" tail?_7"
"(cons"
"(loop_115 #f(car s_57) depth_1)"
"(loop_115 #t(cdr s_57) depth_1))))"
"(if(let-values(((or-part_99)(symbol? s_57)))"
"(if or-part_99"
" or-part_99"
"(let-values(((or-part_100)(boolean? s_57)))"
"(if or-part_100 or-part_100(number? s_57)))))"
"(let-values()(f_20 #f s_57))"
"(if(let-values(((or-part_101)(vector? s_57)))"
"(if or-part_101"
" or-part_101"
"(let-values(((or-part_70)(box? s_57)))"
"(if or-part_70"
" or-part_70"
"(let-values(((or-part_102)"
"(prefab-struct-key s_57)))"
"(if or-part_102 or-part_102(hash? s_57)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_7"
" s_57"
"(lambda(tail?_9 s_59)(f_20 tail?_9 s_59))"
" seen_4))"
"(let-values()(f_20 #f s_57)))))))))))"
" loop_115)"
" #f"
" s_56"
" 0)))))"
" loop_114)"
" s_53))))"
"(define-values"
"(datum->syntax$1)"
"(let-values(((datum->syntax8_0)"
"(lambda(stx-c6_0 s7_0 stx-l2_0 stx-p3_0 stx-l4_0 stx-p5_0)"
"(let-values(((stx-c_0) stx-c6_0))"
"(let-values(((s_60) s7_0))"
"(let-values(((stx-l_0)(if stx-l4_0 stx-l2_0 #f)))"
"(let-values(((stx-p_0)(if stx-p5_0 stx-p3_0 #f)))"
"(let-values()"
"(if(syntax?$1 s_60)"
"(let-values() s_60)"
"(let-values()"
"(let-values(((wrap_0)"
"(lambda(content_1)"
"(syntax1.1"
" content_1"
"(if stx-c_0(syntax-scopes stx-c_0) empty-scopes)"
"(if stx-c_0"
"(syntax-shifted-multi-scopes stx-c_0)"
" empty-shifted-multi-scopes)"
"(if stx-c_0"
"(if(syntax-tamper stx-c_0)"
"(tamper-tainted-for-content content_1)"
" #f)"
" #f)"
"(if stx-c_0(syntax-mpi-shifts stx-c_0) empty-mpi-shifts)"
"(if stx-l_0(syntax-srcloc stx-l_0) #f)"
" empty-props"
"(if stx-c_0(syntax-inspector stx-c_0) #f)))))"
"(let-values(((result-s_0)"
"(let-values(((s_61) s_60)"
"((f_21)"
"(lambda(tail?_10 x_65)(if tail?_10 x_65(wrap_0 x_65))))"
"((s->_0)(lambda(s_37) s_37))"
"((seen_5) disallow-cycles))"
"(let-values(((s_62) s_61)"
"((f_22)"
"(lambda(tail?_11 v_79)"
"(if(syntax?$1 v_79)"
"(let-values()(s->_0 v_79))"
"(let-values()(f_21 tail?_11 v_79)))))"
"((seen_6) seen_5))"
"((letrec-values(((loop_116)"
"(lambda(tail?_12 s_63 prev-depth_2)"
"(let-values(((depth_2)(add1 prev-depth_2)))"
"(if(if seen_6(> depth_2 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_12"
" s_63"
"(lambda(tail?_13 s_64)"
"(f_22 tail?_13 s_64))"
" seen_6))"
"(if(null? s_63)"
"(let-values()(f_22 tail?_12 s_63))"
"(if(pair? s_63)"
"(let-values()"
"(f_22"
" tail?_12"
"(cons"
"(loop_116 #f(car s_63) depth_2)"
"(loop_116 #t(cdr s_63) depth_2))))"
"(if(let-values(((or-part_103)"
"(symbol? s_63)))"
"(if or-part_103"
" or-part_103"
"(let-values(((or-part_104)"
"(boolean? s_63)))"
"(if or-part_104"
" or-part_104"
"(number? s_63)))))"
"(let-values()(f_22 #f s_63))"
"(if(let-values(((or-part_105)"
"(vector? s_63)))"
"(if or-part_105"
" or-part_105"
"(let-values(((or-part_106)"
"(box? s_63)))"
"(if or-part_106"
" or-part_106"
"(let-values(((or-part_107)"
"(prefab-struct-key"
" s_63)))"
"(if or-part_107"
" or-part_107"
"(hash? s_63)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_12"
" s_63"
"(lambda(tail?_14 s_65)"
"(f_22 tail?_14 s_65))"
" seen_6))"
"(let-values()"
"(f_22 #f s_63)))))))))))"
" loop_116)"
" #f"
" s_62"
" 0)))))"
"(if(if stx-p_0(not(eq?(syntax-props stx-p_0) empty-props)) #f)"
"(let-values(((the-struct_0) result-s_0))"
"(if(syntax?$1 the-struct_0)"
"(let-values(((props21_0)(syntax-props stx-p_0)))"
"(syntax1.1"
"(syntax-content the-struct_0)"
"(syntax-scopes the-struct_0)"
"(syntax-shifted-multi-scopes the-struct_0)"
"(syntax-scope-propagations+tamper the-struct_0)"
"(syntax-mpi-shifts the-struct_0)"
"(syntax-srcloc the-struct_0)"
" props21_0"
"(syntax-inspector the-struct_0)))"
"                                          (raise-argument-error 'struct-copy \"syntax?\" the-struct_0)))"
" result-s_0)))))))))))))"
"(case-lambda"
"((stx-c_1 s_66)(datum->syntax8_0 stx-c_1 s_66 #f #f #f #f))"
"((stx-c_2 s_67 stx-l_1 stx-p3_1)(datum->syntax8_0 stx-c_2 s_67 stx-l_1 stx-p3_1 #t #t))"
"((stx-c_3 s_68 stx-l2_1)(datum->syntax8_0 stx-c_3 s_68 stx-l2_1 #f #t #f)))))"
"(define-values"
"(disallow-cycles)"
"(hasheq"
" 'cycle-fail"
"   (lambda (s_69) (raise-arguments-error 'datum->syntax \"cannot create syntax from cyclic datum\" s_69))))"
"(define-values"
"(struct:syntax-state"
" syntax-state19.1"
" syntax-state?"
" syntax-state-all-sharing?"
" syntax-state-context-triple"
" syntax-state-srcloc"
" set-syntax-state-all-sharing?!)"
"(let-values(((struct:_15 make-_15 ?_15 -ref_15 -set!_15)"
"(let-values()"
"(let-values()"
"(make-struct-type 'syntax-state #f 3 0 #f null(current-inspector) #f '(1 2) #f 'syntax-state)))))"
"(values"
" struct:_15"
" make-_15"
" ?_15"
"(make-struct-field-accessor -ref_15 0 'all-sharing?)"
"(make-struct-field-accessor -ref_15 1 'context-triple)"
"(make-struct-field-accessor -ref_15 2 'srcloc)"
"(make-struct-field-mutator -set!_15 0 'all-sharing?))))"
"(define-values"
"(no-pair-syntax-in-cdr?)"
"(lambda(content_2)"
"(if(pair? content_2)"
"(let-values()"
"((letrec-values(((loop_117)"
"(lambda(content_3)"
"(if(if(syntax?$1 content_3)(pair?(syntax-content content_3)) #f)"
"(let-values() #f)"
"(if(pair? content_3)(let-values()(loop_117(cdr content_3)))(let-values() #t))))))"
" loop_117)"
"(cdr content_2)))"
"(let-values() #t))))"
"(define-values"
"(deserialize-syntax)"
"(lambda(content_4 context-triple_1 srcloc_1 props_0 tamper_1 inspector_0)"
"(syntax1.1"
" content_4"
"(vector-ref context-triple_1 0)"
"(vector-ref context-triple_1 1)"
"(deserialize-tamper tamper_1)"
"(vector-ref context-triple_1 2)"
" srcloc_1"
"(if props_0"
"(let-values(((ht_37) props_0))"
"(begin"
"(check-in-immutable-hash ht_37)"
"((letrec-values(((for-loop_31)"
"(lambda(table_26 i_58)"
"(if i_58"
"(let-values(((k_17 v_80)(unsafe-immutable-hash-iterate-key+value ht_37 i_58)))"
"(let-values(((table_27)"
"(let-values(((table_28) table_26))"
"(let-values(((table_29)"
"(let-values()"
"(let-values(((key_16 val_6)"
"(let-values()"
"(values"
" k_17"
"(preserved-property-value1.1"
" v_80)))))"
"(hash-set table_28 key_16 val_6)))))"
"(values table_29)))))"
"(if(not #f)"
"(for-loop_31 table_27(unsafe-immutable-hash-iterate-next ht_37 i_58))"
" table_27)))"
" table_26))))"
" for-loop_31)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_37))))"
" empty-props)"
" inspector_0)))"
"(define-values"
"(deserialize-datum->syntax)"
"(lambda(content_5 context-triple_2 srcloc_2 inspector_1)"
"(let-values(((s_70)(deserialize-syntax #f context-triple_2 srcloc_2 #f #f inspector_1)))"
"(datum->syntax$1 s_70 content_5 s_70 s_70))))"
"(define-values(empty-binding-table) '#hasheq())"
"(define-values"
"(struct:table-with-bulk-bindings"
" table-with-bulk-bindings1.1"
" table-with-bulk-bindings?"
" table-with-bulk-bindings-syms"
" table-with-bulk-bindings-syms/serialize"
" table-with-bulk-bindings-bulk-bindings)"
"(let-values(((struct:_16 make-_16 ?_16 -ref_16 -set!_16)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'table-with-bulk-bindings"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(twbb_0 ser-push!_2 state_10)"
"(begin"
"(ser-push!_2 'tag '#:table-with-bulk-bindings)"
"(ser-push!_2(table-with-bulk-bindings-syms/serialize twbb_0))"
"(ser-push!_2(table-with-bulk-bindings-bulk-bindings twbb_0))))))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'table-with-bulk-bindings)))))"
"(values"
" struct:_16"
" make-_16"
" ?_16"
"(make-struct-field-accessor -ref_16 0 'syms)"
"(make-struct-field-accessor -ref_16 1 'syms/serialize)"
"(make-struct-field-accessor -ref_16 2 'bulk-bindings))))"
"(define-values"
"(deserialize-table-with-bulk-bindings)"
"(lambda(syms_1 bulk-bindings_0)(table-with-bulk-bindings1.1 syms_1 syms_1 bulk-bindings_0)))"
"(define-values"
"(struct:bulk-binding-at bulk-binding-at2.1 bulk-binding-at? bulk-binding-at-scopes bulk-binding-at-bulk)"
"(let-values(((struct:_17 make-_17 ?_17 -ref_17 -set!_17)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-at"
" #f"
" 2"
" 0"
" #f"
"(list"
"                      (cons prop:reach-scopes (lambda (sms_1 reach_1) (error \"shouldn't get here\")))"
"(cons"
" prop:serialize"
"(lambda(bba_0 ser-push!_3 state_11)"
"(begin"
"(ser-push!_3 'tag '#:bulk-binding-at)"
"(ser-push!_3(bulk-binding-at-scopes bba_0))"
"(ser-push!_3(bulk-binding-at-bulk bba_0))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-at)))))"
"(values"
" struct:_17"
" make-_17"
" ?_17"
"(make-struct-field-accessor -ref_17 0 'scopes)"
"(make-struct-field-accessor -ref_17 1 'bulk))))"
"(define-values(deserialize-bulk-binding-at)(lambda(scopes_0 bulk_0)(bulk-binding-at2.1 scopes_0 bulk_0)))"
"(define-values(prop:bulk-binding bulk-binding?$1 bulk-binding-ref)(make-struct-type-property 'bulk-binding))"
"(define-values"
"(struct:bulk-binding-class"
" bulk-binding-class3.1"
" bulk-binding-class?"
" bulk-binding-class-get-symbols"
" bulk-binding-class-create)"
"(let-values(((struct:_18 make-_18 ?_18 -ref_18 -set!_18)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-class"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-class)))))"
"(values"
" struct:_18"
" make-_18"
" ?_18"
"(make-struct-field-accessor -ref_18 0 'get-symbols)"
"(make-struct-field-accessor -ref_18 1 'create))))"
"(define-values"
"(bulk-binding-symbols)"
"(lambda(b_21 s_71 extra-shifts_0)"
"((bulk-binding-class-get-symbols(bulk-binding-ref b_21))"
" b_21"
"(append extra-shifts_0(if s_71(syntax-mpi-shifts s_71) null)))))"
"(define-values(bulk-binding-create)(lambda(b_22)(bulk-binding-class-create(bulk-binding-ref b_22))))"
"(define-values(binding-table-empty?)(lambda(bt_0)(if(hash? bt_0)(zero?(hash-count bt_0)) #f)))"
"(define-values"
"(binding-table-add)"
"(lambda(bt_1 scopes_1 sym_1 binding_0 just-for-nominal?_0)"
"(if(hash? bt_1)"
"(let-values()(hash-set bt_1 sym_1(hash-set(hash-ref bt_1 sym_1 '#hash()) scopes_1 binding_0)))"
"(let-values()"
"(let-values(((new-syms_0)"
"(binding-table-add"
"(table-with-bulk-bindings-syms bt_1)"
" scopes_1"
" sym_1"
" binding_0"
" just-for-nominal?_0)))"
"(let-values(((new-syms/serialize_0)"
"(if just-for-nominal?_0"
"(let-values()(table-with-bulk-bindings-syms/serialize bt_1))"
"(if(eq?(table-with-bulk-bindings-syms bt_1)(table-with-bulk-bindings-syms/serialize bt_1))"
"(let-values() new-syms_0)"
"(let-values()"
"(binding-table-add"
"(table-with-bulk-bindings-syms/serialize bt_1)"
" scopes_1"
" sym_1"
" binding_0"
" #f))))))"
"(let-values(((the-struct_1) bt_1))"
"(if(table-with-bulk-bindings? the-struct_1)"
"(let-values(((syms7_0) new-syms_0)((syms/serialize8_0) new-syms/serialize_0))"
"(table-with-bulk-bindings1.1"
" syms7_0"
" syms/serialize8_0"
"(table-with-bulk-bindings-bulk-bindings the-struct_1)))"
"                (raise-argument-error 'struct-copy \"table-with-bulk-bindings?\" the-struct_1)))))))))"
"(define-values"
"(binding-table-add-bulk)"
"(lambda(bt_2 scopes_2 bulk_1)"
"(if(table-with-bulk-bindings? bt_2)"
"(let-values()"
"(let-values(((new-syms_1)(remove-matching-bindings(table-with-bulk-bindings-syms bt_2) scopes_2 bulk_1)))"
"(let-values(((new-syms/serialize_1)"
"(if(eq?(table-with-bulk-bindings-syms bt_2)(table-with-bulk-bindings-syms/serialize bt_2))"
" new-syms_1"
"(remove-matching-bindings(table-with-bulk-bindings-syms/serialize bt_2) scopes_2 bulk_1))))"
"(table-with-bulk-bindings1.1"
" new-syms_1"
" new-syms/serialize_1"
"(cons(bulk-binding-at2.1 scopes_2 bulk_1)(table-with-bulk-bindings-bulk-bindings bt_2))))))"
"(let-values()(binding-table-add-bulk(table-with-bulk-bindings1.1 bt_2 bt_2 null) scopes_2 bulk_1)))))"
"(define-values"
"(remove-matching-bindings)"
"(lambda(syms_2 scopes_3 bulk_2)"
"(let-values(((bulk-symbols_0)(bulk-binding-symbols bulk_2 #f null)))"
"(if(<(hash-count syms_2)(hash-count bulk-symbols_0))"
"(let-values()"
"(let-values(((ht_38) syms_2))"
"(begin"
"(check-in-immutable-hash ht_38)"
"((letrec-values(((for-loop_32)"
"(lambda(syms_3 i_59)"
"(if i_59"
"(let-values(((sym_2 sym-bindings_0)"
"(unsafe-immutable-hash-iterate-key+value ht_38 i_59)))"
"(let-values(((syms_4)"
"(let-values(((syms_5) syms_3))"
"(let-values(((syms_6)"
"(let-values()"
"(if(hash-ref bulk-symbols_0 sym_2 #f)"
"(remove-matching-binding"
" syms_5"
" sym_2"
" sym-bindings_0"
" scopes_3)"
" syms_5))))"
"(values syms_6)))))"
"(if(not #f)"
"(for-loop_32 syms_4(unsafe-immutable-hash-iterate-next ht_38 i_59))"
" syms_4)))"
" syms_3))))"
" for-loop_32)"
" syms_2"
"(unsafe-immutable-hash-iterate-first ht_38)))))"
"(let-values()"
"(let-values(((ht_39) bulk-symbols_0))"
"(begin"
"(check-in-immutable-hash-keys ht_39)"
"((letrec-values(((for-loop_33)"
"(lambda(syms_7 i_37)"
"(if i_37"
"(let-values(((sym_3)(unsafe-immutable-hash-iterate-key ht_39 i_37)))"
"(let-values(((syms_8)"
"(let-values(((syms_9) syms_7))"
"(let-values(((syms_10)"
"(let-values()"
"(let-values(((sym-bindings_1)"
"(hash-ref syms_9 sym_3 #f)))"
"(if sym-bindings_1"
"(remove-matching-binding"
" syms_9"
" sym_3"
" sym-bindings_1"
" scopes_3)"
" syms_9)))))"
"(values syms_10)))))"
"(if(not #f)"
"(for-loop_33 syms_8(unsafe-immutable-hash-iterate-next ht_39 i_37))"
" syms_8)))"
" syms_7))))"
" for-loop_33)"
" syms_2"
"(unsafe-immutable-hash-iterate-first ht_39)))))))))"
"(define-values"
"(remove-matching-binding)"
"(lambda(syms_11 sym_4 sym-bindings_2 scopes_4)(hash-set syms_11 sym_4(hash-remove sym-bindings_2 scopes_4))))"
"(define-values"
"(binding-table-symbols)"
"(lambda(table_30 scs_2 s_72 extra-shifts_1)"
"(let-values(((ht_40 bulk-bindings_1)"
"(if(hash? table_30)"
"(values table_30 null)"
"(values"
"(table-with-bulk-bindings-syms table_30)"
"(table-with-bulk-bindings-bulk-bindings table_30)))))"
"(set-union"
"(let-values(((ht_41) ht_40))"
"(begin"
"(check-in-hash ht_41)"
"((letrec-values(((for-loop_34)"
"(lambda(table_31 i_60)"
"(if i_60"
"(let-values(((sym_5 at-sym_0)(hash-iterate-key+value ht_41 i_60)))"
"(let-values(((table_32)"
"(let-values(((table_25) table_31))"
"(if(let-values(((ht_42) at-sym_0))"
"(begin"
"(check-in-hash-keys ht_42)"
"((letrec-values(((for-loop_35)"
"(lambda(result_34 i_61)"
"(if i_61"
"(let-values(((an-scs_0)"
"(hash-iterate-key"
" ht_42"
" i_61)))"
"(let-values(((result_35)"
"(let-values()"
"(let-values(((result_36)"
"(let-values()"
"(let-values()"
"(subset?"
" an-scs_0"
" scs_2)))))"
"(values"
" result_36)))))"
"(if(if(not"
"((lambda x_66 result_35)"
" an-scs_0))"
"(not #f)"
" #f)"
"(for-loop_35"
" result_35"
"(hash-iterate-next ht_42 i_61))"
" result_35)))"
" result_34))))"
" for-loop_35)"
" #f"
"(hash-iterate-first ht_42))))"
"(let-values(((table_33) table_25))"
"(let-values(((table_34)"
"(let-values()"
"(let-values(((key_17 val_7)"
"(let-values()"
"(values"
"(let-values() sym_5)"
" #t))))"
"(hash-set table_33 key_17 val_7)))))"
"(values table_34)))"
" table_25))))"
"(if(not #f)(for-loop_34 table_32(hash-iterate-next ht_41 i_60)) table_32)))"
" table_31))))"
" for-loop_34)"
" '#hasheq()"
"(hash-iterate-first ht_41))))"
"(let-values(((lst_34) bulk-bindings_1))"
"(begin"
"(check-list lst_34)"
"((letrec-values(((for-loop_36)"
"(lambda(table_35 lst_35)"
"(if(pair? lst_35)"
"(let-values(((bba_1)(unsafe-car lst_35))((rest_13)(unsafe-cdr lst_35)))"
"(let-values(((table_36)"
"(let-values(((table_37) table_35))"
"(if(subset?(bulk-binding-at-scopes bba_1) scs_2)"
"(let-values(((ht_43)"
"(bulk-binding-symbols"
"(bulk-binding-at-bulk bba_1)"
" s_72"
" extra-shifts_1)))"
"(begin"
"(check-in-hash-keys ht_43)"
"((letrec-values(((for-loop_37)"
"(lambda(table_38 i_62)"
"(if i_62"
"(let-values(((sym_6)"
"(hash-iterate-key"
" ht_43"
" i_62)))"
"(let-values(((table_39)"
"(let-values(((table_40)"
" table_38))"
"(let-values(((table_41)"
"(let-values()"
"(let-values(((key_18"
" val_8)"
"(let-values()"
"(values"
"(let-values()"
" sym_6)"
" #t))))"
"(hash-set"
" table_40"
" key_18"
" val_8)))))"
"(values table_41)))))"
"(if(not #f)"
"(for-loop_37"
" table_39"
"(hash-iterate-next ht_43 i_62))"
" table_39)))"
" table_38))))"
" for-loop_37)"
" table_37"
"(hash-iterate-first ht_43))))"
" table_37))))"
"(if(not #f)(for-loop_36 table_36 rest_13) table_36)))"
" table_35))))"
" for-loop_36)"
" '#hasheq()"
" lst_34)))))))"
"(define-values"
"(binding-table-prune-to-reachable)"
"(lambda(bt_3 state_12)"
"(let-values(((or-part_108)(hash-ref(serialize-state-bindings-intern state_12) bt_3 #f)))"
"(if or-part_108"
" or-part_108"
"(let-values(((reachable-scopes_1)(serialize-state-reachable-scopes state_12)))"
"(let-values(((new-syms_2)"
"(let-values(((ht_44)(if(hash? bt_3) bt_3(table-with-bulk-bindings-syms/serialize bt_3))))"
"(begin"
"(check-in-immutable-hash ht_44)"
"((letrec-values(((for-loop_38)"
"(lambda(table_42 i_63)"
"(if i_63"
"(let-values(((sym_7 bindings-for-sym_0)"
"(unsafe-immutable-hash-iterate-key+value ht_44 i_63)))"
"(let-values(((table_43)"
"(let-values(((new-bindings-for-sym_0)"
"(let-values(((ht_45)"
" bindings-for-sym_0))"
"(begin"
"(check-in-immutable-hash ht_45)"
"((letrec-values(((for-loop_39)"
"(lambda(table_44"
" i_64)"
"(if i_64"
"(let-values(((scopes_5"
" binding_1)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_45"
" i_64)))"
"(let-values(((table_45)"
"(let-values(((table_46)"
" table_44))"
"(if(subset?"
" scopes_5"
" reachable-scopes_1)"
"(let-values(((table_47)"
" table_46))"
"(let-values(((table_48)"
"(let-values()"
"(let-values(((key_19"
" val_9)"
"(let-values()"
"(values"
"(intern-scopes"
" scopes_5"
" state_12)"
" binding_1))))"
"(hash-set"
" table_47"
" key_19"
" val_9)))))"
"(values"
" table_48)))"
" table_46))))"
"(if(not"
" #f)"
"(for-loop_39"
" table_45"
"(unsafe-immutable-hash-iterate-next"
" ht_45"
" i_64))"
" table_45)))"
" table_44))))"
" for-loop_39)"
" '#hash()"
"(unsafe-immutable-hash-iterate-first"
" ht_45))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_40)"
"(lambda(table_49)"
"(let-values()"
"(let-values(((table_50)"
"(let-values(((table_51)"
" table_49))"
"(if(positive?"
"(hash-count"
" new-bindings-for-sym_0))"
"(let-values(((table_52)"
" table_51))"
"(let-values(((table_53)"
"(let-values()"
"(let-values(((key_20"
" val_10)"
"(let-values()"
"(values"
" sym_7"
" new-bindings-for-sym_0))))"
"(hash-set"
" table_52"
" key_20"
" val_10)))))"
"(values"
" table_53)))"
" table_51))))"
" table_50)))))"
" for-loop_40)"
" table_42)))))"
"(if(not #f)"
"(for-loop_38"
" table_43"
"(unsafe-immutable-hash-iterate-next ht_44 i_63))"
" table_43)))"
" table_42))))"
" for-loop_38)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_44))))))"
"(let-values(((new-bulk-bindings_0)"
"(if(hash? bt_3)"
" null"
"(let-values(((lst_36)(table-with-bulk-bindings-bulk-bindings bt_3)))"
"(begin"
"(check-list lst_36)"
"((letrec-values(((for-loop_41)"
"(lambda(lst_37)"
"(if(pair? lst_37)"
"(let-values(((bba_2)(unsafe-car lst_37))"
"((rest_14)(unsafe-cdr lst_37)))"
"(let-values(((post-guard-var_5)(lambda() #t)))"
"(let-values()"
"(if(subset?"
"(bulk-binding-at-scopes bba_2)"
" reachable-scopes_1)"
"(let-values()"
"(let-values(((elem_5)"
"(let-values()"
"(let-values()"
"(let-values(((the-struct_2) bba_2))"
"(if(bulk-binding-at? the-struct_2)"
"(let-values(((scopes9_0)"
"(intern-scopes"
"(bulk-binding-at-scopes"
" bba_2)"
" state_12)))"
"(bulk-binding-at2.1"
" scopes9_0"
"(bulk-binding-at-bulk"
" the-struct_2)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                       \"bulk-binding-at?\""
" the-struct_2)))))))"
"(let-values(((result_37)"
"(if(post-guard-var_5)"
"(for-loop_41 rest_14)"
" null)))"
"(cons elem_5 result_37))))"
"(if(post-guard-var_5)(for-loop_41 rest_14) null)))))"
" null))))"
" for-loop_41)"
" lst_36))))))"
"(let-values(((new-bt_0)"
"(if(pair? new-bulk-bindings_0)"
"(table-with-bulk-bindings1.1 new-syms_2 new-syms_2 new-bulk-bindings_0)"
" new-syms_2)))"
"(begin(hash-set!(serialize-state-bulk-bindings-intern state_12) bt_3 new-bt_0) new-bt_0)))))))))"
"(define-values"
"(binding-table-register-reachable)"
"(lambda(bt_4 reachable-scopes_2 reach_2 register-trigger_0)"
"(begin"
"(let-values(((ht_46)(if(hash? bt_4) bt_4(table-with-bulk-bindings-syms/serialize bt_4))))"
"(begin"
"(check-in-immutable-hash ht_46)"
"((letrec-values(((for-loop_42)"
"(lambda(i_65)"
"(if i_65"
"(let-values(((sym_8 bindings-for-sym_1)"
"(unsafe-immutable-hash-iterate-key+value ht_46 i_65)))"
"(let-values((()"
"(let-values(((ht_47) bindings-for-sym_1))"
"(begin"
"(check-in-immutable-hash ht_47)"
"((letrec-values(((for-loop_43)"
"(lambda(i_66)"
"(if i_66"
"(let-values(((scopes_6 binding_2)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_47"
" i_66)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(scopes-register-reachable"
" scopes_6"
" binding_2"
" reachable-scopes_2"
" reach_2"
" register-trigger_0))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_43"
"(unsafe-immutable-hash-iterate-next"
" ht_47"
" i_66))"
"(values))))"
"(values)))))"
" for-loop_43)"
"(unsafe-immutable-hash-iterate-first ht_47))))))"
"(if(not #f)"
"(for-loop_42(unsafe-immutable-hash-iterate-next ht_46 i_65))"
"(values))))"
"(values)))))"
" for-loop_42)"
"(unsafe-immutable-hash-iterate-first ht_46))))"
"(void))))"
"(define-values"
"(scopes-register-reachable)"
"(lambda(scopes_7 binding_3 reachable-scopes_3 reach_3 register-trigger_1)"
"(let-values(((v_81)(if(binding-reach-scopes? binding_3)((binding-reach-scopes-ref binding_3) binding_3) #f)))"
"(if v_81"
"(let-values()"
"(if(subset? scopes_7 reachable-scopes_3)"
"(let-values()(reach_3 v_81))"
"(let-values()"
"(begin"
"(let-values(((ht_48) scopes_7))"
"(begin"
"(check-in-immutable-hash-keys ht_48)"
"((letrec-values(((for-loop_44)"
"(lambda(i_67)"
"(if i_67"
"(let-values(((sc_0)(unsafe-immutable-hash-iterate-key ht_48 i_67)))"
"(let-values((()"
"(let-values()"
"(if(set-member? reachable-scopes_3 sc_0)"
"(values)"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(register-trigger_1 sc_0 v_81))"
"(values)))))"
"(values)))))))"
"(if(not #f)"
"(for-loop_44(unsafe-immutable-hash-iterate-next ht_48 i_67))"
"(values))))"
"(values)))))"
" for-loop_44)"
"(unsafe-immutable-hash-iterate-first ht_48))))"
"(void)))))"
"(void)))))"
"(define-values"
"(taint-content)"
"(lambda(d_4)"
"(let-values(((s_73) d_4)"
"((f_23)(lambda(tail?_15 x_67) x_67))"
"((s->_1)"
"(lambda(sub-s_0)"
"(if(tamper-tainted?(syntax-tamper sub-s_0))"
"(let-values() sub-s_0)"
"(let-values()"
"(let-values(((stx_0) sub-s_0))"
"(let-values(((the-struct_3) stx_0))"
"(if(syntax?$1 the-struct_3)"
"(let-values(((scope-propagations+tamper6_0)"
"(let-values(((t_17)(tamper-tainted-for-content(syntax-content sub-s_0)))"
"((p_4)(syntax-scope-propagations+tamper stx_0)))"
"(if(tamper? p_4) t_17((propagation-set-tamper-ref p_4) p_4 t_17)))))"
"(syntax1.1"
"(syntax-content the-struct_3)"
"(syntax-scopes the-struct_3)"
"(syntax-shifted-multi-scopes the-struct_3)"
" scope-propagations+tamper6_0"
"(syntax-mpi-shifts the-struct_3)"
"(syntax-srcloc the-struct_3)"
"(syntax-props the-struct_3)"
"(syntax-inspector the-struct_3)))"
"                              (raise-argument-error 'struct-copy \"syntax?\" the-struct_3))))))))"
"((seen_7) #f))"
"(let-values(((s_74) s_73)"
"((f_7)"
"(lambda(tail?_16 v_82)"
"(if(syntax?$1 v_82)(let-values()(s->_1 v_82))(let-values()(f_23 tail?_16 v_82)))))"
"((seen_8) seen_7))"
"((letrec-values(((loop_118)"
"(lambda(tail?_17 s_75 prev-depth_3)"
"(let-values(((depth_3)(add1 prev-depth_3)))"
"(if(if seen_8(> depth_3 32) #f)"
"(let-values()"
"(datum-map-slow tail?_17 s_75(lambda(tail?_1 s_42)(f_7 tail?_1 s_42)) seen_8))"
"(if(null? s_75)"
"(let-values()(f_7 tail?_17 s_75))"
"(if(pair? s_75)"
"(let-values()"
"(f_7"
" tail?_17"
"(cons(loop_118 #f(car s_75) depth_3)(loop_118 #t(cdr s_75) depth_3))))"
"(if(let-values(((or-part_89)(symbol? s_75)))"
"(if or-part_89"
" or-part_89"
"(let-values(((or-part_90)(boolean? s_75)))"
"(if or-part_90 or-part_90(number? s_75)))))"
"(let-values()(f_7 #f s_75))"
"(if(let-values(((or-part_81)(vector? s_75)))"
"(if or-part_81"
" or-part_81"
"(let-values(((or-part_82)(box? s_75)))"
"(if or-part_82"
" or-part_82"
"(let-values(((or-part_91)(prefab-struct-key s_75)))"
"(if or-part_91 or-part_91(hash? s_75)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_17"
" s_75"
"(lambda(tail?_18 s_76)(f_7 tail?_18 s_76))"
" seen_8))"
"(let-values()(f_7 #f s_75)))))))))))"
" loop_118)"
" #f"
" s_74"
" 0)))))"
"(define-values(syntax-tainted?$1)(lambda(s_77)(tamper-tainted?(syntax-tamper s_77))))"
"(define-values(syntax-clean?)(lambda(s_78)(tamper-clean?(syntax-tamper s_78))))"
"(define-values"
"(syntax-arm$1)"
"(lambda(s_79 insp_0)"
"(let-values(((t_18)(syntax-tamper s_79)))"
"(if(tamper-tainted? t_18)"
"(let-values() s_79)"
"(if(if t_18"
"(let-values(((or-part_109)(set-member? t_18 insp_0)))"
"(if or-part_109"
" or-part_109"
"(let-values(((ht_49) t_18))"
"(begin"
"(check-in-immutable-hash-keys ht_49)"
"((letrec-values(((for-loop_45)"
"(lambda(result_38 i_68)"
"(if i_68"
"(let-values(((already-insp_0)"
"(unsafe-immutable-hash-iterate-key ht_49 i_68)))"
"(let-values(((result_5)"
"(let-values()"
"(let-values(((result_39)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same?"
" already-insp_0"
" insp_0)))))"
"(values result_39)))))"
"(if(if(not((lambda x_68 result_5) already-insp_0))(not #f) #f)"
"(for-loop_45 result_5(unsafe-immutable-hash-iterate-next ht_49 i_68))"
" result_5)))"
" result_38))))"
" for-loop_45)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_49))))))"
" #f)"
"(let-values() s_79)"
"(let-values()"
"(let-values(((stx_1) s_79))"
"(let-values(((the-struct_4) stx_1))"
"(if(syntax?$1 the-struct_4)"
"(let-values(((scope-propagations+tamper7_0)"
"(let-values(((t_19)(set-add(if t_18(remove-inferior t_18 insp_0)(seteq)) insp_0))"
"((p_7)(syntax-scope-propagations+tamper stx_1)))"
"(if(tamper? p_7) t_19((propagation-set-tamper-ref p_7) p_7 t_19)))))"
"(syntax1.1"
"(syntax-content the-struct_4)"
"(syntax-scopes the-struct_4)"
"(syntax-shifted-multi-scopes the-struct_4)"
" scope-propagations+tamper7_0"
"(syntax-mpi-shifts the-struct_4)"
"(syntax-srcloc the-struct_4)"
"(syntax-props the-struct_4)"
"(syntax-inspector the-struct_4)))"
"                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_4))))))))))"
"(define-values"
"(remove-inferior)"
"(lambda(t_20 insp_1)"
"(let-values(((ht_50) t_20))"
"(begin"
"(check-in-immutable-hash-keys ht_50)"
"((letrec-values(((for-loop_46)"
"(lambda(table_54 i_69)"
"(if i_69"
"(let-values(((already-insp_1)(unsafe-immutable-hash-iterate-key ht_50 i_69)))"
"(let-values(((table_55)"
"(let-values(((table_56) table_54))"
"(if(inspector-superior-or-same? insp_1 already-insp_1)"
" table_56"
"(let-values(((table_57) table_56))"
"(let-values(((table_16)"
"(let-values()"
"(let-values(((key_21 val_11)"
"(let-values()"
"(values"
"(let-values() already-insp_1)"
" #t))))"
"(hash-set table_57 key_21 val_11)))))"
"(values table_16)))))))"
"(if(not #f)"
"(for-loop_46 table_55(unsafe-immutable-hash-iterate-next ht_50 i_69))"
" table_55)))"
" table_54))))"
" for-loop_46)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_50))))))"
"(define-values"
"(syntax-disarm$1)"
"(let-values(((syntax-disarm4_0)"
"(lambda(s3_0 insp1_0 insp2_0)"
"(let-values(((s_11) s3_0))"
"(let-values(((insp_2)(if insp2_0 insp1_0 #f)))"
"(let-values()"
"(let-values(((t_21)(syntax-tamper s_11)))"
"(if(not(tamper-armed? t_21))"
"(let-values() s_11)"
"(if(not insp_2)"
"(let-values()"
"(let-values(((stx_2) s_11))"
"(let-values(((the-struct_5) stx_2))"
"(if(syntax?$1 the-struct_5)"
"(let-values(((scope-propagations+tamper8_0)"
"(let-values(((t_22) #f)"
"((p_33)(syntax-scope-propagations+tamper stx_2)))"
"(if(tamper? p_33)"
" t_22"
"((propagation-set-tamper-ref p_33) p_33 t_22)))))"
"(syntax1.1"
"(syntax-content the-struct_5)"
"(syntax-scopes the-struct_5)"
"(syntax-shifted-multi-scopes the-struct_5)"
" scope-propagations+tamper8_0"
"(syntax-mpi-shifts the-struct_5)"
"(syntax-srcloc the-struct_5)"
"(syntax-props the-struct_5)"
"(syntax-inspector the-struct_5)))"
"                                      (raise-argument-error 'struct-copy \"syntax?\" the-struct_5)))))"
"(let-values()"
"(let-values(((new-t_1)(remove-inferior t_21 insp_2)))"
"(let-values(((stx_3) s_11))"
"(let-values(((the-struct_6) stx_3))"
"(if(syntax?$1 the-struct_6)"
"(let-values(((scope-propagations+tamper9_0)"
"(let-values(((t_23)(if(not(set-empty? new-t_1)) new-t_1 #f))"
"((p_34)(syntax-scope-propagations+tamper stx_3)))"
"(if(tamper? p_34)"
" t_23"
"((propagation-set-tamper-ref p_34) p_34 t_23)))))"
"(syntax1.1"
"(syntax-content the-struct_6)"
"(syntax-scopes the-struct_6)"
"(syntax-shifted-multi-scopes the-struct_6)"
" scope-propagations+tamper9_0"
"(syntax-mpi-shifts the-struct_6)"
"(syntax-srcloc the-struct_6)"
"(syntax-props the-struct_6)"
"(syntax-inspector the-struct_6)))"
"                                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_6)))))))))))))))"
"(case-lambda((s_22)(syntax-disarm4_0 s_22 #f #f))((s_80 insp1_1)(syntax-disarm4_0 s_80 insp1_1 #t)))))"
"(define-values"
"(syntax-rearm$1)"
"(lambda(s_24 from-s_0)"
"(let-values(((t_24)(syntax-tamper s_24)))"
"(if(tamper-tainted? t_24)"
"(let-values() s_24)"
"(let-values()"
"(let-values(((from-t_0)(syntax-tamper from-s_0)))"
"(if(tamper-clean? from-t_0)"
"(let-values() s_24)"
"(if(tamper-tainted? from-t_0)"
"(let-values()"
"(let-values(((stx_4) s_24))"
"(let-values(((the-struct_7) stx_4))"
"(if(syntax?$1 the-struct_7)"
"(let-values(((scope-propagations+tamper10_0)"
"(let-values(((t_25)(tamper-tainted-for-content(syntax-content s_24)))"
"((p_10)(syntax-scope-propagations+tamper stx_4)))"
"(if(tamper? p_10) t_25((propagation-set-tamper-ref p_10) p_10 t_25)))))"
"(syntax1.1"
"(syntax-content the-struct_7)"
"(syntax-scopes the-struct_7)"
"(syntax-shifted-multi-scopes the-struct_7)"
" scope-propagations+tamper10_0"
"(syntax-mpi-shifts the-struct_7)"
"(syntax-srcloc the-struct_7)"
"(syntax-props the-struct_7)"
"(syntax-inspector the-struct_7)))"
"                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_7)))))"
"(if(tamper-clean? t_24)"
"(let-values()"
"(let-values(((stx_5) s_24))"
"(let-values(((the-struct_8) stx_5))"
"(if(syntax?$1 the-struct_8)"
"(let-values(((scope-propagations+tamper11_0)"
"(let-values(((t_26) from-t_0)"
"((p_13)(syntax-scope-propagations+tamper stx_5)))"
"(if(tamper? p_13) t_26((propagation-set-tamper-ref p_13) p_13 t_26)))))"
"(syntax1.1"
"(syntax-content the-struct_8)"
"(syntax-scopes the-struct_8)"
"(syntax-shifted-multi-scopes the-struct_8)"
" scope-propagations+tamper11_0"
"(syntax-mpi-shifts the-struct_8)"
"(syntax-srcloc the-struct_8)"
"(syntax-props the-struct_8)"
"(syntax-inspector the-struct_8)))"
"                          (raise-argument-error 'struct-copy \"syntax?\" the-struct_8)))))"
"(let-values()"
"(let-values(((stx_6) s_24))"
"(let-values(((the-struct_9) stx_6))"
"(if(syntax?$1 the-struct_9)"
"(let-values(((scope-propagations+tamper12_0)"
"(let-values(((t_27)"
"(let-values(((ht_51) from-t_0))"
"(begin"
"(check-in-immutable-hash-keys ht_51)"
"((letrec-values(((for-loop_47)"
"(lambda(t_28 i_70)"
"(if i_70"
"(let-values(((from-i_0)"
"(unsafe-immutable-hash-iterate-key"
" ht_51"
" i_70)))"
"(let-values(((t_29)"
"(let-values(((t_30)"
" t_28))"
"(let-values(((t_31)"
"(let-values()"
"(if(set-member?"
" t_30"
" from-i_0)"
"(let-values()"
" t_30)"
"(if(any-superior?"
" t_30"
" from-i_0)"
"(let-values()"
" t_30)"
"(let-values()"
"(set-add"
"(remove-inferior"
" t_30"
" from-i_0)"
" from-i_0)))))))"
"(values t_31)))))"
"(if(not #f)"
"(for-loop_47"
" t_29"
"(unsafe-immutable-hash-iterate-next"
" ht_51"
" i_70))"
" t_29)))"
" t_28))))"
" for-loop_47)"
" t_24"
"(unsafe-immutable-hash-iterate-first ht_51)))))"
"((p_35)(syntax-scope-propagations+tamper stx_6)))"
"(if(tamper? p_35) t_27((propagation-set-tamper-ref p_35) p_35 t_27)))))"
"(syntax1.1"
"(syntax-content the-struct_9)"
"(syntax-scopes the-struct_9)"
"(syntax-shifted-multi-scopes the-struct_9)"
" scope-propagations+tamper12_0"
"(syntax-mpi-shifts the-struct_9)"
"(syntax-srcloc the-struct_9)"
"(syntax-props the-struct_9)"
"(syntax-inspector the-struct_9)))"
"                          (raise-argument-error 'struct-copy \"syntax?\" the-struct_9))))))))))))))"
"(define-values"
"(syntax-taint$1)"
"(lambda(s_81)"
"(if(tamper-tainted?(syntax-tamper s_81))"
" s_81"
"(let-values(((stx_7) s_81))"
"(let-values(((the-struct_10) stx_7))"
"(if(syntax?$1 the-struct_10)"
"(let-values(((scope-propagations+tamper13_0)"
"(let-values(((t_32)(tamper-tainted-for-content(syntax-content s_81)))"
"((p_36)(syntax-scope-propagations+tamper stx_7)))"
"(if(tamper? p_36) t_32((propagation-set-tamper-ref p_36) p_36 t_32)))))"
"(syntax1.1"
"(syntax-content the-struct_10)"
"(syntax-scopes the-struct_10)"
"(syntax-shifted-multi-scopes the-struct_10)"
" scope-propagations+tamper13_0"
"(syntax-mpi-shifts the-struct_10)"
"(syntax-srcloc the-struct_10)"
"(syntax-props the-struct_10)"
"(syntax-inspector the-struct_10)))"
"            (raise-argument-error 'struct-copy \"syntax?\" the-struct_10)))))))"
"(define-values"
"(any-superior?)"
"(lambda(t_5 from-i_1)"
"(let-values(((ht_52) t_5))"
"(begin"
"(check-in-immutable-hash-keys ht_52)"
"((letrec-values(((for-loop_48)"
"(lambda(result_40 i_71)"
"(if i_71"
"(let-values(((i_72)(unsafe-immutable-hash-iterate-key ht_52 i_71)))"
"(let-values(((result_8)"
"(let-values()"
"(let-values(((result_41)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same? i_72 from-i_1)))))"
"(values result_41)))))"
"(if(if(not((lambda x_69 result_8) i_72))(not #f) #f)"
"(for-loop_48 result_8(unsafe-immutable-hash-iterate-next ht_52 i_71))"
" result_8)))"
" result_40))))"
" for-loop_48)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_52))))))"
"(define-values"
"(inspector-superior-or-same?)"
"(lambda(sup-i_0 i_73)"
"(let-values(((or-part_110)(eq? sup-i_0 i_73)))(if or-part_110 or-part_110(inspector-superior? sup-i_0 i_73)))))"
"(define-values"
"(struct:fallback fallback1.1 fallback? fallback-search-list)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()(make-struct-type 'fallback #f 1 0 #f null 'prefab #f '(0) #f 'fallback)))))"
"(values struct:_0 make-_0 ?_0(make-struct-field-accessor -ref_0 0 'search-list))))"
"(define-values(fallback-first)(lambda(smss_0)(if(fallback? smss_0)(car(fallback-search-list smss_0)) smss_0)))"
"(define-values"
"(fallback-rest)"
"(lambda(smss_1)"
"(let-values(((l_46)(cdr(fallback-search-list smss_1))))(if(null?(cdr l_46))(car l_46)(fallback1.1 l_46)))))"
"(define-values"
"(fallback-push)"
"(lambda(smss_2 smss/maybe-fallback_0)"
"(fallback1.1"
"(cons"
" smss_2"
"(if(fallback? smss/maybe-fallback_0)"
"(fallback-search-list smss/maybe-fallback_0)"
"(list smss/maybe-fallback_0))))))"
"(define-values"
"(fallback-update-first)"
"(lambda(smss_3 f_24)"
"(if(fallback? smss_3)"
"(let-values(((l_3)(fallback-search-list smss_3)))(fallback1.1(cons(f_24(car l_3))(cdr l_3))))"
"(f_24 smss_3))))"
"(define-values"
"(fallback-map)"
"(lambda(smss_4 f_17)"
"(if(fallback? smss_4)"
"(fallback1.1"
"(let-values(((lst_38)(fallback-search-list smss_4)))"
"(begin"
"(check-list lst_38)"
"((letrec-values(((for-loop_49)"
"(lambda(lst_39)"
"(if(pair? lst_39)"
"(let-values(((smss_5)(unsafe-car lst_39))((rest_15)(unsafe-cdr lst_39)))"
"(let-values(((post-guard-var_6)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_6)(let-values()(let-values()(f_17 smss_5)))))"
"(let-values(((result_42)(if(post-guard-var_6)(for-loop_49 rest_15) null)))"
"(cons elem_6 result_42))))))"
" null))))"
" for-loop_49)"
" lst_38))))"
"(f_17 smss_4))))"
"(define-values(fallback->list)(lambda(smss_6)(if(fallback? smss_6)(fallback-search-list smss_6)(list smss_6))))"
"(define-values(cache)(box(make-weak-box #f)))"
"(define-values"
"(clear-resolve-cache!)"
"(case-lambda"
"((sym_9)"
"(let-values(((c_14)(weak-box-value(unbox cache))))(if c_14(let-values()(hash-remove! c_14 sym_9))(void))))"
"(()(let-values(((c_15)(weak-box-value(unbox cache))))(if c_15(let-values()(hash-clear! c_15))(void))))))"
"(define-values"
"(struct:entry entry1.1 entry? entry-scs entry-smss entry-phase entry-binding)"
"(let-values(((struct:_16 make-_16 ?_16 -ref_16 -set!_16)"
"(let-values()"
"(let-values()"
"(make-struct-type 'entry #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'entry)))))"
"(values"
" struct:_16"
" make-_16"
" ?_16"
"(make-struct-field-accessor -ref_16 0 'scs)"
"(make-struct-field-accessor -ref_16 1 'smss)"
"(make-struct-field-accessor -ref_16 2 'phase)"
"(make-struct-field-accessor -ref_16 3 'binding))))"
"(define-values"
"(resolve-cache-get)"
"(lambda(sym_10 phase_0 scs_3 smss_7)"
"(let-values(((c_16)(weak-box-value(unbox cache))))"
"(if c_16"
"(let-values(((v_83)(hash-ref c_16 sym_10 #f)))"
"(if v_83"
"(if(eqv? phase_0(entry-phase v_83))"
"(if(set=? scs_3(entry-scs v_83))(if(set=? smss_7(entry-smss v_83))(entry-binding v_83) #f) #f)"
" #f)"
" #f))"
" #f))))"
"(define-values"
"(resolve-cache-set!)"
"(lambda(sym_11 phase_1 scs_4 smss_8 b_23)"
"(let-values(((wb_0)(unbox cache)))"
"(let-values(((c_17)(weak-box-value wb_0)))"
"(if(not c_17)"
"(let-values()"
"(begin"
"(box-cas! cache wb_0(make-weak-box(make-hasheq)))"
"(resolve-cache-set! sym_11 phase_1 scs_4 smss_8 b_23)))"
"(let-values()(hash-set! c_17 sym_11(entry1.1 scs_4 smss_8 phase_1 b_23))))))))"
"(define-values(NUM-CACHE-SLOTS) 8)"
"(define-values(cached-sets)(make-weak-box(make-vector NUM-CACHE-SLOTS #f)))"
"(define-values(cached-sets-pos) 0)"
"(define-values(cached-hashes)(make-weak-box(make-vector NUM-CACHE-SLOTS #f)))"
"(define-values(cached-hashes-pos) 0)"
"(define-values"
"(cache-or-reuse-set)"
"(lambda(s_82)"
"(let-values(((vec_16)"
"(let-values(((or-part_111)(weak-box-value cached-sets)))"
"(if or-part_111"
" or-part_111"
"(let-values(((vec_17)(make-vector NUM-CACHE-SLOTS #f)))"
"(begin(set! cached-sets(make-weak-box vec_17)) vec_17))))))"
"(let-values(((or-part_112)"
"(let-values(((vec_18 len_10)"
"(let-values(((vec_19) vec_16))"
"(begin(check-vector vec_19)(values vec_19(unsafe-vector-length vec_19))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_50)"
"(lambda(result_43 pos_7)"
"(if(unsafe-fx< pos_7 len_10)"
"(let-values(((s2_5)(unsafe-vector-ref vec_18 pos_7)))"
"(let-values(((result_44)"
"(let-values()"
"(let-values(((result_45)"
"(let-values()"
"(let-values()"
"(if s2_5"
"(if(set=? s_82 s2_5) s2_5 #f)"
" #f)))))"
"(values result_45)))))"
"(if(if(not((lambda x_70 result_44) s2_5))(not #f) #f)"
"(for-loop_50 result_44(unsafe-fx+ 1 pos_7))"
" result_44)))"
" result_43))))"
" for-loop_50)"
" #f"
" 0)))))"
"(if or-part_112"
" or-part_112"
"(begin"
"(vector-set! vec_16 cached-sets-pos s_82)"
"(set! cached-sets-pos(modulo(add1 cached-sets-pos) NUM-CACHE-SLOTS))"
" s_82))))))"
"(define-values"
"(cache-or-reuse-hash)"
"(lambda(s_83)"
"(let-values(((vec_20)"
"(let-values(((or-part_113)(weak-box-value cached-hashes)))"
"(if or-part_113"
" or-part_113"
"(let-values(((vec_21)(make-vector NUM-CACHE-SLOTS #f)))"
"(begin(set! cached-hashes(make-weak-box vec_21)) vec_21))))))"
"(let-values(((or-part_114)"
"(let-values(((vec_22 len_11)"
"(let-values(((vec_23) vec_20))"
"(begin(check-vector vec_23)(values vec_23(unsafe-vector-length vec_23))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_51)"
"(lambda(result_46 pos_8)"
"(if(unsafe-fx< pos_8 len_11)"
"(let-values(((s2_6)(unsafe-vector-ref vec_22 pos_8)))"
"(let-values(((result_47)"
"(let-values()"
"(let-values(((result_48)"
"(let-values()"
"(let-values()"
"(if s2_6"
"(if(equal? s_83 s2_6) s2_6 #f)"
" #f)))))"
"(values result_48)))))"
"(if(if(not((lambda x_71 result_47) s2_6))(not #f) #f)"
"(for-loop_51 result_47(unsafe-fx+ 1 pos_8))"
" result_47)))"
" result_46))))"
" for-loop_51)"
" #f"
" 0)))))"
"(if or-part_114"
" or-part_114"
"(begin"
"(vector-set! vec_20 cached-hashes-pos s_83)"
"(set! cached-hashes-pos(modulo(add1 cached-hashes-pos) NUM-CACHE-SLOTS))"
" s_83))))))"
"(define-values"
"(struct:scope scope1.1 scope? scope-id scope-kind scope-binding-table set-scope-binding-table!)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'scope"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:scope-with-bindings"
"(lambda(s_84 reachable-scopes_4 reach_4 register-trigger_2)"
"(binding-table-register-reachable"
"(scope-binding-table s_84)"
" reachable-scopes_4"
" reach_4"
" register-trigger_2)))"
"(cons prop:reach-scopes(lambda(s_85 reach_5)(void)))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_86 ser-push!_2 state_10)"
"(if(binding-table-empty?(scope-binding-table s_86))"
"(let-values()(ser-push!_2 'tag #f))"
"(let-values()"
"(begin"
"(ser-push!_2 'tag '#:scope-fill!)"
"(ser-push!_2(binding-table-prune-to-reachable(scope-binding-table s_86) state_10)))))))"
"(cons"
" prop:serialize"
"(lambda(s_87 ser-push!_4 state_13)"
"(begin"
"(if(set-member?(serialize-state-reachable-scopes state_13) s_87)"
"(void)"
"                             (let-values () (error \"internal error: found supposedly unreachable scope\")))"
"(if(eq? s_87 top-level-common-scope)"
"(let-values()(ser-push!_4 'tag '#:scope))"
"(let-values()"
"(begin(ser-push!_4 'tag '#:scope+kind)(ser-push!_4(scope-kind s_87))))))))"
"(cons"
" prop:custom-write"
"(lambda(sc_1 port_6 mode_6)"
"(begin"
"                           (write-string \"#<scope:\" port_6)"
"(display(scope-id sc_1) port_6)"
"                           (write-string \":\" port_6)"
"(display(scope-kind sc_1) port_6)"
"                           (write-string \">\" port_6)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'scope)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'id)"
"(make-struct-field-accessor -ref_0 1 'kind)"
"(make-struct-field-accessor -ref_0 2 'binding-table)"
"(make-struct-field-mutator -set!_0 2 'binding-table))))"
"(define-values"
"(deserialize-scope)"
"(case-lambda"
"(() top-level-common-scope)"
"((kind_0)(scope1.1(new-deserialize-scope-id!) kind_0 empty-binding-table))))"
"(define-values(deserialize-scope-fill!)(lambda(s_88 bt_5)(set-scope-binding-table! s_88 bt_5)))"
"(define-values"
"(struct:multi-scope"
" multi-scope2.1"
" multi-scope?"
" multi-scope-id"
" multi-scope-name"
" multi-scope-scopes"
" multi-scope-shifted"
" multi-scope-label-shifted)"
"(let-values(((struct:_19 make-_19 ?_19 -ref_19 -set!_19)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'multi-scope"
" #f"
" 5"
" 0"
" #f"
"(list"
"(cons prop:reach-scopes(lambda(ms_0 reach_6)(reach_6(multi-scope-scopes ms_0))))"
"(cons"
" prop:serialize"
"(lambda(ms_1 ser-push!_5 state_14)"
"(begin"
"(ser-push!_5 'tag '#:multi-scope)"
"(ser-push!_5(multi-scope-name ms_1))"
"(ser-push!_5(multi-scope-scopes ms_1))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'multi-scope)))))"
"(values"
" struct:_19"
" make-_19"
" ?_19"
"(make-struct-field-accessor -ref_19 0 'id)"
"(make-struct-field-accessor -ref_19 1 'name)"
"(make-struct-field-accessor -ref_19 2 'scopes)"
"(make-struct-field-accessor -ref_19 3 'shifted)"
"(make-struct-field-accessor -ref_19 4 'label-shifted))))"
"(define-values"
"(deserialize-multi-scope)"
"(lambda(name_19 scopes_8)"
"(multi-scope2.1(new-deserialize-scope-id!) name_19 scopes_8(box(hasheqv))(box(hash)))))"
"(define-values"
"(struct:representative-scope"
" representative-scope3.1"
" representative-scope?"
" representative-scope-owner"
" representative-scope-phase"
" set-representative-scope-owner!"
" set-representative-scope-phase!)"
"(let-values(((struct:_20 make-_20 ?_20 -ref_20 -set!_20)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'representative-scope"
" struct:scope"
" 2"
" 0"
" #f"
"(list"
"(cons prop:reach-scopes(lambda(s_32 reach_7)(reach_7(representative-scope-owner s_32))))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_33 ser-push!_6 state_15)"
"(begin"
"(ser-push!_6 'tag '#:representative-scope-fill!)"
"(ser-push!_6(binding-table-prune-to-reachable(scope-binding-table s_33) state_15))"
"(ser-push!_6(representative-scope-owner s_33)))))"
"(cons"
" prop:serialize"
"(lambda(s_89 ser-push!_7 state_16)"
"(begin"
"(ser-push!_7 'tag '#:representative-scope)"
"(ser-push!_7(scope-kind s_89))"
"(ser-push!_7(representative-scope-phase s_89)))))"
"(cons"
" prop:custom-write"
"(lambda(sc_2 port_7 mode_7)"
"(begin"
"                           (write-string \"#<scope:\" port_7)"
"(display(scope-id sc_2) port_7)"
"(if(representative-scope-owner sc_2)"
"(let-values()"
"(begin"
"                                 (write-string \"=\" port_7)"
"(display(multi-scope-id(representative-scope-owner sc_2)) port_7)))"
"(void))"
"                           (write-string \"@\" port_7)"
"(display(representative-scope-phase sc_2) port_7)"
"                           (write-string \">\" port_7)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'representative-scope)))))"
"(values"
" struct:_20"
" make-_20"
" ?_20"
"(make-struct-field-accessor -ref_20 0 'owner)"
"(make-struct-field-accessor -ref_20 1 'phase)"
"(make-struct-field-mutator -set!_20 0 'owner)"
"(make-struct-field-mutator -set!_20 1 'phase))))"
"(define-values"
"(deserialize-representative-scope)"
"(lambda(kind_1 phase_2)"
"(let-values(((v_58)(representative-scope3.1(new-deserialize-scope-id!) kind_1 #f #f phase_2))) v_58)))"
"(define-values"
"(deserialize-representative-scope-fill!)"
"(lambda(s_48 bt_6 owner_0)"
"(begin(deserialize-scope-fill! s_48 bt_6)(set-representative-scope-owner! s_48 owner_0))))"
"(define-values"
"(struct:shifted-multi-scope"
" shifted-multi-scope4.1"
" shifted-multi-scope?"
" shifted-multi-scope-phase"
" shifted-multi-scope-multi-scope)"
"(let-values(((struct:_21 make-_21 ?_21 -ref_21 -set!_21)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'shifted-multi-scope"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons"
" prop:reach-scopes"
"(lambda(sms_2 reach_8)(reach_8(shifted-multi-scope-multi-scope sms_2))))"
"(cons"
" prop:serialize"
"(lambda(sms_3 ser-push!_8 state_17)"
"(begin"
"(ser-push!_8 'tag '#:shifted-multi-scope)"
"(ser-push!_8(shifted-multi-scope-phase sms_3))"
"(ser-push!_8(shifted-multi-scope-multi-scope sms_3)))))"
"(cons"
" prop:custom-write"
"(lambda(sms_4 port_8 mode_8)"
"(begin"
"                           (write-string \"#<scope:\" port_8)"
"(display(multi-scope-id(shifted-multi-scope-multi-scope sms_4)) port_8)"
"                           (write-string \"@\" port_8)"
"(display(shifted-multi-scope-phase sms_4) port_8)"
"                           (write-string \">\" port_8)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'shifted-multi-scope)))))"
"(values"
" struct:_21"
" make-_21"
" ?_21"
"(make-struct-field-accessor -ref_21 0 'phase)"
"(make-struct-field-accessor -ref_21 1 'multi-scope))))"
"(define-values"
"(deserialize-shifted-multi-scope)"
"(lambda(phase_3 multi-scope_0)(intern-shifted-multi-scope phase_3 multi-scope_0)))"
"(define-values"
"(intern-shifted-multi-scope)"
"(lambda(phase_4 multi-scope_1)"
"(letrec-values(((transaction-loop_0)"
"(lambda(boxed-table_0 key_22 make_0)"
"(let-values(((or-part_115)(hash-ref(unbox boxed-table_0) phase_4 #f)))"
"(if or-part_115"
" or-part_115"
"(let-values(((val_12)(make_0)))"
"(let-values(((current_0)(unbox boxed-table_0)))"
"(let-values(((next_3)(hash-set current_0 key_22 val_12)))"
"(if(box-cas! boxed-table_0 current_0 next_3)"
" val_12"
"(transaction-loop_0 boxed-table_0 key_22 make_0))))))))))"
"(if(phase? phase_4)"
"(let-values()"
"(let-values(((or-part_116)(hash-ref(unbox(multi-scope-shifted multi-scope_1)) phase_4 #f)))"
"(if or-part_116"
" or-part_116"
"(transaction-loop_0"
"(multi-scope-shifted multi-scope_1)"
" phase_4"
"(lambda()(shifted-multi-scope4.1 phase_4 multi-scope_1))))))"
"(let-values()"
"(let-values(((or-part_99)(hash-ref(unbox(multi-scope-label-shifted multi-scope_1)) phase_4 #f)))"
"(if or-part_99"
" or-part_99"
"(transaction-loop_0"
"(multi-scope-label-shifted multi-scope_1)"
" phase_4"
"(lambda()(shifted-multi-scope4.1 phase_4 multi-scope_1))))))))))"
"(define-values"
"(struct:shifted-to-label-phase shifted-to-label-phase5.1 shifted-to-label-phase? shifted-to-label-phase-from)"
"(let-values(((struct:_22 make-_22 ?_22 -ref_22 -set!_22)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'shifted-to-label-phase"
" #f"
" 1"
" 0"
" #f"
" null"
" 'prefab"
" #f"
" '(0)"
" #f"
" 'shifted-to-label-phase)))))"
"(values struct:_22 make-_22 ?_22(make-struct-field-accessor -ref_22 0 'from))))"
"(define-values(id-counter) 0)"
"(define-values(new-scope-id!)(lambda()(begin(set! id-counter(add1 id-counter)) id-counter)))"
"(define-values(new-deserialize-scope-id!)(lambda()(-(new-scope-id!))))"
"(define-values(top-level-common-scope)(scope1.1 0 'module empty-binding-table))"
"(define-values(new-scope)(lambda(kind_2)(scope1.1(new-scope-id!) kind_2 empty-binding-table)))"
"(define-values"
"(new-multi-scope)"
"(let-values(((new-multi-scope8_0)"
"(lambda(name6_0 name7_0)"
"(let-values(((name_20)(if name7_0 name6_0 #f)))"
"(let-values()"
"(intern-shifted-multi-scope"
" 0"
"(multi-scope2.1(new-scope-id!) name_20(make-hasheqv)(box(hasheqv))(box(hash)))))))))"
"(case-lambda(()(new-multi-scope8_0 #f #f))((name6_1)(new-multi-scope8_0 name6_1 #t)))))"
"(define-values"
"(multi-scope-to-scope-at-phase)"
"(lambda(ms_2 phase_5)"
"(let-values(((or-part_117)(hash-ref(multi-scope-scopes ms_2) phase_5 #f)))"
"(if or-part_117"
" or-part_117"
"(let-values(((s_90)(representative-scope3.1(new-scope-id!) 'module empty-binding-table ms_2 phase_5)))"
"(begin(hash-set!(multi-scope-scopes ms_2) phase_5 s_90) s_90))))))"
"(define-values(scope>?)(lambda(sc1_0 sc2_0)(>(scope-id sc1_0)(scope-id sc2_0))))"
"(define-values(scope<?)(lambda(sc1_1 sc2_1)(<(scope-id sc1_1)(scope-id sc2_1))))"
"(define-values"
"(shifted-multi-scope<?)"
"(lambda(sms1_0 sms2_0)"
"(let-values(((ms1_0)(shifted-multi-scope-multi-scope sms1_0)))"
"(let-values(((ms2_0)(shifted-multi-scope-multi-scope sms2_0)))"
"(if(eq? ms1_0 ms2_0)"
"(let-values(((p1_0)(shifted-multi-scope-phase sms1_0))((p2_0)(shifted-multi-scope-phase sms2_0)))"
"(if(shifted-to-label-phase? p1_0)"
"(let-values()"
"(if(shifted-to-label-phase? p2_0)"
"(let-values()(phase<?(shifted-to-label-phase-from p1_0)(shifted-to-label-phase-from p2_0)))"
"(let-values() #f)))"
"(if(shifted-to-label-phase? p2_0)(let-values() #t)(let-values()(phase<? p1_0 p2_0)))))"
"(<(multi-scope-id ms1_0)(multi-scope-id ms2_0)))))))"
"(define-values"
"(apply-scope)"
"(lambda(s_91 sc_3 op_0 prop-op_0)"
"(if(shifted-multi-scope? sc_3)"
"(let-values(((the-struct_11) s_91))"
"(if(syntax?$1 the-struct_11)"
"(let-values(((shifted-multi-scopes37_0)"
"(fallback-update-first"
"(syntax-shifted-multi-scopes s_91)"
"(lambda(smss_9)(op_0(fallback-first smss_9) sc_3))))"
"((scope-propagations+tamper38_0)"
"(if(datum-has-elements?(syntax-content s_91))"
"(prop-op_0"
"(syntax-scope-propagations+tamper s_91)"
" sc_3"
"(syntax-scopes s_91)"
"(syntax-shifted-multi-scopes s_91)"
"(syntax-mpi-shifts s_91))"
"(syntax-scope-propagations+tamper s_91))))"
"(syntax1.1"
"(syntax-content the-struct_11)"
"(syntax-scopes the-struct_11)"
" shifted-multi-scopes37_0"
" scope-propagations+tamper38_0"
"(syntax-mpi-shifts the-struct_11)"
"(syntax-srcloc the-struct_11)"
"(syntax-props the-struct_11)"
"(syntax-inspector the-struct_11)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_11)))"
"(let-values(((the-struct_12) s_91))"
"(if(syntax?$1 the-struct_12)"
"(let-values(((scopes39_0)(op_0(syntax-scopes s_91) sc_3))"
"((scope-propagations+tamper40_0)"
"(if(datum-has-elements?(syntax-content s_91))"
"(prop-op_0"
"(syntax-scope-propagations+tamper s_91)"
" sc_3"
"(syntax-scopes s_91)"
"(syntax-shifted-multi-scopes s_91)"
"(syntax-mpi-shifts s_91))"
"(syntax-scope-propagations+tamper s_91))))"
"(syntax1.1"
"(syntax-content the-struct_12)"
" scopes39_0"
"(syntax-shifted-multi-scopes the-struct_12)"
" scope-propagations+tamper40_0"
"(syntax-mpi-shifts the-struct_12)"
"(syntax-srcloc the-struct_12)"
"(syntax-props the-struct_12)"
"(syntax-inspector the-struct_12)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_12))))))"
"(define-values"
"(syntax-e/no-taint)"
"(lambda(s_67)"
"(let-values(((prop_3)(syntax-scope-propagations+tamper s_67)))"
"(if(let-values(((or-part_118)(propagation? prop_3)))"
"(if or-part_118 or-part_118(tamper-needs-propagate? prop_3)))"
"(let-values(((new-content_0)"
"(let-values(((s_68)(syntax-content s_67))"
"((f_25)(lambda(tail?_19 x_72) x_72))"
"((s->_2)"
"(lambda(sub-s_1)"
"(if(propagation? prop_3)"
"(let-values(((the-struct_13) sub-s_1))"
"(if(syntax?$1 the-struct_13)"
"(let-values(((scopes41_0)"
"(propagation-apply prop_3(syntax-scopes sub-s_1) s_67))"
"((shifted-multi-scopes42_0)"
"(propagation-apply-shifted"
" prop_3"
"(syntax-shifted-multi-scopes sub-s_1)"
" s_67))"
"((mpi-shifts43_0)"
"(propagation-apply-mpi-shifts"
" prop_3"
"(syntax-mpi-shifts sub-s_1)"
" s_67))"
"((inspector44_0)"
"(propagation-apply-inspector"
" prop_3"
"(syntax-inspector sub-s_1)))"
"((scope-propagations+tamper45_0)"
"(propagation-merge"
"(syntax-content sub-s_1)"
" prop_3"
"(syntax-scope-propagations+tamper sub-s_1)"
"(syntax-scopes sub-s_1)"
"(syntax-shifted-multi-scopes sub-s_1)"
"(syntax-mpi-shifts sub-s_1))))"
"(syntax1.1"
"(syntax-content the-struct_13)"
" scopes41_0"
" shifted-multi-scopes42_0"
" scope-propagations+tamper45_0"
" mpi-shifts43_0"
"(syntax-srcloc the-struct_13)"
"(syntax-props the-struct_13)"
" inspector44_0))"
"                                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_13)))"
"(let-values(((the-struct_14) sub-s_1))"
"(if(syntax?$1 the-struct_14)"
"(let-values(((scope-propagations+tamper46_0)"
"(tamper-tainted-for-content(syntax-content sub-s_1))))"
"(syntax1.1"
"(syntax-content the-struct_14)"
"(syntax-scopes the-struct_14)"
"(syntax-shifted-multi-scopes the-struct_14)"
" scope-propagations+tamper46_0"
"(syntax-mpi-shifts the-struct_14)"
"(syntax-srcloc the-struct_14)"
"(syntax-props the-struct_14)"
"(syntax-inspector the-struct_14)))"
"                                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_14))))))"
"((seen_9) #f))"
"(let-values(((s_92) s_68)"
"((f_26)"
"(lambda(tail?_20 v_84)"
"(if(syntax?$1 v_84)"
"(let-values()(s->_2 v_84))"
"(let-values()(f_25 tail?_20 v_84)))))"
"((seen_10) seen_9))"
"((letrec-values(((loop_119)"
"(lambda(tail?_21 s_93 prev-depth_4)"
"(let-values(((depth_4)(add1 prev-depth_4)))"
"(if(if seen_10(> depth_4 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_21"
" s_93"
"(lambda(tail?_22 s_40)(f_26 tail?_22 s_40))"
" seen_10))"
"(if(null? s_93)"
"(let-values()(f_26 tail?_21 s_93))"
"(if(pair? s_93)"
"(let-values()"
"(f_26"
" tail?_21"
"(cons"
"(loop_119 #f(car s_93) depth_4)"
"(loop_119 #t(cdr s_93) depth_4))))"
"(if(let-values(((or-part_73)(symbol? s_93)))"
"(if or-part_73"
" or-part_73"
"(let-values(((or-part_74)(boolean? s_93)))"
"(if or-part_74 or-part_74(number? s_93)))))"
"(let-values()(f_26 #f s_93))"
"(if(let-values(((or-part_119)(vector? s_93)))"
"(if or-part_119"
" or-part_119"
"(let-values(((or-part_120)(box? s_93)))"
"(if or-part_120"
" or-part_120"
"(let-values(((or-part_121)"
"(prefab-struct-key s_93)))"
"(if or-part_121 or-part_121(hash? s_93)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_21"
" s_93"
"(lambda(tail?_23 s_94)(f_26 tail?_23 s_94))"
" seen_10))"
"(let-values()(f_26 #f s_93)))))))))))"
" loop_119)"
" #f"
" s_92"
" 0)))))"
"(begin"
"(set-syntax-content! s_67 new-content_0)"
"(set-syntax-scope-propagations+tamper!"
" s_67"
"(tamper-propagated(if(propagation? prop_3)(propagation-tamper prop_3) prop_3)))"
" new-content_0))"
"(syntax-content s_67)))))"
"(define-values"
"(syntax-e$1)"
"(lambda(s_95)"
"(let-values(((content_3)(syntax-e/no-taint s_95)))"
"(if(not(tamper-armed?(syntax-tamper s_95)))"
"(let-values() content_3)"
"(if(datum-has-elements? content_3)(let-values()(taint-content content_3))(let-values() content_3))))))"
"(define-values"
"(generalize-scope)"
"(lambda(sc_4)"
"(if(representative-scope? sc_4)"
"(intern-shifted-multi-scope(representative-scope-phase sc_4)(representative-scope-owner sc_4))"
" sc_4)))"
"(define-values(add-scope)(lambda(s_96 sc_5)(apply-scope s_96(generalize-scope sc_5) set-add propagation-add)))"
"(define-values"
"(add-scopes)"
"(lambda(s_97 scs_5)"
"(let-values(((lst_40) scs_5))"
"(begin"
"(check-list lst_40)"
"((letrec-values(((for-loop_52)"
"(lambda(s_98 lst_41)"
"(if(pair? lst_41)"
"(let-values(((sc_6)(unsafe-car lst_41))((rest_16)(unsafe-cdr lst_41)))"
"(let-values(((s_99)"
"(let-values(((s_100) s_98))"
"(let-values(((s_101)(let-values()(add-scope s_100 sc_6))))"
"(values s_101)))))"
"(if(not #f)(for-loop_52 s_99 rest_16) s_99)))"
" s_98))))"
" for-loop_52)"
" s_97"
" lst_40)))))"
"(define-values"
"(remove-scope)"
"(lambda(s_102 sc_7)(apply-scope s_102(generalize-scope sc_7) set-remove propagation-remove)))"
"(define-values"
"(remove-scopes)"
"(lambda(s_103 scs_6)"
"(let-values(((lst_42) scs_6))"
"(begin"
"(check-list lst_42)"
"((letrec-values(((for-loop_53)"
"(lambda(s_104 lst_43)"
"(if(pair? lst_43)"
"(let-values(((sc_8)(unsafe-car lst_43))((rest_17)(unsafe-cdr lst_43)))"
"(let-values(((s_105)"
"(let-values(((s_106) s_104))"
"(let-values(((s_107)(let-values()(remove-scope s_106 sc_8))))"
"(values s_107)))))"
"(if(not #f)(for-loop_53 s_105 rest_17) s_105)))"
" s_104))))"
" for-loop_53)"
" s_103"
" lst_42)))))"
"(define-values"
"(set-flip)"
"(lambda(s_108 e_16)(if(set-member? s_108 e_16)(set-remove s_108 e_16)(set-add s_108 e_16))))"
"(define-values"
"(flip-scope)"
"(lambda(s_109 sc_9)(apply-scope s_109(generalize-scope sc_9) set-flip propagation-flip)))"
"(define-values"
"(flip-scopes)"
"(lambda(s_110 scs_7)"
"(let-values(((lst_44) scs_7))"
"(begin"
"(check-list lst_44)"
"((letrec-values(((for-loop_54)"
"(lambda(s_111 lst_45)"
"(if(pair? lst_45)"
"(let-values(((sc_10)(unsafe-car lst_45))((rest_18)(unsafe-cdr lst_45)))"
"(let-values(((s_112)"
"(let-values(((s_113) s_111))"
"(let-values(((s_114)(let-values()(flip-scope s_113 sc_10))))"
"(values s_114)))))"
"(if(not #f)(for-loop_54 s_112 rest_18) s_112)))"
" s_111))))"
" for-loop_54)"
" s_110"
" lst_44)))))"
"(define-values"
"(push-scope)"
"(lambda(s_115 sms_5)"
"(let-values(((smss/maybe-fallbacks47_0) #f))"
"(let-values(((prev-result_0) #f))"
"(let-values(((push_0)"
"(lambda(smss/maybe-fallbacks_0)"
"(if(eq? smss/maybe-fallbacks47_0 smss/maybe-fallbacks_0)"
"(let-values() prev-result_0)"
"(let-values()"
"(let-values(((r_24)"
"(let-values()"
"(let-values(((smss_10)(fallback-first smss/maybe-fallbacks_0)))"
"(if(set-empty? smss_10)"
"(let-values()(set-add smss_10 sms_5))"
"(if(set-member? smss_10 sms_5)"
"(let-values() smss/maybe-fallbacks_0)"
"(let-values()"
"(fallback-push"
"(set-add smss_10 sms_5)"
" smss/maybe-fallbacks_0))))))))"
"(begin"
"(set! smss/maybe-fallbacks47_0 smss/maybe-fallbacks_0)"
"(set! prev-result_0 r_24)"
" r_24)))))))"
"(let-values(((s_116) s_115)"
"((f_27)(lambda(tail?_24 x_73) x_73))"
"((d->s_1)"
"(lambda(s_117 d_5)"
"(let-values(((the-struct_15) s_117))"
"(if(syntax?$1 the-struct_15)"
"(let-values(((content48_0) d_5)"
"((shifted-multi-scopes49_0)(push_0(syntax-shifted-multi-scopes s_117))))"
"(syntax1.1"
" content48_0"
"(syntax-scopes the-struct_15)"
" shifted-multi-scopes49_0"
"(syntax-scope-propagations+tamper the-struct_15)"
"(syntax-mpi-shifts the-struct_15)"
"(syntax-srcloc the-struct_15)"
"(syntax-props the-struct_15)"
"(syntax-inspector the-struct_15)))"
"                              (raise-argument-error 'struct-copy \"syntax?\" the-struct_15)))))"
"((s-e_1) syntax-e/no-taint)"
"((seen_11) #f))"
"((letrec-values(((loop_120)"
"(lambda(s_118)"
"(let-values(((s_119) s_118)"
"((f_28)"
"(lambda(tail?_25 v_85)"
"(if(syntax?$1 v_85)"
"(let-values()(d->s_1 v_85(loop_120(s-e_1 v_85))))"
"(let-values()(f_27 tail?_25 v_85)))))"
"((seen_12) seen_11))"
"((letrec-values(((loop_121)"
"(lambda(tail?_26 s_120 prev-depth_5)"
"(let-values(((depth_5)(add1 prev-depth_5)))"
"(if(if seen_12(> depth_5 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_26"
" s_120"
"(lambda(tail?_27 s_121)(f_28 tail?_27 s_121))"
" seen_12))"
"(if(null? s_120)"
"(let-values()(f_28 tail?_26 s_120))"
"(if(pair? s_120)"
"(let-values()"
"(f_28"
" tail?_26"
"(cons"
"(loop_121 #f(car s_120) depth_5)"
"(loop_121 #t(cdr s_120) depth_5))))"
"(if(let-values(((or-part_122)(symbol? s_120)))"
"(if or-part_122"
" or-part_122"
"(let-values(((or-part_123)(boolean? s_120)))"
"(if or-part_123 or-part_123(number? s_120)))))"
"(let-values()(f_28 #f s_120))"
"(if(let-values(((or-part_124)(vector? s_120)))"
"(if or-part_124"
" or-part_124"
"(let-values(((or-part_125)(box? s_120)))"
"(if or-part_125"
" or-part_125"
"(let-values(((or-part_126)"
"(prefab-struct-key s_120)))"
"(if or-part_126"
" or-part_126"
"(hash? s_120)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_26"
" s_120"
"(lambda(tail?_28 s_122)(f_28 tail?_28 s_122))"
" seen_12))"
"(let-values()(f_28 #f s_120)))))))))))"
" loop_121)"
" #f"
" s_119"
" 0)))))"
" loop_120)"
" s_116)))))))"
"(define-values"
"(struct:propagation"
" propagation10.1"
" propagation?"
" propagation-prev-scs"
" propagation-prev-smss"
" propagation-scope-ops"
" propagation-prev-mss"
" propagation-add-mpi-shifts"
" propagation-inspector"
" propagation-tamper)"
"(let-values(((struct:_23 make-_23 ?_23 -ref_23 -set!_23)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'propagation"
" #f"
" 7"
" 0"
" #f"
"(list"
"(cons prop:propagation-set-tamper(lambda(p_37 v_86)(propagation-set-tamper p_37 v_86)))"
"(cons prop:propagation-tamper(lambda(p_38)(propagation-tamper p_38)))"
"(cons prop:propagation syntax-e$1))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'propagation)))))"
"(values"
" struct:_23"
" make-_23"
" ?_23"
"(make-struct-field-accessor -ref_23 0 'prev-scs)"
"(make-struct-field-accessor -ref_23 1 'prev-smss)"
"(make-struct-field-accessor -ref_23 2 'scope-ops)"
"(make-struct-field-accessor -ref_23 3 'prev-mss)"
"(make-struct-field-accessor -ref_23 4 'add-mpi-shifts)"
"(make-struct-field-accessor -ref_23 5 'inspector)"
"(make-struct-field-accessor -ref_23 6 'tamper))))"
"(define-values"
"(propagation-add)"
"(lambda(prop_4 sc_11 prev-scs_0 prev-smss_0 prev-mss_0)"
"(if(propagation? prop_4)"
"(let-values(((the-struct_16) prop_4))"
"(if(propagation? the-struct_16)"
"(let-values(((scope-ops51_0)(hash-set(propagation-scope-ops prop_4) sc_11 'add)))"
"(propagation10.1"
"(propagation-prev-scs the-struct_16)"
"(propagation-prev-smss the-struct_16)"
" scope-ops51_0"
"(propagation-prev-mss the-struct_16)"
"(propagation-add-mpi-shifts the-struct_16)"
"(propagation-inspector the-struct_16)"
"(propagation-tamper the-struct_16)))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_16)))"
"(propagation10.1 prev-scs_0 prev-smss_0(hasheq sc_11 'add) prev-mss_0 #f #f prop_4))))"
"(define-values"
"(propagation-remove)"
"(lambda(prop_5 sc_12 prev-scs_1 prev-smss_1 prev-mss_1)"
"(if(propagation? prop_5)"
"(let-values(((the-struct_17) prop_5))"
"(if(propagation? the-struct_17)"
"(let-values(((scope-ops52_0)(hash-set(propagation-scope-ops prop_5) sc_12 'remove)))"
"(propagation10.1"
"(propagation-prev-scs the-struct_17)"
"(propagation-prev-smss the-struct_17)"
" scope-ops52_0"
"(propagation-prev-mss the-struct_17)"
"(propagation-add-mpi-shifts the-struct_17)"
"(propagation-inspector the-struct_17)"
"(propagation-tamper the-struct_17)))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_17)))"
"(propagation10.1 prev-scs_1 prev-smss_1(hasheq sc_12 'remove) prev-mss_1 #f #f prop_5))))"
"(define-values"
"(propagation-flip)"
"(lambda(prop_6 sc_13 prev-scs_2 prev-smss_2 prev-mss_2)"
"(if(propagation? prop_6)"
"(let-values(((ops_0)(propagation-scope-ops prop_6)))"
"(let-values(((current-op_0)(hash-ref ops_0 sc_13 #f)))"
"(if(if(eq? current-op_0 'flip)"
"(if(= 1(hash-count ops_0))"
"(if(not(propagation-inspector prop_6))(not(propagation-add-mpi-shifts prop_6)) #f)"
" #f)"
" #f)"
"(let-values() #f)"
"(let-values()"
"(let-values(((the-struct_18) prop_6))"
"(if(propagation? the-struct_18)"
"(let-values(((scope-ops53_0)"
"(if(eq? current-op_0 'flip)"
"(hash-remove ops_0 sc_13)"
"(hash-set"
" ops_0"
" sc_13"
"(let-values(((tmp_9) current-op_0))"
"(if(equal? tmp_9 'add)"
"(let-values() 'remove)"
"(if(equal? tmp_9 'remove)(let-values() 'add)(let-values() 'flip))))))))"
"(propagation10.1"
"(propagation-prev-scs the-struct_18)"
"(propagation-prev-smss the-struct_18)"
" scope-ops53_0"
"(propagation-prev-mss the-struct_18)"
"(propagation-add-mpi-shifts the-struct_18)"
"(propagation-inspector the-struct_18)"
"(propagation-tamper the-struct_18)))"
"                  (raise-argument-error 'struct-copy \"propagation?\" the-struct_18)))))))"
"(propagation10.1 prev-scs_2 prev-smss_2(hasheq sc_13 'flip) prev-mss_2 #f #f prop_6))))"
"(define-values"
"(propagation-mpi-shift)"
"(lambda(prop_7 add_0 inspector_2 prev-scs_3 prev-smss_3 prev-mss_3)"
"(if(propagation? prop_7)"
"(let-values(((the-struct_19) prop_7))"
"(if(propagation? the-struct_19)"
"(let-values(((add-mpi-shifts54_0)"
"(let-values(((base-add_0)(propagation-add-mpi-shifts prop_7)))"
"(if(if add_0 base-add_0 #f)"
"(lambda(mss_0)(add_0(base-add_0 mss_0)))"
"(let-values(((or-part_127) add_0))(if or-part_127 or-part_127 base-add_0)))))"
"((inspector55_0)"
"(let-values(((or-part_128)(propagation-inspector prop_7)))"
"(if or-part_128 or-part_128 inspector_2))))"
"(propagation10.1"
"(propagation-prev-scs the-struct_19)"
"(propagation-prev-smss the-struct_19)"
"(propagation-scope-ops the-struct_19)"
"(propagation-prev-mss the-struct_19)"
" add-mpi-shifts54_0"
" inspector55_0"
"(propagation-tamper the-struct_19)))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_19)))"
"(propagation10.1 prev-scs_3 prev-smss_3 '#hasheq() prev-mss_3 add_0 inspector_2 prop_7))))"
"(define-values"
"(propagation-apply)"
"(lambda(prop_8 scs_8 parent-s_0)"
"(if(eq?(propagation-prev-scs prop_8) scs_8)"
"(let-values()(syntax-scopes parent-s_0))"
"(let-values()"
"(let-values(((new-scs_0)"
"(let-values(((ht_53)(propagation-scope-ops prop_8)))"
"(begin"
"(check-in-immutable-hash ht_53)"
"((letrec-values(((for-loop_55)"
"(lambda(scs_9 i_74)"
"(if i_74"
"(let-values(((sc_14 op_1)"
"(unsafe-immutable-hash-iterate-key+value ht_53 i_74)))"
"(let-values(((scs_10)"
"(let-values(((scs_11) scs_9))"
"(if(not(shifted-multi-scope? sc_14))"
"(let-values(((scs_12) scs_11))"
"(let-values(((scs_13)"
"(let-values()"
"(let-values(((tmp_10) op_1))"
"(if(equal? tmp_10 'add)"
"(let-values()"
"(set-add scs_12 sc_14))"
"(if(equal? tmp_10 'remove)"
"(let-values()"
"(set-remove scs_12 sc_14))"
"(let-values()"
"(set-flip"
" scs_12"
" sc_14))))))))"
"(values scs_13)))"
" scs_11))))"
"(if(not #f)"
"(for-loop_55"
" scs_10"
"(unsafe-immutable-hash-iterate-next ht_53 i_74))"
" scs_10)))"
" scs_9))))"
" for-loop_55)"
" scs_8"
"(unsafe-immutable-hash-iterate-first ht_53))))))"
"(if(set=? new-scs_0(syntax-scopes parent-s_0))"
"(syntax-scopes parent-s_0)"
"(cache-or-reuse-set new-scs_0)))))))"
"(define-values"
"(propagation-apply-shifted)"
"(lambda(prop_9 smss_11 parent-s_1)"
"(if(eq?(propagation-prev-smss prop_9) smss_11)"
"(let-values()(syntax-shifted-multi-scopes parent-s_1))"
"(let-values()"
"(let-values(((new-smss_0)"
"(let-values(((ht_54)(propagation-scope-ops prop_9)))"
"(begin"
"(check-in-immutable-hash ht_54)"
"((letrec-values(((for-loop_56)"
"(lambda(smss_12 i_75)"
"(if i_75"
"(let-values(((sms_6 op_2)"
"(unsafe-immutable-hash-iterate-key+value ht_54 i_75)))"
"(let-values(((smss_13)"
"(let-values(((smss_14) smss_12))"
"(if(shifted-multi-scope? sms_6)"
"(let-values(((smss_15) smss_14))"
"(let-values(((smss_16)"
"(let-values()"
"(fallback-update-first"
" smss_15"
"(lambda(smss_17)"
"(let-values(((tmp_11) op_2))"
"(if(equal? tmp_11 'add)"
"(let-values()"
"(set-add smss_17 sms_6))"
"(if(equal? tmp_11 'remove)"
"(let-values()"
"(set-remove"
" smss_17"
" sms_6))"
"(let-values()"
"(set-flip"
" smss_17"
" sms_6))))))))))"
"(values smss_16)))"
" smss_14))))"
"(if(not #f)"
"(for-loop_56"
" smss_13"
"(unsafe-immutable-hash-iterate-next ht_54 i_75))"
" smss_13)))"
" smss_12))))"
" for-loop_56)"
" smss_11"
"(unsafe-immutable-hash-iterate-first ht_54))))))"
"(let-values(((parent-smss_0)(syntax-shifted-multi-scopes parent-s_1)))"
"(if(if(set? new-smss_0)(if(set? parent-smss_0)(set=? new-smss_0 parent-smss_0) #f) #f)"
" parent-smss_0"
"(cache-or-reuse-hash new-smss_0))))))))"
"(define-values"
"(propagation-apply-mpi-shifts)"
"(lambda(prop_10 mss_1 parent-s_2)"
"(if(eq?(propagation-prev-mss prop_10) mss_1)"
"(let-values()(syntax-mpi-shifts parent-s_2))"
"(let-values()(let-values(((add_1)(propagation-add-mpi-shifts prop_10)))(if add_1(add_1 mss_1) mss_1))))))"
"(define-values"
"(propagation-apply-inspector)"
"(lambda(prop_11 i_76)"
"(let-values(((or-part_129) i_76))(if or-part_129 or-part_129(propagation-inspector prop_11)))))"
"(define-values"
"(propagation-set-tamper)"
"(lambda(prop_12 t_33)"
"(if(propagation? prop_12)"
"(let-values(((the-struct_20) prop_12))"
"(if(propagation? the-struct_20)"
"(let-values(((tamper56_0) t_33))"
"(propagation10.1"
"(propagation-prev-scs the-struct_20)"
"(propagation-prev-smss the-struct_20)"
"(propagation-scope-ops the-struct_20)"
"(propagation-prev-mss the-struct_20)"
"(propagation-add-mpi-shifts the-struct_20)"
"(propagation-inspector the-struct_20)"
" tamper56_0))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_20)))"
" t_33)))"
"(define-values"
"(propagation-merge)"
"(lambda(content_6 prop_13 base-prop_0 prev-scs_4 prev-smss_4 prev-mss_4)"
"(if(not(datum-has-elements? content_6))"
"(let-values()(if(tamper-tainted?(propagation-tamper prop_13)) 'tainted base-prop_0))"
"(if(not(propagation? base-prop_0))"
"(let-values()"
"(if(if(eq?(propagation-prev-scs prop_13) prev-scs_4)"
"(if(eq?(propagation-prev-smss prop_13) prev-smss_4)"
"(if(eq?(propagation-prev-mss prop_13) prev-mss_4)(eq?(propagation-tamper prop_13) base-prop_0) #f)"
" #f)"
" #f)"
"(let-values() prop_13)"
"(let-values()"
"(propagation10.1"
" prev-scs_4"
" prev-smss_4"
"(propagation-scope-ops prop_13)"
" prev-mss_4"
"(propagation-add-mpi-shifts prop_13)"
"(propagation-inspector prop_13)"
"(if(tamper-tainted?(propagation-tamper prop_13)) 'tainted/need-propagate base-prop_0)))))"
"(let-values()"
"(let-values(((new-ops_0)"
"(let-values(((ht_55)(propagation-scope-ops prop_13)))"
"(begin"
"(check-in-immutable-hash ht_55)"
"((letrec-values(((for-loop_57)"
"(lambda(ops_1 i_77)"
"(if i_77"
"(let-values(((sc_15 op_3)"
"(unsafe-immutable-hash-iterate-key+value ht_55 i_77)))"
"(let-values(((ops_2)"
"(let-values(((ops_3) ops_1))"
"(let-values(((ops_4)"
"(let-values()"
"(let-values(((tmp_12) op_3))"
"(if(equal? tmp_12 'add)"
"(let-values()"
"(hash-set ops_3 sc_15 'add))"
"(if(equal? tmp_12 'remove)"
"(let-values()"
"(hash-set"
" ops_3"
" sc_15"
" 'remove))"
"(let-values()"
"(let-values(((current-op_1)"
"(hash-ref"
" ops_3"
" sc_15"
" #f)))"
"(let-values(((tmp_13)"
" current-op_1))"
"(if(equal? tmp_13 'add)"
"(let-values()"
"(hash-set"
" ops_3"
" sc_15"
" 'remove))"
"(if(equal?"
" tmp_13"
" 'remove)"
"(let-values()"
"(hash-set"
" ops_3"
" sc_15"
" 'add))"
"(if(equal?"
" tmp_13"
" 'flip)"
"(let-values()"
"(hash-remove"
" ops_3"
" sc_15))"
"(let-values()"
"(hash-set"
" ops_3"
" sc_15"
" 'flip))))))))))))))"
"(values ops_4)))))"
"(if(not #f)"
"(for-loop_57"
" ops_2"
"(unsafe-immutable-hash-iterate-next ht_55 i_77))"
" ops_2)))"
" ops_1))))"
" for-loop_57)"
"(propagation-scope-ops base-prop_0)"
"(unsafe-immutable-hash-iterate-first ht_55))))))"
"(let-values(((add_2)(propagation-add-mpi-shifts prop_13)))"
"(let-values(((base-add_1)(propagation-add-mpi-shifts base-prop_0)))"
"(let-values(((new-tamper_0)"
"(if(let-values(((or-part_130)(tamper-tainted?(propagation-tamper prop_13))))"
"(if or-part_130 or-part_130(tamper-tainted?(propagation-tamper base-prop_0))))"
" 'tainted/need-propagate"
"(propagation-tamper base-prop_0))))"
"(if(if(zero?(hash-count new-ops_0))"
"(if(not add_2)"
"(if(not base-add_1)"
"(if(not(propagation-inspector prop_13))(not(propagation-inspector base-prop_0)) #f)"
" #f)"
" #f)"
" #f)"
" new-tamper_0"
"(let-values(((the-struct_21) base-prop_0))"
"(if(propagation? the-struct_21)"
"(let-values(((scope-ops57_0) new-ops_0)"
"((add-mpi-shifts58_0)"
"(if(if add_2 base-add_1 #f)"
"(lambda(mss_2)(add_2(base-add_1 mss_2)))"
"(let-values(((or-part_131) add_2))(if or-part_131 or-part_131 base-add_1))))"
"((inspector59_0)"
"(let-values(((or-part_132)(propagation-inspector base-prop_0)))"
"(if or-part_132 or-part_132(propagation-inspector prop_13))))"
"((tamper60_0) new-tamper_0))"
"(propagation10.1"
"(propagation-prev-scs the-struct_21)"
"(propagation-prev-smss the-struct_21)"
" scope-ops57_0"
"(propagation-prev-mss the-struct_21)"
" add-mpi-shifts58_0"
" inspector59_0"
" tamper60_0))"
"                        (raise-argument-error 'struct-copy \"propagation?\" the-struct_21)))))))))))))"
"(define-values"
"(shift-multi-scope)"
"(lambda(sms_7 delta_0)"
"(if(zero-phase? delta_0)"
"(let-values() sms_7)"
"(if(label-phase? delta_0)"
"(let-values()"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_7))"
"(let-values() #f)"
"(let-values()"
"(intern-shifted-multi-scope"
"(shifted-to-label-phase5.1(phase- 0(shifted-multi-scope-phase sms_7)))"
"(shifted-multi-scope-multi-scope sms_7)))))"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_7))"
"(let-values() sms_7)"
"(let-values()"
"(intern-shifted-multi-scope"
"(phase+ delta_0(shifted-multi-scope-phase sms_7))"
"(shifted-multi-scope-multi-scope sms_7))))))))"
"(define-values"
"(syntax-shift-phase-level$1)"
"(lambda(s_123 phase_6)"
"(if(eqv? phase_6 0)"
" s_123"
"(let-values()"
"(let-values(((smss61_0) #f))"
"(let-values(((prev-result_1) #f))"
"(let-values(((shift-all_0)"
"(lambda(smss_18)"
"(if(eq? smss61_0 smss_18)"
"(let-values() prev-result_1)"
"(let-values()"
"(let-values(((r_25)"
"(let-values()"
"(fallback-map"
" smss_18"
"(lambda(smss_19)"
"(let-values(((ht_56) smss_19))"
"(begin"
"(check-in-immutable-hash-keys ht_56)"
"((letrec-values(((for-loop_58)"
"(lambda(table_58 i_78)"
"(if i_78"
"(let-values(((sms_8)"
"(unsafe-immutable-hash-iterate-key"
" ht_56"
" i_78)))"
"(let-values(((table_59)"
"(let-values(((new-sms_0)"
"(shift-multi-scope"
" sms_8"
" phase_6)))"
"(begin"
" #t"
"((letrec-values(((for-loop_59)"
"(lambda(table_60)"
"(let-values()"
"(let-values(((table_61)"
"(let-values(((table_62)"
" table_60))"
"(if new-sms_0"
"(let-values(((table_63)"
" table_62))"
"(let-values(((table_64)"
"(let-values()"
"(let-values(((key_23"
" val_13)"
"(let-values()"
"(values"
"(let-values()"
" new-sms_0)"
" #t))))"
"(hash-set"
" table_63"
" key_23"
" val_13)))))"
"(values"
" table_64)))"
" table_62))))"
" table_61)))))"
" for-loop_59)"
" table_58)))))"
"(if(not #f)"
"(for-loop_58"
" table_59"
"(unsafe-immutable-hash-iterate-next"
" ht_56"
" i_78))"
" table_59)))"
" table_58))))"
" for-loop_58)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_56)))))))))"
"(begin(set! smss61_0 smss_18)(set! prev-result_1 r_25) r_25)))))))"
"(let-values(((s_124) s_123)"
"((f_29)(lambda(tail?_29 d_6) d_6))"
"((d->s_2)"
"(lambda(s_125 d_7)"
"(let-values(((the-struct_22) s_125))"
"(if(syntax?$1 the-struct_22)"
"(let-values(((content62_0) d_7)"
"((shifted-multi-scopes63_0)"
"(shift-all_0(syntax-shifted-multi-scopes s_125))))"
"(syntax1.1"
" content62_0"
"(syntax-scopes the-struct_22)"
" shifted-multi-scopes63_0"
"(syntax-scope-propagations+tamper the-struct_22)"
"(syntax-mpi-shifts the-struct_22)"
"(syntax-srcloc the-struct_22)"
"(syntax-props the-struct_22)"
"(syntax-inspector the-struct_22)))"
"                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_22)))))"
"((s-e_2) syntax-e/no-taint)"
"((seen_13) #f))"
"((letrec-values(((loop_122)"
"(lambda(s_126)"
"(let-values(((s_127) s_126)"
"((f_30)"
"(lambda(tail?_30 v_87)"
"(if(syntax?$1 v_87)"
"(let-values()(d->s_2 v_87(loop_122(s-e_2 v_87))))"
"(let-values()(f_29 tail?_30 v_87)))))"
"((seen_14) seen_13))"
"((letrec-values(((loop_123)"
"(lambda(tail?_31 s_128 prev-depth_6)"
"(let-values(((depth_6)(add1 prev-depth_6)))"
"(if(if seen_14(> depth_6 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_31"
" s_128"
"(lambda(tail?_32 s_129)(f_30 tail?_32 s_129))"
" seen_14))"
"(if(null? s_128)"
"(let-values()(f_30 tail?_31 s_128))"
"(if(pair? s_128)"
"(let-values()"
"(f_30"
" tail?_31"
"(cons"
"(loop_123 #f(car s_128) depth_6)"
"(loop_123 #t(cdr s_128) depth_6))))"
"(if(let-values(((or-part_133)(symbol? s_128)))"
"(if or-part_133"
" or-part_133"
"(let-values(((or-part_134)(boolean? s_128)))"
"(if or-part_134"
" or-part_134"
"(number? s_128)))))"
"(let-values()(f_30 #f s_128))"
"(if(let-values(((or-part_135)(vector? s_128)))"
"(if or-part_135"
" or-part_135"
"(let-values(((or-part_136)(box? s_128)))"
"(if or-part_136"
" or-part_136"
"(let-values(((or-part_137)"
"(prefab-struct-key"
" s_128)))"
"(if or-part_137"
" or-part_137"
"(hash? s_128)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_31"
" s_128"
"(lambda(tail?_33 s_130)(f_30 tail?_33 s_130))"
" seen_14))"
"(let-values()(f_30 #f s_128)))))))))))"
" loop_123)"
" #f"
" s_127"
" 0)))))"
" loop_122)"
" s_124)))))))))"
"(define-values"
"(syntax-swap-scopes)"
"(lambda(s_131 src-scopes_0 dest-scopes_0)"
"(if(equal? src-scopes_0 dest-scopes_0)"
" s_131"
"(let-values(((src-smss_0 src-scs_0)"
"(set-partition"
"(let-values(((ht_57) src-scopes_0))"
"(begin"
"(check-in-immutable-hash-keys ht_57)"
"((letrec-values(((for-loop_60)"
"(lambda(table_65 i_79)"
"(if i_79"
"(let-values(((sc_16)(unsafe-immutable-hash-iterate-key ht_57 i_79)))"
"(let-values(((table_66)"
"(let-values(((table_67) table_65))"
"(let-values(((table_68)"
"(let-values()"
"(let-values(((key_24 val_14)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_16))"
" #t))))"
"(hash-set table_67 key_24 val_14)))))"
"(values table_68)))))"
"(if(not #f)"
"(for-loop_60"
" table_66"
"(unsafe-immutable-hash-iterate-next ht_57 i_79))"
" table_66)))"
" table_65))))"
" for-loop_60)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_57))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq)))"
"((dest-smss_0 dest-scs_0)"
"(set-partition"
"(let-values(((ht_58) dest-scopes_0))"
"(begin"
"(check-in-immutable-hash-keys ht_58)"
"((letrec-values(((for-loop_61)"
"(lambda(table_69 i_80)"
"(if i_80"
"(let-values(((sc_17)(unsafe-immutable-hash-iterate-key ht_58 i_80)))"
"(let-values(((table_70)"
"(let-values(((table_71) table_69))"
"(let-values(((table_72)"
"(let-values()"
"(let-values(((key_25 val_15)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_17))"
" #t))))"
"(hash-set table_71 key_25 val_15)))))"
"(values table_72)))))"
"(if(not #f)"
"(for-loop_61"
" table_70"
"(unsafe-immutable-hash-iterate-next ht_58 i_80))"
" table_70)))"
" table_69))))"
" for-loop_61)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_58))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq))))"
"(let-values(((scs64_0) #f))"
"(let-values(((prev-result_2) #f))"
"(let-values(((swap-scs_0)"
"(lambda(scs_14)"
"(if(eq? scs64_0 scs_14)"
"(let-values() prev-result_2)"
"(let-values()"
"(let-values(((r_26)"
"(let-values()"
"(if(subset? src-scs_0 scs_14)"
"(set-union(set-subtract scs_14 src-scs_0) dest-scs_0)"
" scs_14))))"
"(begin(set! scs64_0 scs_14)(set! prev-result_2 r_26) r_26)))))))"
"(let-values(((smss65_0) #f))"
"(let-values(((prev-result_3) #f))"
"(let-values(((swap-smss_0)"
"(lambda(smss_20)"
"(if(eq? smss65_0 smss_20)"
"(let-values() prev-result_3)"
"(let-values()"
"(let-values(((r_27)"
"(let-values()"
"(fallback-update-first"
" smss_20"
"(lambda(smss_21)"
"(if(subset? src-smss_0 smss_21)"
"(set-union(set-subtract smss_21 src-smss_0) dest-smss_0)"
" smss_21))))))"
"(begin(set! smss65_0 smss_20)(set! prev-result_3 r_27) r_27)))))))"
"(let-values(((s_132) s_131)"
"((f_31)(lambda(tail?_34 d_8) d_8))"
"((d->s_3)"
"(lambda(s_133 d_9)"
"(let-values(((the-struct_23) s_133))"
"(if(syntax?$1 the-struct_23)"
"(let-values(((content66_0) d_9)"
"((scopes67_0)(swap-scs_0(syntax-scopes s_133)))"
"((shifted-multi-scopes68_0)"
"(swap-smss_0(syntax-shifted-multi-scopes s_133))))"
"(syntax1.1"
" content66_0"
" scopes67_0"
" shifted-multi-scopes68_0"
"(syntax-scope-propagations+tamper the-struct_23)"
"(syntax-mpi-shifts the-struct_23)"
"(syntax-srcloc the-struct_23)"
"(syntax-props the-struct_23)"
"(syntax-inspector the-struct_23)))"
"                                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_23)))))"
"((s-e_3) syntax-e/no-taint)"
"((seen_15) #f))"
"((letrec-values(((loop_124)"
"(lambda(s_134)"
"(let-values(((s_135) s_134)"
"((f_32)"
"(lambda(tail?_35 v_88)"
"(if(syntax?$1 v_88)"
"(let-values()(d->s_3 v_88(loop_124(s-e_3 v_88))))"
"(let-values()(f_31 tail?_35 v_88)))))"
"((seen_16) seen_15))"
"((letrec-values(((loop_125)"
"(lambda(tail?_36 s_136 prev-depth_7)"
"(let-values(((depth_7)(add1 prev-depth_7)))"
"(if(if seen_16(> depth_7 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_36"
" s_136"
"(lambda(tail?_37 s_137)(f_32 tail?_37 s_137))"
" seen_16))"
"(if(null? s_136)"
"(let-values()(f_32 tail?_36 s_136))"
"(if(pair? s_136)"
"(let-values()"
"(f_32"
" tail?_36"
"(cons"
"(loop_125 #f(car s_136) depth_7)"
"(loop_125 #t(cdr s_136) depth_7))))"
"(if(let-values(((or-part_138)"
"(symbol? s_136)))"
"(if or-part_138"
" or-part_138"
"(let-values(((or-part_139)"
"(boolean? s_136)))"
"(if or-part_139"
" or-part_139"
"(number? s_136)))))"
"(let-values()(f_32 #f s_136))"
"(if(let-values(((or-part_140)"
"(vector? s_136)))"
"(if or-part_140"
" or-part_140"
"(let-values(((or-part_141)"
"(box? s_136)))"
"(if or-part_141"
" or-part_141"
"(let-values(((or-part_142)"
"(prefab-struct-key"
" s_136)))"
"(if or-part_142"
" or-part_142"
"(hash? s_136)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_36"
" s_136"
"(lambda(tail?_38 s_138)"
"(f_32 tail?_38 s_138))"
" seen_16))"
"(let-values()(f_32 #f s_136)))))))))))"
" loop_125)"
" #f"
" s_135"
" 0)))))"
" loop_124)"
" s_132))))))))))))"
"(define-values"
"(syntax-scope-set)"
"(lambda(s_139 phase_7)(scope-set-at-fallback s_139(fallback-first(syntax-shifted-multi-scopes s_139)) phase_7)))"
"(define-values"
"(scope-set-at-fallback)"
"(lambda(s_140 smss_22 phase_8)"
"(let-values(((ht_59) smss_22))"
"(begin"
"(check-in-immutable-hash-keys ht_59)"
"((letrec-values(((for-loop_62)"
"(lambda(scopes_9 i_81)"
"(if i_81"
"(let-values(((sms_9)(unsafe-immutable-hash-iterate-key ht_59 i_81)))"
"(let-values(((scopes_10)"
"(let-values(((scopes_11) scopes_9))"
"(if(let-values(((or-part_143)(label-phase? phase_8)))"
"(if or-part_143"
" or-part_143"
"(not"
"(shifted-to-label-phase?(shifted-multi-scope-phase sms_9)))))"
"(let-values(((scopes_12) scopes_11))"
"(let-values(((scopes_13)"
"(let-values()"
"(set-add"
" scopes_12"
"(multi-scope-to-scope-at-phase"
"(shifted-multi-scope-multi-scope sms_9)"
"(let-values(((ph_0)"
"(shifted-multi-scope-phase sms_9)))"
"(if(shifted-to-label-phase? ph_0)"
"(shifted-to-label-phase-from ph_0)"
"(phase- ph_0 phase_8))))))))"
"(values scopes_13)))"
" scopes_11))))"
"(if(not #f)"
"(for-loop_62 scopes_10(unsafe-immutable-hash-iterate-next ht_59 i_81))"
" scopes_10)))"
" scopes_9))))"
" for-loop_62)"
"(syntax-scopes s_140)"
"(unsafe-immutable-hash-iterate-first ht_59))))))"
"(define-values"
"(find-max-scope)"
"(lambda(scopes_14)"
"(begin"
"      (if (set-empty? scopes_14) (let-values () (error \"cannot bind in empty scope set\")) (void))"
"(let-values(((ht_60) scopes_14))"
"(begin"
"(check-in-immutable-hash-keys ht_60)"
"((letrec-values(((for-loop_63)"
"(lambda(max-sc_0 i_82)"
"(if i_82"
"(let-values(((sc_18)(unsafe-immutable-hash-iterate-key ht_60 i_82)))"
"(let-values(((max-sc_1)"
"(let-values(((max-sc_2) max-sc_0))"
"(let-values(((max-sc_3)"
"(let-values()"
"(if(scope>? sc_18 max-sc_2) sc_18 max-sc_2))))"
"(values max-sc_3)))))"
"(if(not #f)"
"(for-loop_63 max-sc_1(unsafe-immutable-hash-iterate-next ht_60 i_82))"
" max-sc_1)))"
" max-sc_0))))"
" for-loop_63)"
"(set-first scopes_14)"
"(unsafe-immutable-hash-iterate-first ht_60)))))))"
"(define-values"
"(add-binding-in-scopes!16.1)"
"(lambda(just-for-nominal?11_0 just-for-nominal?12_0 scopes13_0 sym14_0 binding15_0)"
"(let-values(((scopes_15) scopes13_0))"
"(let-values(((sym_12) sym14_0))"
"(let-values(((binding_4) binding15_0))"
"(let-values(((just-for-nominal?_1)(if just-for-nominal?12_0 just-for-nominal?11_0 #f)))"
"(let-values()"
"(let-values(((max-sc_4)(find-max-scope scopes_15)))"
"(let-values(((bt_7)"
"(binding-table-add"
"(scope-binding-table max-sc_4)"
" scopes_15"
" sym_12"
" binding_4"
" just-for-nominal?_1)))"
"(begin(set-scope-binding-table! max-sc_4 bt_7)(clear-resolve-cache! sym_12)))))))))))"
"(define-values"
"(add-bulk-binding-in-scopes!)"
"(lambda(scopes_16 bulk-binding_0)"
"(let-values(((max-sc_5)(find-max-scope scopes_16)))"
"(let-values(((bt_8)(binding-table-add-bulk(scope-binding-table max-sc_5) scopes_16 bulk-binding_0)))"
"(begin(set-scope-binding-table! max-sc_5 bt_8)(clear-resolve-cache!))))))"
"(define-values"
"(syntax-any-macro-scopes?)"
"(lambda(s_141)"
"(let-values(((ht_61)(syntax-scopes s_141)))"
"(begin"
"(check-in-immutable-hash-keys ht_61)"
"((letrec-values(((for-loop_64)"
"(lambda(result_49 i_83)"
"(if i_83"
"(let-values(((sc_19)(unsafe-immutable-hash-iterate-key ht_61 i_83)))"
"(let-values(((result_50)"
"(let-values()"
"(let-values(((result_51)"
"(let-values()"
"(let-values()(eq?(scope-kind sc_19) 'macro)))))"
"(values result_51)))))"
"(if(if(not((lambda x_74 result_50) sc_19))(not #f) #f)"
"(for-loop_64 result_50(unsafe-immutable-hash-iterate-next ht_61 i_83))"
" result_50)))"
" result_49))))"
" for-loop_64)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_61))))))"
"(define-values"
"(resolve29.1)"
"(lambda(ambiguous-value19_0"
" ambiguous-value23_0"
" exactly?20_0"
" exactly?24_0"
" extra-shifts22_0"
" extra-shifts26_0"
" get-scopes?21_0"
" get-scopes?25_0"
" s27_0"
" phase28_0)"
"(let-values(((s_142) s27_0))"
"(let-values(((phase_9) phase28_0))"
"(let-values(((ambiguous-value_0)(if ambiguous-value23_0 ambiguous-value19_0 #f)))"
"(let-values(((exactly?_0)(if exactly?24_0 exactly?20_0 #f)))"
"(let-values(((get-scopes?_0)(if get-scopes?25_0 get-scopes?21_0 #f)))"
"(let-values(((extra-shifts_2)(if extra-shifts26_0 extra-shifts22_0 null)))"
"(let-values()"
"(let-values(((sym_13)(syntax-content s_142)))"
"((letrec-values(((fallback-loop_0)"
"(lambda(smss_23)"
"(let-values(((c1_125)"
"(if(not exactly?_0)"
"(if(not get-scopes?_0)"
"(resolve-cache-get"
" sym_13"
" phase_9"
"(syntax-scopes s_142)"
"(fallback-first smss_23))"
" #f)"
" #f)))"
"(if c1_125"
"((lambda(b_24) b_24) c1_125)"
"(let-values()"
"(let-values(((scopes_17)"
"(scope-set-at-fallback"
" s_142"
"(fallback-first smss_23)"
" phase_9)))"
"(let-values(((best-scopes_0 best-binding_0)"
"(let-values(((ht_62) scopes_17))"
"(begin"
"(check-in-immutable-hash-keys ht_62)"
"((letrec-values(((for-loop_65)"
"(lambda(best-scopes_1"
" best-binding_1"
" i_84)"
"(if i_84"
"(let-values(((sc_20)"
"(unsafe-immutable-hash-iterate-key"
" ht_62"
" i_84)))"
"(let-values(((best-scopes_2"
" best-binding_2)"
"(let-values(((ht_63"
" bulk-bindings_2)"
"(let-values(((table_73)"
"(scope-binding-table"
" sc_20)))"
"(if(hash?"
" table_73)"
"(values"
"(hash-ref"
" table_73"
" sym_13"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_73)"
" sym_13"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_73)))))"
"((s_143)"
" s_142)"
"((extra-shifts_3)"
" extra-shifts_2))"
"(begin"
" #t"
"((letrec-values(((for-loop_66)"
"(lambda(best-scopes_3"
" best-binding_3"
" i_85)"
"(if(not"
"(null?"
" i_85))"
"(let-values(((b-scopes_0)"
"(if(pair?"
" i_85)"
"(let-values()"
"(bulk-binding-at-scopes"
"(car"
" i_85)))"
"(let-values()"
"(hash-iterate-key"
" ht_63"
" i_85))))"
"((binding_5)"
"(if(pair?"
" i_85)"
"(let-values()"
"(let-values(((bulk_3)"
"(bulk-binding-at-bulk"
"(car"
" i_85))))"
"(let-values(((b-info_0)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_3"
" s_143"
" extra-shifts_3)"
" sym_13"
" #f)))"
"(if b-info_0"
"((bulk-binding-create"
" bulk_3)"
" bulk_3"
" b-info_0"
" sym_13)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_63"
" i_85)))))"
"(let-values(((best-scopes_4"
" best-binding_4)"
"(let-values(((best-scopes_5)"
" best-scopes_3)"
"((best-binding_5)"
" best-binding_3))"
"(if(if b-scopes_0"
"(if binding_5"
"(subset?"
" b-scopes_0"
" scopes_17)"
" #f)"
" #f)"
"(let-values(((best-scopes_6)"
" best-scopes_5)"
"((best-binding_6)"
" best-binding_5))"
"(let-values(((best-scopes_7"
" best-binding_7)"
"(let-values()"
"(if(pair?"
" best-scopes_6)"
"(let-values()"
"(if(let-values(((lst_46)"
" best-scopes_6))"
"(begin"
"(check-list"
" lst_46)"
"((letrec-values(((for-loop_67)"
"(lambda(result_52"
" lst_47)"
"(if(pair?"
" lst_47)"
"(let-values(((amb-scopes_0)"
"(unsafe-car"
" lst_47))"
"((rest_19)"
"(unsafe-cdr"
" lst_47)))"
"(let-values(((result_53)"
"(let-values()"
"(let-values(((result_54)"
"(let-values()"
"(let-values()"
"(subset?"
" amb-scopes_0"
" b-scopes_0)))))"
"(values"
" result_54)))))"
"(if(if(not"
"((lambda x_75"
"(not"
" result_53))"
" amb-scopes_0))"
"(not"
" #f)"
" #f)"
"(for-loop_67"
" result_53"
" rest_19)"
" result_53)))"
" result_52))))"
" for-loop_67)"
" #t"
" lst_46)))"
"(let-values()"
"(values"
" b-scopes_0"
" binding_5))"
"(let-values()"
"(values"
"(cons"
" b-scopes_0"
" best-scopes_6)"
" #f))))"
"(if(not"
" best-scopes_6)"
"(let-values()"
"(values"
" b-scopes_0"
" binding_5))"
"(if(subset?"
" b-scopes_0"
" best-scopes_6)"
"(let-values()"
"(values"
" best-scopes_6"
" best-binding_6))"
"(if(subset?"
" best-scopes_6"
" b-scopes_0)"
"(let-values()"
"(values"
" b-scopes_0"
" binding_5))"
"(let-values()"
"(values"
"(list"
" best-scopes_6"
" b-scopes_0)"
" #f)))))))))"
"(values"
" best-scopes_7"
" best-binding_7)))"
"(values"
" best-scopes_5"
" best-binding_5)))))"
"(if(not"
" #f)"
"(for-loop_66"
" best-scopes_4"
" best-binding_4"
"(if(pair?"
" i_85)"
"(let-values()"
"(cdr"
" i_85))"
"(let-values()"
"(let-values(((or-part_144)"
"(hash-iterate-next"
" ht_63"
" i_85)))"
"(if or-part_144"
" or-part_144"
" bulk-bindings_2)))))"
"(values"
" best-scopes_4"
" best-binding_4))))"
"(values"
" best-scopes_3"
" best-binding_3)))))"
" for-loop_66)"
" best-scopes_1"
" best-binding_1"
"(let-values(((or-part_145)"
"(hash-iterate-first"
" ht_63)))"
"(if or-part_145"
" or-part_145"
" bulk-bindings_2)))))))"
"(if(not #f)"
"(for-loop_65"
" best-scopes_2"
" best-binding_2"
"(unsafe-immutable-hash-iterate-next"
" ht_62"
" i_84))"
"(values"
" best-scopes_2"
" best-binding_2))))"
"(values"
" best-scopes_1"
" best-binding_1)))))"
" for-loop_65)"
" #f"
" #f"
"(unsafe-immutable-hash-iterate-first ht_62))))))"
"(if(pair? best-scopes_0)"
"(let-values()"
"(if(fallback? smss_23)"
"(fallback-loop_0(fallback-rest smss_23))"
" ambiguous-value_0))"
"(if best-scopes_0"
"(let-values()"
"(begin"
"(resolve-cache-set!"
" sym_13"
" phase_9"
"(syntax-scopes s_142)"
"(fallback-first smss_23)"
" best-binding_0)"
"(if(let-values(((or-part_146)(not exactly?_0)))"
"(if or-part_146"
" or-part_146"
"(eqv?"
"(set-count scopes_17)"
"(set-count best-scopes_0))))"
"(if get-scopes?_0 best-scopes_0 best-binding_0)"
" #f)))"
"(let-values()"
"(if(fallback? smss_23)"
"(fallback-loop_0(fallback-rest smss_23))"
" #f))))))))))))"
" fallback-loop_0)"
"(syntax-shifted-multi-scopes s_142))))))))))))"
"(define-values"
"(bound-identifier=?$1)"
"(lambda(a_32 b_25 phase_10)"
"(if(eq?(syntax-e$1 a_32)(syntax-e$1 b_25))"
"(equal?(syntax-scope-set a_32 phase_10)(syntax-scope-set b_25 phase_10))"
" #f)))"
"(define-values"
"(syntax-property$1)"
"(case-lambda"
"((s_0 key_26)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_0)))"
"(values))))"
"(let-values(((v_32)(hash-ref(syntax-props s_0) key_26 #f)))(plain-property-value v_32))))"
"((s_1 key_27 val_16)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_1)))"
"(values))))"
"(let-values(((pval_0)(if(eq? key_27 'paren-shape)(preserved-property-value1.1 val_16) val_16)))"
"(let-values(((the-struct_24) s_1))"
"(if(syntax?$1 the-struct_24)"
"(let-values(((props1_0)(hash-set(syntax-props s_1) key_27 pval_0)))"
"(syntax1.1"
"(syntax-content the-struct_24)"
"(syntax-scopes the-struct_24)"
"(syntax-shifted-multi-scopes the-struct_24)"
"(syntax-scope-propagations+tamper the-struct_24)"
"(syntax-mpi-shifts the-struct_24)"
"(syntax-srcloc the-struct_24)"
" props1_0"
"(syntax-inspector the-struct_24)))"
"            (raise-argument-error 'struct-copy \"syntax?\" the-struct_24))))))"
"((s_144 key_28 val_17 preserved?_0)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_144)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_144)))"
"(values))))"
"(let-values((()"
"(begin"
"(if preserved?_0"
"(let-values()"
"(if(if(symbol? key_28)(symbol-interned? key_28) #f)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-property"
"                               \"key for a perserved property must be an interned symbol\""
"                               \"given key\""
" key_28"
"                               \"given value\""
" val_17))))"
"(void))"
"(values))))"
"(let-values(((pval_1)(if preserved?_0(preserved-property-value1.1 val_17) val_17)))"
"(let-values(((the-struct_25) s_144))"
"(if(syntax?$1 the-struct_25)"
"(let-values(((props2_0)(hash-set(syntax-props s_144) key_28 pval_1)))"
"(syntax1.1"
"(syntax-content the-struct_25)"
"(syntax-scopes the-struct_25)"
"(syntax-shifted-multi-scopes the-struct_25)"
"(syntax-scope-propagations+tamper the-struct_25)"
"(syntax-mpi-shifts the-struct_25)"
"(syntax-srcloc the-struct_25)"
" props2_0"
"(syntax-inspector the-struct_25)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_25)))))))))"
"(define-values"
"(1/syntax-property-preserved?)"
"(lambda(s_145 key_29)"
"(begin"
"      (if (syntax?$1 s_145) (void) (let-values () (raise-argument-error 'syntax-property-preserved \"syntax?\" s_145)))"
"(if(if(symbol? key_29)(symbol-interned? key_29) #f)"
"(void)"
"        (let-values () (raise-argument-error 'syntax-property \"(and/c symbol? symbol-interned?)\" key_29)))"
"(preserved-property-value?(hash-ref(syntax-props s_145) key_29 #f)))))"
"(define-values"
"(1/syntax-property-symbol-keys)"
"(lambda(s_4)"
"(begin"
"      (if (syntax?$1 s_4) (void) (let-values () (raise-argument-error 'syntax-property-symbol-keys \"syntax\" s_4)))"
"(let-values(((ht_64)(syntax-props s_4)))"
"(begin"
"(check-in-immutable-hash ht_64)"
"((letrec-values(((for-loop_68)"
"(lambda(i_86)"
"(if i_86"
"(let-values(((k_18 v_2)(unsafe-immutable-hash-iterate-key+value ht_64 i_86)))"
"(let-values(((post-guard-var_7)(lambda() #t)))"
"(let-values()"
"(if(if(symbol? k_18)(symbol-interned? k_18) #f)"
"(let-values()"
"(let-values(((elem_7)(let-values()(let-values() k_18))))"
"(let-values(((result_55)"
"(if(post-guard-var_7)"
"(for-loop_68"
"(unsafe-immutable-hash-iterate-next ht_64 i_86))"
" null)))"
"(cons elem_7 result_55))))"
"(if(post-guard-var_7)"
"(for-loop_68(unsafe-immutable-hash-iterate-next ht_64 i_86))"
" null)))))"
" null))))"
" for-loop_68)"
"(unsafe-immutable-hash-iterate-first ht_64)))))))"
"(define-values"
"(syntax-property-remove)"
"(lambda(s_146 key_30)"
"(if(hash-ref(syntax-props s_146) key_30 #f)"
"(let-values(((the-struct_26) s_146))"
"(if(syntax?$1 the-struct_26)"
"(let-values(((props3_0)(hash-remove(syntax-props s_146) key_30)))"
"(syntax1.1"
"(syntax-content the-struct_26)"
"(syntax-scopes the-struct_26)"
"(syntax-shifted-multi-scopes the-struct_26)"
"(syntax-scope-propagations+tamper the-struct_26)"
"(syntax-mpi-shifts the-struct_26)"
"(syntax-srcloc the-struct_26)"
" props3_0"
"(syntax-inspector the-struct_26)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_26)))"
" s_146)))"
"(define-values"
"(struct:full-binding full-binding1.1 full-binding? full-binding-frame-id full-binding-free=id)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-binding"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:binding-reach-scopes(lambda(b_26)(binding-free=id b_26))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'full-binding)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'frame-id)"
"(make-struct-field-accessor -ref_0 1 'free=id))))"
"(define-values(binding-frame-id)(lambda(b_27)(if(full-binding? b_27)(full-binding-frame-id b_27) #f)))"
"(define-values(binding-free=id)(lambda(b_28)(if(full-binding? b_28)(full-binding-free=id b_28) #f)))"
"(define-values"
"(make-module-binding22.1)"
"(lambda(extra-inspector8_0"
" extra-inspector17_0"
" extra-nominal-bindings9_0"
" extra-nominal-bindings18_0"
" frame-id6_0"
" frame-id15_0"
" free=id7_0"
" free=id16_0"
" nominal-module2_0"
" nominal-module11_0"
" nominal-phase3_0"
" nominal-phase12_0"
" nominal-require-phase5_0"
" nominal-require-phase14_0"
" nominal-sym4_0"
" nominal-sym13_0"
" wrt1_0"
" wrt10_0"
" module19_0"
" phase20_0"
" sym21_0)"
"(let-values(((module_0) module19_0))"
"(let-values(((phase_11) phase20_0))"
"(let-values(((sym_14) sym21_0))"
"(let-values()"
"(let-values(((nominal-module_0)(if nominal-module11_0 nominal-module2_0 module_0)))"
"(let-values(((nominal-phase_0)(if nominal-phase12_0 nominal-phase3_0 phase_11)))"
"(let-values(((nominal-sym_0)(if nominal-sym13_0 nominal-sym4_0 sym_14)))"
"(let-values(((nominal-require-phase_0)(if nominal-require-phase14_0 nominal-require-phase5_0 0)))"
"(let-values(((frame-id_0)(if frame-id15_0 frame-id6_0 #f)))"
"(let-values(((free=id_0)(if free=id16_0 free=id7_0 #f)))"
"(let-values(((extra-inspector_0)(if extra-inspector17_0 extra-inspector8_0 #f)))"
"(let-values(((extra-nominal-bindings_0)"
"(if extra-nominal-bindings18_0 extra-nominal-bindings9_0 null)))"
"(let-values()"
"(if(let-values(((or-part_15) frame-id_0))"
"(if or-part_15"
" or-part_15"
"(let-values(((or-part_89) free=id_0))"
"(if or-part_89"
" or-part_89"
"(let-values(((or-part_90) extra-inspector_0))"
"(if or-part_90"
" or-part_90"
"(not"
"(if(eqv? nominal-phase_0 phase_11)"
"(if(eq? nominal-sym_0 sym_14)"
"(if(eqv? nominal-require-phase_0 0)"
"(null? extra-nominal-bindings_0)"
" #f)"
" #f)"
" #f))))))))"
"(let-values()"
"(full-module-binding51.1"
" frame-id_0"
" free=id_0"
" module_0"
" phase_11"
" sym_14"
" nominal-module_0"
" nominal-phase_0"
" nominal-sym_0"
" nominal-require-phase_0"
" extra-inspector_0"
" extra-nominal-bindings_0))"
"(let-values()"
"(simple-module-binding52.1 module_0 phase_11 sym_14 nominal-module_0))))))))))))))))))"
"(define-values"
"(module-binding-update48.1)"
"(lambda(extra-inspector34_0"
" extra-inspector45_0"
" extra-nominal-bindings35_0"
" extra-nominal-bindings46_0"
" frame-id32_0"
" frame-id43_0"
" free=id33_0"
" free=id44_0"
" module25_0"
" module36_0"
" nominal-module28_0"
" nominal-module39_0"
" nominal-phase29_0"
" nominal-phase40_0"
" nominal-require-phase31_0"
" nominal-require-phase42_0"
" nominal-sym30_0"
" nominal-sym41_0"
" phase26_0"
" phase37_0"
" sym27_0"
" sym38_0"
" b47_0)"
"(let-values(((b_29) b47_0))"
"(let-values(((module_1)(if module36_0 module25_0(module-binding-module b_29))))"
"(let-values(((phase_12)(if phase37_0 phase26_0(module-binding-phase b_29))))"
"(let-values(((sym_15)(if sym38_0 sym27_0(module-binding-sym b_29))))"
"(let-values(((nominal-module_1)"
"(if nominal-module39_0 nominal-module28_0(module-binding-nominal-module b_29))))"
"(let-values(((nominal-phase_1)"
"(if nominal-phase40_0 nominal-phase29_0(module-binding-nominal-phase b_29))))"
"(let-values(((nominal-sym_1)(if nominal-sym41_0 nominal-sym30_0(module-binding-nominal-sym b_29))))"
"(let-values(((nominal-require-phase_1)"
"(if nominal-require-phase42_0"
" nominal-require-phase31_0"
"(module-binding-nominal-require-phase b_29))))"
"(let-values(((frame-id_1)(if frame-id43_0 frame-id32_0(binding-frame-id b_29))))"
"(let-values(((free=id_1)(if free=id44_0 free=id33_0(binding-free=id b_29))))"
"(let-values(((extra-inspector_1)"
"(if extra-inspector45_0"
" extra-inspector34_0"
"(module-binding-extra-inspector b_29))))"
"(let-values(((extra-nominal-bindings_1)"
"(if extra-nominal-bindings46_0"
" extra-nominal-bindings35_0"
"(module-binding-extra-nominal-bindings b_29))))"
"(let-values()"
"(let-values(((nominal-module56_0) nominal-module_1)"
"((nominal-phase57_0) nominal-phase_1)"
"((nominal-sym58_0) nominal-sym_1)"
"((nominal-require-phase59_0) nominal-require-phase_1)"
"((frame-id60_0) frame-id_1)"
"((free=id61_0) free=id_1)"
"((extra-inspector62_0) extra-inspector_1)"
"((extra-nominal-bindings63_0) extra-nominal-bindings_1))"
"(make-module-binding22.1"
" extra-inspector62_0"
" #t"
" extra-nominal-bindings63_0"
" #t"
" frame-id60_0"
" #t"
" free=id61_0"
" #t"
" nominal-module56_0"
" #t"
" nominal-phase57_0"
" #t"
" nominal-require-phase59_0"
" #t"
" nominal-sym58_0"
" #t"
" #f"
" #f"
" module_1"
" phase_12"
" sym_15)))))))))))))))))"
"(define-values"
"(module-binding?)"
"(lambda(b_30)"
"(let-values(((or-part_99)(simple-module-binding? b_30)))(if or-part_99 or-part_99(full-module-binding? b_30)))))"
"(define-values"
"(struct:full-module-binding"
" full-module-binding51.1"
" full-module-binding?"
" full-module-binding-module"
" full-module-binding-phase"
" full-module-binding-sym"
" full-module-binding-nominal-module"
" full-module-binding-nominal-phase"
" full-module-binding-nominal-sym"
" full-module-binding-nominal-require-phase"
" full-module-binding-extra-inspector"
" full-module-binding-extra-nominal-bindings)"
"(let-values(((struct:_22 make-_22 ?_22 -ref_22 -set!_22)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-module-binding"
" struct:full-binding"
" 9"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_31 ser-push!_9 state_18)"
"(let-values(((simplified-b_0)"
"(if(full-binding-frame-id b_31)"
"(let-values(((temp66_0) #f))"
"(module-binding-update48.1"
" #f"
" #f"
" #f"
" #f"
" temp66_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b_31))"
" b_31)))"
"(if(full-module-binding? simplified-b_0)"
"(let-values()"
"(begin"
"(ser-push!_9 'tag '#:module-binding)"
"(ser-push!_9(full-module-binding-module b_31))"
"(ser-push!_9(full-module-binding-sym b_31))"
"(ser-push!_9(full-module-binding-phase b_31))"
"(ser-push!_9(full-module-binding-nominal-module b_31))"
"(ser-push!_9(full-module-binding-nominal-phase b_31))"
"(ser-push!_9(full-module-binding-nominal-sym b_31))"
"(ser-push!_9(full-module-binding-nominal-require-phase b_31))"
"(ser-push!_9(full-binding-free=id b_31))"
"(if(full-module-binding-extra-inspector b_31)"
"(ser-push!_9 'tag '#:inspector)"
"(ser-push!_9 #f))"
"(ser-push!_9(full-module-binding-extra-nominal-bindings b_31))))"
"(let-values()(ser-push!_9 simplified-b_0)))))))"
" #f"
" #f"
" '(0 1 2 3 4 5 6 7 8)"
" #f"
" 'full-module-binding)))))"
"(values"
" struct:_22"
" make-_22"
" ?_22"
"(make-struct-field-accessor -ref_22 0 'module)"
"(make-struct-field-accessor -ref_22 1 'phase)"
"(make-struct-field-accessor -ref_22 2 'sym)"
"(make-struct-field-accessor -ref_22 3 'nominal-module)"
"(make-struct-field-accessor -ref_22 4 'nominal-phase)"
"(make-struct-field-accessor -ref_22 5 'nominal-sym)"
"(make-struct-field-accessor -ref_22 6 'nominal-require-phase)"
"(make-struct-field-accessor -ref_22 7 'extra-inspector)"
"(make-struct-field-accessor -ref_22 8 'extra-nominal-bindings))))"
"(define-values"
"(struct:simple-module-binding"
" simple-module-binding52.1"
" simple-module-binding?"
" simple-module-binding-module"
" simple-module-binding-phase"
" simple-module-binding-sym"
" simple-module-binding-nominal-module)"
"(let-values(((struct:_24 make-_24 ?_24 -ref_24 -set!_24)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'simple-module-binding"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_32 ser-push!_10 state_19)"
"(begin"
"(ser-push!_10 'tag '#:simple-module-binding)"
"(ser-push!_10(simple-module-binding-module b_32))"
"(ser-push!_10(simple-module-binding-sym b_32))"
"(ser-push!_10(simple-module-binding-phase b_32))"
"(ser-push!_10(simple-module-binding-nominal-module b_32))))))"
" #f"
" #f"
" '(0 1 2 3)"
" #f"
" 'simple-module-binding)))))"
"(values"
" struct:_24"
" make-_24"
" ?_24"
"(make-struct-field-accessor -ref_24 0 'module)"
"(make-struct-field-accessor -ref_24 1 'phase)"
"(make-struct-field-accessor -ref_24 2 'sym)"
"(make-struct-field-accessor -ref_24 3 'nominal-module))))"
"(define-values"
"(deserialize-full-module-binding)"
"(lambda(module_2"
" sym_16"
" phase_13"
" nominal-module_2"
" nominal-phase_2"
" nominal-sym_2"
" nominal-require-phase_2"
" free=id_2"
" extra-inspector_2"
" extra-nominal-bindings_2)"
"(let-values(((nominal-module71_0) nominal-module_2)"
"((nominal-phase72_0) nominal-phase_2)"
"((nominal-sym73_0) nominal-sym_2)"
"((nominal-require-phase74_0) nominal-require-phase_2)"
"((free=id75_0) free=id_2)"
"((extra-inspector76_0) extra-inspector_2)"
"((extra-nominal-bindings77_0) extra-nominal-bindings_2))"
"(make-module-binding22.1"
" extra-inspector76_0"
" #t"
" extra-nominal-bindings77_0"
" #t"
" #f"
" #f"
" free=id75_0"
" #t"
" nominal-module71_0"
" #t"
" nominal-phase72_0"
" #t"
" nominal-require-phase74_0"
" #t"
" nominal-sym73_0"
" #t"
" #f"
" #f"
" module_2"
" phase_13"
" sym_16))))"
"(define-values"
"(deserialize-simple-module-binding)"
"(lambda(module_3 sym_17 phase_14 nominal-module_3)"
"(simple-module-binding52.1 module_3 phase_14 sym_17 nominal-module_3)))"
"(define-values"
"(module-binding-module)"
"(lambda(b_33)"
"(if(simple-module-binding? b_33)(simple-module-binding-module b_33)(full-module-binding-module b_33))))"
"(define-values"
"(module-binding-phase)"
"(lambda(b_34)"
"(if(simple-module-binding? b_34)(simple-module-binding-phase b_34)(full-module-binding-phase b_34))))"
"(define-values"
"(module-binding-sym)"
"(lambda(b_35)(if(simple-module-binding? b_35)(simple-module-binding-sym b_35)(full-module-binding-sym b_35))))"
"(define-values"
"(module-binding-nominal-module)"
"(lambda(b_36)"
"(if(simple-module-binding? b_36)"
"(simple-module-binding-nominal-module b_36)"
"(full-module-binding-nominal-module b_36))))"
"(define-values"
"(module-binding-nominal-phase)"
"(lambda(b_37)"
"(if(simple-module-binding? b_37)(simple-module-binding-phase b_37)(full-module-binding-nominal-phase b_37))))"
"(define-values"
"(module-binding-nominal-sym)"
"(lambda(b_38)"
"(if(simple-module-binding? b_38)(simple-module-binding-sym b_38)(full-module-binding-nominal-sym b_38))))"
"(define-values"
"(module-binding-nominal-require-phase)"
"(lambda(b_39)(if(simple-module-binding? b_39) 0(full-module-binding-nominal-require-phase b_39))))"
"(define-values"
"(module-binding-extra-inspector)"
"(lambda(b_40)(if(simple-module-binding? b_40) #f(full-module-binding-extra-inspector b_40))))"
"(define-values"
"(module-binding-extra-nominal-bindings)"
"(lambda(b_41)(if(simple-module-binding? b_41) null(full-module-binding-extra-nominal-bindings b_41))))"
"(define-values"
"(local-binding?)"
"(lambda(b_42)(let-values(((or-part_0)(full-local-binding? b_42)))(if or-part_0 or-part_0(symbol? b_42)))))"
"(define-values"
"(struct:full-local-binding full-local-binding1.1 full-local-binding? full-local-binding-key)"
"(let-values(((struct:_25 make-_25 ?_25 -ref_25 -set!_25)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-local-binding"
" struct:full-binding"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_43 ser-push!_11 state_20)"
"(begin"
"(ser-push!_11 'tag '#:local-binding)"
"(ser-push!_11(full-local-binding-key b_43))"
"(ser-push!_11(full-binding-free=id b_43))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'full-local-binding)))))"
"(values struct:_25 make-_25 ?_25(make-struct-field-accessor -ref_25 0 'key))))"
"(define-values"
"(deserialize-full-local-binding)"
"(lambda(key_30 free=id_3)(full-local-binding1.1 #f free=id_3 key_30)))"
"(define-values"
"(make-local-binding7.1)"
"(lambda(frame-id2_0 frame-id4_0 free=id3_0 free=id5_0 key6_0)"
"(let-values(((key_31) key6_0))"
"(let-values(((frame-id_2)(if frame-id4_0 frame-id2_0 #f)))"
"(let-values(((free=id_4)(if free=id5_0 free=id3_0 #f)))"
"(let-values()"
"(if(if(not frame-id_2)(not free=id_4) #f)"
"(let-values() key_31)"
"(let-values()(full-local-binding1.1 frame-id_2 free=id_4 key_31)))))))))"
"(define-values"
"(local-binding-update17.1)"
"(lambda(frame-id11_0 frame-id14_0 free=id12_0 free=id15_0 key10_0 key13_0 b16_0)"
"(let-values(((b_44) b16_0))"
"(let-values(((key_32)(if key13_0 key10_0(local-binding-key b_44))))"
"(let-values(((frame-id_3)(if frame-id14_0 frame-id11_0(binding-frame-id b_44))))"
"(let-values(((free=id_5)(if free=id15_0 free=id12_0(binding-free=id b_44))))"
"(let-values()"
"(let-values(((frame-id22_0) frame-id_3)((free=id23_0) free=id_5))"
"(make-local-binding7.1 frame-id22_0 #t free=id23_0 #t key_32)))))))))"
"(define-values(local-binding-key)(lambda(b_45)(if(full-local-binding? b_45)(full-local-binding-key b_45) b_45)))"
"(define-values"
"(1/prop:rename-transformer 1/rename-transformer? rename-transformer-value)"
"(make-struct-type-property"
" 'rename-transformer"
"(lambda(v_31 info_1)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_9)(exact-nonnegative-integer? v_31)))"
"(if or-part_9"
" or-part_9"
"(let-values(((or-part_2)(identifier? v_31)))"
"(if or-part_2 or-part_2(if(procedure? v_31)(procedure-arity-includes? v_31 1) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:rename-transformer"
"(string-append"
"                           \"(or/c exact-nonnegative-integer?\\n\""
"                           \"      identifier?\\n\""
"                           \"      (procedure-arity-includes? proc 1))\")"
" v_31)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_31)"
"(let-values()"
"(begin"
"(if(<= v_31(list-ref info_1 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_31"
"                                  \"initialized-field count\""
"(list-ref info_1 1))))"
"(if(member v_31(list-ref info_1 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_31)))))"
"(void))"
"(values))))"
"(let-values(((ref_0)(list-ref info_1 3)))"
"(if(identifier? v_31)"
"(let-values()(lambda(t_34) v_31))"
"(if(integer? v_31)"
"(let-values()"
"(lambda(t_35)"
"(let-values(((val_18)(ref_0 t_35 v_31)))"
"(if(identifier? val_18) val_18(datum->syntax$1 #f '?)))))"
"(let-values()"
"(lambda(t_14)"
"(let-values(((id_0)(v_31 t_14)))"
"(begin"
"(if(identifier? id_0)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'prop:rename-transformer"
"                            \"contract violation for given value; expected an identifier\""
"                            \"given\""
" id_0)))"
" id_0))))))))))))"
"(define-values"
"(1/make-rename-transformer)"
"(let-values()"
"(let-values(((struct:rename-transformer_0 rename-transformer1_0 rename-transformer?_0 rename-transformer-id_0)"
"(let-values(((struct:_26 make-_26 ?_26 -ref_26 -set!_26)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'rename-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:rename-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'rename-transformer)))))"
"(values struct:_26 make-_26 ?_26(make-struct-field-accessor -ref_26 0 'id)))))"
"(lambda(id_1)"
"(begin"
"(if(identifier? id_1)"
"(void)"
"            (let-values () (raise-argument-error 'make-rename-transformer \"identifier?\" id_1)))"
"(rename-transformer1_0 id_1))))))"
"(define-values(1/rename-transformer-target)(lambda(t_36)((rename-transformer-value t_36) t_36)))"
"(define-values"
"(free-identifier=?$1)"
"(lambda(a_33 b_46 a-phase_0 b-phase_0)"
"(let-values(((ab_0)"
"(let-values(((temp49_0) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f temp49_0 #t a_33 a-phase_0))))"
"(let-values(((bb_0)"
"(let-values(((temp52_0) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f temp52_0 #t b_46 b-phase_0))))"
"(if(let-values(((or-part_25)(symbol? ab_0)))(if or-part_25 or-part_25(symbol? bb_0)))"
"(let-values()(eq? ab_0 bb_0))"
"(let-values()(same-binding? ab_0 bb_0)))))))"
"(define-values"
"(same-binding?)"
"(lambda(ab_1 bb_1)"
"(if(module-binding? ab_1)"
"(let-values()"
"(if(module-binding? bb_1)"
"(if(eq?(module-binding-sym ab_1)(module-binding-sym bb_1))"
"(if(eqv?(module-binding-phase ab_1)(module-binding-phase bb_1))"
"(eq?"
"(1/module-path-index-resolve(module-binding-module ab_1))"
"(1/module-path-index-resolve(module-binding-module bb_1)))"
" #f)"
" #f)"
" #f))"
"(if(local-binding? ab_1)"
"(let-values()(if(local-binding? bb_1)(eq?(local-binding-key ab_1)(local-binding-key bb_1)) #f))"
"        (let-values () (error \"bad binding\" ab_1))))))"
"(define-values"
"(same-binding-nominals?)"
"(lambda(ab_2 bb_2)"
"(if(eq?"
"(1/module-path-index-resolve(module-binding-nominal-module ab_2))"
"(1/module-path-index-resolve(module-binding-nominal-module bb_2)))"
"(if(eqv?(module-binding-nominal-require-phase ab_2)(module-binding-nominal-require-phase bb_2))"
"(eqv?(module-binding-nominal-sym ab_2)(module-binding-nominal-sym bb_2))"
" #f)"
" #f)))"
"(define-values"
"(identifier-binding-symbol$1)"
"(lambda(id_2 phase_15)"
"(let-values(((b_47)"
"(let-values(((temp55_0) #t))(resolve+shift30.1 #f #f #f #f #f #f #f #f temp55_0 #t id_2 phase_15))))"
"(if(symbol? b_47)"
"(let-values() b_47)"
"(if(module-binding? b_47)"
"(let-values()(module-binding-sym b_47))"
"(if(local-binding? b_47)(let-values()(local-binding-key b_47))(let-values()(syntax-e$1 id_2))))))))"
"(define-values"
"(identifier-binding$1)"
"(let-values(((identifier-binding5_0)"
"(lambda(id3_0 phase4_0 top-level-symbol?1_0 top-level-symbol?2_0)"
"(let-values(((id_3) id3_0))"
"(let-values(((phase_16) phase4_0))"
"(let-values(((top-level-symbol?_0)(if top-level-symbol?2_0 top-level-symbol?1_0 #f)))"
"(let-values()"
"(let-values(((b_43)"
"(let-values(((id56_0) id_3)((phase57_0) phase_16))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f #f #f id56_0 phase57_0))))"
"(if(module-binding? b_43)"
"(let-values()"
"(if(top-level-module-path-index?(module-binding-module b_43))"
"(if top-level-symbol?_0(list(module-binding-nominal-sym b_43)) #f)"
"(list"
"(module-binding-module b_43)"
"(module-binding-sym b_43)"
"(module-binding-nominal-module b_43)"
"(module-binding-nominal-sym b_43)"
"(module-binding-phase b_43)"
"(module-binding-nominal-require-phase b_43)"
"(module-binding-nominal-phase b_43))))"
"(if(local-binding? b_43)(let-values() 'lexical)(let-values() #f)))))))))))"
"(case-lambda"
"((id_4 phase_17)(identifier-binding5_0 id_4 phase_17 #f #f))"
"((id_5 phase_18 top-level-symbol?1_1)(identifier-binding5_0 id_5 phase_18 top-level-symbol?1_1 #t)))))"
"(define-values"
"(maybe-install-free=id!)"
"(lambda(val_19 id_6 phase_19)"
"(if(1/rename-transformer? val_19)"
"(let-values()"
"(let-values(((free=id_6)(1/rename-transformer-target val_19)))"
"(if(syntax-property$1 free=id_6 'not-free-identifier=?)"
"(void)"
"(let-values()"
"(let-values(((b_48)"
"(let-values(((temp63_0) #t)((temp64_0) #t))"
"(resolve+shift30.1 #f #f temp63_0 #t #f #f temp64_0 #t #f #f id_6 phase_19))))"
"(let-values(((temp58_0)(syntax-scope-set id_6 phase_19))"
"((temp59_0)(syntax-e$1 id_6))"
"((temp60_0)(binding-set-free=id b_48 free=id_6)))"
"(add-binding-in-scopes!16.1 #f #f temp58_0 temp59_0 temp60_0)))))))"
"(void))))"
"(define-values"
"(binding-set-free=id)"
"(lambda(b_49 free=id_7)"
"(if(module-binding? b_49)"
"(let-values()"
"(let-values(((free=id66_0) free=id_7))"
"(module-binding-update48.1 #f #f #f #f #f #f free=id66_0 #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f b_49)))"
"(if(local-binding? b_49)"
"(let-values()"
"(let-values(((free=id68_0) free=id_7))(local-binding-update17.1 #f #f free=id68_0 #t #f #f b_49)))"
"        (let-values () (error \"bad binding for free=id:\" b_49))))))"
"(define-values"
"(struct:non-source-shift non-source-shift7.1 non-source-shift? non-source-shift-from non-source-shift-to)"
"(let-values(((struct:_27 make-_27 ?_27 -ref_27 -set!_27)"
"(let-values()"
"(let-values()"
"(make-struct-type 'non-source-shift #f 2 0 #f null 'prefab #f '(0 1) #f 'non-source-shift)))))"
"(values"
" struct:_27"
" make-_27"
" ?_27"
"(make-struct-field-accessor -ref_27 0 'from)"
"(make-struct-field-accessor -ref_27 1 'to))))"
"(define-values(shift-from)(lambda(s_147)(if(pair? s_147)(car s_147)(non-source-shift-from s_147))))"
"(define-values(shift-to)(lambda(s_13)(if(pair? s_13)(cdr s_13)(non-source-shift-to s_13))))"
"(define-values"
"(syntax-module-path-index-shift15.1)"
"(lambda(non-source?8_0 non-source?9_0 s12_0 from-mpi13_0 to-mpi14_0 inspector10_0 inspector11_0)"
"(let-values(((s_148) s12_0))"
"(let-values(((from-mpi_1) from-mpi13_0))"
"(let-values(((to-mpi_1) to-mpi14_0))"
"(let-values(((inspector_3)(if inspector11_0 inspector10_0 #f)))"
"(let-values(((non-source?_0)(if non-source?9_0 non-source?8_0 #f)))"
"(let-values()"
"(if(eq? from-mpi_1 to-mpi_1)"
"(let-values()(if inspector_3(syntax-set-inspector s_148 inspector_3) s_148))"
"(let-values()"
"(let-values(((shift_0)"
"(if non-source?_0"
"(non-source-shift7.1 from-mpi_1 to-mpi_1)"
"(cons from-mpi_1 to-mpi_1))))"
"(let-values(((the-struct_27) s_148))"
"(if(syntax?$1 the-struct_27)"
"(let-values(((mpi-shifts70_0)(cons shift_0(syntax-mpi-shifts s_148)))"
"((inspector71_0)"
"(let-values(((or-part_79)(syntax-inspector s_148)))"
"(if or-part_79 or-part_79 inspector_3)))"
"((scope-propagations+tamper72_0)"
"(if(datum-has-elements?(syntax-content s_148))"
"(propagation-mpi-shift"
"(syntax-scope-propagations+tamper s_148)"
"(lambda(s_22)(cons shift_0 s_22))"
" inspector_3"
"(syntax-scopes s_148)"
"(syntax-shifted-multi-scopes s_148)"
"(syntax-mpi-shifts s_148))"
"(syntax-scope-propagations+tamper s_148))))"
"(syntax1.1"
"(syntax-content the-struct_27)"
"(syntax-scopes the-struct_27)"
"(syntax-shifted-multi-scopes the-struct_27)"
" scope-propagations+tamper72_0"
" mpi-shifts70_0"
"(syntax-srcloc the-struct_27)"
"(syntax-props the-struct_27)"
" inspector71_0))"
"                          (raise-argument-error 'struct-copy \"syntax?\" the-struct_27))))))))))))))"
"(define-values"
"(resolve+shift30.1)"
"(lambda(ambiguous-value18_0"
" ambiguous-value23_1"
" exactly?19_0"
" exactly?24_1"
" extra-shifts22_1"
" extra-shifts27_0"
" immediate?20_0"
" immediate?25_0"
" unbound-sym?21_0"
" unbound-sym?26_0"
" s28_0"
" phase29_0)"
"(let-values(((s_149) s28_0))"
"(let-values(((phase_20) phase29_0))"
"(let-values(((ambiguous-value_1)(if ambiguous-value23_1 ambiguous-value18_0 #f)))"
"(let-values(((exactly?_1)(if exactly?24_1 exactly?19_0 #f)))"
"(let-values(((immediate?_0)(if immediate?25_0 immediate?20_0 exactly?_1)))"
"(let-values(((unbound-sym?_0)(if unbound-sym?26_0 unbound-sym?21_0 #f)))"
"(let-values(((extra-shifts_4)(if extra-shifts27_0 extra-shifts22_1 null)))"
"(let-values()"
"(let-values(((immediate-b_0)"
"(let-values(((ambiguous-value75_0) ambiguous-value_1)"
"((exactly?76_0) exactly?_1)"
"((extra-shifts77_0) extra-shifts_4))"
"(resolve29.1"
" ambiguous-value75_0"
" #t"
" exactly?76_0"
" #t"
" extra-shifts77_0"
" #t"
" #f"
" #f"
" s_149"
" phase_20))))"
"(let-values(((b_50)"
"(if(if immediate-b_0(if(not immediate?_0)(binding-free=id immediate-b_0) #f) #f)"
"(let-values(((temp78_0)(binding-free=id immediate-b_0))"
"((phase79_0) phase_20)"
"((temp80_0)(append extra-shifts_4(syntax-mpi-shifts s_149)))"
"((ambiguous-value81_0) ambiguous-value_1)"
"((exactly?82_0) exactly?_1)"
"((unbound-sym?83_0) unbound-sym?_0))"
"(resolve+shift30.1"
" ambiguous-value81_0"
" #t"
" exactly?82_0"
" #t"
" temp80_0"
" #t"
" #f"
" #f"
" unbound-sym?83_0"
" #t"
" temp78_0"
" phase79_0))"
" immediate-b_0)))"
"(if(module-binding? b_50)"
"(let-values()"
"(let-values(((mpi-shifts_2)(syntax-mpi-shifts s_149)))"
"(if(null? mpi-shifts_2)"
"(let-values() b_50)"
"(let-values()"
"(let-values(((mod_0)(module-binding-module b_50)))"
"(let-values(((shifted-mod_0)(apply-syntax-shifts mod_0 mpi-shifts_2)))"
"(let-values(((nominal-mod_0)(module-binding-nominal-module b_50)))"
"(let-values(((shifted-nominal-mod_0)"
"(if(eq? mod_0 nominal-mod_0)"
" shifted-mod_0"
"(apply-syntax-shifts nominal-mod_0 mpi-shifts_2))))"
"(if(if(eq? mod_0 shifted-mod_0)"
"(if(eq? nominal-mod_0 shifted-nominal-mod_0)"
"(if(not(binding-free=id b_50))"
"(null?(module-binding-extra-nominal-bindings b_50))"
" #f)"
" #f)"
" #f)"
" b_50"
"(let-values(((shifted-mod85_0) shifted-mod_0)"
"((shifted-nominal-mod86_0) shifted-nominal-mod_0)"
"((temp87_0)"
"(if(binding-free=id b_50)"
"(let-values(((temp89_0)(binding-free=id b_50))"
"((s90_0) s_149))"
"(syntax-transfer-shifts39.1 #f #f temp89_0 s90_0 #f #f))"
" #f))"
"((temp88_0)"
"(let-values(((lst_48)"
"(module-binding-extra-nominal-bindings b_50)))"
"(begin"
"(check-list lst_48)"
"((letrec-values(((for-loop_69)"
"(lambda(lst_49)"
"(if(pair? lst_49)"
"(let-values(((b_51)"
"(unsafe-car lst_49))"
"((rest_20)"
"(unsafe-cdr lst_49)))"
"(let-values(((post-guard-var_8)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_8)"
"(let-values()"
"(let-values()"
"(apply-syntax-shifts-to-binding"
" b_51"
" mpi-shifts_2)))))"
"(let-values(((result_56)"
"(if(post-guard-var_8)"
"(for-loop_69"
" rest_20)"
" null)))"
"(cons"
" elem_8"
" result_56))))))"
" null))))"
" for-loop_69)"
" lst_48)))))"
"(module-binding-update48.1"
" #f"
" #f"
" temp88_0"
" #t"
" #f"
" #f"
" temp87_0"
" #t"
" shifted-mod85_0"
" #t"
" shifted-nominal-mod86_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b_50)))))))))))"
"(if(if(not b_50) unbound-sym?_0 #f)"
"(let-values()(syntax-e$1 s_149))"
"(let-values() b_50)))))))))))))))"
"(define-values"
"(apply-syntax-shifts)"
"(lambda(mpi_7 shifts_0)"
"(if(null? shifts_0)"
"(let-values() mpi_7)"
"(let-values()"
"(let-values(((shifted-mpi_1)(apply-syntax-shifts mpi_7(cdr shifts_0))))"
"(let-values(((shift_1)(car shifts_0)))"
"(module-path-index-shift shifted-mpi_1(shift-from shift_1)(shift-to shift_1))))))))"
"(define-values"
"(apply-syntax-shifts-to-binding)"
"(lambda(b_52 shifts_1)"
"(if(null? shifts_1)"
"(let-values() b_52)"
"(let-values()"
"(let-values(((shifted-b_0)(apply-syntax-shifts-to-binding b_52(cdr shifts_1))))"
"(let-values(((shift_2)(car shifts_1)))"
"(binding-module-path-index-shift shifted-b_0(shift-from shift_2)(shift-to shift_2))))))))"
"(define-values"
"(binding-module-path-index-shift)"
"(lambda(b_53 from-mpi_2 to-mpi_2)"
"(if(module-binding? b_53)"
"(let-values()"
"(let-values(((temp92_0)(module-path-index-shift(module-binding-module b_53) from-mpi_2 to-mpi_2))"
"((temp93_0)(module-path-index-shift(module-binding-nominal-module b_53) from-mpi_2 to-mpi_2))"
"((temp94_0)"
"(let-values(((lst_50)(module-binding-extra-nominal-bindings b_53)))"
"(begin"
"(check-list lst_50)"
"((letrec-values(((for-loop_70)"
"(lambda(lst_51)"
"(if(pair? lst_51)"
"(let-values(((b_14)(unsafe-car lst_51))"
"((rest_21)(unsafe-cdr lst_51)))"
"(let-values(((post-guard-var_9)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_9)"
"(let-values()"
"(let-values()"
"(binding-module-path-index-shift"
" b_14"
" from-mpi_2"
" to-mpi_2)))))"
"(let-values(((result_57)"
"(if(post-guard-var_9)"
"(for-loop_70 rest_21)"
" null)))"
"(cons elem_9 result_57))))))"
" null))))"
" for-loop_70)"
" lst_50)))))"
"(module-binding-update48.1"
" #f"
" #f"
" temp94_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp92_0"
" #t"
" temp93_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b_53)))"
"(let-values() b_53))))"
"(define-values"
"(syntax-transfer-shifts39.1)"
"(lambda(non-source?33_0 non-source?34_0 to-s37_0 from-s38_0 inspector35_0 inspector36_0)"
"(let-values(((to-s_0) to-s37_0))"
"(let-values(((from-s_1) from-s38_0))"
"(let-values(((inspector_4)(if inspector36_0 inspector35_0 #f)))"
"(let-values(((non-source?_1)(if non-source?34_0 non-source?33_0 #f)))"
"(let-values()"
"(let-values(((shifts_2)(syntax-mpi-shifts from-s_1)))"
"(if(if(null? shifts_2) inspector_4 #f)"
"(let-values()(syntax-set-inspector to-s_0 inspector_4))"
"(let-values()"
"(let-values(((lst_52)(reverse$1 shifts_2))((start_14) 0))"
"(begin"
"(check-list lst_52)"
"(check-naturals start_14)"
"((letrec-values(((for-loop_71)"
"(lambda(s_150 lst_53 pos_9)"
"(if(if(pair? lst_53) #t #f)"
"(let-values(((shift_3)(unsafe-car lst_53))"
"((rest_22)(unsafe-cdr lst_53))"
"((i_87) pos_9))"
"(let-values(((s_38)"
"(let-values(((s_151) s_150))"
"(let-values(((s_64)"
"(let-values()"
"(let-values(((temp96_0)"
"(shift-from shift_3))"
"((temp97_0)"
"(shift-to shift_3))"
"((temp98_0)"
"(if(zero? i_87)"
" inspector_4"
" #f))"
"((non-source?99_0)"
" non-source?_1))"
"(syntax-module-path-index-shift15.1"
" non-source?99_0"
" #t"
" s_151"
" temp96_0"
" temp97_0"
" temp98_0"
" #t)))))"
"(values s_64)))))"
"(if(not #f)(for-loop_71 s_38 rest_22(+ pos_9 1)) s_38)))"
" s_150))))"
" for-loop_71)"
" to-s_0"
" lst_52"
" start_14)))))))))))))"
"(define-values"
"(syntax-set-inspector)"
"(lambda(s_92 insp_3)"
"(let-values(((the-struct_28) s_92))"
"(if(syntax?$1 the-struct_28)"
"(let-values(((inspector100_0)"
"(let-values(((or-part_147)(syntax-inspector s_92)))(if or-part_147 or-part_147 insp_3)))"
"((scope-propagations+tamper101_0)"
"(if(datum-has-elements?(syntax-content s_92))"
"(propagation-mpi-shift"
"(syntax-scope-propagations+tamper s_92)"
" #f"
" insp_3"
"(syntax-scopes s_92)"
"(syntax-shifted-multi-scopes s_92)"
"(syntax-mpi-shifts s_92))"
"(syntax-scope-propagations+tamper s_92))))"
"(syntax1.1"
"(syntax-content the-struct_28)"
"(syntax-scopes the-struct_28)"
"(syntax-shifted-multi-scopes the-struct_28)"
" scope-propagations+tamper101_0"
"(syntax-mpi-shifts the-struct_28)"
"(syntax-srcloc the-struct_28)"
"(syntax-props the-struct_28)"
" inspector100_0))"
"        (raise-argument-error 'struct-copy \"syntax?\" the-struct_28)))))"
"(define-values"
"(1/syntax-source-module)"
"(let-values(((syntax-source-module45_0)"
"(lambda(s44_0 source?42_0 source?43_0)"
"(let-values(((s_152) s44_0))"
"(let-values()"
"(let-values()"
"(begin"
"(if(syntax?$1 s_152)"
"(void)"
"                            (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" s_152)))"
"(let-values(((lst_54)(reverse$1(syntax-mpi-shifts s_152))))"
"(begin"
"(check-list lst_54)"
"((letrec-values(((for-loop_72)"
"(lambda(result_58 lst_55)"
"(if(pair? lst_55)"
"(let-values(((shift_4)(unsafe-car lst_55))"
"((rest_23)(unsafe-cdr lst_55)))"
"(let-values(((result_59)"
"(let-values(((result_60) result_58))"
"(if(non-source-shift? shift_4)"
" result_60"
"(let-values()"
"(let-values(((result_61)"
"(let-values()"
"(let-values()"
"(let-values(((from-mpi_3)"
"(car"
" shift_4)))"
"(let-values(((path_7"
" base_18)"
"(1/module-path-index-split"
" from-mpi_3)))"
"(if(not path_7)"
"(if(module-path-index-resolved"
" from-mpi_3)"
"(apply-syntax-shifts"
" from-mpi_3"
"(syntax-mpi-shifts"
" s_152))"
" #f)"
" #f)))))))"
"(values result_61)))))))"
"(if(if(not((lambda x_76 result_59) shift_4))(not #f) #f)"
"(for-loop_72 result_59 rest_23)"
" result_59)))"
" result_58))))"
" for-loop_72)"
" #f"
" lst_54))))))))))"
"(case-lambda"
"((s_153)(syntax-source-module45_0 s_153 #f #f))"
"((s_154 source?42_1)(syntax-source-module45_0 s_154 source?42_1 #t)))))"
"(define-values"
"(1/identifier-prune-to-source-module)"
"(lambda(id_7)"
"(begin"
"(if(identifier? id_7)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-prune-to-source-module \"identifier?\" id_7)))"
"(let-values(((the-struct_29)(datum->syntax$1 #f(syntax-e$1 id_7) id_7 id_7)))"
"(if(syntax?$1 the-struct_29)"
"(let-values(((mpi-shifts102_0)(syntax-mpi-shifts id_7)))"
"(syntax1.1"
"(syntax-content the-struct_29)"
"(syntax-scopes the-struct_29)"
"(syntax-shifted-multi-scopes the-struct_29)"
"(syntax-scope-propagations+tamper the-struct_29)"
" mpi-shifts102_0"
"(syntax-srcloc the-struct_29)"
"(syntax-props the-struct_29)"
"(syntax-inspector the-struct_29)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_29))))))"
"(define-values(built-in-symbols)(make-hasheq))"
"(define-values(register-built-in-symbol!)(lambda(s_0)(hash-set! built-in-symbols s_0 #t)))"
"(define-values(built-in-symbol?)(lambda(s_10)(hash-ref built-in-symbols s_10 #f)))"
"(define-values"
"(make-built-in-symbol!)"
"(lambda(s_155)"
"    (let-values (((built-in-s_0) (string->symbol (format \".~s\" s_155))))"
"(begin(register-built-in-symbol! built-in-s_0) built-in-s_0))))"
"(call-with-values"
"(lambda()"
"(for-each2"
" register-built-in-symbol!"
" '(lambda case-lambda"
" if"
" begin"
" begin0"
" let-values"
" letrec-values"
" set!"
" quote"
" with-continuation-mark"
" #%variable-reference)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(for-each2"
" register-built-in-symbol!"
" '(check-not-undefined"
" instance-variable-box"
" variable-reference"
" variable-reference?"
" variable-reference->instance"
" variable-reference-constant?)))"
" print-values)"
"(define-values(phase-shift-id)(make-built-in-symbol! 'phase))"
"(define-values(dest-phase-id)(make-built-in-symbol! 'dest-phase))"
"(define-values(ns-id)(make-built-in-symbol! 'namespace))"
"(define-values(self-id)(make-built-in-symbol! 'self))"
"(define-values(syntax-literals-id)(make-built-in-symbol! 'syntax-literals))"
"(define-values(get-syntax-literal!-id)(make-built-in-symbol! 'get-syntax-literal!))"
"(define-values(bulk-binding-registry-id)(make-built-in-symbol! 'bulk-binding-registry))"
"(define-values(inspector-id)(make-built-in-symbol! 'inspector))"
"(define-values(deserialize-syntax-id)(make-built-in-symbol! 'deserialize-syntax))"
"(define-values(deserialized-syntax-vector-id)(make-built-in-symbol! 'deserialized-syntax-vector))"
"(define-values(set-transformer!-id)(make-built-in-symbol! 'set-transformer!))"
"(define-values(top-level-bind!-id)(make-built-in-symbol! 'top-level-bind!))"
"(define-values(top-level-require!-id)(make-built-in-symbol! 'top-level-require!))"
"(define-values"
"(struct:provided provided1.1 provided? provided-binding provided-protected? provided-syntax?)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'provided"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(p_39 ser-push!_0 state_0)"
"(begin"
"(ser-push!_0 'tag '#:provided)"
"(ser-push!_0(provided-binding p_39))"
"(ser-push!_0(provided-protected? p_39))"
"(ser-push!_0(provided-syntax? p_39))))))"
" #f"
" #f"
" '(0 1 2)"
" #f"
" 'provided)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'binding)"
"(make-struct-field-accessor -ref_0 1 'protected?)"
"(make-struct-field-accessor -ref_0 2 'syntax?))))"
"(define-values(provided-as-binding)(lambda(v_89)(if(provided? v_89)(provided-binding v_89) v_89)))"
"(define-values(provided-as-protected?)(lambda(v_90)(if(provided? v_90)(provided-protected? v_90) #f)))"
"(define-values(provided-as-transformer?)(lambda(v_91)(if(provided? v_91)(provided-syntax? v_91) #f)))"
"(define-values"
"(deserialize-provided)"
"(lambda(binding_6 protected?_0 syntax?_1)(provided1.1 binding_6 protected?_0 syntax?_1)))"
"(define-values"
"(provide-binding-to-require-binding11.1)"
"(lambda(mpi2_0 phase-shift4_0 provide-phase-level3_0 self1_0 binding/p9_0 sym10_0)"
"(let-values(((binding/p_0) binding/p9_0))"
"(let-values(((sym_18) sym10_0))"
"(let-values(((self_1) self1_0))"
"(let-values(((mpi_11) mpi2_0))"
"(let-values(((provide-phase-level_0) provide-phase-level3_0))"
"(let-values(((phase-shift_0) phase-shift4_0))"
"(let-values()"
"(let-values(((binding_7)(provided-as-binding binding/p_0)))"
"(let-values(((from-mod_0)(module-binding-module binding_7)))"
"(let-values(((temp18_1)(module-path-index-shift from-mod_0 self_1 mpi_11))"
"((mpi19_0) mpi_11)"
"((provide-phase-level20_0) provide-phase-level_0)"
"((sym21_1) sym_18)"
"((phase-shift22_0) phase-shift_0)"
"((temp23_1) #f)"
"((temp24_2)"
"(if(not(provided-as-protected? binding/p_0))"
"(module-binding-extra-inspector binding_7)"
" #f))"
"((null25_0) null))"
"(module-binding-update48.1"
" temp24_2"
" #t"
" null25_0"
" #t"
" temp23_1"
" #t"
" #f"
" #f"
" temp18_1"
" #t"
" mpi19_0"
" #t"
" provide-phase-level20_0"
" #t"
" phase-shift22_0"
" #t"
" sym21_1"
" #t"
" #f"
" #f"
" #f"
" #f"
" binding_7)))))))))))))"
"(define-values"
"(struct:bulk-binding"
" bulk-binding14.1"
" bulk-binding?"
" bulk-binding-provides"
" bulk-binding-prefix"
" bulk-binding-excepts"
" bulk-binding-self"
" bulk-binding-mpi"
" bulk-binding-provide-phase-level"
" bulk-binding-phase-shift"
" bulk-binding-bulk-binding-registry"
" set-bulk-binding-provides!"
" set-bulk-binding-self!)"
"(let-values(((struct:_28 make-_28 ?_28 -ref_28 -set!_28)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding"
" #f"
" 8"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_54 ser-push!_12 reachable-scopes_5)"
"(begin"
"(ser-push!_12 'tag '#:bulk-binding)"
"(ser-push!_12(bulk-binding-prefix b_54))"
"(ser-push!_12(bulk-binding-excepts b_54))"
"(ser-push!_12(bulk-binding-mpi b_54))"
"(ser-push!_12(bulk-binding-provide-phase-level b_54))"
"(ser-push!_12(bulk-binding-phase-shift b_54))"
"(ser-push!_12 'tag '#:bulk-binding-registry))))"
"(cons"
" prop:bulk-binding"
"(bulk-binding-class3.1"
"(lambda(b_55 mpi-shifts_3)"
"(let-values(((or-part_53)(bulk-binding-provides b_55)))"
"(if or-part_53"
" or-part_53"
"(let-values(((mod-name_1)"
"(1/module-path-index-resolve"
"(apply-syntax-shifts(bulk-binding-mpi b_55) mpi-shifts_3))))"
"(let-values((()"
"(begin"
"(if(bulk-binding-bulk-binding-registry b_55)"
"(void)"
"(let-values()"
"(error"
"                                                     \"namespace mismatch: no bulk-binding registry available:\""
" mod-name_1)))"
"(values))))"
"(let-values(((table_74)"
"(bulk-binding-registry-table"
"(bulk-binding-bulk-binding-registry b_55))))"
"(let-values(((bulk-provide_0)(hash-ref table_74 mod-name_1 #f)))"
"(let-values((()"
"(begin"
"(if bulk-provide_0"
"(void)"
"(let-values()"
"(error"
"                                                           \"namespace mismatch: bulk bindings not found in registry for module:\""
" mod-name_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(set-bulk-binding-self! b_55(bulk-provide-self bulk-provide_0))"
"(values))))"
"(let-values(((provides_0)"
"(hash-ref"
"(bulk-provide-provides bulk-provide_0)"
"(bulk-binding-provide-phase-level b_55))))"
"(let-values(((excepts_0)(bulk-binding-excepts b_55)))"
"(let-values(((prefix_0)(bulk-binding-prefix b_55)))"
"(let-values(((adjusted-provides_0)"
"(if(let-values(((or-part_55) prefix_0))"
"(if or-part_55"
" or-part_55"
"(positive?(hash-count excepts_0))))"
"(let-values()"
"(let-values(((ht_35) provides_0))"
"(begin"
"(check-in-hash ht_35)"
"((letrec-values(((for-loop_7)"
"(lambda(table_0 i_88)"
"(if i_88"
"(let-values(((sym_19"
" val_20)"
"(hash-iterate-key+value"
" ht_35"
" i_88)))"
"(let-values(((table_1)"
"(let-values(((table_2)"
" table_0))"
"(if(hash-ref"
" excepts_0"
" sym_19"
" #f)"
" table_2"
"(let-values(((table_3)"
" table_2))"
"(let-values(((table_75)"
"(let-values()"
"(let-values(((key_33"
" val_21)"
"(let-values()"
"(values"
"(if prefix_0"
"(string->symbol"
"(format"
"                                                                                                                                                       \"~a~a\""
" prefix_0"
" sym_19))"
" sym_19)"
" val_20))))"
"(hash-set"
" table_3"
" key_33"
" val_21)))))"
"(values"
" table_75)))))))"
"(if(not #f)"
"(for-loop_7"
" table_1"
"(hash-iterate-next"
" ht_35"
" i_88))"
" table_1)))"
" table_0))))"
" for-loop_7)"
" '#hash()"
"(hash-iterate-first ht_35)))))"
"(let-values() provides_0))))"
"(begin"
"(set-bulk-binding-provides! b_55 adjusted-provides_0)"
" adjusted-provides_0))))))))))))))"
"(lambda(b_56 binding_8 sym_5)"
"(let-values(((temp28_1)"
"(if(bulk-binding-prefix b_56)"
"(string->symbol"
"(substring"
"(symbol->string sym_5)"
"(string-length(symbol->string(bulk-binding-prefix b_56)))))"
" sym_5))"
"((temp29_0)(bulk-binding-self b_56))"
"((temp30_0)(bulk-binding-mpi b_56))"
"((temp31_0)(bulk-binding-provide-phase-level b_56))"
"((temp32_0)(bulk-binding-phase-shift b_56)))"
"(provide-binding-to-require-binding11.1"
" temp30_0"
" temp32_0"
" temp31_0"
" temp29_0"
" binding_8"
" temp28_1))))))"
"(current-inspector)"
" #f"
" '(1 2 4 5 6 7)"
" #f"
" 'bulk-binding)))))"
"(values"
" struct:_28"
" make-_28"
" ?_28"
"(make-struct-field-accessor -ref_28 0 'provides)"
"(make-struct-field-accessor -ref_28 1 'prefix)"
"(make-struct-field-accessor -ref_28 2 'excepts)"
"(make-struct-field-accessor -ref_28 3 'self)"
"(make-struct-field-accessor -ref_28 4 'mpi)"
"(make-struct-field-accessor -ref_28 5 'provide-phase-level)"
"(make-struct-field-accessor -ref_28 6 'phase-shift)"
"(make-struct-field-accessor -ref_28 7 'bulk-binding-registry)"
"(make-struct-field-mutator -set!_28 0 'provides)"
"(make-struct-field-mutator -set!_28 3 'self))))"
"(define-values"
"(deserialize-bulk-binding)"
"(lambda(prefix_1 excepts_1 mpi_12 provide-phase-level_1 phase-shift_1 bulk-binding-registry_0)"
"(bulk-binding14.1 #f prefix_1 excepts_1 #f mpi_12 provide-phase-level_1 phase-shift_1 bulk-binding-registry_0)))"
"(define-values"
"(struct:bulk-provide bulk-provide15.1 bulk-provide? bulk-provide-self bulk-provide-provides)"
"(let-values(((struct:_29 make-_29 ?_29 -ref_29 -set!_29)"
"(let-values()"
"(let-values()"
"(make-struct-type 'bulk-provide #f 2 0 #f null(current-inspector) #f '(0 1) #f 'bulk-provide)))))"
"(values"
" struct:_29"
" make-_29"
" ?_29"
"(make-struct-field-accessor -ref_29 0 'self)"
"(make-struct-field-accessor -ref_29 1 'provides))))"
"(define-values"
"(struct:bulk-binding-registry bulk-binding-registry16.1 bulk-binding-registry? bulk-binding-registry-table)"
"(let-values(((struct:_30 make-_30 ?_30 -ref_30 -set!_30)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-registry"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'bulk-binding-registry)))))"
"(values struct:_30 make-_30 ?_30(make-struct-field-accessor -ref_30 0 'table))))"
"(define-values(make-bulk-binding-registry)(lambda()(bulk-binding-registry16.1(make-hasheq))))"
"(define-values"
"(register-bulk-provide!)"
"(lambda(bulk-binding-registry_1 mod-name_2 self_2 provides_1)"
"(hash-set!(bulk-binding-registry-table bulk-binding-registry_1) mod-name_2(bulk-provide15.1 self_2 provides_1))))"
"(define-values(generate-lift-key)(lambda()(gensym 'lift)))"
"(define-values"
"(struct:root-expand-context/outer"
" root-expand-context/outer1.1"
" root-expand-context/outer?"
" root-expand-context/outer-inner"
" root-expand-context/outer-post-expansion-scope"
" root-expand-context/outer-use-site-scopes"
" root-expand-context/outer-frame-id)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'root-expand-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'root-expand-context/outer)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'inner)"
"(make-struct-field-accessor -ref_0 1 'post-expansion-scope)"
"(make-struct-field-accessor -ref_0 2 'use-site-scopes)"
"(make-struct-field-accessor -ref_0 3 'frame-id))))"
"(define-values"
"(struct:root-expand-context/inner"
" root-expand-context/inner2.1"
" root-expand-context/inner?"
" root-expand-context/inner-module-scopes"
" root-expand-context/inner-top-level-bind-scope"
" root-expand-context/inner-all-scopes-stx"
" root-expand-context/inner-defined-syms"
" root-expand-context/inner-counter"
" root-expand-context/inner-lift-key)"
"(let-values(((struct:_31 make-_31 ?_31 -ref_31 -set!_31)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'root-expand-context/inner"
" #f"
" 6"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5)"
" #f"
" 'root-expand-context/inner)))))"
"(values"
" struct:_31"
" make-_31"
" ?_31"
"(make-struct-field-accessor -ref_31 0 'module-scopes)"
"(make-struct-field-accessor -ref_31 1 'top-level-bind-scope)"
"(make-struct-field-accessor -ref_31 2 'all-scopes-stx)"
"(make-struct-field-accessor -ref_31 3 'defined-syms)"
"(make-struct-field-accessor -ref_31 4 'counter)"
"(make-struct-field-accessor -ref_31 5 'lift-key))))"
"(define-values"
"(root-expand-context/make)"
"(lambda(module-scopes_0"
" post-expansion-scope_0"
" top-level-bind-scope_0"
" all-scopes-stx_0"
" use-site-scopes_0"
" defined-syms_0"
" frame-id_4"
" counter_0"
" lift-key_0)"
"(root-expand-context/outer1.1"
"(root-expand-context/inner2.1"
" module-scopes_0"
" top-level-bind-scope_0"
" all-scopes-stx_0"
" defined-syms_0"
" counter_0"
" lift-key_0)"
" post-expansion-scope_0"
" use-site-scopes_0"
" frame-id_4)))"
"(define-values"
"(root-expand-context-post-expansion-scope)"
"(lambda(v_92)(root-expand-context/outer-post-expansion-scope v_92)))"
"(define-values(root-expand-context-use-site-scopes)(lambda(v_93)(root-expand-context/outer-use-site-scopes v_93)))"
"(define-values(root-expand-context-frame-id)(lambda(v_68)(root-expand-context/outer-frame-id v_68)))"
"(define-values"
"(root-expand-context-module-scopes)"
"(lambda(v_94)(root-expand-context/inner-module-scopes(root-expand-context/outer-inner v_94))))"
"(define-values"
"(root-expand-context-top-level-bind-scope)"
"(lambda(v_95)(root-expand-context/inner-top-level-bind-scope(root-expand-context/outer-inner v_95))))"
"(define-values"
"(root-expand-context-all-scopes-stx)"
"(lambda(v_96)(root-expand-context/inner-all-scopes-stx(root-expand-context/outer-inner v_96))))"
"(define-values"
"(root-expand-context-defined-syms)"
"(lambda(v_97)(root-expand-context/inner-defined-syms(root-expand-context/outer-inner v_97))))"
"(define-values"
"(root-expand-context-counter)"
"(lambda(v_98)(root-expand-context/inner-counter(root-expand-context/outer-inner v_98))))"
"(define-values"
"(root-expand-context-lift-key)"
"(lambda(v_48)(root-expand-context/inner-lift-key(root-expand-context/outer-inner v_48))))"
"(define-values"
"(make-root-expand-context11.1)"
"(lambda(all-scopes-stx6_0"
" all-scopes-stx10_0"
" initial-scopes3_0"
" initial-scopes7_0"
" outside-scope4_0"
" outside-scope8_0"
" post-expansion-scope5_0"
" post-expansion-scope9_0)"
"(let-values(((initial-scopes_0)(if initial-scopes7_0 initial-scopes3_0 null)))"
"(let-values(((outside-scope_0)(if outside-scope8_0 outside-scope4_0 top-level-common-scope)))"
"(let-values(((post-expansion-scope_1)"
"(if post-expansion-scope9_0 post-expansion-scope5_0(new-multi-scope 'top-level))))"
"(let-values(((all-scopes-stx_1)(if all-scopes-stx10_0 all-scopes-stx6_0 #f)))"
"(let-values()"
"(let-values(((module-scopes_1)(list* post-expansion-scope_1 outside-scope_0 initial-scopes_0)))"
"(root-expand-context/make"
" module-scopes_1"
" post-expansion-scope_1"
"(new-scope 'module)"
"(let-values(((or-part_148) all-scopes-stx_1))"
"(if or-part_148 or-part_148(add-scopes empty-syntax module-scopes_1)))"
"(box null)"
"(make-hasheqv)"
"                 (string->uninterned-symbol \"root-frame\")"
"(box 0)"
"(generate-lift-key))))))))))"
"(define-values"
"(root-expand-context-encode-for-module)"
"(lambda(ctx_0 orig-self_0 new-self_0)"
"(datum->syntax$1"
" #f"
"(vector"
"(add-scopes empty-syntax(root-expand-context-module-scopes ctx_0))"
"(add-scope empty-syntax(root-expand-context-post-expansion-scope ctx_0))"
"(let-values(((temp16_1)(root-expand-context-all-scopes-stx ctx_0))"
"((orig-self17_0) orig-self_0)"
"((new-self18_0) new-self_0))"
"(syntax-module-path-index-shift15.1 #f #f temp16_1 orig-self17_0 new-self18_0 #f #f))"
"(add-scopes empty-syntax(unbox(root-expand-context-use-site-scopes ctx_0)))"
"(let-values(((ht_65)(root-expand-context-defined-syms ctx_0)))"
"(begin"
"(check-in-hash ht_65)"
"((letrec-values(((for-loop_73)"
"(lambda(table_76 i_89)"
"(if i_89"
"(let-values(((phase_21 ht_66)(hash-iterate-key+value ht_65 i_89)))"
"(let-values(((table_77)"
"(let-values(((table_78) table_76))"
"(let-values(((table_79)"
"(let-values()"
"(let-values(((key_34 val_22)"
"(let-values()"
"(values phase_21 ht_66))))"
"(hash-set table_78 key_34 val_22)))))"
"(values table_79)))))"
"(if(not #f)(for-loop_73 table_77(hash-iterate-next ht_65 i_89)) table_77)))"
" table_76))))"
" for-loop_73)"
" '#hasheqv()"
"(hash-iterate-first ht_65))))"
"(root-expand-context-frame-id ctx_0)"
"(unbox(root-expand-context-counter ctx_0))))))"
"(define-values"
"(root-expand-context-decode-for-module)"
"(lambda(vec-s_0)"
"(let-values(((vec_24)(if(syntax?$1 vec-s_0)(syntax-e$1 vec-s_0) #f)))"
"(begin"
"(if(if(vector? vec_24)"
"(if(=(vector-length vec_24) 7)"
"(if(syntax?$1(vector-ref vec_24 0))"
"(if(syntax-with-one-scope?(vector-ref vec_24 1))"
"(if(syntax?$1(vector-ref vec_24 2))"
"(if(syntax?$1(vector-ref vec_24 3))"
"(if(defined-syms-hash?(syntax-e$1(vector-ref vec_24 4)))"
"(if(symbol?(syntax-e$1(vector-ref vec_24 5)))"
"(exact-nonnegative-integer?(syntax-e$1(vector-ref vec_24 6)))"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"          (let-values () (error 'root-expand-context-decode-for-module \"bad encoding: ~s\" vec-s_0)))"
"(root-expand-context/make"
"(extract-scope-list(vector-ref vec_24 0))"
"(extract-scope(vector-ref vec_24 1))"
"(new-scope 'module)"
"(vector-ref vec_24 2)"
"(box(extract-scope-list(vector-ref vec_24 3)))"
"(unpack-defined-syms(vector-ref vec_24 4))"
"(syntax-e$1(vector-ref vec_24 5))"
"(box(syntax-e$1(vector-ref vec_24 6)))"
"(generate-lift-key))))))"
"(define-values"
"(defined-syms-hash?)"
"(lambda(v_43)"
"(let-values(((ht_67) v_43))"
"(begin"
"(check-in-hash ht_67)"
"((letrec-values(((for-loop_74)"
"(lambda(result_62 i_90)"
"(if i_90"
"(let-values(((phase_22 ht-s_0)(hash-iterate-key+value ht_67 i_90)))"
"(let-values(((result_63)"
"(let-values()"
"(let-values(((result_64)"
"(let-values()"
"(let-values()"
"(if(phase? phase_22)"
"(if(hash?(syntax-e$1 ht-s_0))"
"(let-values(((ht_36)(syntax-e$1 ht-s_0)))"
"(begin"
"(check-in-hash ht_36)"
"((letrec-values(((for-loop_30)"
"(lambda(result_56 i_57)"
"(if i_57"
"(let-values(((sym_20"
" id_8)"
"(hash-iterate-key+value"
" ht_36"
" i_57)))"
"(let-values(((result_65)"
"(let-values()"
"(let-values(((result_66)"
"(let-values()"
"(let-values()"
"(if(symbol?"
" sym_20)"
"(identifier?"
" id_8)"
" #f)))))"
"(values"
" result_66)))))"
"(if(if(not"
"((lambda x_77"
"(not"
" result_65))"
" sym_20"
" id_8))"
"(not #f)"
" #f)"
"(for-loop_30"
" result_65"
"(hash-iterate-next"
" ht_36"
" i_57))"
" result_65)))"
" result_56))))"
" for-loop_30)"
" #t"
"(hash-iterate-first ht_36))))"
" #f)"
" #f)))))"
"(values result_64)))))"
"(if(if(not((lambda x_78(not result_63)) phase_22 ht-s_0))(not #f) #f)"
"(for-loop_74 result_63(hash-iterate-next ht_67 i_90))"
" result_63)))"
" result_62))))"
" for-loop_74)"
" #t"
"(hash-iterate-first ht_67))))))"
"(define-values(extract-scope-list)(lambda(stx_8)(map2 generalize-scope(set->list(syntax-scope-set stx_8 0)))))"
"(define-values"
"(syntax-with-one-scope?)"
"(lambda(stx_9)(if(syntax?$1 stx_9)(= 1(set-count(syntax-scope-set stx_9 0))) #f)))"
"(define-values"
"(extract-scope)"
"(lambda(stx_10)(let-values(((s_156)(syntax-scope-set stx_10 0)))(generalize-scope(set-first s_156)))))"
"(define-values"
"(unpack-defined-syms)"
"(lambda(v_99)"
"(hash-copy"
"(let-values(((ht_68)(syntax-e$1 v_99)))"
"(begin"
"(check-in-hash ht_68)"
"((letrec-values(((for-loop_12)"
"(lambda(table_80 i_91)"
"(if i_91"
"(let-values(((phase_23 ht-s_1)(hash-iterate-key+value ht_68 i_91)))"
"(let-values(((table_35)"
"(let-values(((table_81) table_80))"
"(let-values(((table_82)"
"(let-values()"
"(let-values(((key_35 val_23)"
"(let-values()"
"(values"
" phase_23"
"(hash-copy"
"(let-values(((ht_69)"
"(syntax-e$1 ht-s_1)))"
"(begin"
"(check-in-hash ht_69)"
"((letrec-values(((for-loop_75)"
"(lambda(table_83"
" i_92)"
"(if i_92"
"(let-values(((sym_21"
" id_9)"
"(hash-iterate-key+value"
" ht_69"
" i_92)))"
"(let-values(((table_39)"
"(let-values(((table_40)"
" table_83))"
"(let-values(((table_41)"
"(let-values()"
"(let-values(((key_18"
" val_8)"
"(let-values()"
"(values"
" sym_21"
" id_9))))"
"(hash-set"
" table_40"
" key_18"
" val_8)))))"
"(values"
" table_41)))))"
"(if(not"
" #f)"
"(for-loop_75"
" table_39"
"(hash-iterate-next"
" ht_69"
" i_92))"
" table_39)))"
" table_83))))"
" for-loop_75)"
" '#hash()"
"(hash-iterate-first"
" ht_69)))))))))"
"(hash-set table_81 key_35 val_23)))))"
"(values table_82)))))"
"(if(not #f)(for-loop_12 table_35(hash-iterate-next ht_68 i_91)) table_35)))"
" table_80))))"
" for-loop_12)"
" '#hasheqv()"
"(hash-iterate-first ht_68)))))))"
"(define-values"
"(linklet-primitive-table)"
"(let-values(((or-part_149)(primitive-table '#%bootstrap-linklet)))"
"(if or-part_149 or-part_149(primitive-table '#%linklet))))"
"(define-values(1/primitive-table)(hash-ref linklet-primitive-table 'primitive-table #f))"
"(define-values(1/primitive->compiled-position)(hash-ref linklet-primitive-table 'primitive->compiled-position #f))"
"(define-values(1/compiled-position->primitive)(hash-ref linklet-primitive-table 'compiled-position->primitive #f))"
"(define-values(1/linklet?)(hash-ref linklet-primitive-table 'linklet? #f))"
"(define-values(1/compile-linklet)(hash-ref linklet-primitive-table 'compile-linklet #f))"
"(define-values(1/recompile-linklet)(hash-ref linklet-primitive-table 'recompile-linklet #f))"
"(define-values(1/eval-linklet)(hash-ref linklet-primitive-table 'eval-linklet #f))"
"(define-values(1/read-compiled-linklet)(hash-ref linklet-primitive-table 'read-compiled-linklet #f))"
"(define-values(1/instantiate-linklet)(hash-ref linklet-primitive-table 'instantiate-linklet #f))"
"(define-values(1/linklet-import-variables)(hash-ref linklet-primitive-table 'linklet-import-variables #f))"
"(define-values(1/linklet-export-variables)(hash-ref linklet-primitive-table 'linklet-export-variables #f))"
"(define-values(1/instance?)(hash-ref linklet-primitive-table 'instance? #f))"
"(define-values(1/make-instance)(hash-ref linklet-primitive-table 'make-instance #f))"
"(define-values(1/instance-name)(hash-ref linklet-primitive-table 'instance-name #f))"
"(define-values(1/instance-data)(hash-ref linklet-primitive-table 'instance-data #f))"
"(define-values(1/instance-variable-names)(hash-ref linklet-primitive-table 'instance-variable-names #f))"
"(define-values(1/instance-variable-value)(hash-ref linklet-primitive-table 'instance-variable-value #f))"
"(define-values(1/instance-set-variable-value!)(hash-ref linklet-primitive-table 'instance-set-variable-value! #f))"
"(define-values(1/instance-unset-variable!)(hash-ref linklet-primitive-table 'instance-unset-variable! #f))"
"(define-values(1/linklet-directory?)(hash-ref linklet-primitive-table 'linklet-directory? #f))"
"(define-values(1/hash->linklet-directory)(hash-ref linklet-primitive-table 'hash->linklet-directory #f))"
"(define-values(1/linklet-directory->hash)(hash-ref linklet-primitive-table 'linklet-directory->hash #f))"
"(define-values(1/linklet-bundle?)(hash-ref linklet-primitive-table 'linklet-bundle? #f))"
"(define-values(1/hash->linklet-bundle)(hash-ref linklet-primitive-table 'hash->linklet-bundle #f))"
"(define-values(1/linklet-bundle->hash)(hash-ref linklet-primitive-table 'linklet-bundle->hash #f))"
"(define-values(1/variable-reference?)(hash-ref linklet-primitive-table 'variable-reference? #f))"
"(define-values(1/variable-reference->instance)(hash-ref linklet-primitive-table 'variable-reference->instance #f))"
"(define-values(1/variable-reference-constant?)(hash-ref linklet-primitive-table 'variable-reference-constant? #f))"
"(call-with-values"
"(lambda()"
"(if 1/variable-reference-constant?"
"(void)"
"      (let-values () (error \"broken '#%linklet primitive table; maybe you need to use \\\"bootstrap-run.rkt\\\"\"))))"
" print-values)"
"(define-values"
"(struct:module-registry module-registry1.1 module-registry? module-registry-declarations module-registry-lock-box)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-registry"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-registry)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'declarations)"
"(make-struct-field-accessor -ref_0 1 'lock-box))))"
"(define-values(make-module-registry)(lambda()(module-registry1.1(make-hasheq)(box #f))))"
"(define-values"
"(registry-call-with-lock)"
"(lambda(r_28 proc_1)"
"(let-values(((lock-box_0)(module-registry-lock-box r_28)))"
"((letrec-values(((loop_5)"
"(lambda()"
"(let-values(((v_37)(unbox lock-box_0)))"
"(if(let-values(((or-part_88)(not v_37)))"
"(if or-part_88 or-part_88(sync/timeout 0(car v_37)(cdr v_37))))"
"(let-values()"
"(let-values(((sema_0)(make-semaphore)))"
"(let-values(((lock_0)(cons(semaphore-peek-evt sema_0)(current-thread))))"
"((dynamic-wind"
" void"
"(lambda()"
"(if(box-cas! lock-box_0 v_37 lock_0)"
"(let-values()(begin(proc_1) void))"
"(let-values() loop_5)))"
"(lambda()(semaphore-post sema_0)))))))"
"(if(eq?(current-thread)(cdr v_37))"
"(let-values()(proc_1))"
"(let-values()(begin(sync(car v_37)(cdr v_37))(loop_5)))))))))"
" loop_5)))))"
"(define-values"
"(struct:namespace"
" namespace1.1"
" 1/namespace?"
" namespace-mpi"
" namespace-source-name"
" namespace-root-expand-ctx"
" namespace-phase"
" namespace-0-phase"
" namespace-phase-to-namespace"
" namespace-phase-level-to-definitions"
" 1/namespace-module-registry"
" namespace-bulk-binding-registry"
" namespace-submodule-declarations"
" namespace-root-namespace"
" namespace-declaration-inspector"
" namespace-inspector"
" namespace-available-module-instances"
" namespace-module-instances"
" set-namespace-inspector!)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'namespace"
" #f"
" 15"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(ns_0 port_9 mode_9)"
"                         (let-values ((() (begin (write-string \"#<namespace\" port_9) (values))))"
"(let-values(((n_44)(namespace-source-name ns_0)))"
"(let-values((()"
"(begin"
"(if n_44"
"                                               (let-values () (fprintf port_9 \":~a\" (namespace->name ns_0)))"
"(void))"
"(values))))"
"(let-values(((0-phase_0)(namespace-0-phase ns_0)))"
"(let-values(((phase-level_0)(phase-(namespace-phase ns_0) 0-phase_0)))"
"(begin"
"(if(zero-phase? phase-level_0)"
"(void)"
"                                       (let-values () (fprintf port_9 \":~s\" phase-level_0)))"
"(if(zero-phase? 0-phase_0)"
"(void)"
"(let-values()"
"                                         (fprintf port_9 \"~a~s\" (if (positive? 0-phase_0) \"+\" \"\") 0-phase_0)))"
"                                     (write-string \">\" port_9))))))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 13 14)"
" #f"
" 'namespace)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'mpi)"
"(make-struct-field-accessor -ref_0 1 'source-name)"
"(make-struct-field-accessor -ref_0 2 'root-expand-ctx)"
"(make-struct-field-accessor -ref_0 3 'phase)"
"(make-struct-field-accessor -ref_0 4 '0-phase)"
"(make-struct-field-accessor -ref_0 5 'phase-to-namespace)"
"(make-struct-field-accessor -ref_0 6 'phase-level-to-definitions)"
"(make-struct-field-accessor -ref_0 7 'module-registry)"
"(make-struct-field-accessor -ref_0 8 'bulk-binding-registry)"
"(make-struct-field-accessor -ref_0 9 'submodule-declarations)"
"(make-struct-field-accessor -ref_0 10 'root-namespace)"
"(make-struct-field-accessor -ref_0 11 'declaration-inspector)"
"(make-struct-field-accessor -ref_0 12 'inspector)"
"(make-struct-field-accessor -ref_0 13 'available-module-instances)"
"(make-struct-field-accessor -ref_0 14 'module-instances)"
"(make-struct-field-mutator -set!_0 12 'inspector))))"
"(define-values"
"(struct:definitions definitions2.1 definitions? definitions-variables definitions-transformers)"
"(let-values(((struct:_32 make-_32 ?_32 -ref_32 -set!_32)"
"(let-values()"
"(let-values()"
"(make-struct-type 'definitions #f 2 0 #f null(current-inspector) #f '(0 1) #f 'definitions)))))"
"(values"
" struct:_32"
" make-_32"
" ?_32"
"(make-struct-field-accessor -ref_32 0 'variables)"
"(make-struct-field-accessor -ref_32 1 'transformers))))"
"(define-values(make-namespace)(lambda()(let-values()(new-namespace9.1 #f #f #f #f #f #f))))"
"(define-values"
"(new-namespace9.1)"
"(lambda(register?4_0 register?6_0 root-expand-ctx3_0 root-expand-ctx5_0 share-from-ns7_0 share-from-ns8_0)"
"(let-values(((share-from-ns_0)(if share-from-ns8_0 share-from-ns7_0 #f)))"
"(let-values(((root-expand-ctx_0)"
"(if root-expand-ctx5_0"
" root-expand-ctx3_0"
"(let-values()(make-root-expand-context11.1 #f #f #f #f #f #f #f #f)))))"
"(let-values(((register?_0)(if register?6_0 register?4_0 #t)))"
"(let-values()"
"(let-values(((phase_24)(if share-from-ns_0(namespace-phase share-from-ns_0) 0)))"
"(let-values(((ns_1)"
"(namespace1.1"
" top-level-module-path-index"
" #f"
"(box root-expand-ctx_0)"
" phase_24"
" phase_24"
"(make-hasheqv)"
"(make-hasheqv)"
"(if share-from-ns_0(1/namespace-module-registry share-from-ns_0)(make-module-registry))"
"(if share-from-ns_0"
"(namespace-bulk-binding-registry share-from-ns_0)"
"(make-bulk-binding-registry))"
"(make-hasheq)"
"(if share-from-ns_0"
"(let-values(((or-part_150)(namespace-root-namespace share-from-ns_0)))"
"(if or-part_150 or-part_150 share-from-ns_0))"
" #f)"
" #f"
"(make-inspector(current-code-inspector))"
"(if share-from-ns_0(namespace-available-module-instances share-from-ns_0)(make-hasheqv))"
"(if share-from-ns_0(namespace-module-instances share-from-ns_0)(make-hasheqv)))))"
"(begin"
"(if register?_0(let-values()(hash-set!(namespace-phase-to-namespace ns_1) phase_24 ns_1))(void))"
" ns_1)))))))))"
"(define-values"
"(1/current-namespace)"
"(make-parameter"
"(make-namespace)"
"(lambda(v_100)"
"(begin"
"       (if (1/namespace? v_100) (void) (let-values () (raise-argument-error 'current-namespace \"namespace?\" v_100)))"
" v_100))))"
"(define-values(namespace-get-root-expand-ctx)(lambda(ns_2)(force(unbox(namespace-root-expand-ctx ns_2)))))"
"(define-values"
"(namespace-set-root-expand-ctx!)"
"(lambda(ns_3 root-ctx_0)(set-box!(namespace-root-expand-ctx ns_3) root-ctx_0)))"
"(define-values"
"(namespace->module)"
"(lambda(ns_4 name_21)"
"(let-values(((or-part_151)(hash-ref(namespace-submodule-declarations ns_4) name_21 #f)))"
"(if or-part_151"
" or-part_151"
"(hash-ref(module-registry-declarations(1/namespace-module-registry ns_4)) name_21 #f)))))"
"(define-values"
"(namespace->namespace-at-phase)"
"(lambda(ns_5 phase_25)"
"(let-values(((or-part_152)(hash-ref(namespace-phase-to-namespace ns_5) phase_25 #f)))"
"(if or-part_152"
" or-part_152"
"(let-values(((p-ns_0)"
"(let-values(((the-struct_30) ns_5))"
"(if(1/namespace? the-struct_30)"
"(let-values(((phase22_0) phase_25))"
"(namespace1.1"
"(namespace-mpi the-struct_30)"
"(namespace-source-name the-struct_30)"
"(namespace-root-expand-ctx the-struct_30)"
" phase22_0"
"(namespace-0-phase the-struct_30)"
"(namespace-phase-to-namespace the-struct_30)"
"(namespace-phase-level-to-definitions the-struct_30)"
"(1/namespace-module-registry the-struct_30)"
"(namespace-bulk-binding-registry the-struct_30)"
"(namespace-submodule-declarations the-struct_30)"
"(namespace-root-namespace the-struct_30)"
"(namespace-declaration-inspector the-struct_30)"
"(namespace-inspector the-struct_30)"
"(namespace-available-module-instances the-struct_30)"
"(namespace-module-instances the-struct_30)))"
"                          (raise-argument-error 'struct-copy \"namespace?\" the-struct_30)))))"
"(begin(hash-set!(namespace-phase-to-namespace ns_5) phase_25 p-ns_0) p-ns_0))))))"
"(define-values"
"(namespace->name)"
"(lambda(ns_6)"
"(let-values(((n_45)(namespace-source-name ns_6)))"
"(let-values(((s_157)"
"(if(not n_45)"
"(let-values() 'top-level)"
"(if(symbol? n_45)"
"                        (let-values () (format \"'~s\" n_45))"
"                        (let-values () (string-append \"\\\"\" (path->string n_45) \"\\\"\"))))))"
"(let-values(((r_29)(1/resolved-module-path-name(1/module-path-index-resolve(namespace-mpi ns_6)))))"
"          (if (pair? r_29) (string-append \"(submod \" s_157 \" \" (substring (format \"~s\" (cdr r_29)) 1)) s_157))))))"
"(define-values"
"(namespace->definitions)"
"(lambda(ns_7 phase-level_1)"
"(let-values(((d_10)(hash-ref(namespace-phase-level-to-definitions ns_7) phase-level_1 #f)))"
"(let-values(((or-part_153) d_10))"
"(if or-part_153"
" or-part_153"
"(let-values()"
"(let-values(((p-ns_1)"
"(namespace->namespace-at-phase ns_7(phase+(namespace-0-phase ns_7) phase-level_1))))"
"(let-values(((d_11)(definitions2.1(1/make-instance(namespace->name p-ns_1) p-ns_1)(make-hasheq))))"
"(begin(hash-set!(namespace-phase-level-to-definitions ns_7) phase-level_1 d_11) d_11)))))))))"
"(define-values"
"(namespace-set-variable!)"
"(let-values(((namespace-set-variable!18_0)"
"(lambda(ns14_0 phase-level15_0 name16_1 val17_0 as-constant?12_0 as-constant?13_0)"
"(let-values(((ns_8) ns14_0))"
"(let-values(((phase-level_2) phase-level15_0))"
"(let-values(((name_22) name16_1))"
"(let-values(((val_24) val17_0))"
"(let-values(((as-constant?_0)(if as-constant?13_0 as-constant?12_0 #f)))"
"(let-values()"
"(let-values(((d_12)(namespace->definitions ns_8 phase-level_2)))"
"(1/instance-set-variable-value!"
"(definitions-variables d_12)"
" name_22"
" val_24"
"(if as-constant?_0 'constant #f))))))))))))"
"(case-lambda"
"((ns_9 phase-level_3 name_23 val_25)(namespace-set-variable!18_0 ns_9 phase-level_3 name_23 val_25 #f #f))"
"((ns_10 phase-level_4 name_14 val_26 as-constant?12_1)"
"(namespace-set-variable!18_0 ns_10 phase-level_4 name_14 val_26 as-constant?12_1 #t)))))"
"(define-values"
"(namespace-set-consistent!)"
"(lambda(ns_11 phase-level_5 name_24 val_27)"
"(let-values(((d_13)(namespace->definitions ns_11 phase-level_5)))"
"(1/instance-set-variable-value!(definitions-variables d_13) name_24 val_27 'consistent))))"
"(define-values"
"(namespace-unset-variable!)"
"(lambda(ns_12 phase-level_6 name_15)"
"(let-values(((d_14)(namespace->definitions ns_12 phase-level_6)))"
"(1/instance-unset-variable!(definitions-variables d_14) name_15))))"
"(define-values"
"(namespace-set-transformer!)"
"(lambda(ns_13 phase-level_7 name_25 val_28)"
"(let-values(((d_15)(namespace->definitions ns_13(add1 phase-level_7))))"
"(hash-set!(definitions-transformers d_15) name_25 val_28))))"
"(define-values"
"(namespace-unset-transformer!)"
"(lambda(ns_14 phase-level_8 name_26)"
"(let-values(((d_16)(namespace->definitions ns_14(add1 phase-level_8))))"
"(hash-remove!(definitions-transformers d_16) name_26))))"
"(define-values"
"(namespace-get-variable)"
"(lambda(ns_15 phase-level_9 name_27 fail-k_0)"
"(let-values(((d_17)(namespace->definitions ns_15 phase-level_9)))"
"(1/instance-variable-value(definitions-variables d_17) name_27 fail-k_0))))"
"(define-values"
"(namespace-get-transformer)"
"(lambda(ns_16 phase-level_10 name_28 fail-k_1)"
"(let-values(((d_18)(namespace->definitions ns_16(add1 phase-level_10))))"
"(hash-ref(definitions-transformers d_18) name_28 fail-k_1))))"
"(define-values"
"(namespace->instance)"
"(lambda(ns_17 phase-shift_2)(definitions-variables(namespace->definitions ns_17 phase-shift_2))))"
"(define-values"
"(namespace-same-instance?)"
"(lambda(a-ns_0 b-ns_0)"
"(eq?"
"(hash-ref(namespace-phase-level-to-definitions a-ns_0) 0 'no-a)"
"(hash-ref(namespace-phase-level-to-definitions b-ns_0) 0 'no-b))))"
"(define-values(original-property-sym)(gensym 'original))"
"(define-values"
"(syntax->list$1)"
"(lambda(s_0)"
"(let-values(((l_47)"
"((letrec-values(((loop_126)"
"(lambda(s_1)"
"(if(pair? s_1)"
"(let-values()(cons(car s_1)(loop_126(cdr s_1))))"
"(if(syntax?$1 s_1)"
"(let-values()(loop_126(syntax-e$1 s_1)))"
"(let-values() s_1))))))"
" loop_126)"
" s_0)))"
"(if(list? l_47) l_47 #f))))"
"(define-values(missing$1)(gensym))"
"(define-values"
"(syntax-track-origin$1)"
"(let-values(((syntax-track-origin5_0)"
"(lambda(new-stx3_0 old-stx4_0 id1_0 id2_0)"
"(let-values(((new-stx_0) new-stx3_0))"
"(let-values(((old-stx_0) old-stx4_0))"
"(let-values(((id_10)"
"(if id2_0"
" id1_0"
"(if(identifier? old-stx_0)"
" old-stx_0"
"(let-values(((v_101)(syntax-e/no-taint old-stx_0)))"
"(if(pair? v_101)(car v_101) #f))))))"
"(let-values()"
"(let-values(((old-props_0)(syntax-props old-stx_0)))"
"(if(zero?(hash-count old-props_0))"
"(let-values()"
"(if id_10"
"(syntax-property$1"
" new-stx_0"
" 'origin"
"(cons id_10(hash-ref(syntax-props new-stx_0) 'origin null)))"
" new-stx_0))"
"(let-values()"
"(let-values(((new-props_0)(syntax-props new-stx_0)))"
"(if(zero?(hash-count new-props_0))"
"(let-values()"
"(if id_10"
"(let-values()"
"(let-values(((old-origin_0)"
"(plain-property-value"
"(hash-ref old-props_0 'origin missing$1))))"
"(let-values(((origin_0)"
"(if(eq? old-origin_0 missing$1)"
"(list id_10)"
"(cons id_10 old-origin_0))))"
"(let-values(((the-struct_31) new-stx_0))"
"(if(syntax?$1 the-struct_31)"
"(let-values(((props7_0)(hash-set old-props_0 'origin origin_0)))"
"(syntax1.1"
"(syntax-content the-struct_31)"
"(syntax-scopes the-struct_31)"
"(syntax-shifted-multi-scopes the-struct_31)"
"(syntax-scope-propagations+tamper the-struct_31)"
"(syntax-mpi-shifts the-struct_31)"
"(syntax-srcloc the-struct_31)"
" props7_0"
"(syntax-inspector the-struct_31)))"
"                                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_31))))))"
"(let-values()"
"(let-values(((the-struct_32) new-stx_0))"
"(if(syntax?$1 the-struct_32)"
"(let-values(((props8_0) old-props_0))"
"(syntax1.1"
"(syntax-content the-struct_32)"
"(syntax-scopes the-struct_32)"
"(syntax-shifted-multi-scopes the-struct_32)"
"(syntax-scope-propagations+tamper the-struct_32)"
"(syntax-mpi-shifts the-struct_32)"
"(syntax-srcloc the-struct_32)"
" props8_0"
"(syntax-inspector the-struct_32)))"
"                                              (raise-argument-error 'struct-copy \"syntax?\" the-struct_32))))))"
"(let-values()"
"(let-values(((old-props-with-origin_0)"
"(if id_10"
"(hash-set"
" old-props_0"
" 'origin"
"(cons id_10(hash-ref old-props_0 'origin null)))"
" old-props_0)))"
"(let-values(((updated-props_0)"
"(if(<"
"(hash-count old-props-with-origin_0)"
"(hash-count new-props_0))"
"(let-values()"
"(let-values(((ht_64) old-props-with-origin_0))"
"(begin"
"(check-in-immutable-hash ht_64)"
"((letrec-values(((for-loop_68)"
"(lambda(new-props_1 i_93)"
"(if i_93"
"(let-values(((k_19 v_102)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_64"
" i_93)))"
"(let-values(((new-props_2)"
"(let-values(((new-props_3)"
" new-props_1))"
"(let-values(((new-props_4)"
"(let-values()"
"(let-values(((new-v_0)"
"(hash-ref"
" new-props_3"
" k_19"
" missing$1)))"
"(hash-set"
" new-props_3"
" k_19"
"(if(eq?"
" new-v_0"
" missing$1)"
" v_102"
"(cons/preserve"
" new-v_0"
" v_102)))))))"
"(values"
" new-props_4)))))"
"(if(not #f)"
"(for-loop_68"
" new-props_2"
"(unsafe-immutable-hash-iterate-next"
" ht_64"
" i_93))"
" new-props_2)))"
" new-props_1))))"
" for-loop_68)"
" new-props_0"
"(unsafe-immutable-hash-iterate-first ht_64)))))"
"(let-values()"
"(let-values(((ht_70) new-props_0))"
"(begin"
"(check-in-immutable-hash ht_70)"
"((letrec-values(((for-loop_76)"
"(lambda(old-props_1 i_94)"
"(if i_94"
"(let-values(((k_20 v_5)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_70"
" i_94)))"
"(let-values(((old-props_2)"
"(let-values(((old-props_3)"
" old-props_1))"
"(let-values(((old-props_4)"
"(let-values()"
"(let-values(((old-v_0)"
"(hash-ref"
" old-props_3"
" k_20"
" missing$1)))"
"(hash-set"
" old-props_3"
" k_20"
"(if(eq?"
" old-v_0"
" missing$1)"
" v_5"
"(cons/preserve"
" v_5"
" old-v_0)))))))"
"(values"
" old-props_4)))))"
"(if(not #f)"
"(for-loop_76"
" old-props_2"
"(unsafe-immutable-hash-iterate-next"
" ht_70"
" i_94))"
" old-props_2)))"
" old-props_1))))"
" for-loop_76)"
" old-props-with-origin_0"
"(unsafe-immutable-hash-iterate-first ht_70))))))))"
"(let-values(((the-struct_33) new-stx_0))"
"(if(syntax?$1 the-struct_33)"
"(let-values(((props9_0) updated-props_0))"
"(syntax1.1"
"(syntax-content the-struct_33)"
"(syntax-scopes the-struct_33)"
"(syntax-shifted-multi-scopes the-struct_33)"
"(syntax-scope-propagations+tamper the-struct_33)"
"(syntax-mpi-shifts the-struct_33)"
"(syntax-srcloc the-struct_33)"
" props9_0"
"(syntax-inspector the-struct_33)))"
"(raise-argument-error"
" 'struct-copy"
"                                               \"syntax?\""
" the-struct_33))))))))))))))))))"
"(case-lambda"
"((new-stx_1 old-stx_1)(syntax-track-origin5_0 new-stx_1 old-stx_1 #f #f))"
"((new-stx_2 old-stx_2 id1_1)(syntax-track-origin5_0 new-stx_2 old-stx_2 id1_1 #t)))))"
"(define-values"
"(cons/preserve)"
"(lambda(a_34 b_57)"
"(if(let-values(((or-part_43)(preserved-property-value? a_34)))"
"(if or-part_43 or-part_43(preserved-property-value? b_57)))"
"(preserved-property-value1.1(cons(plain-property-value a_34)(plain-property-value b_57)))"
"(cons a_34 b_57))))"
"(define-values"
"(syntax-track-origin*)"
"(lambda(old-stxes_0 new-stx_3)"
"(let-values(((lst_23) old-stxes_0))"
"(begin"
"(check-list lst_23)"
"((letrec-values(((for-loop_20)"
"(lambda(new-stx_4 lst_56)"
"(if(pair? lst_56)"
"(let-values(((old-stx_3)(unsafe-car lst_56))((rest_24)(unsafe-cdr lst_56)))"
"(let-values(((new-stx_5)"
"(let-values(((new-stx_6) new-stx_4))"
"(let-values(((new-stx_7)"
"(let-values()"
"(syntax-track-origin$1 new-stx_6 old-stx_3))))"
"(values new-stx_7)))))"
"(if(not #f)(for-loop_20 new-stx_5 rest_24) new-stx_5)))"
" new-stx_4))))"
" for-loop_20)"
" new-stx_3"
" lst_23)))))"
"(define-values"
"(1/struct:exn:fail:syntax make-exn:fail:syntax$1 1/exn:fail:syntax? 1/exn:fail:syntax-exprs)"
"(let-values(((struct:_25 make-_25 ?_25 -ref_25 -set!_25)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax"
" struct:exn:fail"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:exn:srclocs"
"(lambda(e_17)(filter values(map2 syntax-srcloc(1/exn:fail:syntax-exprs e_17))))))"
" #f"
" #f"
" '(0)"
"(lambda(str_2 cm_0 exprs_0 info_2)"
"(begin"
"(if(if(list? exprs_0)(andmap2 syntax?$1 exprs_0) #f)"
"(void)"
"                           (let-values () (raise-argument-error 'exn:fail:syntax \"(listof syntax?)\" exprs_0)))"
"(values str_2 cm_0 exprs_0)))"
" 'exn:fail:syntax)))))"
"(values struct:_25 make-_25 ?_25(make-struct-field-accessor -ref_25 0 'exprs))))"
"(define-values"
"(1/struct:exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1 1/exn:fail:syntax:unbound?)"
"(let-values(((struct:_33 make-_33 ?_33 -ref_33 -set!_33)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax:unbound"
" 1/struct:exn:fail:syntax"
" 0"
" 0"
" #f"
" null"
" #f"
" #f"
" '()"
" #f"
" 'exn:fail:syntax:unbound)))))"
"(values struct:_33 make-_33 ?_33)))"
"(define-values"
"(raise-syntax-error$1)"
"(let-values(((raise-syntax-error11_0)"
"(lambda(given-name9_0"
" message10_0"
" expr1_0"
" sub-expr2_0"
" extra-sources3_0"
" message-suffix4_0"
" expr5_0"
" sub-expr6_0"
" extra-sources7_0"
" message-suffix8_0)"
"(let-values(((given-name_0) given-name9_0))"
"(let-values(((message_0) message10_0))"
"(let-values(((expr_0)(if expr5_0 expr1_0 #f)))"
"(let-values(((sub-expr_0)(if sub-expr6_0 sub-expr2_0 #f)))"
"(let-values(((extra-sources_0)(if extra-sources7_0 extra-sources3_0 null)))"
"                            (let-values (((message-suffix_0) (if message-suffix8_0 message-suffix4_0 \"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax$1"
" given-name_0"
" message_0"
" expr_0"
" sub-expr_0"
" extra-sources_0"
" message-suffix_0)))))))))))"
"(case-lambda"
"((given-name_1 message_1)(raise-syntax-error11_0 given-name_1 message_1 #f #f #f #f #f #f #f #f))"
"((given-name_2 message_2 expr_1 sub-expr_1 extra-sources_1 message-suffix4_1)"
"(raise-syntax-error11_0 given-name_2 message_2 expr_1 sub-expr_1 extra-sources_1 message-suffix4_1 #t #t #t #t))"
"((given-name_3 message_3 expr_2 sub-expr_2 extra-sources3_1)"
"(raise-syntax-error11_0 given-name_3 message_3 expr_2 sub-expr_2 extra-sources3_1 #f #t #t #t #f))"
"((given-name_4 message_4 expr_3 sub-expr2_1)"
"(raise-syntax-error11_0 given-name_4 message_4 expr_3 sub-expr2_1 #f #f #t #t #f #f))"
"((given-name_5 message_5 expr1_1)(raise-syntax-error11_0 given-name_5 message_5 expr1_1 #f #f #f #t #f #f #f)))))"
"(define-values"
"(raise-unbound-syntax-error)"
"(let-values(((raise-unbound-syntax-error23_0)"
"(lambda(given-name21_0"
" message22_0"
" expr13_0"
" sub-expr14_0"
" extra-sources15_0"
" message-suffix16_0"
" expr17_0"
" sub-expr18_0"
" extra-sources19_0"
" message-suffix20_0)"
"(let-values(((given-name_6) given-name21_0))"
"(let-values(((message_6) message22_0))"
"(let-values(((expr_4)(if expr17_0 expr13_0 #f)))"
"(let-values(((sub-expr_3)(if sub-expr18_0 sub-expr14_0 #f)))"
"(let-values(((extra-sources_2)(if extra-sources19_0 extra-sources15_0 null)))"
"                            (let-values (((message-suffix_1) (if message-suffix20_0 message-suffix16_0 \"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax:unbound$1"
" given-name_6"
" message_6"
" expr_4"
" sub-expr_3"
" extra-sources_2"
" message-suffix_1)))))))))))"
"(case-lambda"
"((given-name_7 message_7)(raise-unbound-syntax-error23_0 given-name_7 message_7 #f #f #f #f #f #f #f #f))"
"((given-name_8 message_8 expr_5 sub-expr_4 extra-sources_3 message-suffix16_1)"
"(raise-unbound-syntax-error23_0"
" given-name_8"
" message_8"
" expr_5"
" sub-expr_4"
" extra-sources_3"
" message-suffix16_1"
" #t"
" #t"
" #t"
" #t))"
"((given-name_9 message_9 expr_6 sub-expr_5 extra-sources15_1)"
"(raise-unbound-syntax-error23_0 given-name_9 message_9 expr_6 sub-expr_5 extra-sources15_1 #f #t #t #t #f))"
"((given-name_10 message_10 expr_7 sub-expr14_1)"
"(raise-unbound-syntax-error23_0 given-name_10 message_10 expr_7 sub-expr14_1 #f #f #t #t #f #f))"
"((given-name_11 message_11 expr13_1)"
"(raise-unbound-syntax-error23_0 given-name_11 message_11 expr13_1 #f #f #f #t #f #f #f)))))"
"(define-values"
"(do-raise-syntax-error)"
"(lambda(exn:fail:syntax_0 given-name_12 message_12 expr_8 sub-expr_6 extra-sources_4 message-suffix_2)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_24)(not given-name_12)))"
"(if or-part_24 or-part_24(symbol? given-name_12)))"
"(void)"
"                      (let-values () (raise-argument-error 'raise-syntax-error \"(or/c symbol? #f)\" given-name_12)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message_12)"
"(void)"
"                        (let-values () (raise-argument-error 'raise-syntax-error \"string?\" message_12)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(list? extra-sources_4)(andmap2 syntax?$1 extra-sources_4) #f)"
"(void)"
"                          (let-values () (raise-argument-error 'raise-syntax-error \"(listof syntax?)\" extra-sources_4)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message-suffix_2)"
"(void)"
"                            (let-values () (raise-argument-error 'raise-syntax-error \"string?\" message-suffix_2)))"
"(values))))"
"(let-values(((name_29)"
"(format"
"                           \"~a\""
"(let-values(((or-part_154) given-name_12))"
"(if or-part_154"
" or-part_154"
"(let-values(((or-part_155)(extract-form-name expr_8)))"
"(if or-part_155 or-part_155 '?)))))))"
"(let-values(((at-message_0)"
"(let-values(((or-part_156)"
"(if sub-expr_6"
"(if(error-print-source-location)"
"                                              (format \"\\n  at: ~.s\" (syntax->datum$1 (datum->syntax$1 #f sub-expr_6)))"
" #f)"
" #f)))"
"                              (if or-part_156 or-part_156 \"\"))))"
"(let-values(((in-message_0)"
"(let-values(((or-part_157)"
"(if expr_8"
"(if(error-print-source-location)"
"                                                (format \"\\n  in: ~.s\" (syntax->datum$1 (datum->syntax$1 #f expr_8)))"
" #f)"
" #f)))"
"                                (if or-part_157 or-part_157 \"\"))))"
"(let-values(((src-loc-str_0)"
"(let-values(((or-part_158)(extract-source-location sub-expr_6)))"
"(if or-part_158"
" or-part_158"
"(let-values(((or-part_150)(extract-source-location expr_8)))"
"                                      (if or-part_150 or-part_150 \"\"))))))"
"(raise"
"(exn:fail:syntax_0"
"                      (string-append src-loc-str_0 name_29 \": \" message_12 at-message_0 in-message_0 message-suffix_2)"
"(current-continuation-marks)"
"(map2"
" syntax-taint$1"
"(if(let-values(((or-part_159) sub-expr_6))(if or-part_159 or-part_159 expr_8))"
"(cons"
"(datum->syntax$1"
" #f"
"(let-values(((or-part_160) sub-expr_6))(if or-part_160 or-part_160 expr_8)))"
" extra-sources_4)"
" extra-sources_4))))))))))))))"
"(define-values"
"(extract-form-name)"
"(lambda(s_158)"
"(if(syntax?$1 s_158)"
"(let-values()"
"(let-values(((e_18)(syntax-e$1 s_158)))"
"(if(symbol? e_18)"
"(let-values() e_18)"
"(if(if(pair? e_18)(identifier?(car e_18)) #f)"
"(let-values()(syntax-e$1(car e_18)))"
"(let-values() #f)))))"
"(let-values() #f))))"
"(define-values"
"(extract-source-location)"
"(lambda(s_159)"
"(if(syntax?$1 s_159)"
"(if(syntax-srcloc s_159)"
"        (let-values (((str_3) (srcloc->string (syntax-srcloc s_159)))) (if str_3 (string-append str_3 \": \") #f))"
" #f)"
" #f)))"
"(define-values"
"(struct:module-use module-use1.1 module-use? module-use-module module-use-phase)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()(make-struct-type 'module-use #f 2 0 #f null #f #f '(0 1) #f 'module-use)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'module)"
"(make-struct-field-accessor -ref_0 1 'phase))))"
"(define-values"
"(struct:module"
" module1.1"
" module?"
" module-source-name"
" module-self"
" module-requires"
" module-provides"
" module-access"
" module-language-info"
" module-min-phase-level"
" module-max-phase-level"
" module-phase-level-linklet-info-callback"
" module-prepare-instance"
" module-instantiate-phase"
" module-primitive?"
" module-predefined?$1"
" module-cross-phase-persistent?"
" module-no-protected?"
" module-inspector"
" module-submodule-names"
" module-supermodule-name"
" module-get-all-variables"
" set-module-access!)"
"(let-values(((struct:_1 make-_1 ?_1 -ref_1 -set!_1)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module"
" #f"
" 19"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18)"
" #f"
" 'module)))))"
"(values"
" struct:_1"
" make-_1"
" ?_1"
"(make-struct-field-accessor -ref_1 0 'source-name)"
"(make-struct-field-accessor -ref_1 1 'self)"
"(make-struct-field-accessor -ref_1 2 'requires)"
"(make-struct-field-accessor -ref_1 3 'provides)"
"(make-struct-field-accessor -ref_1 4 'access)"
"(make-struct-field-accessor -ref_1 5 'language-info)"
"(make-struct-field-accessor -ref_1 6 'min-phase-level)"
"(make-struct-field-accessor -ref_1 7 'max-phase-level)"
"(make-struct-field-accessor -ref_1 8 'phase-level-linklet-info-callback)"
"(make-struct-field-accessor -ref_1 9 'prepare-instance)"
"(make-struct-field-accessor -ref_1 10 'instantiate-phase)"
"(make-struct-field-accessor -ref_1 11 'primitive?)"
"(make-struct-field-accessor -ref_1 12 'predefined?)"
"(make-struct-field-accessor -ref_1 13 'cross-phase-persistent?)"
"(make-struct-field-accessor -ref_1 14 'no-protected?)"
"(make-struct-field-accessor -ref_1 15 'inspector)"
"(make-struct-field-accessor -ref_1 16 'submodule-names)"
"(make-struct-field-accessor -ref_1 17 'supermodule-name)"
"(make-struct-field-accessor -ref_1 18 'get-all-variables)"
"(make-struct-field-mutator -set!_1 4 'access))))"
"(define-values"
"(struct:module-linklet-info"
" module-linklet-info2.1"
" module-linklet-info?"
" module-linklet-info-linklet-or-instance"
" module-linklet-info-module-uses"
" module-linklet-info-self)"
"(let-values(((struct:_34 make-_34 ?_34 -ref_34 -set!_34)"
"(let-values()"
"(let-values()"
"(make-struct-type 'module-linklet-info #f 3 0 #f null #f #f '(0 1 2) #f 'module-linklet-info)))))"
"(values"
" struct:_34"
" make-_34"
" ?_34"
"(make-struct-field-accessor -ref_34 0 'linklet-or-instance)"
"(make-struct-field-accessor -ref_34 1 'module-uses)"
"(make-struct-field-accessor -ref_34 2 'self))))"
"(define-values"
"(make-module37.1)"
"(lambda(cross-phase-persistent?15_0"
" cross-phase-persistent?32_0"
" get-all-variables19_0"
" get-all-variables36_0"
" instantiate-phase-callback9_0"
" language-info12_0"
" language-info29_0"
" max-phase-level8_0"
" max-phase-level25_0"
" min-phase-level7_0"
" min-phase-level24_0"
" no-protected?16_0"
" no-protected?33_0"
" phase-level-linklet-info-callback11_0"
" phase-level-linklet-info-callback28_0"
" predefined?14_0"
" predefined?31_0"
" prepare-instance-callback10_0"
" prepare-instance-callback27_0"
" primitive?13_0"
" primitive?30_0"
" provides6_0"
" requires5_0"
" requires22_0"
" self4_0"
" source-name3_0"
" source-name20_0"
" submodule-names17_0"
" submodule-names34_0"
" supermodule-name18_0"
" supermodule-name35_0)"
"(let-values(((source-name_0)(if source-name20_0 source-name3_0 #f)))"
"(let-values(((self_3) self4_0))"
"(let-values(((requires_0)(if requires22_0 requires5_0 null)))"
"(let-values(((provides_2) provides6_0))"
"(let-values(((min-phase-level_0)(if min-phase-level24_0 min-phase-level7_0 0)))"
"(let-values(((max-phase-level_0)(if max-phase-level25_0 max-phase-level8_0 0)))"
"(let-values(((instantiate-phase_0) instantiate-phase-callback9_0))"
"(let-values(((prepare-instance_0)"
"(if prepare-instance-callback27_0 prepare-instance-callback10_0 void)))"
"(let-values(((phase-level-linklet-info-callback_0)"
"(if phase-level-linklet-info-callback28_0"
" phase-level-linklet-info-callback11_0"
"(lambda(phase-level_11 ns_18) #f))))"
"(let-values(((language-info_0)(if language-info29_0 language-info12_0 #f)))"
"(let-values(((primitive?_0)(if primitive?30_0 primitive?13_0 #f)))"
"(let-values(((predefined?_0)(if predefined?31_0 predefined?14_0 #f)))"
"(let-values(((cross-phase-persistent?_0)"
"(if cross-phase-persistent?32_0 cross-phase-persistent?15_0 primitive?_0)))"
"(let-values(((no-protected?_0)(if no-protected?33_0 no-protected?16_0 #f)))"
"(let-values(((submodule-names_0)(if submodule-names34_0 submodule-names17_0 null)))"
"(let-values(((supermodule-name_0)(if supermodule-name35_0 supermodule-name18_0 #f)))"
"(let-values(((get-all-variables_0)"
"(if get-all-variables36_0 get-all-variables19_0(lambda() null))))"
"(let-values()"
"(module1.1"
" source-name_0"
" self_3"
"(unresolve-requires requires_0)"
" provides_2"
" #f"
" language-info_0"
" min-phase-level_0"
" max-phase-level_0"
" phase-level-linklet-info-callback_0"
" prepare-instance_0"
" instantiate-phase_0"
" primitive?_0"
" predefined?_0"
" cross-phase-persistent?_0"
" no-protected?_0"
"(current-code-inspector)"
" submodule-names_0"
" supermodule-name_0"
" get-all-variables_0)))))))))))))))))))))"
"(define-values"
"(struct:module-instance"
" module-instance40.1"
" module-instance?"
" module-instance-namespace"
" module-instance-module"
" module-instance-shifted-requires"
" module-instance-phase-level-to-state"
" module-instance-made-available?"
" module-instance-attached?"
" module-instance-data-box"
" set-module-instance-shifted-requires!"
" set-module-instance-made-available?!"
" set-module-instance-attached?!)"
"(let-values(((struct:_15 make-_15 ?_15 -ref_15 -set!_15)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-instance"
" #f"
" 7"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 3 6)"
" #f"
" 'module-instance)))))"
"(values"
" struct:_15"
" make-_15"
" ?_15"
"(make-struct-field-accessor -ref_15 0 'namespace)"
"(make-struct-field-accessor -ref_15 1 'module)"
"(make-struct-field-accessor -ref_15 2 'shifted-requires)"
"(make-struct-field-accessor -ref_15 3 'phase-level-to-state)"
"(make-struct-field-accessor -ref_15 4 'made-available?)"
"(make-struct-field-accessor -ref_15 5 'attached?)"
"(make-struct-field-accessor -ref_15 6 'data-box)"
"(make-struct-field-mutator -set!_15 2 'shifted-requires)"
"(make-struct-field-mutator -set!_15 4 'made-available?)"
"(make-struct-field-mutator -set!_15 5 'attached?))))"
"(define-values"
"(make-module-instance)"
"(lambda(m-ns_0 m_2)(module-instance40.1 m-ns_0 m_2 #f(make-hasheqv) #f #f(box #f))))"
"(define-values"
"(make-module-namespace48.1)"
"(lambda(for-submodule?43_0 mpi41_0 root-expand-context42_0 ns47_0)"
"(let-values(((ns_19) ns47_0))"
"(let-values(((name-mpi_0) mpi41_0))"
"(let-values(((root-expand-ctx_1) root-expand-context42_0))"
"(let-values(((for-submodule?_0) for-submodule?43_0))"
"(let-values()"
"(let-values(((phase_26) 0))"
"(let-values(((name_30)(1/module-path-index-resolve name-mpi_0)))"
"(let-values(((m-ns_1)"
"(let-values(((the-struct_34)"
"(let-values(((root-expand-ctx159_0) root-expand-ctx_1)((temp160_0) #f))"
"(new-namespace9.1 temp160_0 #t root-expand-ctx159_0 #t ns_19 #t))))"
"(if(1/namespace? the-struct_34)"
"(let-values(((mpi150_0) name-mpi_0)"
"((source-name151_0)(resolved-module-path-root-name name_30))"
"((phase152_0) phase_26)"
"((0-phase153_0) phase_26)"
"((submodule-declarations154_0)"
"(if for-submodule?_0"
"(namespace-submodule-declarations ns_19)"
"(make-hash)))"
"((available-module-instances155_0)(make-hasheqv))"
"((module-instances156_0)(make-hasheqv))"
"((declaration-inspector157_0)(current-code-inspector)))"
"(namespace1.1"
" mpi150_0"
" source-name151_0"
"(namespace-root-expand-ctx the-struct_34)"
" phase152_0"
" 0-phase153_0"
"(namespace-phase-to-namespace the-struct_34)"
"(namespace-phase-level-to-definitions the-struct_34)"
"(1/namespace-module-registry the-struct_34)"
"(namespace-bulk-binding-registry the-struct_34)"
" submodule-declarations154_0"
"(namespace-root-namespace the-struct_34)"
" declaration-inspector157_0"
"(namespace-inspector the-struct_34)"
" available-module-instances155_0"
" module-instances156_0))"
"                                    (raise-argument-error 'struct-copy \"namespace?\" the-struct_34)))))"
"(let-values((()"
"(begin(hash-set!(namespace-phase-to-namespace m-ns_1) phase_26 m-ns_1)(values))))"
"(let-values(((at-phase_0)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances m-ns_1) phase_26 at-phase_0)"
"(hash-set! at-phase_0 name_30(make-module-instance m-ns_1 #f))"
" m-ns_1)))))))))))))"
"(define-values"
"(declare-module!56.1)"
"(lambda(with-submodules?51_0 with-submodules?52_0 ns53_0 m54_0 mod-name55_0)"
"(let-values(((ns_20) ns53_0))"
"(let-values(((m_3) m54_0))"
"(let-values(((mod-name_3) mod-name55_0))"
"(let-values(((with-submodules?_0)(if with-submodules?52_0 with-submodules?51_0 #t)))"
"(let-values()"
"(let-values(((prior-m_0)"
"(if with-submodules?_0"
"(hash-ref"
"(module-registry-declarations(1/namespace-module-registry ns_20))"
" mod-name_3"
" #f)"
" #f)))"
"(let-values(((prior-mi_0)"
"(if prior-m_0"
"(if(not(eq? m_3 prior-m_0))"
"(let-values(((ns161_0) ns_20)"
"((mod-name162_0) mod-name_3)"
"((temp163_0)(namespace-phase ns_20)))"
"(namespace->module-instance68.1 #f #f #f #f #f #f ns161_0 mod-name162_0 temp163_0))"
" #f)"
" #f)))"
"(begin"
"(if(if prior-m_0(not(eq? m_3 prior-m_0)) #f)"
"(let-values()(check-redeclaration-ok prior-m_0 prior-mi_0 mod-name_3))"
"(void))"
"(hash-set!"
"(if with-submodules?_0"
"(module-registry-declarations(1/namespace-module-registry ns_20))"
"(namespace-submodule-declarations ns_20))"
" mod-name_3"
" m_3)"
"(if with-submodules?_0"
"(let-values()"
"(register-bulk-provide!"
"(namespace-bulk-binding-registry ns_20)"
" mod-name_3"
"(module-self m_3)"
"(module-provides m_3)))"
"(void))"
"((1/current-module-name-resolver) mod-name_3 #f)"
"(if prior-mi_0"
"(let-values()"
"(let-values(((m-ns_2)(module-instance-namespace prior-mi_0)))"
"(let-values(((states_0)(module-instance-phase-level-to-state prior-mi_0)))"
"(let-values(((phase_27)(namespace-phase ns_20)))"
"(let-values(((visit?_0)(eq? 'started(hash-ref states_0(add1 phase_27) #f))))"
"(let-values(((run?_0)(eq? 'started(hash-ref states_0 phase_27 #f))))"
"(let-values(((at-phase_1)(hash-ref(namespace-module-instances ns_20) phase_27)))"
"(begin"
"(hash-set! at-phase_1 mod-name_3(make-module-instance m-ns_2 m_3))"
"(if visit?_0"
"(let-values()"
"(let-values(((ns164_0) ns_20)"
"((temp165_0)(namespace-mpi m-ns_2))"
"((phase166_0) phase_27))"
"(namespace-module-visit!102.1 #f #f ns164_0 temp165_0 phase166_0)))"
"(void))"
"(if run?_0"
"(let-values()"
"(let-values(((ns167_0) ns_20)"
"((temp168_0)(namespace-mpi m-ns_2))"
"((phase169_0) phase_27))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns167_0"
" temp168_0"
" phase169_0)))"
"(void))))))))))"
"(void))))))))))))"
"(define-values"
"(check-redeclaration-ok)"
"(lambda(prior-m_1 prior-mi_1 mod-name_4)"
"(begin"
"(if(module-cross-phase-persistent? prior-m_1)"
"(let-values()"
"          (raise-arguments-error 'module \"cannot redeclare cross-phase persistent module\" \"module name\" mod-name_4))"
"(void))"
"(if(if prior-mi_1"
"(let-values(((or-part_161)(module-instance-attached? prior-mi_1)))"
"(if or-part_161"
" or-part_161"
"(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector(module-instance-namespace prior-mi_1))))))"
" #f)"
"(let-values()"
"          (raise-arguments-error 'module \"current code inspector cannot redeclare module\" \"module name\" mod-name_4))"
"(void)))))"
"(define-values"
"(raise-unknown-module-error)"
"  (lambda (who_9 mod-name_5) (raise-arguments-error who_9 \"unknown module\" \"module name\" mod-name_5)))"
"(define-values"
"(namespace->module-linklet-info)"
"(lambda(ns_21 name_31 phase-level_12)"
"(let-values(((m_4)(namespace->module ns_21 name_31)))"
"(if m_4((module-phase-level-linklet-info-callback m_4) phase-level_12 ns_21) #f))))"
"(define-values"
"(namespace->module-instance68.1)"
"(lambda(check-available-at-phase-level60_0"
" check-available-at-phase-level63_0"
" complain-on-failure?59_0"
" complain-on-failure?62_0"
" unavailable-callback61_0"
" unavailable-callback64_0"
" ns65_0"
" name66_0"
" 0-phase67_0)"
"(let-values(((ns_22) ns65_0))"
"(let-values(((name_32) name66_0))"
"(let-values(((0-phase_1) 0-phase67_0))"
"(let-values(((complain-on-failure?_0)(if complain-on-failure?62_0 complain-on-failure?59_0 #f)))"
"(let-values(((check-available-at-phase-level_0)"
"(if check-available-at-phase-level63_0 check-available-at-phase-level60_0 #f)))"
"(let-values(((unavailable-callback_0)(if unavailable-callback64_0 unavailable-callback61_0 void)))"
"(let-values()"
"(let-values(((mi_0)"
"(let-values(((or-part_162)"
"(hash-ref"
"(hash-ref(namespace-module-instances ns_22) 0-phase_1 '#hasheq())"
" name_32"
" #f)))"
"(if or-part_162"
" or-part_162"
"(let-values(((or-part_163)"
"(let-values(((c-ns_0)"
"(let-values(((or-part_164)"
"(namespace-root-namespace ns_22)))"
"(if or-part_164 or-part_164 ns_22))))"
"(hash-ref(namespace-module-instances c-ns_0) name_32 #f))))"
"(if or-part_163"
" or-part_163"
"(if complain-on-failure?_0"
"                                          (error \"no module instance found:\" name_32 0-phase_1)"
" #f)))))))"
"(if(if mi_0 check-available-at-phase-level_0 #f)"
"(check-availablilty mi_0 check-available-at-phase-level_0 unavailable-callback_0)"
" mi_0)))))))))))"
"(define-values"
"(namespace-install-module-namespace!)"
"(lambda(ns_23 name_33 0-phase_2 m_5 existing-m-ns_0)"
"(let-values(((m-ns_3)"
"(let-values(((the-struct_35) ns_23))"
"(if(1/namespace? the-struct_35)"
"(let-values(((mpi170_0)(namespace-mpi existing-m-ns_0))"
"((source-name171_0)(namespace-source-name existing-m-ns_0))"
"((root-expand-ctx172_0)(namespace-root-expand-ctx existing-m-ns_0))"
"((phase173_0)(namespace-phase existing-m-ns_0))"
"((0-phase174_0)(namespace-0-phase existing-m-ns_0))"
"((phase-to-namespace175_0)(make-hasheqv))"
"((phase-level-to-definitions176_0)"
"(if(module-cross-phase-persistent? m_5)"
"(namespace-phase-level-to-definitions existing-m-ns_0)"
"(make-hasheqv)))"
"((declaration-inspector177_0)(module-inspector m_5))"
"((inspector178_0)(namespace-inspector existing-m-ns_0)))"
"(namespace1.1"
" mpi170_0"
" source-name171_0"
" root-expand-ctx172_0"
" phase173_0"
" 0-phase174_0"
" phase-to-namespace175_0"
" phase-level-to-definitions176_0"
"(1/namespace-module-registry the-struct_35)"
"(namespace-bulk-binding-registry the-struct_35)"
"(namespace-submodule-declarations the-struct_35)"
"(namespace-root-namespace the-struct_35)"
" declaration-inspector177_0"
" inspector178_0"
"(namespace-available-module-instances the-struct_35)"
"(namespace-module-instances the-struct_35)))"
"                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_35)))))"
"(let-values(((mi_1)(make-module-instance m-ns_3 m_5)))"
"(if(module-cross-phase-persistent? m_5)"
"(let-values()"
"(begin"
"(hash-set!(namespace-phase-to-namespace m-ns_3) 0 m-ns_3)"
"(hash-set!(namespace-phase-level-to-definitions m-ns_3) 0(namespace->definitions existing-m-ns_0 0))"
"(hash-set!(namespace-phase-to-namespace m-ns_3) 1(namespace->namespace-at-phase m-ns_3 1))"
"(hash-set!(namespace-phase-level-to-definitions m-ns_3) 1(namespace->definitions existing-m-ns_0 1))"
"(hash-set!"
"(namespace-module-instances"
"(let-values(((or-part_165)(namespace-root-namespace ns_23)))(if or-part_165 or-part_165 ns_23)))"
" name_33"
" mi_1)"
"(hash-set!(module-instance-phase-level-to-state mi_1) 0 'started)))"
"(let-values()"
"(let-values((()(begin(hash-set!(namespace-phase-to-namespace m-ns_3) 0-phase_2 m-ns_3)(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
"(namespace-phase-level-to-definitions m-ns_3)"
" 0"
"(namespace->definitions existing-m-ns_0 0))"
"(values))))"
"(let-values((()(begin(hash-set!(module-instance-phase-level-to-state mi_1) 0 'started)(values))))"
"(let-values(((at-phase_2)"
"(let-values(((or-part_166)(hash-ref(namespace-module-instances ns_23) 0-phase_2 #f)))"
"(if or-part_166"
" or-part_166"
"(let-values(((at-phase_3)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_23) 0-phase_2 at-phase_3)"
" at-phase_3))))))"
"(hash-set! at-phase_2 name_33 mi_1)))))))))))"
"(define-values"
"(namespace-create-module-instance!)"
"(lambda(ns_24 name_34 0-phase_3 m_6 mpi_13)"
"(let-values(((m-ns_4)"
"(let-values(((the-struct_36) ns_24))"
"(if(1/namespace? the-struct_36)"
"(let-values(((mpi179_0) mpi_13)"
"((source-name180_0)"
"(let-values(((or-part_167)(module-source-name m_6)))"
"(if or-part_167"
" or-part_167"
"(resolved-module-path-root-name(1/module-path-index-resolve mpi_13)))))"
"((root-expand-ctx181_0)(box #f))"
"((phase182_0) 0-phase_3)"
"((0-phase183_0) 0-phase_3)"
"((phase-to-namespace184_0)(make-hasheqv))"
"((phase-level-to-definitions185_0)(make-hasheqv))"
"((declaration-inspector186_0)(module-inspector m_6))"
"((inspector187_0)(make-inspector(module-inspector m_6))))"
"(namespace1.1"
" mpi179_0"
" source-name180_0"
" root-expand-ctx181_0"
" phase182_0"
" 0-phase183_0"
" phase-to-namespace184_0"
" phase-level-to-definitions185_0"
"(1/namespace-module-registry the-struct_36)"
"(namespace-bulk-binding-registry the-struct_36)"
"(namespace-submodule-declarations the-struct_36)"
"(namespace-root-namespace the-struct_36)"
" declaration-inspector186_0"
" inspector187_0"
"(namespace-available-module-instances the-struct_36)"
"(namespace-module-instances the-struct_36)))"
"                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_36)))))"
"(let-values((()(begin(hash-set!(namespace-phase-to-namespace m-ns_4) 0-phase_3 m-ns_4)(values))))"
"(let-values(((mi_2)(make-module-instance m-ns_4 m_6)))"
"(begin"
"(if(module-cross-phase-persistent? m_6)"
"(hash-set!(namespace-module-instances ns_24) name_34 mi_2)"
"(let-values(((at-phase_4)"
"(let-values(((or-part_168)(hash-ref(namespace-module-instances ns_24) 0-phase_3 #f)))"
"(if or-part_168"
" or-part_168"
"(let-values(((at-phase_5)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_24) 0-phase_3 at-phase_5)"
" at-phase_5))))))"
"(hash-set! at-phase_4 name_34 mi_2)))"
" mi_2))))))"
"(define-values"
"(check-availablilty)"
"(lambda(mi_3 check-available-at-phase-level_1 unavailable-callback_1)"
"(let-values(((m_7)(module-instance-module mi_3)))"
"(if(if m_7"
"(if(<=(module-min-phase-level m_7)(add1 check-available-at-phase-level_1)(module-max-phase-level m_7))"
"(not(hash-ref(module-instance-phase-level-to-state mi_3)(add1 check-available-at-phase-level_1) #f))"
" #f)"
" #f)"
"(unavailable-callback_1 mi_3)"
" mi_3))))"
"(define-values"
"(namespace->module-namespace80.1)"
"(lambda(check-available-at-phase-level72_0"
" check-available-at-phase-level75_0"
" complain-on-failure?71_0"
" complain-on-failure?74_0"
" unavailable-callback73_0"
" unavailable-callback76_0"
" ns77_0"
" name78_0"
" 0-phase79_0)"
"(let-values(((ns_25) ns77_0))"
"(let-values(((name_35) name78_0))"
"(let-values(((0-phase_4) 0-phase79_0))"
"(let-values(((complain-on-failure?_1)(if complain-on-failure?74_0 complain-on-failure?71_0 #f)))"
"(let-values(((check-available-at-phase-level_2)"
"(if check-available-at-phase-level75_0 check-available-at-phase-level72_0 #f)))"
"(let-values(((unavailable-callback_2)(if unavailable-callback76_0 unavailable-callback73_0 void)))"
"(let-values()"
"(let-values(((mi_4)"
"(let-values(((complain-on-failure?191_0) complain-on-failure?_1)"
"((check-available-at-phase-level192_0) check-available-at-phase-level_2)"
"((unavailable-callback193_0) unavailable-callback_2))"
"(namespace->module-instance68.1"
" check-available-at-phase-level192_0"
" #t"
" complain-on-failure?191_0"
" #t"
" unavailable-callback193_0"
" #t"
" ns_25"
" name_35"
" 0-phase_4))))"
"(if mi_4(module-instance-namespace mi_4) #f)))))))))))"
"(define-values"
"(namespace-record-module-instance-attached!)"
"(lambda(ns_26 mod-name_6 phase_28)"
"(let-values(((mi_5)"
"(let-values(((ns194_0) ns_26)((mod-name195_0) mod-name_6)((phase196_0) phase_28))"
"(namespace->module-instance68.1 #f #f #f #f #f #f ns194_0 mod-name195_0 phase196_0))))"
"(set-module-instance-attached?! mi_5 #t))))"
"(define-values"
"(namespace-module-instantiate!94.1)"
"(lambda(otherwise-available?85_0"
" otherwise-available?89_0"
" run-phase83_0"
" run-phase87_0"
" seen86_0"
" seen90_0"
" skip-run?84_0"
" skip-run?88_0"
" ns91_0"
" mpi92_0"
" instance-phase93_0)"
"(let-values(((ns_27) ns91_0))"
"(let-values(((mpi_14) mpi92_0))"
"(let-values(((instance-phase_0) instance-phase93_0))"
"(let-values(((run-phase_0)(if run-phase87_0 run-phase83_0(namespace-phase ns_27))))"
"(let-values(((skip-run?_0)(if skip-run?88_0 skip-run?84_0 #f)))"
"(let-values(((otherwise-available?_0)(if otherwise-available?89_0 otherwise-available?85_0 #t)))"
"(let-values(((seen_17)(if seen90_0 seen86_0 '#hasheq())))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/module-path-index? mpi_14)"
"(void)"
"                                      (let-values () (error \"not a module path index:\" mpi_14)))"
"(values))))"
"(let-values(((name_36)(1/module-path-index-resolve mpi_14 #t)))"
"(let-values(((m_8)(namespace->module ns_27 name_36)))"
"(let-values((()"
"(begin"
"(if m_8"
"(void)"
"(let-values()(raise-unknown-module-error 'instantiate name_36)))"
"(values))))"
"(let-values(((instantiate!_0)"
"(lambda(instance-phase_1 run-phase_1 ns_28)"
"(let-values(((mi_6)"
"(let-values(((or-part_133)"
"(let-values(((ns203_0) ns_28)"
"((name204_0) name_36)"
"((instance-phase205_0)"
" instance-phase_1))"
"(namespace->module-instance68.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns203_0"
" name204_0"
" instance-phase205_0))))"
"(if or-part_133"
" or-part_133"
"(namespace-create-module-instance!"
" ns_28"
" name_36"
" instance-phase_1"
" m_8"
" mpi_14)))))"
"(let-values(((run-phase199_0) run-phase_1)"
"((skip-run?200_0) skip-run?_0)"
"((otherwise-available?201_0) otherwise-available?_0)"
"((seen202_0) seen_17))"
"(run-module-instance!123.1"
" otherwise-available?201_0"
" run-phase199_0"
" seen202_0"
" #t"
" skip-run?200_0"
" mi_6"
" ns_28))))))"
"(if(module-cross-phase-persistent? m_8)"
"(let-values()"
"(instantiate!_0"
" 0"
" 0"
"(let-values(((or-part_169)(namespace-root-namespace ns_27)))"
"(if or-part_169 or-part_169 ns_27))))"
"(let-values()(instantiate!_0 instance-phase_0 run-phase_0 ns_27))))))))))))))))))"
"(define-values"
"(namespace-module-visit!102.1)"
"(lambda(visit-phase97_0 visit-phase98_0 ns99_0 mpi100_0 instance-phase101_0)"
"(let-values(((ns_29) ns99_0))"
"(let-values(((mpi_15) mpi100_0))"
"(let-values(((instance-phase_2) instance-phase101_0))"
"(let-values(((visit-phase_0)(if visit-phase98_0 visit-phase97_0(namespace-phase ns_29))))"
"(let-values()"
"(let-values(((temp209_0)(add1 visit-phase_0)))"
"(namespace-module-instantiate!94.1 #f #f temp209_0 #t #f #f #f #f ns_29 mpi_15 instance-phase_2)))))))))"
"(define-values"
"(namespace-module-make-available!110.1)"
"(lambda(visit-phase105_0 visit-phase106_0 ns107_0 mpi108_0 instance-phase109_0)"
"(let-values(((ns_30) ns107_0))"
"(let-values(((mpi_16) mpi108_0))"
"(let-values(((instance-phase_3) instance-phase109_0))"
"(let-values(((visit-phase_1)(if visit-phase106_0 visit-phase105_0(namespace-phase ns_30))))"
"(let-values()"
"(let-values(((temp213_0)(add1 visit-phase_1))((temp214_0) #t))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" temp213_0"
" #t"
" #f"
" #f"
" temp214_0"
" #t"
" ns_30"
" mpi_16"
" instance-phase_3)))))))))"
"(define-values"
"(run-module-instance!123.1)"
"(lambda(otherwise-available?115_0 run-phase113_0 seen116_0 seen120_0 skip-run?114_0 mi121_0 ns122_0)"
"(let-values(((mi_7) mi121_0))"
"(let-values(((ns_31) ns122_0))"
"(let-values(((run-phase_2) run-phase113_0))"
"(let-values(((skip-run?_1) skip-run?114_0))"
"(let-values(((otherwise-available?_1) otherwise-available?115_0))"
"(let-values(((seen_18)(if seen120_0 seen116_0 '#hasheq())))"
"(let-values()"
"(let-values()"
"(let-values(((m-ns_5)(module-instance-namespace mi_7)))"
"(let-values(((instance-phase_4)(namespace-0-phase m-ns_5)))"
"(let-values(((run-phase-level_0)(phase- run-phase_2 instance-phase_4)))"
"(if(if(let-values(((or-part_170) skip-run?_1))"
"(if or-part_170"
" or-part_170"
"(eq?"
" 'started"
"(hash-ref(module-instance-phase-level-to-state mi_7) run-phase-level_0 #f))))"
"(let-values(((or-part_171)(not otherwise-available?_1)))"
"(if or-part_171 or-part_171(module-instance-made-available? mi_7)))"
" #f)"
"(void)"
"(let-values()"
"(let-values(((m_9)(module-instance-module mi_7)))"
"(let-values(((mpi_17)(namespace-mpi m-ns_5)))"
"(let-values(((phase-shift_3) instance-phase_4))"
"(let-values(((bulk-binding-registry_2)(namespace-bulk-binding-registry m-ns_5)))"
"(begin"
"(if(hash-ref seen_18 mi_7 #f)"
"(let-values()"
"                                            (error 'require \"import cycle detected during module instantiation\"))"
"(void))"
"(if(module-instance-shifted-requires mi_7)"
"(void)"
"(let-values()"
"(set-module-instance-shifted-requires!"
" mi_7"
"(let-values(((lst_57)(module-requires m_9)))"
"(begin"
"(check-list lst_57)"
"((letrec-values(((for-loop_77)"
"(lambda(lst_58)"
"(if(pair? lst_58)"
"(let-values(((phase+mpis_0)(unsafe-car lst_58))"
"((rest_25)(unsafe-cdr lst_58)))"
"(let-values(((post-guard-var_10)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_10)"
"(let-values()"
"(let-values()"
"(cons"
"(car phase+mpis_0)"
"(let-values(((lst_59)"
"(cdr"
" phase+mpis_0)))"
"(begin"
"(check-list lst_59)"
"((letrec-values(((for-loop_78)"
"(lambda(lst_60)"
"(if(pair?"
" lst_60)"
"(let-values(((req-mpi_0)"
"(unsafe-car"
" lst_60))"
"((rest_26)"
"(unsafe-cdr"
" lst_60)))"
"(let-values(((post-guard-var_11)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_11)"
"(let-values()"
"(let-values()"
"(module-path-index-shift"
" req-mpi_0"
"(module-self"
" m_9)"
" mpi_17)))))"
"(let-values(((result_67)"
"(if(post-guard-var_11)"
"(for-loop_78"
" rest_26)"
" null)))"
"(cons"
" elem_11"
" result_67))))))"
" null))))"
" for-loop_78)"
" lst_59))))))))"
"(let-values(((result_68)"
"(if(post-guard-var_10)"
"(for-loop_77 rest_25)"
" null)))"
"(cons elem_10 result_68))))))"
" null))))"
" for-loop_77)"
" lst_57))))))"
"(let-values(((lst_61)(module-instance-shifted-requires mi_7)))"
"(begin"
"(check-list lst_61)"
"((letrec-values(((for-loop_79)"
"(lambda(lst_62)"
"(if(pair? lst_62)"
"(let-values(((phase+mpis_1)(unsafe-car lst_62))"
"((rest_27)(unsafe-cdr lst_62)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((req-phase_0)"
"(car"
" phase+mpis_1)))"
"(begin"
"(let-values(((lst_63)"
"(cdr"
" phase+mpis_1)))"
"(begin"
"(check-list"
" lst_63)"
"((letrec-values(((for-loop_80)"
"(lambda(lst_64)"
"(if(pair?"
" lst_64)"
"(let-values(((req-mpi_1)"
"(unsafe-car"
" lst_64))"
"((rest_28)"
"(unsafe-cdr"
" lst_64)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((temp217_0)"
"(phase+"
" instance-phase_4"
" req-phase_0))"
"((run-phase218_0)"
" run-phase_2)"
"((skip-run?219_0)"
" skip-run?_1)"
"((otherwise-available?220_0)"
" otherwise-available?_1)"
"((temp221_0)"
"(hash-set"
" seen_18"
" mi_7"
" #t)))"
"(namespace-module-instantiate!94.1"
" otherwise-available?220_0"
" #t"
" run-phase218_0"
" #t"
" temp221_0"
" #t"
" skip-run?219_0"
" #t"
" ns_31"
" req-mpi_1"
" temp217_0)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_80"
" rest_28)"
"(values))))"
"(values)))))"
" for-loop_80)"
" lst_63)))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_79 rest_27)(values))))"
"(values)))))"
" for-loop_79)"
" lst_61)))"
"(void)"
"(if(label-phase? instance-phase_4)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((start_15)(module-max-phase-level m_9))"
"((end_11)(sub1(module-min-phase-level m_9)))"
"((inc_3) -1))"
"(begin"
"(check-range start_15 end_11 inc_3)"
"((letrec-values(((for-loop_81)"
"(lambda(pos_10)"
"(if(> pos_10 end_11)"
"(let-values(((phase-level_13) pos_10))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_29)"
"(phase+"
" phase-level_13"
" phase-shift_3)))"
"(if(if(not"
" skip-run?_1)"
"(eqv?"
" phase_29"
" run-phase_2)"
" #f)"
"(let-values()"
"(if(eq?"
" 'started"
"(hash-ref"
"(module-instance-phase-level-to-state"
" mi_7)"
" phase-level_13"
" #f))"
"(void)"
"(let-values()"
"(let-values((()"
"(begin"
"(hash-set!"
"(module-instance-phase-level-to-state"
" mi_7)"
" phase-level_13"
" 'started)"
"(values))))"
"(let-values((()"
"(begin"
"(void"
"(namespace->definitions"
" m-ns_5"
" phase-level_13))"
"(values))))"
"(let-values(((p-ns_2)"
"(namespace->namespace-at-phase"
" m-ns_5"
" phase_29)))"
"(let-values(((insp_4)"
"(module-inspector"
" m_9)))"
"(let-values(((data-box_0)"
"(module-instance-data-box"
" mi_7)))"
"(let-values(((prep_0)"
"(module-prepare-instance"
" m_9)))"
"(let-values(((go_0)"
"(module-instantiate-phase"
" m_9)))"
"(begin"
"(prep_0"
" data-box_0"
" p-ns_2"
" phase-shift_3"
" mpi_17"
" bulk-binding-registry_2"
" insp_4)"
"(go_0"
" data-box_0"
" p-ns_2"
" phase-shift_3"
" phase-level_13"
" mpi_17"
" bulk-binding-registry_2"
" insp_4))))))))))))"
"(if(if otherwise-available?_1"
"(if(not"
"(negative?"
" run-phase_2))"
"(not"
"(hash-ref"
"(module-instance-phase-level-to-state"
" mi_7)"
" phase-level_13"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(namespace-available-module-instances"
" ns_31)"
" phase_29"
"(lambda(l_48)"
"(cons"
" mi_7"
" l_48))"
" null)"
"(hash-set!"
"(module-instance-phase-level-to-state"
" mi_7)"
" phase-level_13"
" 'available)))"
"(void)))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_81(+ pos_10 inc_3))"
"(values))))"
"(values)))))"
" for-loop_81)"
" start_15)))"
"(void))))"
"(if otherwise-available?_1"
"(let-values()(set-module-instance-made-available?! mi_7 #t))"
"(void))"
"(if skip-run?_1"
"(void)"
"(let-values()"
"(hash-set!"
"(module-instance-phase-level-to-state mi_7)"
" run-phase-level_0"
" 'started)))))))))))))))))))))))"
"(define-values"
"(namespace-visit-available-modules!)"
"(let-values(((namespace-visit-available-modules!129_0)"
"(lambda(ns128_0 run-phase126_0 run-phase127_0)"
"(let-values(((ns_32) ns128_0))"
"(let-values(((run-phase_3)(if run-phase127_0 run-phase126_0(namespace-phase ns_32))))"
"(let-values()(namespace-run-available-modules! ns_32(add1 run-phase_3))))))))"
"(case-lambda"
"((ns_33)(namespace-visit-available-modules!129_0 ns_33 #f #f))"
"((ns_34 run-phase126_1)(namespace-visit-available-modules!129_0 ns_34 run-phase126_1 #t)))))"
"(define-values"
"(namespace-run-available-modules!)"
"(let-values(((namespace-run-available-modules!134_0)"
"(lambda(ns133_0 run-phase131_0 run-phase132_0)"
"(let-values(((ns_35) ns133_0))"
"(let-values(((run-phase_4)(if run-phase132_0 run-phase131_0(namespace-phase ns_35))))"
"(let-values()"
"(if(null?(hash-ref(namespace-available-module-instances ns_35) run-phase_4 null))"
"(void)"
"(let-values()"
"(registry-call-with-lock"
"(1/namespace-module-registry ns_35)"
"(lambda()"
"((letrec-values(((loop_127)"
"(lambda()"
"(let-values(((mis_0)"
"(hash-ref"
"(namespace-available-module-instances ns_35)"
" run-phase_4"
" null)))"
"(if(null? mis_0)"
"(void)"
"(let-values()"
"(begin"
"(hash-set!"
"(namespace-available-module-instances ns_35)"
" run-phase_4"
" null)"
"(let-values(((lst_65)(reverse$1 mis_0)))"
"(begin"
"(check-list lst_65)"
"((letrec-values(((for-loop_82)"
"(lambda(lst_66)"
"(if(pair? lst_66)"
"(let-values(((mi_8)"
"(unsafe-car lst_66))"
"((rest_29)"
"(unsafe-cdr lst_66)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((run-phase224_0)"
" run-phase_4)"
"((temp225_0)"
" #f)"
"((temp226_0)"
" #f))"
"(run-module-instance!123.1"
" temp226_0"
" run-phase224_0"
" #f"
" #f"
" temp225_0"
" mi_8"
" ns_35)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_82 rest_29)"
"(values))))"
"(values)))))"
" for-loop_82)"
" lst_65)))"
"(void)"
"(loop_127))))))))"
" loop_127))))))))))))"
"(case-lambda"
"((ns_36)(namespace-run-available-modules!134_0 ns_36 #f #f))"
"((ns_37 run-phase131_1)(namespace-run-available-modules!134_0 ns_37 run-phase131_1 #t)))))"
"(define-values"
"(namespace-primitive-module-visit!)"
"(lambda(ns_38 name_37)"
"(let-values(((mi_9)(hash-ref(namespace-module-instances ns_38)(1/make-resolved-module-path name_37))))"
"(let-values(((temp229_0) 1)((temp230_0) #f)((temp231_0) #t))"
"(run-module-instance!123.1 temp231_0 temp229_0 #f #f temp230_0 mi_9 ns_38)))))"
"(define-values"
"(namespace-module-use->module+linklet-instances144.1)"
"(lambda(phase-shift138_0 shift-from136_0 shift-from139_0 shift-to137_0 shift-to140_0 ns142_0 mu143_0)"
"(let-values(((ns_39) ns142_0))"
"(let-values(((mu_0) mu143_0))"
"(let-values(((shift-from_0)(if shift-from139_0 shift-from136_0 #f)))"
"(let-values(((shift-to_0)(if shift-to140_0 shift-to137_0 #f)))"
"(let-values(((phase-shift_4) phase-shift138_0))"
"(let-values()"
"(let-values(((mod_1)(module-use-module mu_0)))"
"(let-values(((mi_10)"
"(let-values(((temp233_0)"
"(1/module-path-index-resolve"
"(if shift-from_0"
"(module-path-index-shift mod_1 shift-from_0 shift-to_0)"
" mod_1)))"
"((phase-shift234_0) phase-shift_4)"
"((temp235_0) #t))"
"(namespace->module-instance68.1"
" #f"
" #f"
" temp235_0"
" #t"
" #f"
" #f"
" ns_39"
" temp233_0"
" phase-shift234_0))))"
"(let-values(((m-ns_6)(module-instance-namespace mi_10)))"
"(let-values(((d_19)"
"(hash-ref"
"(namespace-phase-level-to-definitions m-ns_6)"
"(module-use-phase mu_0)"
" #f)))"
"(if d_19"
"(values mi_10(definitions-variables d_19))"
"                          (error \"namespace mismatch: phase level not found\" mu_0))))))))))))))"
"(define-values"
"(unresolve-requires)"
"(lambda(requires_1)"
"(let-values(((lst_67) requires_1))"
"(begin"
"(check-list lst_67)"
"((letrec-values(((for-loop_83)"
"(lambda(lst_68)"
"(if(pair? lst_68)"
"(let-values(((phase+mpis_2)(unsafe-car lst_68))((rest_30)(unsafe-cdr lst_68)))"
"(let-values(((post-guard-var_12)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_12)"
"(let-values()"
"(let-values()"
"(cons"
"(car phase+mpis_2)"
"(let-values(((lst_69)(cdr phase+mpis_2)))"
"(begin"
"(check-list lst_69)"
"((letrec-values(((for-loop_84)"
"(lambda(lst_70)"
"(if(pair? lst_70)"
"(let-values(((req-mpi_2)"
"(unsafe-car lst_70))"
"((rest_31)"
"(unsafe-cdr lst_70)))"
"(let-values(((post-guard-var_13)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_13)"
"(let-values()"
"(let-values()"
"(module-path-index-unresolve"
" req-mpi_2)))))"
"(let-values(((result_69)"
"(if(post-guard-var_13)"
"(for-loop_84"
" rest_31)"
" null)))"
"(cons elem_13 result_69))))))"
" null))))"
" for-loop_84)"
" lst_69))))))))"
"(let-values(((result_70)(if(post-guard-var_12)(for-loop_83 rest_30) null)))"
"(cons elem_12 result_70))))))"
" null))))"
" for-loop_83)"
" lst_67)))))"
"(define-values"
"(module-compute-access!)"
"(lambda(m_10)"
"(let-values(((access_0)"
"(let-values(((ht_71)(module-provides m_10)))"
"(begin"
"(check-in-hash ht_71)"
"((letrec-values(((for-loop_85)"
"(lambda(table_84 i_95)"
"(if i_95"
"(let-values(((phase_30 at-phase_6)(hash-iterate-key+value ht_71 i_95)))"
"(let-values(((table_85)"
"(let-values(((table_86) table_84))"
"(let-values(((table_87)"
"(let-values()"
"(let-values(((key_36 val_29)"
"(let-values()"
"(values"
" phase_30"
"(let-values(((ht_72)"
" at-phase_6))"
"(begin"
"(check-in-hash ht_72)"
"((letrec-values(((for-loop_86)"
"(lambda(table_88"
" i_96)"
"(if i_96"
"(let-values(((sym_22"
" binding/p_1)"
"(hash-iterate-key+value"
" ht_72"
" i_96)))"
"(let-values(((table_89)"
"(let-values(((table_90)"
" table_88))"
"(let-values(((table_91)"
"(let-values()"
"(let-values(((key_37"
" val_30)"
"(let-values()"
"(values"
"(module-binding-sym"
"(provided-as-binding"
" binding/p_1))"
"(if(provided-as-protected?"
" binding/p_1)"
" 'protected"
" 'provided)))))"
"(hash-set"
" table_90"
" key_37"
" val_30)))))"
"(values"
" table_91)))))"
"(if(not"
" #f)"
"(for-loop_86"
" table_89"
"(hash-iterate-next"
" ht_72"
" i_96))"
" table_89)))"
" table_88))))"
" for-loop_86)"
" '#hash()"
"(hash-iterate-first"
" ht_72))))))))"
"(hash-set table_86 key_36 val_29)))))"
"(values table_87)))))"
"(if(not #f)"
"(for-loop_85 table_85(hash-iterate-next ht_71 i_95))"
" table_85)))"
" table_84))))"
" for-loop_85)"
" '#hasheqv()"
"(hash-iterate-first ht_71))))))"
"(begin(set-module-access! m_10 access_0) access_0))))"
"(define-values"
"(binding->module-instance)"
"(lambda(b_42 ns_40 phase_31 id_11)"
"(let-values(((at-phase_7)(phase- phase_31(module-binding-phase b_42))))"
"(let-values(((mi_11)"
"(let-values(((temp2_0)(1/module-path-index-resolve(module-binding-module b_42)))"
"((at-phase3_0) at-phase_7)"
"((temp4_0)(module-binding-phase b_42))"
"((temp5_0)(lambda(mi_12) 'unavailable)))"
"(namespace->module-instance68.1 temp4_0 #t #f #f temp5_0 #t ns_40 temp2_0 at-phase3_0))))"
"(begin"
"(if(eq? mi_11 'unavailable)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(format"
"(string-append"
"                 \"module mismatch;\\n\""
"                 \" attempted to use a module that is not available\\n\""
"                 \"  possible cause:\\n\""
"                 \"   using (dynamic-require .... #f)\\n\""
"                 \"   but need (dynamic-require .... 0)\\n\""
"                 \"  module: ~s\\n\""
"                 \"  phase: ~s\")"
"(module-binding-module b_42)"
"(phase+ at-phase_7(module-binding-phase b_42)))"
" id_11))"
"(void))"
"(if mi_11"
"(void)"
"(let-values()"
"(error"
" 'expand"
"(string-append"
"                \"namespace mismatch; cannot locate module instance\\n\""
"                \"  module: ~s\\n\""
"                \"  use phase: ~a\\n\""
"                \"  definition phase: ~a\\n\""
"                \"  for identifier: ~s\")"
"(module-binding-module b_42)"
" phase_31"
"(module-binding-phase b_42)"
" id_11)))"
" mi_11)))))"
"(define-values"
"(check-access)"
"(lambda(b_42 mi_13 id_12 in-s_0 what_0)"
"(let-values(((m_11)(module-instance-module mi_13)))"
"(if(if m_11(not(module-no-protected? m_11)) #f)"
"(let-values()"
"(let-values(((access_1)"
"(let-values(((or-part_25)(module-access m_11)))"
"(if or-part_25 or-part_25(module-compute-access! m_11)))))"
"(let-values(((a_35)"
"(hash-ref"
"(hash-ref access_1(module-binding-phase b_42) '#hasheq())"
"(module-binding-sym b_42)"
" 'unexported)))"
"(if(let-values(((or-part_8)(eq? a_35 'unexported)))(if or-part_8 or-part_8(eq? a_35 'protected)))"
"(let-values()"
"(if(let-values(((or-part_3)"
"(inspector-superior?"
"(let-values(((or-part_4)(syntax-inspector id_12)))"
"(if or-part_4 or-part_4(current-code-inspector)))"
"(namespace-inspector(module-instance-namespace mi_13)))))"
"(if or-part_3"
" or-part_3"
"(if(module-binding-extra-inspector b_42)"
"(inspector-superior?"
"(module-binding-extra-inspector b_42)"
"(namespace-inspector(module-instance-namespace mi_13)))"
" #f)))"
"(void)"
"(let-values()"
"(let-values(((complain-id_0)"
"(let-values(((c-id_0)"
"(let-values(((or-part_11) in-s_0))"
"(if or-part_11 or-part_11(module-binding-sym b_42)))))"
"(if(not"
"(eq?"
"(if(syntax?$1 c-id_0)(syntax-content c-id_0) c-id_0)"
"(syntax-content id_12)))"
" c-id_0"
" #f))))"
"(raise-syntax-error$1"
" #f"
"(format"
"                          \"access disallowed by code inspector to ~a ~a\\n  from module: ~a\""
" a_35"
" what_0"
"(1/module-path-index-resolve(namespace-mpi(module-instance-namespace mi_13))))"
" complain-id_0"
" id_12"
" null)))))"
"(void)))))"
"(void)))))"
"(define-values"
"(resolve+shift/extra-inspector)"
"(lambda(id_13 phase_32 ns_41)"
"((letrec-values(((loop_128)"
"(lambda(id_14 in-s_1)"
"(let-values(((b_58)"
"(let-values(((temp3_0) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f temp3_0 #t #f #f id_14 phase_32))))"
"(let-values(((c1_126)(binding-free=id b_58)))"
"(if c1_126"
"((lambda(next-id_0)"
"(let-values((()"
"(begin"
"(if(if(module-binding? b_58)"
"(not(top-level-module-path-index?(module-binding-module b_58)))"
" #f)"
"(let-values()"
"(let-values(((mi_14)"
"(binding->module-instance"
" b_58"
" ns_41"
" phase_32"
" id_14)))"
"                                                       (check-access b_58 mi_14 id_14 in-s_1 \"provided binding\")))"
"(void))"
"(values))))"
"(let-values(((next-b_0)"
"(loop_128"
" next-id_0"
"(let-values(((or-part_172) in-s_1))"
"(if or-part_172 or-part_172 id_14)))))"
"(if(if(module-binding? next-b_0)"
"(if(not(module-binding-extra-inspector next-b_0))"
"(syntax-inspector id_14)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((temp5_1)(syntax-inspector id_14)))"
"(module-binding-update48.1"
" temp5_1"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" next-b_0)))"
"(let-values() next-b_0)))))"
" c1_126)"
"(let-values() b_58)))))))"
" loop_128)"
" id_13"
" #f)))"
"(define-values"
"(1/prop:set!-transformer 1/set!-transformer? set!-transformer-value)"
"(make-struct-type-property"
" 'set!-transformer"
"(lambda(v_31 info_1)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_9)"
"(if(procedure? v_31)"
"(let-values(((or-part_2)(procedure-arity-includes? v_31 1)))"
"(if or-part_2 or-part_2(procedure-arity-includes? v_31 2)))"
" #f)))"
"(if or-part_9 or-part_9(exact-nonnegative-integer? v_31)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:set!-transformer"
"(string-append"
"                           \"(or/c (procedure-arity-includes? proc 1)\\n\""
"                           \"      (procedure-arity-includes? proc 2)\\n\""
"                           \"      exact-nonnegative-integer?)\")"
" v_31)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_31)"
"(let-values()"
"(begin"
"(if(<= v_31(list-ref info_1 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_31"
"                                  \"initialized-field count\""
"(list-ref info_1 1))))"
"(if(member v_31(list-ref info_1 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_31)))))"
"(void))"
"(values))))"
"(let-values(((ref_0)(list-ref info_1 3)))"
"(if(integer? v_31)"
"(let-values()"
"(lambda(t_34)"
"(let-values(((p_40)(ref_0 t_34 v_31)))"
"(if(if(procedure? p_40)(procedure-arity-includes? p_40 1) #f)"
" p_40"
"                     (lambda (s_3) (error \"bad syntax:\" s_3))))))"
"(let-values()(lambda(t_14) v_31)))))))))"
"(define-values"
"(1/make-set!-transformer)"
"(let-values()"
"(let-values(((struct:set!-transformer_0 set!-transformer1_0 set!-transformer?_0 set!-transformer-proc_0)"
"(let-values(((struct:_35 make-_35 ?_35 -ref_35 -set!_35)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'set!-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:set!-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'set!-transformer)))))"
"(values struct:_35 make-_35 ?_35(make-struct-field-accessor -ref_35 0 'proc)))))"
"(lambda(proc_2)"
"(begin"
"(if(if(procedure? proc_2)(procedure-arity-includes? proc_2 1) #f)"
"(void)"
"            (let-values () (raise-argument-error 'make-set!-transformer \"(procedure-arity-includes/c 1)\" proc_2)))"
"(set!-transformer1_0 proc_2))))))"
"(define-values"
"(1/set!-transformer-procedure)"
"(lambda(t_37)"
"(let-values(((v_89)((set!-transformer-value t_37) t_37)))"
"(if(procedure-arity-includes? v_89 1) v_89(lambda(s_160)(v_89 t_37 s_160))))))"
"(define-values(empty-env) '#hasheq())"
"(define-values(env-extend)(lambda(env_0 key_38 val_18)(hash-set env_0 key_38 val_18)))"
"(define-values(variable)(gensym 'variable))"
"(define-values"
"(variable?)"
"(lambda(t_14)(let-values(((or-part_8)(eq? t_14 variable)))(if or-part_8 or-part_8(local-variable? t_14)))))"
"(define-values"
"(struct:local-variable local-variable1.1 local-variable? local-variable-id)"
"(let-values(((struct:_36 make-_36 ?_36 -ref_36 -set!_36)"
"(let-values()"
"(let-values()"
"(make-struct-type 'local-variable #f 1 0 #f null(current-inspector) #f '(0) #f 'local-variable)))))"
"(values struct:_36 make-_36 ?_36(make-struct-field-accessor -ref_36 0 'id))))"
"(define-values"
"(substitute-variable6.1)"
"(lambda(no-stops?2_0 id4_0 t5_0)"
"(let-values(((id_15) id4_0))"
"(let-values(((t_38) t5_0))"
"(let-values(((no-stops?_0) no-stops?2_0))"
"(let-values()"
"(if(if no-stops?_0(local-variable? t_38) #f)"
"(let-values(((bind-id_0)(local-variable-id t_38)))"
"(syntax-rearm$1(datum->syntax$1(syntax-disarm$1 bind-id_0)(syntax-e$1 bind-id_0) id_15 id_15) id_15))"
" id_15)))))))"
"(define-values(missing)(gensym 'missing))"
"(define-values"
"(transformer?)"
"(lambda(t_39)"
"(let-values(((or-part_36)(procedure? t_39)))"
"(if or-part_36"
" or-part_36"
"(let-values(((or-part_173)(1/set!-transformer? t_39)))"
"(if or-part_173 or-part_173(1/rename-transformer? t_39)))))))"
"(define-values"
"(transformer->procedure)"
"(lambda(t_19)"
"(if(1/set!-transformer? t_19)"
"(let-values()(1/set!-transformer-procedure t_19))"
"(if(1/rename-transformer? t_19)(let-values()(lambda(s_161) s_161))(let-values() t_19)))))"
"(define-values"
"(struct:core-form core-form9.1 core-form? core-form-expander core-form-name)"
"(let-values(((struct:_37 make-_37 ?_37 -ref_37 -set!_37)"
"(let-values()"
"(let-values()(make-struct-type 'core-form #f 2 0 #f null #f #f '(0 1) #f 'core-form)))))"
"(values"
" struct:_37"
" make-_37"
" ?_37"
"(make-struct-field-accessor -ref_37 0 'expander)"
"(make-struct-field-accessor -ref_37 1 'name))))"
"(define-values"
"(add-binding!17.1)"
"(lambda(in10_0 in12_0 just-for-nominal?11_1 just-for-nominal?13_0 id14_0 binding15_1 phase16_0)"
"(let-values(((id_16) id14_0))"
"(let-values(((binding_9) binding15_1))"
"(let-values(((phase_33) phase16_0))"
"(let-values(((in-s_2)(if in12_0 in10_0 #f)))"
"(let-values(((just-for-nominal?_2)(if just-for-nominal?13_0 just-for-nominal?11_1 #f)))"
"(let-values()"
"(begin"
"(check-id-taint id_16 in-s_2)"
"(let-values(((temp53_0)(syntax-scope-set id_16 phase_33))"
"((temp54_0)(syntax-e$1 id_16))"
"((binding55_0) binding_9)"
"((just-for-nominal?56_0) just-for-nominal?_2))"
"(add-binding-in-scopes!16.1 just-for-nominal?56_0 #t temp53_0 temp54_0 binding55_0)))))))))))"
"(define-values"
"(add-bulk-binding!25.1)"
"(lambda(in20_0 in21_0 s22_0 binding23_0 phase24_0)"
"(let-values(((s_29) s22_0))"
"(let-values(((binding_10) binding23_0))"
"(let-values(((phase_34) phase24_0))"
"(let-values(((in-s_3)(if in21_0 in20_0 #f)))"
"(let-values()"
"(begin"
"(if(syntax-tainted?$1 s_29)"
"                  (let-values () (raise-syntax-error$1 #f \"cannot bind from tainted syntax\" in-s_3 s_29))"
"(void))"
"(add-bulk-binding-in-scopes!(syntax-scope-set s_29 phase_34) binding_10)))))))))"
"(define-values"
"(add-local-binding!35.1)"
"(lambda(frame-id28_0 frame-id30_0 in29_0 in31_0 id32_0 phase33_0 counter34_0)"
"(let-values(((id_17) id32_0))"
"(let-values(((phase_35) phase33_0))"
"(let-values(((counter_1) counter34_0))"
"(let-values(((frame-id_5)(if frame-id30_0 frame-id28_0 #f)))"
"(let-values(((in-s_4)(if in31_0 in29_0 #f)))"
"(let-values()"
"(let-values((()(begin(check-id-taint id_17 in-s_4)(values))))"
"(let-values((()(begin(set-box! counter_1(add1(unbox counter_1)))(values))))"
"(let-values(((key_9)"
"                                  (string->uninterned-symbol (format \"~a_~a\" (syntax-e$1 id_17) (unbox counter_1)))))"
"(begin"
"(let-values(((temp57_0)(syntax-scope-set id_17 phase_35))"
"((temp58_1)(syntax-e$1 id_17))"
"((temp59_1)"
"(let-values(((frame-id61_0) frame-id_5))"
"(make-local-binding7.1 frame-id61_0 #t #f #f key_9))))"
"(add-binding-in-scopes!16.1 #f #f temp57_0 temp58_1 temp59_1))"
" key_9))))))))))))"
"(define-values"
"(check-id-taint)"
"(lambda(id_18 in-s_5)"
"(if(syntax-tainted?$1 id_18)"
"      (let-values () (raise-syntax-error$1 #f \"cannot bind tainted identifier\" in-s_5 id_18))"
"(void))))"
"(define-values"
"(binding-lookup48.1)"
"(lambda(in38_0"
" in40_0"
" out-of-context-as-variable?39_0"
" out-of-context-as-variable?41_0"
" b42_0"
" env43_0"
" lift-envs44_0"
" ns45_0"
" phase46_0"
" id47_0)"
"(let-values(((b_59) b42_0))"
"(let-values(((env_1) env43_0))"
"(let-values(((lift-envs_0) lift-envs44_0))"
"(let-values(((ns_42) ns45_0))"
"(let-values(((phase_36) phase46_0))"
"(let-values(((id_19) id47_0))"
"(let-values(((in-s_6)(if in40_0 in38_0 #f)))"
"(let-values(((out-of-context-as-variable?_0)"
"(if out-of-context-as-variable?41_0 out-of-context-as-variable?39_0 #f)))"
"(let-values()"
"(if(module-binding? b_59)"
"(let-values()"
"(let-values(((top-level?_0)(top-level-module-path-index?(module-binding-module b_59))))"
"(let-values(((mi_15)"
"(if(not top-level?_0)"
"(binding->module-instance b_59 ns_42 phase_36 id_19)"
" #f)))"
"(let-values(((m_12)(if mi_15(module-instance-module mi_15) #f)))"
"(let-values(((primitive?_1)(if m_12(module-primitive? m_12) #f)))"
"(let-values(((m-ns_7)"
"(if top-level?_0"
" ns_42"
"(if mi_15(module-instance-namespace mi_15) #f))))"
"(let-values((()(begin(check-taint id_19)(values))))"
"(let-values(((t_40)"
"(namespace-get-transformer"
" m-ns_7"
"(module-binding-phase b_59)"
"(module-binding-sym b_59)"
" variable)))"
"(let-values((()"
"(begin"
"(if mi_15"
"(let-values()"
"(check-access"
" b_59"
" mi_15"
" id_19"
" in-s_6"
"                                                             (if (variable? t_40) \"variable\" \"transformer\")))"
"(void))"
"(values))))"
"(let-values(((insp_5)"
"(if mi_15"
"(if(module-instance-module mi_15)"
"(module-inspector(module-instance-module mi_15))"
" #f)"
" #f)))"
"(values t_40 primitive?_1 insp_5)))))))))))"
"(if(local-binding? b_59)"
"(let-values()"
"(let-values(((t_41)(hash-ref env_1(local-binding-key b_59) missing)))"
"(if(eq? t_41 missing)"
"(let-values()"
"(values"
"(let-values(((or-part_174)"
"(let-values(((lst_71) lift-envs_0))"
"(begin"
"(check-list lst_71)"
"((letrec-values(((for-loop_87)"
"(lambda(result_71 lst_72)"
"(if(pair? lst_72)"
"(let-values(((lift-env_0)"
"(unsafe-car lst_72))"
"((rest_32)(unsafe-cdr lst_72)))"
"(let-values(((result_72)"
"(let-values()"
"(let-values(((result_73)"
"(let-values()"
"(let-values()"
"(hash-ref"
"(unbox"
" lift-env_0)"
"(local-binding-key"
" b_59)"
" #f)))))"
"(values result_73)))))"
"(if(if(not"
"((lambda x_79 result_72)"
" lift-env_0))"
"(not #f)"
" #f)"
"(for-loop_87 result_72 rest_32)"
" result_72)))"
" result_71))))"
" for-loop_87)"
" #f"
" lst_71)))))"
"(if or-part_174"
" or-part_174"
"(if out-of-context-as-variable?_0"
" variable"
"                                         (error \"identifier used out of context:\" id_19))))"
" #f"
" #f))"
"(let-values()(begin(check-taint id_19)(values t_41 #f #f))))))"
"                          (let-values () (error \"internal error: unknown binding for lookup:\" b_59)))))))))))))))"
"(define-values"
"(check-taint)"
"(lambda(id_20)"
"(if(syntax-tainted?$1 id_20)"
"      (let-values () (raise-syntax-error$1 #f \"cannot use identifier tainted by macro transformation\" id_20))"
"(void))))"
"(define-values(cons-ish)(lambda(a_36 b_60)(if(null? b_60) a_36(cons a_36 b_60))))"
"(define-values"
"(free-id-set)"
"(lambda(phase_37 ids_0)"
"(let-values(((lst_73) ids_0))"
"(begin"
"(check-list lst_73)"
"((letrec-values(((for-loop_88)"
"(lambda(ht_73 lst_74)"
"(if(pair? lst_74)"
"(let-values(((id_21)(unsafe-car lst_74))((rest_33)(unsafe-cdr lst_74)))"
"(let-values(((ht_74)"
"(let-values(((ht_75) ht_73))"
"(let-values(((ht_76)"
"(let-values()"
"(let-values(((sym_23)"
"(identifier-binding-symbol$1"
" id_21"
" phase_37)))"
"(hash-set"
" ht_75"
" sym_23"
"(cons-ish id_21(hash-ref ht_75 sym_23 null)))))))"
"(values ht_76)))))"
"(if(not #f)(for-loop_88 ht_74 rest_33) ht_74)))"
" ht_73))))"
" for-loop_88)"
" '#hasheq()"
" lst_73)))))"
"(define-values(empty-free-id-set)(free-id-set 0 null))"
"(define-values"
"(free-id-set-member?)"
"(lambda(fs_0 phase_38 given-id_0)"
"(if(zero?(hash-count fs_0))"
" #f"
"(let-values(((lst_75)(hash-ref fs_0(identifier-binding-symbol$1 given-id_0 phase_38) null)))"
"(begin"
"(void)"
"((letrec-values(((for-loop_89)"
"(lambda(result_74 lst_76)"
"(if(not(null? lst_76))"
"(let-values(((id_14)(if(pair? lst_76)(car lst_76) lst_76))"
"((rest_34)(if(pair? lst_76)(cdr lst_76) null)))"
"(let-values(((result_75)"
"(let-values()"
"(let-values(((result_76)"
"(let-values()"
"(let-values()"
"(free-identifier=?$1"
" id_14"
" given-id_0"
" phase_38"
" phase_38)))))"
"(values result_76)))))"
"(if(if(not((lambda x_80 result_75) id_14))(not #f) #f)"
"(for-loop_89 result_75 rest_34)"
" result_75)))"
" result_74))))"
" for-loop_89)"
" #f"
" lst_75))))))"
"(define-values"
"(free-id-set-empty-or-just-module*?)"
"(lambda(fs_1)(let-values(((c_18)(hash-count fs_1)))(<= c_18 1))))"
"(define-values"
"(struct:expand-context/outer"
" expand-context/outer1.1"
" expand-context/outer?"
" expand-context/outer-context"
" expand-context/outer-env"
" expand-context/outer-post-expansion-scope-action"
" expand-context/outer-scopes"
" expand-context/outer-def-ctx-scopes"
" expand-context/outer-binding-layer"
" expand-context/outer-reference-records"
" expand-context/outer-only-immediate?"
" expand-context/outer-need-eventually-defined"
" expand-context/outer-current-introduction-scopes"
" expand-context/outer-name)"
"(let-values(((struct:_38 make-_38 ?_38 -ref_38 -set!_38)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expand-context"
" struct:root-expand-context/outer"
" 11"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10)"
" #f"
" 'expand-context/outer)))))"
"(values"
" struct:_38"
" make-_38"
" ?_38"
"(make-struct-field-accessor -ref_38 0 'context)"
"(make-struct-field-accessor -ref_38 1 'env)"
"(make-struct-field-accessor -ref_38 2 'post-expansion-scope-action)"
"(make-struct-field-accessor -ref_38 3 'scopes)"
"(make-struct-field-accessor -ref_38 4 'def-ctx-scopes)"
"(make-struct-field-accessor -ref_38 5 'binding-layer)"
"(make-struct-field-accessor -ref_38 6 'reference-records)"
"(make-struct-field-accessor -ref_38 7 'only-immediate?)"
"(make-struct-field-accessor -ref_38 8 'need-eventually-defined)"
"(make-struct-field-accessor -ref_38 9 'current-introduction-scopes)"
"(make-struct-field-accessor -ref_38 10 'name))))"
"(define-values"
"(struct:expand-context/inner"
" expand-context/inner2.1"
" expand-context/inner?"
" expand-context/inner-to-parsed?"
" expand-context/inner-phase"
" expand-context/inner-namespace"
" expand-context/inner-user-env"
" expand-context/inner-just-once?"
" expand-context/inner-module-begin-k"
" expand-context/inner-allow-unbound?"
" expand-context/inner-in-local-expand?"
" expand-context/inner-stops"
" expand-context/inner-declared-submodule-names"
" expand-context/inner-lifts"
" expand-context/inner-lift-envs"
" expand-context/inner-module-lifts"
" expand-context/inner-require-lifts"
" expand-context/inner-to-module-lifts"
" expand-context/inner-requires+provides"
" expand-context/inner-observer"
" expand-context/inner-for-serializable?)"
"(let-values(((struct:_39 make-_39 ?_39 -ref_39 -set!_39)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expand-context/inner"
" struct:root-expand-context/inner"
" 18"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)"
" #f"
" 'expand-context/inner)))))"
"(values"
" struct:_39"
" make-_39"
" ?_39"
"(make-struct-field-accessor -ref_39 0 'to-parsed?)"
"(make-struct-field-accessor -ref_39 1 'phase)"
"(make-struct-field-accessor -ref_39 2 'namespace)"
"(make-struct-field-accessor -ref_39 3 'user-env)"
"(make-struct-field-accessor -ref_39 4 'just-once?)"
"(make-struct-field-accessor -ref_39 5 'module-begin-k)"
"(make-struct-field-accessor -ref_39 6 'allow-unbound?)"
"(make-struct-field-accessor -ref_39 7 'in-local-expand?)"
"(make-struct-field-accessor -ref_39 8 'stops)"
"(make-struct-field-accessor -ref_39 9 'declared-submodule-names)"
"(make-struct-field-accessor -ref_39 10 'lifts)"
"(make-struct-field-accessor -ref_39 11 'lift-envs)"
"(make-struct-field-accessor -ref_39 12 'module-lifts)"
"(make-struct-field-accessor -ref_39 13 'require-lifts)"
"(make-struct-field-accessor -ref_39 14 'to-module-lifts)"
"(make-struct-field-accessor -ref_39 15 'requires+provides)"
"(make-struct-field-accessor -ref_39 16 'observer)"
"(make-struct-field-accessor -ref_39 17 'for-serializable?))))"
"(define-values"
"(expand-context/make)"
"(lambda(module-scopes_2"
" post-expansion-scope_2"
" top-level-bind-scope_1"
" all-scopes-stx_2"
" use-site-scopes_1"
" defined-syms_1"
" frame-id_6"
" counter_2"
" lift-key_1"
" to-parsed?_0"
" context_0"
" phase_39"
" namespace_0"
" env_2"
" user-env_0"
" post-expansion-scope-action_0"
" scopes_18"
" def-ctx-scopes_0"
" binding-layer_0"
" reference-records_0"
" only-immediate?_0"
" just-once?_0"
" module-begin-k_0"
" need-eventually-defined_0"
" allow-unbound?_0"
" in-local-expand?_0"
" stops_0"
" current-introduction-scopes_0"
" declared-submodule-names_0"
" lifts_0"
" lift-envs_1"
" module-lifts_0"
" require-lifts_0"
" to-module-lifts_0"
" requires+provides_0"
" name_38"
" observer_0"
" for-serializable?_0)"
"(expand-context/outer1.1"
"(expand-context/inner2.1"
" module-scopes_2"
" top-level-bind-scope_1"
" all-scopes-stx_2"
" defined-syms_1"
" counter_2"
" lift-key_1"
" to-parsed?_0"
" phase_39"
" namespace_0"
" user-env_0"
" just-once?_0"
" module-begin-k_0"
" allow-unbound?_0"
" in-local-expand?_0"
" stops_0"
" declared-submodule-names_0"
" lifts_0"
" lift-envs_1"
" module-lifts_0"
" require-lifts_0"
" to-module-lifts_0"
" requires+provides_0"
" observer_0"
" for-serializable?_0)"
" post-expansion-scope_2"
" use-site-scopes_1"
" frame-id_6"
" context_0"
" env_2"
" post-expansion-scope-action_0"
" scopes_18"
" def-ctx-scopes_0"
" binding-layer_0"
" reference-records_0"
" only-immediate?_0"
" need-eventually-defined_0"
" current-introduction-scopes_0"
" name_38)))"
"(define-values(expand-context-context)(lambda(v_103)(expand-context/outer-context v_103)))"
"(define-values(expand-context-env)(lambda(v_104)(expand-context/outer-env v_104)))"
"(define-values"
"(expand-context-post-expansion-scope-action)"
"(lambda(v_105)(expand-context/outer-post-expansion-scope-action v_105)))"
"(define-values(expand-context-scopes)(lambda(v_106)(expand-context/outer-scopes v_106)))"
"(define-values(expand-context-def-ctx-scopes)(lambda(v_107)(expand-context/outer-def-ctx-scopes v_107)))"
"(define-values(expand-context-binding-layer)(lambda(v_108)(expand-context/outer-binding-layer v_108)))"
"(define-values(expand-context-reference-records)(lambda(v_109)(expand-context/outer-reference-records v_109)))"
"(define-values(expand-context-only-immediate?)(lambda(v_110)(expand-context/outer-only-immediate? v_110)))"
"(define-values"
"(expand-context-need-eventually-defined)"
"(lambda(v_111)(expand-context/outer-need-eventually-defined v_111)))"
"(define-values"
"(expand-context-current-introduction-scopes)"
"(lambda(v_112)(expand-context/outer-current-introduction-scopes v_112)))"
"(define-values(expand-context-name)(lambda(v_45)(expand-context/outer-name v_45)))"
"(define-values"
"(expand-context-to-parsed?)"
"(lambda(v_113)(expand-context/inner-to-parsed?(root-expand-context/outer-inner v_113))))"
"(define-values"
"(expand-context-phase)"
"(lambda(v_114)(expand-context/inner-phase(root-expand-context/outer-inner v_114))))"
"(define-values"
"(expand-context-namespace)"
"(lambda(v_46)(expand-context/inner-namespace(root-expand-context/outer-inner v_46))))"
"(define-values"
"(expand-context-user-env)"
"(lambda(v_115)(expand-context/inner-user-env(root-expand-context/outer-inner v_115))))"
"(define-values"
"(expand-context-just-once?)"
"(lambda(v_116)(expand-context/inner-just-once?(root-expand-context/outer-inner v_116))))"
"(define-values"
"(expand-context-module-begin-k)"
"(lambda(v_117)(expand-context/inner-module-begin-k(root-expand-context/outer-inner v_117))))"
"(define-values"
"(expand-context-allow-unbound?)"
"(lambda(v_118)(expand-context/inner-allow-unbound?(root-expand-context/outer-inner v_118))))"
"(define-values"
"(expand-context-in-local-expand?)"
"(lambda(v_119)(expand-context/inner-in-local-expand?(root-expand-context/outer-inner v_119))))"
"(define-values"
"(expand-context-stops)"
"(lambda(v_120)(expand-context/inner-stops(root-expand-context/outer-inner v_120))))"
"(define-values"
"(expand-context-declared-submodule-names)"
"(lambda(v_121)(expand-context/inner-declared-submodule-names(root-expand-context/outer-inner v_121))))"
"(define-values"
"(expand-context-lifts)"
"(lambda(v_122)(expand-context/inner-lifts(root-expand-context/outer-inner v_122))))"
"(define-values"
"(expand-context-lift-envs)"
"(lambda(v_123)(expand-context/inner-lift-envs(root-expand-context/outer-inner v_123))))"
"(define-values"
"(expand-context-module-lifts)"
"(lambda(v_124)(expand-context/inner-module-lifts(root-expand-context/outer-inner v_124))))"
"(define-values"
"(expand-context-require-lifts)"
"(lambda(v_125)(expand-context/inner-require-lifts(root-expand-context/outer-inner v_125))))"
"(define-values"
"(expand-context-to-module-lifts)"
"(lambda(v_126)(expand-context/inner-to-module-lifts(root-expand-context/outer-inner v_126))))"
"(define-values"
"(expand-context-requires+provides)"
"(lambda(v_127)(expand-context/inner-requires+provides(root-expand-context/outer-inner v_127))))"
"(define-values"
"(expand-context-observer)"
"(lambda(v_128)(expand-context/inner-observer(root-expand-context/outer-inner v_128))))"
"(define-values"
"(expand-context-for-serializable?)"
"(lambda(v_129)(expand-context/inner-for-serializable?(root-expand-context/outer-inner v_129))))"
"(define-values"
"(make-expand-context8.1)"
"(lambda(for-serializable?4_0 for-serializable?6_0 to-parsed?3_0 to-parsed?5_0 ns7_0)"
"(let-values(((ns_43) ns7_0))"
"(let-values(((to-parsed?_1)(if to-parsed?5_0 to-parsed?3_0 #f)))"
"(let-values(((for-serializable?_1)(if for-serializable?6_0 for-serializable?4_0 #f)))"
"(let-values()"
"(let-values(((root-ctx_1)(namespace-get-root-expand-ctx ns_43)))"
"(expand-context/make"
"(root-expand-context-module-scopes root-ctx_1)"
"(root-expand-context-post-expansion-scope root-ctx_1)"
"(root-expand-context-top-level-bind-scope root-ctx_1)"
"(root-expand-context-all-scopes-stx root-ctx_1)"
"(root-expand-context-use-site-scopes root-ctx_1)"
"(root-expand-context-defined-syms root-ctx_1)"
"(root-expand-context-frame-id root-ctx_1)"
"(root-expand-context-counter root-ctx_1)"
"(root-expand-context-lift-key root-ctx_1)"
" to-parsed?_1"
" 'top-level"
"(namespace-phase ns_43)"
" ns_43"
" empty-env"
" '#hasheq()"
" push-scope"
" null"
" #f"
"(root-expand-context-frame-id root-ctx_1)"
" null"
" #f"
" #f"
" #f"
" #f"
" #t"
" #f"
" empty-free-id-set"
" null"
" '#hasheq()"
" #f"
" '()"
" #f"
" #f"
" #f"
" #f"
" #f"
"(current-expand-observe)"
" for-serializable?_1))))))))"
"(define-values"
"(copy-root-expand-context)"
"(lambda(ctx_1 root-ctx_2)"
"(let-values(((v_130) ctx_1))"
"(let-values(((the-struct_37) v_130))"
"(if(expand-context/outer? the-struct_37)"
"(let-values(((post-expansion-scope26_0)(root-expand-context-post-expansion-scope root-ctx_2))"
"((use-site-scopes27_0)(root-expand-context-use-site-scopes root-ctx_2))"
"((frame-id28_1)(root-expand-context-frame-id root-ctx_2))"
"((binding-layer29_0)(root-expand-context-frame-id root-ctx_2))"
"((inner30_0)"
"(let-values(((the-struct_38)(root-expand-context/outer-inner v_130)))"
"(if(expand-context/inner? the-struct_38)"
"(let-values(((module-scopes31_0)(root-expand-context-module-scopes root-ctx_2))"
"((top-level-bind-scope32_0)"
"(root-expand-context-top-level-bind-scope root-ctx_2))"
"((all-scopes-stx33_0)(root-expand-context-all-scopes-stx root-ctx_2))"
"((defined-syms34_0)(root-expand-context-defined-syms root-ctx_2))"
"((counter35_0)(root-expand-context-counter root-ctx_2))"
"((lift-key36_0)(root-expand-context-lift-key root-ctx_2)))"
"(expand-context/inner2.1"
" module-scopes31_0"
" top-level-bind-scope32_0"
" all-scopes-stx33_0"
" defined-syms34_0"
" counter35_0"
" lift-key36_0"
"(expand-context/inner-to-parsed? the-struct_38)"
"(expand-context/inner-phase the-struct_38)"
"(expand-context/inner-namespace the-struct_38)"
"(expand-context/inner-user-env the-struct_38)"
"(expand-context/inner-just-once? the-struct_38)"
"(expand-context/inner-module-begin-k the-struct_38)"
"(expand-context/inner-allow-unbound? the-struct_38)"
"(expand-context/inner-in-local-expand? the-struct_38)"
"(expand-context/inner-stops the-struct_38)"
"(expand-context/inner-declared-submodule-names the-struct_38)"
"(expand-context/inner-lifts the-struct_38)"
"(expand-context/inner-lift-envs the-struct_38)"
"(expand-context/inner-module-lifts the-struct_38)"
"(expand-context/inner-require-lifts the-struct_38)"
"(expand-context/inner-to-module-lifts the-struct_38)"
"(expand-context/inner-requires+provides the-struct_38)"
"(expand-context/inner-observer the-struct_38)"
"(expand-context/inner-for-serializable? the-struct_38)))"
"                            (raise-argument-error 'struct-copy \"expand-context/inner?\" the-struct_38)))))"
"(expand-context/outer1.1"
" inner30_0"
" post-expansion-scope26_0"
" use-site-scopes27_0"
" frame-id28_1"
"(expand-context/outer-context the-struct_37)"
"(expand-context/outer-env the-struct_37)"
"(expand-context/outer-post-expansion-scope-action the-struct_37)"
"(expand-context/outer-scopes the-struct_37)"
"(expand-context/outer-def-ctx-scopes the-struct_37)"
" binding-layer29_0"
"(expand-context/outer-reference-records the-struct_37)"
"(expand-context/outer-only-immediate? the-struct_37)"
"(expand-context/outer-need-eventually-defined the-struct_37)"
"(expand-context/outer-current-introduction-scopes the-struct_37)"
"(expand-context/outer-name the-struct_37)))"
"          (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_37))))))"
"(define-values(current-expand-context)(make-parameter #f))"
"(define-values"
"(get-current-expand-context15.1)"
"(lambda(fail-ok?11_0 fail-ok?12_0 who13_0 who14_0)"
"(let-values(((who_10)(if who14_0 who13_0 'unexpected)))"
"(let-values(((fail-ok?_0)(if fail-ok?12_0 fail-ok?11_0 #f)))"
"(let-values()"
"(let-values(((or-part_175)(force(current-expand-context))))"
"(if or-part_175"
" or-part_175"
"              (if fail-ok?_0 #f (raise-arguments-error who_10 \"not currently expanding\")))))))))"
"(define-values"
"(current-expand-observe)"
"(make-parameter"
" #f"
"(lambda(v_131)"
"(begin"
"(if(let-values(((or-part_176)(not v_131)))"
"(if or-part_176 or-part_176(if(procedure? v_131)(procedure-arity-includes? v_131 2) #f)))"
"(void)"
"(let-values()"
"           (raise-argument-error 'current-expand-observe \"(or/c (procedure-arity-includes/c 2) #f)\" v_131)))"
" v_131))))"
"(define-values"
"(as-expression-context)"
"(lambda(ctx_2)"
"(if(if(eq? 'expression(expand-context-context ctx_2))(not(expand-context-name ctx_2)) #f)"
"(let-values() ctx_2)"
"(let-values()"
"(let-values(((v_132) ctx_2))"
"(let-values(((the-struct_39) v_132))"
"(if(expand-context/outer? the-struct_39)"
"(let-values(((context37_0) 'expression)"
"((name38_0) #f)"
"((post-expansion-scope39_0) #f)"
"((inner40_0)(root-expand-context/outer-inner v_132)))"
"(expand-context/outer1.1"
" inner40_0"
" post-expansion-scope39_0"
"(root-expand-context/outer-use-site-scopes the-struct_39)"
"(root-expand-context/outer-frame-id the-struct_39)"
" context37_0"
"(expand-context/outer-env the-struct_39)"
"(expand-context/outer-post-expansion-scope-action the-struct_39)"
"(expand-context/outer-scopes the-struct_39)"
"(expand-context/outer-def-ctx-scopes the-struct_39)"
"(expand-context/outer-binding-layer the-struct_39)"
"(expand-context/outer-reference-records the-struct_39)"
"(expand-context/outer-only-immediate? the-struct_39)"
"(expand-context/outer-need-eventually-defined the-struct_39)"
"(expand-context/outer-current-introduction-scopes the-struct_39)"
" name38_0))"
"              (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_39))))))))"
"(define-values"
"(as-begin-expression-context)"
"(lambda(ctx_3)"
"(if(not(expand-context-name ctx_3))"
"(let-values() ctx_3)"
"(let-values()"
"(let-values(((v_133) ctx_3))"
"(let-values(((the-struct_40) v_133))"
"(if(expand-context/outer? the-struct_40)"
"(let-values(((name41_0) #f)((inner42_0)(root-expand-context/outer-inner v_133)))"
"(expand-context/outer1.1"
" inner42_0"
"(root-expand-context/outer-post-expansion-scope the-struct_40)"
"(root-expand-context/outer-use-site-scopes the-struct_40)"
"(root-expand-context/outer-frame-id the-struct_40)"
"(expand-context/outer-context the-struct_40)"
"(expand-context/outer-env the-struct_40)"
"(expand-context/outer-post-expansion-scope-action the-struct_40)"
"(expand-context/outer-scopes the-struct_40)"
"(expand-context/outer-def-ctx-scopes the-struct_40)"
"(expand-context/outer-binding-layer the-struct_40)"
"(expand-context/outer-reference-records the-struct_40)"
"(expand-context/outer-only-immediate? the-struct_40)"
"(expand-context/outer-need-eventually-defined the-struct_40)"
"(expand-context/outer-current-introduction-scopes the-struct_40)"
" name41_0))"
"              (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_40))))))))"
"(define-values"
"(as-tail-context21.1)"
"(lambda(wrt18_0 ctx20_0)"
"(let-values(((ctx_4) ctx20_0))"
"(let-values(((wrt-ctx_0) wrt18_0))"
"(let-values()"
"(if(expand-context-name wrt-ctx_0)"
"(let-values()"
"(let-values(((v_134) ctx_4))"
"(let-values(((the-struct_41) v_134))"
"(if(expand-context/outer? the-struct_41)"
"(let-values(((name43_0)(expand-context-name wrt-ctx_0))"
"((inner44_0)(root-expand-context/outer-inner v_134)))"
"(expand-context/outer1.1"
" inner44_0"
"(root-expand-context/outer-post-expansion-scope the-struct_41)"
"(root-expand-context/outer-use-site-scopes the-struct_41)"
"(root-expand-context/outer-frame-id the-struct_41)"
"(expand-context/outer-context the-struct_41)"
"(expand-context/outer-env the-struct_41)"
"(expand-context/outer-post-expansion-scope-action the-struct_41)"
"(expand-context/outer-scopes the-struct_41)"
"(expand-context/outer-def-ctx-scopes the-struct_41)"
"(expand-context/outer-binding-layer the-struct_41)"
"(expand-context/outer-reference-records the-struct_41)"
"(expand-context/outer-only-immediate? the-struct_41)"
"(expand-context/outer-need-eventually-defined the-struct_41)"
"(expand-context/outer-current-introduction-scopes the-struct_41)"
" name43_0))"
"                    (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_41)))))"
"(let-values() ctx_4)))))))"
"(define-values"
"(as-named-context)"
"(lambda(ctx_5 ids_1)"
"(if(if(pair? ids_1)(null?(cdr ids_1)) #f)"
"(let-values()"
"(let-values(((v_135) ctx_5))"
"(let-values(((the-struct_42) v_135))"
"(if(expand-context/outer? the-struct_42)"
"(let-values(((name45_0)(car ids_1))((inner46_0)(root-expand-context/outer-inner v_135)))"
"(expand-context/outer1.1"
" inner46_0"
"(root-expand-context/outer-post-expansion-scope the-struct_42)"
"(root-expand-context/outer-use-site-scopes the-struct_42)"
"(root-expand-context/outer-frame-id the-struct_42)"
"(expand-context/outer-context the-struct_42)"
"(expand-context/outer-env the-struct_42)"
"(expand-context/outer-post-expansion-scope-action the-struct_42)"
"(expand-context/outer-scopes the-struct_42)"
"(expand-context/outer-def-ctx-scopes the-struct_42)"
"(expand-context/outer-binding-layer the-struct_42)"
"(expand-context/outer-reference-records the-struct_42)"
"(expand-context/outer-only-immediate? the-struct_42)"
"(expand-context/outer-need-eventually-defined the-struct_42)"
"(expand-context/outer-current-introduction-scopes the-struct_42)"
" name45_0))"
"              (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_42)))))"
"(let-values() ctx_5))))"
"(define-values"
"(as-to-parsed-context)"
"(lambda(ctx_6)"
"(let-values(((v_136) ctx_6))"
"(let-values(((the-struct_43) v_136))"
"(if(expand-context/outer? the-struct_43)"
"(let-values(((inner47_0)"
"(let-values(((the-struct_44)(root-expand-context/outer-inner v_136)))"
"(if(expand-context/inner? the-struct_44)"
"(let-values(((to-parsed?48_0) #t))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes the-struct_44)"
"(root-expand-context/inner-top-level-bind-scope the-struct_44)"
"(root-expand-context/inner-all-scopes-stx the-struct_44)"
"(root-expand-context/inner-defined-syms the-struct_44)"
"(root-expand-context/inner-counter the-struct_44)"
"(root-expand-context/inner-lift-key the-struct_44)"
" to-parsed?48_0"
"(expand-context/inner-phase the-struct_44)"
"(expand-context/inner-namespace the-struct_44)"
"(expand-context/inner-user-env the-struct_44)"
"(expand-context/inner-just-once? the-struct_44)"
"(expand-context/inner-module-begin-k the-struct_44)"
"(expand-context/inner-allow-unbound? the-struct_44)"
"(expand-context/inner-in-local-expand? the-struct_44)"
"(expand-context/inner-stops the-struct_44)"
"(expand-context/inner-declared-submodule-names the-struct_44)"
"(expand-context/inner-lifts the-struct_44)"
"(expand-context/inner-lift-envs the-struct_44)"
"(expand-context/inner-module-lifts the-struct_44)"
"(expand-context/inner-require-lifts the-struct_44)"
"(expand-context/inner-to-module-lifts the-struct_44)"
"(expand-context/inner-requires+provides the-struct_44)"
"(expand-context/inner-observer the-struct_44)"
"(expand-context/inner-for-serializable? the-struct_44)))"
"                            (raise-argument-error 'struct-copy \"expand-context/inner?\" the-struct_44)))))"
"(expand-context/outer1.1"
" inner47_0"
"(root-expand-context/outer-post-expansion-scope the-struct_43)"
"(root-expand-context/outer-use-site-scopes the-struct_43)"
"(root-expand-context/outer-frame-id the-struct_43)"
"(expand-context/outer-context the-struct_43)"
"(expand-context/outer-env the-struct_43)"
"(expand-context/outer-post-expansion-scope-action the-struct_43)"
"(expand-context/outer-scopes the-struct_43)"
"(expand-context/outer-def-ctx-scopes the-struct_43)"
"(expand-context/outer-binding-layer the-struct_43)"
"(expand-context/outer-reference-records the-struct_43)"
"(expand-context/outer-only-immediate? the-struct_43)"
"(expand-context/outer-need-eventually-defined the-struct_43)"
"(expand-context/outer-current-introduction-scopes the-struct_43)"
"(expand-context/outer-name the-struct_43)))"
"          (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_43))))))"
"(define-values"
"(to-syntax-list.1)"
"(lambda(s_40)"
"(if(list? s_40)"
"(let-values() s_40)"
"(if(pair? s_40)"
"(let-values()(let-values(((r_30)(to-syntax-list.1(cdr s_40))))(if r_30(cons(car s_40) r_30) #f)))"
"(if(syntax?$1 s_40)(let-values()(to-syntax-list.1(syntax-e$1 s_40)))(let-values() #f))))))"
"(define-values(core-scope)(new-multi-scope))"
"(define-values(core-stx)(add-scope empty-syntax core-scope))"
"(define-values(core-module-name)(1/make-resolved-module-path '#%core))"
"(define-values(core-mpi)(1/module-path-index-join ''#%core #f))"
"(define-values(id-cache-0)(make-hasheq))"
"(define-values(id-cache-1)(make-hasheq))"
"(define-values"
"(core-id)"
"(lambda(sym_24 phase_40)"
"(if(eqv? phase_40 0)"
"(let-values()"
"(let-values(((or-part_1)(hash-ref id-cache-0 sym_24 #f)))"
"(if or-part_1"
" or-part_1"
"(let-values(((s_1)(datum->syntax$1 core-stx sym_24)))(begin(hash-set! id-cache-0 sym_24 s_1) s_1)))))"
"(if(eq? phase_40 1)"
"(let-values()"
"(let-values(((or-part_2)(hash-ref id-cache-1 sym_24 #f)))"
"(if or-part_2"
" or-part_2"
"(let-values(((s_7)(datum->syntax$1(syntax-shift-phase-level$1 core-stx 1) sym_24)))"
"(begin(hash-set! id-cache-1 sym_24 s_7) s_7)))))"
"(let-values()(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_40) sym_24))))))"
"(define-values(core-forms) '#hasheq())"
"(define-values(core-primitives) '#hasheq())"
"(define-values"
"(add-core-form!)"
"(lambda(sym_25 proc_3)(begin(add-core-binding! sym_25)(set! core-forms(hash-set core-forms sym_25 proc_3)))))"
"(define-values"
"(add-core-primitive!)"
"(lambda(sym_26 val_31)"
"(begin(add-core-binding! sym_26)(set! core-primitives(hash-set core-primitives sym_26 val_31)))))"
"(define-values"
"(add-core-binding!)"
"(lambda(sym_27)"
"(let-values(((temp1_0)(datum->syntax$1 core-stx sym_27))"
"((temp2_1)"
"(let-values(((core-mpi4_0) core-mpi)((temp5_2) 0)((sym6_0) sym_27))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" core-mpi4_0"
" temp5_2"
" sym6_0)))"
"((temp3_1) 0))"
"(add-binding!17.1 #f #f #f #f temp1_0 temp2_1 temp3_1))))"
"(define-values"
"(declare-core-module!)"
"(lambda(ns_41)"
"(let-values(((ns7_1) ns_41)"
"((temp8_0)"
"(let-values(((temp10_0) #t)"
"((temp11_0) #t)"
"((temp12_0) #t)"
"((core-mpi13_0) core-mpi)"
"((temp14_1)"
"(hasheqv"
" 0"
"(let-values(((lst_77)(list core-primitives core-forms))((lst_78) '(#f #t)))"
"(begin"
"(check-list lst_77)"
"(check-list lst_78)"
"((letrec-values(((for-loop_76)"
"(lambda(table_92 lst_39 lst_79)"
"(if(if(pair? lst_39)(pair? lst_79) #f)"
"(let-values(((syms_12)(unsafe-car lst_39))"
"((rest_35)(unsafe-cdr lst_39))"
"((syntax?_2)(unsafe-car lst_79))"
"((rest_36)(unsafe-cdr lst_79)))"
"(let-values(((table_93)"
"(let-values(((table_94) table_92))"
"(let-values(((ht_77) syms_12))"
"(begin"
"(check-in-hash-keys ht_77)"
"((letrec-values(((for-loop_90)"
"(lambda(table_95"
" i_97)"
"(if i_97"
"(let-values(((sym_28)"
"(hash-iterate-key"
" ht_77"
" i_97)))"
"(let-values(((table_96)"
"(let-values(((table_97)"
" table_95))"
"(let-values(((table_98)"
"(let-values()"
"(let-values(((key_39"
" val_32)"
"(let-values()"
"(let-values(((b_61)"
"(let-values(((core-mpi17_0)"
" core-mpi)"
"((temp18_2)"
" 0)"
"((sym19_0)"
" sym_28))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" core-mpi17_0"
" temp18_2"
" sym19_0))))"
"(values"
" sym_28"
"(if syntax?_2"
"(provided1.1"
" b_61"
" #f"
" #t)"
" b_61))))))"
"(hash-set"
" table_97"
" key_39"
" val_32)))))"
"(values"
" table_98)))))"
"(if(not #f)"
"(for-loop_90"
" table_96"
"(hash-iterate-next"
" ht_77"
" i_97))"
" table_96)))"
" table_95))))"
" for-loop_90)"
" table_94"
"(hash-iterate-first ht_77)))))))"
"(if(not #f)"
"(for-loop_76 table_93 rest_35 rest_36)"
" table_93)))"
" table_92))))"
" for-loop_76)"
" '#hasheq()"
" lst_77"
" lst_78)))))"
"((temp15_1)"
"(lambda(phase-level_14 ns_44)"
"(if(zero? phase-level_14)"
"(let-values(((ns_45)"
"(let-values(((ns20_0) ns_44)"
"((core-module-name21_0) core-module-name)"
"((temp22_1) 0))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns20_0"
" core-module-name21_0"
" temp22_1))))"
"(if ns_45(module-linklet-info2.1(namespace->instance ns_45 0) #f core-mpi) #f))"
" #f)))"
"((temp16_2)"
"(lambda(data-box_1 ns_46 phase_41 phase-level_15 self_4 bulk-binding-registry_3 insp_6)"
"(let-values(((tmp_14) phase-level_15))"
"(if(equal? tmp_14 0)"
"(let-values()"
"(begin"
"(let-values(((ht_78) core-primitives))"
"(begin"
"(check-in-hash ht_78)"
"((letrec-values(((for-loop_91)"
"(lambda(i_98)"
"(if i_98"
"(let-values(((sym_29 val_33)"
"(hash-iterate-key+value ht_78 i_98)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-consistent!"
" ns_46"
" 0"
" sym_29"
" val_33))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_91(hash-iterate-next ht_78 i_98))"
"(values))))"
"(values)))))"
" for-loop_91)"
"(hash-iterate-first ht_78))))"
"(void)"
"(let-values(((ht_79) core-forms))"
"(begin"
"(check-in-hash ht_79)"
"((letrec-values(((for-loop_50)"
"(lambda(i_99)"
"(if i_99"
"(let-values(((sym_30 proc_4)"
"(hash-iterate-key+value ht_79 i_99)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-transformer!"
" ns_46"
" 0"
" sym_30"
"(core-form9.1"
" proc_4"
" sym_30)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_50(hash-iterate-next ht_79 i_99))"
"(values))))"
"(values)))))"
" for-loop_50)"
"(hash-iterate-first ht_79))))"
"(void)))"
"(let-values()(void)))))))"
"(make-module37.1"
" temp10_0"
" #t"
" #f"
" #f"
" temp16_2"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp11_0"
" #t"
" temp15_1"
" #t"
" temp12_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp14_1"
" #f"
" #f"
" core-mpi13_0"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)))"
"((core-module-name9_0) core-module-name))"
"(declare-module!56.1 #f #f ns7_1 temp8_0 core-module-name9_0))))"
"(define-values"
"(core-form-sym)"
"(lambda(s_11 phase_42)"
"(let-values(((ok?_0 id23_0 _24_0)"
"(let-values(((s_80) s_11))"
"(if(let-values(((s_23)(if(syntax?$1 s_80)(syntax-e$1 s_80) s_80)))"
"(if(pair? s_23)"
"(if(let-values(((s_24)(car s_23)))"
"(let-values(((or-part_177)(if(syntax?$1 s_24)(symbol?(syntax-e$1 s_24)) #f)))"
"(if or-part_177 or-part_177(symbol? s_24))))"
"(let-values(((s_25)(cdr s_23))) #t)"
" #f)"
" #f))"
"(let-values()"
"(let-values(((id23_1 _24_1)"
"(let-values(((s_162)(if(syntax?$1 s_80)(syntax-e$1 s_80) s_80)))"
"(let-values(((id25_0)(let-values(((s_163)(car s_162))) s_163))"
"((_26_0)(let-values(((s_164)(cdr s_162))) s_164)))"
"(values id25_0 _26_0)))))"
"(values #t id23_1 _24_1)))"
"(values #f #f #f)))))"
"(if ok?_0"
"(let-values(((b_0)"
"(let-values(((temp27_1) id23_0)((phase28_1) phase_42))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f #f #f temp27_1 phase28_1))))"
"(if(module-binding? b_0)"
"(if(eq? core-module-name(1/module-path-index-resolve(module-binding-module b_0)))"
"(module-binding-sym b_0)"
" #f)"
" #f))"
" #f))))"
"(define-values"
"(taint-dispatch)"
"(lambda(s_0 proc_5 phase_31)"
"((letrec-values(((loop_91)"
"(lambda(s_12 mode_10)"
"(let-values(((tmp_4) mode_10))"
"(if(equal? tmp_4 'none)"
"(let-values() s_12)"
"(if(equal? tmp_4 'opaque)"
"(let-values()(proc_5 s_12))"
"(if(equal? tmp_4 'transparent)"
"(let-values()"
"(let-values(((c_19)"
"(let-values(((s_165)"
"(let-values(((or-part_10)(syntax->list$1 s_12)))"
"(if or-part_10 or-part_10(syntax-e$1 s_12))))"
"((f_33)(lambda(tail?_39 d_20) d_20))"
"((s->_3)"
"(lambda(s_166)"
"(loop_91 s_166(syntax-taint-mode-property s_166))))"
"((seen_19) #f))"
"(let-values(((s_145) s_165)"
"((f_34)"
"(lambda(tail?_40 v_69)"
"(if(syntax?$1 v_69)"
"(let-values()(s->_3 v_69))"
"(let-values()(f_33 tail?_40 v_69)))))"
"((seen_20) seen_19))"
"((letrec-values(((loop_7)"
"(lambda(tail?_41 s_167 prev-depth_8)"
"(let-values(((depth_8)(add1 prev-depth_8)))"
"(if(if seen_20(> depth_8 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_41"
" s_167"
"(lambda(tail?_42 s_146)"
"(f_34 tail?_42 s_146))"
" seen_20))"
"(if(null? s_167)"
"(let-values()(f_34 tail?_41 s_167))"
"(if(pair? s_167)"
"(let-values()"
"(f_34"
" tail?_41"
"(cons"
"(loop_7 #f(car s_167) depth_8)"
"(loop_7 #t(cdr s_167) depth_8))))"
"(if(let-values(((or-part_178)"
"(symbol? s_167)))"
"(if or-part_178"
" or-part_178"
"(let-values(((or-part_87)"
"(boolean? s_167)))"
"(if or-part_87"
" or-part_87"
"(number? s_167)))))"
"(let-values()(f_34 #f s_167))"
"(if(let-values(((or-part_88)"
"(vector? s_167)))"
"(if or-part_88"
" or-part_88"
"(let-values(((or-part_41)"
"(box? s_167)))"
"(if or-part_41"
" or-part_41"
"(let-values(((or-part_14)"
"(prefab-struct-key"
" s_167)))"
"(if or-part_14"
" or-part_14"
"(hash? s_167)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_41"
" s_167"
"(lambda(tail?_43 s_168)"
"(f_34 tail?_43 s_168))"
" seen_20))"
"(let-values()"
"(f_34 #f s_167)))))))))))"
" loop_7)"
" #f"
" s_145"
" 0)))))"
"(datum->syntax$1"
" #f"
" c_19"
" s_12"
"(if(syntax-any-macro-scopes? s_12)"
"(syntax-property-remove s_12 original-property-sym)"
" s_12))))"
"(if(equal? tmp_4 'transparent-binding)"
"(let-values()"
"(let-values(((c_20)(syntax-e$1 s_12)))"
"(if(pair? c_20)"
"(let-values()"
"(let-values(((cd_0)(cdr c_20)))"
"(if(let-values(((or-part_82)(pair? cd_0)))"
"(if or-part_82"
" or-part_82"
"(if(syntax?$1 cd_0)(pair?(syntax-e$1 cd_0)) #f)))"
"(let-values()"
"(let-values(((d_21)(if(syntax?$1 cd_0)(syntax-e$1 cd_0) cd_0)))"
"(datum->syntax$1"
" #f"
"(cons"
"(loop_91(car c_20)(syntax-taint-mode-property(car c_20)))"
"(cons"
"(loop_91(car d_21) 'transparent)"
"(let-values(((s_169)"
"(let-values(((or-part_6)"
"(syntax->list$1(cdr d_21))))"
"(if or-part_6 or-part_6(cdr d_21))))"
"((f_10)(lambda(tail?_44 d_22) d_22))"
"((s->_4)"
"(lambda(s_170)"
"(loop_91"
" s_170"
"(syntax-taint-mode-property s_170))))"
"((seen_21) #f))"
"(let-values(((s_171) s_169)"
"((f_11)"
"(lambda(tail?_45 v_44)"
"(if(syntax?$1 v_44)"
"(let-values()(s->_4 v_44))"
"(let-values()(f_10 tail?_45 v_44)))))"
"((seen_22) seen_21))"
"((letrec-values(((loop_129)"
"(lambda(tail?_46 s_87 prev-depth_9)"
"(let-values(((depth_9)"
"(add1 prev-depth_9)))"
"(if(if seen_22(> depth_9 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_46"
" s_87"
"(lambda(tail?_47 s_172)"
"(f_11 tail?_47 s_172))"
" seen_22))"
"(if(null? s_87)"
"(let-values()(f_11 tail?_46 s_87))"
"(if(pair? s_87)"
"(let-values()"
"(f_11"
" tail?_46"
"(cons"
"(loop_129"
" #f"
"(car s_87)"
" depth_9)"
"(loop_129"
" #t"
"(cdr s_87)"
" depth_9))))"
"(if(let-values(((or-part_179)"
"(symbol? s_87)))"
"(if or-part_179"
" or-part_179"
"(let-values(((or-part_180)"
"(boolean?"
" s_87)))"
"(if or-part_180"
" or-part_180"
"(number? s_87)))))"
"(let-values()(f_11 #f s_87))"
"(if(let-values(((or-part_181)"
"(vector?"
" s_87)))"
"(if or-part_181"
" or-part_181"
"(let-values(((or-part_17)"
"(box?"
" s_87)))"
"(if or-part_17"
" or-part_17"
"(let-values(((or-part_18)"
"(prefab-struct-key"
" s_87)))"
"(if or-part_18"
" or-part_18"
"(hash?"
" s_87)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_46"
" s_87"
"(lambda(tail?_48 s_173)"
"(f_11 tail?_48 s_173))"
" seen_22))"
"(let-values()"
"(f_11 #f s_87)))))))))))"
" loop_129)"
" #f"
" s_171"
" 0)))))"
" s_12"
"(if(syntax-any-macro-scopes? s_12)"
"(syntax-property-remove s_12 original-property-sym)"
" s_12))))"
"(let-values()(loop_91 s_12 'transparent)))))"
"(let-values()(loop_91 s_12 'transparent)))))"
"(let-values()"
"(let-values(((c_21)(syntax-e$1 s_12)))"
"(let-values(((tmp_14)(core-form-sym c_21 phase_31)))"
"(if(if(equal? tmp_14 'begin)"
" #t"
"(if(equal? tmp_14 'begin-for-syntax) #t(equal? tmp_14 '#%module-begin)))"
"(let-values()(loop_91 s_12 'transparent))"
"(if(if(equal? tmp_14 'define-values) #t(equal? tmp_14 'define-syntaxes))"
"(let-values()(loop_91 s_12 'transparent-binding))"
"(let-values()(loop_91 s_12 'opaque)))))))))))))))"
" loop_91)"
" s_0"
"(syntax-taint-mode-property s_0))))"
"(define-values"
"(syntax-taint-mode-property)"
"(lambda(s_174)"
"(let-values(((or-part_182)(syntax-property$1 s_174 'taint-mode)))"
"(if or-part_182 or-part_182(syntax-property$1 s_174 'certify-mode)))))"
"(define-values"
"(syntax-remove-taint-dispatch-properties)"
"(lambda(s_175)(syntax-property-remove(syntax-property-remove s_175 'taint-mode) 'certify-mode)))"
"(define-values(current-module-code-inspector)(make-parameter #f))"
"(define-values"
"(syntax-debug-info$1)"
"(lambda(s_0 phase_40 all-bindings?_0)"
"(let-values(((hts_0)"
"(let-values(((lst_74)(fallback->list(syntax-shifted-multi-scopes s_0))))"
"(begin"
"(check-list lst_74)"
"((letrec-values(((for-loop_92)"
"(lambda(lst_80)"
"(if(pair? lst_80)"
"(let-values(((smss_24)(unsafe-car lst_80))"
"((rest_37)(unsafe-cdr lst_80)))"
"(let-values(((post-guard-var_14)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_14)"
"(let-values()"
"(let-values()"
"(let-values(((init-ht_0)"
"(if(identifier? s_0)"
"(hasheq 'name(syntax-e$1 s_0))"
" '#hasheq())))"
"(let-values(((s-scs_0)"
"(scope-set-at-fallback"
" s_0"
" smss_24"
" phase_40)))"
"(let-values(((context_1)"
"(scope-set->context s-scs_0)))"
"(let-values(((context-ht_0)"
"(hash-set"
" init-ht_0"
" 'context"
" context_1)))"
"(let-values(((sym_31)(syntax-e$1 s_0)))"
"(let-values(((bindings_0)"
"(if(identifier? s_0)"
"(let-values()"
"(let-values(((bindings_1"
" covered-scopess_0)"
"(let-values(((ht_80)"
" s-scs_0))"
"(begin"
"(check-in-immutable-hash-keys"
" ht_80)"
"((letrec-values(((for-loop_93)"
"(lambda(bindings_2"
" covered-scope-sets_0"
" i_0)"
"(if i_0"
"(let-values(((sc_21)"
"(unsafe-immutable-hash-iterate-key"
" ht_80"
" i_0)))"
"(let-values(((bindings_3"
" covered-scope-sets_1)"
"(let-values(((ht_81"
" bulk-bindings_3)"
"(let-values(((table_99)"
"(scope-binding-table"
" sc_21)))"
"(if(hash?"
" table_99)"
"(values"
"(hash-ref"
" table_99"
" sym_31"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_99)"
" sym_31"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_99)))))"
"((s_176)"
" s_0)"
"((extra-shifts_5)"
" null))"
"(begin"
" #t"
"((letrec-values(((for-loop_94)"
"(lambda(bindings_4"
" covered-scope-sets_2"
" i_100)"
"(if(not"
"(null?"
" i_100))"
"(let-values(((scs_15)"
"(if(pair?"
" i_100)"
"(let-values()"
"(bulk-binding-at-scopes"
"(car"
" i_100)))"
"(let-values()"
"(hash-iterate-key"
" ht_81"
" i_100))))"
"((b_62)"
"(if(pair?"
" i_100)"
"(let-values()"
"(let-values(((bulk_4)"
"(bulk-binding-at-bulk"
"(car"
" i_100))))"
"(let-values(((b-info_1)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_4"
" s_176"
" extra-shifts_5)"
" sym_31"
" #f)))"
"(if b-info_1"
"((bulk-binding-create"
" bulk_4)"
" bulk_4"
" b-info_1"
" sym_31)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_81"
" i_100)))))"
"(let-values(((bindings_5"
" covered-scope-sets_3)"
"(let-values(((bindings_6)"
" bindings_4)"
"((covered-scope-sets_4)"
" covered-scope-sets_2))"
"(if(if scs_15"
"(if b_62"
"(if(let-values(((or-part_183)"
" all-bindings?_0))"
"(if or-part_183"
" or-part_183"
"(subset?"
" scs_15"
" s-scs_0)))"
"(not"
"(set-member?"
" covered-scope-sets_4"
" scs_15))"
" #f)"
" #f)"
" #f)"
"(let-values(((bindings_7)"
" bindings_6)"
"((covered-scope-sets_5)"
" covered-scope-sets_4))"
"(let-values(((bindings_8"
" covered-scope-sets_6)"
"(let-values()"
"(values"
"(cons"
"(hash"
" 'name"
"(syntax-e$1"
" s_0)"
" 'context"
"(scope-set->context"
" scs_15)"
" 'match?"
"(subset?"
" scs_15"
" s-scs_0)"
"(if(local-binding?"
" b_62)"
" 'local"
" 'module)"
"(if(local-binding?"
" b_62)"
"(local-binding-key"
" b_62)"
"(vector"
"(module-binding-sym"
" b_62)"
"(module-binding-module"
" b_62)"
"(module-binding-phase"
" b_62))))"
" bindings_7)"
"(set-add"
" covered-scope-sets_5"
" scs_15)))))"
"(values"
" bindings_8"
" covered-scope-sets_6)))"
"(values"
" bindings_6"
" covered-scope-sets_4)))))"
"(if(not"
" #f)"
"(for-loop_94"
" bindings_5"
" covered-scope-sets_3"
"(if(pair?"
" i_100)"
"(let-values()"
"(cdr"
" i_100))"
"(let-values()"
"(let-values(((or-part_95)"
"(hash-iterate-next"
" ht_81"
" i_100)))"
"(if or-part_95"
" or-part_95"
" bulk-bindings_3)))))"
"(values"
" bindings_5"
" covered-scope-sets_3))))"
"(values"
" bindings_4"
" covered-scope-sets_2)))))"
" for-loop_94)"
" bindings_2"
" covered-scope-sets_0"
"(let-values(((or-part_96)"
"(hash-iterate-first"
" ht_81)))"
"(if or-part_96"
" or-part_96"
" bulk-bindings_3)))))))"
"(if(not"
" #f)"
"(for-loop_93"
" bindings_3"
" covered-scope-sets_1"
"(unsafe-immutable-hash-iterate-next"
" ht_80"
" i_0))"
"(values"
" bindings_3"
" covered-scope-sets_1))))"
"(values"
" bindings_2"
" covered-scope-sets_0)))))"
" for-loop_93)"
" null"
"(set)"
"(unsafe-immutable-hash-iterate-first"
" ht_80))))))"
" bindings_1))"
"(let-values() null))))"
"(if(null? bindings_0)"
" context-ht_0"
"(hash-set"
" context-ht_0"
" 'bindings"
" bindings_0))))))))))))"
"(let-values(((result_5)"
"(if(post-guard-var_14)(for-loop_92 rest_37) null)))"
"(cons elem_14 result_5))))))"
" null))))"
" for-loop_92)"
" lst_74)))))"
"(let-values(((ht_73)(car hts_0)))(if(null?(cdr hts_0)) ht_73(hash-set ht_73 'fallbacks(cdr hts_0)))))))"
"(define-values"
"(scope-set->context)"
"(lambda(scs_16)"
"(let-values(((temp1_1)"
"(let-values(((ht_82) scs_16))"
"(begin"
"(check-in-immutable-hash-keys ht_82)"
"((letrec-values(((for-loop_15)"
"(lambda(i_101)"
"(if i_101"
"(let-values(((sc_22)(unsafe-immutable-hash-iterate-key ht_82 i_101)))"
"(let-values(((post-guard-var_15)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_15)"
"(let-values()"
"(let-values()"
"(if(representative-scope? sc_22)"
"(vector"
"(scope-id sc_22)"
"(scope-kind sc_22)"
"(multi-scope-name"
"(representative-scope-owner sc_22)))"
"(vector(scope-id sc_22)(scope-kind sc_22)))))))"
"(let-values(((result_22)"
"(if(post-guard-var_15)"
"(for-loop_15"
"(unsafe-immutable-hash-iterate-next ht_82 i_101))"
" null)))"
"(cons elem_15 result_22))))))"
" null))))"
" for-loop_15)"
"(unsafe-immutable-hash-iterate-first ht_82)))))"
"((<2_0) <)"
"((temp3_2)(lambda(v_137)(vector-ref v_137 0))))"
"(sort7.1 #f #f temp3_2 #t temp1_1 <2_0))))"
"(define-values"
"(raise-ambiguous-error)"
"(lambda(id_22 ctx_7)"
"    (raise-syntax-error$1 #f \"identifier's binding is ambiguous\" id_22 #f null (syntax-debug-info-string id_22 ctx_7))))"
"(define-values"
"(syntax-debug-info-string)"
"(lambda(s_155 ctx_8)"
"(let-values(((info_3)(syntax-debug-info$1 s_155(expand-context-phase ctx_8) #t)))"
"(if(not"
"(let-values(((or-part_39)(pair?(hash-ref info_3 'bindings null))))"
"(if or-part_39"
" or-part_39"
"(let-values(((lst_6)(hash-ref info_3 'fallbacks null)))"
"(begin"
"(check-list lst_6)"
"((letrec-values(((for-loop_95)"
"(lambda(result_77 lst_81)"
"(if(pair? lst_81)"
"(let-values(((fb-info_0)(unsafe-car lst_81))((rest_38)(unsafe-cdr lst_81)))"
"(let-values(((result_2)"
"(let-values()"
"(let-values(((result_78)"
"(let-values()"
"(let-values()"
"(pair?"
"(hash-ref fb-info_0 'bindings null))))))"
"(values result_78)))))"
"(if(if(not((lambda x_67 result_2) fb-info_0))(not #f) #f)"
"(for-loop_95 result_2 rest_38)"
" result_2)))"
" result_77))))"
" for-loop_95)"
" #f"
" lst_6))))))"
"        (let-values () \"\")"
"(let-values()"
"(let-values(((relevant-scope-sets_0)"
"((letrec-values(((loop_128)"
"(lambda(info_4 layer_0)"
"(apply"
" append"
"(cons"
"(hash-ref info_4 'context)"
"(let-values(((lst_82)(hash-ref info_4 'bindings null)))"
"(begin"
"(check-list lst_82)"
"((letrec-values(((for-loop_96)"
"(lambda(lst_83)"
"(if(pair? lst_83)"
"(let-values(((b_63)(unsafe-car lst_83))"
"((rest_39)(unsafe-cdr lst_83)))"
"(let-values(((post-guard-var_16)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_16)"
"(let-values()"
"(let-values()"
"(hash-ref"
" b_63"
" 'context)))))"
"(let-values(((result_79)"
"(if(post-guard-var_16)"
"(for-loop_96 rest_39)"
" null)))"
"(cons elem_16 result_79))))))"
" null))))"
" for-loop_96)"
" lst_82))))"
"(let-values(((fallbacks_0)(hash-ref info_4 'fallbacks null)))"
"(let-values(((lst_38) fallbacks_0)((start_16)(add1 layer_0)))"
"(begin"
"(check-list lst_38)"
"(check-naturals start_16)"
"((letrec-values(((for-loop_97)"
"(lambda(lst_79 pos_11)"
"(if(if(pair? lst_79) #t #f)"
"(let-values(((fallback_0)(unsafe-car lst_79))"
"((rest_40)(unsafe-cdr lst_79))"
"((layer_1) pos_11))"
"(let-values(((post-guard-var_17)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_17)"
"(let-values()"
"(let-values()"
"(loop_128"
" fallback_0"
" layer_1)))))"
"(let-values(((result_80)"
"(if(post-guard-var_17)"
"(for-loop_97"
" rest_40"
"(+ pos_11 1))"
" null)))"
"(cons elem_17 result_80))))))"
" null))))"
" for-loop_97)"
" lst_38"
" start_16))))))))"
" loop_128)"
" info_3"
" 0)))"
"(let-values(((common-scopes_0)"
"(if(null? relevant-scope-sets_0)"
"(set)"
"(let-values(((lst_84) relevant-scope-sets_0))"
"(begin"
"(check-list lst_84)"
"((letrec-values(((for-loop_98)"
"(lambda(s_79 lst_85)"
"(if(pair? lst_85)"
"(let-values(((l_49)(unsafe-car lst_85))"
"((rest_41)(unsafe-cdr lst_85)))"
"(let-values(((s_171)"
"(let-values(((s_45) s_79))"
"(let-values(((s_85)"
"(let-values()"
"(set-intersect"
" s_45"
"(list->set l_49)))))"
"(values s_85)))))"
"(if(not #f)(for-loop_98 s_171 rest_41) s_171)))"
" s_79))))"
" for-loop_98)"
"(list->set(car relevant-scope-sets_0))"
" lst_84))))))"
"(string-append"
"((letrec-values(((loop_130)"
"(lambda(info_5 layer_2)"
"(string-append"
"                                    \"\\n  context\""
"(layer->string layer_2)"
"                                    \"...:\""
"(describe-context(hash-ref info_5 'context) common-scopes_0)"
"(apply"
" string-append"
"(let-values(((lst_18)"
"(let-values(((temp1_1)(hash-ref info_5 'bindings null))"
"((temp2_2)"
"(lambda(a_37 b_64)"
"(if(hash-ref a_37 'match? #f)"
"(not(hash-ref b_64 'match? #f))"
" #f))))"
"(sort7.1 #f #f #f #f temp1_1 temp2_2))))"
"(begin"
"(check-list lst_18)"
"((letrec-values(((for-loop_15)"
"(lambda(lst_86)"
"(if(pair? lst_86)"
"(let-values(((b_65)(unsafe-car lst_86))"
"((rest_42)(unsafe-cdr lst_86)))"
"(let-values(((post-guard-var_4)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_4)"
"(let-values()"
"(let-values()"
"(string-append"
"                                                                                        \"\\n  \""
"(if(hash-ref b_65 'match? #f)"
"                                                                                          \"matching\""
"                                                                                          \"other\")"
"                                                                                        \" binding\""
"(layer->string layer_2)"
"                                                                                        \"...:\""
"                                                                                        \"\\n   \""
"(if(hash-ref b_65 'local #f)"
"                                                                                          \"local\""
"(format"
"                                                                                           \"~a\""
"(hash-ref b_65 'module #f)))"
"(describe-context"
"(hash-ref b_65 'context)"
" common-scopes_0))))))"
"(let-values(((result_33)"
"(if(post-guard-var_4)"
"(for-loop_15 rest_42)"
" null)))"
"(cons elem_4 result_33))))))"
" null))))"
" for-loop_15)"
" lst_18))))"
"(let-values(((fallbacks_1)(hash-ref info_5 'fallbacks null)))"
"(apply"
" string-append"
"(let-values(((lst_87) fallbacks_1)((start_17)(add1 layer_2)))"
"(begin"
"(check-list lst_87)"
"(check-naturals start_17)"
"((letrec-values(((for-loop_99)"
"(lambda(lst_88 pos_12)"
"(if(if(pair? lst_88) #t #f)"
"(let-values(((fallback_1)(unsafe-car lst_88))"
"((rest_43)(unsafe-cdr lst_88))"
"((layer_3) pos_12))"
"(let-values(((post-guard-var_18)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_18)"
"(let-values()"
"(let-values()"
"(loop_130"
" fallback_1"
" layer_3)))))"
"(let-values(((result_81)"
"(if(post-guard-var_18)"
"(for-loop_99"
" rest_43"
"(+ pos_12 1))"
" null)))"
"(cons elem_18 result_81))))))"
" null))))"
" for-loop_99)"
" lst_87"
" start_17)))))))))"
" loop_130)"
" info_3"
" 0)"
"(if(set-empty? common-scopes_0)"
"                 \"\""
"(string-append"
"                  \"\\n  common scopes...:\""
"(describe-context"
"(let-values(((lst_89)(hash-ref info_3 'context)))"
"(begin"
"(check-list lst_89)"
"((letrec-values(((for-loop_100)"
"(lambda(lst_90)"
"(if(pair? lst_90)"
"(let-values(((s_177)(unsafe-car lst_90))((rest_44)(unsafe-cdr lst_90)))"
"(let-values(((post-guard-var_19)(lambda() #t)))"
"(let-values()"
"(if(set-member? common-scopes_0 s_177)"
"(let-values()"
"(let-values(((elem_19)(let-values()(let-values() s_177))))"
"(let-values(((result_82)"
"(if(post-guard-var_19)"
"(for-loop_100 rest_44)"
" null)))"
"(cons elem_19 result_82))))"
"(if(post-guard-var_19)(for-loop_100 rest_44) null)))))"
" null))))"
" for-loop_100)"
" lst_89)))"
"(set))))))))))))"
"(define-values"
"(describe-context)"
"(lambda(scopes_19 common-scopes_1)"
"(let-values(((strs_0)"
"((letrec-values(((loop_131)"
"(lambda(strs_1 scopes_20)"
"(if(null? scopes_20)"
"(let-values()(reverse$1 strs_1))"
"(let-values()"
"                                          (let-values (((str_4) (format \" ~a\" (car scopes_20))))"
"(if(if(pair? strs_1)"
"(<(+(string-length str_4)(string-length(car strs_1))) 72)"
" #f)"
"(loop_131"
"(cons(string-append(car strs_1) str_4)(cdr strs_1))"
"(cdr scopes_20))"
"(loop_131(cons str_4 strs_1)(cdr scopes_20)))))))))"
" loop_131)"
" null"
"(if(set-empty? common-scopes_1)"
" scopes_19"
"(append"
"(let-values(((lst_91) scopes_19))"
"(begin"
"(check-list lst_91)"
"((letrec-values(((for-loop_101)"
"(lambda(lst_92)"
"(if(pair? lst_92)"
"(let-values(((s_24)(unsafe-car lst_92))"
"((rest_45)(unsafe-cdr lst_92)))"
"(let-values(((post-guard-var_20)(lambda() #t)))"
"(let-values()"
"(if(not(set-member? common-scopes_1 s_24))"
"(let-values()"
"(let-values(((elem_20)(let-values()(let-values() s_24))))"
"(let-values(((result_83)"
"(if(post-guard-var_20)"
"(for-loop_101 rest_45)"
" null)))"
"(cons elem_20 result_83))))"
"(if(post-guard-var_20)(for-loop_101 rest_45) null)))))"
" null))))"
" for-loop_101)"
" lst_91)))"
"                      (list \"[common scopes]\"))))))"
"(if(null? strs_0)"
"        (let-values () \"\\n   [empty]\")"
"(let-values()"
"(apply"
" string-append"
"(let-values(((lst_93) strs_0))"
"(begin"
"(check-list lst_93)"
"((letrec-values(((for-loop_102)"
"(lambda(lst_94)"
"(if(pair? lst_94)"
"(let-values(((str_5)(unsafe-car lst_94))((rest_46)(unsafe-cdr lst_94)))"
"(let-values(((post-guard-var_21)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_21)"
"                                                         (let-values () (let-values () (string-append \"\\n  \" str_5)))))"
"(let-values(((result_28)"
"(if(post-guard-var_21)(for-loop_102 rest_46) null)))"
"(cons elem_21 result_28))))))"
" null))))"
" for-loop_102)"
" lst_93)))))))))"
" (define-values (layer->string) (lambda (layer_4) (if (zero? layer_4) \"\" (format \" at layer ~a\" layer_4))))"
"(define-values"
"(raise-syntax-implicit-error)"
"(lambda(s_0 sym_32 trigger-id_0 ctx_8)"
"(let-values(((phase_43)(expand-context-phase ctx_8)))"
"(let-values(((what_1)"
"(let-values(((tmp_15) sym_32))"
"(if(equal? tmp_15 '#%app)"
"                        (let-values () \"function application\")"
"(if(equal? tmp_15 '#%datum)"
"                          (let-values () \"literal data\")"
"(if(equal? tmp_15 '#%top)"
"(let-values()"
"(if(expand-context-allow-unbound? ctx_8)"
"                                \"reference to a top-level identifier\""
"                                \"reference to an unbound identifier\"))"
"(let-values()(void))))))))"
"(let-values(((unbound?_0)"
"(if trigger-id_0"
"(not"
"(let-values(((trigger-id1_0) trigger-id_0)((phase2_0) phase_43))"
"(resolve29.1 #f #f #f #f #f #f #f #f trigger-id1_0 phase2_0)))"
" #f)))"
"(raise-syntax-error$1"
" #f"
"(format"
"(if unbound?_0"
"              \"unbound identifier;\\n also, no ~a transformer is bound~a\""
"              (string-append what_1 \" is not allowed;\\n no ~a syntax transformer is bound~a\"))"
" sym_32"
"(let-values(((tmp_16) phase_43))"
"(if(equal? tmp_16 0)"
"                (let-values () \"\")"
"(if(equal? tmp_16 1)"
"                  (let-values () \" in the transformer phase\")"
"                  (let-values () (format \" at phase ~a\" phase_43))))))"
"(if unbound?_0 trigger-id_0 #f)"
"(if unbound?_0(if(not(eq?(syntax-e$1 s_0)(syntax-e$1 trigger-id_0))) s_0 #f) #f)"
" null"
"           (if unbound?_0 (syntax-debug-info-string trigger-id_0 ctx_8) \"\")))))))"
"(define-values(make-check-no-duplicate-table)(lambda() '#hasheq()))"
"(define-values"
"(check-no-duplicate-ids8.1)"
"(lambda(what1_0 what2_0 ids5_0 phase6_0 s7_1 ht3_0 ht4_0)"
"(let-values(((ids_2) ids5_0))"
"(let-values(((phase_44) phase6_0))"
"(let-values(((s_144) s7_1))"
"(let-values(((ht_76)(if ht4_0 ht3_0(make-check-no-duplicate-table))))"
"            (let-values (((what_2) (if what2_0 what1_0 \"binding name\")))"
"(let-values()"
"((letrec-values(((loop_13)"
"(lambda(v_138 ht_83)"
"(if(identifier? v_138)"
"(let-values()"
"(let-values(((l_13)(hash-ref ht_83(syntax-e$1 v_138) null)))"
"(begin"
"(let-values(((lst_95) l_13))"
"(begin"
"(check-list lst_95)"
"((letrec-values(((for-loop_103)"
"(lambda(lst_76)"
"(if(pair? lst_76)"
"(let-values(((id_14)(unsafe-car lst_76))"
"((rest_34)(unsafe-cdr lst_76)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(bound-identifier=?$1"
" id_14"
" v_138"
" phase_44)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                                                                                                                  \"duplicate \""
" what_2)"
" s_144"
" v_138))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_103 rest_34)"
"(values))))"
"(values)))))"
" for-loop_103)"
" lst_95)))"
"(void)"
"(hash-set ht_83(syntax-e$1 v_138)(cons v_138 l_13)))))"
"(if(pair? v_138)"
"(let-values()(loop_13(cdr v_138)(loop_13(car v_138) ht_83)))"
"(let-values() ht_83))))))"
" loop_13)"
" ids_2"
" ht_76)))))))))"
"(define-values"
"(remove-use-site-scopes)"
"(lambda(s_0 ctx_7)"
"(let-values(((use-sites_0)(root-expand-context-use-site-scopes ctx_7)))"
"(if(if use-sites_0(pair?(unbox use-sites_0)) #f)"
"(if(syntax?$1 s_0)"
"(remove-scopes s_0(unbox use-sites_0))"
"(let-values(((lst_96) s_0))"
"(begin"
"(check-list lst_96)"
"((letrec-values(((for-loop_104)"
"(lambda(lst_74)"
"(if(pair? lst_74)"
"(let-values(((id_21)(unsafe-car lst_74))((rest_33)(unsafe-cdr lst_74)))"
"(let-values(((post-guard-var_22)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_22)"
"(let-values()"
"(let-values()(remove-scopes id_21(unbox use-sites_0))))))"
"(let-values(((result_84)"
"(if(post-guard-var_22)(for-loop_104 rest_33) null)))"
"(cons elem_22 result_84))))))"
" null))))"
" for-loop_104)"
" lst_96))))"
" s_0))))"
"(define-values"
"(struct:compile-context"
" compile-context1.1"
" compile-context?"
" compile-context-namespace"
" compile-context-phase"
" compile-context-self"
" compile-context-module-self"
" compile-context-full-module-name"
" compile-context-lazy-syntax-literals?"
" compile-context-header)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'compile-context"
" #f"
" 7"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'compile-context)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'namespace)"
"(make-struct-field-accessor -ref_0 1 'phase)"
"(make-struct-field-accessor -ref_0 2 'self)"
"(make-struct-field-accessor -ref_0 3 'module-self)"
"(make-struct-field-accessor -ref_0 4 'full-module-name)"
"(make-struct-field-accessor -ref_0 5 'lazy-syntax-literals?)"
"(make-struct-field-accessor -ref_0 6 'header))))"
"(define-values"
"(make-compile-context14.1)"
"(lambda(full-module-name6_0"
" full-module-name12_0"
" lazy-syntax-literals?7_0"
" lazy-syntax-literals?13_0"
" module-self5_0"
" module-self11_0"
" namespace2_0"
" namespace8_0"
" phase3_0"
" phase9_0"
" self4_1"
" self10_0)"
"(let-values(((namespace_1)(if namespace8_0 namespace2_0(1/current-namespace))))"
"(let-values(((phase_45)(if phase9_0 phase3_0(namespace-phase namespace_1))))"
"(let-values(((self_4)(if self10_0 self4_1(namespace-mpi namespace_1))))"
"(let-values(((module-self_0)(if module-self11_0 module-self5_0 #f)))"
"(let-values(((full-module-name_0)(if full-module-name12_0 full-module-name6_0 #f)))"
"(let-values(((lazy-syntax-literals?_0)"
"(if lazy-syntax-literals?13_0 lazy-syntax-literals?7_0(if module-self_0 #t #f))))"
"(let-values()"
"(begin"
"(if(if module-self_0(not full-module-name_0) #f)"
"                      (let-values () (error \"internal error: module-self provided without full name\"))"
"(void))"
"(compile-context1.1"
" namespace_1"
" phase_45"
" self_4"
" module-self_0"
" full-module-name_0"
" lazy-syntax-literals?_0"
" #f)))))))))))"
"(define-values"
"(struct:mpi-intern-table mpi-intern-table1.1 mpi-intern-table? mpi-intern-table-normal mpi-intern-table-fast)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'mpi-intern-table"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'mpi-intern-table)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'normal)"
"(make-struct-field-accessor -ref_0 1 'fast))))"
"(define-values(make-module-path-index-intern-table)(lambda()(mpi-intern-table1.1(make-hash)(make-hasheq))))"
"(define-values"
"(intern-module-path-index!)"
"(lambda(t_42 mpi_18)"
"(let-values(((or-part_172)(hash-ref(mpi-intern-table-fast t_42) mpi_18 #f)))"
"(if or-part_172"
" or-part_172"
"(let-values(((name_39 base_19)(1/module-path-index-split mpi_18)))"
"(if(not name_39)"
"(let-values()(begin(hash-set!(mpi-intern-table-fast t_42) mpi_18 mpi_18) mpi_18))"
"(let-values()"
"(let-values(((interned-base_0)(if base_19(intern-module-path-index! t_42 base_19) #f)))"
"(let-values(((at-name_0)"
"(let-values(((or-part_15)(hash-ref(mpi-intern-table-normal t_42) name_39 #f)))"
"(if or-part_15"
" or-part_15"
"(let-values(((at-name_1)(make-hasheq)))"
"(begin(hash-set!(mpi-intern-table-normal t_42) name_39 at-name_1) at-name_1))))))"
"(let-values(((i-mpi_0)"
"(let-values(((or-part_90)(hash-ref at-name_0 interned-base_0 #f)))"
"(if or-part_90"
" or-part_90"
"(let-values(((mpi_19)"
"(if(eq? base_19 interned-base_0)"
" mpi_18"
"(let-values(((the-struct_45) mpi_18))"
"(if(1/module-path-index? the-struct_45)"
"(let-values(((base3_0) interned-base_0))"
"(module-path-index2.1"
"(module-path-index-path the-struct_45)"
" base3_0"
"(module-path-index-resolved the-struct_45)"
"(module-path-index-shift-cache the-struct_45)))"
"(raise-argument-error"
" 'struct-copy"
"                                                         \"module-path-index?\""
" the-struct_45))))))"
"(begin(hash-set! at-name_0 interned-base_0 mpi_19) mpi_19))))))"
"(begin(hash-set!(mpi-intern-table-fast t_42) mpi_18 i-mpi_0) i-mpi_0)))))))))))"
"(define-values"
"(struct:module-path-index-table"
" module-path-index-table1.1"
" module-path-index-table?"
" module-path-index-table-positions"
" module-path-index-table-intern)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-path-index-table"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-path-index-table)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'positions)"
"(make-struct-field-accessor -ref_0 1 'intern))))"
"(define-values(mpi-vector-id)(make-built-in-symbol! 'mpi-vector))"
"(define-values"
"(make-module-path-index-table)"
"(lambda()(module-path-index-table1.1(make-hasheq)(make-module-path-index-intern-table))))"
"(define-values"
"(add-module-path-index!)"
"(lambda(mpis_0 mpi_18)"
"(let-values(((pos_13)(add-module-path-index!/pos mpis_0 mpi_18)))"
"(if pos_13(list 'vector-ref mpi-vector-id pos_13) #f))))"
"(define-values"
"(add-module-path-index!/pos)"
"(lambda(mpis_1 mpi_20)"
"(if(not mpi_20)"
"(let-values() #f)"
"(if mpi_20"
"(let-values()"
"(let-values(((mpi_21)(intern-module-path-index!(module-path-index-table-intern mpis_1) mpi_20))"
"((positions_0)(module-path-index-table-positions mpis_1)))"
"(let-values(((or-part_14)(hash-ref positions_0 mpi_21 #f)))"
"(if or-part_14"
" or-part_14"
"(let-values(((pos_14)(hash-count positions_0)))"
"(begin(hash-set! positions_0 mpi_21 pos_14) pos_14))))))"
"(void)))))"
"(define-values"
"(generate-module-path-index-deserialize)"
"(lambda(mpis_2)"
"(let-values(((positions_1)(module-path-index-table-positions mpis_2)))"
"(let-values(((gen-order_0)(make-hasheqv)))"
"(let-values(((rev-positions_0)"
"(let-values(((ht_77) positions_1))"
"(begin"
"(check-in-hash ht_77)"
"((letrec-values(((for-loop_90)"
"(lambda(table_95 i_97)"
"(if i_97"
"(let-values(((k_21 v_139)(hash-iterate-key+value ht_77 i_97)))"
"(let-values(((table_97)"
"(let-values(((table_98) table_95))"
"(let-values(((table_100)"
"(let-values()"
"(let-values(((key_40 val_34)"
"(let-values()"
"(values v_139 k_21))))"
"(hash-set"
" table_98"
" key_40"
" val_34)))))"
"(values table_100)))))"
"(if(not #f)"
"(for-loop_90 table_97(hash-iterate-next ht_77 i_97))"
" table_97)))"
" table_95))))"
" for-loop_90)"
" '#hasheqv()"
"(hash-iterate-first ht_77))))))"
"(let-values((()"
"(begin"
"(let-values(((start_18) 0)((end_12)(hash-count rev-positions_0))((inc_4) 1))"
"(begin"
"(check-range start_18 end_12 inc_4)"
"((letrec-values(((for-loop_105)"
"(lambda(pos_15)"
"(if(< pos_15 end_12)"
"(let-values(((i_102) pos_15))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_22)"
"(hash-ref"
" rev-positions_0"
" i_102)))"
"((letrec-values(((loop_132)"
"(lambda(mpi_23)"
"(if(hash-ref"
" gen-order_0"
" mpi_23"
" #f)"
"(void)"
"(let-values()"
"(let-values(((name_10"
" base_20)"
"(1/module-path-index-split"
" mpi_23)))"
"(begin"
"(if base_20"
"(let-values()"
"(loop_132"
" base_20))"
"(void))"
"(hash-set!"
" gen-order_0"
" mpi_23"
"(hash-count"
" gen-order_0)))))))))"
" loop_132)"
" mpi_22)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_105(+ pos_15 inc_4))(values))))"
"(values)))))"
" for-loop_105)"
" start_18)))"
"(values))))"
"(let-values()"
"(let-values(((rev-gen-order_0)"
"(let-values(((ht_84) gen-order_0))"
"(begin"
"(check-in-hash ht_84)"
"((letrec-values(((for-loop_106)"
"(lambda(table_101 i_103)"
"(if i_103"
"(let-values(((k_22 v_140)(hash-iterate-key+value ht_84 i_103)))"
"(let-values(((table_55)"
"(let-values(((table_56) table_101))"
"(let-values(((table_57)"
"(let-values()"
"(let-values(((key_41 val_33)"
"(let-values()"
"(values"
" v_140"
" k_22))))"
"(hash-set"
" table_56"
" key_41"
" val_33)))))"
"(values table_57)))))"
"(if(not #f)"
"(for-loop_106 table_55(hash-iterate-next ht_84 i_103))"
" table_55)))"
" table_101))))"
" for-loop_106)"
" '#hasheqv()"
"(hash-iterate-first ht_84))))))"
"(let-values(((gens_0)"
"(let-values(((len_12)(hash-count gen-order_0)))"
"(begin"
"(if(exact-nonnegative-integer? len_12)"
"(void)"
"(let-values()"
"                                      (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_12)))"
"(let-values(((v_41)(make-vector len_12 0)))"
"(begin"
"(if(zero? len_12)"
"(void)"
"(let-values()"
"(let-values(((start_19) 0)((end_13)(hash-count gen-order_0))((inc_5) 1))"
"(begin"
"(check-range start_19 end_13 inc_5)"
"((letrec-values(((for-loop_100)"
"(lambda(i_54 pos_16)"
"(if(< pos_16 end_13)"
"(let-values(((i_104) pos_16))"
"(let-values(((i_105)"
"(let-values(((i_38) i_54))"
"(let-values(((i_106)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_41"
" i_38"
"(let-values()"
"(let-values(((mpi_24)"
"(hash-ref"
" rev-gen-order_0"
" i_104)))"
"(let-values(((path_8"
" base_21)"
"(1/module-path-index-split"
" mpi_24)))"
"(if(top-level-module-path-index?"
" mpi_24)"
"(let-values()"
" 'top)"
"(if(not"
" path_8)"
"(let-values()"
"(box"
"(let-values(((or-part_44)"
"(1/resolved-module-path-name"
"(module-path-index-resolved"
" mpi_24))))"
"(if or-part_44"
" or-part_44"
" 'self))))"
"(if(not"
" base_21)"
"(let-values()"
"(vector"
" path_8))"
"(if base_21"
"(let-values()"
"(vector"
" path_8"
"(hash-ref"
" gen-order_0"
" base_21)))"
"(void)))))))))"
"(unsafe-fx+"
" 1"
" i_38)))))"
"(values i_106)))))"
"(if(if(not"
"((lambda x_81"
"(unsafe-fx= i_105 len_12))"
" i_104))"
"(not #f)"
" #f)"
"(for-loop_100 i_105(+ pos_16 inc_5))"
" i_105)))"
" i_54))))"
" for-loop_100)"
" 0"
" start_19)))))"
" v_41))))))"
"(list"
" 'deserialize-module-path-indexes"
"(list 'quote gens_0)"
"(list"
" 'quote"
"(let-values(((vec_25 i_39)"
"(let-values(((start_20) 0)((end_14)(hash-count rev-positions_0))((inc_6) 1))"
"(begin"
"(check-range start_20 end_14 inc_6)"
"((letrec-values(((for-loop_107)"
"(lambda(vec_13 i_107 pos_17)"
"(if(< pos_17 end_14)"
"(let-values(((i_108) pos_17))"
"(let-values(((vec_26 i_109)"
"(let-values(((vec_27) vec_13)"
"((i_110) i_107))"
"(let-values(((vec_28 i_111)"
"(let-values()"
"(let-values(((new-vec_2)"
"(if(eq?"
" i_110"
"(unsafe-vector*-length"
" vec_27))"
"(grow-vector"
" vec_27)"
" vec_27)))"
"(begin"
"(unsafe-vector*-set!"
" new-vec_2"
" i_110"
"(let-values()"
"(hash-ref"
" gen-order_0"
"(hash-ref"
" rev-positions_0"
" i_108))))"
"(values"
" new-vec_2"
"(unsafe-fx+"
" i_110"
" 1)))))))"
"(values vec_28 i_111)))))"
"(if(not #f)"
"(for-loop_107 vec_26 i_109(+ pos_17 inc_6))"
"(values vec_26 i_109))))"
"(values vec_13 i_107)))))"
" for-loop_107)"
"(make-vector 16)"
" 0"
" start_20)))))"
"(shrink-vector vec_25 i_39)))))))))))))"
"(define-values"
"(deserialize-module-path-indexes)"
"(lambda(gen-vec_0 order-vec_0)"
"(let-values(((gen_0)(make-vector(vector-length gen-vec_0) #f)))"
"(begin"
"(let-values(((vec_29 len_13)"
"(let-values(((vec_30) gen-vec_0))"
"(begin(check-vector vec_30)(values vec_30(unsafe-vector-length vec_30)))))"
"((start_21) 0))"
"(begin"
" #f"
"(check-naturals start_21)"
"((letrec-values(((for-loop_108)"
"(lambda(pos_18 pos_19)"
"(if(if(unsafe-fx< pos_18 len_13) #t #f)"
"(let-values(((d_23)(unsafe-vector-ref vec_29 pos_18))((i_112) pos_19))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" gen_0"
" i_112"
"(if(eq? d_23 'top)"
"(let-values()"
"(deserialize-module-path-index))"
"(if(box? d_23)"
"(let-values()"
"(deserialize-module-path-index"
"(unbox d_23)))"
"(let-values()"
"(deserialize-module-path-index"
"(vector-ref d_23 0)"
"(if(>(vector-length d_23) 1)"
"(vector-ref gen_0(vector-ref d_23 1))"
" #f)))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_108(unsafe-fx+ 1 pos_18)(+ pos_19 1))(values))))"
"(values)))))"
" for-loop_108)"
" 0"
" start_21)))"
"(void)"
"(let-values(((len_0)(vector-length order-vec_0)))"
"(begin"
"(if(exact-nonnegative-integer? len_0)"
"(void)"
"              (let-values () (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_0)))"
"(let-values(((v_141)(make-vector len_0 0)))"
"(begin"
"(if(zero? len_0)"
"(void)"
"(let-values()"
"(let-values(((vec_31 len_14)"
"(let-values(((vec_32) order-vec_0))"
"(begin(check-vector vec_32)(values vec_32(unsafe-vector-length vec_32))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_109)"
"(lambda(i_113 pos_20)"
"(if(unsafe-fx< pos_20 len_14)"
"(let-values(((p_36)(unsafe-vector-ref vec_31 pos_20)))"
"(let-values(((i_114)"
"(let-values(((i_115) i_113))"
"(let-values(((i_35)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_141"
" i_115"
"(let-values()"
"(vector-ref gen_0 p_36)))"
"(unsafe-fx+ 1 i_115)))))"
"(values i_35)))))"
"(if(if(not((lambda x_82(unsafe-fx= i_114 len_0)) p_36))"
"(not #f)"
" #f)"
"(for-loop_109 i_114(unsafe-fx+ 1 pos_20))"
" i_114)))"
" i_113))))"
" for-loop_109)"
" 0"
" 0)))))"
" v_141))))))))"
"(define-values"
"(mpis-as-vector)"
"(lambda(mpis_3)"
"(let-values(((positions_2)(module-path-index-table-positions mpis_3)))"
"(let-values(((vec_33)(make-vector(hash-count positions_2) #f)))"
"(begin"
"(let-values(((ht_85) positions_2))"
"(begin"
"(check-in-hash ht_85)"
"((letrec-values(((for-loop_110)"
"(lambda(i_116)"
"(if i_116"
"(let-values(((mpi_25 pos_21)(hash-iterate-key+value ht_85 i_116)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set! vec_33 pos_21 mpi_25))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_110(hash-iterate-next ht_85 i_116))(values))))"
"(values)))))"
" for-loop_110)"
"(hash-iterate-first ht_85))))"
"(void)"
" vec_33)))))"
"(define-values"
"(serialize-module-uses)"
"(lambda(mus_0 mpis_4)"
"(let-values(((lst_97) mus_0))"
"(begin"
"(check-list lst_97)"
"((letrec-values(((for-loop_6)"
"(lambda(lst_98)"
"(if(pair? lst_98)"
"(let-values(((mu_1)(unsafe-car lst_98))((rest_47)(unsafe-cdr lst_98)))"
"(let-values(((post-guard-var_23)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_23)"
"(let-values()"
"(let-values()"
"(list"
" 'module-use"
"(add-module-path-index! mpis_4(module-use-module mu_1))"
"(module-use-phase mu_1))))))"
"(let-values(((result_85)(if(post-guard-var_23)(for-loop_6 rest_47) null)))"
"(cons elem_23 result_85))))))"
" null))))"
" for-loop_6)"
" lst_97)))))"
"(define-values"
"(interned-literal?)"
"(lambda(v_142)"
"(let-values(((or-part_184)(null? v_142)))"
"(if or-part_184"
" or-part_184"
"(let-values(((or-part_185)(boolean? v_142)))"
"(if or-part_185"
" or-part_185"
"(let-values(((or-part_186)"
"(if(fixnum? v_142)(if(< v_142(sub1(expt 2 30)))(> v_142(-(expt 2 30))) #f) #f)))"
"(if or-part_186"
" or-part_186"
"(let-values(((or-part_187)(symbol? v_142)))"
"(if or-part_187"
" or-part_187"
"(let-values(((or-part_188)(char? v_142)))(if or-part_188 or-part_188(keyword? v_142)))))))))))))"
"(define-values"
"(serialize-phase-to-link-module-uses)"
"(lambda(phase-to-link-module-uses_0 mpis_5)"
"(let-values(((phases-in-order_0)"
"(let-values(((temp10_1)(hash-keys phase-to-link-module-uses_0))((<11_0) <))"
"(sort7.1 #f #f #f #f temp10_1 <11_0))))"
"(list*"
" 'hasheqv"
"(apply"
" append"
"(let-values(((lst_99) phases-in-order_0))"
"(begin"
"(check-list lst_99)"
"((letrec-values(((for-loop_30)"
"(lambda(lst_100)"
"(if(pair? lst_100)"
"(let-values(((phase_46)(unsafe-car lst_100))((rest_48)(unsafe-cdr lst_100)))"
"(let-values(((post-guard-var_24)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_24)"
"(let-values()"
"(let-values()"
"(list"
" phase_46"
"(list*"
" 'list"
"(serialize-module-uses"
"(hash-ref phase-to-link-module-uses_0 phase_46)"
" mpis_5)))))))"
"(let-values(((result_86)"
"(if(post-guard-var_24)(for-loop_30 rest_48) null)))"
"(cons elem_24 result_86))))))"
" null))))"
" for-loop_30)"
" lst_99))))))))"
"(define-values"
"(generate-deserialize6.1)"
"(lambda(syntax-support?2_0 syntax-support?3_0 v4_0 mpis5_0)"
"(let-values(((v_143) v4_0))"
"(let-values(((mpis_6) mpis5_0))"
"(let-values(((syntax-support?_0)(if syntax-support?3_0 syntax-support?2_0 #t)))"
"(let-values()"
"(let-values(((reachable-scopes_6)(find-reachable-scopes v_143)))"
"(let-values(((state_21)(make-serialize-state reachable-scopes_6)))"
"(let-values(((mutables_0)(make-hasheq)))"
"(let-values(((objs_0)(make-hasheq)))"
"(let-values(((shares_0)(make-hasheq)))"
"(let-values(((obj-step_0) 0))"
"(let-values(((frontier_0) null))"
"(letrec-values(((add-frontier!_0)"
"(case-lambda"
"((v_144)(set! frontier_0(cons v_144 frontier_0)))"
"((kind_3 v_78)(add-frontier!_0 v_78)))))"
"(let-values((()"
"(begin"
"((letrec-values(((frontier-loop_0)"
"(lambda(v_145)"
"(begin"
"((letrec-values(((loop_133)"
"(lambda(v_146)"
"(if(let-values(((or-part_189)"
"(interned-literal?"
" v_146)))"
"(if or-part_189"
" or-part_189"
"(1/module-path-index?"
" v_146)))"
"(let-values()(void))"
"(if(hash-ref objs_0 v_146 #f)"
"(let-values()"
"(if(hash-ref"
" mutables_0"
" v_146"
" #f)"
"(void)"
"(let-values()"
"(hash-set!"
" shares_0"
" v_146"
" #t))))"
"(let-values()"
"(begin"
"(if(serialize-fill!?"
" v_146)"
"(let-values()"
"(begin"
"(hash-set!"
" mutables_0"
" v_146"
"(hash-count"
" mutables_0))"
"((serialize-fill!-ref"
" v_146)"
" v_146"
" add-frontier!_0"
" state_21)))"
"(if(serialize? v_146)"
"(let-values()"
"((serialize-ref"
" v_146)"
" v_146"
"(case-lambda"
"((v_104)"
"(loop_133 v_104))"
"((kind_4 v_106)"
"(loop_133"
" v_106)))"
" state_21))"
"(if(pair? v_146)"
"(let-values()"
"(begin"
"(loop_133"
"(car v_146))"
"(loop_133"
"(cdr v_146))))"
"(if(vector? v_146)"
"(let-values()"
"(if(let-values(((or-part_100)"
"(immutable?"
" v_146)))"
"(if or-part_100"
" or-part_100"
"(zero?"
"(vector-length"
" v_146))))"
"(begin"
"(let-values(((vec_34"
" len_15)"
"(let-values(((vec_35)"
" v_146))"
"(begin"
"(check-vector"
" vec_35)"
"(values"
" vec_35"
"(unsafe-vector-length"
" vec_35))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_111)"
"(lambda(pos_22)"
"(if(unsafe-fx<"
" pos_22"
" len_15)"
"(let-values(((e_19)"
"(unsafe-vector-ref"
" vec_34"
" pos_22)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_133"
" e_19))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_111"
"(unsafe-fx+"
" 1"
" pos_22))"
"(values))))"
"(values)))))"
" for-loop_111)"
" 0)))"
"(void))"
"(begin"
"(hash-set!"
" mutables_0"
" v_146"
"(hash-count"
" mutables_0))"
"(begin"
"(let-values(((vec_36"
" len_16)"
"(let-values(((vec_37)"
" v_146))"
"(begin"
"(check-vector"
" vec_37)"
"(values"
" vec_37"
"(unsafe-vector-length"
" vec_37))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_112)"
"(lambda(pos_23)"
"(if(unsafe-fx<"
" pos_23"
" len_16)"
"(let-values(((e_20)"
"(unsafe-vector-ref"
" vec_36"
" pos_23)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(add-frontier!_0"
" e_20))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_112"
"(unsafe-fx+"
" 1"
" pos_23))"
"(values))))"
"(values)))))"
" for-loop_112)"
" 0)))"
"(void)))))"
"(if(box? v_146)"
"(let-values()"
"(if(immutable?"
" v_146)"
"(loop_133"
"(unbox"
" v_146))"
"(begin"
"(hash-set!"
" mutables_0"
" v_146"
"(hash-count"
" mutables_0))"
"(add-frontier!_0"
"(unbox"
" v_146)))))"
"(if(hash?"
" v_146)"
"(let-values()"
"(if(immutable?"
" v_146)"
"(begin"
"(let-values(((lst_101)"
"(sorted-hash-keys"
" v_146)))"
"(begin"
"(check-list"
" lst_101)"
"((letrec-values(((for-loop_113)"
"(lambda(lst_102)"
"(if(pair?"
" lst_102)"
"(let-values(((k_23)"
"(unsafe-car"
" lst_102))"
"((rest_49)"
"(unsafe-cdr"
" lst_102)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_133"
" k_23)"
"(loop_133"
"(hash-ref"
" v_146"
" k_23))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_113"
" rest_49)"
"(values))))"
"(values)))))"
" for-loop_113)"
" lst_101)))"
"(void))"
"(begin"
"(hash-set!"
" mutables_0"
" v_146"
"(hash-count"
" mutables_0))"
"(begin"
"(let-values(((lst_103)"
"(sorted-hash-keys"
" v_146)))"
"(begin"
"(check-list"
" lst_103)"
"((letrec-values(((for-loop_114)"
"(lambda(lst_104)"
"(if(pair?"
" lst_104)"
"(let-values(((k_24)"
"(unsafe-car"
" lst_104))"
"((rest_50)"
"(unsafe-cdr"
" lst_104)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(add-frontier!_0"
" k_24)"
"(add-frontier!_0"
"(hash-ref"
" v_146"
" k_24))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_114"
" rest_50)"
"(values))))"
"(values)))))"
" for-loop_114)"
" lst_103)))"
"(void)))))"
"(if(prefab-struct-key"
" v_146)"
"(let-values()"
"(begin"
"(let-values(((v*_2"
" start*_1"
" stop*_2"
" step*_1)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                               \"vector\""
"(lambda(x_83)"
"(vector?"
" x_83))"
"(lambda(x_84)"
"(unsafe-vector-length"
" x_84))"
"(struct->vector"
" v_146)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_71)"
"(lambda(idx_1)"
"(if(unsafe-fx<"
" idx_1"
" stop*_2)"
"(let-values(((e_21)"
"(unsafe-vector-ref"
" v*_2"
" idx_1)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_133"
" e_21))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_71"
"(unsafe-fx+"
" idx_1"
" 1))"
"(values))))"
"(values)))))"
" for-loop_71)"
" start*_1)))"
"(void)))"
"(if(srcloc?"
" v_146)"
"(let-values()"
"(begin"
"(let-values(((v*_3"
" start*_2"
" stop*_3"
" step*_2)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                                 \"vector\""
"(lambda(x_85)"
"(vector?"
" x_85))"
"(lambda(x_86)"
"(unsafe-vector-length"
" x_86))"
"(struct->vector"
" v_146)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_115)"
"(lambda(idx_2)"
"(if(unsafe-fx<"
" idx_2"
" stop*_3)"
"(let-values(((e_22)"
"(unsafe-vector-ref"
" v*_3"
" idx_2)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_133"
" e_22))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_115"
"(unsafe-fx+"
" idx_2"
" 1))"
"(values))))"
"(values)))))"
" for-loop_115)"
" start*_2)))"
"(void)))"
"(let-values()"
"(void))))))))))"
"(hash-set!"
" objs_0"
" v_146"
" obj-step_0)"
"(set! obj-step_0"
"(add1"
" obj-step_0)))))))))"
" loop_133)"
" v_145)"
"(if(null? frontier_0)"
"(void)"
"(let-values()"
"(let-values(((l_50) frontier_0))"
"(begin"
"(set! frontier_0 null)"
"(let-values(((lst_105) l_50))"
"(begin"
"(check-list lst_105)"
"((letrec-values(((for-loop_116)"
"(lambda(lst_106)"
"(if(pair? lst_106)"
"(let-values(((v_147)"
"(unsafe-car"
" lst_106))"
"((rest_51)"
"(unsafe-cdr"
" lst_106)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(frontier-loop_0"
" v_147))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_116"
" rest_51)"
"(values))))"
"(values)))))"
" for-loop_116)"
" lst_105)))"
"(void)))))))))"
" frontier-loop_0)"
" v_143)"
"(values))))"
"(let-values(((num-mutables_0)(hash-count mutables_0)))"
"(let-values(((share-step-positions_0)"
"(let-values(((share-steps_0)"
"(let-values(((ht_86) shares_0))"
"(begin"
"(check-in-hash-keys ht_86)"
"((letrec-values(((for-loop_117)"
"(lambda(i_117)"
"(if i_117"
"(let-values(((obj_0)"
"(hash-iterate-key"
" ht_86"
" i_117)))"
"(let-values(((post-guard-var_25)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_25)"
"(let-values()"
"(let-values()"
"(hash-ref"
" objs_0"
" obj_0)))))"
"(let-values(((result_87)"
"(if(post-guard-var_25)"
"(for-loop_117"
"(hash-iterate-next"
" ht_86"
" i_117))"
" null)))"
"(cons"
" elem_25"
" result_87))))))"
" null))))"
" for-loop_117)"
"(hash-iterate-first ht_86))))))"
"(let-values(((lst_107)"
"(let-values(((share-steps12_0) share-steps_0)"
"((<13_0) <))"
"(sort7.1 #f #f #f #f share-steps12_0 <13_0)))"
"((start_22) num-mutables_0))"
"(begin"
"(check-list lst_107)"
"(check-naturals start_22)"
"((letrec-values(((for-loop_118)"
"(lambda(table_102 lst_108 pos_24)"
"(if(if(pair? lst_108) #t #f)"
"(let-values(((step_3)(unsafe-car lst_108))"
"((rest_52)(unsafe-cdr lst_108))"
"((pos_25) pos_24))"
"(let-values(((table_103)"
"(let-values(((table_104)"
" table_102))"
"(let-values(((table_105)"
"(let-values()"
"(let-values(((key_42"
" val_35)"
"(let-values()"
"(values"
" step_3"
" pos_25))))"
"(hash-set"
" table_104"
" key_42"
" val_35)))))"
"(values table_105)))))"
"(if(not #f)"
"(for-loop_118"
" table_103"
" rest_52"
"(+ pos_24 1))"
" table_103)))"
" table_102))))"
" for-loop_118)"
" '#hasheqv()"
" lst_107"
" start_22))))))"
"(let-values(((stream_0) null))"
"(let-values(((stream-size_0) 0))"
"(let-values(((next-push-position_0)(lambda() stream-size_0)))"
"(let-values(((quoted?_0)"
"(lambda(pos_26)"
"(let-values(((v_148)"
"(list-ref"
" stream_0"
"(- stream-size_0(add1 pos_26)))))"
"(let-values(((or-part_190)(not(keyword? v_148))))"
"(if or-part_190 or-part_190(eq? '#:quote v_148)))))))"
"(let-values(((ser-reset!_0)"
"(lambda(pos_27)"
"(begin"
"(set! stream_0"
"(list-tail stream_0(- stream-size_0 pos_27)))"
"(set! stream-size_0 pos_27)))))"
"(let-values(((reap-stream!_0)"
"(lambda()"
"(begin0"
"(list->vector(reverse$1 stream_0))"
"(set! stream_0 null)"
"(set! stream-size_0 0)))))"
"(letrec-values(((ser-push!_13)"
"(case-lambda"
"((v_149)"
"(if(hash-ref shares_0 v_149 #f)"
"(let-values()"
"(let-values(((n_46)"
"(hash-ref"
" share-step-positions_0"
"(hash-ref objs_0 v_149))))"
"(begin"
"(ser-push!_13 'tag '#:ref)"
"(ser-push!_13 'exact n_46))))"
"(let-values(((c1_127)"
"(hash-ref mutables_0 v_149 #f)))"
"(if c1_127"
"((lambda(n_47)"
"(begin"
"(ser-push!_13 'tag '#:ref)"
"(ser-push!_13 'exact n_47)))"
" c1_127)"
"(let-values()(ser-push-encoded!_0 v_149))))))"
"((kind_5 v_150)"
"(let-values(((tmp_17) kind_5))"
"(if(equal? tmp_17 'exact)"
"(let-values()"
"(begin"
"(set! stream_0(cons v_150 stream_0))"
"(set! stream-size_0(add1 stream-size_0))))"
"(if(equal? tmp_17 'tag)"
"(let-values()(ser-push!_13 'exact v_150))"
"(if(equal? tmp_17 'reference)"
"(let-values()"
"(if(hash-ref shares_0 v_150 #f)"
"(let-values()"
"(let-values(((n_48)"
"(hash-ref"
" share-step-positions_0"
"(hash-ref objs_0 v_150))))"
"(ser-push!_13 'exact n_48)))"
"(let-values(((c2_1)"
"(hash-ref"
" mutables_0"
" v_150"
" #f)))"
"(if c2_1"
"((lambda(n_49)"
"(ser-push!_13 'exact n_49))"
" c2_1)"
"(let-values()"
"(ser-push!_13 v_150))))))"
"(let-values()(ser-push!_13 v_150)))))))))"
"((ser-push-encoded!_0)"
"(lambda(v_151)"
"(if(keyword? v_151)"
"(let-values()"
"(begin"
"(ser-push!_13 'tag '#:quote)"
"(ser-push!_13 'exact v_151)))"
"(if(1/module-path-index? v_151)"
"(let-values()"
"(begin"
"(ser-push!_13 'tag '#:mpi)"
"(ser-push!_13"
" 'exact"
"(add-module-path-index!/pos mpis_6 v_151))))"
"(if(serialize? v_151)"
"(let-values()"
"((serialize-ref v_151)"
" v_151"
" ser-push!_13"
" state_21))"
"(if(if(list? v_151)"
"(if(pair? v_151)(pair?(cdr v_151)) #f)"
" #f)"
"(let-values()"
"(let-values(((start-pos_0)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_13 'tag '#:list)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_13"
" 'exact"
"(length v_151))"
"(values))))"
"(let-values(((all-quoted?_0)"
"(let-values(((lst_109)"
" v_151))"
"(begin"
"(check-list lst_109)"
"((letrec-values(((for-loop_119)"
"(lambda(all-quoted?_1"
" lst_110)"
"(if(pair?"
" lst_110)"
"(let-values(((i_118)"
"(unsafe-car"
" lst_110))"
"((rest_53)"
"(unsafe-cdr"
" lst_110)))"
"(let-values(((all-quoted?_2)"
"(let-values(((all-quoted?_3)"
" all-quoted?_1))"
"(let-values(((all-quoted?_4)"
"(let-values()"
"(let-values(((i-pos_0)"
"(next-push-position_0)))"
"(begin"
"(ser-push!_13"
" i_118)"
"(if all-quoted?_3"
"(quoted?_0"
" i-pos_0)"
" #f))))))"
"(values"
" all-quoted?_4)))))"
"(if(not"
" #f)"
"(for-loop_119"
" all-quoted?_2"
" rest_53)"
" all-quoted?_2)))"
" all-quoted?_1))))"
" for-loop_119)"
" #t"
" lst_109)))))"
"(if all-quoted?_0"
"(let-values()"
"(begin"
"(ser-reset!_0 start-pos_0)"
"(ser-push-optional-quote!_0)"
"(ser-push!_13 'exact v_151)))"
"(void)))))))"
"(if(pair? v_151)"
"(let-values()"
"(let-values(((start-pos_1)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_13"
" 'tag"
" '#:cons)"
"(values))))"
"(let-values(((a-pos_0)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_13"
"(car v_151))"
"(values))))"
"(let-values(((d-pos_0)"
"(next-push-position_0)))"
"(begin"
"(ser-push!_13(cdr v_151))"
"(if(if(quoted?_0 a-pos_0)"
"(quoted?_0 d-pos_0)"
" #f)"
"(let-values()"
"(begin"
"(ser-reset!_0"
" start-pos_1)"
"(ser-push-optional-quote!_0)"
"(ser-push!_13"
" 'exact"
" v_151)))"
"(void)))))))))"
"(if(box? v_151)"
"(let-values()"
"(let-values(((start-pos_2)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_13"
" 'tag"
" '#:box)"
"(values))))"
"(let-values(((v-pos_0)"
"(next-push-position_0)))"
"(begin"
"(ser-push!_13(unbox v_151))"
"(if(quoted?_0 v-pos_0)"
"(let-values()"
"(begin"
"(ser-reset!_0 start-pos_2)"
"(ser-push-optional-quote!_0)"
"(ser-push!_13"
" 'exact"
" v_151)))"
"(void)))))))"
"(if(vector? v_151)"
"(let-values()"
"(let-values(((start-pos_3)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_13"
" 'tag"
" '#:vector)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_13"
" 'exact"
"(vector-length"
" v_151))"
"(values))))"
"(let-values(((all-quoted?_5)"
"(let-values(((vec_38"
" len_17)"
"(let-values(((vec_39)"
" v_151))"
"(begin"
"(check-vector"
" vec_39)"
"(values"
" vec_39"
"(unsafe-vector-length"
" vec_39))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_120)"
"(lambda(all-quoted?_6"
" pos_28)"
"(if(unsafe-fx<"
" pos_28"
" len_17)"
"(let-values(((i_119)"
"(unsafe-vector-ref"
" vec_38"
" pos_28)))"
"(let-values(((all-quoted?_7)"
"(let-values(((all-quoted?_8)"
" all-quoted?_6))"
"(let-values(((all-quoted?_9)"
"(let-values()"
"(let-values(((i-pos_1)"
"(next-push-position_0)))"
"(begin"
"(ser-push!_13"
" i_119)"
"(if all-quoted?_8"
"(quoted?_0"
" i-pos_1)"
" #f))))))"
"(values"
" all-quoted?_9)))))"
"(if(not"
" #f)"
"(for-loop_120"
" all-quoted?_7"
"(unsafe-fx+"
" 1"
" pos_28))"
" all-quoted?_7)))"
" all-quoted?_6))))"
" for-loop_120)"
" #t"
" 0)))))"
"(if all-quoted?_5"
"(let-values()"
"(begin"
"(ser-reset!_0"
" start-pos_3)"
"(ser-push-optional-quote!_0)"
"(ser-push!_13"
" 'exact"
" v_151)))"
"(void)))))))"
"(if(hash? v_151)"
"(let-values()"
"(let-values(((start-pos_4)"
"(next-push-position_0)))"
"(let-values(((as-set?_0)"
"(let-values(((ht_87)"
" v_151))"
"(begin"
"(check-in-hash-values"
" ht_87)"
"((letrec-values(((for-loop_121)"
"(lambda(result_88"
" i_120)"
"(if i_120"
"(let-values(((val_36)"
"(hash-iterate-value"
" ht_87"
" i_120)))"
"(let-values(((result_89)"
"(let-values()"
"(let-values(((result_90)"
"(let-values()"
"(let-values()"
"(eq?"
" val_36"
" #t)))))"
"(values"
" result_90)))))"
"(if(if(not"
"((lambda x_87"
"(not"
" result_89))"
" val_36))"
"(not"
" #f)"
" #f)"
"(for-loop_121"
" result_89"
"(hash-iterate-next"
" ht_87"
" i_120))"
" result_89)))"
" result_88))))"
" for-loop_121)"
" #t"
"(hash-iterate-first"
" ht_87))))))"
"(let-values((()"
"(begin"
"(ser-push!_13"
" 'tag"
"(if as-set?_0"
"(if(hash-eq?"
" v_151)"
"(let-values()"
" '#:seteq)"
"(if(hash-eqv?"
" v_151)"
"(let-values()"
" '#:seteqv)"
"(let-values()"
" '#:set)))"
"(if(hash-eq?"
" v_151)"
"(let-values()"
" '#:hasheq)"
"(if(hash-eqv?"
" v_151)"
"(let-values()"
" '#:hasheqv)"
"(let-values()"
" '#:hash)))))"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_13"
" 'exact"
"(hash-count"
" v_151))"
"(values))))"
"(let-values(((ks_0)"
"(sorted-hash-keys"
" v_151)))"
"(let-values(((all-quoted?_10)"
"(let-values(((lst_111)"
" ks_0))"
"(begin"
"(check-list"
" lst_111)"
"((letrec-values(((for-loop_122)"
"(lambda(all-quoted?_11"
" lst_112)"
"(if(pair?"
" lst_112)"
"(let-values(((k_25)"
"(unsafe-car"
" lst_112))"
"((rest_54)"
"(unsafe-cdr"
" lst_112)))"
"(let-values(((all-quoted?_12)"
"(let-values(((all-quoted?_13)"
" all-quoted?_11))"
"(let-values(((all-quoted?_14)"
"(let-values()"
"(let-values(((k-pos_0)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_13"
" k_25)"
"(values))))"
"(let-values(((v-pos_1)"
"(next-push-position_0)))"
"(begin"
"(if as-set?_0"
"(void)"
"(let-values()"
"(ser-push!_13"
"(hash-ref"
" v_151"
" k_25))))"
"(if all-quoted?_13"
"(if(quoted?_0"
" k-pos_0)"
"(let-values(((or-part_191)"
" as-set?_0))"
"(if or-part_191"
" or-part_191"
"(quoted?_0"
" v-pos_1)))"
" #f)"
" #f))))))))"
"(values"
" all-quoted?_14)))))"
"(if(not"
" #f)"
"(for-loop_122"
" all-quoted?_12"
" rest_54)"
" all-quoted?_12)))"
" all-quoted?_11))))"
" for-loop_122)"
" #t"
" lst_111)))))"
"(if all-quoted?_10"
"(let-values()"
"(begin"
"(ser-reset!_0"
" start-pos_4)"
"(ser-push-optional-quote!_0)"
"(ser-push!_13"
" 'exact"
" v_151)))"
"(void)))))))))"
"(let-values(((c3_0)"
"(prefab-struct-key"
" v_151)))"
"(if c3_0"
"((lambda(k_26)"
"(let-values(((vec_40)"
"(struct->vector"
" v_151)))"
"(let-values(((start-pos_5)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_13"
" 'tag"
" '#:prefab)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_13"
" 'exact"
" k_26)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_13"
" 'exact"
"(sub1"
"(vector-length"
" vec_40)))"
"(values))))"
"(let-values(((all-quoted?_15)"
"(let-values(((v*_4"
" start*_3"
" stop*_4"
" step*_3)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                               \"vector\""
"(lambda(x_88)"
"(vector?"
" x_88))"
"(lambda(x_89)"
"(unsafe-vector-length"
" x_89))"
" vec_40"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_123)"
"(lambda(all-quoted?_16"
" idx_3)"
"(if(unsafe-fx<"
" idx_3"
" stop*_4)"
"(let-values(((i_121)"
"(unsafe-vector-ref"
" v*_4"
" idx_3)))"
"(let-values(((all-quoted?_17)"
"(let-values(((all-quoted?_18)"
" all-quoted?_16))"
"(let-values(((all-quoted?_19)"
"(let-values()"
"(let-values(((i-pos_2)"
"(next-push-position_0)))"
"(begin"
"(ser-push!_13"
" i_121)"
"(if all-quoted?_18"
"(quoted?_0"
" i-pos_2)"
" #f))))))"
"(values"
" all-quoted?_19)))))"
"(if(not"
" #f)"
"(for-loop_123"
" all-quoted?_17"
"(unsafe-fx+"
" idx_3"
" 1))"
" all-quoted?_17)))"
" all-quoted?_16))))"
" for-loop_123)"
" #t"
" start*_3)))))"
"(if all-quoted?_15"
"(let-values()"
"(begin"
"(ser-reset!_0"
" start-pos_5)"
"(ser-push-optional-quote!_0)"
"(ser-push!_13"
" 'exact"
" v_151)))"
"(void)))))))))"
" c3_0)"
"(if(srcloc? v_151)"
"(let-values()"
"(begin"
"(ser-push!_13 'tag '#:srcloc)"
"(ser-push!_13"
"(srcloc-source v_151))"
"(ser-push!_13"
"(srcloc-line v_151))"
"(ser-push!_13"
"(srcloc-column v_151))"
"(ser-push!_13"
"(srcloc-position v_151))"
"(ser-push!_13"
"(srcloc-span v_151))))"
"(let-values()"
"(begin"
"(ser-push-optional-quote!_0)"
"(ser-push!_13"
" 'exact"
" v_151))))))))))))))))"
"((ser-push-optional-quote!_0)(lambda()(void))))"
"(let-values(((ser-shell!_0)"
"(lambda(v_152)"
"(if(serialize-fill!? v_152)"
"(let-values()"
"((serialize-ref v_152) v_152 ser-push!_13 state_21))"
"(if(box? v_152)"
"(let-values()(ser-push!_13 'tag '#:box))"
"(if(vector? v_152)"
"(let-values()"
"(begin"
"(ser-push!_13 'tag '#:vector)"
"(ser-push!_13 'exact(vector-length v_152))))"
"(if(hash? v_152)"
"(let-values()"
"(ser-push!_13"
" 'tag"
"(if(hash-eq? v_152)"
"(let-values() '#:hasheq)"
"(if(hash-eqv? v_152)"
"(let-values() '#:hasheqv)"
"(let-values() '#:hash)))))"
"(let-values()"
"(error"
" 'ser-shell"
"                                                                           \"unknown mutable: ~e\""
" v_152)))))))))"
"(let-values(((ser-shell-fill!_0)"
"(lambda(v_153)"
"(if(serialize-fill!? v_153)"
"(let-values()"
"((serialize-fill!-ref v_153)"
" v_153"
" ser-push!_13"
" state_21))"
"(if(box? v_153)"
"(let-values()"
"(begin"
"(ser-push!_13 'tag '#:set-box!)"
"(ser-push!_13(unbox v_153))))"
"(if(vector? v_153)"
"(let-values()"
"(begin"
"(ser-push!_13 'tag '#:set-vector!)"
"(ser-push!_13 'exact(vector-length v_153))"
"(let-values(((vec_41 len_18)"
"(let-values(((vec_42) v_153))"
"(begin"
"(check-vector vec_42)"
"(values"
" vec_42"
"(unsafe-vector-length"
" vec_42))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_124)"
"(lambda(pos_29)"
"(if(unsafe-fx<"
" pos_29"
" len_18)"
"(let-values(((v_154)"
"(unsafe-vector-ref"
" vec_41"
" pos_29)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(ser-push!_13"
" v_154))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_124"
"(unsafe-fx+"
" 1"
" pos_29))"
"(values))))"
"(values)))))"
" for-loop_124)"
" 0)))"
"(void)))"
"(if(hash? v_153)"
"(let-values()"
"(let-values((()"
"(begin"
"(ser-push!_13"
" 'tag"
" '#:set-hash!)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_13"
" 'exact"
"(hash-count v_153))"
"(values))))"
"(let-values(((ks_1)"
"(sorted-hash-keys v_153)))"
"(begin"
"(let-values(((lst_113) ks_1))"
"(begin"
"(check-list lst_113)"
"((letrec-values(((for-loop_125)"
"(lambda(lst_114)"
"(if(pair?"
" lst_114)"
"(let-values(((k_27)"
"(unsafe-car"
" lst_114))"
"((rest_55)"
"(unsafe-cdr"
" lst_114)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(ser-push!_13"
" k_27)"
"(ser-push!_13"
"(hash-ref"
" v_153"
" k_27))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_125"
" rest_55)"
"(values))))"
"(values)))))"
" for-loop_125)"
" lst_113)))"
"(void))))))"
"(let-values()"
"(error"
" 'ser-shell-fill"
"                                                                             \"unknown mutable: ~e\""
" v_153)))))))))"
"(let-values(((rev-mutables_0)"
"(let-values(((ht_88) mutables_0))"
"(begin"
"(check-in-hash ht_88)"
"((letrec-values(((for-loop_126)"
"(lambda(table_106 i_122)"
"(if i_122"
"(let-values(((k_28 v_155)"
"(hash-iterate-key+value"
" ht_88"
" i_122)))"
"(let-values(((table_107)"
"(let-values(((table_108)"
" table_106))"
"(let-values(((table_109)"
"(let-values()"
"(let-values(((key_43"
" val_37)"
"(let-values()"
"(values"
" v_155"
" k_28))))"
"(hash-set"
" table_108"
" key_43"
" val_37)))))"
"(values"
" table_109)))))"
"(if(not #f)"
"(for-loop_126"
" table_107"
"(hash-iterate-next"
" ht_88"
" i_122))"
" table_107)))"
" table_106))))"
" for-loop_126)"
" '#hasheqv()"
"(hash-iterate-first ht_88))))))"
"(let-values(((mutable-shell-bindings_0)"
"(begin"
"(begin"
"(let-values(((start_23) 0)"
"((end_15)(hash-count mutables_0))"
"((inc_7) 1))"
"(begin"
"(check-range start_23 end_15 inc_7)"
"((letrec-values(((for-loop_127)"
"(lambda(pos_30)"
"(if(< pos_30 end_15)"
"(let-values(((i_123)"
" pos_30))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(ser-shell!_0"
"(hash-ref"
" rev-mutables_0"
" i_123)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_127"
"(+"
" pos_30"
" inc_7))"
"(values))))"
"(values)))))"
" for-loop_127)"
" start_23)))"
"(void))"
"(reap-stream!_0))))"
"(let-values(((rev-shares_0)"
"(let-values(((ht_89) shares_0))"
"(begin"
"(check-in-hash-keys ht_89)"
"((letrec-values(((for-loop_128)"
"(lambda(table_110 i_124)"
"(if i_124"
"(let-values(((obj_1)"
"(hash-iterate-key"
" ht_89"
" i_124)))"
"(let-values(((table_111)"
"(let-values(((table_112)"
" table_110))"
"(let-values(((table_113)"
"(let-values()"
"(let-values(((key_44"
" val_38)"
"(let-values()"
"(values"
"(hash-ref"
" share-step-positions_0"
"(hash-ref"
" objs_0"
" obj_1))"
" obj_1))))"
"(hash-set"
" table_112"
" key_44"
" val_38)))))"
"(values"
" table_113)))))"
"(if(not #f)"
"(for-loop_128"
" table_111"
"(hash-iterate-next"
" ht_89"
" i_124))"
" table_111)))"
" table_110))))"
" for-loop_128)"
" '#hasheqv()"
"(hash-iterate-first ht_89))))))"
"(let-values(((shared-bindings_0)"
"(begin"
"(begin"
"(let-values(((start_24) num-mutables_0)"
"((end_16)"
"(+"
" num-mutables_0"
"(hash-count shares_0)))"
"((inc_8) 1))"
"(begin"
"(check-range start_24 end_16 inc_8)"
"((letrec-values(((for-loop_129)"
"(lambda(pos_31)"
"(if(<"
" pos_31"
" end_16)"
"(let-values(((i_125)"
" pos_31))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(ser-push-encoded!_0"
"(hash-ref"
" rev-shares_0"
" i_125)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_129"
"(+"
" pos_31"
" inc_8))"
"(values))))"
"(values)))))"
" for-loop_129)"
" start_24)))"
"(void))"
"(reap-stream!_0))))"
"(let-values(((mutable-fills_0)"
"(begin"
"(begin"
"(let-values(((start_25) 0)"
"((end_17)"
"(hash-count mutables_0))"
"((inc_9) 1))"
"(begin"
"(check-range start_25 end_17 inc_9)"
"((letrec-values(((for-loop_130)"
"(lambda(pos_32)"
"(if(<"
" pos_32"
" end_17)"
"(let-values(((i_126)"
" pos_32))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(ser-shell-fill!_0"
"(hash-ref"
" rev-mutables_0"
" i_126)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_130"
"(+"
" pos_32"
" inc_9))"
"(values))))"
"(values)))))"
" for-loop_130)"
" start_25)))"
"(void))"
"(reap-stream!_0))))"
"(list"
" 'deserialize"
" mpi-vector-id"
"(if syntax-support?_0 inspector-id #f)"
"(if syntax-support?_0 bulk-binding-registry-id #f)"
"(list 'quote(hash-count mutables_0))"
"(list 'quote mutable-shell-bindings_0)"
"(list 'quote(hash-count shares_0))"
"(list 'quote shared-bindings_0)"
"(list 'quote mutable-fills_0)"
"(list"
" 'quote"
"(begin"
"(ser-push!_13 v_143)"
"(reap-stream!_0)))))))))))))))))))))))))))))))))))"
"(define-values"
"(sorted-hash-keys)"
"(lambda(ht_90)"
"(let-values(((ks_2)(hash-keys ht_90)))"
"(if(null? ks_2)"
"(let-values() ks_2)"
"(if(null?(cdr ks_2))"
"(let-values() ks_2)"
"(if(andmap2 symbol? ks_2)"
"(let-values()"
"(let-values(((ks14_0) ks_2)((symbol<?15_0) symbol<?))(sort7.1 #f #f #f #f ks14_0 symbol<?15_0)))"
"(if(andmap2 scope? ks_2)"
"(let-values()"
"(let-values(((ks16_0) ks_2)((scope<?17_0) scope<?))(sort7.1 #f #f #f #f ks16_0 scope<?17_0)))"
"(if(andmap2 shifted-multi-scope? ks_2)"
"(let-values()"
"(let-values(((ks18_0) ks_2)((shifted-multi-scope<?19_0) shifted-multi-scope<?))"
"(sort7.1 #f #f #f #f ks18_0 shifted-multi-scope<?19_0)))"
"(if(andmap2 real? ks_2)"
"(let-values()(let-values(((ks20_0) ks_2)((<21_0) <))(sort7.1 #f #f #f #f ks20_0 <21_0)))"
"(let-values() ks_2))))))))))"
"(define-values"
"(deserialize)"
"(lambda(mpis_7"
" inspector_5"
" bulk-binding-registry_4"
" num-mutables_1"
" mutable-vec_0"
" num-shared_0"
" shared-vec_0"
" mutable-fill-vec_0"
" result-vec_0)"
"(let-values(((shared_0)(make-vector(+ num-mutables_1 num-shared_0) 'uninit)))"
"(let-values((()"
"(begin"
"(let-values(((start_26) 0)((end_18) num-mutables_1)((inc_10) 1))"
"(begin"
"(check-range start_26 end_18 inc_10)"
"((letrec-values(((for-loop_131)"
"(lambda(pos_33 pos_34)"
"(if(< pos_34 end_18)"
"(let-values(((i_127) pos_34))"
"(let-values(((pos_35)"
"(let-values(((pos_36) pos_33))"
"(let-values(((pos_37)"
"(let-values()"
"(let-values(((d_24 next-pos_0)"
"(decode-shell"
" mutable-vec_0"
" pos_36"
" mpis_7"
" inspector_5"
" bulk-binding-registry_4"
" shared_0)))"
"(begin"
"(vector-set! shared_0 i_127 d_24)"
" next-pos_0)))))"
"(values pos_37)))))"
"(if(not #f)(for-loop_131 pos_35(+ pos_34 inc_10)) pos_35)))"
" pos_33))))"
" for-loop_131)"
" 0"
" start_26)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((start_27) num-mutables_1)"
"((end_19)(+ num-mutables_1 num-shared_0))"
"((inc_11) 1))"
"(begin"
"(check-range start_27 end_19 inc_11)"
"((letrec-values(((for-loop_132)"
"(lambda(pos_38 pos_39)"
"(if(< pos_39 end_19)"
"(let-values(((i_128) pos_39))"
"(let-values(((pos_40)"
"(let-values(((pos_41) pos_38))"
"(let-values(((pos_42)"
"(let-values()"
"(let-values(((d_25 next-pos_1)"
"(decode"
" shared-vec_0"
" pos_41"
" mpis_7"
" inspector_5"
" bulk-binding-registry_4"
" shared_0)))"
"(begin"
"(vector-set!"
" shared_0"
" i_128"
" d_25)"
" next-pos_1)))))"
"(values pos_42)))))"
"(if(not #f)(for-loop_132 pos_40(+ pos_39 inc_11)) pos_40)))"
" pos_38))))"
" for-loop_132)"
" 0"
" start_27)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((start_28) 0)"
"((end_20) num-mutables_1)"
"((inc_12) 1)"
"((vec_43 len_19)"
"(let-values(((vec_44) shared_0))"
"(begin(check-vector vec_44)(values vec_44(unsafe-vector-length vec_44))))))"
"(begin"
"(check-range start_28 end_20 inc_12)"
" #f"
"((letrec-values(((for-loop_133)"
"(lambda(pos_43 pos_44 pos_45)"
"(if(if(< pos_44 end_20)(unsafe-fx< pos_45 len_19) #f)"
"(let-values(((v_156)(unsafe-vector-ref vec_43 pos_45)))"
"(let-values(((pos_46)"
"(let-values(((pos_47) pos_43))"
"(let-values(((pos_48)"
"(let-values()"
"(decode-fill!"
" v_156"
" mutable-fill-vec_0"
" pos_47"
" mpis_7"
" inspector_5"
" bulk-binding-registry_4"
" shared_0))))"
"(values pos_48)))))"
"(if(not #f)"
"(for-loop_133 pos_46(+ pos_44 inc_12)(unsafe-fx+ 1 pos_45))"
" pos_46)))"
" pos_43))))"
" for-loop_133)"
" 0"
" start_28"
" 0)))"
"(values))))"
"(let-values(((result_91 done-pos_0)"
"(decode result-vec_0 0 mpis_7 inspector_5 bulk-binding-registry_4 shared_0)))"
" result_91)))))))"
"(define-values"
"(decode-shell)"
"(lambda(vec_45 pos_49 mpis_8 inspector_6 bulk-binding-registry_5 shared_1)"
"(let-values(((tmp_18)(vector-ref vec_45 pos_49)))"
"(if(equal? tmp_18 '#:box)"
"(let-values()(values(box #f)(add1 pos_49)))"
"(if(equal? tmp_18 '#:vector)"
"(let-values()(values(make-vector(vector-ref vec_45(add1 pos_49)))(+ pos_49 2)))"
"(if(equal? tmp_18 '#:hash)"
"(let-values()(values(make-hasheq)(add1 pos_49)))"
"(if(equal? tmp_18 '#:hasheq)"
"(let-values()(values(make-hasheq)(add1 pos_49)))"
"(if(equal? tmp_18 '#:hasheqv)"
"(let-values()(values(make-hasheqv)(add1 pos_49)))"
"(let-values()(decode vec_45 pos_49 mpis_8 inspector_6 bulk-binding-registry_5 shared_1))))))))))"
"(define-values"
"(decode)"
"(lambda(vec_46 pos_50 mpis_9 inspector_7 bulk-binding-registry_6 shared_2)"
"(let-values()"
"(let-values(((tmp_19)(vector-ref vec_46 pos_50)))"
"(let-values(((index_0)"
"(if(keyword? tmp_19)"
"(hash-ref"
" '#hasheq((#:scope+kind . 17)"
"(#:seteqv . 14)"
"(#:ref . 1)"
"(#:list . 12)"
"(#:vector . 12)"
"(#:module-binding . 23)"
"(#:set . 14)"
"(#:srcloc . 7)"
"(#:bulk-binding-at . 21)"
"(#:multi-scope . 18)"
"(#:hasheq . 13)"
"(#:simple-module-binding . 24)"
"(#:scope . 16)"
"(#:bulk-binding-registry . 3)"
"(#:hash . 13)"
"(#:shifted-multi-scope . 19)"
"(#:mpi . 9)"
"(#:quote . 8)"
"(#:prefab . 15)"
"(#:box . 10)"
"(#:local-binding . 25)"
"(#:bulk-binding . 26)"
"(#:inspector . 2)"
"(#:table-with-bulk-bindings . 20)"
"(#:seteq . 14)"
"(#:provided . 27)"
"(#:syntax . 4)"
"(#:cons . 11)"
"(#:hasheqv . 13)"
"(#:datum->syntax . 5)"
"(#:syntax+props . 6)"
"(#:representative-scope . 22))"
" tmp_19"
"(lambda() 0))"
" 0)))"
"(if(unsafe-fx< index_0 13)"
"(if(unsafe-fx< index_0 6)"
"(if(unsafe-fx< index_0 2)"
"(if(unsafe-fx< index_0 1)"
"(let-values()(values(vector-ref vec_46 pos_50)(add1 pos_50)))"
"(let-values()(values(vector-ref shared_2(vector-ref vec_46(add1 pos_50)))(+ pos_50 2))))"
"(if(unsafe-fx< index_0 3)"
"(let-values()(values inspector_7(add1 pos_50)))"
"(if(unsafe-fx< index_0 4)"
"(let-values()(values bulk-binding-registry_6(add1 pos_50)))"
"(if(unsafe-fx< index_0 5)"
"(let-values()"
"(let-values(((content_7 next-pos_2)"
"(decode"
" vec_46"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((context_2 next-pos_3)"
"(let-values(((i_129)(vector-ref vec_46 next-pos_2)))"
"(if(exact-integer? i_129)"
"(values(vector-ref shared_2 i_129)(add1 next-pos_2))"
"(decode"
" vec_46"
" next-pos_2"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))))"
"(let-values(((srcloc_3 next-pos_4)"
"(let-values(((i_130)(vector-ref vec_46 next-pos_3)))"
"(if(exact-integer? i_130)"
"(values(vector-ref shared_2 i_130)(add1 next-pos_3))"
"(decode"
" vec_46"
" next-pos_3"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))))"
"(values"
"(deserialize-syntax content_7 context_2 srcloc_3 #f #f inspector_7)"
" next-pos_4)))))"
"(let-values()"
"(let-values(((content_8 next-pos_5)"
"(decode"
" vec_46"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((context_3 next-pos_6)"
"(let-values(((i_131)(vector-ref vec_46 next-pos_5)))"
"(if(exact-integer? i_131)"
"(values(vector-ref shared_2 i_131)(add1 next-pos_5))"
"(decode"
" vec_46"
" next-pos_5"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))))"
"(let-values(((srcloc_4 next-pos_7)"
"(let-values(((i_132)(vector-ref vec_46 next-pos_6)))"
"(if(exact-integer? i_132)"
"(values(vector-ref shared_2 i_132)(add1 next-pos_6))"
"(decode"
" vec_46"
" next-pos_6"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))))"
"(values"
"(deserialize-datum->syntax content_8 context_3 srcloc_4 inspector_7)"
" next-pos_7)))))))))"
"(if(unsafe-fx< index_0 9)"
"(if(unsafe-fx< index_0 7)"
"(let-values()"
"(let-values(((content_9 next-pos_8)"
"(decode vec_46(add1 pos_50) mpis_9 inspector_7 bulk-binding-registry_6 shared_2)))"
"(let-values(((context_4 next-pos_9)"
"(let-values(((i_133)(vector-ref vec_46 next-pos_8)))"
"(if(exact-integer? i_133)"
"(values(vector-ref shared_2 i_133)(add1 next-pos_8))"
"(decode"
" vec_46"
" next-pos_8"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))))"
"(let-values(((srcloc_5 next-pos_10)"
"(let-values(((i_134)(vector-ref vec_46 next-pos_9)))"
"(if(exact-integer? i_134)"
"(values(vector-ref shared_2 i_134)(add1 next-pos_9))"
"(decode"
" vec_46"
" next-pos_9"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))))"
"(let-values(((props_1 next-pos_11)"
"(decode"
" vec_46"
" next-pos_10"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((tamper_2 next-pos_12)"
"(decode"
" vec_46"
" next-pos_11"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(values"
"(deserialize-syntax content_9 context_4 srcloc_5 props_1 tamper_2 inspector_7)"
" next-pos_12)))))))"
"(if(unsafe-fx< index_0 8)"
"(let-values()"
"(let-values(((source_0 next-pos_13)"
"(decode vec_46(add1 pos_50) mpis_9 inspector_7 bulk-binding-registry_6 shared_2)))"
"(let-values(((line_0 next-pos_14)"
"(decode vec_46 next-pos_13 mpis_9 inspector_7 bulk-binding-registry_6 shared_2)))"
"(let-values(((column_0 next-pos_15)"
"(decode"
" vec_46"
" next-pos_14"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((position_0 next-pos_16)"
"(decode"
" vec_46"
" next-pos_15"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((span_0 next-pos_17)"
"(decode"
" vec_46"
" next-pos_16"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(values(srcloc source_0 line_0 column_0 position_0 span_0) next-pos_17)))))))"
"(let-values()(values(vector-ref vec_46(add1 pos_50))(+ pos_50 2)))))"
"(if(unsafe-fx< index_0 10)"
"(let-values()(values(vector-ref mpis_9(vector-ref vec_46(add1 pos_50)))(+ pos_50 2)))"
"(if(unsafe-fx< index_0 11)"
"(let-values()"
"(let-values(((v_157 next-pos_18)"
"(decode vec_46(add1 pos_50) mpis_9 inspector_7 bulk-binding-registry_6 shared_2)))"
"(values(box-immutable v_157) next-pos_18)))"
"(if(unsafe-fx< index_0 12)"
"(let-values()"
"(let-values(((a_38 next-pos_19)"
"(decode"
" vec_46"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((d_26 next-pos_20)"
"(decode"
" vec_46"
" next-pos_19"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(values(cons a_38 d_26) next-pos_20))))"
"(let-values()"
"(let-values(((len_20)(vector-ref vec_46(add1 pos_50))))"
"(let-values(((r_31)(make-vector len_20)))"
"(let-values(((next-pos_21)"
"(let-values(((start_29) 0)((end_21) len_20)((inc_13) 1))"
"(begin"
"(check-range start_29 end_21 inc_13)"
"((letrec-values(((for-loop_61)"
"(lambda(pos_51 pos_52)"
"(if(< pos_52 end_21)"
"(let-values(((i_135) pos_52))"
"(let-values(((pos_53)"
"(let-values(((pos_54) pos_51))"
"(let-values(((pos_55)"
"(let-values()"
"(let-values(((v_158"
" next-pos_22)"
"(let-values(((v_159"
" next-pos_23)"
"(decode"
" vec_46"
" pos_54"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(values"
" v_159"
" next-pos_23))))"
"(begin"
"(vector-set!"
" r_31"
" i_135"
" v_158)"
" next-pos_22)))))"
"(values pos_55)))))"
"(if(not #f)"
"(for-loop_61 pos_53(+ pos_52 inc_13))"
" pos_53)))"
" pos_51))))"
" for-loop_61)"
"(+ pos_50 2)"
" start_29)))))"
"(values"
"(if(eq?(vector-ref vec_46 pos_50) '#:list)"
"(vector->list r_31)"
"(vector->immutable-vector r_31))"
" next-pos_21))))))))))"
"(if(unsafe-fx< index_0 20)"
"(if(unsafe-fx< index_0 16)"
"(if(unsafe-fx< index_0 14)"
"(let-values()"
"(let-values(((ht_91)"
"(let-values(((tmp_20)(vector-ref vec_46 pos_50)))"
"(if(equal? tmp_20 '#:hash)"
"(let-values()(hash))"
"(if(equal? tmp_20 '#:hasheq)"
"(let-values()(hasheq))"
"(if(equal? tmp_20 '#:hasheqv)"
"(let-values()(hasheqv))"
"(let-values()(void))))))))"
"(let-values(((len_21)(vector-ref vec_46(add1 pos_50))))"
"(let-values(((start_30) 0)((end_22) len_21)((inc_14) 1))"
"(begin"
"(check-range start_30 end_22 inc_14)"
"((letrec-values(((for-loop_134)"
"(lambda(ht_92 pos_56 pos_57)"
"(if(< pos_57 end_22)"
"(let-values()"
"(let-values(((ht_93 pos_58)"
"(let-values(((ht_94) ht_92)((pos_59) pos_56))"
"(let-values(((ht_95 pos_60)"
"(let-values()"
"(let-values(((k_29 next-pos_24)"
"(decode"
" vec_46"
" pos_59"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((v_160 next-pos_25)"
"(decode"
" vec_46"
" next-pos_24"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(values"
"(hash-set ht_94 k_29 v_160)"
" next-pos_25))))))"
"(values ht_95 pos_60)))))"
"(if(not #f)"
"(for-loop_134 ht_93 pos_58(+ pos_57 inc_14))"
"(values ht_93 pos_58))))"
"(values ht_92 pos_56)))))"
" for-loop_134)"
" ht_91"
"(+ pos_50 2)"
" start_30))))))"
"(if(unsafe-fx< index_0 15)"
"(let-values()"
"(let-values(((s_178)"
"(let-values(((tmp_21)(vector-ref vec_46 pos_50)))"
"(if(equal? tmp_21 '#:set)"
"(let-values()(set))"
"(if(equal? tmp_21 '#:seteq)"
"(let-values()(seteq))"
"(if(equal? tmp_21 '#:seteqv)"
"(let-values()(seteqv))"
"(let-values()(void))))))))"
"(let-values(((len_22)(vector-ref vec_46(add1 pos_50))))"
"(let-values(((start_31) 0)((end_23) len_22)((inc_15) 1))"
"(begin"
"(check-range start_31 end_23 inc_15)"
"((letrec-values(((for-loop_135)"
"(lambda(s_179 pos_61 pos_62)"
"(if(< pos_62 end_23)"
"(let-values()"
"(let-values(((s_180 pos_63)"
"(let-values(((s_181) s_179)((pos_64) pos_61))"
"(let-values(((s_182 pos_65)"
"(let-values()"
"(let-values(((k_30 next-pos_26)"
"(decode"
" vec_46"
" pos_64"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(values"
"(set-add s_181 k_30)"
" next-pos_26)))))"
"(values s_182 pos_65)))))"
"(if(not #f)"
"(for-loop_135 s_180 pos_63(+ pos_62 inc_15))"
"(values s_180 pos_63))))"
"(values s_179 pos_61)))))"
" for-loop_135)"
" s_178"
"(+ pos_50 2)"
" start_31))))))"
"(let-values()"
"(let-values(((key_45 next-pos_27)"
"(let-values(((k_31 next-pos_28)"
"(decode"
" vec_46"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(values k_31 next-pos_28))))"
"(let-values(((len_23)(vector-ref vec_46 next-pos_27)))"
"(let-values(((r_32 done-pos_1)"
"(let-values(((start_32) 0)((end_24) len_23)((inc_16) 1))"
"(begin"
"(check-range start_32 end_24 inc_16)"
"((letrec-values(((for-loop_136)"
"(lambda(r_33 pos_66 pos_67)"
"(if(< pos_67 end_24)"
"(let-values()"
"(let-values(((r_34 pos_68)"
"(let-values(((r_35) r_33)"
"((pos_69) pos_66))"
"(let-values(((r_36 pos_70)"
"(let-values()"
"(let-values(((v_161"
" next-pos_29)"
"(decode"
" vec_46"
" pos_69"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(values"
"(cons v_161 r_35)"
" next-pos_29)))))"
"(values r_36 pos_70)))))"
"(if(not #f)"
"(for-loop_136 r_34 pos_68(+ pos_67 inc_16))"
"(values r_34 pos_68))))"
"(values r_33 pos_66)))))"
" for-loop_136)"
" null"
"(add1 next-pos_27)"
" start_32)))))"
"(values(apply make-prefab-struct key_45(reverse$1 r_32)) done-pos_1)))))))"
"(if(unsafe-fx< index_0 17)"
"(let-values()(values(deserialize-scope)(add1 pos_50)))"
"(if(unsafe-fx< index_0 18)"
"(let-values()"
"(let-values(((kind_6 next-pos_30)"
"(decode vec_46(add1 pos_50) mpis_9 inspector_7 bulk-binding-registry_6 shared_2)))"
"(values(deserialize-scope kind_6) next-pos_30)))"
"(if(unsafe-fx< index_0 19)"
"(let-values()"
"(let-values(((name_40 next-pos_31)"
"(decode"
" vec_46"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((scopes_21 next-pos_32)"
"(decode"
" vec_46"
" next-pos_31"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(values(deserialize-multi-scope name_40 scopes_21) next-pos_32))))"
"(let-values()"
"(let-values(((phase_47 next-pos_33)"
"(decode"
" vec_46"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((multi-scope_2 next-pos_34)"
"(decode"
" vec_46"
" next-pos_33"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(values(deserialize-shifted-multi-scope phase_47 multi-scope_2) next-pos_34))))))))"
"(if(unsafe-fx< index_0 23)"
"(if(unsafe-fx< index_0 21)"
"(let-values()"
"(let-values(((syms_13 next-pos_35)"
"(decode vec_46(add1 pos_50) mpis_9 inspector_7 bulk-binding-registry_6 shared_2)))"
"(let-values(((bulk-bindings_4 next-pos_36)"
"(decode vec_46 next-pos_35 mpis_9 inspector_7 bulk-binding-registry_6 shared_2)))"
"(values(deserialize-table-with-bulk-bindings syms_13 bulk-bindings_4) next-pos_36))))"
"(if(unsafe-fx< index_0 22)"
"(let-values()"
"(let-values(((scopes_22 next-pos_37)"
"(decode vec_46(add1 pos_50) mpis_9 inspector_7 bulk-binding-registry_6 shared_2)))"
"(let-values(((bulk_5 next-pos_38)"
"(decode vec_46 next-pos_37 mpis_9 inspector_7 bulk-binding-registry_6 shared_2)))"
"(values(deserialize-bulk-binding-at scopes_22 bulk_5) next-pos_38))))"
"(let-values()"
"(let-values(((kind_7 next-pos_39)"
"(decode vec_46(add1 pos_50) mpis_9 inspector_7 bulk-binding-registry_6 shared_2)))"
"(let-values(((phase_48 next-pos_40)"
"(decode vec_46 next-pos_39 mpis_9 inspector_7 bulk-binding-registry_6 shared_2)))"
"(values(deserialize-representative-scope kind_7 phase_48) next-pos_40))))))"
"(if(unsafe-fx< index_0 25)"
"(if(unsafe-fx< index_0 24)"
"(let-values()"
"(let-values(((module_4 next-pos_41)"
"(decode vec_46(add1 pos_50) mpis_9 inspector_7 bulk-binding-registry_6 shared_2)))"
"(let-values(((sym_33 next-pos_42)"
"(decode vec_46 next-pos_41 mpis_9 inspector_7 bulk-binding-registry_6 shared_2)))"
"(let-values(((phase_49 next-pos_43)"
"(decode"
" vec_46"
" next-pos_42"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((nominal-module_4 next-pos_44)"
"(decode"
" vec_46"
" next-pos_43"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((nominal-phase_3 next-pos_45)"
"(decode"
" vec_46"
" next-pos_44"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((nominal-sym_3 next-pos_46)"
"(decode"
" vec_46"
" next-pos_45"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((nominal-require-phase_3 next-pos_47)"
"(decode"
" vec_46"
" next-pos_46"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((free=id_8 next-pos_48)"
"(decode"
" vec_46"
" next-pos_47"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((extra-inspector_3 next-pos_49)"
"(decode"
" vec_46"
" next-pos_48"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((extra-nominal-bindings_3 next-pos_50)"
"(decode"
" vec_46"
" next-pos_49"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(values"
"(deserialize-full-module-binding"
" module_4"
" sym_33"
" phase_49"
" nominal-module_4"
" nominal-phase_3"
" nominal-sym_3"
" nominal-require-phase_3"
" free=id_8"
" extra-inspector_3"
" extra-nominal-bindings_3)"
" next-pos_50))))))))))))"
"(let-values()"
"(let-values(((module_5 next-pos_51)"
"(decode vec_46(add1 pos_50) mpis_9 inspector_7 bulk-binding-registry_6 shared_2)))"
"(let-values(((sym_34 next-pos_52)"
"(decode vec_46 next-pos_51 mpis_9 inspector_7 bulk-binding-registry_6 shared_2)))"
"(let-values(((phase_50 next-pos_53)"
"(decode"
" vec_46"
" next-pos_52"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((nominal-module_5 next-pos_54)"
"(decode"
" vec_46"
" next-pos_53"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(values"
"(deserialize-simple-module-binding module_5 sym_34 phase_50 nominal-module_5)"
" next-pos_54)))))))"
"(if(unsafe-fx< index_0 26)"
"(let-values()"
"(let-values(((key_46 next-pos_55)"
"(decode vec_46(add1 pos_50) mpis_9 inspector_7 bulk-binding-registry_6 shared_2)))"
"(let-values(((free=id_9 next-pos_56)"
"(decode vec_46 next-pos_55 mpis_9 inspector_7 bulk-binding-registry_6 shared_2)))"
"(values(deserialize-full-local-binding key_46 free=id_9) next-pos_56))))"
"(if(unsafe-fx< index_0 27)"
"(let-values()"
"(let-values(((prefix_2 next-pos_57)"
"(decode"
" vec_46"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((excepts_2 next-pos_58)"
"(decode"
" vec_46"
" next-pos_57"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((mpi_26 next-pos_59)"
"(decode"
" vec_46"
" next-pos_58"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((provide-phase-level_2 next-pos_60)"
"(decode"
" vec_46"
" next-pos_59"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((phase-shift_5 next-pos_61)"
"(decode"
" vec_46"
" next-pos_60"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((bulk-binding-registry_7 next-pos_62)"
"(decode"
" vec_46"
" next-pos_61"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(values"
"(deserialize-bulk-binding"
" prefix_2"
" excepts_2"
" mpi_26"
" provide-phase-level_2"
" phase-shift_5"
" bulk-binding-registry_7)"
" next-pos_62))))))))"
"(let-values()"
"(let-values(((binding_11 next-pos_63)"
"(decode"
" vec_46"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((protected?_1 next-pos_64)"
"(decode"
" vec_46"
" next-pos_63"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(let-values(((syntax?_3 next-pos_65)"
"(decode"
" vec_46"
" next-pos_64"
" mpis_9"
" inspector_7"
" bulk-binding-registry_6"
" shared_2)))"
"(values"
"(deserialize-provided binding_11 protected?_1 syntax?_3)"
" next-pos_65))))))))))))))))"
"(define-values"
"(decode-fill!)"
"(lambda(v_162 vec_47 pos_71 mpis_10 inspector_8 bulk-binding-registry_8 shared_3)"
"(let-values(((tmp_22)(vector-ref vec_47 pos_71)))"
"(if(equal? tmp_22 #f)"
"(let-values()(add1 pos_71))"
"(if(equal? tmp_22 '#:set-box!)"
"(let-values()"
"(let-values(((c_22 next-pos_66)"
"(decode vec_47(add1 pos_71) mpis_10 inspector_8 bulk-binding-registry_8 shared_3)))"
"(begin(set-box! v_162 c_22) next-pos_66)))"
"(if(equal? tmp_22 '#:set-vector!)"
"(let-values()"
"(let-values(((len_24)(vector-ref vec_47(add1 pos_71))))"
"(let-values(((start_33) 0)((end_25) len_24)((inc_17) 1))"
"(begin"
"(check-range start_33 end_25 inc_17)"
"((letrec-values(((for-loop_137)"
"(lambda(pos_72 pos_73)"
"(if(< pos_73 end_25)"
"(let-values(((i_136) pos_73))"
"(let-values(((pos_74)"
"(let-values(((pos_75) pos_72))"
"(let-values(((pos_76)"
"(let-values()"
"(let-values(((c_23 next-pos_67)"
"(decode"
" vec_47"
" pos_75"
" mpis_10"
" inspector_8"
" bulk-binding-registry_8"
" shared_3)))"
"(begin"
"(vector-set! v_162 i_136 c_23)"
" next-pos_67)))))"
"(values pos_76)))))"
"(if(not #f)(for-loop_137 pos_74(+ pos_73 inc_17)) pos_74)))"
" pos_72))))"
" for-loop_137)"
"(+ pos_71 2)"
" start_33)))))"
"(if(equal? tmp_22 '#:set-hash!)"
"(let-values()"
"(let-values(((len_25)(vector-ref vec_47(add1 pos_71))))"
"(let-values(((start_34) 0)((end_26) len_25)((inc_18) 1))"
"(begin"
"(check-range start_34 end_26 inc_18)"
"((letrec-values(((for-loop_138)"
"(lambda(pos_77 pos_78)"
"(if(< pos_78 end_26)"
"(let-values()"
"(let-values(((pos_79)"
"(let-values(((pos_80) pos_77))"
"(let-values(((pos_81)"
"(let-values()"
"(let-values(((key_47 next-pos_68)"
"(decode"
" vec_47"
" pos_80"
" mpis_10"
" inspector_8"
" bulk-binding-registry_8"
" shared_3)))"
"(let-values(((val_39 done-pos_2)"
"(decode"
" vec_47"
" next-pos_68"
" mpis_10"
" inspector_8"
" bulk-binding-registry_8"
" shared_3)))"
"(begin"
"(hash-set! v_162 key_47 val_39)"
" done-pos_2))))))"
"(values pos_81)))))"
"(if(not #f)(for-loop_138 pos_79(+ pos_78 inc_18)) pos_79)))"
" pos_77))))"
" for-loop_138)"
"(+ pos_71 2)"
" start_34)))))"
"(if(equal? tmp_22 '#:scope-fill!)"
"(let-values()"
"(let-values(((c_24 next-pos_69)"
"(decode vec_47(add1 pos_71) mpis_10 inspector_8 bulk-binding-registry_8 shared_3)))"
"(begin(deserialize-scope-fill! v_162 c_24) next-pos_69)))"
"(if(equal? tmp_22 '#:representative-scope-fill!)"
"(let-values()"
"(let-values(((a_39 next-pos_70)"
"(decode vec_47(add1 pos_71) mpis_10 inspector_8 bulk-binding-registry_8 shared_3)))"
"(let-values(((d_27 done-pos_3)"
"(decode vec_47 next-pos_70 mpis_10 inspector_8 bulk-binding-registry_8 shared_3)))"
"(begin(deserialize-representative-scope-fill! v_162 a_39 d_27) done-pos_3))))"
"                  (let-values () (error 'deserialize \"bad fill encoding: ~v\" (vector-ref vec_47 pos_71))))))))))))"
"(define-values"
"(find-reachable-scopes)"
"(lambda(v_163)"
"(let-values(((seen_23)(make-hasheq)))"
"(let-values(((reachable-scopes_7)(seteq)))"
"(let-values(((scope-triggers_0)(make-hasheq)))"
"(begin"
"((letrec-values(((loop_134)"
"(lambda(v_164)"
"(if(interned-literal? v_164)"
"(let-values()(void))"
"(if(hash-ref seen_23 v_164 #f)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(hash-set! seen_23 v_164 #t)"
"(if(scope-with-bindings? v_164)"
"(let-values()"
"(let-values((()"
"(begin"
"(set! reachable-scopes_7(set-add reachable-scopes_7 v_164))"
"(values))))"
"(let-values((()"
"(begin((reach-scopes-ref v_164) v_164 loop_134)(values))))"
"(let-values(((l_51)(hash-ref scope-triggers_0 v_164 null)))"
"(begin"
"(let-values(((lst_115) l_51))"
"(begin"
"(check-list lst_115)"
"((letrec-values(((for-loop_139)"
"(lambda(lst_116)"
"(if(pair? lst_116)"
"(let-values(((v_165)"
"(unsafe-car lst_116))"
"((rest_56)"
"(unsafe-cdr lst_116)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_134"
" v_165))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_139 rest_56)"
"(values))))"
"(values)))))"
" for-loop_139)"
" lst_115)))"
"(void)"
"((scope-with-bindings-ref v_164)"
" v_164"
" reachable-scopes_7"
" loop_134"
"(lambda(sc-unreachable_0 b_66)"
"(hash-update!"
" scope-triggers_0"
" sc-unreachable_0"
"(lambda(l_52)(cons b_66 l_52))"
" null))))))))"
"(if(reach-scopes? v_164)"
"(let-values()((reach-scopes-ref v_164) v_164 loop_134))"
"(if(pair? v_164)"
"(let-values()(begin(loop_134(car v_164))(loop_134(cdr v_164))))"
"(if(vector? v_164)"
"(let-values()"
"(begin"
"(let-values(((vec_48 len_26)"
"(let-values(((vec_49) v_164))"
"(begin"
"(check-vector vec_49)"
"(values vec_49(unsafe-vector-length vec_49))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_140)"
"(lambda(pos_82)"
"(if(unsafe-fx< pos_82 len_26)"
"(let-values(((e_23)"
"(unsafe-vector-ref"
" vec_48"
" pos_82)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_134"
" e_23))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_140(unsafe-fx+ 1 pos_82))"
"(values))))"
"(values)))))"
" for-loop_140)"
" 0)))"
"(void)))"
"(if(box? v_164)"
"(let-values()(loop_134(unbox v_164)))"
"(if(hash? v_164)"
"(let-values()"
"(begin"
"(let-values(((ht_96) v_164))"
"(begin"
"(check-in-hash ht_96)"
"((letrec-values(((for-loop_141)"
"(lambda(i_137)"
"(if i_137"
"(let-values(((k_32 v_166)"
"(hash-iterate-key+value"
" ht_96"
" i_137)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_134"
" k_32)"
"(loop_134"
" v_166)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_141"
"(hash-iterate-next"
" ht_96"
" i_137))"
"(values))))"
"(values)))))"
" for-loop_141)"
"(hash-iterate-first ht_96))))"
"(void)))"
"(if(prefab-struct-key v_164)"
"(let-values()"
"(begin"
"(let-values(((v*_5 start*_4 stop*_5 step*_4)"
"(normalise-inputs"
" 'in-vector"
"                                                                         \"vector\""
"(lambda(x_90)(vector? x_90))"
"(lambda(x_91)(unsafe-vector-length x_91))"
"(struct->vector v_164)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_142)"
"(lambda(idx_4)"
"(if(unsafe-fx< idx_4 stop*_5)"
"(let-values(((e_24)"
"(unsafe-vector-ref"
" v*_5"
" idx_4)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_134"
" e_24))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_142"
"(unsafe-fx+ idx_4 1))"
"(values))))"
"(values)))))"
" for-loop_142)"
" start*_4)))"
"(void)))"
"(let-values()(void))))))))))))))))"
" loop_134)"
" v_163)"
" reachable-scopes_7))))))"
"(define-values"
"(deserialize-imports)"
" '(deserialize-module-path-indexes syntax-module-path-index-shift syntax-shift-phase-level module-use deserialize))"
"(define-values"
"(syntax-module-path-index-shift/no-keywords)"
"(let-values(((syntax-module-path-index-shift_0)"
"(let-values(((core27_0)"
"(lambda(s24_0 from-mpi25_0 to-mpi26_0 inspector22_0 inspector23_0)"
"(let-values(((s_183) s24_0))"
"(let-values(((from-mpi_4) from-mpi25_0))"
"(let-values(((to-mpi_3) to-mpi26_0))"
"(let-values(((inspector_9)(if inspector23_0 inspector22_0 #f)))"
"(let-values()"
"(let-values(((s29_0) s_183)"
"((from-mpi30_0) from-mpi_4)"
"((to-mpi31_0) to-mpi_3)"
"((inspector32_0) inspector_9))"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" s29_0"
" from-mpi30_0"
" to-mpi31_0"
" inspector32_0"
" #t))))))))))"
"(case-lambda"
"((s_184 from-mpi_5 to-mpi_4)(core27_0 s_184 from-mpi_5 to-mpi_4 #f #f))"
"((s_185 from-mpi_6 to-mpi_5 inspector22_1)(core27_0 s_185 from-mpi_6 to-mpi_5 inspector22_1 #t))))))"
" syntax-module-path-index-shift_0))"
"(define-values"
"(deserialize-instance)"
"(1/make-instance"
" 'deserialize"
" #f"
" 'deserialize-module-path-indexes"
" deserialize-module-path-indexes"
" 'syntax-module-path-index-shift"
" syntax-module-path-index-shift/no-keywords"
" 'syntax-shift-phase-level"
" syntax-shift-phase-level$1"
" 'module-use"
" module-use1.1"
" 'deserialize"
" deserialize))"
"(define-values"
"(struct:parsed parsed1.1 parsed? parsed-s)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()(let-values()(make-struct-type 'parsed #f 1 0 #f null #f #f '(0) #f 'parsed)))))"
"(values struct:_0 make-_0 ?_0(make-struct-field-accessor -ref_0 0 's))))"
"(define-values"
"(struct:parsed-id parsed-id2.1 parsed-id? parsed-id-binding parsed-id-inspector)"
"(let-values(((struct:_1 make-_1 ?_1 -ref_1 -set!_1)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-id"
" struct:parsed"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-id)))))"
"(values"
" struct:_1"
" make-_1"
" ?_1"
"(make-struct-field-accessor -ref_1 0 'binding)"
"(make-struct-field-accessor -ref_1 1 'inspector))))"
"(define-values"
"(struct:parsed-primitive-id parsed-primitive-id3.1 parsed-primitive-id?)"
"(let-values(((struct:_40 make-_40 ?_40 -ref_40 -set!_40)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-primitive-id"
" struct:parsed-id"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-primitive-id)))))"
"(values struct:_40 make-_40 ?_40)))"
"(define-values"
"(struct:parsed-top-id parsed-top-id4.1 parsed-top-id?)"
"(let-values(((struct:_41 make-_41 ?_41 -ref_41 -set!_41)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-top-id"
" struct:parsed-id"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-top-id)))))"
"(values struct:_41 make-_41 ?_41)))"
"(define-values"
"(struct:parsed-lambda parsed-lambda5.1 parsed-lambda? parsed-lambda-keys parsed-lambda-body)"
"(let-values(((struct:_39 make-_39 ?_39 -ref_39 -set!_39)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-lambda"
" struct:parsed"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-lambda)))))"
"(values"
" struct:_39"
" make-_39"
" ?_39"
"(make-struct-field-accessor -ref_39 0 'keys)"
"(make-struct-field-accessor -ref_39 1 'body))))"
"(define-values"
"(struct:parsed-case-lambda parsed-case-lambda6.1 parsed-case-lambda? parsed-case-lambda-clauses)"
"(let-values(((struct:_42 make-_42 ?_42 -ref_42 -set!_42)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-case-lambda"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-case-lambda)))))"
"(values struct:_42 make-_42 ?_42(make-struct-field-accessor -ref_42 0 'clauses))))"
"(define-values"
"(struct:parsed-app parsed-app7.1 parsed-app? parsed-app-rator parsed-app-rands)"
"(let-values(((struct:_43 make-_43 ?_43 -ref_43 -set!_43)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-app"
" struct:parsed"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-app)))))"
"(values"
" struct:_43"
" make-_43"
" ?_43"
"(make-struct-field-accessor -ref_43 0 'rator)"
"(make-struct-field-accessor -ref_43 1 'rands))))"
"(define-values"
"(struct:parsed-if parsed-if8.1 parsed-if? parsed-if-tst parsed-if-thn parsed-if-els)"
"(let-values(((struct:_4 make-_4 ?_4 -ref_4 -set!_4)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-if"
" struct:parsed"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-if)))))"
"(values"
" struct:_4"
" make-_4"
" ?_4"
"(make-struct-field-accessor -ref_4 0 'tst)"
"(make-struct-field-accessor -ref_4 1 'thn)"
"(make-struct-field-accessor -ref_4 2 'els))))"
"(define-values"
"(struct:parsed-set! parsed-set!9.1 parsed-set!? parsed-set!-id parsed-set!-rhs)"
"(let-values(((struct:_44 make-_44 ?_44 -ref_44 -set!_44)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-set!"
" struct:parsed"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-set!)))))"
"(values"
" struct:_44"
" make-_44"
" ?_44"
"(make-struct-field-accessor -ref_44 0 'id)"
"(make-struct-field-accessor -ref_44 1 'rhs))))"
"(define-values"
"(struct:parsed-with-continuation-mark"
" parsed-with-continuation-mark10.1"
" parsed-with-continuation-mark?"
" parsed-with-continuation-mark-key"
" parsed-with-continuation-mark-val"
" parsed-with-continuation-mark-body)"
"(let-values(((struct:_45 make-_45 ?_45 -ref_45 -set!_45)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-with-continuation-mark"
" struct:parsed"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-with-continuation-mark)))))"
"(values"
" struct:_45"
" make-_45"
" ?_45"
"(make-struct-field-accessor -ref_45 0 'key)"
"(make-struct-field-accessor -ref_45 1 'val)"
"(make-struct-field-accessor -ref_45 2 'body))))"
"(define-values"
"(struct:parsed-#%variable-reference"
" parsed-#%variable-reference11.1"
" parsed-#%variable-reference?"
" parsed-#%variable-reference-id)"
"(let-values(((struct:_46 make-_46 ?_46 -ref_46 -set!_46)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%variable-reference"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-#%variable-reference)))))"
"(values struct:_46 make-_46 ?_46(make-struct-field-accessor -ref_46 0 'id))))"
"(define-values"
"(struct:parsed-begin parsed-begin12.1 parsed-begin? parsed-begin-body)"
"(let-values(((struct:_47 make-_47 ?_47 -ref_47 -set!_47)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin)))))"
"(values struct:_47 make-_47 ?_47(make-struct-field-accessor -ref_47 0 'body))))"
"(define-values"
"(struct:parsed-begin0 parsed-begin013.1 parsed-begin0? parsed-begin0-body)"
"(let-values(((struct:_48 make-_48 ?_48 -ref_48 -set!_48)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin0"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin0)))))"
"(values struct:_48 make-_48 ?_48(make-struct-field-accessor -ref_48 0 'body))))"
"(define-values"
"(struct:parsed-quote parsed-quote14.1 parsed-quote? parsed-quote-datum)"
"(let-values(((struct:_49 make-_49 ?_49 -ref_49 -set!_49)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-quote"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-quote)))))"
"(values struct:_49 make-_49 ?_49(make-struct-field-accessor -ref_49 0 'datum))))"
"(define-values"
"(struct:parsed-quote-syntax parsed-quote-syntax15.1 parsed-quote-syntax? parsed-quote-syntax-datum)"
"(let-values(((struct:_50 make-_50 ?_50 -ref_50 -set!_50)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-quote-syntax"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-quote-syntax)))))"
"(values struct:_50 make-_50 ?_50(make-struct-field-accessor -ref_50 0 'datum))))"
"(define-values"
"(struct:parsed-let_-values"
" parsed-let_-values16.1"
" parsed-let_-values?"
" parsed-let_-values-idss"
" parsed-let_-values-clauses"
" parsed-let_-values-body)"
"(let-values(((struct:_51 make-_51 ?_51 -ref_51 -set!_51)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-let_-values"
" struct:parsed"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-let_-values)))))"
"(values"
" struct:_51"
" make-_51"
" ?_51"
"(make-struct-field-accessor -ref_51 0 'idss)"
"(make-struct-field-accessor -ref_51 1 'clauses)"
"(make-struct-field-accessor -ref_51 2 'body))))"
"(define-values"
"(struct:parsed-let-values parsed-let-values17.1 parsed-let-values?)"
"(let-values(((struct:_52 make-_52 ?_52 -ref_52 -set!_52)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-let-values"
" struct:parsed-let_-values"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-let-values)))))"
"(values struct:_52 make-_52 ?_52)))"
"(define-values"
"(struct:parsed-letrec-values parsed-letrec-values18.1 parsed-letrec-values?)"
"(let-values(((struct:_53 make-_53 ?_53 -ref_53 -set!_53)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-letrec-values"
" struct:parsed-let_-values"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-letrec-values)))))"
"(values struct:_53 make-_53 ?_53)))"
"(define-values"
"(struct:parsed-define-values"
" parsed-define-values19.1"
" parsed-define-values?"
" parsed-define-values-ids"
" parsed-define-values-syms"
" parsed-define-values-rhs)"
"(let-values(((struct:_54 make-_54 ?_54 -ref_54 -set!_54)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-define-values"
" struct:parsed"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-define-values)))))"
"(values"
" struct:_54"
" make-_54"
" ?_54"
"(make-struct-field-accessor -ref_54 0 'ids)"
"(make-struct-field-accessor -ref_54 1 'syms)"
"(make-struct-field-accessor -ref_54 2 'rhs))))"
"(define-values"
"(struct:parsed-define-syntaxes"
" parsed-define-syntaxes20.1"
" parsed-define-syntaxes?"
" parsed-define-syntaxes-ids"
" parsed-define-syntaxes-syms"
" parsed-define-syntaxes-rhs)"
"(let-values(((struct:_55 make-_55 ?_55 -ref_55 -set!_55)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-define-syntaxes"
" struct:parsed"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-define-syntaxes)))))"
"(values"
" struct:_55"
" make-_55"
" ?_55"
"(make-struct-field-accessor -ref_55 0 'ids)"
"(make-struct-field-accessor -ref_55 1 'syms)"
"(make-struct-field-accessor -ref_55 2 'rhs))))"
"(define-values"
"(struct:parsed-begin-for-syntax parsed-begin-for-syntax21.1 parsed-begin-for-syntax? parsed-begin-for-syntax-body)"
"(let-values(((struct:_56 make-_56 ?_56 -ref_56 -set!_56)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin-for-syntax"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin-for-syntax)))))"
"(values struct:_56 make-_56 ?_56(make-struct-field-accessor -ref_56 0 'body))))"
"(define-values"
"(struct:parsed-#%declare parsed-#%declare22.1 parsed-#%declare?)"
"(let-values(((struct:_57 make-_57 ?_57 -ref_57 -set!_57)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%declare"
" struct:parsed"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-#%declare)))))"
"(values struct:_57 make-_57 ?_57)))"
"(define-values"
"(struct:parsed-require parsed-require23.1 parsed-require?)"
"(let-values(((struct:_58 make-_58 ?_58 -ref_58 -set!_58)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-require"
" struct:parsed"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-require)))))"
"(values struct:_58 make-_58 ?_58)))"
"(define-values"
"(struct:parsed-#%module-begin parsed-#%module-begin24.1 parsed-#%module-begin? parsed-#%module-begin-body)"
"(let-values(((struct:_59 make-_59 ?_59 -ref_59 -set!_59)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%module-begin"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-#%module-begin)))))"
"(values struct:_59 make-_59 ?_59(make-struct-field-accessor -ref_59 0 'body))))"
"(define-values"
"(struct:parsed-module"
" parsed-module25.1"
" parsed-module?"
" parsed-module-star?"
" parsed-module-name-id"
" parsed-module-self"
" parsed-module-requires"
" parsed-module-provides"
" parsed-module-root-ctx-simple?"
" parsed-module-encoded-root-ctx"
" parsed-module-body"
" parsed-module-compiled-module"
" parsed-module-compiled-submodules)"
"(let-values(((struct:_60 make-_60 ?_60 -ref_60 -set!_60)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-module"
" struct:parsed"
" 10"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9)"
" #f"
" 'parsed-module)))))"
"(values"
" struct:_60"
" make-_60"
" ?_60"
"(make-struct-field-accessor -ref_60 0 'star?)"
"(make-struct-field-accessor -ref_60 1 'name-id)"
"(make-struct-field-accessor -ref_60 2 'self)"
"(make-struct-field-accessor -ref_60 3 'requires)"
"(make-struct-field-accessor -ref_60 4 'provides)"
"(make-struct-field-accessor -ref_60 5 'root-ctx-simple?)"
"(make-struct-field-accessor -ref_60 6 'encoded-root-ctx)"
"(make-struct-field-accessor -ref_60 7 'body)"
"(make-struct-field-accessor -ref_60 8 'compiled-module)"
"(make-struct-field-accessor -ref_60 9 'compiled-submodules))))"
"(define-values"
"(struct:compiled-in-memory"
" compiled-in-memory1.1"
" compiled-in-memory?"
" compiled-in-memory-linklet-directory"
" compiled-in-memory-original-self"
" compiled-in-memory-requires"
" compiled-in-memory-provides"
" compiled-in-memory-phase-to-link-module-uses"
" compiled-in-memory-compile-time-inspector"
" compiled-in-memory-phase-to-link-extra-inspectorsss"
" compiled-in-memory-mpis"
" compiled-in-memory-syntax-literals"
" compiled-in-memory-pre-compiled-in-memorys"
" compiled-in-memory-post-compiled-in-memorys"
" compiled-in-memory-namespace-scopes"
" compiled-in-memory-purely-functional?)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'compiled-in-memory"
" #f"
" 13"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(cim_0 port_10 mode_11)(write(compiled-in-memory-linklet-directory cim_0) port_10))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 12)"
" #f"
" 'compiled-in-memory)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'linklet-directory)"
"(make-struct-field-accessor -ref_0 1 'original-self)"
"(make-struct-field-accessor -ref_0 2 'requires)"
"(make-struct-field-accessor -ref_0 3 'provides)"
"(make-struct-field-accessor -ref_0 4 'phase-to-link-module-uses)"
"(make-struct-field-accessor -ref_0 5 'compile-time-inspector)"
"(make-struct-field-accessor -ref_0 6 'phase-to-link-extra-inspectorsss)"
"(make-struct-field-accessor -ref_0 7 'mpis)"
"(make-struct-field-accessor -ref_0 8 'syntax-literals)"
"(make-struct-field-accessor -ref_0 9 'pre-compiled-in-memorys)"
"(make-struct-field-accessor -ref_0 10 'post-compiled-in-memorys)"
"(make-struct-field-accessor -ref_0 11 'namespace-scopes)"
"(make-struct-field-accessor -ref_0 12 'purely-functional?))))"
"(define-values"
"(struct:namespace-scopes namespace-scopes1.1 namespace-scopes? namespace-scopes-post namespace-scopes-other)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type 'namespace-scopes #f 2 0 #f null 'prefab #f '(0 1) #f 'namespace-scopes)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'post)"
"(make-struct-field-accessor -ref_0 1 'other))))"
"(define-values"
"(swap-top-level-scopes)"
"(lambda(s_186 original-scopes-s_0 new-ns_0)"
"(let-values(((old-scs-post_0 old-scs-other_0)"
"(if(namespace-scopes? original-scopes-s_0)"
"(values(namespace-scopes-post original-scopes-s_0)(namespace-scopes-other original-scopes-s_0))"
"(decode-namespace-scopes original-scopes-s_0))))"
"(let-values(((new-scs-post_0 new-scs-other_0)(extract-namespace-scopes/values new-ns_0)))"
"(syntax-swap-scopes"
"(syntax-swap-scopes s_186 old-scs-post_0 new-scs-post_0)"
" old-scs-other_0"
" new-scs-other_0)))))"
"(define-values"
"(extract-namespace-scopes/values)"
"(lambda(ns_47)"
"(let-values(((root-ctx_3)(namespace-get-root-expand-ctx ns_47)))"
"(let-values(((post-expansion-sc_0)(root-expand-context-post-expansion-scope root-ctx_3)))"
"(values"
"(seteq post-expansion-sc_0)"
"(set-remove(list->seteq(root-expand-context-module-scopes root-ctx_3)) post-expansion-sc_0))))))"
"(define-values"
"(extract-namespace-scopes)"
"(lambda(ns_48)"
"(let-values(((scs-post_0 scs-other_0)(extract-namespace-scopes/values ns_48)))"
"(namespace-scopes1.1 scs-post_0 scs-other_0))))"
"(define-values"
"(encode-namespace-scopes)"
"(lambda(ns_49)"
"(let-values(((post-expansion-scs_0 other-scs_0)(extract-namespace-scopes/values ns_49)))"
"(let-values(((post-expansion-s_0)(add-scopes(datum->syntax$1 #f 'post)(set->list post-expansion-scs_0))))"
"(let-values(((other-s_0)(add-scopes(datum->syntax$1 #f 'other)(set->list other-scs_0))))"
"(datum->syntax$1 #f(vector post-expansion-s_0 other-s_0)))))))"
"(define-values"
"(decode-namespace-scopes)"
"(lambda(stx_11)"
"(let-values(((vec_50)(syntax-e$1 stx_11)))"
"(values(syntax-scope-set(vector-ref vec_50 0) 0)(syntax-scope-set(vector-ref vec_50 1) 0)))))"
"(define-values"
"(namespace-scopes=?)"
"(lambda(nss1_0 nss2_0)"
"(if(set=?(namespace-scopes-post nss1_0)(namespace-scopes-post nss2_0))"
"(set=?(namespace-scopes-other nss1_0)(namespace-scopes-other nss2_0))"
" #f)))"
"(define-values"
"(struct:syntax-literals"
" syntax-literals1.1"
" syntax-literals?"
" syntax-literals-stxes"
" syntax-literals-count"
" set-syntax-literals-stxes!"
" set-syntax-literals-count!)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'syntax-literals"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'syntax-literals)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'stxes)"
"(make-struct-field-accessor -ref_0 1 'count)"
"(make-struct-field-mutator -set!_0 0 'stxes)"
"(make-struct-field-mutator -set!_0 1 'count))))"
"(define-values"
"(struct:header"
" header2.1"
" header?"
" header-module-path-indexes"
" header-binding-sym-to-define-sym"
" header-binding-syms-in-order"
" header-require-var-to-import-sym"
" header-import-sym-to-extra-inspectors"
" header-require-vars-in-order"
" header-define-and-import-syms"
" header-syntax-literals"
" set-header-binding-syms-in-order!"
" set-header-require-vars-in-order!)"
"(let-values(((struct:_61 make-_61 ?_61 -ref_61 -set!_61)"
"(let-values()"
"(let-values()"
"(make-struct-type 'header #f 8 0 #f null(current-inspector) #f '(0 1 3 4 6 7) #f 'header)))))"
"(values"
" struct:_61"
" make-_61"
" ?_61"
"(make-struct-field-accessor -ref_61 0 'module-path-indexes)"
"(make-struct-field-accessor -ref_61 1 'binding-sym-to-define-sym)"
"(make-struct-field-accessor -ref_61 2 'binding-syms-in-order)"
"(make-struct-field-accessor -ref_61 3 'require-var-to-import-sym)"
"(make-struct-field-accessor -ref_61 4 'import-sym-to-extra-inspectors)"
"(make-struct-field-accessor -ref_61 5 'require-vars-in-order)"
"(make-struct-field-accessor -ref_61 6 'define-and-import-syms)"
"(make-struct-field-accessor -ref_61 7 'syntax-literals)"
"(make-struct-field-mutator -set!_61 2 'binding-syms-in-order)"
"(make-struct-field-mutator -set!_61 5 'require-vars-in-order))))"
"(define-values"
"(struct:variable-use variable-use3.1 variable-use? variable-use-module-use variable-use-sym)"
"(let-values(((struct:_62 make-_62 ?_62 -ref_62 -set!_62)"
"(let-values()"
"(let-values()(make-struct-type 'variable-use #f 2 0 #f null #f #f '(0 1) #f 'variable-use)))))"
"(values"
" struct:_62"
" make-_62"
" ?_62"
"(make-struct-field-accessor -ref_62 0 'module-use)"
"(make-struct-field-accessor -ref_62 1 'sym))))"
"(define-values(make-syntax-literals)(lambda()(syntax-literals1.1 null 0)))"
"(define-values"
"(make-header)"
"(lambda(mpis_11 syntax-literals_0)"
"(header2.1 mpis_11(make-hasheq) null(make-variable-uses)(make-hasheq) null(make-hasheq) syntax-literals_0)))"
"(define-values(make-variable-uses)(lambda()(make-hash)))"
"(define-values"
"(add-syntax-literal!)"
"(lambda(header-or-literals_0 q_0)"
"(let-values(((sl_0)"
"(if(header? header-or-literals_0)"
"(header-syntax-literals header-or-literals_0)"
" header-or-literals_0)))"
"(let-values(((pos_83)(syntax-literals-count sl_0)))"
"(begin"
"(set-syntax-literals-count! sl_0(add1 pos_83))"
"(set-syntax-literals-stxes! sl_0(cons q_0(syntax-literals-stxes sl_0)))"
" pos_83)))))"
"(define-values"
"(add-syntax-literals!)"
"(lambda(sl_1 vec_51)"
"(let-values(((pos_84)(syntax-literals-count sl_1)))"
"(begin"
"(let-values(((vec_52 len_27)"
"(let-values(((vec_53) vec_51))"
"(begin(check-vector vec_53)(values vec_53(unsafe-vector-length vec_53))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_143)"
"(lambda(pos_85)"
"(if(unsafe-fx< pos_85 len_27)"
"(let-values(((e_25)(unsafe-vector-ref vec_52 pos_85)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()(add-syntax-literal! sl_1 e_25))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_143(unsafe-fx+ 1 pos_85))(values))))"
"(values)))))"
" for-loop_143)"
" 0)))"
"(void)"
"(cons pos_84(vector-length vec_51))))))"
"(define-values(syntax-literals-empty?)(lambda(sl_2)(null?(syntax-literals-stxes sl_2))))"
"(define-values"
"(generate-lazy-syntax-literals!9.1)"
"(lambda(skip-deserialize?4_0 skip-deserialize?5_0 sl6_0 mpis7_0 self8_0)"
"(let-values(((sl_3) sl6_0))"
"(let-values(((mpis_12) mpis7_0))"
"(let-values(((self_5) self8_0))"
"(let-values(((skip-deserialize?_0)(if skip-deserialize?5_0 skip-deserialize?4_0 #f)))"
"(let-values()"
"(list"
"(list 'define-values(list syntax-literals-id)(list* 'make-vector(syntax-literals-count sl_3) '(#f)))"
"(list"
" 'define-values"
"(list get-syntax-literal!-id)"
"(list"
" 'lambda"
" '(pos)"
"(list"
" 'let-values"
"(list(list '(ready-stx)(list* 'vector-ref syntax-literals-id '(pos))))"
"(list"
" 'if"
" 'ready-stx"
" 'ready-stx"
"(list*"
" 'begin"
"(qq-append"
"(if skip-deserialize?_0"
" null"
"(list"
"(list"
" 'if"
"(list* 'vector-ref deserialized-syntax-vector-id '(0))"
" '(void)"
"(list deserialize-syntax-id bulk-binding-registry-id))))"
"(list"
"(list"
" 'let-values"
"(list"
"(list"
" '(stx)"
"(list"
" 'syntax-module-path-index-shift"
"(list"
" 'syntax-shift-phase-level"
"(list* 'vector-ref deserialized-syntax-vector-id '(pos))"
" phase-shift-id)"
"(add-module-path-index! mpis_12 self_5)"
" self-id"
" inspector-id)))"
"(list* 'begin(list* 'vector-set! syntax-literals-id '(pos stx)) '(stx))))))))))))))))))"
"(define-values"
"(generate-lazy-syntax-literals-data!)"
"(lambda(sl_4 mpis_4)"
"(if(syntax-literals-empty? sl_4)"
"(let-values()(list(list* 'define-values(list deserialize-syntax-id) '(#f))))"
"(let-values()"
"(list"
"(list"
" 'define-values"
"(list deserialize-syntax-id)"
"(list"
" 'lambda"
"(list bulk-binding-registry-id)"
"(list"
" 'begin"
"(list"
" 'vector-copy!"
" deserialized-syntax-vector-id"
" ''0"
"(list"
" 'let-values"
"(list(list*(list inspector-id) '(#f)))"
"(let-values(((temp25_1)"
"(vector->immutable-vector(list->vector(reverse$1(syntax-literals-stxes sl_4)))))"
"((mpis26_0) mpis_4))"
"(generate-deserialize6.1 #f #f temp25_1 mpis26_0))))"
"(list* 'set! deserialize-syntax-id '(#f))))))))))"
"(define-values(generate-lazy-syntax-literal-lookup)(lambda(pos_86)(list get-syntax-literal!-id pos_86)))"
"(define-values"
"(generate-eager-syntax-literals!)"
"(lambda(sl_5 mpis_13 base-phase_0 self_6 ns_50)"
"(if(syntax-literals-empty? sl_5)"
"(let-values() #f)"
"(let-values()"
"(list"
" 'let-values"
"(list"
"(list"
" '(ns+stxss)"
"(let-values(((temp27_2)(cons(encode-namespace-scopes ns_50)(reverse$1(syntax-literals-stxes sl_5))))"
"((mpis28_0) mpis_13))"
"(generate-deserialize6.1 #f #f temp27_2 mpis28_0))))"
"(list"
" 'let-values"
" '(((ns-scope-s)(car ns+stxss)))"
"(list"
" 'list->vector"
"(list*"
" 'map"
"(list"
" 'lambda"
" '(stx)"
"(list"
" 'swap-top-level-scopes"
"(list"
" 'syntax-module-path-index-shift"
"(list 'syntax-shift-phase-level 'stx(list '- base-phase_0 dest-phase-id))"
"(add-module-path-index! mpis_13 self_6)"
" self-id)"
" 'ns-scope-s"
" ns-id))"
" '((cdr ns+stxss))))))))))"
"(define-values(generate-eager-syntax-literal-lookup)(lambda(pos_87)(list 'vector-ref syntax-literals-id pos_87)))"
"(define-values(syntax-literals-as-vector)(lambda(sl_6)(list->vector(reverse$1(syntax-literals-stxes sl_6)))))"
"(define-values"
"(select-fresh)"
"(lambda(sym_35 header_0)"
"(if(symbol-conflicts? sym_35 header_0)"
"((letrec-values(((loop_135)"
"(lambda(pos_88)"
"                          (let-values (((new-sym_0) (string->symbol (format \"~a/~a\" pos_88 sym_35))))"
"(if(symbol-conflicts? new-sym_0 header_0)(loop_135(add1 pos_88)) new-sym_0)))))"
" loop_135)"
" 1)"
" sym_35)))"
"(define-values"
"(symbol-conflicts?)"
"(lambda(sym_36 header_1)"
"(let-values(((or-part_56)(built-in-symbol? sym_36)))"
"(if or-part_56 or-part_56(hash-ref(header-define-and-import-syms header_1) sym_36 #f)))))"
"(define-values"
"(register-required-variable-use!19.1)"
"(lambda(defined?12_0 defined?13_0 header14_0 mpi15_0 phase16_1 sym17_0 extra-inspector18_0)"
"(let-values(((header_2) header14_0))"
"(let-values(((mpi_12) mpi15_0))"
"(let-values(((phase_51) phase16_1))"
"(let-values(((sym_37) sym17_0))"
"(let-values(((extra-inspector_4) extra-inspector18_0))"
"(let-values(((defined?_0)(if defined?13_0 defined?12_0 #f)))"
"(let-values()"
"(let-values(((key_48)(variable-use3.1(module-use1.1 mpi_12 phase_51) sym_37)))"
"(let-values(((variable-uses_0)(header-require-var-to-import-sym header_2)))"
"(let-values(((var-sym_0)"
"(let-values(((or-part_192)(hash-ref variable-uses_0 key_48 #f)))"
"(if or-part_192"
" or-part_192"
"(let-values(((sym_38)(select-fresh(variable-use-sym key_48) header_2)))"
"(begin"
"(hash-set! variable-uses_0 key_48 sym_38)"
"(set-header-require-vars-in-order!"
" header_2"
"(cons key_48(header-require-vars-in-order header_2)))"
"(hash-set!"
"(header-define-and-import-syms header_2)"
" sym_38"
"(if defined?_0 'defined 'required))"
" sym_38))))))"
"(begin"
"(if extra-inspector_4"
"(let-values()"
"(let-values(((extra-inspectors_0)(header-import-sym-to-extra-inspectors header_2)))"
"(hash-update!"
" extra-inspectors_0"
" var-sym_0"
"(lambda(s_187)(set-add s_187 extra-inspector_4))"
" '#hasheq())))"
"(void))"
" var-sym_0)))))))))))))"
"(define-values"
"(register-as-defined!)"
"(lambda(header_3 def-sym_0)(hash-set!(header-define-and-import-syms header_3) def-sym_0 'defined)))"
"(define-values"
"(registered-as-required?)"
"(lambda(header_4 var-sym_1)(eq? 'required(hash-ref(header-define-and-import-syms header_4) var-sym_1 #f))))"
"(define-values"
"(generate-links+imports)"
"(lambda(header_5 phase_52 cctx_0)"
"(let-values(((mod-use-to-link-sym_0)"
"(let-values(((lst_71)(header-require-vars-in-order header_5)))"
"(begin"
"(check-list lst_71)"
"((letrec-values(((for-loop_87)"
"(lambda(ht_97 lst_72)"
"(if(pair? lst_72)"
"(let-values(((vu_0)(unsafe-car lst_72))((rest_32)(unsafe-cdr lst_72)))"
"(let-values(((ht_98)"
"(let-values(((ht_99) ht_97))"
"(let-values(((ht_100)"
"(let-values()"
"(let-values(((mu_2)"
"(variable-use-module-use"
" vu_0)))"
"(if(let-values(((or-part_193)"
"(hash-ref"
" ht_99"
" mu_2"
" #f)))"
"(if or-part_193"
" or-part_193"
"(let-values(((or-part_194)"
"(eq?"
"(module-use-module"
" mu_2)"
"(compile-context-self"
" cctx_0))))"
"(if or-part_194"
" or-part_194"
"(top-level-module-path-index?"
"(module-use-module"
" mu_2))))))"
" ht_99"
"(hash-set"
" ht_99"
" mu_2"
"(string->symbol"
"(format"
"                                                                                     \"~a_~a_~a\""
"(extract-name"
"(module-use-module mu_2))"
"(module-use-phase mu_2)"
"(hash-count ht_99)))))))))"
"(values ht_100)))))"
"(if(not #f)(for-loop_87 ht_98 rest_32) ht_98)))"
" ht_97))))"
" for-loop_87)"
" '#hash()"
" lst_71)))))"
"(let-values(((link-mod-uses_0)(hash-keys mod-use-to-link-sym_0)))"
"(values"
" link-mod-uses_0"
"(let-values(((lst_103) link-mod-uses_0))"
"(begin"
"(check-list lst_103)"
"((letrec-values(((for-loop_114)"
"(lambda(lst_104)"
"(if(pair? lst_104)"
"(let-values(((mu_3)(unsafe-car lst_104))((rest_50)(unsafe-cdr lst_104)))"
"(let-values(((post-guard-var_26)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_26)"
"(let-values()"
"(let-values()"
"(let-values(((lst_29)"
"(header-require-vars-in-order header_5)))"
"(begin"
"(check-list lst_29)"
"((letrec-values(((for-loop_144)"
"(lambda(lst_52)"
"(if(pair? lst_52)"
"(let-values(((vu_1)"
"(unsafe-car lst_52))"
"((rest_57)"
"(unsafe-cdr lst_52)))"
"(let-values(((post-guard-var_27)"
"(lambda() #t)))"
"(let-values()"
"(if(equal?"
" mu_3"
"(variable-use-module-use"
" vu_1))"
"(let-values()"
"(let-values(((elem_27)"
"(let-values()"
"(let-values()"
"(let-values(((var-sym_2)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_5)"
" vu_1)))"
"(let-values(((ex-sym_0)"
"(variable-use-sym"
" vu_1)))"
"(if(eq?"
" var-sym_2"
" ex-sym_0)"
" var-sym_2"
"(list"
" ex-sym_0"
" var-sym_2))))))))"
"(let-values(((result_92)"
"(if(post-guard-var_27)"
"(for-loop_144"
" rest_57)"
" null)))"
"(cons"
" elem_27"
" result_92))))"
"(if(post-guard-var_27)"
"(for-loop_144 rest_57)"
" null)))))"
" null))))"
" for-loop_144)"
" lst_29)))))))"
"(let-values(((result_93)"
"(if(post-guard-var_26)(for-loop_114 rest_50) null)))"
"(cons elem_26 result_93))))))"
" null))))"
" for-loop_114)"
" lst_103)))"
"(let-values(((lst_117) link-mod-uses_0))"
"(begin"
"(check-list lst_117)"
"((letrec-values(((for-loop_145)"
"(lambda(lst_118)"
"(if(pair? lst_118)"
"(let-values(((mu_4)(unsafe-car lst_118))((rest_58)(unsafe-cdr lst_118)))"
"(let-values(((post-guard-var_28)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_28)"
"(let-values()"
"(let-values()"
"(let-values(((extra-inspectorss_0)"
"(let-values(((lst_106)"
"(header-require-vars-in-order"
" header_5)))"
"(begin"
"(check-list lst_106)"
"((letrec-values(((for-loop_146)"
"(lambda(lst_33)"
"(if(pair? lst_33)"
"(let-values(((vu_2)"
"(unsafe-car"
" lst_33))"
"((rest_12)"
"(unsafe-cdr"
" lst_33)))"
"(let-values(((post-guard-var_29)"
"(lambda()"
" #t)))"
"(let-values()"
"(if(equal?"
" mu_4"
"(variable-use-module-use"
" vu_2))"
"(let-values()"
"(let-values(((elem_29)"
"(let-values()"
"(let-values()"
"(let-values(((var-sym_3)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_5)"
" vu_2)))"
"(hash-ref"
"(header-import-sym-to-extra-inspectors"
" header_5)"
" var-sym_3"
" #f))))))"
"(let-values(((result_94)"
"(if(post-guard-var_29)"
"(for-loop_146"
" rest_12)"
" null)))"
"(cons"
" elem_29"
" result_94))))"
"(if(post-guard-var_29)"
"(for-loop_146"
" rest_12)"
" null)))))"
" null))))"
" for-loop_146)"
" lst_106)))))"
"(if(ormap2 values extra-inspectorss_0)"
" extra-inspectorss_0"
" #f))))))"
"(let-values(((result_95)"
"(if(post-guard-var_28)(for-loop_145 rest_58) null)))"
"(cons elem_28 result_95))))))"
" null))))"
" for-loop_145)"
" lst_117)))"
"(let-values(((lst_119)(header-require-vars-in-order header_5)))"
"(begin"
"(check-list lst_119)"
"((letrec-values(((for-loop_147)"
"(lambda(lst_120)"
"(if(pair? lst_120)"
"(let-values(((vu_3)(unsafe-car lst_120))((rest_59)(unsafe-cdr lst_120)))"
"(let-values(((post-guard-var_30)(lambda() #t)))"
"(let-values()"
"(if(let-values(((mod_2)(module-use-module(variable-use-module-use vu_3))))"
"(let-values(((or-part_195)(eq? mod_2(compile-context-self cctx_0))))"
"(if or-part_195 or-part_195(top-level-module-path-index? mod_2))))"
"(let-values()"
"(let-values(((elem_30)"
"(let-values()"
"(let-values()"
"(let-values(((var-sym_4)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_5)"
" vu_3)))"
"(let-values(((ex-sym_1)(variable-use-sym vu_3)))"
"(if(eq? var-sym_4 ex-sym_1)"
" var-sym_4"
"(list var-sym_4 ex-sym_1))))))))"
"(let-values(((result_96)"
"(if(post-guard-var_30)(for-loop_147 rest_59) null)))"
"(cons elem_30 result_96))))"
"(if(post-guard-var_30)(for-loop_147 rest_59) null)))))"
" null))))"
" for-loop_147)"
" lst_119))))))))"
"(define-values"
"(extract-name)"
"(lambda(mpi_27)"
"(let-values(((p_41 base_22)(1/module-path-index-split mpi_27)))"
"(if(symbol? p_41)"
"(let-values() p_41)"
"(if(path? p_41)"
"(let-values()"
"            (let-values (((base_23 name_41 dir?_6) (split-path p_41))) (path-replace-extension name_41 #\"\")))"
"(if(string? p_41)"
"            (let-values () (path-replace-extension p_41 #\"\"))"
"(if(if(pair? p_41)(eq?(car p_41) 'quote) #f)"
"(let-values()(cadr p_41))"
"(if(if(pair? p_41)(eq?(car p_41) 'file) #f)"
"(let-values()"
"(let-values(((base_24 name_42 dir?_7)(split-path(cadr p_41))))"
"                    (path-replace-extension name_42 #\"\")))"
"(if(if(pair? p_41)(eq?(car p_41) 'lib) #f)"
"                  (let-values () (path-replace-extension (cadr p_41) #\"\"))"
"(let-values() 'module))))))))))"
"(define-values"
"(instance-imports)"
"(list ns-id phase-shift-id self-id inspector-id bulk-binding-registry-id set-transformer!-id))"
"(define-values"
"(make-instance-instance13.1)"
"(lambda(bulk-binding-registry5_0 inspector4_0 namespace1_0 phase-shift2_0 self3_0 set-transformer!6_0)"
"(let-values(((ns_51) namespace1_0))"
"(let-values(((phase-shift_6) phase-shift2_0))"
"(let-values(((self_7) self3_0))"
"(let-values(((inspector_10) inspector4_0))"
"(let-values(((bulk-binding-registry_9) bulk-binding-registry5_0))"
"(let-values(((set-transformer!_0) set-transformer!6_0))"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" ns-id"
" ns_51"
" phase-shift-id"
" phase-shift_6"
" self-id"
" self_7"
" inspector-id"
" inspector_10"
" bulk-binding-registry-id"
" bulk-binding-registry_9"
" set-transformer!-id"
" set-transformer!_0))))))))))"
"(define-values"
"(make-module-body-instance-instance18.1)"
"(lambda(set-transformer!16_0)"
"(let-values(((set-transformer!_1) set-transformer!16_0))"
"(let-values()(1/make-instance 'body-instance #f set-transformer!-id set-transformer!_1)))))"
"(define-values"
"(eager-instance-imports)"
"(list* ns-id dest-phase-id self-id bulk-binding-registry-id inspector-id '(swap-top-level-scopes)))"
"(define-values"
"(make-eager-instance-instance11.1)"
"(lambda(bulk-binding-registry4_0 dest-phase2_0 inspector5_0 namespace1_1 self3_1)"
"(let-values(((ns_52) namespace1_1))"
"(let-values(((dest-phase_0) dest-phase2_0))"
"(let-values(((self_8) self3_1))"
"(let-values(((bulk-binding-registry_10) bulk-binding-registry4_0))"
"(let-values(((inspector_11) inspector5_0))"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" ns-id"
" ns_52"
" dest-phase-id"
" dest-phase_0"
" self-id"
" self_8"
" bulk-binding-registry-id"
" bulk-binding-registry_10"
" inspector-id"
" inspector_11"
" 'swap-top-level-scopes"
" swap-top-level-scopes)))))))))"
"(define-values"
"(self-quoting-in-linklet?)"
"(lambda(datum_0)"
"(let-values(((or-part_0)(number? datum_0)))"
"(if or-part_0"
" or-part_0"
"(let-values(((or-part_1)(boolean? datum_0)))"
"(if or-part_1"
" or-part_1"
"(let-values(((or-part_9)(string? datum_0)))(if or-part_9 or-part_9(bytes? datum_0)))))))))"
"(define-values(kernel-primitive-table$1)(primitive-table '#%kernel))"
"(define-values(datum->syntax$3)(hash-ref kernel-primitive-table$1 'datum->syntax))"
"(define-values(syntax->datum$3)(hash-ref kernel-primitive-table$1 'syntax->datum))"
"(define-values(syntax-property-symbol-keys$2)(hash-ref kernel-primitive-table$1 'syntax-property-symbol-keys))"
"(define-values(syntax-property$2)(hash-ref kernel-primitive-table$1 'syntax-property))"
"(define-values(syntax-span$2)(hash-ref kernel-primitive-table$1 'syntax-span))"
"(define-values(syntax-position$2)(hash-ref kernel-primitive-table$1 'syntax-position))"
"(define-values(syntax-column$2)(hash-ref kernel-primitive-table$1 'syntax-column))"
"(define-values(syntax-line$2)(hash-ref kernel-primitive-table$1 'syntax-line))"
"(define-values(syntax-source$2)(hash-ref kernel-primitive-table$1 'syntax-source))"
"(define-values(syntax-e$2)(hash-ref kernel-primitive-table$1 'syntax-e))"
"(define-values(1/syntax?)(hash-ref kernel-primitive-table$1 'syntax?))"
"(define-values"
"(datum->correlated)"
"(let-values(((datum->correlated4_0)"
"(lambda(d3_0 srcloc1_0 srcloc2_0)"
"(let-values(((d_28) d3_0))"
"(let-values(((srcloc_6)(if srcloc2_0 srcloc1_0 #f)))"
"(let-values()(datum->syntax$3 #f d_28 srcloc_6)))))))"
"(case-lambda"
"((d_29)(datum->correlated4_0 d_29 #f #f))"
"((d_30 srcloc1_1)(datum->correlated4_0 d_30 srcloc1_1 #t)))))"
"(define-values(correlated-e)(lambda(e_26)(if(1/syntax? e_26)(syntax-e$2 e_26) e_26)))"
"(define-values(correlated-cadr)(lambda(e_27)(car(correlated-e(cdr(correlated-e e_27))))))"
"(define-values"
"(correlated-length)"
"(lambda(e_28)(let-values(((l_53)(correlated-e e_28)))(if(list? l_53)(length l_53) #f))))"
"(define-values"
"(correlated->list)"
"(lambda(e_29)"
"((letrec-values(((loop_136)"
"(lambda(e_30)"
"(if(list? e_30)"
"(let-values() e_30)"
"(if(pair? e_30)"
"(let-values()(cons(car e_30)(loop_136(cdr e_30))))"
"(if(null? e_30)"
"(let-values() null)"
"(if(1/syntax? e_30)"
"(let-values()(loop_136(syntax-e$2 e_30)))"
"                                (let-values () (error 'correlate->list \"not a list\")))))))))"
" loop_136)"
" e_29)))"
"(define-values"
"(correlated-property)"
"(case-lambda((e_31 k_33)(syntax-property$2 e_31 k_33))((e_32 k_34 v_167)(syntax-property$2 e_32 k_34 v_167))))"
"(define-values"
"(to-syntax-list.1$1)"
"(lambda(s_188)"
"(if(list? s_188)"
"(let-values() s_188)"
"(if(pair? s_188)"
"(let-values()(let-values(((r_37)(to-syntax-list.1$1(cdr s_188))))(if r_37(cons(car s_188) r_37) #f)))"
"(if(1/syntax? s_188)(let-values()(to-syntax-list.1$1(syntax-e$2 s_188)))(let-values() #f))))))"
"(define-values(kernel-primitive-table)(1/primitive-table '#%kernel))"
"(define-values(datum->syntax$2)(hash-ref kernel-primitive-table 'datum->syntax))"
"(define-values(syntax->datum$2)(hash-ref kernel-primitive-table 'syntax->datum))"
"(define-values(syntax-property-symbol-keys$1)(hash-ref kernel-primitive-table 'syntax-property-symbol-keys))"
"(define-values(1/syntax-property)(hash-ref kernel-primitive-table 'syntax-property))"
"(define-values(syntax-span$1)(hash-ref kernel-primitive-table 'syntax-span))"
"(define-values(syntax-position$1)(hash-ref kernel-primitive-table 'syntax-position))"
"(define-values(syntax-column$1)(hash-ref kernel-primitive-table 'syntax-column))"
"(define-values(syntax-line$1)(hash-ref kernel-primitive-table 'syntax-line))"
"(define-values(syntax-source$1)(hash-ref kernel-primitive-table 'syntax-source))"
"(define-values(syntax-e$3)(hash-ref kernel-primitive-table 'syntax-e))"
"(define-values(syntax?$2)(hash-ref kernel-primitive-table 'syntax?))"
"(define-values"
"(srcloc->vector)"
"(lambda(s_78)"
"(if s_78"
"(vector(srcloc-source s_78)(srcloc-line s_78)(srcloc-column s_78)(srcloc-position s_78)(srcloc-span s_78))"
" #f)))"
"(define-values"
"(correlate*)"
"(lambda(stx_12 s-exp_0)"
"(if(syntax-srcloc stx_12)(datum->correlated s-exp_0(srcloc->vector(syntax-srcloc stx_12))) s-exp_0)))"
"(define-values(correlate~)(lambda(stx_13 s-exp_1) s-exp_1))"
"(define-values(->correlated)(lambda(s_12)(datum->correlated s_12 #f)))"
"(define-values"
"(compile$2)"
"(let-values(((compile7_0)"
"(lambda(p5_0 cctx6_0 name1_0 result-used?2_0 name3_0 result-used?4_0)"
"(let-values(((p_42) p5_0))"
"(let-values(((cctx_1) cctx6_0))"
"(let-values(((name_43)(if name3_0 name1_0 #f)))"
"(let-values(((result-used?_0)(if result-used?4_0 result-used?2_0 #t)))"
"(let-values()"
"(let-values(((compile_0)"
"(lambda(p_3 name_44 result-used?_1)"
"(compile$2 p_3 cctx_1 name_44 result-used?_1))))"
"(let-values(((s_9)(parsed-s p_42)))"
"(if(parsed-id? p_42)"
"(let-values()"
"(let-values(((p27_1) p_42)((cctx28_0) cctx_1))"
"(compile-identifier24.1 #f #f #f #f p27_1 cctx28_0)))"
"(if(parsed-lambda? p_42)"
"(let-values()"
"(if result-used?_0"
"(let-values()"
"(add-lambda-properties"
"(correlate*"
" s_9"
"(list*"
" 'lambda"
"(compile-lambda"
"(parsed-lambda-keys p_42)"
"(parsed-lambda-body p_42)"
" cctx_1)))"
" name_43"
" s_9))"
"(let-values()(correlate~ s_9 ''unused-lambda))))"
"(if(parsed-case-lambda? p_42)"
"(let-values()"
"(if result-used?_0"
"(let-values()"
"(add-lambda-properties"
"(correlate*"
" s_9"
"(list*"
" 'case-lambda"
"(let-values(((lst_83)(parsed-case-lambda-clauses p_42)))"
"(begin"
"(check-list lst_83)"
"((letrec-values(((for-loop_148)"
"(lambda(lst_121)"
"(if(pair? lst_121)"
"(let-values(((clause_0)(unsafe-car lst_121))"
"((rest_60)(unsafe-cdr lst_121)))"
"(let-values(((post-guard-var_31)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_31)"
"(let-values()"
"(let-values()"
"(compile-lambda"
"(car clause_0)"
"(cadr clause_0)"
" cctx_1)))))"
"(let-values(((result_97)"
"(if(post-guard-var_31)"
"(for-loop_148 rest_60)"
" null)))"
"(cons elem_31 result_97))))))"
" null))))"
" for-loop_148)"
" lst_83)))))"
" name_43"
" s_9))"
"(let-values()(correlate~ s_9 ''unused-case-lambda))))"
"(if(parsed-app? p_42)"
"(let-values()"
"(let-values(((rands_0)(parsed-app-rands p_42)))"
"(correlate~"
" s_9"
"(cons"
"(compile_0(parsed-app-rator p_42) #f #t)"
"(let-values(((lst_39) rands_0))"
"(begin"
"(check-list lst_39)"
"((letrec-values(((for-loop_94)"
"(lambda(lst_122)"
"(if(pair? lst_122)"
"(let-values(((r_38)(unsafe-car lst_122))"
"((rest_40)(unsafe-cdr lst_122)))"
"(let-values(((post-guard-var_32)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_32)"
"(let-values()"
"(let-values()"
"(compile_0"
" r_38"
" #f"
" #t)))))"
"(let-values(((result_98)"
"(if(post-guard-var_32)"
"(for-loop_94 rest_40)"
" null)))"
"(cons elem_32 result_98))))))"
" null))))"
" for-loop_94)"
" lst_39)))))))"
"(if(parsed-if? p_42)"
"(let-values()"
"(let-values(((tst-e_0)(compile_0(parsed-if-tst p_42) #f #f)))"
"(if(eq?(correlated-e tst-e_0) #t)"
"(let-values()(compile_0(parsed-if-thn p_42) name_43 result-used?_0))"
"(if(eq?(correlated-e tst-e_0) #f)"
"(let-values()"
"(compile_0(parsed-if-els p_42) name_43 result-used?_0))"
"(let-values()"
"(correlate~"
" s_9"
"(list"
" 'if"
" tst-e_0"
"(compile_0(parsed-if-thn p_42) name_43 result-used?_0)"
"(compile_0(parsed-if-els p_42) name_43 result-used?_0))))))))"
"(if(parsed-with-continuation-mark? p_42)"
"(let-values()"
"(correlate~"
" s_9"
"(list"
" 'with-continuation-mark"
"(compile_0(parsed-with-continuation-mark-key p_42) #f #t)"
"(compile_0(parsed-with-continuation-mark-val p_42) #f #t)"
"(compile_0"
"(parsed-with-continuation-mark-body p_42)"
" name_43"
" result-used?_0))))"
"(if(parsed-begin0? p_42)"
"(let-values()"
"(correlate~"
" s_9"
"(list*"
" 'begin0"
"(compile_0(car(parsed-begin0-body p_42)) name_43 result-used?_0)"
"(let-values(((lst_84)(cdr(parsed-begin0-body p_42))))"
"(begin"
"(check-list lst_84)"
"((letrec-values(((for-loop_98)"
"(lambda(lst_123)"
"(if(pair? lst_123)"
"(let-values(((e_33)(unsafe-car lst_123))"
"((rest_61)"
"(unsafe-cdr lst_123)))"
"(let-values(((post-guard-var_33)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_33)"
"(let-values()"
"(let-values()"
"(compile_0"
" e_33"
" #f"
" #f)))))"
"(let-values(((result_99)"
"(if(post-guard-var_33)"
"(for-loop_98"
" rest_61)"
" null)))"
"(cons elem_33 result_99))))))"
" null))))"
" for-loop_98)"
" lst_84))))))"
"(if(parsed-begin? p_42)"
"(let-values()"
"(correlate~"
" s_9"
"(compile-begin"
"(parsed-begin-body p_42)"
" cctx_1"
" name_43"
" result-used?_0)))"
"(if(parsed-set!? p_42)"
"(let-values()"
"(correlate~"
" s_9"
"(let-values(((temp29_1)(parsed-set!-id p_42))"
"((cctx30_0) cctx_1)"
"((temp31_1) #t)"
"((temp32_1)"
"(compile_0"
"(parsed-set!-rhs p_42)"
"(parsed-s(parsed-set!-id p_42))"
" #t)))"
"(compile-identifier24.1"
" temp32_1"
" #t"
" temp31_1"
" #t"
" temp29_1"
" cctx30_0))))"
"(if(parsed-let-values? p_42)"
"(let-values()"
"(let-values(((temp36_0) #f)((result-used?37_0) result-used?_0))"
"(compile-let15.1"
" temp36_0"
" p_42"
" cctx_1"
" name_43"
" result-used?37_0)))"
"(if(parsed-letrec-values? p_42)"
"(let-values()"
"(let-values(((temp41_0) #t)"
"((result-used?42_0) result-used?_0))"
"(compile-let15.1"
" temp41_0"
" p_42"
" cctx_1"
" name_43"
" result-used?42_0)))"
"(if(parsed-quote? p_42)"
"(let-values()"
"(let-values(((datum_1)(parsed-quote-datum p_42)))"
"(if(self-quoting-in-linklet? datum_1)"
"(let-values()(correlate~ s_9 datum_1))"
"(let-values()(correlate~ s_9(list 'quote datum_1))))))"
"(if(parsed-quote-syntax? p_42)"
"(let-values()"
"(if result-used?_0"
"(compile-quote-syntax"
"(parsed-quote-syntax-datum p_42)"
" cctx_1)"
"(correlate~ s_9(list 'quote(syntax->datum$1 s_9)))))"
"(if(parsed-#%variable-reference? p_42)"
"(let-values()"
"(let-values(((id_23)"
"(parsed-#%variable-reference-id p_42)))"
"(correlate~"
" s_9"
"(if id_23"
"(list"
" '#%variable-reference"
"(let-values(((id43_0) id_23)((cctx44_0) cctx_1))"
"(compile-identifier24.1"
" #f"
" #f"
" #f"
" #f"
" id43_0"
" cctx44_0)))"
" '(#%variable-reference)))))"
"(let-values()"
"(error"
"                                                               \"unrecognized parsed form:\""
" p_42))))))))))))))))))))))))))"
"(case-lambda"
"((p_8 cctx_2)(compile7_0 p_8 cctx_2 #f #f #f #f))"
"((p_43 cctx_3 name_45 result-used?2_1)(compile7_0 p_43 cctx_3 name_45 result-used?2_1 #t #t))"
"((p_44 cctx_4 name1_1)(compile7_0 p_44 cctx_4 name1_1 #f #t #f)))))"
"(define-values"
"(compile-lambda)"
"(lambda(formals_0 bodys_0 cctx_5)(list formals_0(compile-sequence bodys_0 cctx_5 #f #t))))"
"(define-values"
"(compile-sequence)"
"(lambda(bodys_1 cctx_6 name_46 result-used?_2)"
"(if(null?(cdr bodys_1))"
"(compile$2(car bodys_1) cctx_6 name_46 result-used?_2)"
"(compile-begin bodys_1 cctx_6 name_46 result-used?_2))))"
"(define-values"
"(compile-begin)"
"(lambda(es_0 cctx_7 name_47 result-used?_3)"
"(let-values(((used-pos_0)(sub1(length es_0))))"
"(list*"
" 'begin"
"(let-values(((lst_124) es_0)((start_35) 0))"
"(begin"
"(check-list lst_124)"
"(check-naturals start_35)"
"((letrec-values(((for-loop_17)"
"(lambda(lst_22 pos_89)"
"(if(if(pair? lst_22) #t #f)"
"(let-values(((e_34)(unsafe-car lst_22))"
"((rest_62)(unsafe-cdr lst_22))"
"((i_138) pos_89))"
"(let-values(((post-guard-var_34)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_34)"
"(let-values()"
"(let-values()"
"(let-values(((used?_0)(= i_138 used-pos_0)))"
"(compile$2"
" e_34"
" cctx_7"
"(if used?_0 name_47 #f)"
"(if used?_0 result-used?_3 #f)))))))"
"(let-values(((result_100)"
"(if(post-guard-var_34)"
"(for-loop_17 rest_62(+ pos_89 1))"
" null)))"
"(cons elem_34 result_100))))))"
" null))))"
" for-loop_17)"
" lst_124"
" start_35)))))))"
"(define-values"
"(add-lambda-properties)"
"(lambda(s_23 inferred-name_0 orig-s_0)"
"(letrec-values(((simplify-name_0)"
"(lambda(v_49)"
"(if(pair? v_49)"
"(let-values()"
"(let-values(((n1_0)(simplify-name_0(car v_49))))"
"(let-values(((n2_0)(simplify-name_0(cdr v_49))))(if(eq? n1_0 n2_0) n1_0 v_49))))"
"(let-values() v_49)))))"
"(let-values(((name_48)"
"(let-values(((or-part_38)"
"(let-values(((v_51)(simplify-name_0(syntax-property$1 orig-s_0 'inferred-name))))"
"(if(let-values(((or-part_196)(symbol? v_51)))"
"(if or-part_196"
" or-part_196"
"(let-values(((or-part_197)(syntax?$1 v_51)))"
"(if or-part_197 or-part_197(void? v_51)))))"
" v_51"
" #f))))"
"(if or-part_38 or-part_38 inferred-name_0))))"
"(let-values(((named-s_0)"
"(if name_48"
"(correlated-property"
"(->correlated s_23)"
" 'inferred-name"
"(if(syntax?$1 name_48)(syntax-e$1 name_48) name_48))"
" s_23)))"
"(let-values(((as-method_0)(syntax-property$1 orig-s_0 'method-arity-error)))"
"(if as-method_0"
"(correlated-property(->correlated named-s_0) 'method-arity-error as-method_0)"
" named-s_0)))))))"
"(define-values"
"(compile-let15.1)"
"(lambda(rec?9_0 p11_0 cctx12_0 name13_0 result-used?14_0)"
"(let-values(((p_45) p11_0))"
"(let-values(((cctx_8) cctx12_0))"
"(let-values(((name_49) name13_0))"
"(let-values(((rec?_0) rec?9_0))"
"(let-values(((result-used?_4) result-used?14_0))"
"(let-values()"
"(let-values(((body_0)(parsed-let_-values-body p_45)))"
"(correlate~"
"(parsed-s p_45)"
"(list"
"(if rec?_0 'letrec-values 'let-values)"
"(let-values(((lst_125)(parsed-let_-values-clauses p_45))"
"((lst_126)(parsed-let_-values-idss p_45)))"
"(begin"
"(check-list lst_125)"
"(check-list lst_126)"
"((letrec-values(((for-loop_48)"
"(lambda(lst_127 lst_128)"
"(if(if(pair? lst_127)(pair? lst_128) #f)"
"(let-values(((clause_1)(unsafe-car lst_127))"
"((rest_63)(unsafe-cdr lst_127))"
"((ids_3)(unsafe-car lst_128))"
"((rest_64)(unsafe-cdr lst_128)))"
"(let-values(((post-guard-var_35)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_35)"
"(let-values()"
"(let-values()"
"(list"
"(if rec?_0"
"(let-values(((lst_129)(car clause_1))"
"((lst_130) ids_3))"
"(begin"
"(check-list lst_129)"
"(check-list lst_130)"
"((letrec-values(((for-loop_149)"
"(lambda(lst_131 lst_132)"
"(if(if(pair? lst_131)"
"(pair? lst_132)"
" #f)"
"(let-values(((sym_39)"
"(unsafe-car"
" lst_131))"
"((rest_65)"
"(unsafe-cdr"
" lst_131))"
"((id_24)"
"(unsafe-car"
" lst_132))"
"((rest_66)"
"(unsafe-cdr"
" lst_132)))"
"(let-values(((post-guard-var_36)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_36)"
"(let-values()"
"(let-values()"
"(add-undefined-error-name-property"
" sym_39"
" id_24)))))"
"(let-values(((result_101)"
"(if(post-guard-var_36)"
"(for-loop_149"
" rest_65"
" rest_66)"
" null)))"
"(cons"
" elem_36"
" result_101))))))"
" null))))"
" for-loop_149)"
" lst_129"
" lst_130)))"
"(car clause_1))"
"(compile$2"
"(cadr clause_1)"
" cctx_8"
"(if(= 1(length ids_3))(car ids_3) #f)))))))"
"(let-values(((result_32)"
"(if(post-guard-var_35)"
"(for-loop_48 rest_63 rest_64)"
" null)))"
"(cons elem_35 result_32))))))"
" null))))"
" for-loop_48)"
" lst_125"
" lst_126)))"
"(compile-sequence body_0 cctx_8 name_49 result-used?_4))))))))))))"
"(define-values"
"(add-undefined-error-name-property)"
"(lambda(sym_40 orig-id_0)"
"(let-values(((id_25)(correlate~ orig-id_0 sym_40)))"
"(correlated-property"
"(->correlated id_25)"
" 'undefined-error-name"
"(let-values(((or-part_198)(syntax-property$1 orig-id_0 'undefined-error-name)))"
"(if or-part_198 or-part_198(syntax-e$1 orig-id_0)))))))"
"(define-values"
"(compile-identifier24.1)"
"(lambda(set-to19_0 set-to21_0 set-to?18_0 set-to?20_0 p22_0 cctx23_0)"
"(let-values(((p_46) p22_0))"
"(let-values(((cctx_9) cctx23_0))"
"(let-values(((set-to?_0)(if set-to?20_0 set-to?18_0 #f)))"
"(let-values(((rhs_0)(if set-to21_0 set-to19_0 #f)))"
"(let-values()"
"(let-values(((normal-b_0)(parsed-id-binding p_46)))"
"(let-values(((b_67)"
"(let-values(((or-part_67) normal-b_0))"
"(if or-part_67"
" or-part_67"
"(let-values(((temp45_0)(compile-context-self cctx_9))"
"((temp46_0)(compile-context-phase cctx_9))"
"((temp47_0)(syntax-e$1(parsed-s p_46))))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp45_0"
" temp46_0"
" temp47_0))))))"
"(let-values(((sym_41)"
"(if(local-binding? b_67)"
"(let-values()(local-binding-key b_67))"
"(if(module-binding? b_67)"
"(let-values()"
"(let-values(((mpi_28)"
"(if(parsed-top-id? p_46)"
"(compile-context-self cctx_9)"
"(module-binding-module b_67))))"
"(if(parsed-primitive-id? p_46)"
"(let-values()"
"(begin"
"(if(zero?(module-binding-phase b_67))"
"(void)"
"(let-values()"
"                                                  (error \"internal error: non-zero phase for a primitive\")))"
"(if set-to?_0"
"(let-values()"
"(error"
"                                                   \"internal error: cannot assign to a primitive:\""
"(module-binding-sym b_67)))"
"(void))"
"(module-binding-sym b_67)))"
"(if(eq? mpi_28(compile-context-module-self cctx_9))"
"(let-values()"
"(let-values(((header_6)(compile-context-header cctx_9)))"
"(hash-ref"
"(header-binding-sym-to-define-sym header_6)"
"(module-binding-sym b_67))))"
"(let-values()"
"(let-values(((temp48_0)(compile-context-header cctx_9))"
"((mpi49_0) mpi_28)"
"((temp50_0)(module-binding-phase b_67))"
"((temp51_0)(module-binding-sym b_67))"
"((temp52_1)"
"(let-values(((or-part_199)"
"(module-binding-extra-inspector b_67)))"
"(if or-part_199"
" or-part_199"
"(let-values(((or-part_200)(parsed-id-inspector p_46)))"
"(if or-part_200"
" or-part_200"
"(if(parsed-s p_46)"
"(syntax-inspector(parsed-s p_46))"
" #f)))))))"
"(register-required-variable-use!19.1"
" #f"
" #f"
" temp48_0"
" mpi49_0"
" temp50_0"
" temp51_0"
" temp52_1)))))))"
"(let-values()"
"                                      (error \"not a reference to a module or local binding:\" b_67 (parsed-s p_46)))))))"
"(correlate~(parsed-s p_46)(if set-to?_0(list 'set! sym_41 rhs_0) sym_41))))))))))))"
"(define-values"
"(compile-quote-syntax)"
"(lambda(q_1 cctx_10)"
"(let-values(((pos_90)(add-syntax-literal!(compile-context-header cctx_10) q_1)))"
"(if(compile-context-lazy-syntax-literals? cctx_10)"
"(let-values()(generate-lazy-syntax-literal-lookup pos_90))"
"(let-values()(generate-eager-syntax-literal-lookup pos_90))))))"
"(define-values"
"(struct:link-info"
" link-info1.1"
" link-info?"
" link-info-link-module-uses"
" link-info-imports"
" link-info-extra-inspectorsss"
" link-info-def-decls)"
"(let-values(((struct:_38 make-_38 ?_38 -ref_38 -set!_38)"
"(let-values()"
"(let-values()"
"(make-struct-type 'link-info #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'link-info)))))"
"(values"
" struct:_38"
" make-_38"
" ?_38"
"(make-struct-field-accessor -ref_38 0 'link-module-uses)"
"(make-struct-field-accessor -ref_38 1 'imports)"
"(make-struct-field-accessor -ref_38 2 'extra-inspectorsss)"
"(make-struct-field-accessor -ref_38 3 'def-decls))))"
"(define-values"
"(compile-forms27.1)"
"(lambda(body-imports2_0"
" body-suffix-forms3_0"
" body-suffix-forms14_0"
" compiled-expression-callback7_0"
" compiled-expression-callback18_0"
" cross-linklet-inlining?12_0"
" cross-linklet-inlining?23_0"
" definition-callback8_0"
" definition-callback19_0"
" encoded-root-expand-ctx-box5_0"
" encoded-root-expand-ctx-box16_0"
" force-phases4_0"
" force-phases15_0"
" get-module-linklet-info10_0"
" get-module-linklet-info21_0"
" other-form-callback9_0"
" other-form-callback20_0"
" root-ctx-only-if-syntax?6_0"
" root-ctx-only-if-syntax?17_0"
" to-source?11_0"
" to-source?22_0"
" bodys24_0"
" cctx25_0"
" mpis26_1)"
"(let-values(((bodys_2) bodys24_0))"
"(let-values(((cctx_11) cctx25_0))"
"(let-values(((mpis_14) mpis26_1))"
"(let-values(((body-imports_0) body-imports2_0))"
"(let-values(((body-suffix-forms_0)(if body-suffix-forms14_0 body-suffix-forms3_0 null)))"
"(let-values(((force-phases_0)(if force-phases15_0 force-phases4_0 null)))"
"(let-values(((encoded-root-expand-ctx-box_0)"
"(if encoded-root-expand-ctx-box16_0 encoded-root-expand-ctx-box5_0 #f)))"
"(let-values(((root-ctx-only-if-syntax?_0)"
"(if root-ctx-only-if-syntax?17_0 root-ctx-only-if-syntax?6_0 #f)))"
"(let-values(((compiled-expression-callback_0)"
"(if compiled-expression-callback18_0 compiled-expression-callback7_0 void)))"
"(let-values(((definition-callback_0)(if definition-callback19_0 definition-callback8_0 void)))"
"(let-values(((other-form-callback_0)(if other-form-callback20_0 other-form-callback9_0 void)))"
"(let-values(((get-module-linklet-info_0)"
"(if get-module-linklet-info21_0"
" get-module-linklet-info10_0"
"(lambda(mod-name_7 p_33) #f))))"
"(let-values(((to-source?_0)(if to-source?22_0 to-source?11_0 #f)))"
"(let-values(((cross-linklet-inlining?_0)"
"(if cross-linklet-inlining?23_0 cross-linklet-inlining?12_0 #t)))"
"(let-values()"
"(let-values(((phase_53)(compile-context-phase cctx_11)))"
"(let-values(((self_9)(compile-context-self cctx_11)))"
"(let-values(((syntax-literals_1)(make-syntax-literals)))"
"(let-values(((phase-to-body_0)(make-hasheqv)))"
"(let-values(((add-body!_0)"
"(lambda(phase_54 body_1)"
"(hash-update!"
" phase-to-body_0"
" phase_54"
"(lambda(l_54)(cons body_1 l_54))"
" null))))"
"(let-values(((phase-to-header_0)(make-hasheqv)))"
"(let-values(((find-or-create-header!_0)"
"(lambda(phase_55)"
"(let-values(((or-part_148)"
"(hash-ref phase-to-header_0 phase_55 #f)))"
"(if or-part_148"
" or-part_148"
"(let-values(((header_7)"
"(make-header"
" mpis_14"
" syntax-literals_1)))"
"(begin"
"(hash-set! phase-to-header_0 phase_55 header_7)"
" header_7)))))))"
"(let-values((()"
"(begin"
"(let-values(((lst_133) force-phases_0))"
"(begin"
"(check-list lst_133)"
"((letrec-values(((for-loop_47)"
"(lambda(lst_134)"
"(if(pair? lst_134)"
"(let-values(((phase_56)"
"(unsafe-car"
" lst_134))"
"((rest_67)"
"(unsafe-cdr"
" lst_134)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(find-or-create-header!_0"
" phase_56)"
"(add-body!_0"
" phase_56"
" '(void))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_47 rest_67)"
"(values))))"
"(values)))))"
" for-loop_47)"
" lst_133)))"
"(values))))"
"(let-values()"
"(let-values(((saw-define-syntaxes?_0) #f))"
"(let-values((()"
"(begin"
"(if(compile-context-module-self cctx_11)"
"(let-values()"
"((letrec-values(((loop!_0)"
"(lambda(bodys_3"
" phase_57"
" header_8)"
"(begin"
"(let-values(((lst_135)"
" bodys_3))"
"(begin"
"(check-list lst_135)"
"((letrec-values(((for-loop_109)"
"(lambda(lst_136)"
"(if(pair?"
" lst_136)"
"(let-values(((body_2)"
"(unsafe-car"
" lst_136))"
"((rest_68)"
"(unsafe-cdr"
" lst_136)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(parsed-define-values?"
" body_2)"
"(let-values()"
"(begin"
"(let-values(((lst_137)"
"(parsed-define-values-syms"
" body_2)))"
"(begin"
"(check-list"
" lst_137)"
"((letrec-values(((for-loop_150)"
"(lambda(lst_126)"
"(if(pair?"
" lst_126)"
"(let-values(((sym_42)"
"(unsafe-car"
" lst_126))"
"((rest_69)"
"(unsafe-cdr"
" lst_126)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((def-sym_1)"
"(select-fresh"
" sym_42"
" header_8)))"
"(begin"
"(hash-set!"
"(header-binding-sym-to-define-sym"
" header_8)"
" sym_42"
" def-sym_1)"
"(set-header-binding-syms-in-order!"
" header_8"
"(cons"
" sym_42"
"(header-binding-syms-in-order"
" header_8)))"
"(register-as-defined!"
" header_8"
" def-sym_1))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_150"
" rest_69)"
"(values))))"
"(values)))))"
" for-loop_150)"
" lst_137)))"
"(void)))"
"(if(parsed-begin-for-syntax?"
" body_2)"
"(let-values()"
"(loop!_0"
"(parsed-begin-for-syntax-body"
" body_2)"
"(add1"
" phase_57)"
"(find-or-create-header!_0"
"(add1"
" phase_57))))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_109"
" rest_68)"
"(values))))"
"(values)))))"
" for-loop_109)"
" lst_135)))"
"(void)))))"
" loop!_0)"
" bodys_2"
" phase_53"
"(find-or-create-header!_0 phase_53)))"
"(void))"
"(values))))"
"(let-values(((as-required?_0)"
"(lambda(header_9)"
"(lambda(sym_43)"
"(registered-as-required? header_9 sym_43)))))"
"(let-values(((last-i_0)(sub1(length bodys_2))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop!_1)"
"(lambda(bodys_4"
" phase_20"
" header_10)"
"(begin"
"(let-values(((lst_129)"
" bodys_4)"
"((start_36)"
" 0))"
"(begin"
"(check-list"
" lst_129)"
"(check-naturals"
" start_36)"
"((letrec-values(((for-loop_149)"
"(lambda(lst_131"
" pos_91)"
"(if(if(pair?"
" lst_131)"
" #t"
" #f)"
"(let-values(((body_3)"
"(unsafe-car"
" lst_131))"
"((rest_65)"
"(unsafe-cdr"
" lst_131))"
"((i_139)"
" pos_91))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(parsed-define-values?"
" body_3)"
"(let-values()"
"(let-values(((ids_4)"
"(parsed-define-values-ids"
" body_3)))"
"(let-values(((binding-syms_0)"
"(parsed-define-values-syms"
" body_3)))"
"(let-values(((def-syms_0)"
"(if(compile-context-module-self"
" cctx_11)"
"(let-values()"
"(let-values(((lst_97)"
" binding-syms_0))"
"(begin"
"(check-list"
" lst_97)"
"((letrec-values(((for-loop_6)"
"(lambda(lst_98)"
"(if(pair?"
" lst_98)"
"(let-values(((binding-sym_0)"
"(unsafe-car"
" lst_98))"
"((rest_47)"
"(unsafe-cdr"
" lst_98)))"
"(let-values(((post-guard-var_23)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_23)"
"(let-values()"
"(let-values()"
"(hash-ref"
"(header-binding-sym-to-define-sym"
" header_10)"
" binding-sym_0)))))"
"(let-values(((result_85)"
"(if(post-guard-var_23)"
"(for-loop_6"
" rest_47)"
" null)))"
"(cons"
" elem_23"
" result_85))))))"
" null))))"
" for-loop_6)"
" lst_97))))"
"(let-values()"
"(let-values(((lst_11)"
" binding-syms_0))"
"(begin"
"(check-list"
" lst_11)"
"((letrec-values(((for-loop_7)"
"(lambda(lst_138)"
"(if(pair?"
" lst_138)"
"(let-values(((binding-sym_1)"
"(unsafe-car"
" lst_138))"
"((rest_70)"
"(unsafe-cdr"
" lst_138)))"
"(let-values(((post-guard-var_37)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_37)"
"(let-values()"
"(let-values()"
"(let-values(((temp32_2)"
"(compile-context-self"
" cctx_11))"
"((phase33_1)"
" phase_20)"
"((binding-sym34_0)"
" binding-sym_1)"
"((temp35_0)"
" #f)"
"((temp36_1)"
" #t))"
"(register-required-variable-use!19.1"
" temp36_1"
" #t"
" header_10"
" temp32_2"
" phase33_1"
" binding-sym34_0"
" temp35_0))))))"
"(let-values(((result_102)"
"(if(post-guard-var_37)"
"(for-loop_7"
" rest_70)"
" null)))"
"(cons"
" elem_37"
" result_102))))))"
" null))))"
" for-loop_7)"
" lst_11)))))))"
"(let-values(((rhs_1)"
"(compile$2"
"(parsed-define-values-rhs"
" body_3)"
"(let-values(((the-struct_30)"
" cctx_11))"
"(if(compile-context?"
" the-struct_30)"
"(let-values(((phase37_1)"
" phase_20)"
"((header38_0)"
" header_10))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_30)"
" phase37_1"
"(compile-context-self"
" the-struct_30)"
"(compile-context-module-self"
" the-struct_30)"
"(compile-context-full-module-name"
" the-struct_30)"
"(compile-context-lazy-syntax-literals?"
" the-struct_30)"
" header38_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                \"compile-context?\""
" the-struct_30)))"
"(if(="
"(length"
" ids_4)"
" 1)"
"(car"
" ids_4)"
" #f))))"
"(begin"
"(definition-callback_0)"
"(compiled-expression-callback_0"
" rhs_1"
"(length"
" def-syms_0)"
" phase_20"
"(as-required?_0"
" header_10))"
"(add-body!_0"
" phase_20"
"(propagate-inline-property"
"(correlate*"
"(parsed-s"
" body_3)"
"(list"
" 'define-values"
" def-syms_0"
" rhs_1))"
"(parsed-s"
" body_3)))"
"(if(let-values(((or-part_58)"
"(compile-context-module-self"
" cctx_11)))"
"(if or-part_58"
" or-part_58"
"(null?"
" ids_4)))"
"(void)"
"(let-values()"
"(begin"
"(add-body!_0"
" phase_20"
"(list*"
" 'if"
" #f"
"(list*"
" 'begin"
"(let-values(((lst_139)"
" def-syms_0))"
"(begin"
"(check-list"
" lst_139)"
"((letrec-values(((for-loop_151)"
"(lambda(lst_140)"
"(if(pair?"
" lst_140)"
"(let-values(((def-sym_2)"
"(unsafe-car"
" lst_140))"
"((rest_71)"
"(unsafe-cdr"
" lst_140)))"
"(let-values(((post-guard-var_38)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_38)"
"(let-values()"
"(let-values()"
"(list*"
" 'set!"
" def-sym_2"
" '(#f))))))"
"(let-values(((result_103)"
"(if(post-guard-var_38)"
"(for-loop_151"
" rest_71)"
" null)))"
"(cons"
" elem_38"
" result_103))))))"
" null))))"
" for-loop_151)"
" lst_139))))"
" '((void))))"
"(add-body!_0"
" phase_20"
"(compile-top-level-bind"
" ids_4"
" binding-syms_0"
"(let-values(((the-struct_46)"
" cctx_11))"
"(if(compile-context?"
" the-struct_46)"
"(let-values(((phase39_0)"
" phase_20)"
"((header40_0)"
" header_10))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_46)"
" phase39_0"
"(compile-context-self"
" the-struct_46)"
"(compile-context-module-self"
" the-struct_46)"
"(compile-context-full-module-name"
" the-struct_46)"
"(compile-context-lazy-syntax-literals?"
" the-struct_46)"
" header40_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                             \"compile-context?\""
" the-struct_46)))"
" #f)))))))))))"
"(if(parsed-define-syntaxes?"
" body_3)"
"(let-values()"
"(let-values(((ids_5)"
"(parsed-define-syntaxes-ids"
" body_3)))"
"(let-values(((binding-syms_1)"
"(parsed-define-syntaxes-syms"
" body_3)))"
"(let-values(((next-header_0)"
"(find-or-create-header!_0"
"(add1"
" phase_20))))"
"(let-values(((gen-syms_0)"
"(let-values(((lst_35)"
" binding-syms_1))"
"(begin"
"(check-list"
" lst_35)"
"((letrec-values(((for-loop_152)"
"(lambda(lst_141)"
"(if(pair?"
" lst_141)"
"(let-values(((binding-sym_2)"
"(unsafe-car"
" lst_141))"
"((rest_72)"
"(unsafe-cdr"
" lst_141)))"
"(let-values(((post-guard-var_39)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_39)"
"(let-values()"
"(let-values()"
"(select-fresh"
" binding-sym_2"
" next-header_0)))))"
"(let-values(((result_104)"
"(if(post-guard-var_39)"
"(for-loop_152"
" rest_72)"
" null)))"
"(cons"
" elem_39"
" result_104))))))"
" null))))"
" for-loop_152)"
" lst_35)))))"
"(let-values(((rhs_2)"
"(compile$2"
"(parsed-define-syntaxes-rhs"
" body_3)"
"(let-values(((the-struct_47)"
" cctx_11))"
"(if(compile-context?"
" the-struct_47)"
"(let-values(((phase41_0)"
"(add1"
" phase_20))"
"((header42_0)"
" next-header_0))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_47)"
" phase41_0"
"(compile-context-self"
" the-struct_47)"
"(compile-context-module-self"
" the-struct_47)"
"(compile-context-full-module-name"
" the-struct_47)"
"(compile-context-lazy-syntax-literals?"
" the-struct_47)"
" header42_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                    \"compile-context?\""
" the-struct_47))))))"
"(let-values((()"
"(begin"
"(definition-callback_0)"
"(values))))"
"(let-values((()"
"(begin"
"(compiled-expression-callback_0"
" rhs_2"
"(length"
" gen-syms_0)"
"(add1"
" phase_20)"
"(as-required?_0"
" header_10))"
"(values))))"
"(let-values(((transformer-set!s_0)"
"(let-values(((lst_142)"
" binding-syms_1)"
"((lst_143)"
" gen-syms_0))"
"(begin"
"(check-list"
" lst_142)"
"(check-list"
" lst_143)"
"((letrec-values(((for-loop_153)"
"(lambda(lst_144"
" lst_145)"
"(if(if(pair?"
" lst_144)"
"(pair?"
" lst_145)"
" #f)"
"(let-values(((binding-sym_3)"
"(unsafe-car"
" lst_144))"
"((rest_73)"
"(unsafe-cdr"
" lst_144))"
"((gen-sym_0)"
"(unsafe-car"
" lst_145))"
"((rest_74)"
"(unsafe-cdr"
" lst_145)))"
"(let-values(((post-guard-var_40)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_40)"
"(let-values()"
"(let-values()"
"(list"
" set-transformer!-id"
"(list"
" 'quote"
" binding-sym_3)"
" gen-sym_0)))))"
"(let-values(((result_17)"
"(if(post-guard-var_40)"
"(for-loop_153"
" rest_73"
" rest_74)"
" null)))"
"(cons"
" elem_40"
" result_17))))))"
" null))))"
" for-loop_153)"
" lst_142"
" lst_143)))))"
"(begin"
"(if(compile-context-module-self"
" cctx_11)"
"(let-values()"
"(add-body!_0"
"(add1"
" phase_20)"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_0"
" rhs_2))"
"(list*"
" 'begin"
"(qq-append"
" transformer-set!s_0"
" '((void)))))))"
"(let-values()"
"(add-body!_0"
"(add1"
" phase_20)"
"(generate-top-level-define-syntaxes"
" gen-syms_0"
" rhs_2"
" transformer-set!s_0"
"(compile-top-level-bind"
" ids_5"
" binding-syms_1"
"(let-values(((the-struct_48)"
" cctx_11))"
"(if(compile-context?"
" the-struct_48)"
"(let-values(((phase43_0)"
" phase_20)"
"((header44_0)"
" header_10))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_48)"
" phase43_0"
"(compile-context-self"
" the-struct_48)"
"(compile-context-module-self"
" the-struct_48)"
"(compile-context-full-module-name"
" the-struct_48)"
"(compile-context-lazy-syntax-literals?"
" the-struct_48)"
" header44_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                      \"compile-context?\""
" the-struct_48)))"
" gen-syms_0)))))"
"(set! saw-define-syntaxes?_0"
" #t)))))))))))"
"(if(parsed-begin-for-syntax?"
" body_3)"
"(let-values()"
"(loop!_1"
"(parsed-begin-for-syntax-body"
" body_3)"
"(add1"
" phase_20)"
"(find-or-create-header!_0"
"(add1"
" phase_20))))"
"(if(let-values(((or-part_201)"
"(parsed-#%declare?"
" body_3)))"
"(if or-part_201"
" or-part_201"
"(let-values(((or-part_116)"
"(parsed-module?"
" body_3)))"
"(if or-part_116"
" or-part_116"
"(parsed-require?"
" body_3)))))"
"(let-values()"
"(let-values(((e_35)"
"(other-form-callback_0"
" body_3"
"(let-values(((the-struct_49)"
" cctx_11))"
"(if(compile-context?"
" the-struct_49)"
"(let-values(((phase45_0)"
" phase_20)"
"((header46_0)"
" header_10))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_49)"
" phase45_0"
"(compile-context-self"
" the-struct_49)"
"(compile-context-module-self"
" the-struct_49)"
"(compile-context-full-module-name"
" the-struct_49)"
"(compile-context-lazy-syntax-literals?"
" the-struct_49)"
" header46_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                \"compile-context?\""
" the-struct_49))))))"
"(if e_35"
"(let-values()"
"(begin"
"(compiled-expression-callback_0"
" e_35"
" #f"
" phase_20"
"(as-required?_0"
" header_10))"
"(add-body!_0"
" phase_20"
" e_35)))"
"(void))))"
"(let-values()"
"(let-values(((e_36)"
"(compile$2"
" body_3"
"(let-values(((the-struct_50)"
" cctx_11))"
"(if(compile-context?"
" the-struct_50)"
"(let-values(((phase47_0)"
" phase_20)"
"((header48_0)"
" header_10))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_50)"
" phase47_0"
"(compile-context-self"
" the-struct_50)"
"(compile-context-module-self"
" the-struct_50)"
"(compile-context-full-module-name"
" the-struct_50)"
"(compile-context-lazy-syntax-literals?"
" the-struct_50)"
" header48_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                \"compile-context?\""
" the-struct_50)))"
" #f"
"(="
" i_139"
" last-i_0))))"
"(begin"
"(compiled-expression-callback_0"
" e_36"
" #f"
" phase_20"
"(as-required?_0"
" header_10))"
"(add-body!_0"
" phase_20"
" e_36)))))))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_149"
" rest_65"
"(+"
" pos_91"
" 1))"
"(values))))"
"(values)))))"
" for-loop_149)"
" lst_129"
" start_36)))"
"(void)))))"
" loop!_1)"
" bodys_2"
" phase_53"
"(find-or-create-header!_0 phase_53))"
"(values))))"
"(let-values(((encoded-root-expand-pos_0)"
"(if encoded-root-expand-ctx-box_0"
"(if(unbox encoded-root-expand-ctx-box_0)"
"(if(not"
"(if root-ctx-only-if-syntax?_0"
"(if(not saw-define-syntaxes?_0)"
"(syntax-literals-empty?"
" syntax-literals_1)"
" #f)"
" #f))"
"(add-syntax-literal!"
" syntax-literals_1"
"(unbox"
" encoded-root-expand-ctx-box_0))"
" #f)"
" #f)"
" #f)))"
"(let-values(((phases-in-order_1)"
"(let-values(((temp49_1)"
"(hash-keys phase-to-body_0))"
"((<50_0) <))"
"(sort7.1 #f #f #f #f temp49_1 <50_0))))"
"(let-values(((min-phase_0)"
"(if(pair? phases-in-order_1)"
"(car phases-in-order_1)"
" phase_53)))"
"(let-values(((max-phase_0)"
"(if(pair? phases-in-order_1)"
"(car(reverse$1 phases-in-order_1))"
" phase_53)))"
"(let-values(((phase-to-link-info_0)"
"(let-values(((lst_72)"
" phases-in-order_1))"
"(begin"
"(check-list lst_72)"
"((letrec-values(((for-loop_112)"
"(lambda(table_114"
" lst_146)"
"(if(pair?"
" lst_146)"
"(let-values(((phase_58)"
"(unsafe-car"
" lst_146))"
"((rest_75)"
"(unsafe-cdr"
" lst_146)))"
"(let-values(((table_50)"
"(let-values(((table_51)"
" table_114))"
"(let-values(((table_52)"
"(let-values()"
"(let-values(((key_49"
" val_40)"
"(let-values()"
"(let-values(((header_11)"
"(hash-ref"
" phase-to-header_0"
" phase_58"
" #f)))"
"(let-values(((link-module-uses_0"
" imports_0"
" extra-inspectorsss_0"
" def-decls_0)"
"(generate-links+imports"
" header_11"
" phase_58"
" cctx_11)))"
"(values"
" phase_58"
"(link-info1.1"
" link-module-uses_0"
" imports_0"
" extra-inspectorsss_0"
" def-decls_0)))))))"
"(hash-set"
" table_51"
" key_49"
" val_40)))))"
"(values"
" table_52)))))"
"(if(not"
" #f)"
"(for-loop_112"
" table_50"
" rest_75)"
" table_50)))"
" table_114))))"
" for-loop_112)"
" '#hash()"
" lst_72)))))"
"(let-values(((body-linklets+module-uses_0)"
"(let-values(((lst_29)"
" phases-in-order_1))"
"(begin"
"(check-list lst_29)"
"((letrec-values(((for-loop_144)"
"(lambda(table_115"
" lst_147)"
"(if(pair?"
" lst_147)"
"(let-values(((phase_59)"
"(unsafe-car"
" lst_147))"
"((rest_76)"
"(unsafe-cdr"
" lst_147)))"
"(let-values(((table_116)"
"(let-values(((table_117)"
" table_115))"
"(let-values(((table_118)"
"(let-values()"
"(let-values(((key_50"
" val_41)"
"(let-values()"
"(let-values(((bodys_5)"
"(hash-ref"
" phase-to-body_0"
" phase_59)))"
"(let-values(((li_0)"
"(hash-ref"
" phase-to-link-info_0"
" phase_59)))"
"(let-values(((binding-sym-to-define-sym_0)"
"(header-binding-sym-to-define-sym"
"(hash-ref"
" phase-to-header_0"
" phase_59))))"
"(let-values(((module-uses_0)"
"(link-info-link-module-uses"
" li_0)))"
"(let-values(((linklet_0"
" new-module-uses_0)"
"(let-values()"
"((if to-source?_0"
"(lambda(l_55"
" name_50"
" keys_0"
" getter_0)"
"(values"
" l_55"
" keys_0))"
"(lambda(l_56"
" name_51"
" keys_1"
" getter_1)"
"(if cross-linklet-inlining?_0"
"(1/compile-linklet"
" l_56"
" name_51"
" keys_1"
" getter_1)"
"(values"
"(1/compile-linklet"
" l_56"
" name_51)"
" keys_1))))"
"(list*"
" 'linklet"
"(qq-append"
" body-imports_0"
"(link-info-imports"
" li_0))"
"(qq-append"
"(link-info-def-decls"
" li_0)"
"(let-values(((lst_148)"
"(header-binding-syms-in-order"
"(hash-ref"
" phase-to-header_0"
" phase_59))))"
"(begin"
"(check-list"
" lst_148)"
"((letrec-values(((for-loop_154)"
"(lambda(lst_149)"
"(if(pair?"
" lst_149)"
"(let-values(((binding-sym_4)"
"(unsafe-car"
" lst_149))"
"((rest_77)"
"(unsafe-cdr"
" lst_149)))"
"(let-values(((post-guard-var_41)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_41)"
"(let-values()"
"(let-values()"
"(let-values(((def-sym_3)"
"(hash-ref"
" binding-sym-to-define-sym_0"
" binding-sym_4)))"
"(if(eq?"
" def-sym_3"
" binding-sym_4)"
" def-sym_3"
"(list"
" def-sym_3"
" binding-sym_4)))))))"
"(let-values(((result_105)"
"(if(post-guard-var_41)"
"(for-loop_154"
" rest_77)"
" null)))"
"(cons"
" elem_41"
" result_105))))))"
" null))))"
" for-loop_154)"
" lst_148))))"
"(qq-append"
"(reverse$1"
" bodys_5)"
" body-suffix-forms_0))"
" 'module"
"(list->vector"
"(append"
"(let-values(((lst_150)"
" body-imports_0))"
"(begin"
"(check-list"
" lst_150)"
"((letrec-values(((for-loop_155)"
"(lambda(lst_108)"
"(if(pair?"
" lst_108)"
"(let-values(((i_140)"
"(unsafe-car"
" lst_108))"
"((rest_78)"
"(unsafe-cdr"
" lst_108)))"
"(let-values(((post-guard-var_42)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_42)"
"(let-values()"
"(let-values()"
" #f))))"
"(let-values(((result_106)"
"(if(post-guard-var_42)"
"(for-loop_155"
" rest_78)"
" null)))"
"(cons"
" elem_42"
" result_106))))))"
" null))))"
" for-loop_155)"
" lst_150)))"
"(link-info-link-module-uses"
" li_0)))"
"(if cross-linklet-inlining?_0"
"(make-module-use-to-linklet"
"(compile-context-namespace"
" cctx_11)"
" get-module-linklet-info_0"
"(link-info-link-module-uses"
" li_0))"
" #f)))))"
"(values"
" phase_59"
"(cons"
" linklet_0"
"(list-tail"
"(vector->list"
" new-module-uses_0)"
"(length"
" body-imports_0))))))))))))"
"(hash-set"
" table_117"
" key_50"
" val_41)))))"
"(values"
" table_118)))))"
"(if(not"
" #f)"
"(for-loop_144"
" table_116"
" rest_76)"
" table_116)))"
" table_115))))"
" for-loop_144)"
" '#hasheq()"
" lst_29)))))"
"(let-values(((body-linklets_0)"
"(let-values(((ht_101)"
" body-linklets+module-uses_0))"
"(begin"
"(check-in-hash ht_101)"
"((letrec-values(((for-loop_156)"
"(lambda(table_119"
" i_141)"
"(if i_141"
"(let-values(((phase_60"
" l+mus_0)"
"(hash-iterate-key+value"
" ht_101"
" i_141)))"
"(let-values(((table_120)"
"(let-values(((table_121)"
" table_119))"
"(let-values(((table_122)"
"(let-values()"
"(let-values(((key_51"
" val_42)"
"(let-values()"
"(values"
" phase_60"
"(car"
" l+mus_0)))))"
"(hash-set"
" table_121"
" key_51"
" val_42)))))"
"(values"
" table_122)))))"
"(if(not"
" #f)"
"(for-loop_156"
" table_120"
"(hash-iterate-next"
" ht_101"
" i_141))"
" table_120)))"
" table_119))))"
" for-loop_156)"
" '#hasheq()"
"(hash-iterate-first"
" ht_101))))))"
"(let-values(((phase-to-link-module-uses_1)"
"(let-values(((ht_102)"
" body-linklets+module-uses_0))"
"(begin"
"(check-in-hash ht_102)"
"((letrec-values(((for-loop_157)"
"(lambda(table_123"
" i_142)"
"(if i_142"
"(let-values(((phase_61"
" l+mus_1)"
"(hash-iterate-key+value"
" ht_102"
" i_142)))"
"(let-values(((table_124)"
"(let-values(((table_125)"
" table_123))"
"(let-values(((table_126)"
"(let-values()"
"(let-values(((key_52"
" val_43)"
"(let-values()"
"(values"
" phase_61"
"(cdr"
" l+mus_1)))))"
"(hash-set"
" table_125"
" key_52"
" val_43)))))"
"(values"
" table_126)))))"
"(if(not"
" #f)"
"(for-loop_157"
" table_124"
"(hash-iterate-next"
" ht_102"
" i_142))"
" table_124)))"
" table_123))))"
" for-loop_157)"
" '#hasheq()"
"(hash-iterate-first"
" ht_102))))))"
"(let-values(((phase-to-link-module-uses-expr_0)"
"(serialize-phase-to-link-module-uses"
" phase-to-link-module-uses_1"
" mpis_14)))"
"(let-values(((phase-to-link-extra-inspectorsss_0)"
"(let-values(((ht_103)"
" phase-to-link-info_0))"
"(begin"
"(check-in-hash ht_103)"
"((letrec-values(((for-loop_158)"
"(lambda(table_127"
" i_118)"
"(if i_118"
"(let-values(((phase_62"
" li_1)"
"(hash-iterate-key+value"
" ht_103"
" i_118)))"
"(let-values(((table_128)"
"(let-values(((table_129)"
" table_127))"
"(let-values(((table_130)"
"(let-values()"
"(let-values(((key_53"
" val_44)"
"(let-values()"
"(values"
" phase_62"
"(link-info-extra-inspectorsss"
" li_1)))))"
"(hash-set"
" table_129"
" key_53"
" val_44)))))"
"(values"
" table_130)))))"
"(if(not"
" #f)"
"(for-loop_158"
" table_128"
"(hash-iterate-next"
" ht_103"
" i_118))"
" table_128)))"
" table_127))))"
" for-loop_158)"
" '#hash()"
"(hash-iterate-first"
" ht_103))))))"
"(values"
" body-linklets_0"
" min-phase_0"
" max-phase_0"
" phase-to-link-module-uses_1"
" phase-to-link-module-uses-expr_0"
" phase-to-link-extra-inspectorsss_0"
" syntax-literals_1"
" encoded-root-expand-pos_0))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(compile-top-level-bind)"
"(lambda(ids_6 binding-syms_2 cctx_12 trans-exprs_0)"
"(let-values(((phase_63)(compile-context-phase cctx_12)))"
"(let-values(((self_10)(compile-context-self cctx_12)))"
"(let-values(((header_12)(compile-context-header cctx_12)))"
"(let-values(((mpis_15)(header-module-path-indexes header_12)))"
"(let-values(((top-level-bind-scope_2)"
"(root-expand-context-top-level-bind-scope"
"(namespace-get-root-expand-ctx(compile-context-namespace cctx_12)))))"
"(let-values(((self-expr_0)(add-module-path-index! mpis_15 self_10)))"
"(list*"
" 'begin"
"(let-values(((lst_151) ids_6)"
"((lst_152) binding-syms_2)"
"((lst_153)"
"(let-values(((or-part_202) trans-exprs_0))"
"(if or-part_202"
" or-part_202"
"(let-values(((lst_154) ids_6))"
"(begin"
"(check-list lst_154)"
"((letrec-values(((for-loop_159)"
"(lambda(lst_113)"
"(if(pair? lst_113)"
"(let-values(((id_26)(unsafe-car lst_113))"
"((rest_79)(unsafe-cdr lst_113)))"
"(let-values(((post-guard-var_43)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_43)"
"(let-values()(let-values() ''#f))))"
"(let-values(((result_107)"
"(if(post-guard-var_43)"
"(for-loop_159 rest_79)"
" null)))"
"(cons elem_43 result_107))))))"
" null))))"
" for-loop_159)"
" lst_154)))))))"
"(begin"
"(check-list lst_151)"
"(check-list lst_152)"
"(check-list lst_153)"
"((letrec-values(((for-loop_126)"
"(lambda(lst_155 lst_156 lst_157)"
"(if(if(pair? lst_155)(if(pair? lst_156)(pair? lst_157) #f) #f)"
"(let-values(((id_27)(unsafe-car lst_155))"
"((rest_80)(unsafe-cdr lst_155))"
"((binding-sym_5)(unsafe-car lst_156))"
"((rest_81)(unsafe-cdr lst_156))"
"((trans-expr_0)(unsafe-car lst_157))"
"((rest_82)(unsafe-cdr lst_157)))"
"(let-values(((post-guard-var_44)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_44)"
"(let-values()"
"(let-values()"
"(let-values(((id-stx_0)"
"(compile-quote-syntax"
"(remove-scope"
" id_27"
" top-level-bind-scope_2)"
" cctx_12)))"
"(list"
" top-level-bind!-id"
" id-stx_0"
" self-expr_0"
" phase_63"
" phase-shift-id"
" ns-id"
"(list 'quote binding-sym_5)"
"(if trans-exprs_0 #t #f)"
" trans-expr_0))))))"
"(let-values(((result_108)"
"(if(post-guard-var_44)"
"(for-loop_126 rest_80 rest_81 rest_82)"
" null)))"
"(cons elem_44 result_108))))))"
" null))))"
" for-loop_126)"
" lst_151"
" lst_152"
" lst_153))))))))))))"
"(define-values"
"(generate-top-level-define-syntaxes)"
"(lambda(gen-syms_1 rhs_3 transformer-set!s_1 finish_1)"
"(list"
" 'call-with-values"
"(list 'lambda '() rhs_3)"
"(list"
" 'case-lambda"
"(list gen-syms_1(list* 'begin(qq-append transformer-set!s_1(list* finish_1 '((void))))))"
"(list"
" '()"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_1"
"(list*"
" 'values"
"(let-values(((lst_158) gen-syms_1))"
"(begin"
"(check-list lst_158)"
"((letrec-values(((for-loop_160)"
"(lambda(lst_159)"
"(if(pair? lst_159)"
"(let-values(((s_189)(unsafe-car lst_159))((rest_83)(unsafe-cdr lst_159)))"
"(let-values(((post-guard-var_45)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_45)(let-values()(let-values() ''#f))))"
"(let-values(((result_109)"
"(if(post-guard-var_45)(for-loop_160 rest_83) null)))"
"(cons elem_45 result_109))))))"
" null))))"
" for-loop_160)"
" lst_158))))))"
"(list* 'begin finish_1 '((void)))))"
"(list 'args(list* 'let-values(list(list* gen-syms_1 '((apply values args)))) '((void))))))))"
"(define-values"
"(propagate-inline-property)"
"(lambda(e_37 orig-s_1)"
"(let-values(((v_168)(syntax-property$1 orig-s_1 'compiler-hint:cross-module-inline)))"
"(if v_168(correlated-property e_37 'compiler-hint:cross-module-inline v_168) e_37))))"
"(define-values"
"(make-module-use-to-linklet)"
"(lambda(ns_53 get-module-linklet-info_1 init-mus_0)"
"(let-values(((mu-intern-table_0)(make-hash)))"
"(let-values(((intern-module-use_0)"
"(lambda(mu_5)"
"(let-values(((mod-name_8)(1/module-path-index-resolve(module-use-module mu_5))))"
"(let-values(((or-part_203)"
"(hash-ref mu-intern-table_0(cons mod-name_8(module-use-phase mu_5)) #f)))"
"(if or-part_203"
" or-part_203"
"(begin"
"(hash-set! mu-intern-table_0(cons mod-name_8(module-use-phase mu_5)) mu_5)"
" mu_5)))))))"
"(begin"
"(for-each2 intern-module-use_0 init-mus_0)"
"(lambda(mu_6)"
"(if mu_6"
"(let-values()"
"(let-values(((mod-name_9)(1/module-path-index-resolve(module-use-module mu_6))))"
"(let-values(((mli_0)"
"(let-values(((or-part_204)"
"(get-module-linklet-info_1 mod-name_9(module-use-phase mu_6))))"
"(if or-part_204"
" or-part_204"
"(namespace->module-linklet-info ns_53 mod-name_9(module-use-phase mu_6))))))"
"(if mli_0"
"(values"
"(module-linklet-info-linklet-or-instance mli_0)"
"(if(module-linklet-info-module-uses mli_0)"
"(list->vector"
"(append"
" '(#f #f)"
"(let-values(((lst_160)(module-linklet-info-module-uses mli_0)))"
"(begin"
"(check-list lst_160)"
"((letrec-values(((for-loop_161)"
"(lambda(lst_161)"
"(if(pair? lst_161)"
"(let-values(((sub-mu_0)(unsafe-car lst_161))"
"((rest_84)(unsafe-cdr lst_161)))"
"(let-values(((post-guard-var_46)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_46)"
"(let-values()"
"(let-values()"
"(intern-module-use_0"
"(module-use1.1"
"(module-path-index-shift"
"(module-use-module sub-mu_0)"
"(module-linklet-info-self mli_0)"
"(module-use-module mu_6))"
"(module-use-phase sub-mu_0)))))))"
"(let-values(((result_110)"
"(if(post-guard-var_46)"
"(for-loop_161 rest_84)"
" null)))"
"(cons elem_46 result_110))))))"
" null))))"
" for-loop_161)"
" lst_160)))))"
" #f))"
"(values #f #f)))))"
"(let-values()(values #f #f)))))))))"
"(define-values"
"(build-shared-data-linklet)"
"(lambda(cims_0 ns_40)"
"(let-values(((mpis_16)(make-module-path-index-table)))"
"(let-values(((mpi-trees_0)"
"(map-cim-tree"
" cims_0"
"(lambda(cim_1)"
"(let-values(((vec_54 i_143)"
"(let-values(((vec_55 len_28)"
"(let-values(((vec_56)(compiled-in-memory-mpis cim_1)))"
"(begin"
"(check-vector vec_56)"
"(values vec_56(unsafe-vector-length vec_56))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_103)"
"(lambda(vec_57 i_144 pos_92)"
"(if(unsafe-fx< pos_92 len_28)"
"(let-values(((mpi_29)"
"(unsafe-vector-ref vec_55 pos_92)))"
"(let-values(((vec_58 i_145)"
"(let-values(((vec_59) vec_57)"
"((i_146) i_144))"
"(let-values(((vec_60 i_147)"
"(let-values()"
"(let-values(((new-vec_3)"
"(if(eq?"
" i_146"
"(unsafe-vector*-length"
" vec_59))"
"(grow-vector"
" vec_59)"
" vec_59)))"
"(begin"
"(unsafe-vector*-set!"
" new-vec_3"
" i_146"
"(let-values()"
"(add-module-path-index!/pos"
" mpis_16"
" mpi_29)))"
"(values"
" new-vec_3"
"(unsafe-fx+"
" i_146"
" 1)))))))"
"(values vec_60 i_147)))))"
"(if(not #f)"
"(for-loop_103 vec_58 i_145(unsafe-fx+ 1 pos_92))"
"(values vec_58 i_145))))"
"(values vec_57 i_144)))))"
" for-loop_103)"
"(make-vector 16)"
" 0"
" 0)))))"
"(shrink-vector vec_54 i_143))))))"
"(let-values(((syntax-literals_2)(make-syntax-literals)))"
"(let-values(((syntax-literals-trees_0)"
"(map-cim-tree"
" cims_0"
"(lambda(cim_2)"
"(add-syntax-literals! syntax-literals_2(compiled-in-memory-syntax-literals cim_2))))))"
"(let-values(((module-uses-tables_0) null))"
"(let-values(((module-uses-tables-count_0) 0))"
"(let-values(((phase-to-link-module-uses-trees_0)"
"(map-cim-tree"
" cims_0"
"(lambda(cim_3)"
"(let-values(((pos_93) module-uses-tables-count_0))"
"(begin"
"(set! module-uses-tables_0"
"(cons(compiled-in-memory-phase-to-link-module-uses cim_3) module-uses-tables_0))"
"(set! module-uses-tables-count_0(add1 pos_93))"
" pos_93))))))"
"(let-values(((syntax-literals-expr_0)"
"(generate-eager-syntax-literals! syntax-literals_2 mpis_16 0 #f ns_40)))"
"(let-values(((phase-to-link-module-uses-expr_1)"
"(list*"
" 'vector"
"(let-values(((lst_39)(reverse$1 module-uses-tables_0)))"
"(begin"
"(check-list lst_39)"
"((letrec-values(((for-loop_94)"
"(lambda(lst_122)"
"(if(pair? lst_122)"
"(let-values(((phase-to-link-module-uses_2)"
"(unsafe-car lst_122))"
"((rest_40)(unsafe-cdr lst_122)))"
"(let-values(((post-guard-var_32)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_32)"
"(let-values()"
"(let-values()"
"(serialize-phase-to-link-module-uses"
" phase-to-link-module-uses_2"
" mpis_16)))))"
"(let-values(((result_98)"
"(if(post-guard-var_32)"
"(for-loop_94 rest_40)"
" null)))"
"(cons elem_32 result_98))))))"
" null))))"
" for-loop_94)"
" lst_39))))))"
"(1/compile-linklet"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list*"
" mpi-vector-id"
" '(mpi-vector-trees"
" phase-to-link-modules-vector"
" phase-to-link-modules-trees"
" syntax-literals"
" syntax-literals-trees))"
"(list 'define-values(list mpi-vector-id)(generate-module-path-index-deserialize mpis_16))"
"(list 'define-values '(mpi-vector-trees)(list 'quote mpi-trees_0))"
"(list 'define-values '(phase-to-link-modules-vector) phase-to-link-module-uses-expr_1)"
"(list"
" 'define-values"
" '(phase-to-link-modules-trees)"
"(list 'quote phase-to-link-module-uses-trees_0))"
"(list 'define-values '(syntax-literals) syntax-literals-expr_0)"
"(list"
" 'define-values"
" '(syntax-literals-trees)"
"(list 'quote syntax-literals-trees_0)))))))))))))))"
"(define-values"
"(map-cim-tree)"
"(lambda(cims_1 proc_6)"
"((letrec-values(((loop_113)"
"(lambda(cims_2)"
"(let-values(((lst_85) cims_2))"
"(begin"
"(check-list lst_85)"
"((letrec-values(((for-loop_162)"
"(lambda(lst_162)"
"(if(pair? lst_162)"
"(let-values(((cim_4)(unsafe-car lst_162))"
"((rest_85)(unsafe-cdr lst_162)))"
"(let-values(((post-guard-var_47)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_47)"
"(let-values()"
"(let-values()"
"(vector"
"(proc_6 cim_4)"
"(loop_113"
"(compiled-in-memory-pre-compiled-in-memorys"
" cim_4))"
"(loop_113"
"(compiled-in-memory-post-compiled-in-memorys"
" cim_4)))))))"
"(let-values(((result_111)"
"(if(post-guard-var_47)"
"(for-loop_162 rest_85)"
" null)))"
"(cons elem_47 result_111))))))"
" null))))"
" for-loop_162)"
" lst_85))))))"
" loop_113)"
" cims_1)))"
"(define-values"
"(compiled-tops->compiled-top8.1)"
"(lambda(merge-serialization?2_0"
" merge-serialization?5_0"
" namespace3_0"
" namespace6_0"
" to-source?1_0"
" to-source?4_0"
" all-cims7_0)"
"(let-values(((all-cims_0) all-cims7_0))"
"(let-values(((to-source?_1)(if to-source?4_0 to-source?1_0 #f)))"
"(let-values(((merge-serialization?_0)(if merge-serialization?5_0 merge-serialization?2_0 #f)))"
"(let-values(((ns_54)(if namespace6_0 namespace3_0 #f)))"
"(let-values()"
"(let-values(((cims_3)(remove-nontail-purely-functional all-cims_0)))"
"(if(= 1(length cims_3))"
"(let-values()(car cims_3))"
"(let-values()"
"(let-values(((sequence-ht_0)"
"(let-values(((lst_163) cims_3)((start_37) 0))"
"(begin"
"(check-list lst_163)"
"(check-naturals start_37)"
"((letrec-values(((for-loop_89)"
"(lambda(table_131 lst_76 pos_94)"
"(if(if(pair? lst_76) #t #f)"
"(let-values(((cim_5)(unsafe-car lst_76))"
"((rest_86)(unsafe-cdr lst_76))"
"((i_93) pos_94))"
"(let-values(((table_132)"
"(let-values(((table_133) table_131))"
"(let-values(((table_134)"
"(let-values()"
"(let-values(((key_54"
" val_45)"
"(let-values()"
"(values"
"(string->symbol"
"(number->string"
" i_93))"
"((if to-source?_1"
" values"
" compiled-in-memory-linklet-directory)"
" cim_5)))))"
"(hash-set"
" table_133"
" key_54"
" val_45)))))"
"(values table_134)))))"
"(if(not #f)"
"(for-loop_89 table_132 rest_86(+ pos_94 1))"
" table_132)))"
" table_131))))"
" for-loop_89)"
" '#hasheq()"
" lst_163"
" start_37)))))"
"(let-values(((ht_104)"
"(if merge-serialization?_0"
"(hash-set"
" sequence-ht_0"
" 'data"
"(1/hash->linklet-directory"
"(hasheq"
" #f"
"(1/hash->linklet-bundle(hasheq 0(build-shared-data-linklet cims_3 ns_54))))))"
" sequence-ht_0)))"
"(if to-source?_1"
"(let-values() ht_104)"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory ht_104)"
" #f"
" #f"
" #f"
" '#hasheqv()"
" #f"
" '#hasheqv()"
" '#()"
" '#()"
" cims_3"
" null"
" #f"
" #f)))))))))))))))"
"(define-values"
"(compiled-top->compiled-tops)"
"(lambda(ld_0)"
"(let-values(((ht_105)(1/linklet-directory->hash ld_0)))"
"(let-values(((start_38) 0)((end_27)(hash-count ht_105))((inc_19) 1))"
"(begin"
"(check-range start_38 end_27 inc_19)"
"((letrec-values(((for-loop_27)"
"(lambda(pos_95)"
"(if(< pos_95 end_27)"
"(let-values(((i_148) pos_95))"
"(let-values(((post-guard-var_4)(lambda() #t)))"
"(let-values(((top_0)(hash-ref ht_105(string->symbol(number->string i_148)) #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_46)"
"(lambda()"
"(let-values()"
"(let-values(((post-guard-var_48)(lambda() #f)))"
"(let-values()"
"(if top_0"
"(let-values()"
"(let-values(((elem_48)"
"(let-values()"
"(let-values() top_0))))"
"(let-values(((result_29)"
"(if(post-guard-var_48)"
"(for-loop_46)"
"(if(post-guard-var_4)"
"(for-loop_27"
"(+ pos_95 inc_19))"
" null))))"
"(cons elem_48 result_29))))"
"(if(post-guard-var_48)"
"(for-loop_46)"
"(if(post-guard-var_4)"
"(for-loop_27(+ pos_95 inc_19))"
" null)))))))))"
" for-loop_46))))))"
" null))))"
" for-loop_27)"
" start_38))))))"
"(define-values"
"(remove-nontail-purely-functional)"
"(lambda(cims_4)"
"((letrec-values(((loop_137)"
"(lambda(cims_5)"
"(if(null? cims_5)"
"(let-values() null)"
"(if(null?(cdr cims_5))"
"(let-values() cims_5)"
"(if(if(compiled-in-memory?(car cims_5))"
"(compiled-in-memory-purely-functional?(car cims_5))"
" #f)"
"(let-values()(loop_137(cdr cims_5)))"
"(let-values()(cons(car cims_5)(cdr cims_5)))))))))"
" loop_137)"
" cims_4)))"
"(define-values"
"(struct:known-defined/delay known-defined/delay2.1 known-defined/delay? known-defined/delay-thunk)"
"(let-values(((struct:_26 make-_26 ?_26 -ref_26 -set!_26)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-defined/delay #f 1 0 #f null 'prefab #f '(0) #f 'known-defined/delay)))))"
"(values struct:_26 make-_26 ?_26(make-struct-field-accessor -ref_26 0 'thunk))))"
"(define-values"
"(struct:known-property known-property3.1 known-property?)"
"(let-values(((struct:_31 make-_31 ?_31 -ref_31 -set!_31)"
"(let-values()"
"(let-values()(make-struct-type 'known-property #f 0 0 #f null 'prefab #f '() #f 'known-property)))))"
"(values struct:_31 make-_31 ?_31)))"
"(define-values"
"(struct:known-function known-function4.1 known-function? known-function-arity known-function-pure?)"
"(let-values(((struct:_63 make-_63 ?_63 -ref_63 -set!_63)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-function #f 2 0 #f null 'prefab #f '(0 1) #f 'known-function)))))"
"(values"
" struct:_63"
" make-_63"
" ?_63"
"(make-struct-field-accessor -ref_63 0 'arity)"
"(make-struct-field-accessor -ref_63 1 'pure?))))"
"(define-values"
"(struct:known-function-of-satisfying"
" known-function-of-satisfying5.1"
" known-function-of-satisfying?"
" known-function-of-satisfying-arg-predicate-keys)"
"(let-values(((struct:_39 make-_39 ?_39 -ref_39 -set!_39)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'known-function-of-satisfying"
" #f"
" 1"
" 0"
" #f"
" null"
" 'prefab"
" #f"
" '(0)"
" #f"
" 'known-function-of-satisfying)))))"
"(values struct:_39 make-_39 ?_39(make-struct-field-accessor -ref_39 0 'arg-predicate-keys))))"
"(define-values"
"(struct:known-predicate known-predicate6.1 known-predicate? known-predicate-key)"
"(let-values(((struct:_64 make-_64 ?_64 -ref_64 -set!_64)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-predicate #f 1 0 #f null 'prefab #f '(0) #f 'known-predicate)))))"
"(values struct:_64 make-_64 ?_64(make-struct-field-accessor -ref_64 0 'key))))"
"(define-values"
"(struct:known-satisfies known-satisfies7.1 known-satisfies? known-satisfies-predicate-key)"
"(let-values(((struct:_20 make-_20 ?_20 -ref_20 -set!_20)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-satisfies #f 1 0 #f null 'prefab #f '(0) #f 'known-satisfies)))))"
"(values struct:_20 make-_20 ?_20(make-struct-field-accessor -ref_20 0 'predicate-key))))"
"(define-values"
"(struct:known-struct-op known-struct-op8.1 known-struct-op? known-struct-op-type known-struct-op-field-count)"
"(let-values(((struct:_65 make-_65 ?_65 -ref_65 -set!_65)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-struct-op #f 2 0 #f null 'prefab #f '(0 1) #f 'known-struct-op)))))"
"(values"
" struct:_65"
" make-_65"
" ?_65"
"(make-struct-field-accessor -ref_65 0 'type)"
"(make-struct-field-accessor -ref_65 1 'field-count))))"
"(define-values"
"(lookup-defn)"
"(lambda(defns_0 sym_4)"
"(let-values(((d_31)(hash-ref defns_0 sym_4 #f)))"
"(if(known-defined/delay? d_31)"
"(let-values()(begin((known-defined/delay-thunk d_31))(lookup-defn defns_0 sym_4)))"
"(let-values() d_31)))))"
"(define-values"
"(any-side-effects?9.1)"
"(lambda(known-defns2_0"
" known-defns5_0"
" known-locals1_0"
" known-locals4_0"
" ready-variable?3_0"
" ready-variable?6_0"
" e7_0"
" expected-results8_0)"
"(let-values(((e_38) e7_0))"
"(let-values(((expected-results_0) expected-results8_0))"
"(let-values(((locals_0)(if known-locals4_0 known-locals1_0 '#hasheq())))"
"(let-values(((defns_1)(if known-defns5_0 known-defns2_0 '#hasheq())))"
"(let-values(((ready-variable?_0)(if ready-variable?6_0 ready-variable?3_0(lambda(id_2) #f))))"
"(let-values()"
"(let-values(((effects?_0)"
"(lambda(e_39 expected-results_1 locals_1)"
"(let-values(((locals14_0) locals_1)"
"((defns15_0) defns_1)"
"((ready-variable?16_0) ready-variable?_0))"
"(any-side-effects?9.1"
" defns15_0"
" #t"
" locals14_0"
" #t"
" ready-variable?16_0"
" #t"
" e_39"
" expected-results_1)))))"
"(let-values(((actual-results_0)"
"((letrec-values(((loop_138)"
"(lambda(e_40 locals_2)"
"(let-values(((tmp_23)"
"(if(pair?(correlated-e e_40))"
"(correlated-e(car(correlated-e e_40)))"
" #f)))"
"(let-values(((index_1)"
"(if(symbol? tmp_23)"
"(hash-ref"
" '#hasheq((values . 3)"
"(begin . 5)"
"(void . 4)"
"(make-struct-type . 7)"
"(let-values . 2)"
"(if . 11)"
"(quote . 1)"
"(letrec-values . 2)"
"(make-struct-field-mutator . 9)"
"(begin0 . 6)"
"(#%variable-reference . 1)"
"(lambda . 1)"
"(case-lambda . 1)"
"(make-struct-type-property . 10)"
"(make-struct-field-accessor . 8))"
" tmp_23"
"(lambda() 0))"
" 0)))"
"(if(unsafe-fx< index_1 5)"
"(if(unsafe-fx< index_1 2)"
"(if(unsafe-fx< index_1 1)"
"(let-values()"
"(let-values(((v_36)(correlated-e e_40)))"
"(if(let-values(((or-part_178)(string? v_36)))"
"(if or-part_178"
" or-part_178"
"(let-values(((or-part_87)(number? v_36)))"
"(if or-part_87"
" or-part_87"
"(let-values(((or-part_88)"
"(boolean? v_36)))"
"(if or-part_88"
" or-part_88"
"(char? v_36)))))))"
"(let-values() 1)"
"(let-values(((c1_128)"
"(if(pair? v_36)"
"(let-values(((rator_0)"
"(correlated-e"
"(car v_36))))"
"(let-values(((or-part_15)"
"(hash-ref"
" locals_2"
" rator_0"
" #f)))"
"(if or-part_15"
" or-part_15"
"(lookup-defn"
" defns_1"
" rator_0))))"
" #f)))"
"(if c1_128"
"((lambda(d_32)"
"(let-values(((ok?_1 _17_0 e18_0)"
"(let-values(((s_85) e_40))"
"(let-values(((orig-s_2)"
" s_85))"
"(let-values(((_17_1 e18_1)"
"(let-values(((s_190)"
"(if(1/syntax?"
" s_85)"
"(syntax-e$2"
" s_85)"
" s_85)))"
"(if(pair?"
" s_190)"
"(let-values(((_19_0)"
"(let-values(((s_191)"
"(car"
" s_190)))"
" s_191))"
"((e20_0)"
"(let-values(((s_192)"
"(cdr"
" s_190)))"
"(let-values(((s_172)"
"(if(1/syntax?"
" s_192)"
"(syntax-e$2"
" s_192)"
" s_192)))"
"(let-values(((flat-s_0)"
"(to-syntax-list.1$1"
" s_172)))"
"(if(not"
" flat-s_0)"
"(let-values()"
"((lambda(false_0"
" str_6"
" e_41)"
"(error"
" str_6))"
" #f"
"                                                                                                                                        \"bad syntax\""
" orig-s_2))"
"(let-values()"
" flat-s_0)))))))"
"(values"
" _19_0"
" e20_0))"
"((lambda(false_1"
" str_7"
" e_42)"
"(error"
" str_7))"
" #f"
"                                                                                                                \"bad syntax\""
" orig-s_2)))))"
"(values"
" #t"
" _17_1"
" e18_1))))))"
"(let-values(((n-args_0)(length e18_0)))"
"(if(let-values(((or-part_182)"
"(if(let-values(((or-part_112)"
"(if(known-struct-op?"
" d_32)"
"(if(eq?"
" 'constructor"
"(known-struct-op-type"
" d_32))"
"(="
"(known-struct-op-field-count"
" d_32)"
" n-args_0)"
" #f)"
" #f)))"
"(if or-part_112"
" or-part_112"
"(if(known-function?"
" d_32)"
"(if(known-function-pure?"
" d_32)"
"(arity-includes?"
"(known-function-arity"
" d_32)"
" n-args_0)"
" #f)"
" #f)))"
"(let-values(((lst_7)"
" e18_0))"
"(begin"
"(check-list"
" lst_7)"
"((letrec-values(((for-loop_0)"
"(lambda(result_31"
" lst_8)"
"(if(pair?"
" lst_8)"
"(let-values(((e_3)"
"(unsafe-car"
" lst_8))"
"((rest_0)"
"(unsafe-cdr"
" lst_8)))"
"(let-values(((result_112)"
"(let-values()"
"(let-values(((result_113)"
"(let-values()"
"(let-values()"
"(not"
"(effects?_0"
" e_3"
" 1"
" locals_2))))))"
"(values"
" result_113)))))"
"(if(if(not"
"((lambda x_92"
"(not"
" result_112))"
" e_3))"
"(not"
" #f)"
" #f)"
"(for-loop_0"
" result_112"
" rest_0)"
" result_112)))"
" result_31))))"
" for-loop_0)"
" #t"
" lst_7)))"
" #f)))"
"(if or-part_182"
" or-part_182"
"(if(known-function-of-satisfying?"
" d_32)"
"(if(="
" n-args_0"
"(length"
"(known-function-of-satisfying-arg-predicate-keys"
" d_32)))"
"(let-values(((lst_9) e18_0)"
"((lst_124)"
"(known-function-of-satisfying-arg-predicate-keys"
" d_32)))"
"(begin"
"(check-list lst_9)"
"(check-list lst_124)"
"((letrec-values(((for-loop_163)"
"(lambda(result_82"
" lst_22"
" lst_164)"
"(if(if(pair?"
" lst_22)"
"(pair?"
" lst_164)"
" #f)"
"(let-values(((e_34)"
"(unsafe-car"
" lst_22))"
"((rest_62)"
"(unsafe-cdr"
" lst_22))"
"((key_55)"
"(unsafe-car"
" lst_164))"
"((rest_87)"
"(unsafe-cdr"
" lst_164)))"
"(let-values(((result_46)"
"(let-values()"
"(let-values(((result_100)"
"(let-values()"
"(let-values()"
"(if(not"
"(effects?_0"
" e_34"
" 1"
" locals_2))"
"(satisfies?"
" e_34"
" key_55"
" defns_1"
" locals_2)"
" #f)))))"
"(values"
" result_100)))))"
"(if(if(not"
"((lambda x_93"
"(not"
" result_46))"
" e_34))"
"(if(not"
"((lambda x_94"
"(not"
" result_46))"
" key_55))"
"(not"
" #f)"
" #f)"
" #f)"
"(for-loop_163"
" result_46"
" rest_62"
" rest_87)"
" result_46)))"
" result_82))))"
" for-loop_163)"
" #t"
" lst_9"
" lst_124)))"
" #f)"
" #f)))"
" 1"
" #f))))"
" c1_128)"
"(let-values()"
"(if(let-values(((or-part_177)"
"(self-quoting-in-linklet?"
" v_36)))"
"(if or-part_177"
" or-part_177"
"(if(symbol? v_36)"
"(let-values(((or-part_205)"
"(hash-ref"
" locals_2"
" v_36"
" #f)))"
"(if or-part_205"
" or-part_205"
"(let-values(((or-part_206)"
"(lookup-defn"
" defns_1"
" v_36)))"
"(if or-part_206"
" or-part_206"
"(let-values(((or-part_83)"
"(built-in-symbol?"
" v_36)))"
"(if or-part_83"
" or-part_83"
"(ready-variable?_0"
" v_36)))))))"
" #f)))"
" 1"
" #f)))))))"
"(let-values() 1))"
"(if(unsafe-fx< index_1 3)"
"(let-values()"
"(let-values(((ok?_2 _21_0 ids22_0 rhs23_0 body24_0)"
"(let-values(((s_71) e_40))"
"(let-values(((orig-s_3) s_71))"
"(let-values(((_21_1"
" ids22_1"
" rhs23_1"
" body24_1)"
"(let-values(((s_193)"
"(if(1/syntax?"
" s_71)"
"(syntax-e$2"
" s_71)"
" s_71)))"
"(if(pair? s_193)"
"(let-values(((_25_0)"
"(let-values(((s_194)"
"(car"
" s_193)))"
" s_194))"
"((ids26_0"
" rhs27_0"
" body28_0)"
"(let-values(((s_195)"
"(cdr"
" s_193)))"
"(let-values(((s_28)"
"(if(1/syntax?"
" s_195)"
"(syntax-e$2"
" s_195)"
" s_195)))"
"(if(pair?"
" s_28)"
"(let-values(((ids29_0"
" rhs30_0)"
"(let-values(((s_196)"
"(car"
" s_28)))"
"(let-values(((s_149)"
"(if(1/syntax?"
" s_196)"
"(syntax-e$2"
" s_196)"
" s_196)))"
"(let-values(((flat-s_1)"
"(to-syntax-list.1$1"
" s_149)))"
"(if(not"
" flat-s_1)"
"(let-values()"
"((lambda(false_2"
" str_8"
" e_43)"
"(error"
" str_8))"
" #f"
"                                                                                                                                                 \"bad syntax\""
" orig-s_3))"
"(let-values()"
"(let-values(((ids_7"
" rhs_4)"
"(let-values(((lst_27)"
" flat-s_1))"
"(begin"
"(check-list"
" lst_27)"
"((letrec-values(((for-loop_164)"
"(lambda(ids_8"
" rhs_5"
" lst_165)"
"(if(pair?"
" lst_165)"
"(let-values(((s_197)"
"(unsafe-car"
" lst_165))"
"((rest_88)"
"(unsafe-cdr"
" lst_165)))"
"(let-values(((ids_9"
" rhs_6)"
"(let-values(((ids_10)"
" ids_8)"
"((rhs_7)"
" rhs_5))"
"(let-values(((ids_11"
" rhs_8)"
"(let-values()"
"(let-values(((ids36_0"
" rhs37_0)"
"(let-values()"
"(let-values(((s_198)"
"(if(1/syntax?"
" s_197)"
"(syntax-e$2"
" s_197)"
" s_197)))"
"(if(pair?"
" s_198)"
"(let-values(((ids32_0)"
"(let-values(((s_48)"
"(car"
" s_198)))"
" s_48))"
"((rhs33_0)"
"(let-values(((s_72)"
"(cdr"
" s_198)))"
"(let-values(((s_199)"
"(if(1/syntax?"
" s_72)"
"(syntax-e$2"
" s_72)"
" s_72)))"
"(if(pair?"
" s_199)"
"(let-values(((rhs34_0)"
"(let-values(((s_200)"
"(car"
" s_199)))"
" s_200))"
"(()"
"(let-values(((s_201)"
"(cdr"
" s_199)))"
"(let-values(((s_202)"
"(if(1/syntax?"
" s_201)"
"(syntax-e$2"
" s_201)"
" s_201)))"
"(if(null?"
" s_202)"
"(values)"
"((lambda(false_3"
" str_9"
" e_44)"
"(error"
" str_9))"
" #f"
"                                                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_3))))))"
"(values"
" rhs34_0))"
"((lambda(false_4"
" str_10"
" e_45)"
"(error"
" str_10))"
" #f"
"                                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_3))))))"
"(values"
" ids32_0"
" rhs33_0))"
"((lambda(false_5"
" str_11"
" e_46)"
"(error"
" str_11))"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_3))))))"
"(values"
"(cons"
" ids36_0"
" ids_10)"
"(cons"
" rhs37_0"
" rhs_7))))))"
"(values"
" ids_11"
" rhs_8)))))"
"(if(not"
" #f)"
"(for-loop_164"
" ids_9"
" rhs_6"
" rest_88)"
"(values"
" ids_9"
" rhs_6))))"
"(values"
" ids_8"
" rhs_5)))))"
" for-loop_164)"
" null"
" null"
" lst_27)))))"
"(values"
"(reverse$1"
" ids_7)"
"(reverse$1"
" rhs_4)))))))))"
"((body31_0)"
"(let-values(((s_203)"
"(cdr"
" s_28)))"
"(let-values(((s_34)"
"(if(1/syntax?"
" s_203)"
"(syntax-e$2"
" s_203)"
" s_203)))"
"(if(pair?"
" s_34)"
"(let-values(((body35_0)"
"(let-values(((s_204)"
"(car"
" s_34)))"
" s_204))"
"(()"
"(let-values(((s_156)"
"(cdr"
" s_34)))"
"(let-values(((s_205)"
"(if(1/syntax?"
" s_156)"
"(syntax-e$2"
" s_156)"
" s_156)))"
"(if(null?"
" s_205)"
"(values)"
"((lambda(false_6"
" str_12"
" e_47)"
"(error"
" str_12))"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_3))))))"
"(values"
" body35_0))"
"((lambda(false_7"
" str_13"
" e_48)"
"(error"
" str_13))"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_3))))))"
"(values"
" ids29_0"
" rhs30_0"
" body31_0))"
"((lambda(false_8"
" str_14"
" e_49)"
"(error"
" str_14))"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_3))))))"
"(values"
" _25_0"
" ids26_0"
" rhs27_0"
" body28_0))"
"((lambda(false_9"
" str_15"
" e_50)"
"(error str_15))"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_3)))))"
"(values"
" #t"
" _21_1"
" ids22_1"
" rhs23_1"
" body24_1))))))"
"(if(not"
"(let-values(((lst_166) ids22_0)"
"((lst_167) rhs23_0))"
"(begin"
"(check-list lst_166)"
"(check-list lst_167)"
"((letrec-values(((for-loop_165)"
"(lambda(result_114"
" lst_168"
" lst_169)"
"(if(if(pair? lst_168)"
"(pair? lst_169)"
" #f)"
"(let-values(((ids_12)"
"(unsafe-car"
" lst_168))"
"((rest_89)"
"(unsafe-cdr"
" lst_168))"
"((rhs_9)"
"(unsafe-car"
" lst_169))"
"((rest_90)"
"(unsafe-cdr"
" lst_169)))"
"(let-values(((result_115)"
"(let-values()"
"(let-values(((result_116)"
"(let-values()"
"(let-values()"
"(effects?_0"
" rhs_9"
"(correlated-length"
" ids_12)"
" locals_2)))))"
"(values"
" result_116)))))"
"(if(if(not"
"((lambda x_95"
" result_115)"
" ids_12))"
"(if(not"
"((lambda x_96"
" result_115)"
" rhs_9))"
"(not #f)"
" #f)"
" #f)"
"(for-loop_165"
" result_115"
" rest_89"
" rest_90)"
" result_115)))"
" result_114))))"
" for-loop_165)"
" #f"
" lst_166"
" lst_167))))"
"(loop_138"
" body24_0"
"(add-binding-info locals_2 ids22_0 rhs23_0))"
" #f)))"
"(if(unsafe-fx< index_1 4)"
"(let-values()"
"(let-values(((ok?_3 _38_0 e39_0)"
"(let-values(((s_206) e_40))"
"(let-values(((orig-s_4) s_206))"
"(let-values(((_38_1 e39_1)"
"(let-values(((s_207)"
"(if(1/syntax?"
" s_206)"
"(syntax-e$2"
" s_206)"
" s_206)))"
"(if(pair? s_207)"
"(let-values(((_40_0)"
"(let-values(((s_208)"
"(car"
" s_207)))"
" s_208))"
"((e41_0)"
"(let-values(((s_209)"
"(cdr"
" s_207)))"
"(let-values(((s_210)"
"(if(1/syntax?"
" s_209)"
"(syntax-e$2"
" s_209)"
" s_209)))"
"(let-values(((flat-s_2)"
"(to-syntax-list.1$1"
" s_210)))"
"(if(not"
" flat-s_2)"
"(let-values()"
"((lambda(false_10"
" str_16"
" e_51)"
"(error"
" str_16))"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_4))"
"(let-values()"
" flat-s_2)))))))"
"(values"
" _40_0"
" e41_0))"
"((lambda(false_11"
" str_17"
" e_52)"
"(error str_17))"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_4)))))"
"(values #t _38_1 e39_1))))))"
"(if(let-values(((lst_170) e39_0))"
"(begin"
"(check-list lst_170)"
"((letrec-values(((for-loop_166)"
"(lambda(result_117"
" lst_52)"
"(if(pair? lst_52)"
"(let-values(((e_53)"
"(unsafe-car"
" lst_52))"
"((rest_57)"
"(unsafe-cdr"
" lst_52)))"
"(let-values(((result_37)"
"(let-values()"
"(let-values(((result_118)"
"(let-values()"
"(let-values()"
"(not"
"(effects?_0"
" e_53"
" 1"
" locals_2))))))"
"(values"
" result_118)))))"
"(if(if(not"
"((lambda x_97"
"(not"
" result_37))"
" e_53))"
"(not #f)"
" #f)"
"(for-loop_166"
" result_37"
" rest_57)"
" result_37)))"
" result_117))))"
" for-loop_166)"
" #t"
" lst_170)))"
"(length e39_0)"
" #f)))"
"(let-values()"
"(let-values(((ok?_4 _42_0 e43_0)"
"(let-values(((s_39) e_40))"
"(let-values(((orig-s_5) s_39))"
"(let-values(((_42_1 e43_1)"
"(let-values(((s_67)"
"(if(1/syntax?"
" s_39)"
"(syntax-e$2"
" s_39)"
" s_39)))"
"(if(pair? s_67)"
"(let-values(((_44_0)"
"(let-values(((s_211)"
"(car"
" s_67)))"
" s_211))"
"((e45_0)"
"(let-values(((s_68)"
"(cdr"
" s_67)))"
"(let-values(((s_212)"
"(if(1/syntax?"
" s_68)"
"(syntax-e$2"
" s_68)"
" s_68)))"
"(let-values(((flat-s_3)"
"(to-syntax-list.1$1"
" s_212)))"
"(if(not"
" flat-s_3)"
"(let-values()"
"((lambda(false_12"
" str_18"
" e_54)"
"(error"
" str_18))"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_5))"
"(let-values()"
" flat-s_3)))))))"
"(values"
" _44_0"
" e45_0))"
"((lambda(false_13"
" str_19"
" e_55)"
"(error str_19))"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_5)))))"
"(values #t _42_1 e43_1))))))"
"(if(let-values(((lst_171) e43_0))"
"(begin"
"(check-list lst_171)"
"((letrec-values(((for-loop_156)"
"(lambda(result_119"
" lst_172)"
"(if(pair? lst_172)"
"(let-values(((e_56)"
"(unsafe-car"
" lst_172))"
"((rest_91)"
"(unsafe-cdr"
" lst_172)))"
"(let-values(((result_120)"
"(let-values()"
"(let-values(((result_121)"
"(let-values()"
"(let-values()"
"(not"
"(effects?_0"
" e_56"
" 1"
" locals_2))))))"
"(values"
" result_121)))))"
"(if(if(not"
"((lambda x_98"
"(not"
" result_120))"
" e_56))"
"(not #f)"
" #f)"
"(for-loop_156"
" result_120"
" rest_91)"
" result_120)))"
" result_119))))"
" for-loop_156)"
" #t"
" lst_171)))"
" 1"
" #f))))))"
"(if(unsafe-fx< index_1 8)"
"(if(unsafe-fx< index_1 6)"
"(let-values()"
"(let-values(((ok?_5 _46_0 e47_0)"
"(let-values(((s_213) e_40))"
"(let-values(((orig-s_6) s_213))"
"(let-values(((_46_1 e47_1)"
"(let-values(((s_97)"
"(if(1/syntax?"
" s_213)"
"(syntax-e$2"
" s_213)"
" s_213)))"
"(if(pair? s_97)"
"(let-values(((_48_0)"
"(let-values(((s_154)"
"(car"
" s_97)))"
" s_154))"
"((e49_0)"
"(let-values(((s_98)"
"(cdr"
" s_97)))"
"(let-values(((s_214)"
"(if(1/syntax?"
" s_98)"
"(syntax-e$2"
" s_98)"
" s_98)))"
"(let-values(((flat-s_4)"
"(to-syntax-list.1$1"
" s_214)))"
"(if(not"
" flat-s_4)"
"(let-values()"
"((lambda(false_14"
" str_20"
" e_57)"
"(error"
" str_20))"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_6))"
"(let-values()"
" flat-s_4)))))))"
"(values"
" _48_0"
" e49_0))"
"((lambda(false_15"
" str_21"
" e_58)"
"(error str_21))"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_6)))))"
"(values #t _46_1 e47_1))))))"
"((letrec-values(((bloop_0)"
"(lambda(es_1)"
"(if(null? es_1)"
"(let-values() #f)"
"(if(null?(cdr es_1))"
"(let-values()"
"(loop_138"
"(car es_1)"
" locals_2))"
"(let-values()"
"(if(not"
"(effects?_0"
"(car es_1)"
" #f"
" locals_2))"
"(bloop_0(cdr es_1))"
" #f)))))))"
" bloop_0)"
" e47_0)))"
"(if(unsafe-fx< index_1 7)"
"(let-values()"
"(let-values(((ok?_6 _50_0 e051_0 e52_0)"
"(let-values(((s_188) e_40))"
"(let-values(((orig-s_7) s_188))"
"(let-values(((_50_1 e051_1 e52_1)"
"(let-values(((s_115)"
"(if(1/syntax?"
" s_188)"
"(syntax-e$2"
" s_188)"
" s_188)))"
"(if(pair? s_115)"
"(let-values(((_53_0)"
"(let-values(((s_215)"
"(car"
" s_115)))"
" s_215))"
"((e054_0"
" e55_0)"
"(let-values(((s_216)"
"(cdr"
" s_115)))"
"(let-values(((s_217)"
"(if(1/syntax?"
" s_216)"
"(syntax-e$2"
" s_216)"
" s_216)))"
"(if(pair?"
" s_217)"
"(let-values(((e056_0)"
"(let-values(((s_218)"
"(car"
" s_217)))"
" s_218))"
"((e57_0)"
"(let-values(((s_219)"
"(cdr"
" s_217)))"
"(let-values(((s_220)"
"(if(1/syntax?"
" s_219)"
"(syntax-e$2"
" s_219)"
" s_219)))"
"(let-values(((flat-s_5)"
"(to-syntax-list.1$1"
" s_220)))"
"(if(not"
" flat-s_5)"
"(let-values()"
"((lambda(false_16"
" str_22"
" e_59)"
"(error"
" str_22))"
" #f"
"                                                                                                                                                   \"bad syntax\""
" orig-s_7))"
"(let-values()"
" flat-s_5)))))))"
"(values"
" e056_0"
" e57_0))"
"((lambda(false_17"
" str_23"
" e_60)"
"(error"
" str_23))"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_7))))))"
"(values"
" _53_0"
" e054_0"
" e55_0))"
"((lambda(false_18"
" str_24"
" e_61)"
"(error str_24))"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_7)))))"
"(values"
" #t"
" _50_1"
" e051_1"
" e52_1))))))"
"(if(let-values(((lst_173) e52_0))"
"(begin"
"(check-list lst_173)"
"((letrec-values(((for-loop_167)"
"(lambda(result_122"
" lst_174)"
"(if(pair? lst_174)"
"(let-values(((e_62)"
"(unsafe-car"
" lst_174))"
"((rest_92)"
"(unsafe-cdr"
" lst_174)))"
"(let-values(((result_123)"
"(let-values()"
"(let-values(((result_124)"
"(let-values()"
"(let-values()"
"(not"
"(effects?_0"
" e_62"
" #f"
" locals_2))))))"
"(values"
" result_124)))))"
"(if(if(not"
"((lambda x_99"
"(not"
" result_123))"
" e_62))"
"(not #f)"
" #f)"
"(for-loop_167"
" result_123"
" rest_92)"
" result_123)))"
" result_122))))"
" for-loop_167)"
" #t"
" lst_173)))"
"(loop_138 e051_0 locals_2)"
" #f)))"
"(let-values()"
"(if(ok-make-struct-type?"
" e_40"
" ready-variable?_0"
" defns_1)"
" 5"
" #f))))"
"(if(unsafe-fx< index_1 9)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_40"
" locals_2"
" 'general-accessor"
" defns_1)"
" 1"
" #f))"
"(if(unsafe-fx< index_1 10)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_40"
" locals_2"
" 'general-mutator"
" defns_1)"
" 1"
" #f))"
"(if(unsafe-fx< index_1 11)"
"(let-values()"
"(if(ok-make-struct-type-property? e_40 defns_1)"
" 3"
" #f))"
"(let-values()"
"(let-values(((ok?_7"
" _58_0"
" id:rator59_0"
" id:arg60_0"
" thn61_0"
" els62_0)"
"(let-values(((s_221) e_40))"
"(if(let-values(((s_222)"
"(if(1/syntax?"
" s_221)"
"(syntax-e$2"
" s_221)"
" s_221)))"
"(if(pair? s_222)"
"(if(let-values(((s_223)"
"(car"
" s_222)))"
" #t)"
"(let-values(((s_224)"
"(cdr"
" s_222)))"
"(let-values(((s_225)"
"(if(1/syntax?"
" s_224)"
"(syntax-e$2"
" s_224)"
" s_224)))"
"(if(pair? s_225)"
"(if(let-values(((s_226)"
"(car"
" s_225)))"
"(let-values(((s_227)"
"(if(1/syntax?"
" s_226)"
"(syntax-e$2"
" s_226)"
" s_226)))"
"(if(pair?"
" s_227)"
"(if(let-values(((s_228)"
"(car"
" s_227)))"
"(let-values(((or-part_207)"
"(if(1/syntax?"
" s_228)"
"(symbol?"
"(syntax-e$2"
" s_228))"
" #f)))"
"(if or-part_207"
" or-part_207"
"(symbol?"
" s_228))))"
"(let-values(((s_229)"
"(cdr"
" s_227)))"
"(let-values(((s_230)"
"(if(1/syntax?"
" s_229)"
"(syntax-e$2"
" s_229)"
" s_229)))"
"(if(pair?"
" s_230)"
"(if(let-values(((s_231)"
"(car"
" s_230)))"
"(let-values(((or-part_208)"
"(if(1/syntax?"
" s_231)"
"(symbol?"
"(syntax-e$2"
" s_231))"
" #f)))"
"(if or-part_208"
" or-part_208"
"(symbol?"
" s_231))))"
"(let-values(((s_232)"
"(cdr"
" s_230)))"
"(let-values(((s_233)"
"(if(1/syntax?"
" s_232)"
"(syntax-e$2"
" s_232)"
" s_232)))"
"(null?"
" s_233)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
"(let-values(((s_234)"
"(cdr"
" s_225)))"
"(let-values(((s_235)"
"(if(1/syntax?"
" s_234)"
"(syntax-e$2"
" s_234)"
" s_234)))"
"(if(pair?"
" s_235)"
"(if(let-values(((s_236)"
"(car"
" s_235)))"
" #t)"
"(let-values(((s_237)"
"(cdr"
" s_235)))"
"(let-values(((s_238)"
"(if(1/syntax?"
" s_237)"
"(syntax-e$2"
" s_237)"
" s_237)))"
"(if(pair?"
" s_238)"
"(if(let-values(((s_239)"
"(car"
" s_238)))"
" #t)"
"(let-values(((s_240)"
"(cdr"
" s_238)))"
"(let-values(((s_241)"
"(if(1/syntax?"
" s_240)"
"(syntax-e$2"
" s_240)"
" s_240)))"
"(null?"
" s_241)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((_58_1"
" id:rator59_1"
" id:arg60_1"
" thn61_1"
" els62_1)"
"(let-values(((s_242)"
"(if(1/syntax?"
" s_221)"
"(syntax-e$2"
" s_221)"
" s_221)))"
"(let-values(((_63_0)"
"(let-values(((s_243)"
"(car"
" s_242)))"
" s_243))"
"((id:rator64_0"
" id:arg65_0"
" thn66_0"
" els67_0)"
"(let-values(((s_244)"
"(cdr"
" s_242)))"
"(let-values(((s_245)"
"(if(1/syntax?"
" s_244)"
"(syntax-e$2"
" s_244)"
" s_244)))"
"(let-values(((id:rator68_0"
" id:arg69_0)"
"(let-values(((s_246)"
"(car"
" s_245)))"
"(let-values(((s_247)"
"(if(1/syntax?"
" s_246)"
"(syntax-e$2"
" s_246)"
" s_246)))"
"(let-values(((id:rator72_0)"
"(let-values(((s_248)"
"(car"
" s_247)))"
" s_248))"
"((id:arg73_0)"
"(let-values(((s_249)"
"(cdr"
" s_247)))"
"(let-values(((s_250)"
"(if(1/syntax?"
" s_249)"
"(syntax-e$2"
" s_249)"
" s_249)))"
"(let-values(((id:arg74_0)"
"(let-values(((s_251)"
"(car"
" s_250)))"
" s_251))"
"(()"
"(let-values(((s_252)"
"(cdr"
" s_250)))"
"(let-values(((s_253)"
"(if(1/syntax?"
" s_252)"
"(syntax-e$2"
" s_252)"
" s_252)))"
"(values)))))"
"(values"
" id:arg74_0))))))"
"(values"
" id:rator72_0"
" id:arg73_0)))))"
"((thn70_0"
" els71_0)"
"(let-values(((s_254)"
"(cdr"
" s_245)))"
"(let-values(((s_255)"
"(if(1/syntax?"
" s_254)"
"(syntax-e$2"
" s_254)"
" s_254)))"
"(let-values(((thn75_0)"
"(let-values(((s_256)"
"(car"
" s_255)))"
" s_256))"
"((els76_0)"
"(let-values(((s_257)"
"(cdr"
" s_255)))"
"(let-values(((s_258)"
"(if(1/syntax?"
" s_257)"
"(syntax-e$2"
" s_257)"
" s_257)))"
"(let-values(((els77_0)"
"(let-values(((s_259)"
"(car"
" s_258)))"
" s_259))"
"(()"
"(let-values(((s_260)"
"(cdr"
" s_258)))"
"(let-values(((s_261)"
"(if(1/syntax?"
" s_260)"
"(syntax-e$2"
" s_260)"
" s_260)))"
"(values)))))"
"(values"
" els77_0))))))"
"(values"
" thn75_0"
" els76_0))))))"
"(values"
" id:rator68_0"
" id:arg69_0"
" thn70_0"
" els71_0))))))"
"(values"
" _63_0"
" id:rator64_0"
" id:arg65_0"
" thn66_0"
" els67_0)))))"
"(values"
" #t"
" _58_1"
" id:rator59_1"
" id:arg60_1"
" thn61_1"
" els62_1)))"
"(values #f #f #f #f #f #f)))))"
"(if ok?_7"
"(let-values()"
"(let-values(((c2_2)"
"(let-values(((or-part_209)"
"(hash-ref"
" locals_2"
" id:rator59_0"
" #f)))"
"(if or-part_209"
" or-part_209"
"(lookup-defn"
" defns_1"
" id:rator59_0)))))"
"(if c2_2"
"((lambda(d_25)"
"(if(known-predicate? d_25)"
"(if(not"
"(effects?_0"
" thn61_0"
" expected-results_0"
"(hash-set"
" locals_2"
" id:arg60_0"
"(known-satisfies7.1"
"(known-predicate-key"
" d_25)))))"
"(loop_138 els62_0 locals_2)"
" #f)"
" #f))"
" c2_2)"
"(let-values() #f))))"
"(let-values()"
"(let-values(((ok?_8"
" _78_0"
" tst79_0"
" thn80_0"
" els81_0)"
"(let-values(((s_262) e_40))"
"(if(let-values(((s_263)"
"(if(1/syntax?"
" s_262)"
"(syntax-e$2"
" s_262)"
" s_262)))"
"(if(pair? s_263)"
"(if(let-values(((s_264)"
"(car"
" s_263)))"
" #t)"
"(let-values(((s_265)"
"(cdr"
" s_263)))"
"(let-values(((s_266)"
"(if(1/syntax?"
" s_265)"
"(syntax-e$2"
" s_265)"
" s_265)))"
"(if(pair?"
" s_266)"
"(if(let-values(((s_267)"
"(car"
" s_266)))"
" #t)"
"(let-values(((s_268)"
"(cdr"
" s_266)))"
"(let-values(((s_269)"
"(if(1/syntax?"
" s_268)"
"(syntax-e$2"
" s_268)"
" s_268)))"
"(if(pair?"
" s_269)"
"(if(let-values(((s_270)"
"(car"
" s_269)))"
" #t)"
"(let-values(((s_271)"
"(cdr"
" s_269)))"
"(let-values(((s_272)"
"(if(1/syntax?"
" s_271)"
"(syntax-e$2"
" s_271)"
" s_271)))"
"(if(pair?"
" s_272)"
"(if(let-values(((s_273)"
"(car"
" s_272)))"
" #t)"
"(let-values(((s_274)"
"(cdr"
" s_272)))"
"(let-values(((s_275)"
"(if(1/syntax?"
" s_274)"
"(syntax-e$2"
" s_274)"
" s_274)))"
"(null?"
" s_275)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((_78_1"
" tst79_1"
" thn80_1"
" els81_1)"
"(let-values(((s_276)"
"(if(1/syntax?"
" s_262)"
"(syntax-e$2"
" s_262)"
" s_262)))"
"(let-values(((_82_0)"
"(let-values(((s_277)"
"(car"
" s_276)))"
" s_277))"
"((tst83_0"
" thn84_0"
" els85_0)"
"(let-values(((s_278)"
"(cdr"
" s_276)))"
"(let-values(((s_279)"
"(if(1/syntax?"
" s_278)"
"(syntax-e$2"
" s_278)"
" s_278)))"
"(let-values(((tst86_0)"
"(let-values(((s_280)"
"(car"
" s_279)))"
" s_280))"
"((thn87_0"
" els88_0)"
"(let-values(((s_281)"
"(cdr"
" s_279)))"
"(let-values(((s_282)"
"(if(1/syntax?"
" s_281)"
"(syntax-e$2"
" s_281)"
" s_281)))"
"(let-values(((thn89_0)"
"(let-values(((s_283)"
"(car"
" s_282)))"
" s_283))"
"((els90_0)"
"(let-values(((s_284)"
"(cdr"
" s_282)))"
"(let-values(((s_285)"
"(if(1/syntax?"
" s_284)"
"(syntax-e$2"
" s_284)"
" s_284)))"
"(let-values(((els91_0)"
"(let-values(((s_286)"
"(car"
" s_285)))"
" s_286))"
"(()"
"(let-values(((s_287)"
"(cdr"
" s_285)))"
"(let-values(((s_288)"
"(if(1/syntax?"
" s_287)"
"(syntax-e$2"
" s_287)"
" s_287)))"
"(values)))))"
"(values"
" els91_0))))))"
"(values"
" thn89_0"
" els90_0))))))"
"(values"
" tst86_0"
" thn87_0"
" els88_0))))))"
"(values"
" _82_0"
" tst83_0"
" thn84_0"
" els85_0)))))"
"(values"
" #t"
" _78_1"
" tst79_1"
" thn80_1"
" els81_1)))"
"(values #f #f #f #f #f)))))"
"(if ok?_8"
"(if(not(effects?_0 tst79_0 1 locals_2))"
"(if(not"
"(effects?_0"
" thn80_0"
" expected-results_0"
" locals_2))"
"(loop_138 els81_0 locals_2)"
" #f)"
" #f)"
" #f))))))))))))))))"
" loop_138)"
" e_38"
" locals_0)))"
"(not"
"(if actual-results_0"
"(let-values(((or-part_210)(not expected-results_0)))"
"(if or-part_210 or-part_210(= actual-results_0 expected-results_0)))"
" #f))))))))))))"
"(define-values"
"(satisfies?)"
"(lambda(e_63 key_56 defns_2 locals_3)"
"(let-values(((d_33)"
"(let-values(((or-part_211)(hash-ref locals_3 e_63 #f)))"
"(if or-part_211 or-part_211(lookup-defn defns_2 e_63)))))"
"(if d_33(if(known-satisfies? d_33)(eq? key_56(known-satisfies-predicate-key d_33)) #f) #f))))"
"(define-values"
"(add-binding-info)"
"(lambda(locals_4 idss_0 rhss_0)"
"(let-values(((lst_175) idss_0)((lst_176) rhss_0))"
"(begin"
"(check-list lst_175)"
"(check-list lst_176)"
"((letrec-values(((for-loop_168)"
"(lambda(locals_5 lst_177 lst_178)"
"(if(if(pair? lst_177)(pair? lst_178) #f)"
"(let-values(((ids_13)(unsafe-car lst_177))"
"((rest_93)(unsafe-cdr lst_177))"
"((rhs_10)(unsafe-car lst_178))"
"((rest_94)(unsafe-cdr lst_178)))"
"(let-values(((locals_6)"
"(let-values(((locals_7) locals_5))"
"(let-values(((locals_8)"
"(let-values()"
"((letrec-values(((loop_139)"
"(lambda(rhs_11)"
"(let-values(((tmp_24)"
"(if(pair?"
"(correlated-e"
" rhs_11))"
"(correlated-e"
"(car"
"(correlated-e"
" rhs_11)))"
" #f)))"
"(if(equal?"
" tmp_24"
" 'make-struct-type)"
"(let-values()"
"(let-values(((field-count_0)"
"(extract-struct-field-count-lower-bound"
" rhs_11)))"
"(let-values(((lst_179)"
"(correlated->list"
" ids_13))"
"((lst_180)"
" '(struct-type"
" constructor"
" predicate"
" general-accessor"
" general-mutator)))"
"(begin"
"(check-list lst_179)"
"(check-list lst_180)"
"((letrec-values(((for-loop_169)"
"(lambda(locals_9"
" lst_181"
" lst_182)"
"(if(if(pair?"
" lst_181)"
"(pair?"
" lst_182)"
" #f)"
"(let-values(((id_28)"
"(unsafe-car"
" lst_181))"
"((rest_95)"
"(unsafe-cdr"
" lst_181))"
"((type_0)"
"(unsafe-car"
" lst_182))"
"((rest_96)"
"(unsafe-cdr"
" lst_182)))"
"(let-values(((locals_10)"
"(let-values(((locals_11)"
" locals_9))"
"(let-values(((locals_12)"
"(let-values()"
"(hash-set"
" locals_11"
"(correlated-e"
" id_28)"
"(known-struct-op8.1"
" type_0"
" field-count_0)))))"
"(values"
" locals_12)))))"
"(if(not"
" #f)"
"(for-loop_169"
" locals_10"
" rest_95"
" rest_96)"
" locals_10)))"
" locals_9))))"
" for-loop_169)"
" locals_7"
" lst_179"
" lst_180)))))"
"(if(equal? tmp_24 'let-values)"
"(let-values()"
"(if(null?"
"(correlated-e"
"(correlated-cadr"
" rhs_11)))"
"(loop_139"
"(caddr"
"(correlated->list"
" rhs_11)))"
"(loop_139 #f)))"
"(let-values()"
"(let-values(((lst_183)"
"(correlated->list"
" ids_13)))"
"(begin"
"(check-list lst_183)"
"((letrec-values(((for-loop_170)"
"(lambda(locals_13"
" lst_184)"
"(if(pair?"
" lst_184)"
"(let-values(((id_29)"
"(unsafe-car"
" lst_184))"
"((rest_97)"
"(unsafe-cdr"
" lst_184)))"
"(let-values(((locals_14)"
"(let-values(((locals_15)"
" locals_13))"
"(let-values(((locals_16)"
"(let-values()"
"(hash-set"
" locals_15"
"(correlated-e"
" id_29)"
" #t))))"
"(values"
" locals_16)))))"
"(if(not"
" #f)"
"(for-loop_170"
" locals_14"
" rest_97)"
" locals_14)))"
" locals_13))))"
" for-loop_170)"
" locals_7"
" lst_183))))))))))"
" loop_139)"
" rhs_10))))"
"(values locals_8)))))"
"(if(not #f)(for-loop_168 locals_6 rest_93 rest_94) locals_6)))"
" locals_5))))"
" for-loop_168)"
" locals_4"
" lst_175"
" lst_176)))))"
"(define-values"
"(ok-make-struct-type-property?)"
"(lambda(e_64 defns_3)"
"(let-values(((l_57)(correlated->list e_64)))"
"(if(<= 2(length l_57) 5)"
"(let-values(((lst_185)(cdr l_57))"
"((lst_186)"
"(list"
"(lambda(v_169)(quoted? symbol? v_169))"
"(lambda(v_170)(is-lambda? v_170 2 defns_3))"
"(lambda(v_171)(ok-make-struct-type-property-super? v_171 defns_3))"
"(lambda(v_172)"
"(let-values(((temp93_1) 1)((defns94_0) defns_3))"
"(any-side-effects?9.1 defns94_0 #t #f #f #f #f v_172 temp93_1))))))"
"(begin"
"(check-list lst_185)"
"(check-list lst_186)"
"((letrec-values(((for-loop_171)"
"(lambda(result_125 lst_187 lst_188)"
"(if(if(pair? lst_187)(pair? lst_188) #f)"
"(let-values(((arg_0)(unsafe-car lst_187))"
"((rest_98)(unsafe-cdr lst_187))"
"((pred_1)(unsafe-car lst_188))"
"((rest_99)(unsafe-cdr lst_188)))"
"(let-values(((result_126)"
"(let-values()"
"(let-values(((result_127)"
"(let-values()(let-values()(pred_1 arg_0)))))"
"(values result_127)))))"
"(if(if(not((lambda x_100(not result_126)) arg_0))"
"(if(not((lambda x_101(not result_126)) pred_1))(not #f) #f)"
" #f)"
"(for-loop_171 result_126 rest_98 rest_99)"
" result_126)))"
" result_125))))"
" for-loop_171)"
" #t"
" lst_185"
" lst_186)))"
" #f))))"
"(define-values"
"(ok-make-struct-type-property-super?)"
"(lambda(v_173 defns_4)"
"(let-values(((or-part_212)(quoted? null? v_173)))"
"(if or-part_212"
" or-part_212"
"(let-values(((or-part_213)(eq? 'null(correlated-e v_173))))"
"(if or-part_213"
" or-part_213"
"(if(pair?(correlated-e v_173))"
"(if(eq?(correlated-e(car(correlated-e v_173))) 'list)"
"(if(let-values(((lst_189)(cdr(correlated->list v_173))))"
"(begin"
"(check-list lst_189)"
"((letrec-values(((for-loop_135)"
"(lambda(result_128 lst_190)"
"(if(pair? lst_190)"
"(let-values(((prop+val_0)(unsafe-car lst_190))"
"((rest_100)(unsafe-cdr lst_190)))"
"(let-values(((result_129)"
"(let-values()"
"(let-values(((result_130)"
"(let-values()"
"(let-values()"
"(if(="
"(correlated-length prop+val_0)"
" 3)"
"(let-values(((prop+val_1)"
"(correlated->list"
" prop+val_0)))"
"(if(eq?"
" 'cons"
"(correlated-e"
"(car prop+val_1)))"
"(if(let-values(((or-part_138)"
"(memq"
"(correlated-e"
"(list-ref"
" prop+val_1"
" 1))"
" '(prop:procedure"
" prop:equal+hash"
" prop:custom-write))))"
"(if or-part_138"
" or-part_138"
"(known-property?"
"(lookup-defn"
" defns_4"
"(correlated-e"
"(list-ref"
" prop+val_1"
" 1))))))"
"(not"
"(let-values(((temp95_0)"
"(list-ref"
" prop+val_1"
" 2))"
"((temp96_1) 1)"
"((defns97_0)"
" defns_4))"
"(any-side-effects?9.1"
" defns97_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp95_0"
" temp96_1)))"
" #f)"
" #f))"
" #f)))))"
"(values result_130)))))"
"(if(if(not((lambda x_102(not result_129)) prop+val_0))"
"(not #f)"
" #f)"
"(for-loop_135 result_129 rest_100)"
" result_129)))"
" result_128))))"
" for-loop_135)"
" #t"
" lst_189)))"
"(="
"(sub1(correlated-length v_173))"
"(set-count"
"(let-values(((lst_191)(cdr(correlated->list v_173))))"
"(begin"
"(check-list lst_191)"
"((letrec-values(((for-loop_172)"
"(lambda(table_135 lst_192)"
"(if(pair? lst_192)"
"(let-values(((prop+val_2)(unsafe-car lst_192))"
"((rest_101)(unsafe-cdr lst_192)))"
"(let-values(((table_136)"
"(let-values(((table_137) table_135))"
"(let-values(((table_138)"
"(let-values()"
"(let-values(((key_57 val_46)"
"(let-values()"
"(values"
"(let-values()"
"(correlated-e"
"(list-ref"
"(correlated->list"
" prop+val_2)"
" 1)))"
" #t))))"
"(hash-set table_137 key_57 val_46)))))"
"(values table_138)))))"
"(if(not #f)(for-loop_172 table_136 rest_101) table_136)))"
" table_135))))"
" for-loop_172)"
" '#hash()"
" lst_191)))))"
" #f)"
" #f)"
" #f)))))))"
"(define-values"
"(ok-make-struct-type?)"
"(lambda(e_65 ready-variable?_1 defns_5)"
"(let-values(((l_58)(correlated->list e_65)))"
"(let-values(((init-field-count-expr_0)(if(>(length l_58) 3)(list-ref l_58 3) #f)))"
"(let-values(((auto-field-count-expr_0)(if(>(length l_58) 4)(list-ref l_58 4) #f)))"
"(let-values(((num-fields_0)"
"(maybe+"
"(field-count-expr-to-field-count init-field-count-expr_0)"
"(field-count-expr-to-field-count auto-field-count-expr_0))))"
"(let-values(((immutables-expr_0)"
"(let-values(((or-part_214)(if(>(length l_58) 9)(list-ref l_58 9) #f)))"
"(if or-part_214 or-part_214 'null))))"
"(let-values(((super-expr_0)(if(>(length l_58) 2)(list-ref l_58 2) #f)))"
"(if(>=(length l_58) 5)"
"(if(<=(length l_58) 12)"
"(let-values(((lst_193)(cdr l_58))"
"((lst_194)"
"(list"
"(lambda(v_174)(quoted? symbol? v_174))"
"(lambda(v_175)(super-ok? v_175 defns_5))"
"(lambda(v_176)(field-count-expr-to-field-count v_176))"
"(lambda(v_177)(field-count-expr-to-field-count v_177))"
"(lambda(v_178)"
"(not"
"(let-values(((temp99_0) 1)"
"((ready-variable?100_0) ready-variable?_1)"
"((defns101_0) defns_5))"
"(any-side-effects?9.1"
" defns101_0"
" #t"
" #f"
" #f"
" ready-variable?100_0"
" #t"
" v_178"
" temp99_0))))"
"(lambda(v_179)"
"(known-good-struct-properties? v_179 immutables-expr_0 super-expr_0 defns_5))"
"(lambda(v_180)(inspector-or-false? v_180))"
"(lambda(v_181)(procedure-spec? v_181 num-fields_0))"
"(lambda(v_182)(immutables-ok? v_182 init-field-count-expr_0)))))"
"(begin"
"(check-list lst_193)"
"(check-list lst_194)"
"((letrec-values(((for-loop_173)"
"(lambda(result_131 lst_195 lst_196)"
"(if(if(pair? lst_195)(pair? lst_196) #f)"
"(let-values(((arg_1)(unsafe-car lst_195))"
"((rest_102)(unsafe-cdr lst_195))"
"((pred_2)(unsafe-car lst_196))"
"((rest_103)(unsafe-cdr lst_196)))"
"(let-values(((result_132)"
"(let-values()"
"(let-values(((result_133)"
"(let-values()"
"(let-values()(pred_2 arg_1)))))"
"(values result_133)))))"
"(if(if(not((lambda x_103(not result_132)) arg_1))"
"(if(not((lambda x_104(not result_132)) pred_2))(not #f) #f)"
" #f)"
"(for-loop_173 result_132 rest_102 rest_103)"
" result_132)))"
" result_131))))"
" for-loop_173)"
" #t"
" lst_193"
" lst_194)))"
" #f)"
" #f)))))))))"
"(define-values"
"(super-ok?)"
"(lambda(e_66 defns_6)"
"(let-values(((or-part_215)(quoted? false? e_66)))"
"(if or-part_215"
" or-part_215"
"(let-values(((o_0)(lookup-defn defns_6(correlated-e e_66))))"
"(if o_0(if(known-struct-op? o_0)(eq? 'struct-type(known-struct-op-type o_0)) #f) #f))))))"
"(define-values"
"(extract-struct-field-count-lower-bound)"
"(lambda(e_67)"
"(let-values(((l_59)(correlated->list e_67)))"
"(+(field-count-expr-to-field-count(list-ref l_59 3))(field-count-expr-to-field-count(list-ref l_59 4))))))"
"(define-values"
"(quoted?)"
"(lambda(val?_0 v_183)"
"(let-values(((or-part_216)"
"(if(pair?(correlated-e v_183))"
"(if(eq?(correlated-e(car(correlated-e v_183))) 'quote)"
"(val?_0(correlated-e(correlated-cadr v_183)))"
" #f)"
" #f)))"
"(if or-part_216 or-part_216(val?_0(correlated-e v_183))))))"
"(define-values"
"(quoted-value)"
"(lambda(v_184)(if(pair?(correlated-e v_184))(correlated-e(correlated-cadr v_184))(correlated-e v_184))))"
"(define-values(false?)(lambda(v_185)(eq?(correlated-e v_185) #f)))"
"(define-values"
"(field-count-expr-to-field-count)"
"(lambda(v_186)(if(quoted? exact-nonnegative-integer? v_186)(quoted-value v_186) #f)))"
"(define-values"
"(inspector-or-false?)"
"(lambda(v_187)"
"(let-values(((or-part_217)(quoted? false? v_187)))"
"(if or-part_217"
" or-part_217"
"(let-values(((or-part_218)(if(quoted? symbol? v_187)(eq? 'prefab(quoted-value v_187)) #f)))"
"(if or-part_218"
" or-part_218"
"(if(= 1(correlated-length v_187))"
"(eq? 'current-inspector(correlated-e(car(correlated-e v_187))))"
" #f)))))))"
"(define-values"
"(known-good-struct-properties?)"
"(lambda(v_188 immutables-expr_1 super-expr_1 defns_7)"
"(let-values(((or-part_219)(quoted? null? v_188)))"
"(if or-part_219"
" or-part_219"
"(let-values(((or-part_220)(eq? 'null(correlated-e v_188))))"
"(if or-part_220"
" or-part_220"
"(if(pair?(correlated-e v_188))"
"(if(eq?(correlated-e(car(correlated-e v_188))) 'list)"
"(if(let-values(((lst_197)(cdr(correlated->list v_188))))"
"(begin"
"(check-list lst_197)"
"((letrec-values(((for-loop_174)"
"(lambda(result_51 lst_198)"
"(if(pair? lst_198)"
"(let-values(((prop+val_3)(unsafe-car lst_198))"
"((rest_104)(unsafe-cdr lst_198)))"
"(let-values(((result_134)"
"(let-values()"
"(let-values(((result_135)"
"(let-values()"
"(let-values()"
"(if(="
"(correlated-length prop+val_3)"
" 3)"
"(let-values(((prop+val_4)"
"(correlated->list"
" prop+val_3)))"
"(if(eq?"
" 'cons"
"(correlated-e"
"(car prop+val_4)))"
"(known-good-struct-property+value?"
"(list-ref prop+val_4 1)"
"(list-ref prop+val_4 2)"
" immutables-expr_1"
" super-expr_1"
" defns_7)"
" #f))"
" #f)))))"
"(values result_135)))))"
"(if(if(not((lambda x_14(not result_134)) prop+val_3))(not #f) #f)"
"(for-loop_174 result_134 rest_104)"
" result_134)))"
" result_51))))"
" for-loop_174)"
" #t"
" lst_197)))"
"(="
"(sub1(correlated-length v_188))"
"(set-count"
"(let-values(((lst_199)(cdr(correlated->list v_188))))"
"(begin"
"(check-list lst_199)"
"((letrec-values(((for-loop_175)"
"(lambda(table_139 lst_64)"
"(if(pair? lst_64)"
"(let-values(((prop+val_5)(unsafe-car lst_64))"
"((rest_28)(unsafe-cdr lst_64)))"
"(let-values(((table_140)"
"(let-values(((table_141) table_139))"
"(let-values(((table_142)"
"(let-values()"
"(let-values(((key_58 val_47)"
"(let-values()"
"(values"
"(let-values()"
"(correlated-e"
"(list-ref"
"(correlated->list"
" prop+val_5)"
" 1)))"
" #t))))"
"(hash-set table_141 key_58 val_47)))))"
"(values table_142)))))"
"(if(not #f)(for-loop_175 table_140 rest_28) table_140)))"
" table_139))))"
" for-loop_175)"
" '#hash()"
" lst_199)))))"
" #f)"
" #f)"
" #f)))))))"
"(define-values"
"(known-good-struct-property+value?)"
"(lambda(prop-expr_0 val-expr_0 immutables-expr_2 super-expr_2 defns_8)"
"(let-values(((prop-name_0)(correlated-e prop-expr_0)))"
"(let-values(((tmp_25) prop-name_0))"
"(if(equal? tmp_25 'prop:evt)"
"(let-values()"
"(let-values(((or-part_221)(is-lambda? val-expr_0 1 defns_8)))"
"(if or-part_221 or-part_221(immutable-field? val-expr_0 immutables-expr_2))))"
"(if(equal? tmp_25 'prop:procedure)"
"(let-values()"
"(let-values(((or-part_222)(is-lambda? val-expr_0 1 defns_8)))"
"(if or-part_222 or-part_222(immutable-field? val-expr_0 immutables-expr_2))))"
"(if(equal? tmp_25 'prop:custom-write)"
"(let-values()(is-lambda? val-expr_0 3 defns_8))"
"(if(equal? tmp_25 'prop:equal+hash)"
"(let-values()"
"(let-values(((l_60)(correlated->list val-expr_0)))"
"(if(eq? 'list(car l_60))"
"(if(is-lambda?(list-ref l_60 1) 3 defns_8)"
"(if(is-lambda?(list-ref l_60 2) 2 defns_8)(is-lambda?(list-ref l_60 3) 2 defns_8) #f)"
" #f)"
" #f)))"
"(if(if(equal? tmp_25 'prop:method-arity-error) #t(equal? tmp_25 'prop:incomplete-arity))"
"(let-values()"
"(not"
"(let-values(((temp103_0) 1)((defns104_0) defns_8))"
"(any-side-effects?9.1 defns104_0 #t #f #f #f #f val-expr_0 temp103_0))))"
"(if(equal? tmp_25 'prop:impersonator-of)"
"(let-values()(is-lambda? val-expr_0 1 defns_8))"
"(if(equal? tmp_25 'prop:arity-string)"
"(let-values()(is-lambda? val-expr_0 1 defns_8))"
"(if(equal? tmp_25 'prop:checked-procedure)"
"(let-values()(if(quoted? false? super-expr_2)(immutable-field? 1 immutables-expr_2) #f))"
"(let-values()"
"(let-values(((o_1)(lookup-defn defns_8 prop-name_0)))"
"(if o_1"
"(if(known-property? o_1)"
"(not"
"(let-values(((temp106_0) 1)((defns107_0) defns_8))"
"(any-side-effects?9.1 defns107_0 #t #f #f #f #f val-expr_0 temp106_0)))"
" #f)"
" #f)))))))))))))))"
"(define-values"
"(is-lambda?)"
"(lambda(expr_9 arity_0 defns_9)"
"(let-values(((lookup_0)(lookup-defn defns_9 expr_9)))"
"(let-values(((or-part_223)"
"(if lookup_0"
"(if(known-function? lookup_0)"
"(let-values(((or-part_224)(not arity_0)))"
"(if or-part_224 or-part_224(arity-includes?(known-function-arity lookup_0) arity_0)))"
" #f)"
" #f)))"
"(if or-part_223"
" or-part_223"
"(let-values(((or-part_225)"
"(if(pair?(correlated-e expr_9))"
"(if(eq? 'case-lambda(car(correlated-e expr_9)))(not arity_0) #f)"
" #f)))"
"(if or-part_225"
" or-part_225"
"(if(pair?(correlated-e expr_9))"
"(if(eq? 'lambda(car(correlated-e expr_9)))"
"(let-values(((or-part_226)(not arity_0)))"
"(if or-part_226"
" or-part_226"
"(= arity_0(length(correlated->list(cadr(correlated->list expr_9)))))))"
" #f)"
" #f))))))))"
"(define-values"
"(arity-includes?)"
"(lambda(a_40 n_50)"
"(let-values(((or-part_227)(equal? a_40 n_50)))"
"(if or-part_227"
" or-part_227"
"(if(list? a_40)"
"(let-values(((lst_200) a_40))"
"(begin"
"(check-list lst_200)"
"((letrec-values(((for-loop_176)"
"(lambda(result_136 lst_201)"
"(if(pair? lst_201)"
"(let-values(((a_41)(unsafe-car lst_201))((rest_105)(unsafe-cdr lst_201)))"
"(let-values(((result_137)"
"(let-values()"
"(let-values(((result_138)"
"(let-values()(let-values()(equal? a_41 n_50)))))"
"(values result_138)))))"
"(if(if(not((lambda x_105 result_137) a_41))(not #f) #f)"
"(for-loop_176 result_137 rest_105)"
" result_137)))"
" result_136))))"
" for-loop_176)"
" #f"
" lst_200)))"
" #f)))))"
"(define-values"
"(immutable-field?)"
"(lambda(val-expr_1 immutables-expr_3)"
"(if(quoted? exact-nonnegative-integer? val-expr_1)"
"(memv(quoted-value val-expr_1)(immutables-expr-to-immutables immutables-expr_3 null))"
" #f)))"
"(define-values"
"(immutables-expr-to-immutables)"
"(lambda(e_68 fail-v_0)"
"(let-values(((tmp_26)(if(pair?(correlated-e e_68))(correlated-e(car(correlated-e e_68))) #f)))"
"(if(equal? tmp_26 'quote)"
"(let-values()"
"(let-values(((v_189)(correlated-cadr e_68)))"
"(let-values(((or-part_228)"
"(if(correlated-length v_189)"
"(let-values(((l_61)(map2 correlated-e(correlated->list v_189))))"
"(if(andmap2 exact-nonnegative-integer? l_61)"
"(if(=(length l_61)(set-count(list->set l_61))) l_61 #f)"
" #f))"
" #f)))"
"(if or-part_228 or-part_228 fail-v_0))))"
"(let-values() fail-v_0)))))"
"(define-values"
"(procedure-spec?)"
"(lambda(e_69 field-count_1)"
"(let-values(((or-part_145)(quoted? false? e_69)))"
"(if or-part_145"
" or-part_145"
"(let-values(((or-part_146)"
"(if(quoted? exact-nonnegative-integer? e_69)"
"(if field-count_1(<(quoted-value e_69) field-count_1) #f)"
" #f)))"
"(if or-part_146 or-part_146(is-lambda? e_69 #f '#hasheq())))))))"
"(define-values"
"(immutables-ok?)"
"(lambda(e_70 init-field-count-expr_1)"
"(let-values(((l_62)(immutables-expr-to-immutables e_70 #f)))"
"(let-values(((c_25)(field-count-expr-to-field-count init-field-count-expr_1)))"
"(if l_62"
"(let-values(((lst_202) l_62))"
"(begin"
"(check-list lst_202)"
"((letrec-values(((for-loop_177)"
"(lambda(result_139 lst_203)"
"(if(pair? lst_203)"
"(let-values(((n_51)(unsafe-car lst_203))((rest_106)(unsafe-cdr lst_203)))"
"(let-values(((result_140)"
"(let-values()"
"(let-values(((result_141)"
"(let-values()(let-values()(< n_51 c_25)))))"
"(values result_141)))))"
"(if(if(not((lambda x_106(not result_140)) n_51))(not #f) #f)"
"(for-loop_177 result_140 rest_106)"
" result_140)))"
" result_139))))"
" for-loop_177)"
" #t"
" lst_202)))"
" #f)))))"
"(define-values"
"(ok-make-struct-field-accessor/mutator?)"
"(lambda(e_71 locals_17 type_1 defns_10)"
"(let-values(((l_63)(correlated->list e_71)))"
"(let-values(((a_42)"
"(if(let-values(((or-part_229)(=(length l_63) 3)))"
"(if or-part_229 or-part_229(=(length l_63) 4)))"
"(let-values(((or-part_230)(hash-ref locals_17(correlated-e(list-ref l_63 1)) #f)))"
"(if or-part_230 or-part_230(lookup-defn defns_10(correlated-e(list-ref l_63 1)))))"
" #f)))"
"(if(known-struct-op? a_42)"
"(if(eq?(known-struct-op-type a_42) type_1)"
"(if(<(field-count-expr-to-field-count(list-ref l_63 2))(known-struct-op-field-count a_42))"
"(let-values(((or-part_231)(=(length l_63) 3)))"
"(if or-part_231 or-part_231(quoted? symbol?(list-ref l_63 3))))"
" #f)"
" #f)"
" #f)))))"
"(define-values(maybe+)(lambda(x_107 y_49)(if x_107(if y_49(+ x_107 y_49) #f) #f)))"
"(define-values"
"(compile-single)"
"(lambda(p_47 cctx_13)"
"(let-values(((temp14_2) #f)((temp15_2) #t))(compile-top9.1 temp14_2 #t temp15_2 #t #f #f p_47 cctx_13))))"
"(define-values"
"(compile-top9.1)"
"(lambda(serializable?1_0"
" serializable?4_0"
" single-expression?2_0"
" single-expression?5_0"
" to-source?3_0"
" to-source?6_0"
" p7_0"
" cctx8_0)"
"(let-values(((p_42) p7_0))"
"(let-values(((cctx_1) cctx8_0))"
"(let-values(((serializable?_0)(if serializable?4_0 serializable?1_0 #t)))"
"(let-values(((single-expression?_0)(if single-expression?5_0 single-expression?2_0 #f)))"
"(let-values(((to-source?_2)(if to-source?6_0 to-source?3_0 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((phase_64)(compile-context-phase cctx_1)))"
"(let-values(((mpis_17)(make-module-path-index-table)))"
"(let-values(((purely-functional?_0) #t))"
"(let-values(((body-linklets_1"
" min-phase_1"
" max-phase_1"
" phase-to-link-module-uses_3"
" phase-to-link-module-uses-expr_2"
" phase-to-link-extra-inspectorsss_1"
" syntax-literals_3"
" no-root-context-pos_0)"
"(let-values(((temp16_3)(list p_42))"
"((cctx17_0) cctx_1)"
"((mpis18_0) mpis_17)"
"((temp19_0)"
"(if single-expression?_0"
"(list* '()(list syntax-literals-id) '(()))"
"(list"
"(list top-level-bind!-id top-level-require!-id)"
"(list mpi-vector-id syntax-literals-id)"
" instance-imports)))"
"((to-source?20_0) to-source?_2)"
"((temp21_0)(lambda()(set! purely-functional?_0 #f)))"
"((temp22_2)"
"(lambda(e_72 expected-results_2 phase_65 required-reference?_0)"
"(if(if purely-functional?_0"
"(let-values(((required-reference?27_0)"
" required-reference?_0))"
"(any-side-effects?9.1"
" #f"
" #f"
" #f"
" #f"
" required-reference?27_0"
" #t"
" e_72"
" expected-results_2))"
" #f)"
"(let-values()(set! purely-functional?_0 #f))"
"(void))))"
"((temp23_2)"
"(lambda(s_44 cctx_14)"
"(begin"
"(set! purely-functional?_0 #f)"
"(compile-top-level-require s_44 cctx_14))))"
"((temp24_3)(not single-expression?_0)))"
"(compile-forms27.1"
" temp19_0"
" #f"
" #f"
" temp22_2"
" #t"
" temp24_3"
" #t"
" temp21_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp23_2"
" #t"
" #f"
" #f"
" to-source?20_0"
" #t"
" temp16_3"
" cctx17_0"
" mpis18_0))))"
"(let-values(((add-metadata_0)"
"(lambda(ht_106)"
"(let-values(((ht_49)(hash-set ht_106 'original-phase phase_64)))"
"(let-values(((ht_107)(hash-set ht_49 'max-phase max-phase_1))) ht_107)))))"
"(let-values(((bundle_0)"
"((if to-source?_2 values 1/hash->linklet-bundle)"
"(add-metadata_0"
"(if serializable?_0"
"(let-values()"
"(let-values(((syntax-literals-expr_1)"
"(let-values()"
"(generate-eager-syntax-literals!"
" syntax-literals_3"
" mpis_17"
" phase_64"
"(compile-context-self cctx_1)"
"(compile-context-namespace cctx_1)))))"
"(let-values(((link-linklet_0)"
"((if to-source?_2"
" values"
"(lambda(s_86)"
"(let-values()(1/compile-linklet s_86))))"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list"
" mpi-vector-id"
" deserialized-syntax-vector-id"
" 'phase-to-link-modules"
" syntax-literals-id)"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize mpis_17))"
"(list"
" 'define-values"
"(list deserialized-syntax-vector-id)"
"(list* 'make-vector(add1 phase_64) '(#f)))"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_2)"
"(list"
" 'define-values"
"(list syntax-literals-id)"
" syntax-literals-expr_1)))))"
"(hash-set body-linklets_1 'link link-linklet_0))))"
"(let-values() body-linklets_1))))))"
"(if to-source?_2"
"(let-values()(hasheq #f bundle_0))"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory(hasheq #f bundle_0))"
" #f"
" #f"
" #f"
" phase-to-link-module-uses_3"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_1"
"(mpis-as-vector mpis_17)"
"(syntax-literals-as-vector syntax-literals_3)"
" null"
" null"
"(extract-namespace-scopes(compile-context-namespace cctx_1))"
" purely-functional?_0))))))))))))))))))"
"(define-values"
"(compile-top-level-require)"
"(lambda(p_48 cctx_15)"
"(let-values(((phase_66)(compile-context-phase cctx_15)))"
"(if(parsed-require? p_48)"
"(let-values()"
"(let-values(((form-stx_0)(compile-quote-syntax(syntax-disarm$1(parsed-s p_48)) cctx_15)))"
"(list top-level-require!-id form-stx_0 ns-id)))"
"(let-values() #f)))))"
"(define-values"
"(module-path->mpi5.1)"
"(lambda(declared-submodule-names1_0 declared-submodule-names2_0 mod-path3_0 self4_2)"
"(let-values(((mod-path_4) mod-path3_0))"
"(let-values(((self_11) self4_2))"
"(let-values(((declared-submodule-names_1)"
"(if declared-submodule-names2_0 declared-submodule-names1_0 '#hasheq())))"
"(let-values()"
"(if(if(list? mod-path_4)"
"(if(= 2(length mod-path_4))"
"(if(eq? 'quote(car mod-path_4))"
"(if(symbol?(cadr mod-path_4))(hash-ref declared-submodule-names_1(cadr mod-path_4) #f) #f)"
" #f)"
" #f)"
" #f)"
"              (let-values () (1/module-path-index-join (list 'submod \".\" (cadr mod-path_4)) self_11))"
"(if(if(list? mod-path_4)"
"(if(eq? 'submod(car mod-path_4))"
"(let-values(((mod-path_5)(cadr mod-path_4)))"
"(if(list? mod-path_5)"
"(if(= 2(length mod-path_5))"
"(if(eq? 'quote(car mod-path_5))"
"(if(symbol?(cadr mod-path_5))"
"(hash-ref declared-submodule-names_1(cadr mod-path_5) #f)"
" #f)"
" #f)"
" #f)"
" #f))"
" #f)"
" #f)"
"(let-values()"
"                  (1/module-path-index-join (list* 'submod \".\" (cadr (cadr mod-path_4)) (cddr mod-path_4)) self_11))"
"(let-values()(1/module-path-index-join mod-path_4 self_11))))))))))"
"(define-values"
"(module-path->mpi/context)"
"(lambda(mod-path_6 ctx_9)"
"(let-values(((temp9_0)(namespace-mpi(expand-context-namespace ctx_9)))"
"((temp10_2)(expand-context-declared-submodule-names ctx_9)))"
"(module-path->mpi5.1 temp10_2 #t mod-path_6 temp9_0))))"
"(define-values"
"(syntax-mapped-names)"
"(lambda(s_0 phase_40)"
"(let-values(((s-scs_1)(syntax-scope-set s_0 phase_40)))"
"(let-values(((ht_108) s-scs_1))"
"(begin"
"(check-in-immutable-hash-keys ht_108)"
"((letrec-values(((for-loop_104)"
"(lambda(syms_14 i_149)"
"(if i_149"
"(let-values(((sc_23)(unsafe-immutable-hash-iterate-key ht_108 i_149)))"
"(let-values(((syms_15)"
"(let-values(((syms_16) syms_14))"
"(let-values(((syms_17)"
"(let-values()"
"(set-union"
" syms_16"
"(binding-table-symbols"
"(scope-binding-table sc_23)"
" s-scs_1"
" s_0"
" null)))))"
"(values syms_17)))))"
"(if(not #f)"
"(for-loop_104 syms_15(unsafe-immutable-hash-iterate-next ht_108 i_149))"
" syms_15)))"
" syms_14))))"
" for-loop_104)"
"(seteq)"
"(unsafe-immutable-hash-iterate-first ht_108)))))))"
"(define-values"
"(struct:requires+provides"
" requires+provides1.1"
" requires+provides?"
" requires+provides-self"
" requires+provides-require-mpis"
" requires+provides-require-mpis-in-order"
" requires+provides-requires"
" requires+provides-provides"
" requires+provides-phase-to-defined-syms"
" requires+provides-can-cross-phase-persistent?"
" requires+provides-all-bindings-simple?"
" set-requires+provides-can-cross-phase-persistent?!"
" set-requires+provides-all-bindings-simple?!)"
"(let-values(((struct:_31 make-_31 ?_31 -ref_31 -set!_31)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'requires+provides"
" #f"
" 8"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5)"
" #f"
" 'requires+provides)))))"
"(values"
" struct:_31"
" make-_31"
" ?_31"
"(make-struct-field-accessor -ref_31 0 'self)"
"(make-struct-field-accessor -ref_31 1 'require-mpis)"
"(make-struct-field-accessor -ref_31 2 'require-mpis-in-order)"
"(make-struct-field-accessor -ref_31 3 'requires)"
"(make-struct-field-accessor -ref_31 4 'provides)"
"(make-struct-field-accessor -ref_31 5 'phase-to-defined-syms)"
"(make-struct-field-accessor -ref_31 6 'can-cross-phase-persistent?)"
"(make-struct-field-accessor -ref_31 7 'all-bindings-simple?)"
"(make-struct-field-mutator -set!_31 6 'can-cross-phase-persistent?)"
"(make-struct-field-mutator -set!_31 7 'all-bindings-simple?))))"
"(define-values"
"(struct:required required2.1 required? required-id required-phase required-can-be-shadowed? required-as-transformer?)"
"(let-values(((struct:_66 make-_66 ?_66 -ref_66 -set!_66)"
"(let-values()"
"(let-values()"
"(make-struct-type 'required #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'required)))))"
"(values"
" struct:_66"
" make-_66"
" ?_66"
"(make-struct-field-accessor -ref_66 0 'id)"
"(make-struct-field-accessor -ref_66 1 'phase)"
"(make-struct-field-accessor -ref_66 2 'can-be-shadowed?)"
"(make-struct-field-accessor -ref_66 3 'as-transformer?))))"
"(define-values"
"(struct:bulk-required"
" bulk-required4.1"
" bulk-required?"
" bulk-required-provides"
" bulk-required-prefix-len"
" bulk-required-s"
" bulk-required-provide-phase-level"
" bulk-required-can-be-shadowed?)"
"(let-values(((struct:_5 make-_5 ?_5 -ref_5 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-required"
" #f"
" 5"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'bulk-required)))))"
"(values"
" struct:_5"
" make-_5"
" ?_5"
"(make-struct-field-accessor -ref_5 0 'provides)"
"(make-struct-field-accessor -ref_5 1 'prefix-len)"
"(make-struct-field-accessor -ref_5 2 's)"
"(make-struct-field-accessor -ref_5 3 'provide-phase-level)"
"(make-struct-field-accessor -ref_5 4 'can-be-shadowed?))))"
"(define-values"
"(make-requires+provides)"
"(lambda(self_12)"
"(requires+provides1.1"
" self_12"
"(make-module-path-index-intern-table)"
"(make-hasheqv)"
"(make-hasheq)"
"(make-hasheqv)"
"(make-hasheqv)"
" #t"
" #t)))"
"(define-values"
"(requires+provides-reset!)"
"(lambda(r+p_0)"
"(begin"
"(hash-clear!(requires+provides-require-mpis-in-order r+p_0))"
"(hash-clear!(requires+provides-requires r+p_0))"
"(hash-clear!(requires+provides-provides r+p_0))"
"(hash-clear!(requires+provides-phase-to-defined-syms r+p_0)))))"
"(define-values"
"(intern-mpi)"
"(lambda(r+p_1 mpi_30)(intern-module-path-index!(requires+provides-require-mpis r+p_1) mpi_30)))"
"(define-values"
"(add-required-module!)"
"(lambda(r+p_2 mod-name_10 phase-shift_7 is-cross-phase-persistent?_0)"
"(let-values(((mpi_31)(intern-mpi r+p_2 mod-name_10)))"
"(begin"
"(if(hash-ref(hash-ref(requires+provides-requires r+p_2) mpi_31 '#hasheqv()) phase-shift_7 #f)"
"(void)"
"(let-values()"
"(begin"
"(hash-update!"
"(requires+provides-require-mpis-in-order r+p_2)"
" phase-shift_7"
"(lambda(l_64)(cons mpi_31 l_64))"
" null)"
"(hash-set!"
"(hash-ref!(requires+provides-requires r+p_2) mpi_31 make-hasheqv)"
" phase-shift_7"
"(make-hasheq)))))"
"(if is-cross-phase-persistent?_0"
"(void)"
"(let-values()(set-requires+provides-can-cross-phase-persistent?! r+p_2 #f)))"
" mpi_31))))"
"(define-values"
"(add-defined-or-required-id!13.1)"
"(lambda(as-transformer?6_0 can-be-shadowed?5_0 can-be-shadowed?7_0 r+p9_0 id10_0 phase11_0 binding12_0)"
"(let-values(((r+p_3) r+p9_0))"
"(let-values(((id_30) id10_0))"
"(let-values(((phase_67) phase11_0))"
"(let-values(((binding_12) binding12_0))"
"(let-values(((can-be-shadowed?_0)(if can-be-shadowed?7_0 can-be-shadowed?5_0 #f)))"
"(let-values(((as-transformer?_0) as-transformer?6_0))"
"(let-values()"
"(begin"
"(if(equal?"
" phase_67"
"(phase+"
"(module-binding-nominal-phase binding_12)"
"(module-binding-nominal-require-phase binding_12)))"
"(void)"
"                      (let-values () (error \"internal error: binding phase does not match nominal info\")))"
"(let-values(((temp111_0)(module-binding-nominal-module binding_12))"
"((temp112_0)(module-binding-nominal-require-phase binding_12))"
"((can-be-shadowed?113_0) can-be-shadowed?_0)"
"((as-transformer?114_0) as-transformer?_0))"
"(add-defined-or-required-id-at-nominal!27.1"
" as-transformer?114_0"
" can-be-shadowed?113_0"
" temp111_0"
" temp112_0"
" r+p_3"
" id_30"
" phase_67))))))))))))"
"(define-values"
"(add-defined-or-required-id-at-nominal!27.1)"
"(lambda(as-transformer?19_0"
" can-be-shadowed?18_0"
" nominal-module16_0"
" nominal-require-phase17_0"
" r+p24_0"
" id25_1"
" phase26_1)"
"(let-values(((r+p_4) r+p24_0))"
"(let-values(((id_31) id25_1))"
"(let-values(((phase_68) phase26_1))"
"(let-values(((nominal-module_6) nominal-module16_0))"
"(let-values(((nominal-require-phase_4) nominal-require-phase17_0))"
"(let-values(((can-be-shadowed?_1) can-be-shadowed?18_0))"
"(let-values(((as-transformer?_1) as-transformer?19_0))"
"(let-values()"
"(let-values(((at-mod_0)"
"(hash-ref!"
"(requires+provides-requires r+p_4)"
"(intern-mpi r+p_4 nominal-module_6)"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_0)(hash-ref! at-mod_0 nominal-require-phase_4 make-hasheq)))"
"(let-values(((sym_44)(syntax-e$1 id_31)))"
"(hash-set!"
" sym-to-reqds_0"
" sym_44"
"(cons-ish"
"(required2.1 id_31 phase_68 can-be-shadowed?_1 as-transformer?_1)"
"(hash-ref sym-to-reqds_0 sym_44 null))))))))))))))))"
"(define-values"
"(add-bulk-required-ids!53.1)"
"(lambda(accum-update-nominals36_0"
" can-be-shadowed?34_0"
" check-and-remove?35_0"
" excepts31_0"
" in33_0"
" prefix30_0"
" symbols-accum32_0"
" who37_0"
" r+p46_0"
" s47_0"
" self48_0"
" nominal-module49_0"
" phase-shift50_0"
" provides51_0"
" provide-phase-level52_0)"
"(let-values(((r+p_5) r+p46_0))"
"(let-values(((s_106) s47_0))"
"(let-values(((self_13) self48_0))"
"(let-values(((nominal-module_7) nominal-module49_0))"
"(let-values(((phase-shift_8) phase-shift50_0))"
"(let-values(((provides_3) provides51_0))"
"(let-values(((provide-phase-level_3) provide-phase-level52_0))"
"(let-values(((bulk-prefix_0) prefix30_0))"
"(let-values(((bulk-excepts_0) excepts31_0))"
"(let-values(((symbols-accum_0) symbols-accum32_0))"
"(let-values(((orig-s_8) in33_0))"
"(let-values(((can-be-shadowed?_2) can-be-shadowed?34_0))"
"(let-values(((check-and-remove?_0) check-and-remove?35_0))"
"(let-values(((accum-update-nominals_0) accum-update-nominals36_0))"
"(let-values(((who_11) who37_0))"
"(let-values()"
"(let-values(((phase_14)(phase+ provide-phase-level_3 phase-shift_8)))"
"(let-values(((shortcut-table_0)"
"(if check-and-remove?_0"
"(if(>(hash-count provides_3) 64)"
"(syntax-mapped-names s_106 phase_14)"
" #f)"
" #f)))"
"(let-values(((mpi_32)(intern-mpi r+p_5 nominal-module_7)))"
"(let-values(((at-mod_1)"
"(hash-ref!"
"(requires+provides-requires r+p_5)"
" mpi_32"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_1)"
"(hash-ref! at-mod_1 phase-shift_8 make-hasheq)))"
"(let-values(((prefix-len_0)"
"(if bulk-prefix_0"
"(string-length(symbol->string bulk-prefix_0))"
" 0)))"
"(let-values(((br_0)"
"(bulk-required4.1"
" provides_3"
" prefix-len_0"
" s_106"
" provide-phase-level_3"
" can-be-shadowed?_2)))"
"(begin"
"(let-values(((ht_109) provides_3))"
"(begin"
"(check-in-hash ht_109)"
"((letrec-values(((for-loop_178)"
"(lambda(i_150)"
"(if i_150"
"(let-values(((out-sym_0 binding/p_2)"
"(hash-iterate-key+value"
" ht_109"
" i_150)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if symbols-accum_0"
"(let-values()"
"(hash-set!"
" symbols-accum_0"
" out-sym_0"
" #t))"
"(void))"
"(if(hash-ref"
" bulk-excepts_0"
" out-sym_0"
" #f)"
"(void)"
"(let-values()"
"(let-values(((sym_45)"
"(if(not"
" bulk-prefix_0)"
"(let-values()"
" out-sym_0)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                                              \"~a~a\""
" bulk-prefix_0"
" out-sym_0))))))"
"(begin"
"(if(if check-and-remove?_0"
"(let-values(((or-part_232)"
"(not"
" shortcut-table_0)))"
"(if or-part_232"
" or-part_232"
"(hash-ref"
" shortcut-table_0"
" sym_45"
" #f)))"
" #f)"
"(let-values()"
"(let-values(((temp115_0)"
" #t)"
"((r+p116_0)"
" r+p_5)"
"((temp117_0)"
"(datum->syntax$1"
" s_106"
" sym_45"
" s_106))"
"((phase118_0)"
" phase_14)"
"((orig-s119_0)"
" orig-s_8)"
"((temp120_0)"
"(lambda()"
"(let-values(((self126_0)"
" self_13)"
"((mpi127_0)"
" mpi_32)"
"((provide-phase-level128_0)"
" provide-phase-level_3)"
"((phase-shift129_0)"
" phase-shift_8))"
"(provide-binding-to-require-binding11.1"
" mpi127_0"
" phase-shift129_0"
" provide-phase-level128_0"
" self126_0"
" binding/p_2"
" sym_45))))"
"((temp121_0)"
" #t)"
"((accum-update-nominals122_0)"
" accum-update-nominals_0)"
"((who123_0)"
" who_11))"
"(check-not-defined87.1"
" accum-update-nominals122_0"
" #t"
" temp115_0"
" #t"
" orig-s119_0"
" temp121_0"
" #t"
" temp120_0"
" #t"
" who123_0"
" r+p116_0"
" temp117_0"
" phase118_0)))"
"(void))"
"(hash-set!"
" sym-to-reqds_1"
" sym_45"
"(cons-ish"
" br_0"
"(hash-ref"
" sym-to-reqds_1"
" sym_45"
" null)))))))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_178"
"(hash-iterate-next ht_109 i_150))"
"(values))))"
"(values)))))"
" for-loop_178)"
"(hash-iterate-first ht_109))))"
"(void)))))))))))))))))))))))))))"
"(define-values"
"(bulk-required->required)"
"(lambda(br_1 nominal-module_8 phase_69 sym_46)"
"(let-values(((prefix-len_1)(bulk-required-prefix-len br_1)))"
"(let-values(((out-sym_1)"
"(if(zero? prefix-len_1) sym_46(string->symbol(substring(symbol->string sym_46) prefix-len_1)))))"
"(let-values(((binding/p_3)(hash-ref(bulk-required-provides br_1) out-sym_1)))"
"(required2.1"
"(datum->syntax$1(bulk-required-s br_1) sym_46)"
"(phase+ phase_69(bulk-required-provide-phase-level br_1))"
"(bulk-required-can-be-shadowed? br_1)"
"(provided-as-transformer? binding/p_3)))))))"
"(define-values"
"(normalize-required)"
"(lambda(r_39 mod-name_9 phase_70 sym_47)"
"(if(bulk-required? r_39)(bulk-required->required r_39 mod-name_9 phase_70 sym_47) r_39)))"
"(define-values"
"(add-enclosing-module-defined-and-required!61.1)"
"(lambda(enclosing-requires+provides56_0 r+p58_0 enclosing-mod59_0 phase-shift60_0)"
"(let-values(((r+p_6) r+p58_0))"
"(let-values(((enclosing-r+p_0) enclosing-requires+provides56_0))"
"(let-values(((enclosing-mod_0) enclosing-mod59_0))"
"(let-values(((phase-shift_9) phase-shift60_0))"
"(let-values()"
"(begin"
"(set-requires+provides-all-bindings-simple?! r+p_6 #f)"
"(let-values(((ht_110)(requires+provides-requires enclosing-r+p_0)))"
"(begin"
"(check-in-hash ht_110)"
"((letrec-values(((for-loop_179)"
"(lambda(i_151)"
"(if i_151"
"(let-values(((mod-name_11 at-mod_2)(hash-iterate-key+value ht_110 i_151)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(let-values(((ht_111) at-mod_2))"
"(begin"
"(check-in-hash ht_111)"
"((letrec-values(((for-loop_180)"
"(lambda(i_152)"
"(if i_152"
"(let-values(((phase_71"
" at-phase_8)"
"(hash-iterate-key+value"
" ht_111"
" i_152)))"
"(let-values((()"
"(let-values(((ht_112)"
" at-phase_8))"
"(begin"
"(check-in-hash"
" ht_112)"
"((letrec-values(((for-loop_181)"
"(lambda(i_153)"
"(if i_153"
"(let-values(((sym_48"
" reqds_0)"
"(hash-iterate-key+value"
" ht_112"
" i_153)))"
"(let-values((()"
"(let-values(((lst_204)"
" reqds_0))"
"(begin"
"(void)"
"((letrec-values(((for-loop_182)"
"(lambda(lst_205)"
"(if(not"
"(null?"
" lst_205))"
"(let-values(((reqd/maybe-bulk_0)"
"(if(pair?"
" lst_205)"
"(car"
" lst_205)"
" lst_205))"
"((rest_107)"
"(if(pair?"
" lst_205)"
"(cdr"
" lst_205)"
" null)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((reqd_0)"
"(normalize-required"
" reqd/maybe-bulk_0"
" mod-name_11"
" phase_71"
" sym_48)))"
"(let-values(((temp131_0)"
"(syntax-shift-phase-level$1"
"(let-values(((temp137_0)"
"(required-id"
" reqd_0))"
"((temp138_0)"
"(requires+provides-self"
" enclosing-r+p_0))"
"((enclosing-mod139_0)"
" enclosing-mod_0))"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" temp137_0"
" temp138_0"
" enclosing-mod139_0"
" #f"
" #f))"
" phase-shift_9))"
"((temp132_0)"
"(phase+"
"(required-phase"
" reqd_0)"
" phase-shift_9))"
"((enclosing-mod133_0)"
" enclosing-mod_0)"
"((phase-shift134_0)"
" phase-shift_9)"
"((temp135_0)"
" #t)"
"((temp136_0)"
"(required-as-transformer?"
" reqd_0)))"
"(add-defined-or-required-id-at-nominal!27.1"
" temp136_0"
" temp135_0"
" enclosing-mod133_0"
" phase-shift134_0"
" r+p_6"
" temp131_0"
" temp132_0))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_182"
" rest_107)"
"(values))))"
"(values)))))"
" for-loop_182)"
" lst_204)))))"
"(if(not"
" #f)"
"(for-loop_181"
"(hash-iterate-next"
" ht_112"
" i_153))"
"(values))))"
"(values)))))"
" for-loop_181)"
"(hash-iterate-first"
" ht_112))))))"
"(if(not"
" #f)"
"(for-loop_180"
"(hash-iterate-next"
" ht_111"
" i_152))"
"(values))))"
"(values)))))"
" for-loop_180)"
"(hash-iterate-first ht_111))))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_179(hash-iterate-next ht_110 i_151))(values))))"
"(values)))))"
" for-loop_179)"
"(hash-iterate-first ht_110))))"
"(void)))))))))"
"(define-values"
"(remove-required-id!69.1)"
"(lambda(unless-matches64_0 r+p66_0 id67_0 phase68_0)"
"(let-values(((r+p_7) r+p66_0))"
"(let-values(((id_32) id67_0))"
"(let-values(((phase_72) phase68_0))"
"(let-values(((binding_13) unless-matches64_0))"
"(let-values()"
"(let-values(((b_68)"
"(let-values(((temp142_0) #t))"
"(resolve+shift30.1 #f #f temp142_0 #t #f #f #f #f #f #f id_32 phase_72))))"
"(if b_68"
"(let-values()"
"(let-values(((mpi_33)(intern-mpi r+p_7(module-binding-nominal-module b_68))))"
"(let-values(((at-mod_3)(hash-ref(requires+provides-requires r+p_7) mpi_33 #f)))"
"(if at-mod_3"
"(let-values()"
"(let-values(((nominal-phase_4)(module-binding-nominal-require-phase b_68)))"
"(let-values(((sym-to-reqds_2)(hash-ref at-mod_3 nominal-phase_4 #f)))"
"(if sym-to-reqds_2"
"(let-values()"
"(let-values(((sym_49)(syntax-e$1 id_32)))"
"(let-values(((l_65)(hash-ref sym-to-reqds_2 sym_49 null)))"
"(if(null? l_65)"
"(void)"
"(let-values()"
"(if(same-binding? b_68 binding_13)"
"(void)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_2"
" sym_49"
"(remove-non-matching-requireds"
" l_65"
" id_32"
" phase_72"
" mpi_33"
" nominal-phase_4"
" sym_49)))))))))"
"(void)))))"
"(void)))))"
"(void))))))))))"
"(define-values"
"(remove-non-matching-requireds)"
"(lambda(reqds_1 id_33 phase_73 mpi_34 nominal-phase_5 sym_50)"
"(let-values(((lst_206) reqds_1))"
"(begin"
"(void)"
"((letrec-values(((for-loop_183)"
"(lambda(lst_207)"
"(if(not(null? lst_207))"
"(let-values(((r_40)(if(pair? lst_207)(car lst_207) lst_207))"
"((rest_108)(if(pair? lst_207)(cdr lst_207) null)))"
"(let-values(((post-guard-var_49)(lambda() #t)))"
"(let-values(((r_41)(normalize-required r_40 mpi_34 nominal-phase_5 sym_50)))"
"(begin"
" #t"
"((letrec-values(((for-loop_184)"
"(lambda()"
"(let-values()"
"(let-values(((post-guard-var_50)(lambda() #f)))"
"(let-values()"
"(if(free-identifier=?$1"
"(required-id r_41)"
" id_33"
" phase_73"
" phase_73)"
"(if(post-guard-var_50)"
"(for-loop_184)"
"(if(post-guard-var_49)"
"(for-loop_183 rest_108)"
" null))"
"(let-values()"
"(let-values(((elem_49)"
"(let-values()(let-values() r_41))))"
"(let-values(((result_142)"
"(if(post-guard-var_50)"
"(for-loop_184)"
"(if(post-guard-var_49)"
"(for-loop_183 rest_108)"
" null))))"
"(cons elem_49 result_142)))))))))))"
" for-loop_184))))))"
" null))))"
" for-loop_183)"
" lst_206)))))"
"(define-values"
"(check-not-defined87.1)"
"(lambda(accum-update-nominals76_0"
" accum-update-nominals82_0"
" check-not-required?72_0"
" check-not-required?78_0"
" in73_0"
" remove-shadowed!?75_0"
" remove-shadowed!?81_0"
" unless-matches74_0"
" unless-matches80_0"
" who77_0"
" r+p84_0"
" id85_0"
" phase86_0)"
"(let-values(((check-not-required?_0)(if check-not-required?78_0 check-not-required?72_0 #f)))"
"(let-values(((r+p_8) r+p84_0))"
"(let-values(((id_34) id85_0))"
"(let-values(((phase_74) phase86_0))"
"(let-values(((orig-s_9) in73_0))"
"(let-values(((ok-binding/delayed_0)(if unless-matches80_0 unless-matches74_0 #f)))"
"(let-values(((remove-shadowed!?_0)(if remove-shadowed!?81_0 remove-shadowed!?75_0 #f)))"
"(let-values(((accum-update-nominals_1)(if accum-update-nominals82_0 accum-update-nominals76_0 #f)))"
"(let-values(((who_12) who77_0))"
"(let-values()"
"(let-values(((b_69)"
"(let-values(((temp145_0) #t))"
"(resolve+shift30.1 #f #f temp145_0 #t #f #f #f #f #f #f id_34 phase_74))))"
"(if(not b_69)"
"(let-values()(void))"
"(if(not(module-binding? b_69))"
"                              (let-values () (raise-syntax-error$1 #f \"identifier out of context\" id_34))"
"(let-values()"
"(let-values(((defined?_1)"
"(if b_69"
"(eq?(requires+provides-self r+p_8)(module-binding-module b_69))"
" #f)))"
"(if(if(not defined?_1)(not check-not-required?_0) #f)"
"(let-values()(set-requires+provides-all-bindings-simple?! r+p_8 #f))"
"(if(if defined?_1"
"(not"
"(hash-ref"
"(hash-ref"
"(requires+provides-phase-to-defined-syms r+p_8)"
" phase_74"
" '#hasheq())"
"(module-binding-sym b_69)"
" #f))"
" #f)"
"(let-values()(void))"
"(let-values()"
"(let-values(((mpi_35)(intern-mpi r+p_8(module-binding-nominal-module b_69))))"
"(let-values(((at-mod_4)"
"(hash-ref(requires+provides-requires r+p_8) mpi_35 #f)))"
"(let-values(((ok-binding_0)"
"(if(procedure? ok-binding/delayed_0)"
"(ok-binding/delayed_0)"
" ok-binding/delayed_0)))"
"(if(not at-mod_4)"
"(let-values()(void))"
"(if(if ok-binding_0(same-binding? b_69 ok-binding_0) #f)"
"(let-values()"
"(if(same-binding-nominals? b_69 ok-binding_0)"
"(void)"
"(let-values()"
"(let-values(((update!_0)"
"(lambda()"
"(let-values(((temp146_0) #t)"
"((id147_0) id_34)"
"((temp148_0)"
"(let-values(((temp151_0)"
"(cons"
" ok-binding_0"
"(module-binding-extra-nominal-bindings"
" b_69))))"
"(module-binding-update48.1"
" #f"
" #f"
" temp151_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b_69)))"
"((phase149_0) phase_74))"
"(add-binding!17.1"
" #f"
" #f"
" temp146_0"
" #t"
" id147_0"
" temp148_0"
" phase149_0)))))"
"(if accum-update-nominals_1"
"(let-values()"
"(set-box!"
" accum-update-nominals_1"
"(cons update!_0(unbox accum-update-nominals_1))))"
"(let-values()(update!_0)))))))"
"(let-values()"
"(let-values(((nominal-phase_6)"
"(module-binding-nominal-require-phase b_69)))"
"(let-values(((sym-to-reqds_3)"
"(hash-ref at-mod_4 nominal-phase_6 '#hasheq())))"
"(let-values(((reqds_2)"
"(hash-ref"
" sym-to-reqds_3"
"(syntax-e$1 id_34)"
" null)))"
"(begin"
"(let-values(((lst_208) reqds_2))"
"(begin"
"(void)"
"((letrec-values(((for-loop_185)"
"(lambda(lst_209)"
"(if(not(null? lst_209))"
"(let-values(((r_42)"
"(if(pair? lst_209)"
"(car lst_209)"
" lst_209))"
"((rest_109)"
"(if(pair? lst_209)"
"(cdr lst_209)"
" null)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(if(bulk-required?"
" r_42)"
"(bulk-required-can-be-shadowed?"
" r_42)"
"(required-can-be-shadowed?"
" r_42))"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" r+p_8"
" #f))"
"(let-values()"
"(raise-syntax-error$1"
" who_12"
"(string-append"
"                                                                                                                                  \"identifier already \""
"(if defined?_1"
"                                                                                                                                    \"defined\""
"                                                                                                                                    \"required\")"
"(if(zero-phase?"
" phase_74)"
"(let-values()"
"                                                                                                                                      \"\")"
"(if(label-phase?"
" phase_74)"
"(let-values()"
"                                                                                                                                        \" for label\")"
"(if(="
" 1"
" phase_74)"
"(let-values()"
"                                                                                                                                          \" for syntax\")"
"(let-values()"
"(format"
"                                                                                                                                           \" for phase ~a\""
" phase_74))))))"
" orig-s_9"
" id_34))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_185 rest_109)"
"(values))))"
"(values)))))"
" for-loop_185)"
" lst_208)))"
"(void)"
"(if(if remove-shadowed!?_0(not(null? reqds_2)) #f)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_3"
"(syntax-e$1 id_34)"
"(remove-non-matching-requireds"
" reqds_2"
" id_34"
" phase_74"
" mpi_35"
" nominal-phase_6"
"(syntax-e$1 id_34))))"
"(void))))))))))))))))))))))))))))))))"
"(define-values"
"(add-defined-syms!)"
"(lambda(r+p_9 syms_18 phase_75)"
"(let-values(((phase-to-defined-syms_0)(requires+provides-phase-to-defined-syms r+p_9)))"
"(let-values(((defined-syms_2)(hash-ref phase-to-defined-syms_0 phase_75 '#hasheq())))"
"(let-values(((new-defined-syms_0)"
"(let-values(((lst_210) syms_18))"
"(begin"
"(check-list lst_210)"
"((letrec-values(((for-loop_186)"
"(lambda(defined-syms_3 lst_211)"
"(if(pair? lst_211)"
"(let-values(((sym_51)(unsafe-car lst_211))"
"((rest_110)(unsafe-cdr lst_211)))"
"(let-values(((defined-syms_4)"
"(let-values(((defined-syms_5) defined-syms_3))"
"(let-values(((defined-syms_6)"
"(let-values()"
"(hash-set defined-syms_5 sym_51 #t))))"
"(values defined-syms_6)))))"
"(if(not #f)"
"(for-loop_186 defined-syms_4 rest_110)"
" defined-syms_4)))"
" defined-syms_3))))"
" for-loop_186)"
" defined-syms_2"
" lst_210)))))"
"(hash-set! phase-to-defined-syms_0 phase_75 new-defined-syms_0))))))"
"(define-values"
"(extract-module-requires)"
"(lambda(r+p_10 mod-name_12 phase_76)"
"(let-values(((mpi_36)(intern-mpi r+p_10 mod-name_12)))"
"(let-values(((at-mod_5)(hash-ref(requires+provides-requires r+p_10) mpi_36 #f)))"
"(if at-mod_5"
"(let-values(((ht_92)(hash-ref at-mod_5 phase_76 '#hasheq())))"
"(begin"
"(check-in-hash ht_92)"
"((letrec-values(((for-loop_187)"
"(lambda(i_154)"
"(if i_154"
"(let-values(((sym_52 reqds_3)(hash-iterate-key+value ht_92 i_154)))"
"(let-values(((post-guard-var_51)(lambda() #t)))"
"(let-values(((lst_212) reqds_3))"
"(begin"
"(void)"
"((letrec-values(((for-loop_188)"
"(lambda(lst_213)"
"(if(not(null? lst_213))"
"(let-values(((reqd_1)"
"(if(pair? lst_213)"
"(car lst_213)"
" lst_213))"
"((rest_111)"
"(if(pair? lst_213)"
"(cdr lst_213)"
" null)))"
"(let-values(((post-guard-var_52)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_50)"
"(let-values()"
"(let-values()"
"(normalize-required"
" reqd_1"
" mpi_36"
" phase_76"
" sym_52)))))"
"(let-values(((result_143)"
"(if(post-guard-var_52)"
"(for-loop_188 rest_111)"
"(if(post-guard-var_51)"
"(for-loop_187"
"(hash-iterate-next"
" ht_92"
" i_154))"
" null))))"
"(cons elem_50 result_143))))))"
"(if(post-guard-var_51)"
"(for-loop_187(hash-iterate-next ht_92 i_154))"
" null)))))"
" for-loop_188)"
" lst_212)))))"
" null))))"
" for-loop_187)"
"(hash-iterate-first ht_92))))"
" #f)))))"
"(define-values"
"(extract-module-definitions)"
"(lambda(r+p_11)"
"(let-values(((or-part_233)(extract-module-requires r+p_11(requires+provides-self r+p_11) 0)))"
"(if or-part_233 or-part_233 null))))"
"(define-values"
"(extract-all-module-requires)"
"(lambda(r+p_12 mod-name_13 phase_77)"
"(let-values(((self_14)(requires+provides-self r+p_12)))"
"(let-values(((requires_2)(requires+provides-requires r+p_12)))"
"(call/ec"
"(lambda(esc_1)"
"(let-values(((lst_190)(if mod-name_13(list(intern-mpi r+p_12 mod-name_13))(hash-keys requires_2))))"
"(begin"
"(check-list lst_190)"
"((letrec-values(((for-loop_189)"
"(lambda(lst_214)"
"(if(pair? lst_214)"
"(let-values(((mod-name_14)(unsafe-car lst_214))"
"((rest_112)(unsafe-cdr lst_214)))"
"(let-values(((post-guard-var_53)(lambda() #t)))"
"(let-values()"
"(if(eq? mod-name_14 self_14)"
"(if(post-guard-var_53)(for-loop_189 rest_112) null)"
"(let-values(((phase-to-requireds_0)"
"(hash-ref requires_2 mod-name_14 '#hasheqv())))"
"(begin"
" #t"
"((letrec-values(((for-loop_190)"
"(lambda()"
"(let-values()"
"(let-values(((post-guard-var_54)"
"(lambda() #f)))"
"(let-values(((lst_215)"
"(if(eq? phase_77 'all)"
"(hash-keys"
" phase-to-requireds_0)"
"(list phase_77))))"
"(begin"
"(check-list lst_215)"
"((letrec-values(((for-loop_191)"
"(lambda(lst_216)"
"(if(pair? lst_216)"
"(let-values(((phase_78)"
"(unsafe-car"
" lst_216))"
"((rest_113)"
"(unsafe-cdr"
" lst_216)))"
"(let-values(((post-guard-var_55)"
"(lambda()"
" #t)))"
"(let-values(((ht_113)"
"(hash-ref"
" phase-to-requireds_0"
" phase_78"
"(lambda()"
"(esc_1"
" #f)))))"
"(begin"
"(check-in-hash"
" ht_113)"
"((letrec-values(((for-loop_192)"
"(lambda(i_155)"
"(if i_155"
"(let-values(((sym_53"
" reqds_4)"
"(hash-iterate-key+value"
" ht_113"
" i_155)))"
"(let-values(((post-guard-var_56)"
"(lambda()"
" #t)))"
"(let-values(((lst_217)"
" reqds_4))"
"(begin"
"(void)"
"((letrec-values(((for-loop_193)"
"(lambda(lst_218)"
"(if(not"
"(null?"
" lst_218))"
"(let-values(((reqd_2)"
"(if(pair?"
" lst_218)"
"(car"
" lst_218)"
" lst_218))"
"((rest_114)"
"(if(pair?"
" lst_218)"
"(cdr"
" lst_218)"
" null)))"
"(let-values(((post-guard-var_57)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_51)"
"(let-values()"
"(let-values()"
"(normalize-required"
" reqd_2"
" mod-name_14"
" phase_78"
" sym_53)))))"
"(let-values(((result_144)"
"(if(post-guard-var_57)"
"(for-loop_193"
" rest_114)"
"(if(post-guard-var_56)"
"(for-loop_192"
"(hash-iterate-next"
" ht_113"
" i_155))"
"(if(post-guard-var_55)"
"(for-loop_191"
" rest_113)"
"(if(post-guard-var_54)"
"(for-loop_190)"
"(if(post-guard-var_53)"
"(for-loop_189"
" rest_112)"
" null)))))))"
"(cons"
" elem_51"
" result_144))))))"
"(if(post-guard-var_56)"
"(for-loop_192"
"(hash-iterate-next"
" ht_113"
" i_155))"
"(if(post-guard-var_55)"
"(for-loop_191"
" rest_113)"
"(if(post-guard-var_54)"
"(for-loop_190)"
"(if(post-guard-var_53)"
"(for-loop_189"
" rest_112)"
" null))))))))"
" for-loop_193)"
" lst_217)))))"
"(if(post-guard-var_55)"
"(for-loop_191"
" rest_113)"
"(if(post-guard-var_54)"
"(for-loop_190)"
"(if(post-guard-var_53)"
"(for-loop_189"
" rest_112)"
" null)))))))"
" for-loop_192)"
"(hash-iterate-first"
" ht_113))))))"
"(if(post-guard-var_54)"
"(for-loop_190)"
"(if(post-guard-var_53)"
"(for-loop_189"
" rest_112)"
" null))))))"
" for-loop_191)"
" lst_215))))))))"
" for-loop_190))))))))"
" null))))"
" for-loop_189)"
" lst_190)))))))))"
"(define-values"
"(add-provide!101.1)"
"(lambda(as-protected?90_0"
" as-transformer?91_0"
" r+p94_0"
" sym95_0"
" phase96_0"
" binding97_0"
" immed-binding98_0"
" id99_0"
" orig-s100_0)"
"(let-values(((r+p_13) r+p94_0))"
"(let-values(((sym_54) sym95_0))"
"(let-values(((phase_79) phase96_0))"
"(let-values(((binding_14) binding97_0))"
"(let-values(((immed-binding_0) immed-binding98_0))"
"(let-values(((id_35) id99_0))"
"(let-values(((orig-s_10) orig-s100_0))"
"(let-values(((as-protected?_0) as-protected?90_0))"
"(let-values(((as-transformer?_2) as-transformer?91_0))"
"(let-values()"
"(begin"
"(if(if as-protected?_0"
"(not(eq?(module-binding-module immed-binding_0)(requires+provides-self r+p_13)))"
" #f)"
"(let-values()"
"                              (raise-syntax-error$1 #f \"cannot protect required identifier in re-provide\" sym_54))"
"(void))"
"(hash-update!"
"(requires+provides-provides r+p_13)"
" phase_79"
"(lambda(at-phase_9)"
"(let-values(((b/p_0)(hash-ref at-phase_9 sym_54 #f)))"
"(let-values(((b_70)(provided-as-binding b/p_0)))"
"(if(not b_70)"
"(let-values()"
"(hash-set"
" at-phase_9"
" sym_54"
"(if(let-values(((or-part_171) as-protected?_0))"
"(if or-part_171 or-part_171 as-transformer?_2))"
"(provided1.1 binding_14 as-protected?_0 as-transformer?_2)"
" binding_14)))"
"(if(same-binding? b_70 binding_14)"
"(let-values() at-phase_9)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                        \"identifier already provided (as a different binding)\""
" orig-s_10"
" id_35)))))))"
" '#hasheq()))))))))))))))"
"(define-values"
"(extract-requires-and-provides)"
"(lambda(r+p_14 old-self_0 new-self_1)"
"(let-values(((extract-requires_0)"
"(lambda()"
"(let-values(((phase-to-mpis-in-order_0)(requires+provides-require-mpis-in-order r+p_14)))"
"(let-values(((phases-in-order_2)"
"(let-values(((temp152_0)(hash-keys phase-to-mpis-in-order_0))"
"((phase<?153_0) phase<?))"
"(sort7.1 #f #f #f #f temp152_0 phase<?153_0))))"
"(let-values(((lst_219) phases-in-order_2))"
"(begin"
"(check-list lst_219)"
"((letrec-values(((for-loop_194)"
"(lambda(lst_220)"
"(if(pair? lst_220)"
"(let-values(((phase_80)(unsafe-car lst_220))"
"((rest_115)(unsafe-cdr lst_220)))"
"(let-values(((post-guard-var_58)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_52)"
"(let-values()"
"(let-values()"
"(cons"
" phase_80"
"(let-values(((lst_221)"
"(reverse$1"
"(hash-ref"
" phase-to-mpis-in-order_0"
" phase_80))))"
"(begin"
"(check-list lst_221)"
"((letrec-values(((for-loop_65)"
"(lambda(lst_222)"
"(if(pair? lst_222)"
"(let-values(((mpi_37)"
"(unsafe-car"
" lst_222))"
"((rest_116)"
"(unsafe-cdr"
" lst_222)))"
"(let-values(((post-guard-var_59)"
"(lambda()"
" #t)))"
"(let-values()"
"(if(eq?"
" mpi_37"
" old-self_0)"
"(if(post-guard-var_59)"
"(for-loop_65"
" rest_116)"
" null)"
"(let-values()"
"(let-values(((elem_53)"
"(let-values()"
"(let-values()"
"(module-path-index-shift"
" mpi_37"
" old-self_0"
" new-self_1)))))"
"(let-values(((result_145)"
"(if(post-guard-var_59)"
"(for-loop_65"
" rest_116)"
" null)))"
"(cons"
" elem_53"
" result_145))))))))"
" null))))"
" for-loop_65)"
" lst_221))))))))"
"(let-values(((result_146)"
"(if(post-guard-var_58)"
"(for-loop_194 rest_115)"
" null)))"
"(cons elem_52 result_146))))))"
" null))))"
" for-loop_194)"
" lst_219))))))))"
"(let-values(((extract-provides_0)"
"(lambda()"
"(shift-provides-module-path-index(requires+provides-provides r+p_14) old-self_0 new-self_1))))"
"(values(extract-requires_0)(extract-provides_0))))))"
"(define-values"
"(shift-provides-module-path-index)"
"(lambda(provides_4 from-mpi_7 to-mpi_6)"
"(let-values(((ht_114) provides_4))"
"(begin"
"(check-in-hash ht_114)"
"((letrec-values(((for-loop_195)"
"(lambda(table_143 i_156)"
"(if i_156"
"(let-values(((phase_81 at-phase_10)(hash-iterate-key+value ht_114 i_156)))"
"(let-values(((table_144)"
"(let-values(((table_145) table_143))"
"(let-values(((table_146)"
"(let-values()"
"(let-values(((key_59 val_48)"
"(let-values()"
"(values"
" phase_81"
"(let-values(((ht_115) at-phase_10))"
"(begin"
"(check-in-hash ht_115)"
"((letrec-values(((for-loop_82)"
"(lambda(table_147"
" i_157)"
"(if i_157"
"(let-values(((sym_55"
" binding_15)"
"(hash-iterate-key+value"
" ht_115"
" i_157)))"
"(let-values(((table_148)"
"(let-values(((table_149)"
" table_147))"
"(if(symbol-interned?"
" sym_55)"
"(let-values(((table_150)"
" table_149))"
"(let-values(((table_151)"
"(let-values()"
"(let-values(((key_60"
" val_49)"
"(let-values()"
"(values"
" sym_55"
"(if(eq?"
" from-mpi_7"
" to-mpi_6)"
"(let-values()"
" binding_15)"
"(let-values()"
"((letrec-values(((loop_140)"
"(lambda(binding_16)"
"(if(provided?"
" binding_16)"
"(let-values()"
"(provided1.1"
"(loop_140"
"(provided-binding"
" binding_16))"
"(provided-protected?"
" binding_16)"
"(provided-syntax?"
" binding_16)))"
"(let-values()"
"(binding-module-path-index-shift"
" binding_16"
" from-mpi_7"
" to-mpi_6))))))"
" loop_140)"
" binding_15)))))))"
"(hash-set"
" table_150"
" key_60"
" val_49)))))"
"(values"
" table_151)))"
" table_149))))"
"(if(not"
" #f)"
"(for-loop_82"
" table_148"
"(hash-iterate-next"
" ht_115"
" i_157))"
" table_148)))"
" table_147))))"
" for-loop_82)"
" '#hasheq()"
"(hash-iterate-first ht_115))))))))"
"(hash-set table_145 key_59 val_48)))))"
"(values table_146)))))"
"(if(not #f)(for-loop_195 table_144(hash-iterate-next ht_114 i_156)) table_144)))"
" table_143))))"
" for-loop_195)"
" '#hasheqv()"
"(hash-iterate-first ht_114))))))"
"(define-values"
"(struct:adjust-only adjust-only1.1 adjust-only? adjust-only-syms)"
"(let-values(((struct:_1 make-_1 ?_1 -ref_1 -set!_1)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-only #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-only)))))"
"(values struct:_1 make-_1 ?_1(make-struct-field-accessor -ref_1 0 'syms))))"
"(define-values"
"(struct:adjust-prefix adjust-prefix2.1 adjust-prefix? adjust-prefix-sym)"
"(let-values(((struct:_67 make-_67 ?_67 -ref_67 -set!_67)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-prefix #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-prefix)))))"
"(values struct:_67 make-_67 ?_67(make-struct-field-accessor -ref_67 0 'sym))))"
"(define-values"
"(struct:adjust-all-except adjust-all-except3.1 adjust-all-except? adjust-all-except-prefix-sym adjust-all-except-syms)"
"(let-values(((struct:_41 make-_41 ?_41 -ref_41 -set!_41)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'adjust-all-except"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'adjust-all-except)))))"
"(values"
" struct:_41"
" make-_41"
" ?_41"
"(make-struct-field-accessor -ref_41 0 'prefix-sym)"
"(make-struct-field-accessor -ref_41 1 'syms))))"
"(define-values"
"(struct:adjust-rename adjust-rename4.1 adjust-rename? adjust-rename-to-id adjust-rename-from-sym)"
"(let-values(((struct:_68 make-_68 ?_68 -ref_68 -set!_68)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-rename #f 2 0 #f null(current-inspector) #f '(0 1) #f 'adjust-rename)))))"
"(values"
" struct:_68"
" make-_68"
" ?_68"
"(make-struct-field-accessor -ref_68 0 'to-id)"
"(make-struct-field-accessor -ref_68 1 'from-sym))))"
"(define-values(layers$1) '(raw phaseless path))"
"(define-values"
"(parse-and-perform-requires!30.1)"
"(lambda(copy-variable-as-constant?11_0"
" copy-variable-as-constant?21_0"
" copy-variable-phase-level10_0"
" copy-variable-phase-level20_0"
" declared-submodule-names9_0"
" declared-submodule-names19_0"
" initial-require?13_0"
" initial-require?23_0"
" run-phase6_0"
" run-phase16_0"
" run?7_0"
" run?17_0"
" self5_0"
" self15_0"
" skip-variable-phase-level12_0"
" skip-variable-phase-level22_0"
" visit?8_0"
" visit?18_0"
" who14_1"
" reqs25_0"
" orig-s26_0"
" m-ns27_0"
" phase-shift28_0"
" requires+provides29_0)"
"(let-values(((reqs_0) reqs25_0))"
"(let-values(((orig-s_11) orig-s26_0))"
"(let-values(((m-ns_8) m-ns27_0))"
"(let-values(((phase-shift_10) phase-shift28_0))"
"(let-values(((requires+provides_1) requires+provides29_0))"
"(let-values(((self_15)(if self15_0 self5_0 #f)))"
"(let-values(((run-phase_5)(if run-phase16_0 run-phase6_0(namespace-phase m-ns_8))))"
"(let-values(((run?_1)(if run?17_0 run?7_0 #f)))"
"(let-values(((visit?_1)(if visit?18_0 visit?8_0 #t)))"
"(let-values(((declared-submodule-names_2)"
"(if declared-submodule-names19_0 declared-submodule-names9_0 '#hasheq())))"
"(let-values(((copy-variable-phase-level_0)"
"(if copy-variable-phase-level20_0 copy-variable-phase-level10_0 #f)))"
"(let-values(((copy-variable-as-constant?_0)"
"(if copy-variable-as-constant?21_0 copy-variable-as-constant?11_0 #f)))"
"(let-values(((skip-variable-phase-level_0)"
"(if skip-variable-phase-level22_0 skip-variable-phase-level12_0 #f)))"
"(let-values(((initial-require?_0)(if initial-require?23_0 initial-require?13_0 #f)))"
"(let-values(((who_13) who14_1))"
"(let-values()"
"((letrec-values(((loop_141)"
"(lambda(reqs_1"
" top-req_0"
" phase-shift_11"
" just-meta_0"
" adjust_0"
" for-meta-ok?_0"
" just-meta-ok?_0"
" layer_5)"
"(let-values(((lst_223) reqs_1))"
"(begin"
"(check-list lst_223)"
"((letrec-values(((for-loop_34)"
"(lambda(result_102 lst_100)"
"(if(pair? lst_100)"
"(let-values(((req_0)"
"(unsafe-car lst_100))"
"((rest_48)"
"(unsafe-cdr lst_100)))"
"(let-values(((result_147)"
"(let-values()"
"(let-values(((result_86)"
"(let-values()"
"(let-values()"
"(let-values(((check-nested_0)"
"(let-values(((check-nested108_0)"
"(lambda(want-layer107_0"
" ok?105_0"
" ok?106_0)"
"(let-values(((want-layer_0)"
" want-layer107_0))"
"(let-values(((ok?_9)"
"(if ok?106_0"
" ok?105_0"
" #t)))"
"(let-values()"
"(if(if ok?_9"
"(member"
" want-layer_0"
"(member"
" layer_5"
" layers$1))"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"invalid nesting\""
" orig-s_11"
" req_0)))))))))"
"(case-lambda"
"((want-layer_1)"
"(check-nested108_0"
" want-layer_1"
" #f"
" #f))"
"((want-layer_2"
" ok?105_1)"
"(check-nested108_0"
" want-layer_2"
" ok?105_1"
" #t))))))"
"(let-values(((fm_0)"
"(if(pair?"
"(syntax-e$1"
" req_0))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" req_0)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" req_0)))"
" #f)"
" #f)))"
"(let-values(((tmp_27)"
" fm_0))"
"(if(equal?"
" tmp_27"
" 'for-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'raw"
" for-meta-ok?_0)"
"(values))))"
"(let-values(((ok?_10"
" for-meta110_0"
" phase-level111_0"
" spec112_0)"
"(let-values(((s_289)"
" req_0))"
"(let-values(((orig-s_12)"
" s_289))"
"(let-values(((for-meta110_1"
" phase-level111_1"
" spec112_1)"
"(let-values(((s_290)"
"(if(syntax?$1"
" s_289)"
"(syntax-e$1"
" s_289)"
" s_289)))"
"(if(pair?"
" s_290)"
"(let-values(((for-meta113_0)"
"(let-values(((s_57)"
"(car"
" s_290)))"
" s_57))"
"((phase-level114_0"
" spec115_0)"
"(let-values(((s_291)"
"(cdr"
" s_290)))"
"(let-values(((s_292)"
"(if(syntax?$1"
" s_291)"
"(syntax-e$1"
" s_291)"
" s_291)))"
"(if(pair?"
" s_292)"
"(let-values(((phase-level116_0)"
"(let-values(((s_293)"
"(car"
" s_292)))"
" s_293))"
"((spec117_0)"
"(let-values(((s_294)"
"(cdr"
" s_292)))"
"(let-values(((s_295)"
"(if(syntax?$1"
" s_294)"
"(syntax-e$1"
" s_294)"
" s_294)))"
"(let-values(((flat-s_6)"
"(to-syntax-list.1"
" s_295)))"
"(if(not"
" flat-s_6)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_12))"
"(let-values()"
" flat-s_6)))))))"
"(values"
" phase-level116_0"
" spec117_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_12))))))"
"(values"
" for-meta113_0"
" phase-level114_0"
" spec115_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_12)))))"
"(values"
" #t"
" for-meta110_1"
" phase-level111_1"
" spec112_1))))))"
"(let-values(((p_49)"
"(syntax-e$1"
" phase-level111_0)))"
"(begin"
"(if(phase?"
" p_49)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad phase\""
" orig-s_11"
" req_0)))"
"(loop_141"
" spec112_0"
"(let-values(((or-part_102)"
" top-req_0))"
"(if or-part_102"
" or-part_102"
" req_0))"
"(phase+"
" phase-shift_11"
" p_49)"
" just-meta_0"
" adjust_0"
" #f"
" just-meta-ok?_0"
" 'raw))))))"
"(if(equal?"
" tmp_27"
" 'for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'raw"
" for-meta-ok?_0)"
"(values))))"
"(let-values(((ok?_11"
" for-syntax118_0"
" spec119_0)"
"(let-values(((s_296)"
" req_0))"
"(let-values(((orig-s_13)"
" s_296))"
"(let-values(((for-syntax118_1"
" spec119_1)"
"(let-values(((s_297)"
"(if(syntax?$1"
" s_296)"
"(syntax-e$1"
" s_296)"
" s_296)))"
"(if(pair?"
" s_297)"
"(let-values(((for-syntax120_0)"
"(let-values(((s_298)"
"(car"
" s_297)))"
" s_298))"
"((spec121_0)"
"(let-values(((s_299)"
"(cdr"
" s_297)))"
"(let-values(((s_37)"
"(if(syntax?$1"
" s_299)"
"(syntax-e$1"
" s_299)"
" s_299)))"
"(let-values(((flat-s_7)"
"(to-syntax-list.1"
" s_37)))"
"(if(not"
" flat-s_7)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_13))"
"(let-values()"
" flat-s_7)))))))"
"(values"
" for-syntax120_0"
" spec121_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                         \"bad syntax\""
" orig-s_13)))))"
"(values"
" #t"
" for-syntax118_1"
" spec119_1))))))"
"(loop_141"
" spec119_0"
"(let-values(((or-part_117)"
" top-req_0))"
"(if or-part_117"
" or-part_117"
" req_0))"
"(phase+"
" phase-shift_11"
" 1)"
" just-meta_0"
" adjust_0"
" #f"
" just-meta-ok?_0"
" 'raw))))"
"(if(equal?"
" tmp_27"
" 'for-template)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'raw"
" for-meta-ok?_0)"
"(values))))"
"(let-values(((ok?_12"
" for-template122_0"
" spec123_0)"
"(let-values(((s_300)"
" req_0))"
"(let-values(((orig-s_14)"
" s_300))"
"(let-values(((for-template122_1"
" spec123_1)"
"(let-values(((s_301)"
"(if(syntax?$1"
" s_300)"
"(syntax-e$1"
" s_300)"
" s_300)))"
"(if(pair?"
" s_301)"
"(let-values(((for-template124_0)"
"(let-values(((s_66)"
"(car"
" s_301)))"
" s_66))"
"((spec125_0)"
"(let-values(((s_302)"
"(cdr"
" s_301)))"
"(let-values(((s_67)"
"(if(syntax?$1"
" s_302)"
"(syntax-e$1"
" s_302)"
" s_302)))"
"(let-values(((flat-s_8)"
"(to-syntax-list.1"
" s_67)))"
"(if(not"
" flat-s_8)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_14))"
"(let-values()"
" flat-s_8)))))))"
"(values"
" for-template124_0"
" spec125_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                           \"bad syntax\""
" orig-s_14)))))"
"(values"
" #t"
" for-template122_1"
" spec123_1))))))"
"(loop_141"
" spec123_0"
"(let-values(((or-part_118)"
" top-req_0))"
"(if or-part_118"
" or-part_118"
" req_0))"
"(phase+"
" phase-shift_11"
" -1)"
" just-meta_0"
" adjust_0"
" #f"
" just-meta-ok?_0"
" 'raw))))"
"(if(equal?"
" tmp_27"
" 'for-label)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'raw"
" for-meta-ok?_0)"
"(values))))"
"(let-values(((ok?_13"
" for-label126_0"
" spec127_0)"
"(let-values(((s_303)"
" req_0))"
"(let-values(((orig-s_15)"
" s_303))"
"(let-values(((for-label126_1"
" spec127_1)"
"(let-values(((s_304)"
"(if(syntax?$1"
" s_303)"
"(syntax-e$1"
" s_303)"
" s_303)))"
"(if(pair?"
" s_304)"
"(let-values(((for-label128_0)"
"(let-values(((s_305)"
"(car"
" s_304)))"
" s_305))"
"((spec129_0)"
"(let-values(((s_306)"
"(cdr"
" s_304)))"
"(let-values(((s_307)"
"(if(syntax?$1"
" s_306)"
"(syntax-e$1"
" s_306)"
" s_306)))"
"(let-values(((flat-s_9)"
"(to-syntax-list.1"
" s_307)))"
"(if(not"
" flat-s_9)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_15))"
"(let-values()"
" flat-s_9)))))))"
"(values"
" for-label128_0"
" spec129_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_15)))))"
"(values"
" #t"
" for-label126_1"
" spec127_1))))))"
"(loop_141"
" spec127_0"
"(let-values(((or-part_234)"
" top-req_0))"
"(if or-part_234"
" or-part_234"
" req_0))"
"(phase+"
" phase-shift_11"
" #f)"
" just-meta_0"
" adjust_0"
" #f"
" just-meta-ok?_0"
" 'raw))))"
"(if(equal?"
" tmp_27"
" 'just-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'raw"
" just-meta-ok?_0)"
"(values))))"
"(let-values(((ok?_14"
" just-meta130_0"
" phase-level131_0"
" spec132_0)"
"(let-values(((s_153)"
" req_0))"
"(let-values(((orig-s_16)"
" s_153))"
"(let-values(((just-meta130_1"
" phase-level131_1"
" spec132_1)"
"(let-values(((s_308)"
"(if(syntax?$1"
" s_153)"
"(syntax-e$1"
" s_153)"
" s_153)))"
"(if(pair?"
" s_308)"
"(let-values(((just-meta133_0)"
"(let-values(((s_102)"
"(car"
" s_308)))"
" s_102))"
"((phase-level134_0"
" spec135_0)"
"(let-values(((s_309)"
"(cdr"
" s_308)))"
"(let-values(((s_103)"
"(if(syntax?$1"
" s_309)"
"(syntax-e$1"
" s_309)"
" s_309)))"
"(if(pair?"
" s_103)"
"(let-values(((phase-level136_0)"
"(let-values(((s_310)"
"(car"
" s_103)))"
" s_310))"
"((spec137_0)"
"(let-values(((s_104)"
"(cdr"
" s_103)))"
"(let-values(((s_70)"
"(if(syntax?$1"
" s_104)"
"(syntax-e$1"
" s_104)"
" s_104)))"
"(let-values(((flat-s_10)"
"(to-syntax-list.1"
" s_70)))"
"(if(not"
" flat-s_10)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_16))"
"(let-values()"
" flat-s_10)))))))"
"(values"
" phase-level136_0"
" spec137_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_16))))))"
"(values"
" just-meta133_0"
" phase-level134_0"
" spec135_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_16)))))"
"(values"
" #t"
" just-meta130_1"
" phase-level131_1"
" spec132_1))))))"
"(let-values(((p_50)"
"(syntax-e$1"
" phase-level131_0)))"
"(begin"
"(if(phase?"
" p_50)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                     \"bad phase\""
" orig-s_11"
" req_0)))"
"(loop_141"
" spec132_0"
"(let-values(((or-part_235)"
" top-req_0))"
"(if or-part_235"
" or-part_235"
" req_0))"
" phase-shift_11"
" p_50"
" adjust_0"
" for-meta-ok?_0"
" #f"
" 'raw))))))"
"(if(equal?"
" tmp_27"
" 'only)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_15"
" only138_0"
" spec139_0"
" id140_0)"
"(let-values(((s_113)"
" req_0))"
"(let-values(((orig-s_17)"
" s_113))"
"(let-values(((only138_1"
" spec139_1"
" id140_1)"
"(let-values(((s_311)"
"(if(syntax?$1"
" s_113)"
"(syntax-e$1"
" s_113)"
" s_113)))"
"(if(pair?"
" s_311)"
"(let-values(((only141_0)"
"(let-values(((s_312)"
"(car"
" s_311)))"
" s_312))"
"((spec142_0"
" id143_0)"
"(let-values(((s_116)"
"(cdr"
" s_311)))"
"(let-values(((s_218)"
"(if(syntax?$1"
" s_116)"
"(syntax-e$1"
" s_116)"
" s_116)))"
"(if(pair?"
" s_218)"
"(let-values(((spec144_0)"
"(let-values(((s_313)"
"(car"
" s_218)))"
" s_313))"
"((id145_0)"
"(let-values(((s_314)"
"(cdr"
" s_218)))"
"(let-values(((s_315)"
"(if(syntax?$1"
" s_314)"
"(syntax-e$1"
" s_314)"
" s_314)))"
"(let-values(((flat-s_11)"
"(to-syntax-list.1"
" s_315)))"
"(if(not"
" flat-s_11)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_17))"
"(let-values()"
"(let-values(((id_36)"
"(let-values(((lst_224)"
" flat-s_11))"
"(begin"
"(check-list"
" lst_224)"
"((letrec-values(((for-loop_196)"
"(lambda(id_37"
" lst_225)"
"(if(pair?"
" lst_225)"
"(let-values(((s_118)"
"(unsafe-car"
" lst_225))"
"((rest_117)"
"(unsafe-cdr"
" lst_225)))"
"(let-values(((id_38)"
"(let-values(((id_39)"
" id_37))"
"(let-values(((id_40)"
"(let-values()"
"(let-values(((id146_0)"
"(let-values()"
"(if(let-values(((or-part_236)"
"(if(syntax?$1"
" s_118)"
"(symbol?"
"(syntax-e$1"
" s_118))"
" #f)))"
"(if or-part_236"
" or-part_236"
"(symbol?"
" s_118)))"
" s_118"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_17"
" s_118)))))"
"(cons"
" id146_0"
" id_39)))))"
"(values"
" id_40)))))"
"(if(not"
" #f)"
"(for-loop_196"
" id_38"
" rest_117)"
" id_38)))"
" id_37))))"
" for-loop_196)"
" null"
" lst_224)))))"
"(reverse$1"
" id_36)))))))))"
"(values"
" spec144_0"
" id145_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_17))))))"
"(values"
" only141_0"
" spec142_0"
" id143_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_17)))))"
"(values"
" #t"
" only138_1"
" spec139_1"
" id140_1))))))"
"(loop_141"
"(list"
" spec139_0)"
"(let-values(((or-part_237)"
" top-req_0))"
"(if or-part_237"
" or-part_237"
" req_0))"
" phase-shift_11"
" just-meta_0"
"(adjust-only1.1"
"(ids->sym-set"
" id140_0))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_27"
" 'prefix)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_16"
" prefix147_0"
" id:prefix148_0"
" spec149_0)"
"(let-values(((s_316)"
" req_0))"
"(let-values(((orig-s_18)"
" s_316))"
"(let-values(((prefix147_1"
" id:prefix148_1"
" spec149_1)"
"(let-values(((s_317)"
"(if(syntax?$1"
" s_316)"
"(syntax-e$1"
" s_316)"
" s_316)))"
"(if(pair?"
" s_317)"
"(let-values(((prefix150_0)"
"(let-values(((s_318)"
"(car"
" s_317)))"
" s_318))"
"((id:prefix151_0"
" spec152_0)"
"(let-values(((s_319)"
"(cdr"
" s_317)))"
"(let-values(((s_320)"
"(if(syntax?$1"
" s_319)"
"(syntax-e$1"
" s_319)"
" s_319)))"
"(if(pair?"
" s_320)"
"(let-values(((id:prefix153_0)"
"(let-values(((s_223)"
"(car"
" s_320)))"
"(if(let-values(((or-part_238)"
"(if(syntax?$1"
" s_223)"
"(symbol?"
"(syntax-e$1"
" s_223))"
" #f)))"
"(if or-part_238"
" or-part_238"
"(symbol?"
" s_223)))"
" s_223"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_18"
" s_223))))"
"((spec154_0)"
"(let-values(((s_225)"
"(cdr"
" s_320)))"
"(let-values(((s_226)"
"(if(syntax?$1"
" s_225)"
"(syntax-e$1"
" s_225)"
" s_225)))"
"(if(pair?"
" s_226)"
"(let-values(((spec155_0)"
"(let-values(((s_228)"
"(car"
" s_226)))"
" s_228))"
"(()"
"(let-values(((s_189)"
"(cdr"
" s_226)))"
"(let-values(((s_229)"
"(if(syntax?$1"
" s_189)"
"(syntax-e$1"
" s_189)"
" s_189)))"
"(if(null?"
" s_229)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_18))))))"
"(values"
" spec155_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_18))))))"
"(values"
" id:prefix153_0"
" spec154_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_18))))))"
"(values"
" prefix150_0"
" id:prefix151_0"
" spec152_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                   \"bad syntax\""
" orig-s_18)))))"
"(values"
" #t"
" prefix147_1"
" id:prefix148_1"
" spec149_1))))))"
"(loop_141"
"(list"
" spec149_0)"
"(let-values(((or-part_239)"
" top-req_0))"
"(if or-part_239"
" or-part_239"
" req_0))"
" phase-shift_11"
" just-meta_0"
"(adjust-prefix2.1"
"(syntax-e$1"
" id:prefix148_0))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_27"
" 'all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_17"
" all-except156_0"
" spec157_0"
" id158_0)"
"(let-values(((s_321)"
" req_0))"
"(let-values(((orig-s_19)"
" s_321))"
"(let-values(((all-except156_1"
" spec157_1"
" id158_1)"
"(let-values(((s_322)"
"(if(syntax?$1"
" s_321)"
"(syntax-e$1"
" s_321)"
" s_321)))"
"(if(pair?"
" s_322)"
"(let-values(((all-except159_0)"
"(let-values(((s_244)"
"(car"
" s_322)))"
" s_244))"
"((spec160_0"
" id161_0)"
"(let-values(((s_245)"
"(cdr"
" s_322)))"
"(let-values(((s_323)"
"(if(syntax?$1"
" s_245)"
"(syntax-e$1"
" s_245)"
" s_245)))"
"(if(pair?"
" s_323)"
"(let-values(((spec162_0)"
"(let-values(((s_324)"
"(car"
" s_323)))"
" s_324))"
"((id163_0)"
"(let-values(((s_246)"
"(cdr"
" s_323)))"
"(let-values(((s_247)"
"(if(syntax?$1"
" s_246)"
"(syntax-e$1"
" s_246)"
" s_246)))"
"(let-values(((flat-s_12)"
"(to-syntax-list.1"
" s_247)))"
"(if(not"
" flat-s_12)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_19))"
"(let-values()"
"(let-values(((id_41)"
"(let-values(((lst_226)"
" flat-s_12))"
"(begin"
"(check-list"
" lst_226)"
"((letrec-values(((for-loop_197)"
"(lambda(id_42"
" lst_227)"
"(if(pair?"
" lst_227)"
"(let-values(((s_251)"
"(unsafe-car"
" lst_227))"
"((rest_118)"
"(unsafe-cdr"
" lst_227)))"
"(let-values(((id_43)"
"(let-values(((id_44)"
" id_42))"
"(let-values(((id_45)"
"(let-values()"
"(let-values(((id164_0)"
"(let-values()"
"(if(let-values(((or-part_240)"
"(if(syntax?$1"
" s_251)"
"(symbol?"
"(syntax-e$1"
" s_251))"
" #f)))"
"(if or-part_240"
" or-part_240"
"(symbol?"
" s_251)))"
" s_251"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_19"
" s_251)))))"
"(cons"
" id164_0"
" id_44)))))"
"(values"
" id_45)))))"
"(if(not"
" #f)"
"(for-loop_197"
" id_43"
" rest_118)"
" id_43)))"
" id_42))))"
" for-loop_197)"
" null"
" lst_226)))))"
"(reverse$1"
" id_41)))))))))"
"(values"
" spec162_0"
" id163_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_19))))))"
"(values"
" all-except159_0"
" spec160_0"
" id161_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                     \"bad syntax\""
" orig-s_19)))))"
"(values"
" #t"
" all-except156_1"
" spec157_1"
" id158_1))))))"
"(loop_141"
"(list"
" spec157_0)"
"(let-values(((or-part_241)"
" top-req_0))"
"(if or-part_241"
" or-part_241"
" req_0))"
" phase-shift_11"
" just-meta_0"
"(adjust-all-except3.1"
" '||"
"(ids->sym-set"
" id158_0))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_27"
" 'prefix-all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_18"
" prefix-all-except165_0"
" id:prefix166_0"
" spec167_0"
" id168_0)"
"(let-values(((s_325)"
" req_0))"
"(let-values(((orig-s_20)"
" s_325))"
"(let-values(((prefix-all-except165_1"
" id:prefix166_1"
" spec167_1"
" id168_1)"
"(let-values(((s_326)"
"(if(syntax?$1"
" s_325)"
"(syntax-e$1"
" s_325)"
" s_325)))"
"(if(pair?"
" s_326)"
"(let-values(((prefix-all-except169_0)"
"(let-values(((s_327)"
"(car"
" s_326)))"
" s_327))"
"((id:prefix170_0"
" spec171_0"
" id172_0)"
"(let-values(((s_328)"
"(cdr"
" s_326)))"
"(let-values(((s_329)"
"(if(syntax?$1"
" s_328)"
"(syntax-e$1"
" s_328)"
" s_328)))"
"(if(pair?"
" s_329)"
"(let-values(((id:prefix173_0)"
"(let-values(((s_330)"
"(car"
" s_329)))"
"(if(let-values(((or-part_242)"
"(if(syntax?$1"
" s_330)"
"(symbol?"
"(syntax-e$1"
" s_330))"
" #f)))"
"(if or-part_242"
" or-part_242"
"(symbol?"
" s_330)))"
" s_330"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_20"
" s_330))))"
"((spec174_0"
" id175_0)"
"(let-values(((s_331)"
"(cdr"
" s_329)))"
"(let-values(((s_332)"
"(if(syntax?$1"
" s_331)"
"(syntax-e$1"
" s_331)"
" s_331)))"
"(if(pair?"
" s_332)"
"(let-values(((spec176_0)"
"(let-values(((s_333)"
"(car"
" s_332)))"
" s_333))"
"((id177_0)"
"(let-values(((s_334)"
"(cdr"
" s_332)))"
"(let-values(((s_335)"
"(if(syntax?$1"
" s_334)"
"(syntax-e$1"
" s_334)"
" s_334)))"
"(let-values(((flat-s_13)"
"(to-syntax-list.1"
" s_335)))"
"(if(not"
" flat-s_13)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_20))"
"(let-values()"
"(let-values(((id_46)"
"(let-values(((lst_228)"
" flat-s_13))"
"(begin"
"(check-list"
" lst_228)"
"((letrec-values(((for-loop_198)"
"(lambda(id_47"
" lst_229)"
"(if(pair?"
" lst_229)"
"(let-values(((s_267)"
"(unsafe-car"
" lst_229))"
"((rest_119)"
"(unsafe-cdr"
" lst_229)))"
"(let-values(((id_48)"
"(let-values(((id_49)"
" id_47))"
"(let-values(((id_50)"
"(let-values()"
"(let-values(((id178_0)"
"(let-values()"
"(if(let-values(((or-part_129)"
"(if(syntax?$1"
" s_267)"
"(symbol?"
"(syntax-e$1"
" s_267))"
" #f)))"
"(if or-part_129"
" or-part_129"
"(symbol?"
" s_267)))"
" s_267"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_20"
" s_267)))))"
"(cons"
" id178_0"
" id_49)))))"
"(values"
" id_50)))))"
"(if(not"
" #f)"
"(for-loop_198"
" id_48"
" rest_119)"
" id_48)))"
" id_47))))"
" for-loop_198)"
" null"
" lst_228)))))"
"(reverse$1"
" id_46)))))))))"
"(values"
" spec176_0"
" id177_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_20))))))"
"(values"
" id:prefix173_0"
" spec174_0"
" id175_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_20))))))"
"(values"
" prefix-all-except169_0"
" id:prefix170_0"
" spec171_0"
" id172_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                       \"bad syntax\""
" orig-s_20)))))"
"(values"
" #t"
" prefix-all-except165_1"
" id:prefix166_1"
" spec167_1"
" id168_1))))))"
"(loop_141"
"(list"
" spec167_0)"
"(let-values(((or-part_243)"
" top-req_0))"
"(if or-part_243"
" or-part_243"
" req_0))"
" phase-shift_11"
" just-meta_0"
"(adjust-all-except3.1"
"(syntax-e$1"
" id:prefix166_0)"
"(ids->sym-set"
" id168_0))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_27"
" 'rename)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_19"
" rename179_0"
" spec180_0"
" id:to181_0"
" id:from182_0)"
"(let-values(((s_282)"
" req_0))"
"(let-values(((orig-s_21)"
" s_282))"
"(let-values(((rename179_1"
" spec180_1"
" id:to181_1"
" id:from182_1)"
"(let-values(((s_336)"
"(if(syntax?$1"
" s_282)"
"(syntax-e$1"
" s_282)"
" s_282)))"
"(if(pair?"
" s_336)"
"(let-values(((rename183_0)"
"(let-values(((s_337)"
"(car"
" s_336)))"
" s_337))"
"((spec184_0"
" id:to185_0"
" id:from186_0)"
"(let-values(((s_338)"
"(cdr"
" s_336)))"
"(let-values(((s_339)"
"(if(syntax?$1"
" s_338)"
"(syntax-e$1"
" s_338)"
" s_338)))"
"(if(pair?"
" s_339)"
"(let-values(((spec187_0)"
"(let-values(((s_123)"
"(car"
" s_339)))"
" s_123))"
"((id:to188_0"
" id:from189_0)"
"(let-values(((s_340)"
"(cdr"
" s_339)))"
"(let-values(((s_341)"
"(if(syntax?$1"
" s_340)"
"(syntax-e$1"
" s_340)"
" s_340)))"
"(if(pair?"
" s_341)"
"(let-values(((id:to190_0)"
"(let-values(((s_342)"
"(car"
" s_341)))"
"(if(let-values(((or-part_244)"
"(if(syntax?$1"
" s_342)"
"(symbol?"
"(syntax-e$1"
" s_342))"
" #f)))"
"(if or-part_244"
" or-part_244"
"(symbol?"
" s_342)))"
" s_342"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_21"
" s_342))))"
"((id:from191_0)"
"(let-values(((s_343)"
"(cdr"
" s_341)))"
"(let-values(((s_344)"
"(if(syntax?$1"
" s_343)"
"(syntax-e$1"
" s_343)"
" s_343)))"
"(if(pair?"
" s_344)"
"(let-values(((id:from192_0)"
"(let-values(((s_345)"
"(car"
" s_344)))"
"(if(let-values(((or-part_245)"
"(if(syntax?$1"
" s_345)"
"(symbol?"
"(syntax-e$1"
" s_345))"
" #f)))"
"(if or-part_245"
" or-part_245"
"(symbol?"
" s_345)))"
" s_345"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_21"
" s_345))))"
"(()"
"(let-values(((s_346)"
"(cdr"
" s_344)))"
"(let-values(((s_347)"
"(if(syntax?$1"
" s_346)"
"(syntax-e$1"
" s_346)"
" s_346)))"
"(if(null?"
" s_347)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_21))))))"
"(values"
" id:from192_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_21))))))"
"(values"
" id:to190_0"
" id:from191_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_21))))))"
"(values"
" spec187_0"
" id:to188_0"
" id:from189_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"bad syntax\""
" orig-s_21))))))"
"(values"
" rename183_0"
" spec184_0"
" id:to185_0"
" id:from186_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                         \"bad syntax\""
" orig-s_21)))))"
"(values"
" #t"
" rename179_1"
" spec180_1"
" id:to181_1"
" id:from182_1))))))"
"(loop_141"
"(list"
" spec180_0)"
"(let-values(((or-part_246)"
" top-req_0))"
"(if or-part_246"
" or-part_246"
" req_0))"
" phase-shift_11"
" just-meta_0"
"(adjust-rename4.1"
" id:to181_0"
"(syntax-e$1"
" id:from182_0))"
" #f"
" #f"
" 'path))))"
"(let-values()"
"(let-values(((maybe-mp_0)"
"(syntax->datum$1"
" req_0)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_247)"
"(1/module-path?"
" maybe-mp_0)))"
"(if or-part_247"
" or-part_247"
"(1/resolved-module-path?"
" maybe-mp_0)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                         \"bad require spec\""
" orig-s_11"
" req_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_248)"
" adjust_0))"
"(if or-part_248"
" or-part_248"
"(not"
"(eq?"
" just-meta_0"
" 'all))))"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" requires+provides_1"
" #f))"
"(void))"
"(values))))"
"(let-values(((mp_0)"
"(if(1/resolved-module-path?"
" maybe-mp_0)"
"(resolved-module-path->module-path"
" maybe-mp_0)"
" maybe-mp_0)))"
"(let-values(((mpi_38)"
"(let-values(((declared-submodule-names212_0)"
" declared-submodule-names_2))"
"(module-path->mpi5.1"
" declared-submodule-names212_0"
" #t"
" mp_0"
" self_15))))"
"(begin"
"(let-values(((temp196_0)"
"(let-values(((or-part_249)"
" req_0))"
"(if or-part_249"
" or-part_249"
" top-req_0)))"
"((m-ns197_0)"
" m-ns_8)"
"((phase-shift198_0)"
" phase-shift_11)"
"((run-phase199_1)"
" run-phase_5)"
"((just-meta200_0)"
" just-meta_0)"
"((adjust201_0)"
" adjust_0)"
"((requires+provides202_0)"
" requires+provides_1)"
"((run?203_0)"
" run?_1)"
"((visit?204_0)"
" visit?_1)"
"((copy-variable-phase-level205_0)"
" copy-variable-phase-level_0)"
"((copy-variable-as-constant?206_0)"
" copy-variable-as-constant?_0)"
"((skip-variable-phase-level207_0)"
" skip-variable-phase-level_0)"
"((initial-require?208_0)"
" initial-require?_0)"
"((who209_0)"
" who_13))"
"(perform-require!74.1"
" adjust201_0"
" #t"
" #f"
" #f"
" copy-variable-as-constant?206_0"
" #t"
" copy-variable-phase-level205_0"
" #t"
" initial-require?208_0"
" #t"
" just-meta200_0"
" #t"
" phase-shift198_0"
" requires+provides202_0"
" #t"
" run-phase199_1"
" run?203_0"
" #t"
" skip-variable-phase-level207_0"
" #t"
" visit?204_0"
" #t"
" who209_0"
" mpi_38"
" req_0"
" self_15"
" temp196_0"
" m-ns197_0))"
"(set! initial-require?_0"
" #f)))))))))))))))))))))))))"
"(values"
" result_86)))))"
"(if(if(not"
"((lambda x_108"
"(not result_147))"
" req_0))"
"(not #f)"
" #f)"
"(for-loop_34 result_147 rest_48)"
" result_147)))"
" result_102))))"
" for-loop_34)"
" #t"
" lst_223))))))"
" loop_141)"
" reqs_0"
" #f"
" phase-shift_10"
" 'all"
" #f"
" #t"
" #t"
" 'raw)))))))))))))))))))"
"(define-values"
"(ids->sym-set)"
"(lambda(ids_14)"
"(let-values(((lst_230) ids_14))"
"(begin"
"(check-list lst_230)"
"((letrec-values(((for-loop_199)"
"(lambda(table_152 lst_231)"
"(if(pair? lst_231)"
"(let-values(((id_51)(unsafe-car lst_231))((rest_120)(unsafe-cdr lst_231)))"
"(let-values(((table_153)"
"(let-values(((table_154) table_152))"
"(let-values(((table_155)"
"(let-values()"
"(let-values(((key_61 val_50)"
"(let-values()"
"(values"
"(let-values()(syntax-e$1 id_51))"
" #t))))"
"(hash-set table_154 key_61 val_50)))))"
"(values table_155)))))"
"(if(not #f)(for-loop_199 table_153 rest_120) table_153)))"
" table_152))))"
" for-loop_199)"
" '#hash()"
" lst_230)))))"
"(define-values"
"(perform-initial-require!40.1)"
"(lambda(who33_0 mod-path35_0 self36_0 in-stx37_0 m-ns38_0 requires+provides39_0)"
"(let-values(((mod-path_7) mod-path35_0))"
"(let-values(((self_16) self36_0))"
"(let-values(((in-stx_0) in-stx37_0))"
"(let-values(((m-ns_9) m-ns38_0))"
"(let-values(((requires+provides_2) requires+provides39_0))"
"(let-values(((who_14) who33_0))"
"(let-values()"
"(let-values(((temp213_1)"
"(let-values(((mod-path224_0) mod-path_7)((self225_0) self_16))"
"(module-path->mpi5.1 #f #f mod-path224_0 self225_0)))"
"((temp214_1) #f)"
"((self215_0) self_16)"
"((in-stx216_0) in-stx_0)"
"((m-ns217_0) m-ns_9)"
"((temp218_0) 0)"
"((temp219_0) 0)"
"((requires+provides220_0) requires+provides_2)"
"((temp221_1) #t)"
"((temp222_0) #t)"
"((who223_0) who_14))"
"(perform-require!74.1"
" #f"
" #f"
" temp221_1"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp222_0"
" #t"
" #f"
" #f"
" temp218_0"
" requires+provides220_0"
" #t"
" temp219_0"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" who223_0"
" temp213_1"
" temp214_1"
" self215_0"
" in-stx216_0"
" m-ns217_0)))))))))))"
"(define-values"
"(perform-require!74.1)"
"(lambda(adjust46_0"
" adjust59_0"
" can-be-shadowed?50_0"
" can-be-shadowed?63_0"
" copy-variable-as-constant?53_0"
" copy-variable-as-constant?66_0"
" copy-variable-phase-level52_0"
" copy-variable-phase-level65_0"
" initial-require?51_0"
" initial-require?64_0"
" just-meta45_0"
" just-meta58_0"
" phase-shift43_0"
" requires+provides47_0"
" requires+provides60_0"
" run-phase44_0"
" run?49_0"
" run?62_0"
" skip-variable-phase-level54_0"
" skip-variable-phase-level67_0"
" visit?48_0"
" visit?61_0"
" who55_0"
" mpi69_0"
" orig-s70_0"
" self71_0"
" in-stx72_0"
" m-ns73_0)"
"(let-values(((mpi_39) mpi69_0))"
"(let-values(((orig-s_22) orig-s70_0))"
"(let-values()"
"(let-values(((in-stx_1) in-stx72_0))"
"(let-values(((m-ns_10) m-ns73_0))"
"(let-values(((phase-shift_12) phase-shift43_0))"
"(let-values(((run-phase_6) run-phase44_0))"
"(let-values(((just-meta_1)(if just-meta58_0 just-meta45_0 'all)))"
"(let-values(((adjust_1)(if adjust59_0 adjust46_0 #f)))"
"(let-values(((requires+provides_3)(if requires+provides60_0 requires+provides47_0 #f)))"
"(let-values(((visit?_2)(if visit?61_0 visit?48_0 #t)))"
"(let-values(((run?_2)(if run?62_0 run?49_0 #f)))"
"(let-values(((can-be-shadowed?_3)(if can-be-shadowed?63_0 can-be-shadowed?50_0 #f)))"
"(let-values(((initial-require?_1)(if initial-require?64_0 initial-require?51_0 #f)))"
"(let-values(((copy-variable-phase-level_1)"
"(if copy-variable-phase-level65_0 copy-variable-phase-level52_0 #f)))"
"(let-values(((copy-variable-as-constant?_1)"
"(if copy-variable-as-constant?66_0 copy-variable-as-constant?53_0 #f)))"
"(let-values(((skip-variable-phase-level_1)"
"(if skip-variable-phase-level67_0 skip-variable-phase-level54_0 #f)))"
"(let-values(((who_15) who55_0))"
"(let-values()"
"(let-values()"
"(let-values(((module-name_0)(1/module-path-index-resolve mpi_39 #t)))"
"(let-values(((bind-in-stx_0)"
"(if(adjust-rename? adjust_1)"
"(adjust-rename-to-id adjust_1)"
" in-stx_1)))"
"(let-values(((done-syms_0)(if adjust_1(make-hash) #f)))"
"(let-values(((m_13)(namespace->module m-ns_10 module-name_0)))"
"(let-values((()"
"(begin"
"(if m_13"
"(void)"
"(let-values()"
"(raise-unknown-module-error"
" 'require"
" module-name_0)))"
"(values))))"
"(let-values(((interned-mpi_0)"
"(if requires+provides_3"
"(add-required-module!"
" requires+provides_3"
" mpi_39"
" phase-shift_12"
"(module-cross-phase-persistent? m_13))"
" mpi_39)))"
"(let-values((()"
"(begin"
"(if visit?_2"
"(let-values()"
"(let-values(((run-phase242_0) run-phase_6))"
"(namespace-module-visit!102.1"
" run-phase242_0"
" #t"
" m-ns_10"
" interned-mpi_0"
" phase-shift_12)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if run?_2"
"(let-values()"
"(let-values(((run-phase246_0)"
" run-phase_6))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" run-phase246_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" m-ns_10"
" interned-mpi_0"
" phase-shift_12)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(not"
"(let-values(((or-part_250) visit?_2))"
"(if or-part_250 or-part_250 run?_2)))"
"(let-values()"
"(let-values(((run-phase250_0)"
" run-phase_6))"
"(namespace-module-make-available!110.1"
" run-phase250_0"
" #t"
" m-ns_10"
" interned-mpi_0"
" phase-shift_12)))"
"(void))"
"(values))))"
"(let-values(((can-bulk-bind?_0)"
"(if(let-values(((or-part_251)"
"(not adjust_1)))"
"(if or-part_251"
" or-part_251"
"(let-values(((or-part_252)"
"(adjust-prefix?"
" adjust_1)))"
"(if or-part_252"
" or-part_252"
"(adjust-all-except?"
" adjust_1)))))"
"(not skip-variable-phase-level_1)"
" #f)))"
"(let-values(((bulk-prefix_1)"
"(if(adjust-prefix? adjust_1)"
"(let-values()"
"(adjust-prefix-sym adjust_1))"
"(if(adjust-all-except? adjust_1)"
"(let-values()"
"(adjust-all-except-prefix-sym"
" adjust_1))"
"(let-values() #f)))))"
"(let-values(((bulk-excepts_1)"
"(if(adjust-all-except? adjust_1)"
"(let-values()"
"(adjust-all-except-syms adjust_1))"
"(let-values() '#hasheq()))))"
"(let-values(((update-nominals-box_0)"
"(if can-bulk-bind?_0(box null) #f)))"
"(let-values((()"
"(begin"
"(let-values(((orig-s231_0)"
" orig-s_22)"
"((temp232_0)"
"(if(adjust-only?"
" adjust_1)"
"(let-values()"
"(set->list"
"(adjust-only-syms"
" adjust_1)))"
"(if(adjust-rename?"
" adjust_1)"
"(let-values()"
"(list"
"(adjust-rename-from-sym"
" adjust_1)))"
"(let-values()"
" #f))))"
"((just-meta233_0)"
" just-meta_1)"
"((can-bulk-bind?234_0)"
" can-bulk-bind?_0)"
"((bulk-prefix235_0)"
" bulk-prefix_1)"
"((bulk-excepts236_0)"
" bulk-excepts_1)"
"((temp237_0)"
"(if requires+provides_3"
"(if can-bulk-bind?_0"
"(lambda(provides_5"
" provide-phase-level_4)"
"(let-values(((temp253_0)"
"(module-self"
" m_13))"
"((mpi254_0)"
" mpi_39)"
"((phase-shift255_0)"
" phase-shift_12)"
"((provides256_0)"
" provides_5)"
"((provide-phase-level257_0)"
" provide-phase-level_4)"
"((bulk-prefix258_0)"
" bulk-prefix_1)"
"((bulk-excepts259_0)"
" bulk-excepts_1)"
"((temp260_0)"
"(if(positive?"
"(hash-count"
" bulk-excepts_1))"
" done-syms_0"
" #f))"
"((can-be-shadowed?261_0)"
" can-be-shadowed?_3)"
"((temp262_0)"
"(not"
" initial-require?_1))"
"((orig-s263_0)"
" orig-s_22)"
"((update-nominals-box264_0)"
" update-nominals-box_0)"
"((who265_0)"
" who_15))"
"(add-bulk-required-ids!53.1"
" update-nominals-box264_0"
" can-be-shadowed?261_0"
" temp262_0"
" bulk-excepts259_0"
" orig-s263_0"
" bulk-prefix258_0"
" temp260_0"
" who265_0"
" requires+provides_3"
" bind-in-stx_0"
" temp253_0"
" mpi254_0"
" phase-shift255_0"
" provides256_0"
" provide-phase-level257_0)))"
" #f)"
" #f))"
"((temp238_0)"
"(if(let-values(((or-part_253)"
"(not"
" can-bulk-bind?_0)))"
"(if or-part_253"
" or-part_253"
" copy-variable-phase-level_1))"
"(lambda(binding_17"
" as-transformer?_3)"
"(let-values(((sym_56)"
"(module-binding-nominal-sym"
" binding_17)))"
"(let-values(((provide-phase_0)"
"(module-binding-nominal-phase"
" binding_17)))"
"(let-values(((adjusted-sym_0)"
"(if(if skip-variable-phase-level_1"
"(if(not"
" as-transformer?_3)"
"(equal?"
" provide-phase_0"
" skip-variable-phase-level_1)"
" #f)"
" #f)"
"(let-values()"
" #f)"
"(if(not"
" adjust_1)"
"(let-values()"
" sym_56)"
"(if(adjust-only?"
" adjust_1)"
"(let-values()"
"(if(set-member?"
"(adjust-only-syms"
" adjust_1)"
" sym_56)"
"(if(hash-set!"
" done-syms_0"
" sym_56"
" #t)"
" sym_56"
" #f)"
" #f))"
"(if(adjust-prefix?"
" adjust_1)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                                      \"~a~a\""
"(adjust-prefix-sym"
" adjust_1)"
" sym_56)))"
"(if(adjust-all-except?"
" adjust_1)"
"(let-values()"
"(if(not"
"(if(set-member?"
"(adjust-all-except-syms"
" adjust_1)"
" sym_56)"
"(hash-set!"
" done-syms_0"
" sym_56"
" #t)"
" #f))"
"(string->symbol"
"(format"
"                                                                                                                                          \"~a~a\""
"(adjust-all-except-prefix-sym"
" adjust_1)"
" sym_56))"
" #f))"
"(if(adjust-rename?"
" adjust_1)"
"(let-values()"
"(if(eq?"
" sym_56"
"(adjust-rename-from-sym"
" adjust_1))"
"(if(hash-set!"
" done-syms_0"
" sym_56"
" #t)"
"(adjust-rename-to-id"
" adjust_1)"
" #f)"
" #f))"
"(void)))))))))"
"(begin"
"(if(if adjusted-sym_0"
" requires+provides_3"
" #f)"
"(let-values()"
"(let-values(((s_348)"
"(datum->syntax$1"
" bind-in-stx_0"
" adjusted-sym_0)))"
"(let-values(((bind-phase_0)"
"(phase+"
" phase-shift_12"
" provide-phase_0)))"
"(begin"
"(if initial-require?_1"
"(void)"
"(let-values()"
"(let-values(((temp272_0)"
" #t)"
"((requires+provides273_0)"
" requires+provides_3)"
"((s274_0)"
" s_348)"
"((bind-phase275_0)"
" bind-phase_0)"
"((binding276_0)"
" binding_17)"
"((orig-s277_0)"
" orig-s_22)"
"((temp278_0)"
" #t)"
"((who279_0)"
" who_15))"
"(check-not-defined87.1"
" #f"
" #f"
" temp272_0"
" #t"
" orig-s277_0"
" temp278_0"
" #t"
" binding276_0"
" #t"
" who279_0"
" requires+provides273_0"
" s274_0"
" bind-phase275_0))))"
"(let-values(((can-be-shadowed?270_0)"
" can-be-shadowed?_3)"
"((as-transformer?271_0)"
" as-transformer?_3))"
"(add-defined-or-required-id!13.1"
" as-transformer?271_0"
" can-be-shadowed?270_0"
" #t"
" requires+provides_3"
" s_348"
" bind-phase_0"
" binding_17))))))"
"(void))"
"(if(if adjusted-sym_0"
"(if copy-variable-phase-level_1"
"(if(not"
" as-transformer?_3)"
"(equal?"
" provide-phase_0"
" copy-variable-phase-level_1)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(copy-namespace-value"
" m-ns_10"
" adjusted-sym_0"
" binding_17"
" copy-variable-phase-level_1"
" phase-shift_12"
" copy-variable-as-constant?_1))"
"(void))"
" adjusted-sym_0)))))"
" #f)))"
"(bind-all-provides!98.1"
" temp237_0"
" bulk-excepts236_0"
" bulk-prefix235_0"
" can-bulk-bind?234_0"
" temp238_0"
" orig-s231_0"
" just-meta233_0"
" temp232_0"
" m_13"
" bind-in-stx_0"
" phase-shift_12"
" m-ns_10"
" interned-mpi_0))"
"(values))))"
"(let-values((()"
"(begin"
"(if update-nominals-box_0"
"(let-values()"
"(begin"
"(let-values(((lst_203)"
"(unbox"
" update-nominals-box_0)))"
"(begin"
"(check-list lst_203)"
"((letrec-values(((for-loop_200)"
"(lambda(lst_232)"
"(if(pair?"
" lst_232)"
"(let-values(((update!_1)"
"(unsafe-car"
" lst_232))"
"((rest_121)"
"(unsafe-cdr"
" lst_232)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(update!_1))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_200"
" rest_121)"
"(values))))"
"(values)))))"
" for-loop_200)"
" lst_203)))"
"(void)))"
"(void))"
"(values))))"
"(let-values(((need-syms_0)"
"(if(adjust-only? adjust_1)"
"(let-values()"
"(adjust-only-syms adjust_1))"
"(if(adjust-all-except?"
" adjust_1)"
"(let-values()"
"(adjust-all-except-syms"
" adjust_1))"
"(if(adjust-rename?"
" adjust_1)"
"(let-values()"
"(set"
"(adjust-rename-from-sym"
" adjust_1)))"
"(let-values() #f))))))"
"(if(if need-syms_0"
"(not"
"(="
"(set-count need-syms_0)"
"(hash-count done-syms_0)))"
" #f)"
"(let-values()"
"(begin"
"(let-values(((ht_116) need-syms_0))"
"(begin"
"(check-in-immutable-hash-keys"
" ht_116)"
"((letrec-values(((for-loop_201)"
"(lambda(i_158)"
"(if i_158"
"(let-values(((sym_57)"
"(unsafe-immutable-hash-iterate-key"
" ht_116"
" i_158)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(hash-ref"
" done-syms_0"
" sym_57"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" who_15"
"                                                                                                                                                       \"not in nested spec\""
" orig-s_22"
" sym_57))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_201"
"(unsafe-immutable-hash-iterate-next"
" ht_116"
" i_158))"
"(values))))"
"(values)))))"
" for-loop_201)"
"(unsafe-immutable-hash-iterate-first"
" ht_116))))"
"(void)))"
"(void))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(bind-all-provides!98.1)"
"(lambda(bulk-callback84_0"
" bulk-excepts82_0"
" bulk-prefix81_0"
" can-bulk?80_0"
" filter83_0"
" in77_0"
" just-meta79_0"
" only78_0"
" m93_0"
" in-stx94_0"
" phase-shift95_0"
" ns96_0"
" mpi97_0)"
"(let-values(((m_14) m93_0))"
"(let-values(((in-stx_2) in-stx94_0))"
"(let-values(((phase-shift_13) phase-shift95_0))"
"(let-values(((ns_55) ns96_0))"
"(let-values(((mpi_40) mpi97_0))"
"(let-values(((orig-s_23) in77_0))"
"(let-values(((only-syms_0) only78_0))"
"(let-values(((just-meta_2) just-meta79_0))"
"(let-values(((can-bulk?_0) can-bulk?80_0))"
"(let-values(((bulk-prefix_2) bulk-prefix81_0))"
"(let-values(((bulk-excepts_2) bulk-excepts82_0))"
"(let-values(((filter_1) filter83_0))"
"(let-values(((bulk-callback_0) bulk-callback84_0))"
"(let-values()"
"(let-values(((self_17)(module-self m_14)))"
"(begin"
"(let-values(((ht_117)(module-provides m_14)))"
"(begin"
"(check-in-hash ht_117)"
"((letrec-values(((for-loop_202)"
"(lambda(i_159)"
"(if i_159"
"(let-values(((provide-phase-level_5 provides_6)"
"(hash-iterate-key+value ht_117 i_159)))"
"(let-values((()"
"(let-values()"
"(if(let-values(((or-part_254)"
"(eq?"
" just-meta_2"
" 'all)))"
"(if or-part_254"
" or-part_254"
"(eqv?"
" just-meta_2"
" provide-phase-level_5)))"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_82)"
"(phase+"
" phase-shift_13"
" provide-phase-level_5)))"
"(begin"
"(if bulk-callback_0"
"(let-values()"
"(bulk-callback_0"
" provides_6"
" provide-phase-level_5))"
"(void))"
"(if filter_1"
"(let-values()"
"(begin"
"(let-values(((lst_233)"
"(let-values(((or-part_255)"
" only-syms_0))"
"(if or-part_255"
" or-part_255"
"(hash-keys"
" provides_6)))))"
"(begin"
"(check-list"
" lst_233)"
"((letrec-values(((for-loop_203)"
"(lambda(lst_234)"
"(if(pair?"
" lst_234)"
"(let-values(((sym_58)"
"(unsafe-car"
" lst_234))"
"((rest_122)"
"(unsafe-cdr"
" lst_234)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((binding/p_4)"
"(hash-ref"
" provides_6"
" sym_58"
" #f)))"
"(if binding/p_4"
"(let-values()"
"(let-values(((b_71)"
"(let-values(((self282_0)"
" self_17)"
"((mpi283_0)"
" mpi_40)"
"((provide-phase-level284_0)"
" provide-phase-level_5)"
"((phase-shift285_0)"
" phase-shift_13))"
"(provide-binding-to-require-binding11.1"
" mpi283_0"
" phase-shift285_0"
" provide-phase-level284_0"
" self282_0"
" binding/p_4"
" sym_58))))"
"(let-values(((sym_59)"
"(filter_1"
" b_71"
"(provided-as-transformer?"
" binding/p_4))))"
"(if(if sym_59"
"(not"
" can-bulk?_0)"
" #f)"
"(let-values()"
"(let-values(((temp286_0)"
"(datum->syntax$1"
" in-stx_2"
" sym_59))"
"((b287_0)"
" b_71)"
"((phase288_0)"
" phase_82))"
"(add-binding!17.1"
" #f"
" #f"
" #f"
" #f"
" temp286_0"
" b287_0"
" phase288_0)))"
"(void)))))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_203"
" rest_122)"
"(values))))"
"(values)))))"
" for-loop_203)"
" lst_233)))"
"(void)))"
"(void))"
"(if can-bulk?_0"
"(let-values()"
"(let-values(((temp290_0)"
"(bulk-binding14.1"
"(if(not"
" bulk-prefix_2)"
"(if(zero?"
"(hash-count"
" bulk-excepts_2))"
" provides_6"
" #f)"
" #f)"
" bulk-prefix_2"
" bulk-excepts_2"
" self_17"
" mpi_40"
" provide-phase-level_5"
" phase-shift_13"
"(namespace-bulk-binding-registry"
" ns_55)))"
"((phase291_0)"
" phase_82)"
"((orig-s292_0)"
" orig-s_23))"
"(add-bulk-binding!25.1"
" orig-s292_0"
" #t"
" in-stx_2"
" temp290_0"
" phase291_0)))"
"(void)))))"
"(values)))))"
"(values)))"
"(values)))))"
"(if(not #f)"
"(for-loop_202(hash-iterate-next ht_117 i_159))"
"(values))))"
"(values)))))"
" for-loop_202)"
"(hash-iterate-first ht_117))))"
"(void)))))))))))))))))))"
"(define-values"
"(require-spec-shift-for-syntax)"
"(lambda(req_1)"
"(let-values(((rebuild-req_0)(lambda(req_2 new-req_0)(datum->syntax$1 req_2 new-req_0 req_2 req_2))))"
"(letrec-values(((loop_142)"
"(lambda(shifted?_0)"
"(lambda(req_3)"
"(let-values(((fm_1)"
"(if(pair?(syntax-e$1 req_3))"
"(if(identifier?(car(syntax-e$1 req_3)))"
"(syntax-e$1(car(syntax-e$1 req_3)))"
" #f)"
" #f)))"
"(let-values(((tmp_28) fm_1))"
"(if(equal? tmp_28 'for-meta)"
"(let-values()"
"(let-values(((ok?_20 for-meta293_0 phase-level294_0 spec295_0)"
"(let-values(((s_349) req_3))"
"(let-values(((orig-s_24) s_349))"
"(let-values(((for-meta293_1 phase-level294_1 spec295_1)"
"(let-values(((s_350)"
"(if(syntax?$1 s_349)"
"(syntax-e$1 s_349)"
" s_349)))"
"(if(pair? s_350)"
"(let-values(((for-meta296_0)"
"(let-values(((s_351)(car s_350)))"
" s_351))"
"((phase-level297_0 spec298_0)"
"(let-values(((s_352)(cdr s_350)))"
"(let-values(((s_353)"
"(if(syntax?$1"
" s_352)"
"(syntax-e$1"
" s_352)"
" s_352)))"
"(if(pair? s_353)"
"(let-values(((phase-level299_0)"
"(let-values(((s_354)"
"(car"
" s_353)))"
" s_354))"
"((spec300_0)"
"(let-values(((s_355)"
"(cdr"
" s_353)))"
"(let-values(((s_356)"
"(if(syntax?$1"
" s_355)"
"(syntax-e$1"
" s_355)"
" s_355)))"
"(let-values(((flat-s_14)"
"(to-syntax-list.1"
" s_356)))"
"(if(not"
" flat-s_14)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                    \"bad syntax\""
" orig-s_24))"
"(let-values()"
" flat-s_14)))))))"
"(values"
" phase-level299_0"
" spec300_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_24))))))"
"(values"
" for-meta296_0"
" phase-level297_0"
" spec298_0))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_24)))))"
"(values #t for-meta293_1 phase-level294_1 spec295_1))))))"
"(let-values(((p_51)(syntax-e$1 phase-level294_0)))"
"(begin"
"(if(phase? p_51)"
"(void)"
"                                           (let-values () (raise-syntax-error$1 #f \"bad phase\" req_3)))"
"(rebuild-req_0"
" req_3"
"(list* for-meta293_0(phase+ p_51 1)(map2(loop_142 #t) spec295_0)))))))"
"(if(equal? tmp_28 'for-syntax)"
"(let-values()"
"(let-values(((ok?_21 for-syntax301_0 spec302_0)"
"(let-values(((s_357) req_3))"
"(let-values(((orig-s_25) s_357))"
"(let-values(((for-syntax301_1 spec302_1)"
"(let-values(((s_358)"
"(if(syntax?$1 s_357)"
"(syntax-e$1 s_357)"
" s_357)))"
"(if(pair? s_358)"
"(let-values(((for-syntax303_0)"
"(let-values(((s_359)"
"(car s_358)))"
" s_359))"
"((spec304_0)"
"(let-values(((s_360)"
"(cdr s_358)))"
"(let-values(((s_361)"
"(if(syntax?$1"
" s_360)"
"(syntax-e$1"
" s_360)"
" s_360)))"
"(let-values(((flat-s_15)"
"(to-syntax-list.1"
" s_361)))"
"(if(not flat-s_15)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                  \"bad syntax\""
" orig-s_25))"
"(let-values()"
" flat-s_15)))))))"
"(values for-syntax303_0 spec304_0))"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_25)))))"
"(values #t for-syntax301_1 spec302_1))))))"
"(rebuild-req_0 req_3(list* 'for-meta 2(map2(loop_142 #t) spec302_0)))))"
"(if(equal? tmp_28 'for-template)"
"(let-values()"
"(let-values(((ok?_22 for-template305_0 spec306_0)"
"(let-values(((s_362) req_3))"
"(let-values(((orig-s_26) s_362))"
"(let-values(((for-template305_1 spec306_1)"
"(let-values(((s_363)"
"(if(syntax?$1 s_362)"
"(syntax-e$1 s_362)"
" s_362)))"
"(if(pair? s_363)"
"(let-values(((for-template307_0)"
"(let-values(((s_364)"
"(car s_363)))"
" s_364))"
"((spec308_0)"
"(let-values(((s_365)"
"(cdr s_363)))"
"(let-values(((s_366)"
"(if(syntax?$1"
" s_365)"
"(syntax-e$1"
" s_365)"
" s_365)))"
"(let-values(((flat-s_16)"
"(to-syntax-list.1"
" s_366)))"
"(if(not flat-s_16)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_26))"
"(let-values()"
" flat-s_16)))))))"
"(values for-template307_0 spec308_0))"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_26)))))"
"(values #t for-template305_1 spec306_1))))))"
"(rebuild-req_0 req_3(list* 'for-meta 0(map2(loop_142 #t) spec306_0)))))"
"(if(equal? tmp_28 'for-label)"
"(let-values()"
"(let-values(((ok?_23 for-label309_0 spec310_0)"
"(let-values(((s_367) req_3))"
"(let-values(((orig-s_27) s_367))"
"(let-values(((for-label309_1 spec310_1)"
"(let-values(((s_368)"
"(if(syntax?$1 s_367)"
"(syntax-e$1 s_367)"
" s_367)))"
"(if(pair? s_368)"
"(let-values(((for-label311_0)"
"(let-values(((s_369)"
"(car s_368)))"
" s_369))"
"((spec312_0)"
"(let-values(((s_370)"
"(cdr s_368)))"
"(let-values(((s_371)"
"(if(syntax?$1"
" s_370)"
"(syntax-e$1"
" s_370)"
" s_370)))"
"(let-values(((flat-s_17)"
"(to-syntax-list.1"
" s_371)))"
"(if(not flat-s_17)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                      \"bad syntax\""
" orig-s_27))"
"(let-values()"
" flat-s_17)))))))"
"(values for-label311_0 spec312_0))"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_27)))))"
"(values #t for-label309_1 spec310_1))))))"
"(rebuild-req_0 req_3(list* for-label309_0(map2(loop_142 #t) spec310_0)))))"
"(if(equal? tmp_28 'just-meta)"
"(let-values()"
"(let-values(((ok?_24 just-meta313_0 phase-level314_0 spec315_0)"
"(let-values(((s_372) req_3))"
"(let-values(((orig-s_28) s_372))"
"(let-values(((just-meta313_1 phase-level314_1 spec315_1)"
"(let-values(((s_373)"
"(if(syntax?$1 s_372)"
"(syntax-e$1 s_372)"
" s_372)))"
"(if(pair? s_373)"
"(let-values(((just-meta316_0)"
"(let-values(((s_374)"
"(car s_373)))"
" s_374))"
"((phase-level317_0"
" spec318_0)"
"(let-values(((s_375)"
"(cdr s_373)))"
"(let-values(((s_376)"
"(if(syntax?$1"
" s_375)"
"(syntax-e$1"
" s_375)"
" s_375)))"
"(if(pair? s_376)"
"(let-values(((phase-level319_0)"
"(let-values(((s_377)"
"(car"
" s_376)))"
" s_377))"
"((spec320_0)"
"(let-values(((s_378)"
"(cdr"
" s_376)))"
"(let-values(((s_379)"
"(if(syntax?$1"
" s_378)"
"(syntax-e$1"
" s_378)"
" s_378)))"
"(let-values(((flat-s_18)"
"(to-syntax-list.1"
" s_379)))"
"(if(not"
" flat-s_18)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                            \"bad syntax\""
" orig-s_28))"
"(let-values()"
" flat-s_18)))))))"
"(values"
" phase-level319_0"
" spec320_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_28))))))"
"(values"
" just-meta316_0"
" phase-level317_0"
" spec318_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                \"bad syntax\""
" orig-s_28)))))"
"(values"
" #t"
" just-meta313_1"
" phase-level314_1"
" spec315_1))))))"
"(rebuild-req_0"
" req_3"
"(list* just-meta313_0 phase-level314_0(map2(loop_142 #f) spec315_0)))))"
"(let-values()"
"(if shifted?_0"
" req_3"
"(datum->syntax$1 #f(list 'for-syntax req_3)))))))))))))))"
"((loop_142 #f) req_1)))))"
"(define-values"
"(copy-namespace-value)"
"(lambda(m-ns_11 adjusted-sym_1 binding_18 phase-level_16 phase-shift_14 as-constant?_1)"
"(let-values(((i-ns_0)"
"(let-values(((temp322_0)(1/module-path-index-resolve(module-binding-module binding_18)))"
"((temp323_0)(phase-(module-binding-phase binding_18) phase-level_16))"
"((temp324_0) #t))"
"(namespace->module-namespace80.1 #f #f temp324_0 #t #f #f m-ns_11 temp322_0 temp323_0))))"
"(let-values(((val_51)"
"(namespace-get-variable"
" i-ns_0"
"(module-binding-phase binding_18)"
"(module-binding-sym binding_18)"
"(lambda()"
"(error"
" 'namespace-require/copy"
"(format"
"(string-append"
"                          \"namespace mismatch;\\n\""
"                          \" variable not found\\n\""
"                          \"  variable name: ~s\\n\""
"                          \"  phase level: ~s\")"
"(module-binding-sym binding_18)"
"(module-binding-phase binding_18)))))))"
"(namespace-set-variable!"
" m-ns_11"
"(phase+ phase-shift_14 phase-level_16)"
" adjusted-sym_1"
" val_51"
" as-constant?_1)))))"
"(define-values"
"(select-defined-syms-and-bind!16.1)"
"(lambda(as-transformer?5_0"
" as-transformer?10_0"
" frame-id1_0"
" in4_0"
" in9_0"
" requires+provides3_0"
" requires+provides8_0"
" top-level-bind-scope2_0"
" top-level-bind-scope7_0"
" ids11_0"
" defined-syms12_0"
" self13_0"
" phase14_0"
" all-scopes-stx15_0)"
"(let-values(((ids_15) ids11_0))"
"(let-values(((defined-syms_7) defined-syms12_0))"
"(let-values(((self_18) self13_0))"
"(let-values(((phase_83) phase14_0))"
"(let-values(((all-scopes-stx_3) all-scopes-stx15_0))"
"(let-values(((frame-id_2) frame-id1_0))"
"(let-values(((top-level-bind-scope_3)(if top-level-bind-scope7_0 top-level-bind-scope2_0 #f)))"
"(let-values(((requires+provides_4)(if requires+provides8_0 requires+provides3_0 #f)))"
"(let-values(((orig-s_29)(if in9_0 in4_0 #f)))"
"(let-values(((as-transformer?_4)(if as-transformer?10_0 as-transformer?5_0 #f)))"
"(let-values()"
"(let-values(((defined-syms-at-phase_0)"
"(let-values(((or-part_5)(hash-ref defined-syms_7 phase_83 #f)))"
"(if or-part_5"
" or-part_5"
"(let-values(((ht_118)(make-hasheq)))"
"(begin(hash-set! defined-syms_7 phase_83 ht_118) ht_118))))))"
"(let-values(((lst_85) ids_15))"
"(begin"
"(check-list lst_85)"
"((letrec-values(((for-loop_162)"
"(lambda(lst_162)"
"(if(pair? lst_162)"
"(let-values(((id_52)(unsafe-car lst_162))"
"((rest_85)(unsafe-cdr lst_162)))"
"(let-values(((post-guard-var_47)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_47)"
"(let-values()"
"(let-values()"
"(let-values(((sym_60)"
"(syntax-e$1 id_52)))"
"(let-values(((defined-sym_0)"
"(if(if(not"
"(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_0"
" sym_60"
" #f)"
" id_52"
" phase_83"
" top-level-bind-scope_3))"
"(no-extra-scopes?"
" id_52"
" all-scopes-stx_3"
" top-level-bind-scope_3"
" phase_83)"
" #f)"
" sym_60"
"((letrec-values(((loop_97)"
"(lambda(pos_15)"
"(let-values(((s_191)"
"(string->unreadable-symbol"
"(format"
"                                                                                                                                    \"~a.~a\""
" sym_60"
" pos_15))))"
"(if(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_0"
" s_191"
" #f)"
" id_52"
" phase_83"
" top-level-bind-scope_3)"
"(loop_97"
"(add1"
" pos_15))"
" s_191)))))"
" loop_97)"
" 1))))"
"(let-values((()"
"(begin"
"(hash-set!"
" defined-syms-at-phase_0"
" defined-sym_0"
" id_52)"
"(values))))"
"(let-values(((b_72)"
"(let-values(((frame-id26_0)"
" frame-id_2)"
"((sym27_1)"
" sym_60))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" frame-id26_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" sym27_1"
" #t"
" #f"
" #f"
" self_18"
" phase_83"
" defined-sym_0))))"
"(begin"
"(if requires+provides_4"
"(let-values()"
"(let-values(((b31_0) b_72))"
"(remove-required-id!69.1"
" b31_0"
" requires+provides_4"
" id_52"
" phase_83)))"
"(void))"
"(let-values(((orig-s22_0)"
" orig-s_29))"
"(add-binding!17.1"
" orig-s22_0"
" #t"
" #f"
" #f"
" id_52"
" b_72"
" phase_83))"
"(if requires+provides_4"
"(let-values()"
"(let-values(((as-transformer?36_0)"
" as-transformer?_4))"
"(add-defined-or-required-id!13.1"
" as-transformer?36_0"
" #f"
" #f"
" requires+provides_4"
" id_52"
" phase_83"
" b_72)))"
"(void))"
" defined-sym_0)))))))))"
"(let-values(((result_148)"
"(if(post-guard-var_47)"
"(for-loop_162 rest_85)"
" null)))"
"(cons elem_47 result_148))))))"
" null))))"
" for-loop_162)"
" lst_85)))))))))))))))))"
"(define-values"
"(no-extra-scopes?)"
"(lambda(id_53 all-scopes-stx_4 top-level-bind-scope_4 phase_84)"
"(let-values(((m-id_0)(datum->syntax$1 all-scopes-stx_4(syntax-e$1 id_53))))"
"(let-values(((or-part_85)(bound-identifier=?$1 id_53 m-id_0 phase_84)))"
"(if or-part_85"
" or-part_85"
"(if top-level-bind-scope_4"
"(bound-identifier=?$1 id_53(add-scope m-id_0 top-level-bind-scope_4) phase_84)"
" #f))))))"
"(define-values"
"(defined-as-other?)"
"(lambda(prev-id_0 id_54 phase_85 top-level-bind-scope_5)"
"(if prev-id_0"
"(if(not(bound-identifier=?$1 prev-id_0 id_54 phase_85))"
"(let-values(((or-part_196)(not top-level-bind-scope_5)))"
"(if or-part_196"
" or-part_196"
"(not"
"(bound-identifier=?$1"
"(remove-scope prev-id_0 top-level-bind-scope_5)"
"(remove-scope id_54 top-level-bind-scope_5)"
" phase_85))))"
" #f)"
" #f)))"
"(define-values"
"(select-defined-syms-and-bind!/ctx)"
"(lambda(tl-ids_0 ctx_10)"
"(let-values(((temp38_0)(root-expand-context-defined-syms ctx_10))"
"((temp39_0)(namespace-mpi(expand-context-namespace ctx_10)))"
"((temp40_0)(expand-context-phase ctx_10))"
"((temp41_1)(root-expand-context-all-scopes-stx ctx_10))"
"((temp42_0)(root-expand-context-frame-id ctx_10))"
"((temp43_0)(root-expand-context-top-level-bind-scope ctx_10)))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" temp42_0"
" #f"
" #f"
" #f"
" #f"
" temp43_0"
" #t"
" tl-ids_0"
" temp38_0"
" temp39_0"
" temp40_0"
" temp41_1))))"
"(define-values"
"(add-defined-sym!)"
"(lambda(defined-syms_8 phase_86 sym_61 id_55)"
"(let-values(((defined-syms-at-phase_1)"
"(let-values(((or-part_256)(hash-ref defined-syms_8 phase_86 #f)))"
"(if or-part_256"
" or-part_256"
"(let-values(((ht_119)(make-hasheq)))"
"(begin(hash-set! defined-syms_8 phase_86 ht_119) ht_119))))))"
"(hash-set! defined-syms-at-phase_1 sym_61 id_55))))"
"(define-values"
"(make-create-root-expand-context-from-module)"
"(lambda(requires_3 evaled-ld-h_0)"
"(lambda(ns_56 phase-shift_15 original-self_0 self_11)"
"(let-values(((root-ctx_4)(let-values()(make-root-expand-context11.1 #f #f #f #f #f #f #f #f))))"
"(let-values(((s_3)(add-scopes empty-syntax(root-expand-context-module-scopes root-ctx_4))))"
"(let-values((()"
"(begin"
"(let-values(((lst_81) requires_3))"
"(begin"
"(check-list lst_81)"
"((letrec-values(((for-loop_204)"
"(lambda(lst_235)"
"(if(pair? lst_235)"
"(let-values(((phase+reqs_0)(unsafe-car lst_235))"
"((rest_123)(unsafe-cdr lst_235)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_15)"
"(car"
" phase+reqs_0)))"
"(begin"
"(let-values(((lst_75)"
"(cdr"
" phase+reqs_0)))"
"(begin"
"(check-list lst_75)"
"((letrec-values(((for-loop_89)"
"(lambda(lst_236)"
"(if(pair?"
" lst_236)"
"(let-values(((req_4)"
"(unsafe-car"
" lst_236))"
"((rest_124)"
"(unsafe-cdr"
" lst_236)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_11)"
"(module-path-index-shift"
" req_4"
" original-self_0"
" self_11)))"
"(let-values(((temp6_0)"
"(phase+"
" phase_15"
" phase-shift_15))"
"((phase-shift7_0)"
" phase-shift_15)"
"((temp8_1)"
" 'module))"
"(perform-require!74.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp6_0"
" #f"
" #f"
" phase-shift7_0"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp8_1"
" mpi_11"
" s_3"
" self_11"
" s_3"
" ns_56))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_89"
" rest_124)"
"(values))))"
"(values)))))"
" for-loop_89)"
" lst_75)))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_204 rest_123)(values))))"
"(values)))))"
" for-loop_204)"
" lst_81)))"
"(values))))"
"(let-values()"
"(let-values(((defined-syms_9)(root-expand-context-defined-syms root-ctx_4)))"
"(begin"
"(let-values(((ht_7) evaled-ld-h_0))"
"(begin"
"(check-in-hash ht_7)"
"((letrec-values(((for-loop_205)"
"(lambda(i_160)"
"(if i_160"
"(let-values(((phase_87 linklet_1)(hash-iterate-key+value ht_7 i_160)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(let-values(((lst_78)"
"(1/linklet-export-variables"
" linklet_1)))"
"(begin"
"(check-list lst_78)"
"((letrec-values(((for-loop_76)"
"(lambda(lst_237)"
"(if(pair?"
" lst_237)"
"(let-values(((sym_62)"
"(unsafe-car"
" lst_237))"
"((rest_125)"
"(unsafe-cdr"
" lst_237)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_6)"
"(datum->syntax$1"
" s_3"
" sym_62)))"
"(begin"
"(let-values(((id9_0)"
" id_6)"
"((temp10_3)"
"(let-values(((self12_0)"
" self_11)"
"((phase13_0)"
" phase_87)"
"((sym14_1)"
" sym_62))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" self12_0"
" phase13_0"
" sym14_1)))"
"((phase11_1)"
" phase_87))"
"(add-binding!17.1"
" #f"
" #f"
" #f"
" #f"
" id9_0"
" temp10_3"
" phase11_1))"
"(add-defined-sym!"
" defined-syms_9"
" phase_87"
" sym_62"
" id_6))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_76"
" rest_125)"
"(values))))"
"(values)))))"
" for-loop_76)"
" lst_78)))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_205(hash-iterate-next ht_7 i_160))(values))))"
"(values)))))"
" for-loop_205)"
"(hash-iterate-first ht_7))))"
"(void)"
" root-ctx_4)))))))))"
"(define-values"
"(check-require-access9.1)"
"(lambda(skip-imports1_0"
" linklet3_0"
" import-module-uses4_0"
" import-module-instances5_0"
" insp6_0"
" extra-inspector7_0"
" extra-inspectorsss8_0)"
"(let-values(((linklet_2) linklet3_0))"
"(let-values(((skip-num-imports_0) skip-imports1_0))"
"(let-values(((import-module-uses_0) import-module-uses4_0))"
"(let-values(((import-module-instances_0) import-module-instances5_0))"
"(let-values(((insp_7) insp6_0))"
"(let-values(((extra-inspector_0) extra-inspector7_0))"
"(let-values(((extra-inspectorsss_1) extra-inspectorsss8_0))"
"(let-values()"
"(begin"
"(let-values(((lst_79)(list-tail(1/linklet-import-variables linklet_2) skip-num-imports_0))"
"((lst_122) import-module-uses_0)"
"((lst_238) import-module-instances_0)"
"((lst_239)"
"(let-values(((or-part_82) extra-inspectorsss_1))"
"(if or-part_82 or-part_82 import-module-uses_0))))"
"(begin"
"(check-list lst_79)"
"(check-list lst_122)"
"(check-list lst_238)"
"(check-list lst_239)"
"((letrec-values(((for-loop_206)"
"(lambda(lst_240 lst_241 lst_84 lst_242)"
"(if(if(pair? lst_240)"
"(if(pair? lst_241)(if(pair? lst_84)(pair? lst_242) #f) #f)"
" #f)"
"(let-values(((import-syms_0)(unsafe-car lst_240))"
"((rest_126)(unsafe-cdr lst_240))"
"((mu_7)(unsafe-car lst_241))"
"((rest_41)(unsafe-cdr lst_241))"
"((mi_16)(unsafe-car lst_84))"
"((rest_85)(unsafe-cdr lst_84))"
"((extra-inspectorss_1)(unsafe-car lst_242))"
"((rest_127)(unsafe-cdr lst_242)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_15)"
"(module-instance-module"
" mi_16)))"
"(if(module-no-protected? m_15)"
"(void)"
"(let-values()"
"(let-values(((access_2)"
"(let-values(((or-part_98)"
"(module-access"
" m_15)))"
"(if or-part_98"
" or-part_98"
"(module-compute-access!"
" m_15)))))"
"(begin"
"(let-values(((lst_56)"
" import-syms_0)"
"((lst_243)"
"(let-values(((or-part_63)"
"(if extra-inspectorsss_1"
" extra-inspectorss_1"
" #f)))"
"(if or-part_63"
" or-part_63"
" import-syms_0))))"
"(begin"
"(check-list lst_56)"
"(check-list lst_243)"
"((letrec-values(((for-loop_207)"
"(lambda(lst_244"
" lst_86)"
"(if(if(pair?"
" lst_244)"
"(pair?"
" lst_86)"
" #f)"
"(let-values(((import-sym_0)"
"(unsafe-car"
" lst_244))"
"((rest_42)"
"(unsafe-cdr"
" lst_244))"
"((extra-inspectors_1)"
"(unsafe-car"
" lst_86))"
"((rest_128)"
"(unsafe-cdr"
" lst_86)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((a_43)"
"(hash-ref"
"(hash-ref"
" access_2"
"(module-use-phase"
" mu_7)"
" '#hasheq())"
" import-sym_0"
" 'unexported)))"
"(if(let-values(((or-part_20)"
"(eq?"
" a_43"
" 'unexported)))"
"(if or-part_20"
" or-part_20"
"(eq?"
" a_43"
" 'protected)))"
"(let-values()"
"(let-values(((guard-insp_0)"
"(namespace-inspector"
"(module-instance-namespace"
" mi_16))))"
"(if(let-values(((or-part_257)"
"(inspector-superior?"
" insp_7"
" guard-insp_0)))"
"(if or-part_257"
" or-part_257"
"(let-values(((or-part_111)"
"(if extra-inspector_0"
"(inspector-superior?"
" extra-inspector_0"
" guard-insp_0)"
" #f)))"
"(if or-part_111"
" or-part_111"
"(if extra-inspectorsss_1"
"(if extra-inspectorss_1"
"(let-values(((ht_26)"
" extra-inspectors_1))"
"(begin"
"(check-in-immutable-hash-keys"
" ht_26)"
"((letrec-values(((for-loop_208)"
"(lambda(result_30"
" i_161)"
"(if i_161"
"(let-values(((extra-insp_0)"
"(unsafe-immutable-hash-iterate-key"
" ht_26"
" i_161)))"
"(let-values(((result_149)"
"(let-values()"
"(let-values(((result_81)"
"(let-values()"
"(let-values()"
"(inspector-superior?"
" extra-insp_0"
" guard-insp_0)))))"
"(values"
" result_81)))))"
"(if(if(not"
"((lambda x_109"
"(not"
" result_149))"
" extra-insp_0))"
"(not"
" #f)"
" #f)"
"(for-loop_208"
" result_149"
"(unsafe-immutable-hash-iterate-next"
" ht_26"
" i_161))"
" result_149)))"
" result_30))))"
" for-loop_208)"
" #t"
"(unsafe-immutable-hash-iterate-first"
" ht_26))))"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(error"
" 'link"
"(string-append"
"                                                                                                                                                                              \"access disallowed by code inspector to ~a variable\\n\""
"                                                                                                                                                                              \"  variable: ~s\\n\""
"                                                                                                                                                                              \"  from module: ~a\")"
" a_43"
" import-sym_0"
"(1/module-path-index-resolve"
"(namespace-mpi"
"(module-instance-namespace"
" mi_16))))))))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_207"
" rest_42"
" rest_128)"
"(values))))"
"(values)))))"
" for-loop_207)"
" lst_56"
" lst_243)))"
"(void)))))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_206 rest_126 rest_41 rest_85 rest_127)"
"(values))))"
"(values)))))"
" for-loop_206)"
" lst_79"
" lst_122"
" lst_238"
" lst_239)))"
"(void))))))))))))"
"(define-values"
"(check-single-require-access)"
"(lambda(mi_17 phase_84 sym_63 insp_8)"
"(let-values(((m_16)(module-instance-module mi_17)))"
"(if(module-no-protected? m_16)"
"(let-values() #t)"
"(let-values()"
"(let-values(((access_3)"
"(let-values(((or-part_258)(module-access m_16)))"
"(if or-part_258 or-part_258(module-compute-access! m_16)))))"
"(let-values(((a_44)(hash-ref(hash-ref access_3 phase_84 '#hasheq()) sym_63 'unexported)))"
"(if(let-values(((or-part_196)(eq? a_44 'unexported)))"
"(if or-part_196 or-part_196(eq? a_44 'protected)))"
"(let-values()"
"(let-values(((guard-insp_1)(namespace-inspector(module-instance-namespace mi_17))))"
"(let-values(((or-part_259)(if insp_8(inspector-superior? insp_8 guard-insp_1) #f)))"
"(if or-part_259 or-part_259(inspector-superior?(current-code-inspector) guard-insp_1)))))"
"(let-values() #t)))))))))"
"(define-values(module-cache)(make-weak-hash))"
"(define-values"
"(make-module-cache-key)"
"(lambda(hash-code_4)(if hash-code_4(list hash-code_4(current-load-relative-directory)) #f)))"
"(define-values"
"(module-cache-set!)"
"(lambda(key_26 proc_7)(hash-set! module-cache key_26(make-ephemeron key_26 proc_7))))"
"(define-values"
"(module-cache-ref)"
"(lambda(key_62)(let-values(((e_73)(hash-ref module-cache key_62 #f)))(if e_73(ephemeron-value e_73) #f))))"
"(define-values"
"(eval-module8.1)"
"(lambda(namespace1_2"
" namespace4_0"
" supermodule-name3_0"
" supermodule-name6_0"
" with-submodules?2_0"
" with-submodules?5_0"
" c7_0)"
"(let-values(((c_19) c7_0))"
"(let-values(((ns_57)(if namespace4_0 namespace1_2(1/current-namespace))))"
"(let-values(((with-submodules?_1)(if with-submodules?5_0 with-submodules?2_0 #t)))"
"(let-values(((supermodule-name_1)(if supermodule-name6_0 supermodule-name3_0 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((dh_0 h_1 data-instance_0 declaration-instance_0)"
"(compiled-module->dh+h+data-instance+declaration-instance c_19)))"
"(let-values(((syntax-literals-data-instance_0)"
"(if(compiled-in-memory? c_19)"
"(make-syntax-literal-data-instance-from-compiled-in-memory c_19)"
"(let-values(((l_17)(hash-ref h_1 'stx-data #f)))"
"(if l_17"
"(let-values()"
"(1/instantiate-linklet"
"(1/eval-linklet l_17)"
"(list deserialize-instance data-instance_0)))"
"(if(eq?(hash-ref h_1 'module->namespace #f) 'empty)"
"(let-values() empty-syntax-literals-instance/empty-namespace)"
"(let-values() empty-syntax-literals-data-instance)))))))"
"(let-values(((decl_0)(lambda(key_63)(1/instance-variable-value declaration-instance_0 key_63))))"
"(let-values(((pre-submodule-names_0)(hash-ref h_1 'pre null)))"
"(let-values(((post-submodule-names_0)(hash-ref h_1 'post null)))"
"(let-values(((default-name_1)(hash-ref h_1 'name 'module)))"
"(let-values(((cache-key_0)"
"(make-module-cache-key"
"(if(null? pre-submodule-names_0)"
"(if(null? post-submodule-names_0)(hash-ref h_1 'hash-code #f) #f)"
" #f))))"
"(let-values(((cross-phase-persistent?_1)(hash-ref h_1 'cross-phase-persistent? #f)))"
"(let-values(((min-phase_2)(hash-ref h_1 'min-phase 0)))"
"(let-values(((max-phase_2)(hash-ref h_1 'max-phase 0)))"
"(let-values(((language-info_1)(hash-ref h_1 'language-info #f)))"
"(let-values(((phases-h_0)"
"(let-values(((start_39) min-phase_2)"
"((end_28)(add1 max-phase_2))"
"((inc_20) 1))"
"(begin"
"(check-range start_39 end_28 inc_20)"
"((letrec-values(((for-loop_90)"
"(lambda(table_95 pos_96)"
"(if(< pos_96 end_28)"
"(let-values(((phase-level_17) pos_96))"
"(let-values(((table_96)"
"(let-values(((v_190)"
"(hash-ref"
" h_1"
" phase-level_17"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_209)"
"(lambda(table_100)"
"(let-values()"
"(let-values(((table_156)"
"(let-values(((table_157)"
" table_100))"
"(if v_190"
"(let-values(((table_158)"
" table_157))"
"(let-values(((table_159)"
"(let-values()"
"(let-values(((key_64"
" val_52)"
"(let-values()"
"(values"
" phase-level_17"
"(1/eval-linklet"
" v_190)))))"
"(hash-set"
" table_158"
" key_64"
" val_52)))))"
"(values"
" table_159)))"
" table_157))))"
" table_156)))))"
" for-loop_209)"
" table_95)))))"
"(if(not #f)"
"(for-loop_90"
" table_96"
"(+ pos_96 inc_20))"
" table_96)))"
" table_95))))"
" for-loop_90)"
" '#hash()"
" start_39)))))"
"(let-values(((syntax-literals-linklet_0)"
"(let-values(((l_5)(hash-ref h_1 'stx #f)))"
"(if l_5(1/eval-linklet l_5) #f))))"
"(let-values(((extra-inspector_5)"
"(if(compiled-in-memory? c_19)"
"(compiled-in-memory-compile-time-inspector c_19)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_2)"
"(if(compiled-in-memory? c_19)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_19)"
" '#hasheqv())))"
"(let-values(((requires_4)(decl_0 'requires)))"
"(let-values(((provides_7)(decl_0 'provides)))"
"(let-values(((original-self_1)(decl_0 'self-mpi)))"
"(let-values(((phase-to-link-modules_0)"
"(decl_0 'phase-to-link-modules)))"
"(let-values(((create-root-expand-context-from-module_0)"
"(make-create-root-expand-context-from-module"
" requires_4"
" phases-h_0)))"
"(let-values(((declare-submodules_0)"
"(if dh_0"
"(lambda(ns_45 names_0 declare-name_0 pre?_0)"
"(if(compiled-in-memory? c_19)"
"(begin"
"(let-values(((lst_20)"
"(if pre?_0"
"(compiled-in-memory-pre-compiled-in-memorys"
" c_19)"
"(compiled-in-memory-post-compiled-in-memorys"
" c_19))))"
"(begin"
"(check-list lst_20)"
"((letrec-values(((for-loop_210)"
"(lambda(lst_245)"
"(if(pair?"
" lst_245)"
"(let-values(((c_26)"
"(unsafe-car"
" lst_245))"
"((rest_129)"
"(unsafe-cdr"
" lst_245)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((ns13_0)"
" ns_45)"
"((declare-name14_0)"
" declare-name_0))"
"(eval-module8.1"
" ns13_0"
" #t"
" declare-name14_0"
" #t"
" #f"
" #f"
" c_26)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_210"
" rest_129)"
"(values))))"
"(values)))))"
" for-loop_210)"
" lst_20)))"
"(void))"
"(begin"
"(let-values(((lst_246) names_0))"
"(begin"
"(check-list lst_246)"
"((letrec-values(((for-loop_99)"
"(lambda(lst_88)"
"(if(pair? lst_88)"
"(let-values(((name_52)"
"(unsafe-car"
" lst_88))"
"((rest_130)"
"(unsafe-cdr"
" lst_88)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((sm-cd_0)"
"(hash-ref"
" dh_0"
" name_52"
" #f)))"
"(begin"
"(if sm-cd_0"
"(void)"
"(let-values()"
"(error"
"                                                                                                                                                       \"missing submodule declaration:\""
" name_52)))"
"(let-values(((ns16_0)"
" ns_45)"
"((declare-name17_0)"
" declare-name_0))"
"(eval-module8.1"
" ns16_0"
" #t"
" declare-name17_0"
" #t"
" #f"
" #f"
" sm-cd_0)))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_99"
" rest_130)"
"(values))))"
"(values)))))"
" for-loop_99)"
" lst_246)))"
"(void))))"
" void)))"
"(let-values(((declare-this-module_0)"
"(lambda(ns_58)"
"(let-values(((m_17)"
"(let-values(((temp22_3)"
"(1/current-module-declare-source))"
"((original-self23_0)"
" original-self_1)"
"((requires24_0)"
" requires_4)"
"((provides25_0)"
" provides_7)"
"((language-info26_0)"
" language-info_1)"
"((min-phase27_0)"
" min-phase_2)"
"((max-phase28_0)"
" max-phase_2)"
"((cross-phase-persistent?29_0)"
" cross-phase-persistent?_1)"
"((temp30_1)"
"(append"
" pre-submodule-names_0"
" post-submodule-names_0))"
"((supermodule-name31_0)"
" supermodule-name_1)"
"((temp32_3)"
"(lambda()"
"(get-all-variables"
" phases-h_0)))"
"((temp33_0)"
"(lambda(phase-level_18"
" ns_59)"
"(module-linklet-info2.1"
"(hash-ref"
" phases-h_0"
" phase-level_18"
" #f)"
"(hash-ref"
" phase-to-link-modules_0"
" phase-level_18"
" #f)"
" original-self_1)))"
"((temp34_0)"
"(lambda(data-box_2"
" ns_60"
" phase-shift_16"
" self_19"
" bulk-binding-registry_11"
" insp_9)"
"(if(unbox"
" data-box_2)"
"(void)"
"(let-values()"
"(init-instance-data!"
" data-box_2"
" cache-key_0"
" ns_60"
" syntax-literals-linklet_0"
" data-instance_0"
" syntax-literals-data-instance_0"
" phase-shift_16"
" original-self_1"
" self_19"
" bulk-binding-registry_11"
" insp_9"
" create-root-expand-context-from-module_0)))))"
"((temp35_1)"
"(lambda(data-box_3"
" ns_61"
" phase-shift_17"
" phase-level_19"
" self_20"
" bulk-binding-registry_12"
" insp_10)"
"(let-values()"
"(let-values(((syntax-literals-instance_0)"
"(instance-data-syntax-literals-instance"
"(unbox"
" data-box_3))))"
"(let-values(((phase-linklet_0)"
"(hash-ref"
" phases-h_0"
" phase-level_19"
" #f)))"
"(if phase-linklet_0"
"(let-values()"
"(let-values(((module-uses_1)"
"(hash-ref"
" phase-to-link-modules_0"
" phase-level_19)))"
"(let-values(((import-module-instances_1"
" import-instances_0)"
"(let-values(((mis_1"
" is_0)"
"(let-values(((lst_134)"
" module-uses_1))"
"(begin"
"(check-list"
" lst_134)"
"((letrec-values(((for-loop_143)"
"(lambda(mis_2"
" is_1"
" lst_247)"
"(if(pair?"
" lst_247)"
"(let-values(((mu_8)"
"(unsafe-car"
" lst_247))"
"((rest_131)"
"(unsafe-cdr"
" lst_247)))"
"(let-values(((mis_3"
" is_2)"
"(let-values(((mis_4)"
" mis_2)"
"((is_3)"
" is_1))"
"(let-values(((mis_5"
" is_4)"
"(let-values()"
"(let-values(((mis43_0"
" is44_0)"
"(let-values()"
"(let-values(((original-self47_0)"
" original-self_1)"
"((self48_1)"
" self_20)"
"((temp49_2)"
"(phase+"
"(phase-"
" phase-level_19"
"(module-use-phase"
" mu_8))"
" phase-shift_17)))"
"(namespace-module-use->module+linklet-instances144.1"
" temp49_2"
" original-self47_0"
" #t"
" self48_1"
" #t"
" ns_61"
" mu_8)))))"
"(values"
"(cons"
" mis43_0"
" mis_4)"
"(cons"
" is44_0"
" is_3))))))"
"(values"
" mis_5"
" is_4)))))"
"(if(not"
" #f)"
"(for-loop_143"
" mis_3"
" is_2"
" rest_131)"
"(values"
" mis_3"
" is_2))))"
"(values"
" mis_2"
" is_1)))))"
" for-loop_143)"
" null"
" null"
" lst_134)))))"
"(values"
"(reverse$1"
" mis_1)"
"(reverse$1"
" is_0)))))"
"(let-values((()"
"(begin"
"(let-values(((temp37_0)"
" 2)"
"((module-uses38_0)"
" module-uses_1)"
"((import-module-instances39_0)"
" import-module-instances_1)"
"((insp40_0)"
" insp_10)"
"((extra-inspector41_0)"
" extra-inspector_5)"
"((temp42_1)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_2"
" phase-level_19"
" #f)))"
"(check-require-access9.1"
" temp37_0"
" phase-linklet_0"
" module-uses38_0"
" import-module-instances39_0"
" insp40_0"
" extra-inspector41_0"
" temp42_1))"
"(values))))"
"(let-values(((module-body-instance-instance_0)"
"(let-values(((temp50_1)"
"(lambda(name_53"
" val_53)"
"(namespace-set-transformer!"
" ns_61"
"(sub1"
" phase-level_19)"
" name_53"
" val_53))))"
"(make-module-body-instance-instance18.1"
" temp50_1))))"
"(let-values(((instantiate-body_0)"
"(lambda()"
"(1/instantiate-linklet"
" phase-linklet_0"
"(list*"
" syntax-literals-instance_0"
" module-body-instance-instance_0"
" import-instances_0)"
"(namespace->instance"
" ns_61"
" phase-level_19)))))"
"(if(zero-phase?"
" phase-level_19)"
"(let-values()"
"(if(zero-phase?"
" phase-shift_17)"
"(let-values()"
"(instantiate-body_0))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" ns_61)"
"(let-values()"
"(instantiate-body_0))))))"
"(let-values()"
"(let-values(((ns-1_0)"
"(namespace->namespace-at-phase"
" ns_61"
"(phase+"
" phase-shift_17"
"(sub1"
" phase-level_19)))))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(delay"
"(lambda()"
"(let-values(((ns-151_0)"
" ns-1_0))"
"(make-expand-context8.1"
" #f"
" #f"
" #f"
" #f"
" ns-151_0))))"
" 1/current-namespace"
" ns_61"
" current-module-code-inspector"
" insp_10)"
"(let-values()"
"(instantiate-body_0))))))))))))"
"(void))))))))"
"(make-module37.1"
" cross-phase-persistent?29_0"
" #t"
" temp32_3"
" #t"
" temp35_1"
" language-info26_0"
" #t"
" max-phase28_0"
" #t"
" min-phase27_0"
" #t"
" #f"
" #f"
" temp33_0"
" #t"
" #f"
" #f"
" temp34_0"
" #t"
" #f"
" #f"
" provides25_0"
" requires24_0"
" #t"
" original-self23_0"
" temp22_3"
" #t"
" temp30_1"
" #t"
" supermodule-name31_0"
" #t))))"
"(let-values(((declare-name_1)"
"(substitute-module-declare-name"
" default-name_1)))"
"(begin"
"(if with-submodules?_1"
"(let-values()"
"(declare-submodules_0"
" ns_58"
" pre-submodule-names_0"
" declare-name_1"
" #t))"
"(void))"
"(let-values(((with-submodules?21_0)"
" with-submodules?_1))"
"(declare-module!56.1"
" with-submodules?21_0"
" #t"
" ns_58"
" m_17"
" declare-name_1))"
"(if with-submodules?_1"
"(let-values()"
"(declare-submodules_0"
" ns_58"
" post-submodule-names_0"
" declare-name_1"
" #f))"
"(void))))))))"
"(begin"
"(if cache-key_0"
"(let-values()"
"(module-cache-set! cache-key_0 declare-this-module_0))"
"(void))"
"(declare-this-module_0"
" ns_57))))))))))))))))))))))))))))))))"
"(define-values"
"(struct:instance-data instance-data11.1 instance-data? instance-data-syntax-literals-instance instance-data-cache-key)"
"(let-values(((struct:_69 make-_69 ?_69 -ref_69 -set!_69)"
"(let-values()"
"(let-values()"
"(make-struct-type 'instance-data #f 2 0 #f null(current-inspector) #f '(0 1) #f 'instance-data)))))"
"(values"
" struct:_69"
" make-_69"
" ?_69"
"(make-struct-field-accessor -ref_69 0 'syntax-literals-instance)"
"(make-struct-field-accessor -ref_69 1 'cache-key))))"
"(define-values"
"(init-instance-data!)"
"(lambda(data-box_4"
" cache-key_1"
" ns_62"
" syntax-literals-linklet_1"
" data-instance_1"
" syntax-literals-data-instance_1"
" phase-shift_18"
" original-self_2"
" self_21"
" bulk-binding-registry_13"
" insp_11"
" create-root-expand-context-from-module_1)"
"(let-values((()"
"(begin"
"(if(if(not(load-on-demand-enabled))"
"(if(not(eq? syntax-literals-data-instance_1 empty-syntax-literals-data-instance))"
"(not(eq? syntax-literals-data-instance_1 empty-syntax-literals-instance/empty-namespace))"
" #f)"
" #f)"
"(let-values()"
"(force-syntax-deserialize syntax-literals-data-instance_1 bulk-binding-registry_13))"
"(void))"
"(values))))"
"(let-values(((inst_0)"
"(let-values(((ns53_1) ns_62)"
"((phase-shift54_0) phase-shift_18)"
"((self55_0) self_21)"
"((insp56_0) insp_11)"
"((bulk-binding-registry57_0) bulk-binding-registry_13)"
"((temp58_2)"
"                                  (lambda (name_25 val_28) (error \"shouldn't get here for the root-ctx linklet\"))))"
"(make-instance-instance13.1"
" bulk-binding-registry57_0"
" insp56_0"
" ns53_1"
" phase-shift54_0"
" self55_0"
" temp58_2))))"
"(let-values(((syntax-literals-instance_1)"
"(if syntax-literals-linklet_1"
"(1/instantiate-linklet"
" syntax-literals-linklet_1"
"(list deserialize-instance data-instance_1 syntax-literals-data-instance_1 inst_0))"
" empty-syntax-literals-instance)))"
"(let-values((()"
"(begin"
"(set-box! data-box_4(instance-data11.1 syntax-literals-instance_1 cache-key_1))"
"(values))))"
"(let-values(((get-encoded-root-expand-ctx_0)"
"(1/instance-variable-value syntax-literals-instance_1 'get-encoded-root-expand-ctx)))"
"(if(eq? get-encoded-root-expand-ctx_0 'empty)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_62"
"(delay(lambda()(let-values()(make-root-expand-context11.1 #f #f #f #f #f #f #f #f))))))"
"(if(procedure? get-encoded-root-expand-ctx_0)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_62"
"(delay(lambda()(root-expand-context-decode-for-module(get-encoded-root-expand-ctx_0))))))"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_62"
"(delay"
"(lambda()"
"(create-root-expand-context-from-module_1"
" ns_62"
" phase-shift_18"
" original-self_2"
" self_21))))))))))))))"
"(define-values"
"(force-syntax-deserialize)"
"(lambda(syntax-literals-data-instance_2 bulk-binding-registry_14)"
"(let-values(((deserialize-syntax_0)"
"(1/instance-variable-value syntax-literals-data-instance_2 deserialize-syntax-id)))"
"(if deserialize-syntax_0(let-values()(deserialize-syntax_0 bulk-binding-registry_14))(void)))))"
"(define-values"
"(compiled-module->dh+h)"
"(lambda(c_27)"
"(let-values(((ld/h_0)(if(compiled-in-memory? c_27)(compiled-in-memory-linklet-directory c_27) c_27)))"
"(let-values(((dh_1)"
"(if(1/linklet-directory? ld/h_0)"
"(let-values()(1/linklet-directory->hash ld/h_0))"
"(let-values() #f))))"
"(let-values(((h_2)(1/linklet-bundle->hash(if dh_1(hash-ref dh_1 #f) ld/h_0))))(values dh_1 h_2))))))"
"(define-values(compiled-module->h)(lambda(c_28)(let-values(((dh_2 h_3)(compiled-module->dh+h c_28))) h_3)))"
"(define-values"
"(compiled-module->dh+h+data-instance+declaration-instance)"
"(lambda(c_29)"
"(let-values(((dh_3 h_4)(compiled-module->dh+h c_29)))"
"(let-values(((data-instance_2)"
"(if(compiled-in-memory? c_29)"
"(make-data-instance-from-compiled-in-memory c_29)"
"(1/instantiate-linklet(1/eval-linklet(hash-ref h_4 'data))(list deserialize-instance)))))"
"(let-values(((declaration-instance_1)"
"(if(if(compiled-in-memory? c_29)(compiled-in-memory-original-self c_29) #f)"
"(make-declaration-instance-from-compiled-in-memory c_29)"
"(1/instantiate-linklet"
"(1/eval-linklet(hash-ref h_4 'decl))"
"(list deserialize-instance data-instance_2)))))"
"(values dh_3 h_4 data-instance_2 declaration-instance_1))))))"
"(define-values"
"(compiled-module->declaration-instance)"
"(lambda(c_30)"
"(let-values(((dh_4 h_5 data-instance_3 declaration-instance_2)"
"(compiled-module->dh+h+data-instance+declaration-instance c_30)))"
" declaration-instance_2)))"
"(define-values"
"(compiled-module->h+declaration-instance)"
"(lambda(c_31)"
"(let-values(((dh_5 h_6 data-instance_4 declaration-instance_3)"
"(compiled-module->dh+h+data-instance+declaration-instance c_31)))"
"(values h_6 declaration-instance_3))))"
"(define-values"
"(make-data-instance-from-compiled-in-memory)"
"(lambda(cim_6)(1/make-instance 'data #f mpi-vector-id(compiled-in-memory-mpis cim_6))))"
"(define-values"
"(make-declaration-instance-from-compiled-in-memory)"
"(lambda(cim_7)"
"(1/make-instance"
" 'decl"
" #f"
" 'self-mpi"
"(compiled-in-memory-original-self cim_7)"
" 'requires"
"(compiled-in-memory-requires cim_7)"
" 'provides"
"(compiled-in-memory-provides cim_7)"
" 'phase-to-link-modules"
"(compiled-in-memory-phase-to-link-module-uses cim_7))))"
"(define-values"
"(make-syntax-literal-data-instance-from-compiled-in-memory)"
"(lambda(cim_8)"
"(1/make-instance"
" 'syntax-literal-data"
" #f"
" deserialize-syntax-id"
" void"
" deserialized-syntax-vector-id"
"(compiled-in-memory-syntax-literals cim_8))))"
"(define-values"
"(empty-syntax-literals-data-instance)"
"(1/make-instance 'empty-stx-data #f deserialized-syntax-vector-id(vector) deserialize-syntax-id void))"
"(define-values"
"(empty-syntax-literals-instance)"
"(1/make-instance 'empty-stx #f get-syntax-literal!-id(lambda(pos_97) #f) 'get-encoded-root-expand-ctx #f))"
"(define-values"
"(empty-syntax-literals-instance/empty-namespace)"
"(1/make-instance"
" 'empty-stx/empty-ns"
" #f"
" get-syntax-literal!-id"
"(lambda(pos_98) #f)"
" 'get-encoded-root-expand-ctx"
" 'empty))"
"(define-values"
"(get-all-variables)"
"(lambda(phases-h_1)"
"(let-values(((ht_120) phases-h_1))"
"(begin"
"(check-in-hash ht_120)"
"((letrec-values(((for-loop_71)"
"(lambda(table_160 i_162)"
"(if i_162"
"(let-values(((phase_88 linklet_3)(hash-iterate-key+value ht_120 i_162)))"
"(let-values(((table_161)"
"(let-values(((table_162) table_160))"
"(let-values(((table_163)"
"(let-values()"
"(let-values(((key_65 val_54)"
"(let-values()"
"(values"
" phase_88"
"(1/linklet-export-variables"
" linklet_3)))))"
"(hash-set table_162 key_65 val_54)))))"
"(values table_163)))))"
"(if(not #f)(for-loop_71 table_161(hash-iterate-next ht_120 i_162)) table_161)))"
" table_160))))"
" for-loop_71)"
" '#hash()"
"(hash-iterate-first ht_120))))))"
"(define-values"
"(provides->api-provides)"
"(lambda(provides_8 self_22)"
"(let-values(((extract_0)"
"(lambda(ok?_25)"
"(let-values(((result-l_0)"
"(let-values(((ht_121) provides_8))"
"(begin"
"(check-in-hash ht_121)"
"((letrec-values(((for-loop_92)"
"(lambda(i_163)"
"(if i_163"
"(let-values(((phase_44 at-phase_11)"
"(hash-iterate-key+value ht_121 i_163)))"
"(let-values(((post-guard-var_14)(lambda() #t)))"
"(let-values(((l_66)"
"(let-values(((ht_122) at-phase_11))"
"(begin"
"(check-in-hash ht_122)"
"((letrec-values(((for-loop_211)"
"(lambda(i_164)"
"(if i_164"
"(let-values(((sym_9"
" b/p_1)"
"(hash-iterate-key+value"
" ht_122"
" i_164)))"
"(let-values(((post-guard-var_60)"
"(lambda()"
" #t)))"
"(let-values()"
"(if(ok?_25"
" b/p_1)"
"(let-values()"
"(let-values(((elem_54)"
"(let-values()"
"(let-values()"
"(let-values(((b_73)"
"(provided-as-binding"
" b/p_1)))"
"(list"
" sym_9"
"(if(eq?"
" self_22"
"(module-binding-module"
" b_73))"
"(let-values()"
" null)"
"(let-values()"
"(let-values(((lst_248)"
"(cons"
" b_73"
"(module-binding-extra-nominal-bindings"
" b_73))))"
"(begin"
"(check-list"
" lst_248)"
"((letrec-values(((for-loop_93)"
"(lambda(lst_249)"
"(if(pair?"
" lst_249)"
"(let-values(((b_74)"
"(unsafe-car"
" lst_249))"
"((rest_132)"
"(unsafe-cdr"
" lst_249)))"
"(let-values(((post-guard-var_61)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_55)"
"(let-values()"
"(let-values()"
"(if(if(eqv?"
"(module-binding-nominal-phase"
" b_74)"
" phase_44)"
"(eq?"
"(module-binding-nominal-sym"
" b_74)"
" sym_9)"
" #f)"
"(let-values()"
"(module-binding-nominal-module"
" b_74))"
"(let-values()"
"(list"
"(module-binding-nominal-module"
" b_74)"
"(module-binding-phase"
" b_74)"
"(module-binding-nominal-sym"
" b_74)"
"(module-binding-nominal-phase"
" b_74))))))))"
"(let-values(((result_150)"
"(if(post-guard-var_61)"
"(for-loop_93"
" rest_132)"
" null)))"
"(cons"
" elem_55"
" result_150))))))"
" null))))"
" for-loop_93)"
" lst_248)))))))))))"
"(let-values(((result_79)"
"(if(post-guard-var_60)"
"(for-loop_211"
"(hash-iterate-next"
" ht_122"
" i_164))"
" null)))"
"(cons"
" elem_54"
" result_79))))"
"(if(post-guard-var_60)"
"(for-loop_211"
"(hash-iterate-next"
" ht_122"
" i_164))"
" null)))))"
" null))))"
" for-loop_211)"
"(hash-iterate-first ht_122))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_212)"
"(lambda()"
"(let-values()"
"(let-values(((post-guard-var_62)"
"(lambda() #f)))"
"(let-values()"
"(if(null? l_66)"
"(if(post-guard-var_62)"
"(for-loop_212)"
"(if(post-guard-var_14)"
"(for-loop_92"
"(hash-iterate-next"
" ht_121"
" i_163))"
" null))"
"(let-values()"
"(let-values(((elem_56)"
"(let-values()"
"(let-values()"
"(cons"
" phase_44"
"(let-values(((car6_0)"
" car))"
"(sort7.1"
" #f"
" #f"
" car6_0"
" #t"
" l_66"
" symbol<?)))))))"
"(let-values(((result_151)"
"(if(post-guard-var_62)"
"(for-loop_212)"
"(if(post-guard-var_14)"
"(for-loop_92"
"(hash-iterate-next"
" ht_121"
" i_163))"
" null))))"
"(cons"
" elem_56"
" result_151)))))))))))"
" for-loop_212))))))"
" null))))"
" for-loop_92)"
"(hash-iterate-first ht_121))))))"
"(let-values(((car3_0) car))(sort7.1 #f #f car3_0 #t result-l_0 phase<?))))))"
"(values"
"(extract_0(lambda(b/p_2)(not(provided-as-transformer? b/p_2))))"
"(extract_0 provided-as-transformer?)))))"
"(define-values"
"(variables->api-nonprovides)"
"(lambda(provides_9 all-vars_0)"
"(let-values(((result-l_1)"
"(let-values(((ht_123) all-vars_0))"
"(begin"
"(check-in-hash ht_123)"
"((letrec-values(((for-loop_213)"
"(lambda(i_165)"
"(if i_165"
"(let-values(((phase_89 vars_0)(hash-iterate-key+value ht_123 i_165)))"
"(let-values(((post-guard-var_63)(lambda() #t)))"
"(let-values()"
"(let-values(((l_49)"
"(let-values(((syms_19)"
"(hash-ref"
" provides_9"
" phase_89"
" '#hasheq())))"
"(let-values(((lst_250) vars_0))"
"(begin"
"(check-list lst_250)"
"((letrec-values(((for-loop_45)"
"(lambda(lst_251)"
"(if(pair? lst_251)"
"(let-values(((var-sym_5)"
"(unsafe-car"
" lst_251))"
"((rest_133)"
"(unsafe-cdr"
" lst_251)))"
"(let-values(((post-guard-var_64)"
"(lambda()"
" #t)))"
"(let-values()"
"(if(hash-ref"
" syms_19"
" var-sym_5"
" #f)"
"(if(post-guard-var_64)"
"(for-loop_45"
" rest_133)"
" null)"
"(let-values()"
"(let-values(((elem_57)"
"(let-values()"
"(let-values()"
" var-sym_5))))"
"(let-values(((result_39)"
"(if(post-guard-var_64)"
"(for-loop_45"
" rest_133)"
" null)))"
"(cons"
" elem_57"
" result_39))))))))"
" null))))"
" for-loop_45)"
" lst_250))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_214)"
"(lambda()"
"(let-values()"
"(let-values(((post-guard-var_2)"
"(lambda() #f)))"
"(let-values()"
"(if(null? l_49)"
"(if(post-guard-var_2)"
"(for-loop_214)"
"(if(post-guard-var_63)"
"(for-loop_213"
"(hash-iterate-next ht_123 i_165))"
" null))"
"(let-values()"
"(let-values(((elem_2)"
"(let-values()"
"(let-values()"
"(cons"
" phase_89"
"(let-values(((l10_0)"
" l_49)"
"((symbol<?11_0)"
" symbol<?))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" l10_0"
" symbol<?11_0)))))))"
"(let-values(((result_152)"
"(if(post-guard-var_2)"
"(for-loop_214)"
"(if(post-guard-var_63)"
"(for-loop_213"
"(hash-iterate-next"
" ht_123"
" i_165))"
" null))))"
"(cons"
" elem_2"
" result_152)))))))))))"
" for-loop_214)))))))"
" null))))"
" for-loop_213)"
"(hash-iterate-first ht_123))))))"
"(let-values(((car9_0) car))(sort7.1 #f #f car9_0 #t result-l_1 phase<?)))))"
"(define-values"
"(compiled->linklet-directory-or-bundle)"
"(lambda(c_32)(if(compiled-in-memory? c_32)(compiled-in-memory-linklet-directory c_32) c_32)))"
"(define-values"
"(module-compiled-current-name)"
"(lambda(c_33)"
"(let-values(((ld_1)(compiled->linklet-directory-or-bundle c_33)))"
"(let-values(((b_15)(if(1/linklet-bundle? ld_1) ld_1(hash-ref(1/linklet-directory->hash ld_1) #f))))"
"(hash-ref(1/linklet-bundle->hash b_15) 'name)))))"
"(define-values"
"(module-compiled-immediate-name)"
"(lambda(c_34)"
"(let-values(((n_52)(module-compiled-current-name c_34)))(if(pair? n_52)(car(reverse$1 n_52)) n_52))))"
"(define-values"
"(change-module-name)"
"(lambda(c_35 name_3 prefix_3)"
"(let-values(((full-name_0)(if(null? prefix_3) name_3(append prefix_3(list name_3)))))"
"(let-values(((next-prefix_0)(if(null? prefix_3)(list name_3) full-name_0)))"
"(let-values(((recur_0)"
"(lambda(sub-c_0 name_0)"
"(if(equal?(module-compiled-current-name sub-c_0)(append next-prefix_0(list name_0)))"
" sub-c_0"
"(change-module-name sub-c_0 name_0 next-prefix_0)))))"
"(if(compiled-in-memory? c_35)"
"(let-values()"
"(let-values(((change-submodule-name_0)"
"(lambda(sub-c_1)(recur_0 sub-c_1(module-compiled-immediate-name sub-c_1)))))"
"(let-values(((pre-compiled-in-memorys_0)"
"(map2 change-submodule-name_0(compiled-in-memory-pre-compiled-in-memorys c_35))))"
"(let-values(((post-compiled-in-memorys_0)"
"(map2 change-submodule-name_0(compiled-in-memory-post-compiled-in-memorys c_35))))"
"(let-values(((the-struct_3) c_35))"
"(if(compiled-in-memory? the-struct_3)"
"(let-values(((pre-compiled-in-memorys8_0) pre-compiled-in-memorys_0)"
"((post-compiled-in-memorys9_0) post-compiled-in-memorys_0)"
"((linklet-directory10_0)"
"(let-values(((temp11_0)"
"(update-one-name"
"(let-values(((ld_2)(compiled->linklet-directory-or-bundle c_35)))"
"(if(1/linklet-bundle? ld_2)"
" ld_2"
"(hash-ref(1/linklet-directory->hash ld_2) #f)))"
" full-name_0))"
"((temp12_0)(symbol? full-name_0))"
"((temp13_0)"
"(append pre-compiled-in-memorys_0 post-compiled-in-memorys_0)))"
"(rebuild-linklet-directory5.1 temp12_0 #t temp11_0 temp13_0))))"
"(compiled-in-memory1.1"
" linklet-directory10_0"
"(compiled-in-memory-original-self the-struct_3)"
"(compiled-in-memory-requires the-struct_3)"
"(compiled-in-memory-provides the-struct_3)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_3)"
"(compiled-in-memory-compile-time-inspector the-struct_3)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_3)"
"(compiled-in-memory-mpis the-struct_3)"
"(compiled-in-memory-syntax-literals the-struct_3)"
" pre-compiled-in-memorys8_0"
" post-compiled-in-memorys9_0"
"(compiled-in-memory-namespace-scopes the-struct_3)"
"(compiled-in-memory-purely-functional? the-struct_3)))"
"                        (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_3)))))))"
"(if(1/linklet-directory? c_35)"
"(let-values()"
"(1/hash->linklet-directory"
"(let-values(((ht_124)(1/linklet-directory->hash c_35)))"
"(begin"
"(check-in-hash ht_124)"
"((letrec-values(((for-loop_215)"
"(lambda(table_164 i_1)"
"(if i_1"
"(let-values(((key_66 val_55)(hash-iterate-key+value ht_124 i_1)))"
"(let-values(((table_99)"
"(let-values(((table_165) table_164))"
"(let-values(((table_166)"
"(let-values()"
"(let-values(((key_31 val_56)"
"(let-values()"
"(values"
" key_66"
"(if(not key_66)"
"(update-one-name"
" val_55"
" full-name_0)"
"(recur_0"
" val_55"
" key_66))))))"
"(hash-set table_165 key_31 val_56)))))"
"(values table_166)))))"
"(if(not #f)"
"(for-loop_215 table_99(hash-iterate-next ht_124 i_1))"
" table_99)))"
" table_164))))"
" for-loop_215)"
" '#hasheq()"
"(hash-iterate-first ht_124))))))"
"(let-values()(update-one-name c_35 full-name_0)))))))))"
"(define-values"
"(update-one-name)"
"(lambda(lb_0 name_54)(1/hash->linklet-bundle(hash-set(1/linklet-bundle->hash lb_0) 'name name_54))))"
"(define-values"
"(rebuild-linklet-directory5.1)"
"(lambda(bundle-ok?1_0 bundle-ok?2_0 main3_0 submods4_0)"
"(let-values(((main_0) main3_0))"
"(let-values(((submods_0) submods4_0))"
"(let-values(((bundle-ok?_0)(if bundle-ok?2_0 bundle-ok?1_0 #f)))"
"(let-values()"
"(if(if(null? submods_0) bundle-ok?_0 #f)"
" main_0"
"(1/hash->linklet-directory"
"(hash-set"
"(let-values(((lst_162) submods_0))"
"(begin"
"(check-list lst_162)"
"((letrec-values(((for-loop_209)"
"(lambda(ht_107 lst_251)"
"(if(pair? lst_251)"
"(let-values(((submod_1)(unsafe-car lst_251))"
"((rest_133)(unsafe-cdr lst_251)))"
"(let-values(((ht_125)"
"(let-values(((ht_126) ht_107))"
"(let-values(((ht_127)"
"(let-values()"
"(let-values(((name_55)"
"(module-compiled-immediate-name"
" submod_1)))"
"(if(hash-ref ht_126 name_55 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-compiled-submodules"
"                                                                                   \"change would result in duplicate submodule name\""
"                                                                                   \"name\""
" name_55))"
"(let-values()"
"(hash-set"
" ht_126"
" name_55"
"(compiled->linklet-directory-or-bundle"
" submod_1))))))))"
"(values ht_127)))))"
"(if(not #f)(for-loop_209 ht_125 rest_133) ht_125)))"
" ht_107))))"
" for-loop_209)"
" '#hasheq()"
" lst_162)))"
" #f"
" main_0)))))))))"
"(define-values"
"(1/compiled-expression?)"
"(lambda(c_32)"
"(let-values(((or-part_0)(compiled-in-memory? c_32)))"
"(if or-part_0"
" or-part_0"
"(let-values(((or-part_1)(1/linklet-directory? c_32)))(if or-part_1 or-part_1(1/linklet-bundle? c_32)))))))"
"(define-values"
"(1/compiled-module-expression?)"
"(lambda(c_36)"
"(let-values(((ld_3)(compiled->linklet-directory-or-bundle c_36)))"
"(let-values(((or-part_39)"
"(if(1/linklet-directory? ld_3)"
"(if(let-values(((b_75)(hash-ref(1/linklet-directory->hash ld_3) #f #f)))"
"(if b_75(hash-ref(1/linklet-bundle->hash b_75) 'decl #f) #f))"
" #t"
" #f)"
" #f)))"
"(if or-part_39"
" or-part_39"
"(if(1/linklet-bundle? ld_3)(if(hash-ref(1/linklet-bundle->hash ld_3) 'decl #f) #t #f) #f))))))"
"(define-values"
"(1/module-compiled-name)"
"(case-lambda"
"((c_19)"
"(begin"
"(if(1/compiled-module-expression? c_19)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_19)))"
"(module-compiled-current-name c_19)))"
"((c_37 name_56)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_37)"
"(void)"
"                      (let-values () (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_37)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_10)(symbol? name_56)))"
"(if or-part_10"
" or-part_10"
"(if(pair? name_56)(if(list? name_56)(andmap2 symbol? name_56) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-name"
"                           \"(or/c symbol? (cons/c symbol? (non-empty-listof symbol?)))\""
" name_56)))"
"(values))))"
"(let-values(((i-name_0 prefix_4)"
"(if(symbol? name_56)"
"(values name_56 null)"
"(let-values(((r_43)(reverse$1 name_56)))(values(car r_43)(reverse$1(cdr r_43)))))))"
"(change-module-name c_37 i-name_0 prefix_4)))))))"
"(define-values"
"(1/module-compiled-submodules)"
"(case-lambda"
"((c_38 non-star?_0)"
"(begin"
"(if(1/compiled-module-expression? c_38)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_38)))"
"(if(compiled-in-memory? c_38)"
"(let-values()"
"(if non-star?_0"
"(compiled-in-memory-pre-compiled-in-memorys c_38)"
"(compiled-in-memory-post-compiled-in-memorys c_38)))"
"(let-values()"
"(if(1/linklet-directory? c_38)"
"(let-values()"
"(let-values(((ht_128)(1/linklet-directory->hash c_38)))"
"(let-values(((bh_0)(1/linklet-bundle->hash(hash-ref ht_128 #f))))"
"(let-values(((names_1)(hash-ref bh_0(if non-star?_0 'pre 'post) null)))"
"(let-values(((lst_252) names_1))"
"(begin"
"(check-list lst_252)"
"((letrec-values(((for-loop_68)"
"(lambda(lst_82)"
"(if(pair? lst_82)"
"(let-values(((name_57)(unsafe-car lst_82))"
"((rest_134)(unsafe-cdr lst_82)))"
"(let-values(((post-guard-var_7)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_7)"
"(let-values()"
"(let-values()(hash-ref ht_128 name_57)))))"
"(let-values(((result_55)"
"(if(post-guard-var_7)"
"(for-loop_68 rest_134)"
" null)))"
"(cons elem_7 result_55))))))"
" null))))"
" for-loop_68)"
" lst_252)))))))"
"(let-values() null))))))"
"((c_39 non-star?_1 submods_1)"
"(begin"
"(if(1/compiled-module-expression? c_39)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_39)))"
"(if(if(list? submods_1)(andmap2 1/compiled-module-expression? submods_1) #f)"
"(void)"
"(let-values()"
"          (raise-argument-error 'module-compiled-submodules \"(listof compiled-module-expression?)\" submods_1)))"
"(if(if(null? submods_1)"
"(let-values(((or-part_88)(1/linklet-bundle?(compiled->linklet-directory-or-bundle c_39))))"
"(if or-part_88"
" or-part_88"
"(if(compiled-in-memory? c_39)"
"(null?"
"(if non-star?_1"
"(compiled-in-memory-pre-compiled-in-memorys c_39)"
"(compiled-in-memory-post-compiled-in-memorys c_39)))"
" #f)))"
" #f)"
"(let-values() c_39)"
"(if(if(compiled-in-memory? c_39)(andmap2 compiled-in-memory? submods_1) #f)"
"(let-values()"
"(let-values(((pre-compiled-in-memorys_1)"
"(if non-star?_1 submods_1(compiled-in-memory-pre-compiled-in-memorys c_39))))"
"(let-values(((post-compiled-in-memorys_1)"
"(if non-star?_1(compiled-in-memory-post-compiled-in-memorys c_39) submods_1)))"
"(let-values(((n-c_0)(normalize-to-linklet-directory c_39)))"
"(fixup-submodule-names"
"(let-values(((the-struct_51) n-c_0))"
"(if(compiled-in-memory? the-struct_51)"
"(let-values(((pre-compiled-in-memorys1_0) pre-compiled-in-memorys_1)"
"((post-compiled-in-memorys2_0) post-compiled-in-memorys_1)"
"((linklet-directory3_0)"
"(let-values(((temp4_1)"
"(reset-submodule-names"
"(hash-ref"
"(1/linklet-directory->hash"
"(compiled->linklet-directory-or-bundle n-c_0))"
" #f)"
" non-star?_1"
" submods_1))"
"((temp5_3)(symbol?(module-compiled-current-name c_39)))"
"((temp6_1)"
"(append pre-compiled-in-memorys_1 post-compiled-in-memorys_1)))"
"(rebuild-linklet-directory5.1 temp5_3 #t temp4_1 temp6_1))))"
"(compiled-in-memory1.1"
" linklet-directory3_0"
"(compiled-in-memory-original-self the-struct_51)"
"(compiled-in-memory-requires the-struct_51)"
"(compiled-in-memory-provides the-struct_51)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_51)"
"(compiled-in-memory-compile-time-inspector the-struct_51)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_51)"
"(compiled-in-memory-mpis the-struct_51)"
"(compiled-in-memory-syntax-literals the-struct_51)"
" pre-compiled-in-memorys1_0"
" post-compiled-in-memorys2_0"
"(compiled-in-memory-namespace-scopes the-struct_51)"
"(compiled-in-memory-purely-functional? the-struct_51)))"
"                       (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_51))))))))"
"(let-values()"
"(let-values(((n-c_1)(normalize-to-linklet-directory c_39)))"
"(fixup-submodule-names"
"(let-values(((temp7_0)"
"(reset-submodule-names"
"(hash-ref(1/linklet-directory->hash(compiled->linklet-directory-or-bundle n-c_1)) #f)"
" non-star?_1"
" submods_1))"
"((temp8_2)"
"(map2"
" compiled->linklet-directory-or-bundle"
"(append"
"(if non-star?_1 submods_1(1/module-compiled-submodules c_39 #t))"
"(if non-star?_1(1/module-compiled-submodules c_39 #f) submods_1)))))"
"(rebuild-linklet-directory5.1 #f #f temp7_0 temp8_2)))))))))))"
"(define-values"
"(1/module-compiled-language-info)"
"(lambda(c_40)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_40)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-language-info \"compiled-module-expression?\" c_40)))"
"(values))))"
"(let-values(((h_7)(compiled-module->h c_40)))(hash-ref h_7 'language-info #f)))))"
"(define-values"
"(1/module-compiled-imports)"
"(lambda(c_41)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_41)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_41)))"
"(values))))"
"(let-values(((inst_1)(compiled-module->declaration-instance c_41)))"
"(1/instance-variable-value inst_1 'requires)))))"
"(define-values"
"(1/module-compiled-exports)"
"(lambda(c_42)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_42)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_42)))"
"(values))))"
"(let-values(((inst_2)(compiled-module->declaration-instance c_42)))"
"(provides->api-provides"
"(1/instance-variable-value inst_2 'provides)"
"(1/instance-variable-value inst_2 'self-mpi))))))"
"(define-values"
"(1/module-compiled-indirect-exports)"
"(lambda(c_43)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_43)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-indirect-imports \"compiled-module-expression?\" c_43)))"
"(values))))"
"(let-values(((h_8 inst_3)(compiled-module->h+declaration-instance c_43)))"
"(let-values(((min-phase_3)(hash-ref h_8 'min-phase 0)))"
"(let-values(((max-phase_3)(hash-ref h_8 'max-phase 0)))"
"(variables->api-nonprovides"
"(1/instance-variable-value inst_3 'provides)"
"(let-values(((start_40) min-phase_3)((end_29)(add1 max-phase_3))((inc_21) 1))"
"(begin"
"(check-range start_40 end_29 inc_21)"
"((letrec-values(((for-loop_15)"
"(lambda(table_167 pos_95)"
"(if(< pos_95 end_29)"
"(let-values(((phase-level_20) pos_95))"
"(let-values(((table_168)"
"(let-values(((table_169) table_167))"
"(let-values(((table_101)"
"(let-values()"
"(let-values(((key_67 val_57)"
"(let-values()"
"(let-values(((linklet_4)"
"(hash-ref"
" h_8"
" phase-level_20"
" #f)))"
"(values"
" phase-level_20"
"(if linklet_4"
"(1/linklet-export-variables"
" linklet_4)"
" null))))))"
"(hash-set table_169 key_67 val_57)))))"
"(values table_101)))))"
"(if(not #f)(for-loop_15 table_168(+ pos_95 inc_21)) table_168)))"
" table_167))))"
" for-loop_15)"
" '#hash()"
" start_40))))))))))"
"(define-values"
"(1/module-compiled-cross-phase-persistent?)"
"(lambda(c_44)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_44)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-cross-phase-persistent?"
"                         \"compiled-module-expression?\""
" c_44)))"
"(values))))"
"(let-values(((h_9)(compiled-module->h c_44)))(hash-ref h_9 'cross-phase-persistent? #f)))))"
"(define-values"
"(normalize-to-linklet-directory)"
"(lambda(c_45)"
"(if(1/linklet-directory?(compiled->linklet-directory-or-bundle c_45))"
"(let-values() c_45)"
"(if(1/linklet-bundle? c_45)"
"(let-values()(1/hash->linklet-directory(hasheq #f c_45)))"
"(let-values()"
"(let-values(((the-struct_52) c_45))"
"(if(compiled-in-memory? the-struct_52)"
"(let-values(((linklet-directory9_0)"
"(normalize-to-linklet-directory(compiled-in-memory-linklet-directory c_45))))"
"(compiled-in-memory1.1"
" linklet-directory9_0"
"(compiled-in-memory-original-self the-struct_52)"
"(compiled-in-memory-requires the-struct_52)"
"(compiled-in-memory-provides the-struct_52)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_52)"
"(compiled-in-memory-compile-time-inspector the-struct_52)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_52)"
"(compiled-in-memory-mpis the-struct_52)"
"(compiled-in-memory-syntax-literals the-struct_52)"
"(compiled-in-memory-pre-compiled-in-memorys the-struct_52)"
"(compiled-in-memory-post-compiled-in-memorys the-struct_52)"
"(compiled-in-memory-namespace-scopes the-struct_52)"
"(compiled-in-memory-purely-functional? the-struct_52)))"
"              (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_52))))))))"
"(define-values(fixup-submodule-names)(lambda(c_46)(1/module-compiled-name c_46(1/module-compiled-name c_46))))"
"(define-values"
"(reset-submodule-names)"
"(lambda(b_76 pre?_1 submods_2)"
"(1/hash->linklet-bundle"
"(hash-set(1/linklet-bundle->hash b_76)(if pre?_1 'pre 'post)(map2 module-compiled-immediate-name submods_2)))))"
"(define-values"
"(compile-module13.1)"
"(lambda(force-linklet-directory?1_0"
" force-linklet-directory?6_0"
" modules-being-compiled4_0"
" modules-being-compiled9_0"
" need-compiled-submodule-rename?5_0"
" need-compiled-submodule-rename?10_0"
" serializable?2_0"
" serializable?7_0"
" to-source?3_1"
" to-source?8_0"
" p11_1"
" cctx12_1)"
"(let-values(((p_3) p11_1))"
"(let-values(((cctx_16) cctx12_1))"
"(let-values(((force-linklet-directory?_0)(if force-linklet-directory?6_0 force-linklet-directory?1_0 #f)))"
"(let-values(((serializable?_1)(if serializable?7_0 serializable?2_0 #f)))"
"(let-values(((to-source?_3)(if to-source?8_0 to-source?3_1 #f)))"
"(let-values(((modules-being-compiled_0)"
"(if modules-being-compiled9_0 modules-being-compiled4_0(make-hasheq))))"
"(let-values(((need-compiled-submodule-rename?_0)"
"(if need-compiled-submodule-rename?10_0 need-compiled-submodule-rename?5_0 #t)))"
"(let-values()"
"(let-values(((full-module-name_1)"
"(let-values(((parent-full-name_0)(compile-context-full-module-name cctx_16))"
"((name_58)(syntax-e$1(parsed-module-name-id p_3))))"
"(if parent-full-name_0"
"(append"
"(if(list? parent-full-name_0) parent-full-name_0(list parent-full-name_0))"
"(list name_58))"
" name_58))))"
"(let-values(((compiled-submodules_0)(parsed-module-compiled-submodules p_3)))"
"(let-values(((get-submodules_0)"
"(lambda(star?_0)"
"(let-values(((ht_129) compiled-submodules_0))"
"(begin"
"(check-in-hash ht_129)"
"((letrec-values(((for-loop_94)"
"(lambda(i_3)"
"(if i_3"
"(let-values(((name_59 star?+compiled_0)"
"(hash-iterate-key+value ht_129 i_3)))"
"(let-values(((post-guard-var_32)(lambda() #t)))"
"(let-values()"
"(if(eq? star?_0(car star?+compiled_0))"
"(let-values()"
"(let-values(((elem_32)"
"(let-values()"
"(let-values()"
"(cons"
" name_59"
"(if(if need-compiled-submodule-rename?_0"
"(not"
"(parsed-module-compiled-module"
" p_3))"
" #f)"
"(update-submodule-names"
"(cdr star?+compiled_0)"
" name_59"
" full-module-name_1)"
"(cdr"
" star?+compiled_0)))))))"
"(let-values(((result_98)"
"(if(post-guard-var_32)"
"(for-loop_94"
"(hash-iterate-next"
" ht_129"
" i_3))"
" null)))"
"(cons elem_32 result_98))))"
"(if(post-guard-var_32)"
"(for-loop_94(hash-iterate-next ht_129 i_3))"
" null)))))"
" null))))"
" for-loop_94)"
"(hash-iterate-first ht_129)))))))"
"(let-values(((pre-submodules_0)(get-submodules_0 #f)))"
"(let-values(((post-submodules_0)(get-submodules_0 #t)))"
"(let-values(((c1_129)(parsed-module-compiled-module p_3)))"
"(if c1_129"
"((lambda(c_47)"
"(let-values(((name_60 prefix_5)"
"(if(symbol? full-module-name_1)"
"(values full-module-name_1 null)"
"(let-values(((r_44)(reverse$1 full-module-name_1)))"
"(values(car r_44)(reverse$1(cdr r_44)))))))"
"(let-values(((m_18)(change-module-name c_47 name_60 prefix_5)))"
"(1/module-compiled-submodules"
"(1/module-compiled-submodules m_18 #t(map2 cdr pre-submodules_0))"
" #f"
"(map2 cdr post-submodules_0)))))"
" c1_129)"
"(let-values()"
"(let-values(((full-module-name39_0) full-module-name_1)"
"((force-linklet-directory?40_0) force-linklet-directory?_0)"
"((serializable?41_0) serializable?_1)"
"((to-source?42_0) to-source?_3)"
"((modules-being-compiled43_0) modules-being-compiled_0)"
"((pre-submodules44_0) pre-submodules_0)"
"((post-submodules45_0) post-submodules_0)"
"((need-compiled-submodule-rename?46_0)"
" need-compiled-submodule-rename?_0))"
"(compile-module-from-parsed34.1"
" force-linklet-directory?40_0"
" full-module-name39_0"
" modules-being-compiled43_0"
" need-compiled-submodule-rename?46_0"
" post-submodules45_0"
" pre-submodules44_0"
" serializable?41_0"
" to-source?42_0"
" p_3"
" cctx_16))))))))))))))))))))"
"(define-values"
"(compile-module-from-parsed34.1)"
"(lambda(force-linklet-directory?17_0"
" full-module-name16_0"
" modules-being-compiled20_0"
" need-compiled-submodule-rename?23_0"
" post-submodules22_0"
" pre-submodules21_0"
" serializable?18_0"
" to-source?19_0"
" p32_0"
" cctx33_0)"
"(let-values(((p_52) p32_0))"
"(let-values(((cctx_17) cctx33_0))"
"(let-values(((full-module-name_2) full-module-name16_0))"
"(let-values(((force-linklet-directory?_1) force-linklet-directory?17_0))"
"(let-values(((serializable?_2) serializable?18_0))"
"(let-values(((to-source?_4) to-source?19_0))"
"(let-values(((modules-being-compiled_1) modules-being-compiled20_0))"
"(let-values(((pre-submodules_1) pre-submodules21_0))"
"(let-values(((post-submodules_1) post-submodules22_0))"
"(let-values(((need-compiled-submodule-rename?_1) need-compiled-submodule-rename?23_0))"
"(let-values()"
"(let-values()"
"(let-values(((enclosing-self_0)(compile-context-module-self cctx_17)))"
"(let-values(((self_23)(parsed-module-self p_52)))"
"(let-values(((requires_5)(parsed-module-requires p_52)))"
"(let-values(((provides_10)(parsed-module-provides p_52)))"
"(let-values(((encoded-root-expand-ctx-box_1)"
"(box(parsed-module-encoded-root-ctx p_52))))"
"(let-values(((body-context-simple?_0)(parsed-module-root-ctx-simple? p_52)))"
"(let-values(((language-info_2)"
"(filter-language-info"
"(syntax-property$1(parsed-s p_52) 'module-language))))"
"(let-values(((bodys_6)(parsed-module-body p_52)))"
"(let-values(((empty-result-for-module->namespace?_0) #f))"
"(let-values(((mpis_18)(make-module-path-index-table)))"
"(let-values(((body-cctx_0)"
"(let-values(((the-struct_53) cctx_17))"
"(if(compile-context? the-struct_53)"
"(let-values(((phase47_1) 0)"
"((self48_2) self_23)"
"((module-self49_0) self_23)"
"((full-module-name50_0)"
" full-module-name_2)"
"((lazy-syntax-literals?51_0) #t))"
"(compile-context1.1"
"(compile-context-namespace the-struct_53)"
" phase47_1"
" self48_2"
" module-self49_0"
" full-module-name50_0"
" lazy-syntax-literals?51_0"
"(compile-context-header the-struct_53)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                   \"compile-context?\""
" the-struct_53)))))"
"(let-values(((cross-phase-persistent?_2) #f))"
"(let-values(((side-effects_0)(make-hasheqv)))"
"(let-values(((check-side-effects!_0)"
"(lambda(e_74"
" expected-results_3"
" phase_90"
" required-reference?_1)"
"(if(hash-ref side-effects_0 phase_90 #f)"
"(void)"
"(let-values()"
"(if(let-values(((required-reference?54_0)"
" required-reference?_1))"
"(any-side-effects?9.1"
" #f"
" #f"
" #f"
" #f"
" required-reference?54_0"
" #t"
" e_74"
" expected-results_3))"
"(let-values()"
"(hash-set! side-effects_0 phase_90 #t))"
"(void)))))))"
"(let-values((()"
"(begin"
"(if(if need-compiled-submodule-rename?_1"
" modules-being-compiled_1"
" #f)"
"(let-values()"
"(begin"
"(if(null? post-submodules_1)"
"(void)"
"(let-values()"
"(error"
"                                                                                   \"internal error: have post submodules, but not already compiled\")))"
"(register-compiled-submodules"
" modules-being-compiled_1"
" pre-submodules_1"
" self_23)))"
"(void))"
"(values))))"
"(let-values(((body-linklets_2"
" min-phase_4"
" max-phase_4"
" phase-to-link-module-uses_4"
" phase-to-link-module-uses-expr_3"
" phase-to-link-extra-inspectorsss_3"
" syntax-literals_4"
" root-ctx-pos_0)"
"(let-values(((temp58_3)"
"(list"
"(list get-syntax-literal!-id)"
"(list set-transformer!-id)))"
"((temp59_2) '((void)))"
"((temp60_1) '(0))"
"((encoded-root-expand-ctx-box61_0)"
" encoded-root-expand-ctx-box_1)"
"((body-context-simple?62_0)"
" body-context-simple?_0)"
"((check-side-effects!63_0)"
" check-side-effects!_0)"
"((temp64_1)"
"(lambda(body_4 cctx_18)"
"(if(parsed-#%declare? body_4)"
"(let-values()"
"(let-values(((ok?_26"
" _67_0"
" kw68_0)"
"(let-values(((s_204)"
"(parsed-s"
" body_4)))"
"(let-values(((orig-s_30)"
" s_204))"
"(let-values(((_67_1"
" kw68_1)"
"(let-values(((s_380)"
"(if(syntax?$1"
" s_204)"
"(syntax-e$1"
" s_204)"
" s_204)))"
"(if(pair?"
" s_380)"
"(let-values(((_69_0)"
"(let-values(((s_381)"
"(car"
" s_380)))"
" s_381))"
"((kw70_0)"
"(let-values(((s_382)"
"(cdr"
" s_380)))"
"(let-values(((s_187)"
"(if(syntax?$1"
" s_382)"
"(syntax-e$1"
" s_382)"
" s_382)))"
"(let-values(((flat-s_19)"
"(to-syntax-list.1"
" s_187)))"
"(if(not"
" flat-s_19)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_30))"
"(let-values()"
" flat-s_19)))))))"
"(values"
" _69_0"
" kw70_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_30)))))"
"(values"
" #t"
" _67_1"
" kw68_1))))))"
"(begin"
"(let-values(((lst_253)"
" kw68_0))"
"(begin"
"(check-list lst_253)"
"((letrec-values(((for-loop_216)"
"(lambda(lst_254)"
"(if(pair?"
" lst_254)"
"(let-values(((kw_0)"
"(unsafe-car"
" lst_254))"
"((rest_135)"
"(unsafe-cdr"
" lst_254)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(eq?"
"(syntax-e$1"
" kw_0)"
" '#:cross-phase-persistent)"
"(let-values()"
"(set! cross-phase-persistent?_2"
" #t))"
"(void))"
"(if(eq?"
"(syntax-e$1"
" kw_0)"
" '#:empty-namespace)"
"(let-values()"
"(begin"
"(set! empty-result-for-module->namespace?_0"
" #t)"
"(set-box!"
" encoded-root-expand-ctx-box_1"
" #f)))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_216"
" rest_135)"
"(values))))"
"(values)))))"
" for-loop_216)"
" lst_253)))"
"(void)"
" #f)))"
"(let-values() #f))))"
"((temp65_0)"
"(lambda(mod-name_15 phase_91)"
"(let-values(((ht_130)"
"(if modules-being-compiled_1"
"(hash-ref"
" modules-being-compiled_1"
" mod-name_15"
" #f)"
" #f)))"
"(if ht_130"
"(hash-ref"
" ht_130"
" phase_91"
" #f)"
" #f))))"
"((to-source?66_0) to-source?_4))"
"(compile-forms27.1"
" temp58_3"
" temp59_2"
" #t"
" check-side-effects!63_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" encoded-root-expand-ctx-box61_0"
" #t"
" temp60_1"
" #t"
" temp65_0"
" #t"
" temp64_1"
" #t"
" body-context-simple?62_0"
" #t"
" to-source?66_0"
" #t"
" bodys_6"
" body-cctx_0"
" mpis_18))))"
"(let-values((()"
"(begin"
"(if modules-being-compiled_1"
"(let-values()"
"(hash-set!"
" modules-being-compiled_1"
"(1/module-path-index-resolve self_23)"
"(let-values(((ht_131)"
" body-linklets_2))"
"(begin"
"(check-in-hash ht_131)"
"((letrec-values(((for-loop_217)"
"(lambda(table_40"
" i_166)"
"(if i_166"
"(let-values(((phase_92"
" linklet_5)"
"(hash-iterate-key+value"
" ht_131"
" i_166)))"
"(let-values(((table_170)"
"(let-values(((table_171)"
" table_40))"
"(let-values(((table_172)"
"(let-values()"
"(let-values(((key_68"
" val_58)"
"(let-values()"
"(values"
" phase_92"
"(module-linklet-info2.1"
" linklet_5"
"(hash-ref"
" phase-to-link-module-uses_4"
" phase_92"
" #f)"
" self_23)))))"
"(hash-set"
" table_171"
" key_68"
" val_58)))))"
"(values"
" table_172)))))"
"(if(not"
" #f)"
"(for-loop_217"
" table_170"
"(hash-iterate-next"
" ht_131"
" i_166))"
" table_170)))"
" table_40))))"
" for-loop_217)"
" '#hasheq()"
"(hash-iterate-first ht_131))))))"
"(void))"
"(values))))"
"(let-values(((declaration-linklet_0)"
"(if serializable?_2"
"((if to-source?_4"
" values"
"(lambda(s_383)"
"(let-values()"
"(1/compile-linklet s_383 'decl))))"
"(list"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id))"
" '(self-mpi"
" requires"
" provides"
" phase-to-link-modules)"
"(list"
" 'define-values"
" '(self-mpi)"
"(add-module-path-index!"
" mpis_18"
" self_23))"
"(list"
" 'define-values"
" '(requires)"
"(let-values(((temp73_0) #f))"
"(generate-deserialize6.1"
" temp73_0"
" #t"
" requires_5"
" mpis_18)))"
"(list"
" 'define-values"
" '(provides)"
"(let-values(((temp76_0) #f))"
"(generate-deserialize6.1"
" temp76_0"
" #t"
" provides_10"
" mpis_18)))"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_3)))"
" #f)))"
"(let-values(((syntax-literals-linklet_2)"
"(if(not"
"(syntax-literals-empty?"
" syntax-literals_4))"
"((if to-source?_4"
" values"
"(lambda(s_57)"
"(let-values()"
"(1/compile-linklet"
" s_57"
" 'syntax-literals))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id)"
"(list*"
" deserialized-syntax-vector-id"
"(if serializable?_2"
"(list deserialize-syntax-id)"
" '()))"
" instance-imports)"
"(list*"
" get-syntax-literal!-id"
" '(get-encoded-root-expand-ctx))"
"(qq-append"
"(let-values(((temp80_1)"
"(not serializable?_2)))"
"(generate-lazy-syntax-literals!9.1"
" temp80_1"
" #t"
" syntax-literals_4"
" mpis_18"
" self_23))"
"(list"
"(list"
" 'define-values"
" '(get-encoded-root-expand-ctx)"
"(if root-ctx-pos_0"
"(let-values()"
"(list"
" 'lambda"
" '()"
"(generate-lazy-syntax-literal-lookup"
" root-ctx-pos_0)))"
"(if empty-result-for-module->namespace?_0"
"(let-values() ''empty)"
"(let-values() ''#f))))))))"
" #f)))"
"(let-values(((syntax-literals-data-linklet_0)"
"(if serializable?_2"
"(if(not"
"(syntax-literals-empty?"
" syntax-literals_4))"
"((if to-source?_4"
" values"
"(lambda(s_292)"
"(let-values()"
"(1/compile-linklet"
" s_292"
" 'syntax-literals-data))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id))"
"(list"
" deserialized-syntax-vector-id"
" deserialize-syntax-id)"
"(list"
" 'define-values"
"(list"
" deserialized-syntax-vector-id)"
"(list*"
" 'make-vector"
"(syntax-literals-count"
" syntax-literals_4)"
" '(#f)))"
"(let-values()"
"(generate-lazy-syntax-literals-data!"
" syntax-literals_4"
" mpis_18))))"
" #f)"
" #f)))"
"(let-values(((data-linklet_0)"
"(if serializable?_2"
"((if to-source?_4"
" values"
"(lambda(s_384)"
"(let-values()"
"(1/compile-linklet"
" s_384"
" 'data))))"
"(list"
" 'linklet"
"(list deserialize-imports)"
"(list mpi-vector-id)"
"(list*"
" 'define-values"
"(list inspector-id)"
" '((current-code-inspector)))"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize"
" mpis_18))))"
" #f)))"
"(let-values(((bundle_1)"
"(let-values(((bundle_2)"
"(hash-set"
" body-linklets_2"
" 'name"
" full-module-name_2)))"
"(let-values(((bundle_3)"
"(hash-set"
" bundle_2"
" 'decl"
"(let-values(((or-part_100)"
" declaration-linklet_0))"
"(if or-part_100"
" or-part_100"
" 'in-memory)))))"
"(let-values(((bundle_4)"
"(if data-linklet_0"
"(hash-set"
" bundle_3"
" 'data"
" data-linklet_0)"
" bundle_3)))"
"(let-values(((bundle_5)"
"(if syntax-literals-linklet_2"
"(hash-set"
" bundle_4"
" 'stx"
" syntax-literals-linklet_2)"
" bundle_4)))"
"(let-values(((bundle_6)"
"(if syntax-literals-data-linklet_0"
"(hash-set"
" bundle_5"
" 'stx-data"
" syntax-literals-data-linklet_0)"
" bundle_5)))"
"(let-values(((bundle_7)"
"(if(null?"
" pre-submodules_1)"
" bundle_6"
"(hash-set"
" bundle_6"
" 'pre"
"(map2"
" car"
" pre-submodules_1)))))"
"(let-values(((bundle_8)"
"(if(null?"
" post-submodules_1)"
" bundle_7"
"(hash-set"
" bundle_7"
" 'post"
"(map2"
" car"
" post-submodules_1)))))"
"(let-values(((bundle_9)"
"(if cross-phase-persistent?_2"
"(hash-set"
" bundle_8"
" 'cross-phase-persistent?"
" #t)"
" bundle_8)))"
"(let-values(((bundle_10)"
"(if language-info_2"
"(hash-set"
" bundle_9"
" 'language-info"
" language-info_2)"
" bundle_9)))"
"(let-values(((bundle_11)"
"(if(zero?"
" min-phase_4)"
" bundle_10"
"(hash-set"
" bundle_10"
" 'min-phase"
" min-phase_4))))"
"(let-values(((bundle_12)"
"(if(zero?"
" max-phase_4)"
" bundle_11"
"(hash-set"
" bundle_11"
" 'max-phase"
" max-phase_4))))"
"(let-values(((bundle_13)"
"(if(hash-count"
" side-effects_0)"
"(hash-set"
" bundle_12"
" 'side-effects"
"(let-values(((temp81_0)"
"(hash-keys"
" side-effects_0))"
"((<82_0)"
" <))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" temp81_0"
" <82_0)))"
" bundle_12)))"
"(let-values(((bundle_14)"
"(if empty-result-for-module->namespace?_0"
"(hash-set"
" bundle_13"
" 'module->namespace"
" 'empty)"
" bundle_13)))"
"(1/hash->linklet-bundle"
" bundle_14))))))))))))))))"
"(let-values(((ld_4)"
"(if(if(null? pre-submodules_1)"
"(if(null?"
" post-submodules_1)"
"(not"
" force-linklet-directory?_1)"
" #f)"
" #f)"
"(let-values() bundle_1)"
"(let-values()"
"((if to-source?_4"
" values"
" 1/hash->linklet-directory)"
"(let-values(((lst_255)"
"(append"
" pre-submodules_1"
" post-submodules_1)))"
"(begin"
"(check-list lst_255)"
"((letrec-values(((for-loop_218)"
"(lambda(ht_132"
" lst_256)"
"(if(pair?"
" lst_256)"
"(let-values(((sm_0)"
"(unsafe-car"
" lst_256))"
"((rest_136)"
"(unsafe-cdr"
" lst_256)))"
"(let-values(((ht_133)"
"(let-values(((ht_134)"
" ht_132))"
"(let-values(((ht_135)"
"(let-values()"
"(hash-set"
" ht_134"
"(car"
" sm_0)"
"((if to-source?_4"
" values"
" compiled-in-memory-linklet-directory)"
"(cdr"
" sm_0))))))"
"(values"
" ht_135)))))"
"(if(not"
" #f)"
"(for-loop_218"
" ht_133"
" rest_136)"
" ht_133)))"
" ht_132))))"
" for-loop_218)"
"(hasheq #f bundle_1)"
" lst_255))))))))"
"(if to-source?_4"
"(let-values() ld_4)"
"(let-values()"
"(compiled-in-memory1.1"
" ld_4"
" self_23"
" requires_5"
" provides_10"
" phase-to-link-module-uses_4"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_3"
"(mpis-as-vector mpis_18)"
"(syntax-literals-as-vector"
" syntax-literals_4)"
"(map2 cdr pre-submodules_1)"
"(map2 cdr post-submodules_1)"
" #f"
" #f))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(update-submodule-names)"
"(lambda(cim_9 name_61 full-module-name_3)"
"(change-module-name"
" cim_9"
" name_61"
"(if(symbol? full-module-name_3)(list full-module-name_3)(reverse$1(cdr(reverse$1 full-module-name_3)))))))"
"(define-values"
"(register-compiled-submodules)"
"(lambda(modules-being-compiled_2 pre-submodules_2 self_24)"
"(begin"
"(let-values(((lst_257) pre-submodules_2))"
"(begin"
"(check-list lst_257)"
"((letrec-values(((for-loop_219)"
"(lambda(lst_258)"
"(if(pair? lst_258)"
"(let-values(((s_385)(unsafe-car lst_258))((rest_137)(unsafe-cdr lst_258)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((name_62)(car s_385)))"
"(let-values(((cim_10)(cdr s_385)))"
"(let-values(((phase-to-link-module-uses_5)"
"(compiled-in-memory-phase-to-link-module-uses"
" cim_10)))"
"(let-values(((ld_5)"
"(compiled-in-memory-linklet-directory"
" cim_10)))"
"(let-values(((sm-self_0)"
"(1/module-path-index-join"
"                                                                                             (list 'submod \".\" name_62)"
" self_24)))"
"(hash-set!"
" modules-being-compiled_2"
"(1/module-path-index-resolve sm-self_0)"
"(let-values(((ht_136)"
"(1/linklet-bundle->hash"
"(if(1/linklet-directory?"
" ld_5)"
"(hash-ref"
"(1/linklet-directory->hash"
" ld_5)"
" #f)"
" ld_5))))"
"(begin"
"(check-in-hash ht_136)"
"((letrec-values(((for-loop_220)"
"(lambda(table_173"
" i_167)"
"(if i_167"
"(let-values(((phase_93"
" linklet_6)"
"(hash-iterate-key+value"
" ht_136"
" i_167)))"
"(let-values(((table_125)"
"(let-values(((table_126)"
" table_173))"
"(if(number?"
" phase_93)"
"(let-values(((table_174)"
" table_126))"
"(let-values(((table_175)"
"(let-values()"
"(let-values(((key_69"
" val_59)"
"(let-values()"
"(values"
" phase_93"
"(module-linklet-info2.1"
" linklet_6"
"(hash-ref"
" phase-to-link-module-uses_5"
" phase_93"
" #f)"
" self_24)))))"
"(hash-set"
" table_174"
" key_69"
" val_59)))))"
"(values"
" table_175)))"
" table_126))))"
"(if(not"
" #f)"
"(for-loop_220"
" table_125"
"(hash-iterate-next"
" ht_136"
" i_167))"
" table_125)))"
" table_173))))"
" for-loop_220)"
" '#hasheq()"
"(hash-iterate-first"
" ht_136)))))))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_219 rest_137)(values))))"
"(values)))))"
" for-loop_219)"
" lst_257)))"
"(void))))"
"(define-values"
"(filter-language-info)"
"(lambda(li_2)"
"(if(vector? li_2)"
"(if(= 3(vector-length li_2))"
"(if(1/module-path?(vector-ref li_2 0))(if(symbol?(vector-ref li_2 1)) li_2 #f) #f)"
" #f)"
" #f)))"
"(define-values"
"(top-level-instance)"
"(1/make-instance"
" 'top-level"
" #f"
" top-level-bind!-id"
"(lambda(id_22 mpi_41 orig-phase_0 phase-shift_15 ns_63 sym_64 trans?_0 trans-val_0)"
"(let-values(((phase_44)(phase+ orig-phase_0 phase-shift_15)))"
"(let-values(((b_77)"
"(let-values(((temp7_1)(root-expand-context-frame-id(namespace-get-root-expand-ctx ns_63))))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" temp7_1"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi_41"
" phase_44"
" sym_64))))"
"(begin"
"(let-values(((id1_2) id_22)((b2_30) b_77)((phase3_1) phase_44))"
"(add-binding!17.1 #f #f #f #f id1_2 b2_30 phase3_1))"
"(if trans?_0"
"(let-values()(if trans-val_0(let-values()(maybe-install-free=id! trans-val_0 id_22 phase_44))(void)))"
"(let-values()(namespace-unset-transformer! ns_63 phase_44 sym_64)))))))"
" top-level-require!-id"
"(lambda(stx_14 ns_64)"
"(let-values(((reqs_2)(cdr(syntax->list$1 stx_14))))"
"(let-values(((temp8_3) #t)"
"((temp9_1) #f)"
"((reqs10_0) reqs_2)"
"((temp11_1) #f)"
"((ns12_0) ns_64)"
"((temp13_1)(namespace-phase ns_64))"
"((temp14_3)(make-requires+provides #f))"
"((temp15_3) 'require)"
"((temp16_4) #t))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp16_4"
" #t"
" #f"
" #f"
" temp8_3"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp9_1"
" #t"
" temp15_3"
" reqs10_0"
" temp11_1"
" ns12_0"
" temp13_1"
" temp14_3))))))"
"(define-values"
"(create-compiled-in-memorys-using-shared-data)"
"(lambda(tops_0 data-linklet_1 ns_56)"
"(let-values(((data-instance_5)"
"(1/instantiate-linklet"
" data-linklet_1"
"(list"
" deserialize-instance"
"(let-values(((ns1_0) ns_56)"
"((temp2_3)(namespace-phase ns_56))"
"((temp3_3)(namespace-mpi ns_56))"
"((temp4_2)(namespace-bulk-binding-registry ns_56))"
"((temp5_4)(current-code-inspector)))"
"(make-eager-instance-instance11.1 temp4_2 temp2_3 temp5_4 ns1_0 temp3_3))))))"
"(let-values(((data_0)(lambda(key_70)(1/instance-variable-value data-instance_5 key_70))))"
"(let-values(((mpi-vector_0)(data_0 mpi-vector-id)))"
"(let-values(((mpi-vector-trees_0)(data_0 'mpi-vector-trees)))"
"(let-values(((phase-to-link-modules-vector_0)(data_0 'phase-to-link-modules-vector)))"
"(let-values(((phase-to-link-modules-trees_0)(data_0 'phase-to-link-modules-trees)))"
"(let-values(((syntax-literals_5)(data_0 'syntax-literals)))"
"(let-values(((syntax-literals-trees_1)(data_0 'syntax-literals-trees)))"
"(let-values(((namespace-scopes_0)(extract-namespace-scopes ns_56)))"
"(letrec-values(((construct-compiled-in-memory_0)"
"(lambda(ld_6"
" mpi-vector-tree_0"
" phase-to-link-modules-tree_0"
" syntax-literals-tree_0)"
"(let-values(((is-module?_0)"
"(let-values(((or-part_87)(1/linklet-bundle? ld_6)))"
"(if or-part_87"
" or-part_87"
"(let-values(((b_78)"
"(hash-ref"
"(1/linklet-directory->hash ld_6)"
" #f"
" #f)))"
"(if b_78"
"(hash-ref(1/linklet-bundle->hash b_78) 'decl #f)"
" #f))))))"
"(let-values(((mpi-pos-vec_0)(vector-ref mpi-vector-tree_0 0)))"
"(let-values(((syntax-literals-spec_0)"
"(vector-ref syntax-literals-tree_0 0)))"
"(let-values(((pres_0)"
"(if is-module?_0"
"(extract-submodules ld_6 'pre)"
"(compiled-top->compiled-tops ld_6))))"
"(let-values(((posts_0)"
"(if is-module?_0(extract-submodules ld_6 'post) null)))"
"(let-values(((map-construct-compiled-in-memory_0)"
"(lambda(l_67 vec-pos_0)"
"(let-values(((lst_79) l_67)"
"((lst_122)"
"(vector-ref"
" mpi-vector-tree_0"
" vec-pos_0))"
"((lst_238)"
"(vector-ref"
" phase-to-link-modules-tree_0"
" vec-pos_0))"
"((lst_239)"
"(vector-ref"
" syntax-literals-tree_0"
" vec-pos_0)))"
"(begin"
"(check-list lst_79)"
"(check-list lst_122)"
"(check-list lst_238)"
"(check-list lst_239)"
"((letrec-values(((for-loop_221)"
"(lambda(lst_259"
" lst_240"
" lst_241"
" lst_84)"
"(if(if(pair? lst_259)"
"(if(pair? lst_240)"
"(if(pair? lst_241)"
"(pair? lst_84)"
" #f)"
" #f)"
" #f)"
"(let-values(((sub-ld_0)"
"(unsafe-car"
" lst_259))"
"((rest_138)"
"(unsafe-cdr"
" lst_259))"
"((mpi-vector-tree_1)"
"(unsafe-car"
" lst_240))"
"((rest_61)"
"(unsafe-cdr"
" lst_240))"
"((phase-to-link-modules-tree_1)"
"(unsafe-car"
" lst_241))"
"((rest_139)"
"(unsafe-cdr"
" lst_241))"
"((syntax-literals-tree_1)"
"(unsafe-car"
" lst_84))"
"((rest_140)"
"(unsafe-cdr"
" lst_84)))"
"(let-values(((post-guard-var_65)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_58)"
"(let-values()"
"(let-values()"
"(construct-compiled-in-memory_0"
" sub-ld_0"
" mpi-vector-tree_1"
" phase-to-link-modules-tree_1"
" syntax-literals-tree_1)))))"
"(let-values(((result_5)"
"(if(post-guard-var_65)"
"(for-loop_221"
" rest_138"
" rest_61"
" rest_139"
" rest_140)"
" null)))"
"(cons"
" elem_58"
" result_5))))))"
" null))))"
" for-loop_221)"
" lst_79"
" lst_122"
" lst_238"
" lst_239))))))"
"(compiled-in-memory1.1"
" ld_6"
" #f"
" #f"
" #f"
"(vector-ref"
" phase-to-link-modules-vector_0"
"(vector-ref phase-to-link-modules-tree_0 0))"
" #f"
" '#hasheqv()"
"(let-values(((len_29)(vector-length mpi-pos-vec_0)))"
"(begin"
"(if(exact-nonnegative-integer? len_29)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                               \"exact-nonnegative-integer?\""
" len_29)))"
"(let-values(((v_191)(make-vector len_29 0)))"
"(begin"
"(if(zero? len_29)"
"(void)"
"(let-values()"
"(let-values(((vec_61 len_30)"
"(let-values(((vec_62) mpi-pos-vec_0))"
"(begin"
"(check-vector vec_62)"
"(values"
" vec_62"
"(unsafe-vector-length vec_62))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_15)"
"(lambda(i_101 pos_95)"
"(if(unsafe-fx< pos_95 len_30)"
"(let-values(((pos_99)"
"(unsafe-vector-ref"
" vec_61"
" pos_95)))"
"(let-values(((i_168)"
"(let-values(((i_169)"
" i_101))"
"(let-values(((i_170)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_191"
" i_169"
"(let-values()"
"(vector-ref"
" mpi-vector_0"
" pos_99)))"
"(unsafe-fx+"
" 1"
" i_169)))))"
"(values"
" i_170)))))"
"(if(if(not"
"((lambda x_110"
"(unsafe-fx="
" i_168"
" len_29))"
" pos_99))"
"(not #f)"
" #f)"
"(for-loop_15"
" i_168"
"(unsafe-fx+"
" 1"
" pos_95))"
" i_168)))"
" i_101))))"
" for-loop_15)"
" 0"
" 0)))))"
" v_191))))"
"(let-values(((len_31)(cdr syntax-literals-spec_0)))"
"(begin"
"(if(exact-nonnegative-integer? len_31)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                               \"exact-nonnegative-integer?\""
" len_31)))"
"(let-values(((v_140)(make-vector len_31 0)))"
"(begin"
"(if(zero? len_31)"
"(void)"
"(let-values()"
"(let-values(((start_41) 0)"
"((end_30)(cdr syntax-literals-spec_0))"
"((inc_22) 1))"
"(begin"
"(check-range start_41 end_30 inc_22)"
"((letrec-values(((for-loop_222)"
"(lambda(i_161 pos_100)"
"(if(< pos_100 end_30)"
"(let-values(((i_171)"
" pos_100))"
"(let-values(((i_99)"
"(let-values(((i_172)"
" i_161))"
"(let-values(((i_173)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_140"
" i_172"
"(let-values()"
"(if syntax-literals_5"
"(vector-ref"
" syntax-literals_5"
"(+"
"(car"
" syntax-literals-spec_0)"
" i_171))"
" #f)))"
"(unsafe-fx+"
" 1"
" i_172)))))"
"(values"
" i_173)))))"
"(if(if(not"
"((lambda x_111"
"(unsafe-fx="
" i_99"
" len_31))"
" i_171))"
"(not #f)"
" #f)"
"(for-loop_222"
" i_99"
"(+ pos_100 inc_22))"
" i_99)))"
" i_161))))"
" for-loop_222)"
" 0"
" start_41)))))"
" v_140))))"
"(map-construct-compiled-in-memory_0 pres_0 1)"
"(map-construct-compiled-in-memory_0 posts_0 2)"
" namespace-scopes_0"
" #f))))))))))"
"(map2"
" construct-compiled-in-memory_0"
" tops_0"
" mpi-vector-trees_0"
" phase-to-link-modules-trees_0"
" syntax-literals-trees_1)))))))))))))"
"(define-values"
"(extract-submodules)"
"(lambda(ld_7 names-key_0)"
"(if(1/linklet-bundle? ld_7)"
"(let-values() null)"
"(let-values()"
"(let-values(((h_10)(1/linklet-directory->hash ld_7)))"
"(let-values(((mod_3)(hash-ref h_10 #f #f)))"
"            (let-values ((() (begin (if mod_3 (void) (let-values () (error \"missing main module\"))) (values))))"
"(let-values(((mh_0)(1/linklet-bundle->hash mod_3)))"
"(let-values(((names_2)(hash-ref mh_0 names-key_0 null)))"
"(let-values(((lst_22) names_2))"
"(begin"
"(check-list lst_22)"
"((letrec-values(((for-loop_223)"
"(lambda(lst_260)"
"(if(pair? lst_260)"
"(let-values(((name_63)(unsafe-car lst_260))"
"((rest_141)(unsafe-cdr lst_260)))"
"(let-values(((post-guard-var_34)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_34)"
"(let-values()"
"(let-values()"
"(hash-ref"
" h_10"
" name_63"
"(lambda()"
"(error"
"                                                                        \"missing submodule declaration:\""
" name_63)))))))"
"(let-values(((result_153)"
"(if(post-guard-var_34)"
"(for-loop_223 rest_141)"
" null)))"
"(cons elem_34 result_153))))))"
" null))))"
" for-loop_223)"
" lst_22))))))))))))"
"(define-values"
"(eval-single-top)"
"(lambda(c_32 ns_40)(let-values(((temp20_0) #t))(eval-one-top15.1 temp20_0 #t c_32 ns_40 #f #f))))"
"(define-values"
"(compiled-multiple-top?)"
"(lambda(c_36)"
"(let-values(((ld_3)(if(compiled-in-memory? c_36)(compiled-in-memory-linklet-directory c_36) c_36)))"
"(if(1/linklet-directory? ld_3)(not(hash-ref(1/linklet-directory->hash ld_3) #f #f)) #f))))"
"(define-values"
"(eval-top)"
"(let-values(((eval-top7_0)"
"(lambda(c5_0 ns6_0 eval-compiled1_0 as-tail?2_0 eval-compiled3_0 as-tail?4_0)"
"(let-values(((c_48) c5_0))"
"(let-values(((ns_65) ns6_0))"
"(let-values(((eval-compiled_0)(if eval-compiled3_0 eval-compiled1_0 eval-top)))"
"(let-values(((as-tail?_0)(if as-tail?4_0 as-tail?2_0 #t)))"
"(let-values()"
"(if(compiled-multiple-top? c_48)"
"(eval-multiple-tops c_48 ns_65 eval-compiled_0 as-tail?_0)"
"(let-values(((c21_0) c_48)((ns22_0) ns_65)((as-tail?23_0) as-tail?_0))"
"(eval-one-top15.1 #f #f c21_0 ns22_0 as-tail?23_0 #t)))))))))))"
"(case-lambda"
"((c_49 ns_66)(eval-top7_0 c_49 ns_66 #f #f #f #f))"
"((c_50 ns_67 eval-compiled_1 as-tail?2_1)(eval-top7_0 c_50 ns_67 eval-compiled_1 as-tail?2_1 #t #t))"
"((c_51 ns_68 eval-compiled1_1)(eval-top7_0 c_51 ns_68 eval-compiled1_1 #f #t #f)))))"
"(define-values"
"(eval-multiple-tops)"
"(lambda(c_52 ns_69 eval-compiled_2 as-tail?_1)"
"(let-values(((eval-compiled-parts_0)"
"(lambda(l_68)"
"((letrec-values(((loop_143)"
"(lambda(l_69)"
"(if(null? l_69)"
"(let-values() void)"
"(if(null?(cdr l_69))"
"(let-values()(eval-compiled_2(car l_69) ns_69 as-tail?_1))"
"(let-values()"
"(begin(eval-compiled_2(car l_69) ns_69 #f)(loop_143(cdr l_69)))))))))"
" loop_143)"
" l_68))))"
"(if(compiled-in-memory? c_52)"
"(let-values()(eval-compiled-parts_0(compiled-in-memory-pre-compiled-in-memorys c_52)))"
"(let-values(((c1_130)(hash-ref(1/linklet-directory->hash c_52) 'data #f)))"
"(if c1_130"
"((lambda(data-ld_0)"
"(eval-compiled-parts_0"
"(create-compiled-in-memorys-using-shared-data"
"(compiled-top->compiled-tops c_52)"
"(hash-ref(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash data-ld_0) #f)) 0)"
" ns_69)))"
" c1_130)"
"(let-values()(eval-compiled-parts_0(compiled-top->compiled-tops c_52)))))))))"
"(define-values"
"(eval-one-top15.1)"
"(lambda(single-expression?9_0 single-expression?10_0 c13_0 ns14_1 as-tail?11_0 as-tail?12_0)"
"(let-values(((c_40) c13_0))"
"(let-values(((ns_70) ns14_1))"
"(let-values(((as-tail?_2)(if as-tail?12_0 as-tail?11_0 #t)))"
"(let-values(((single-expression?_1)(if single-expression?10_0 single-expression?9_0 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((ld_8)(if(compiled-in-memory? c_40)(compiled-in-memory-linklet-directory c_40) c_40)))"
"(let-values(((h_11)(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash ld_8) #f))))"
"(let-values(((link-instance_0)"
"(if(compiled-in-memory? c_40)"
"(link-instance-from-compiled-in-memory"
" c_40"
"(if(not single-expression?_1) ns_70 #f))"
"(1/instantiate-linklet"
"(hash-ref h_11 'link)"
"(list"
" deserialize-instance"
"(let-values(((ns24_0) ns_70)"
"((temp25_2)(namespace-phase ns_70))"
"((temp26_0)(namespace-mpi ns_70))"
"((temp27_3)(namespace-bulk-binding-registry ns_70))"
"((temp28_2)(current-code-inspector)))"
"(make-eager-instance-instance11.1"
" temp27_3"
" temp25_2"
" temp28_2"
" ns24_0"
" temp26_0)))))))"
"(let-values(((orig-phase_1)(hash-ref h_11 'original-phase)))"
"(let-values(((max-phase_5)(hash-ref h_11 'max-phase)))"
"(let-values(((phase-shift_19)(phase-(namespace-phase ns_70) orig-phase_1)))"
"(let-values(((extra-inspector_6)"
"(if(compiled-in-memory? c_40)"
"(compiled-in-memory-compile-time-inspector c_40)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_4)"
"(if(compiled-in-memory? c_40)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_40)"
" '#hasheqv())))"
"(let-values(((phase-to-link-modules_1)"
"(if(compiled-in-memory? c_40)"
"(compiled-in-memory-phase-to-link-module-uses c_40)"
"(1/instance-variable-value link-instance_0 'phase-to-link-modules))))"
"(let-values(((thunk_3)"
"(let-values(((start_42) max-phase_5)"
"((end_31)(sub1 orig-phase_1))"
"((inc_23) -1))"
"(begin"
"(check-range start_42 end_31 inc_23)"
"((letrec-values(((for-loop_21)"
"(lambda(prev-thunk_0 pos_101)"
"(if(> pos_101 end_31)"
"(let-values(((phase_94) pos_101))"
"(let-values(((prev-thunk_1)"
"(let-values(((prev-thunk_2)"
" prev-thunk_0))"
"(let-values(((prev-thunk_3)"
"(let-values()"
"(let-values((()"
"(begin"
"(prev-thunk_2"
" #f)"
"(values))))"
"(let-values(((module-uses_2)"
"(hash-ref"
" phase-to-link-modules_1"
" phase_94"
" null)))"
"(let-values(((import-module-instances_2"
" import-instances_1)"
"(let-values(((mis_6"
" is_5)"
"(let-values(((lst_9)"
" module-uses_2))"
"(begin"
"(check-list"
" lst_9)"
"((letrec-values(((for-loop_1)"
"(lambda(mis_7"
" is_6"
" lst_22)"
"(if(pair?"
" lst_22)"
"(let-values(((mu_9)"
"(unsafe-car"
" lst_22))"
"((rest_7)"
"(unsafe-cdr"
" lst_22)))"
"(let-values(((mis_8"
" is_7)"
"(let-values(((mis_9)"
" mis_7)"
"((is_8)"
" is_6))"
"(let-values(((mis_10"
" is_9)"
"(let-values()"
"(let-values(((mis29_0"
" is30_0)"
"(let-values()"
"(let-values(((temp33_1)"
"(phase-"
"(phase+"
" phase_94"
" phase-shift_19)"
"(module-use-phase"
" mu_9))))"
"(namespace-module-use->module+linklet-instances144.1"
" temp33_1"
" #f"
" #f"
" #f"
" #f"
" ns_70"
" mu_9)))))"
"(values"
"(cons"
" mis29_0"
" mis_9)"
"(cons"
" is30_0"
" is_8))))))"
"(values"
" mis_10"
" is_9)))))"
"(if(not"
" #f)"
"(for-loop_1"
" mis_8"
" is_7"
" rest_7)"
"(values"
" mis_8"
" is_7))))"
"(values"
" mis_7"
" is_6)))))"
" for-loop_1)"
" null"
" null"
" lst_9)))))"
"(values"
"(reverse$1"
" mis_6)"
"(reverse$1"
" is_5)))))"
"(let-values(((phase-ns_0)"
"(namespace->namespace-at-phase"
" ns_70"
"(phase+"
" phase_94"
" phase-shift_19))))"
"(let-values(((inst_4)"
"(if single-expression?_1"
" link-instance_0"
"(let-values(((phase-ns34_0)"
" phase-ns_0)"
"((phase-shift35_0)"
" phase-shift_19)"
"((temp36_2)"
"(namespace-mpi"
" ns_70))"
"((temp37_1)"
"(namespace-inspector"
" ns_70))"
"((temp38_1)"
"(namespace-bulk-binding-registry"
" ns_70))"
"((temp39_1)"
"(lambda(name_64"
" val_60)"
"(namespace-set-transformer!"
" ns_70"
"(phase+"
"(sub1"
" phase_94)"
" phase-shift_19)"
" name_64"
" val_60))))"
"(make-instance-instance13.1"
" temp38_1"
" temp37_1"
" phase-ns34_0"
" phase-shift35_0"
" temp36_2"
" temp39_1)))))"
"(let-values(((linklet_7)"
"(hash-ref"
" h_11"
" phase_94"
" #f)))"
"(if linklet_7"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((temp41_2)"
" 3)"
"((module-uses42_0)"
" module-uses_2)"
"((import-module-instances43_0)"
" import-module-instances_2)"
"((temp44_0)"
"(current-code-inspector))"
"((extra-inspector45_1)"
" extra-inspector_6)"
"((temp46_1)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_4"
" phase_94"
" #f)))"
"(check-require-access9.1"
" temp41_2"
" linklet_7"
" module-uses42_0"
" import-module-instances43_0"
" temp44_0"
" extra-inspector45_1"
" temp46_1))"
"(values))))"
"(let-values(((instantiate_0)"
"(lambda(tail?_49)"
"(1/instantiate-linklet"
" linklet_7"
"(list*"
" top-level-instance"
" link-instance_0"
" inst_4"
" import-instances_1)"
"(namespace->instance"
" ns_70"
"(phase-"
"(phase+"
" phase_94"
" phase-shift_19)"
"(namespace-0-phase"
" ns_70)))"
"(not"
" tail?_49)))))"
"(if(zero-phase?"
" phase_94)"
"(let-values()"
" instantiate_0)"
"(if single-expression?_1"
"(let-values()"
"(lambda(tail?_50)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" phase-ns_0)"
"(let-values()"
"(instantiate_0"
" tail?_50)))))"
"(let-values()"
"(let-values(((ns-1_1)"
"(namespace->namespace-at-phase"
" phase-ns_0"
"(sub1"
" phase_94))))"
"(lambda(tail?_51)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(let-values(((ns-147_0)"
" ns-1_1))"
"(make-expand-context8.1"
" #f"
" #f"
" #f"
" #f"
" ns-147_0))"
" 1/current-namespace"
" phase-ns_0)"
"(let-values()"
"(instantiate_0"
" tail?_51)))))))))))"
"(let-values()"
" void)))))))))))"
"(values prev-thunk_3)))))"
"(if(not #f)"
"(for-loop_21"
" prev-thunk_1"
"(+ pos_101 inc_23))"
" prev-thunk_1)))"
" prev-thunk_0))))"
" for-loop_21)"
" void"
" start_42)))))"
"(thunk_3 as-tail?_2)))))))))))))))))))"
"(define-values"
"(link-instance-from-compiled-in-memory)"
"(lambda(cim_11 to-ns_0)"
"(let-values(((orig-syntax-literals_0)(compiled-in-memory-syntax-literals cim_11)))"
"(let-values(((syntax-literals_6)"
"(if(not to-ns_0)"
"(let-values() orig-syntax-literals_0)"
"(if(namespace-scopes=?"
"(compiled-in-memory-namespace-scopes cim_11)"
"(extract-namespace-scopes to-ns_0))"
"(let-values() orig-syntax-literals_0)"
"(let-values()"
"(let-values(((len_32)(vector-length orig-syntax-literals_0)))"
"(begin"
"(if(exact-nonnegative-integer? len_32)"
"(void)"
"                                (let-values () (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_32)))"
"(let-values(((v_192)(make-vector len_32 0)))"
"(begin"
"(if(zero? len_32)"
"(void)"
"(let-values()"
"(let-values(((vec_63 len_33)"
"(let-values(((vec_64) orig-syntax-literals_0))"
"(begin"
"(check-vector vec_64)"
"(values vec_64(unsafe-vector-length vec_64))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_6)"
"(lambda(i_37 pos_102)"
"(if(unsafe-fx< pos_102 len_33)"
"(let-values(((s_89)"
"(unsafe-vector-ref vec_63 pos_102)))"
"(let-values(((i_174)"
"(let-values(((i_175) i_37))"
"(let-values(((i_176)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_192"
" i_175"
"(let-values()"
"(swap-top-level-scopes"
" s_89"
"(compiled-in-memory-namespace-scopes"
" cim_11)"
" to-ns_0)))"
"(unsafe-fx+"
" 1"
" i_175)))))"
"(values i_176)))))"
"(if(if(not"
"((lambda x_112(unsafe-fx= i_174 len_32))"
" s_89))"
"(not #f)"
" #f)"
"(for-loop_6 i_174(unsafe-fx+ 1 pos_102))"
" i_174)))"
" i_37))))"
" for-loop_6)"
" 0"
" 0)))))"
" v_192)))))))))"
"(1/make-instance"
" 'link"
" #f"
" mpi-vector-id"
"(compiled-in-memory-mpis cim_11)"
" syntax-literals-id"
" syntax-literals_6)))))"
"(define-values(not-available)(gensym 'not-available))"
"(define-values(get-not-available)(lambda() not-available))"
"(define-values"
"(can-direct-eval?)"
"(lambda(p_47 ns_40)"
"(if(parsed-app? p_47)"
"(let-values()"
"(if(can-direct-eval?(parsed-app-rator p_47) ns_40)"
"(let-values(((lst_73)(parsed-app-rands p_47)))"
"(begin"
"(check-list lst_73)"
"((letrec-values(((for-loop_88)"
"(lambda(result_154 lst_74)"
"(if(pair? lst_74)"
"(let-values(((r_45)(unsafe-car lst_74))((rest_33)(unsafe-cdr lst_74)))"
"(let-values(((result_77)"
"(let-values()"
"(let-values(((result_84)"
"(let-values()"
"(let-values()(can-direct-eval? r_45 ns_40)))))"
"(values result_84)))))"
"(if(if(not((lambda x_113(not result_77)) r_45))(not #f) #f)"
"(for-loop_88 result_77 rest_33)"
" result_77)))"
" result_154))))"
" for-loop_88)"
" #t"
" lst_73)))"
" #f))"
"(if(parsed-id? p_47)"
"(let-values()(not(eq?(get-id-value p_47 ns_40) not-available)))"
"(if(parsed-quote? p_47)"
"(let-values() #t)"
"(if(parsed-quote-syntax? p_47)(let-values() #t)(let-values() #f)))))))"
"(define-values"
"(direct-eval)"
"(lambda(p_42 ns_65)"
"(if(parsed-app? p_42)"
"(let-values()"
"(apply"
"(direct-eval(parsed-app-rator p_42) ns_65)"
"(let-values(((lst_163)(parsed-app-rands p_42)))"
"(begin"
"(check-list lst_163)"
"((letrec-values(((for-loop_224)"
"(lambda(lst_95)"
"(if(pair? lst_95)"
"(let-values(((r_46)(unsafe-car lst_95))((rest_142)(unsafe-cdr lst_95)))"
"(let-values(((post-guard-var_66)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_59)"
"(let-values()(let-values()(direct-eval r_46 ns_65)))))"
"(let-values(((result_75)"
"(if(post-guard-var_66)(for-loop_224 rest_142) null)))"
"(cons elem_59 result_75))))))"
" null))))"
" for-loop_224)"
" lst_163)))))"
"(if(parsed-id? p_42)"
"(let-values()(get-id-value p_42 ns_65))"
"(if(parsed-quote? p_42)"
"(let-values()(parsed-quote-datum p_42))"
"(if(parsed-quote-syntax? p_42)(let-values()(parsed-quote-syntax-datum p_42))(let-values() #f)))))))"
"(define-values"
"(get-id-value)"
"(lambda(p_5 ns_71)"
"(let-values(((b_63)(parsed-id-binding p_5)))"
"(if(parsed-primitive-id? p_5)"
"(let-values()(hash-ref(1/primitive-table '#%kernel)(module-binding-sym b_63) get-not-available))"
"(if(let-values(((or-part_260)(parsed-top-id? p_5)))"
"(if or-part_260"
" or-part_260"
"(let-values(((or-part_261)(not b_63)))"
"(if or-part_261 or-part_261(eq?(namespace-mpi ns_71)(module-binding-module b_63))))))"
"(let-values()"
"(namespace-get-variable"
" ns_71"
"(if b_63(module-binding-phase b_63)(namespace-phase ns_71))"
"(if b_63(module-binding-sym b_63)(syntax-e$1(parsed-s p_5)))"
" get-not-available))"
"(let-values()"
"(let-values(((mi_18)"
"(let-values(((ns1_1) ns_71)"
"((temp2_4)(1/module-path-index-resolve(module-binding-module b_63)))"
"((temp3_4)(phase-(namespace-phase ns_71)(module-binding-phase b_63))))"
"(namespace->module-instance68.1 #f #f #f #f #f #f ns1_1 temp2_4 temp3_4))))"
"(if(not mi_18)"
"(let-values() not-available)"
"(if(check-single-require-access"
" mi_18"
"(module-binding-phase b_63)"
"(module-binding-sym b_63)"
"(module-binding-extra-inspector b_63))"
"(let-values()"
"(namespace-get-variable"
"(module-instance-namespace mi_18)"
"(module-binding-phase b_63)"
"(module-binding-sym b_63)"
" get-not-available))"
"(let-values() not-available))))))))))"
"(define-values(runtime-scope)(new-multi-scope))"
"(define-values(runtime-stx)(add-scope empty-syntax runtime-scope))"
"(define-values(runtime-module-name)(1/make-resolved-module-path '#%runtime))"
"(define-values(runtime-mpi)(1/module-path-index-join ''#%runtime #f))"
"(define-values"
"(add-runtime-primitive!)"
"(lambda(sym_24)"
"(let-values(((temp1_2)(syntax-scope-set runtime-stx 0))"
"((sym2_0) sym_24)"
"((temp3_5)"
"(let-values(((runtime-mpi4_0) runtime-mpi)((temp5_5) 0)((sym6_1) sym_24))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" runtime-mpi4_0"
" temp5_5"
" sym6_1))))"
"(add-binding-in-scopes!16.1 #f #f temp1_2 sym2_0 temp3_5))))"
"(call-with-values(lambda()(add-runtime-primitive! 'values)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'cons)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'list)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'make-struct-type)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'make-struct-type-property)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'gensym)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'string->uninterned-symbol)) print-values)"
"(define-values"
"(runtime-instances)"
" '(#%kernel #%paramz #%foreign #%unsafe #%flfxnum #%extfl #%network #%place #%futures))"
"(define-values(box-cons!)(lambda(b_16 v_75)(set-box! b_16(cons v_75(unbox b_16)))))"
"(define-values(box-clear!)(lambda(b_17)(begin0(reverse$1(unbox b_17))(set-box! b_17 null))))"
"(define-values"
"(struct:lift-context lift-context1.1 lift-context? lift-context-convert lift-context-lifts lift-context-module*-ok?)"
"(let-values(((struct:_70 make-_70 ?_70 -ref_70 -set!_70)"
"(let-values()"
"(let-values()"
"(make-struct-type 'lift-context #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'lift-context)))))"
"(values"
" struct:_70"
" make-_70"
" ?_70"
"(make-struct-field-accessor -ref_70 0 'convert)"
"(make-struct-field-accessor -ref_70 1 'lifts)"
"(make-struct-field-accessor -ref_70 2 'module*-ok?))))"
"(define-values"
"(struct:lifted-bind lifted-bind2.1 lifted-bind? lifted-bind-ids lifted-bind-keys lifted-bind-rhs)"
"(let-values(((struct:_71 make-_71 ?_71 -ref_71 -set!_71)"
"(let-values()"
"(let-values()"
"(make-struct-type 'lifted-bind #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'lifted-bind)))))"
"(values"
" struct:_71"
" make-_71"
" ?_71"
"(make-struct-field-accessor -ref_71 0 'ids)"
"(make-struct-field-accessor -ref_71 1 'keys)"
"(make-struct-field-accessor -ref_71 2 'rhs))))"
"(define-values"
"(make-lift-context6.1)"
"(lambda(module*-ok?3_0 module*-ok?4_0 convert5_0)"
"(let-values(((convert_0) convert5_0))"
"(let-values(((module*-ok?_0)(if module*-ok?4_0 module*-ok?3_0 #f)))"
"(let-values()(lift-context1.1 convert_0(box null) module*-ok?_0))))))"
"(define-values"
"(add-lifted!)"
"(lambda(lifts_1 ids_16 rhs_12 phase_95)"
"(let-values(((lifted-ids_0 lifted_0)((lift-context-convert lifts_1) ids_16 rhs_12 phase_95)))"
"(begin(box-cons!(lift-context-lifts lifts_1) lifted_0) lifted-ids_0))))"
"(define-values(get-and-clear-lifts!)(lambda(lifts_2)(box-clear!(lift-context-lifts lifts_2))))"
"(define-values"
"(make-local-lift)"
"(lambda(lift-env_1 counter_3)"
"(lambda(ids_17 rhs_13 phase_96)"
"(let-values(((keys_2)"
"(let-values(((lst_93) ids_17))"
"(begin"
"(check-list lst_93)"
"((letrec-values(((for-loop_102)"
"(lambda(lst_94)"
"(if(pair? lst_94)"
"(let-values(((id_54)(unsafe-car lst_94))"
"((rest_46)(unsafe-cdr lst_94)))"
"(let-values(((post-guard-var_21)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_21)"
"(let-values()"
"(let-values()"
"(let-values(((key_71)"
"(let-values(((id30_0) id_54)"
"((phase31_0) phase_96)"
"((counter32_0)"
" counter_3))"
"(add-local-binding!35.1"
" #f"
" #f"
" #f"
" #f"
" id30_0"
" phase31_0"
" counter32_0))))"
"(begin"
"(set-box!"
" lift-env_1"
"(hash-set"
"(unbox lift-env_1)"
" key_71"
" variable))"
" key_71))))))"
"(let-values(((result_155)"
"(if(post-guard-var_21)"
"(for-loop_102 rest_46)"
" null)))"
"(cons elem_21 result_155))))))"
" null))))"
" for-loop_102)"
" lst_93)))))"
"(values ids_17(lifted-bind2.1 ids_17 keys_2 rhs_13))))))"
"(define-values"
"(make-top-level-lift)"
"(lambda(ctx_11)"
"(lambda(ids_18 rhs_14 phase_97)"
"(let-values(((post-scope_0)"
"(root-expand-context-post-expansion-scope"
"(namespace-get-root-expand-ctx(expand-context-namespace ctx_11)))))"
"(let-values(((tl-ids_1)"
"(let-values(((lst_261) ids_18))"
"(begin"
"(check-list lst_261)"
"((letrec-values(((for-loop_225)"
"(lambda(lst_262)"
"(if(pair? lst_262)"
"(let-values(((id_56)(unsafe-car lst_262))"
"((rest_143)(unsafe-cdr lst_262)))"
"(let-values(((post-guard-var_67)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_60)"
"(let-values()"
"(let-values()(add-scope id_56 post-scope_0)))))"
"(let-values(((result_156)"
"(if(post-guard-var_67)"
"(for-loop_225 rest_143)"
" null)))"
"(cons elem_60 result_156))))))"
" null))))"
" for-loop_225)"
" lst_261)))))"
"(let-values(((syms_20)(select-defined-syms-and-bind!/ctx tl-ids_1 ctx_11)))"
"(values tl-ids_1(lifted-bind2.1 tl-ids_1 syms_20 rhs_14))))))))"
"(define-values"
"(wrap-lifts-as-let)"
"(lambda(lifts_3 body_0 phase_12)"
"(datum->syntax$1"
" #f"
"(let-values(((lst_126)(reverse$1 lifts_3)))"
"(begin"
"(check-list lst_126)"
"((letrec-values(((for-loop_48)"
"(lambda(body_5 lst_128)"
"(if(pair? lst_128)"
"(let-values(((lift_0)(unsafe-car lst_128))((rest_63)(unsafe-cdr lst_128)))"
"(let-values(((body_6)"
"(let-values(((body_7) body_5))"
"(let-values(((body_8)"
"(let-values()"
"(begin"
"(if(lifted-bind? lift_0)"
"(void)"
"(let-values()"
"                                                                       (error \"non-bindings in `lift-context`\")))"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx phase_12)"
" 'let-values)"
"(list"
"(list"
"(lifted-bind-ids lift_0)"
"(lifted-bind-rhs lift_0)))"
" body_7)))))"
"(values body_8)))))"
"(if(not #f)(for-loop_48 body_6 rest_63) body_6)))"
" body_5))))"
" for-loop_48)"
" body_0"
" lst_126))))))"
"(define-values"
"(wrap-lifts-as-begin14.1)"
"(lambda(adjust-form9_0 adjust-form10_0 lifts11_0 body12_0 phase13_1)"
"(let-values(((lifts_4) lifts11_0))"
"(let-values(((body_3) body12_0))"
"(let-values(((phase_98) phase13_1))"
"(let-values(((adjust-form_0)(if adjust-form10_0 adjust-form9_0 values)))"
"(let-values()"
"(datum->syntax$1"
" #f"
"(cons"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_98) 'begin)"
"(append"
"(let-values(((lst_263) lifts_4))"
"(begin"
"(check-list lst_263)"
"((letrec-values(((for-loop_73)"
"(lambda(lst_264)"
"(if(pair? lst_264)"
"(let-values(((lift_1)(unsafe-car lst_264))"
"((rest_144)(unsafe-cdr lst_264)))"
"(let-values(((post-guard-var_68)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_61)"
"(let-values()"
"(let-values()"
"(adjust-form_0"
"(if(lifted-bind? lift_1)"
"(let-values()"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1"
" core-stx"
" phase_98)"
" 'define-values)"
"(lifted-bind-ids lift_1)"
"(lifted-bind-rhs lift_1))))"
"(let-values() lift_1)))))))"
"(let-values(((result_157)"
"(if(post-guard-var_68)(for-loop_73 rest_144) null)))"
"(cons elem_61 result_157))))))"
" null))))"
" for-loop_73)"
" lst_263)))"
"(list body_3)))))))))))"
"(define-values"
"(get-lifts-as-lists)"
"(lambda(lifts_5)"
"(let-values(((lst_139) lifts_5))"
"(begin"
"(check-list lst_139)"
"((letrec-values(((for-loop_151)"
"(lambda(lst_140)"
"(if(pair? lst_140)"
"(let-values(((lift_2)(unsafe-car lst_140))((rest_71)(unsafe-cdr lst_140)))"
"(let-values(((post-guard-var_38)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_38)"
"(let-values()"
"(let-values()"
"(list"
"(lifted-bind-ids lift_2)"
"(lifted-bind-keys lift_2)"
"(lifted-bind-rhs lift_2))))))"
"(let-values(((result_103)(if(post-guard-var_38)(for-loop_151 rest_71) null)))"
"(cons elem_38 result_103))))))"
" null))))"
" for-loop_151)"
" lst_139)))))"
"(define-values"
"(struct:module-lift-context"
" module-lift-context17.1"
" module-lift-context?"
" module-lift-context-wrt-phase"
" module-lift-context-lifts"
" module-lift-context-module*-ok?)"
"(let-values(((struct:_72 make-_72 ?_72 -ref_72 -set!_72)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-lift-context"
" #f"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'module-lift-context)))))"
"(values"
" struct:_72"
" make-_72"
" ?_72"
"(make-struct-field-accessor -ref_72 0 'wrt-phase)"
"(make-struct-field-accessor -ref_72 1 'lifts)"
"(make-struct-field-accessor -ref_72 2 'module*-ok?))))"
"(define-values"
"(make-module-lift-context)"
"(lambda(phase_99 module*-ok?_1)(module-lift-context17.1 phase_99(box null) module*-ok?_1)))"
"(define-values"
"(get-and-clear-module-lifts!)"
"(lambda(module-lifts_1)(box-clear!(module-lift-context-lifts module-lifts_1))))"
"(define-values"
"(add-lifted-module!)"
"(lambda(module-lifts_2 s_292 phase_100)"
"(begin"
"(if(let-values(((or-part_116)"
"(if(module-lift-context? module-lifts_2)(module-lift-context-module*-ok? module-lifts_2) #f)))"
"(if or-part_116"
" or-part_116"
"(if(lift-context? module-lifts_2)(lift-context-module*-ok? module-lifts_2) #f)))"
"(void)"
"(let-values()"
"(let-values(((tmp_29)(core-form-sym s_292 phase_100)))"
"(if(equal? tmp_29 'module)"
"(let-values()(void))"
"(if(equal? tmp_29 'module*)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-lift-module"
"                   \"cannot lift `module*' to a top-level context\""
"                   \"syntax\""
" s_292))"
"(let-values()"
"                  (raise-arguments-error 'syntax-local-lift-module \"not a `module' declaration\" \"syntax\" s_292)))))))"
"(if(module-lift-context? module-lifts_2)"
"(let-values()(box-cons!(module-lift-context-lifts module-lifts_2) s_292))"
"(if(lift-context? module-lifts_2)"
"(let-values()(box-cons!(lift-context-lifts module-lifts_2) s_292))"
"          (let-values () (error \"internal error: unrecognized lift-context type for module lift\")))))))"
"(define-values"
"(struct:require-lift-context"
" require-lift-context18.1"
" require-lift-context?"
" require-lift-context-do-require"
" require-lift-context-wrt-phase"
" require-lift-context-requires)"
"(let-values(((struct:_22 make-_22 ?_22 -ref_22 -set!_22)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'require-lift-context"
" #f"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'require-lift-context)))))"
"(values"
" struct:_22"
" make-_22"
" ?_22"
"(make-struct-field-accessor -ref_22 0 'do-require)"
"(make-struct-field-accessor -ref_22 1 'wrt-phase)"
"(make-struct-field-accessor -ref_22 2 'requires))))"
"(define-values"
"(make-require-lift-context)"
"(lambda(wrt-phase_0 do-require_0)(require-lift-context18.1 do-require_0 wrt-phase_0(box null))))"
"(define-values"
"(get-and-clear-require-lifts!)"
"(lambda(require-lifts_1)(box-clear!(require-lift-context-requires require-lifts_1))))"
"(define-values"
"(add-lifted-require!)"
"(lambda(require-lifts_2 s_63 phase_101)"
"(begin"
"((require-lift-context-do-require require-lifts_2) s_63 phase_101)"
"(box-cons!(require-lift-context-requires require-lifts_2) s_63))))"
"(define-values"
"(struct:to-module-lift-context"
" to-module-lift-context19.1"
" to-module-lift-context?"
" to-module-lift-context-wrt-phase"
" to-module-lift-context-provides"
" to-module-lift-context-end-as-expressions?"
" to-module-lift-context-ends)"
"(let-values(((struct:_73 make-_73 ?_73 -ref_73 -set!_73)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'to-module-lift-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'to-module-lift-context)))))"
"(values"
" struct:_73"
" make-_73"
" ?_73"
"(make-struct-field-accessor -ref_73 0 'wrt-phase)"
"(make-struct-field-accessor -ref_73 1 'provides)"
"(make-struct-field-accessor -ref_73 2 'end-as-expressions?)"
"(make-struct-field-accessor -ref_73 3 'ends))))"
"(define-values"
"(make-to-module-lift-context25.1)"
"(lambda(end-as-expressions?21_0 shared-module-ends20_0 phase24_1)"
"(let-values(((phase_102) phase24_1))"
"(let-values(((ends_0) shared-module-ends20_0))"
"(let-values(((end-as-expressions?_0) end-as-expressions?21_0))"
"(let-values()(to-module-lift-context19.1 phase_102(box null) end-as-expressions?_0 ends_0)))))))"
"(define-values(make-shared-module-ends)(lambda()(box null)))"
"(define-values"
"(get-and-clear-end-lifts!)"
"(lambda(to-module-lifts_1)(box-clear!(to-module-lift-context-ends to-module-lifts_1))))"
"(define-values"
"(get-and-clear-provide-lifts!)"
"(lambda(to-module-lifts_2)(box-clear!(to-module-lift-context-provides to-module-lifts_2))))"
"(define-values"
"(add-lifted-to-module-provide!)"
"(lambda(to-module-lifts_3 s_98 phase_103)(box-cons!(to-module-lift-context-provides to-module-lifts_3) s_98)))"
"(define-values"
"(add-lifted-to-module-end!)"
"(lambda(to-module-lifts_4 s_308 phase_104)(box-cons!(to-module-lift-context-ends to-module-lifts_4) s_308)))"
"(define-values"
"(struct:already-expanded already-expanded1.1 already-expanded? already-expanded-s already-expanded-binding-layer)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'already-expanded"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'already-expanded)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 's)"
"(make-struct-field-accessor -ref_0 1 'binding-layer))))"
"(define-values"
"(1/prop:liberal-define-context has-liberal-define-context-property? liberal-define-context-value)"
"(make-struct-type-property 'liberal-define-context))"
"(define-values"
"(struct:liberal-define-context make-liberal-define-context 1/liberal-define-context?)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'liberal-define-context"
" #f"
" 0"
" 0"
" #f"
"(list(cons 1/prop:liberal-define-context #t))"
" #f"
" #f"
" '()"
" #f"
" 'make-liberal-define-context)))))"
"(values struct:_0 make-_0 ?_0)))"
"(define-values"
"(1/prop:expansion-contexts expansion-contexts? expansion-contexts-ref)"
"(make-struct-type-property"
" 'expansion-contexts"
"(lambda(v_31 info_1)"
"(begin"
"(if(if(list? v_31)"
"(let-values(((lst_73) v_31))"
"(begin"
"(check-list lst_73)"
"((letrec-values(((for-loop_88)"
"(lambda(result_154 lst_74)"
"(if(pair? lst_74)"
"(let-values(((s_2)(unsafe-car lst_74))((rest_33)(unsafe-cdr lst_74)))"
"(let-values(((result_77)"
"(let-values()"
"(let-values(((result_84)"
"(let-values()"
"(let-values()"
"(memq"
" s_2"
" '(expression"
" top-level"
" module"
" module-begin"
" definition-context))))))"
"(values result_84)))))"
"(if(if(not((lambda x_113(not result_77)) s_2))(not #f) #f)"
"(for-loop_88 result_77 rest_33)"
" result_77)))"
" result_154))))"
" for-loop_88)"
" #t"
" lst_73)))"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:expansion-contexts"
"            \"(listof (or/c 'expression 'top-level 'module 'module-begin 'definition-context))\""
" v_31)))"
" v_31))))"
"(define-values"
"(not-in-this-expand-context?)"
"(lambda(t_43 ctx_12)"
"(if(expansion-contexts? t_43)"
"(not(memq(context->symbol(expand-context-context ctx_12))(expansion-contexts-ref t_43)))"
" #f)))"
"(define-values(context->symbol)(lambda(context_1)(if(symbol? context_1) context_1 'definition-context)))"
"(define-values"
"(avoid-current-expand-context)"
"(lambda(s_166 t_44 ctx_13)"
"(let-values(((wrap_1)"
"(lambda(sym_65)"
"(datum->syntax$1"
" #f"
"(list"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx sym_65)(expand-context-phase ctx_13))"
" s_166)))))"
"(let-values(((fail_4)"
"(lambda()"
"(raise-syntax-error$1"
" #f"
"(format"
"                        \"not allowed in context\\n  expansion context: ~a\""
"(context->symbol(expand-context-context ctx_13)))"
" s_166))))"
"(let-values(((tmp_30)(context->symbol(expand-context-context ctx_13))))"
"(if(equal? tmp_30 'module-begin)"
"(let-values()(wrap_1 'begin))"
"(if(if(equal? tmp_30 'module) #t(if(equal? tmp_30 'top-level) #t(equal? tmp_30 'definition-context)))"
"(let-values()(if(memq 'expression(expansion-contexts-ref t_44))(wrap_1 '#%expression)(fail_4)))"
"(let-values()(fail_4)))))))))"
"(define-values"
"(struct:reference-record"
" reference-record1.1"
" reference-record?"
" reference-record-already-bound"
" reference-record-reference-before-bound"
" reference-record-all-referenced?"
" set-reference-record-already-bound!"
" set-reference-record-reference-before-bound!"
" set-reference-record-all-referenced?!)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()(make-struct-type 'reference-record #f 3 0 #f null #f #f '() #f 'reference-record)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'already-bound)"
"(make-struct-field-accessor -ref_0 1 'reference-before-bound)"
"(make-struct-field-accessor -ref_0 2 'all-referenced?)"
"(make-struct-field-mutator -set!_0 0 'already-bound)"
"(make-struct-field-mutator -set!_0 1 'reference-before-bound)"
"(make-struct-field-mutator -set!_0 2 'all-referenced?))))"
"(define-values(make-reference-record)(lambda()(reference-record1.1(seteq)(seteq) #f)))"
"(define-values"
"(reference-record-used!)"
"(lambda(rr_0 key_72)"
"(if(set-member?(reference-record-already-bound rr_0) key_72)"
"(void)"
"(let-values()"
"(set-reference-record-reference-before-bound!"
" rr_0"
"(set-add(reference-record-reference-before-bound rr_0) key_72))))))"
"(define-values"
"(reference-records-all-used!)"
"(lambda(rrs_0)"
"(begin"
"(let-values(((lst_79) rrs_0))"
"(begin"
"(check-list lst_79)"
"((letrec-values(((for-loop_226)"
"(lambda(lst_238)"
"(if(pair? lst_238)"
"(let-values(((rr_1)(unsafe-car lst_238))((rest_36)(unsafe-cdr lst_238)))"
"(let-values(((post-guard-var_17)(lambda() #t)))"
"(let-values()"
"(if(reference-record-all-referenced? rr_1)"
"(values)"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(set-reference-record-all-referenced?! rr_1 #t))"
"(values)))))"
"(if(post-guard-var_17)(for-loop_226 rest_36)(values))))))))"
"(values)))))"
" for-loop_226)"
" lst_79)))"
"(void))))"
"(define-values"
"(reference-record-bound!)"
"(lambda(rr_2 keys_3)"
"(begin"
"(set-reference-record-already-bound!"
" rr_2"
"(let-values(((lst_84) keys_3))"
"(begin"
"(check-list lst_84)"
"((letrec-values(((for-loop_98)"
"(lambda(ab_3 lst_85)"
"(if(pair? lst_85)"
"(let-values(((key_73)(unsafe-car lst_85))((rest_41)(unsafe-cdr lst_85)))"
"(let-values(((ab_4)"
"(let-values(((ab_5) ab_3))"
"(let-values(((ab_6)(let-values()(set-add ab_5 key_73))))"
"(values ab_6)))))"
"(if(not #f)(for-loop_98 ab_4 rest_41) ab_4)))"
" ab_3))))"
" for-loop_98)"
"(reference-record-already-bound rr_2)"
" lst_84))))"
"(set-reference-record-reference-before-bound!"
" rr_2"
"(let-values(((lst_17) keys_3))"
"(begin"
"(check-list lst_17)"
"((letrec-values(((for-loop_10)"
"(lambda(rbb_0 lst_18)"
"(if(pair? lst_18)"
"(let-values(((key_74)(unsafe-car lst_18))((rest_5)(unsafe-cdr lst_18)))"
"(let-values(((rbb_1)"
"(let-values(((rbb_2) rbb_0))"
"(let-values(((rbb_3)(let-values()(set-remove rbb_2 key_74))))"
"(values rbb_3)))))"
"(if(not #f)(for-loop_10 rbb_1 rest_5) rbb_1)))"
" rbb_0))))"
" for-loop_10)"
"(reference-record-reference-before-bound rr_2)"
" lst_17)))))))"
"(define-values"
"(reference-record-forward-references?)"
"(lambda(rr_3)"
"(let-values(((or-part_180)(reference-record-all-referenced? rr_3)))"
"(if or-part_180 or-part_180(positive?(set-count(reference-record-reference-before-bound rr_3)))))))"
"(define-values"
"(reference-record-clear!)"
"(lambda(rr_4)"
"(begin(set-reference-record-already-bound! rr_4 #f)(set-reference-record-reference-before-bound! rr_4 #f))))"
"(define-values"
"(call-expand-observe)"
"(lambda(obs_0 key_75 . args_4)"
"(obs_0(hash-ref key->number key_75)(if(null? args_4)(let-values() #f)(let-values()(apply list* args_4))))))"
"(define-values"
"(log-expand-start)"
"(lambda()"
"(let-values(((obs_1)(current-expand-observe)))"
"(if obs_1(let-values()(call-expand-observe obs_1 'start-expand))(void)))))"
"(define-values"
"(key->number)"
" '#hash((prim-#%stratified . 155)"
"(lambda-renames . 17)"
"(variable . 125)"
"(macro-post-x . 22)"
"(splice . 11)"
"(exit-local-bind . 160)"
"(prim-submodule . 158)"
"(local-lift . 129)"
"(prim-letrec-values . 113)"
"(enter-macro . 8)"
"(opaque-expr . 146)"
"(prim-set! . 123)"
"(prim-if . 105)"
"(prim-define-values . 104)"
"(block->letrec . 14)"
"(lift-statement . 134)"
"(enter-prim . 6)"
"(prim-define-syntaxes . 103)"
"(prim-begin0 . 108)"
"(track-origin . 152)"
"(lift-loop . 128)"
"(prim-expression . 138)"
"(phase-up . 20)"
"(local-post . 133)"
"(prim-require . 119)"
"(prim-stop . 100)"
"(start-expand . 141)"
"(enter-block . 10)"
"(prim-module-begin . 102)"
"(letrec-syntaxes-renames . 19)"
"(prim-#%datum . 115)"
"(enter-list . 4)"
"(enter-bind . 144)"
"(return . 2)"
"(rename-list . 147)"
"(next-group . 13)"
"(prim-quote-syntax . 118)"
"(exit-prim . 7)"
"(module-lift-loop . 137)"
"(exit-bind . 145)"
"(module-body . 23)"
"(let-renames . 16)"
"(prim-#%app . 109)"
"(exit-check . 127)"
"(prim-lambda . 110)"
"(prim-letrec-syntaxes-values . 114)"
"(exit-local-expr . 140)"
"(exit-list . 5)"
"(block-renames . 24)"
"(prim-quote . 117)"
"(enter-check . 126)"
"(block->list . 12)"
"(macro-pre-x . 21)"
"(prim-begin-for-syntax . 156)"
"(tag . 142)"
"(local-bind . 143)"
"(enter-local . 130)"
"(local-pre . 132)"
"(prim-#%top . 116)"
"(lift-require . 150)"
"(exit-macro . 9)"
"(prim-submodule* . 159)"
"(lift-provide . 151)"
"(prim-begin . 107)"
"(local-value-result . 154)"
"(module-lift-end-loop . 135)"
"(letlift-loop . 136)"
"(exit-local . 131)"
"(prim-provide . 122)"
"(enter-local-expr . 139)"
"(prim-module . 101)"
"(prim-with-continaution-mark . 106)"
"(next . 3)"
"(case-lambda-renames . 18)"
"(local-value . 153)"
"(prim-#%variable-reference . 149)"
"(rename-one . 148)"
"(prepare-env . 157)"
"(prim-case-lambda . 111)"
"(visit . 0)"
"(prim-let-values . 112)"
"(resolve . 1)))"
"(define-values"
"(expand5.1)"
"(lambda(alternate-id1_0 alternate-id2_0 s3_1 ctx4_0)"
"(let-values(((s_43) s3_1))"
"(let-values(((ctx_14) ctx4_0))"
"(let-values(((alternate-id_0)(if alternate-id2_0 alternate-id1_0 #f)))"
"(let-values()"
"(begin"
"(let-values(((obs_2)(expand-context-observer ctx_14)))"
"(if obs_2"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_2"
"(if(expand-context-only-immediate? ctx_14) 'enter-check 'visit)"
" s_43)))"
"(void)))"
"(if(identifier? s_43)"
"(let-values()(expand-identifier s_43 ctx_14 alternate-id_0))"
"(if(if(pair?(syntax-content s_43))(identifier?(car(syntax-content s_43))) #f)"
"(let-values()(expand-id-application-form s_43 ctx_14 alternate-id_0))"
"(if(let-values(((or-part_178)(pair?(syntax-content s_43))))"
"(if or-part_178 or-part_178(null?(syntax-content s_43))))"
"(let-values()(expand-implicit '#%app s_43 ctx_14 #f))"
"(if(already-expanded?(syntax-content s_43))"
"(let-values()(expand-already-expanded s_43 ctx_14))"
"(let-values()(expand-implicit '#%datum s_43 ctx_14 #f)))))))))))))"
"(define-values"
"(expand-identifier)"
"(lambda(s_170 ctx_15 alternate-id_1)"
"(let-values(((id_57)(let-values(((or-part_95) alternate-id_1))(if or-part_95 or-part_95 s_170))))"
"(if(free-id-set-member?(expand-context-stops ctx_15)(expand-context-phase ctx_15) id_57)"
"(let-values()"
"(begin"
"(let-values(((obs_3)(expand-context-observer ctx_15)))"
"(if obs_3"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_15))"
"(let-values()"
"(begin"
"(call-expand-observe obs_3 'enter-prim s_170)"
"(call-expand-observe obs_3 'prim-stop)"
"(call-expand-observe obs_3 'exit-prim s_170)"
"(call-expand-observe obs_3 'return s_170)))"
"(void)))"
"(void)))"
" s_170))"
"(let-values()"
"(let-values(((binding_19)"
"(let-values(((temp70_0)(expand-context-phase ctx_15))((temp71_0) 'ambiguous)((temp72_0) #t))"
"(resolve+shift30.1 temp71_0 #t #f #f #f #f temp72_0 #t #f #f id_57 temp70_0))))"
"(begin"
"(let-values(((obs_0)(expand-context-observer ctx_15)))"
"(if obs_0"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_15))"
"(let-values()(call-expand-observe obs_0 'resolve id_57))"
"(void)))"
"(void)))"
"(if(eq? binding_19 'ambiguous)"
"(let-values()(raise-ambiguous-error id_57 ctx_15))"
"(if(not binding_19)"
"(let-values()(expand-implicit '#%top(substitute-alternate-id s_170 alternate-id_1) ctx_15 s_170))"
"(let-values()"
"(let-values(((t_45 primitive?_2 insp-of-t_0)"
"(let-values(((temp76_1)(if alternate-id_1 s_170 #f))"
"((temp77_0)(expand-context-in-local-expand? ctx_15)))"
"(lookup15.1 temp76_1 #t temp77_0 #t binding_19 ctx_15 id_57))))"
"(dispatch t_45 insp-of-t_0 s_170 id_57 ctx_15 binding_19 primitive?_2))))))))))))"
"(define-values"
"(expand-id-application-form)"
"(lambda(s_386 ctx_16 alternate-id_2)"
"(let-values(((id_58)"
"(let-values(((or-part_37) alternate-id_2))"
"(if or-part_37 or-part_37(car(syntax-e/no-taint s_386))))))"
"(if(free-id-set-member?(expand-context-stops ctx_16)(expand-context-phase ctx_16) id_58)"
"(let-values()"
"(begin"
"(let-values(((obs_4)(expand-context-observer ctx_16)))"
"(if obs_4"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_16))"
"(let-values()"
"(begin"
"(call-expand-observe obs_4 'enter-prim s_386)"
"(call-expand-observe obs_4 'prim-stop)"
"(call-expand-observe obs_4 'exit-prim s_386)"
"(call-expand-observe obs_4 'return s_386)))"
"(void)))"
"(void)))"
" s_386))"
"(let-values()"
"(let-values(((binding_20)"
"(let-values(((temp79_0)(expand-context-phase ctx_16))((temp80_2) 'ambiguous)((temp81_1) #t))"
"(resolve+shift30.1 temp80_2 #t #f #f #f #f temp81_1 #t #f #f id_58 temp79_0))))"
"(begin"
"(let-values(((obs_5)(expand-context-observer ctx_16)))"
"(if obs_5"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_16))"
"(let-values()(call-expand-observe obs_5 'resolve id_58))"
"(void)))"
"(void)))"
"(if(eq? binding_20 'ambiguous)"
"(let-values()(raise-ambiguous-error id_58 ctx_16))"
"(if(not binding_20)"
"(let-values()(expand-implicit '#%app(substitute-alternate-id s_386 alternate-id_2) ctx_16 id_58))"
"(let-values()"
"(let-values(((t_46 primitive?_3 insp-of-t_1)"
"(let-values(((temp85_0)(if alternate-id_2(car(syntax-e/no-taint s_386)) #f))"
"((temp86_0)(expand-context-in-local-expand? ctx_16)))"
"(lookup15.1 temp85_0 #t temp86_0 #t binding_20 ctx_16 id_58))))"
"(if(variable? t_46)"
"(let-values()"
"(expand-implicit '#%app(substitute-alternate-id s_386 alternate-id_2) ctx_16 id_58))"
"(let-values()"
"(dispatch t_46 insp-of-t_1 s_386 id_58 ctx_16 binding_20 primitive?_3))))))))))))))"
"(define-values"
"(expand-implicit)"
"(lambda(sym_66 s_15 ctx_17 trigger-id_1)"
"(let-values(((disarmed-s_0)(syntax-disarm$1 s_15)))"
"(let-values(((id_59)(datum->syntax$1 disarmed-s_0 sym_66)))"
"(if(free-id-set-member?(expand-context-stops ctx_17)(expand-context-phase ctx_17) id_59)"
"(let-values()"
"(begin"
"(let-values(((obs_6)(expand-context-observer ctx_17)))"
"(if obs_6"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_17))"
"(let-values()"
"(begin"
"(call-expand-observe obs_6 'enter-prim s_15)"
"(call-expand-observe obs_6 'prim-stop)"
"(call-expand-observe obs_6 'exit-prim s_15)"
"(call-expand-observe obs_6 'return s_15)))"
"(void)))"
"(void)))"
" s_15))"
"(let-values()"
"(let-values(((b_79)"
"(let-values(((temp88_1)(expand-context-phase ctx_17))"
"((temp89_1) 'ambiguous)"
"((temp90_0) #t))"
"(resolve+shift30.1 temp89_1 #t #f #f #f #f temp90_0 #t #f #f id_59 temp88_1))))"
"(if(eq? b_79 'ambiguous)"
"(let-values()(raise-ambiguous-error id_59 ctx_17))"
"(let-values()"
"(let-values(((t_47 primitive?_4 insp-of-t_2)"
"(if b_79"
"(let-values(((b91_0) b_79)((ctx92_0) ctx_17)((id93_0) id_59))"
"(lookup15.1 #f #f #f #f b91_0 ctx92_0 id93_0))"
"(values #f #f #f))))"
"(if(transformer? t_47)"
"(let-values()"
"(dispatch-transformer"
" t_47"
" insp-of-t_2"
"(make-explicit sym_66 s_15 disarmed-s_0)"
" id_59"
" ctx_17"
" b_79))"
"(if(expand-context-only-immediate? ctx_17)"
"(let-values()"
"(begin"
"(let-values(((obs_7)(expand-context-observer ctx_17)))"
"(if obs_7"
"(let-values()(let-values()(call-expand-observe obs_7 'exit-check s_15)))"
"(void)))"
" s_15))"
"(if(core-form? t_47)"
"(let-values()"
"(if(if(eq? sym_66 '#%top)"
"(if(eq?(core-form-name t_47) '#%top)(expand-context-in-local-expand? ctx_17) #f)"
" #f)"
"(let-values()(dispatch-implicit-#%top-core-form t_47 s_15 ctx_17))"
"(let-values()"
"(dispatch-core-form t_47(make-explicit sym_66 s_15 disarmed-s_0) ctx_17))))"
"(let-values()"
"(let-values(((tl-id_0)"
"(if(eq? sym_66 '#%top)"
"(if(root-expand-context-top-level-bind-scope ctx_17)"
"(add-scope s_15(root-expand-context-top-level-bind-scope ctx_17))"
" #f)"
" #f)))"
"(let-values(((tl-b_0)"
"(if tl-id_0"
"(let-values(((tl-id94_0) tl-id_0)"
"((temp95_1)(expand-context-phase ctx_17)))"
"(resolve29.1 #f #f #f #f #f #f #f #f tl-id94_0 temp95_1))"
" #f)))"
"(if tl-b_0"
"(let-values()"
"(if(expand-context-to-parsed? ctx_17)(parsed-id2.1 tl-id_0 tl-b_0 #f) tl-id_0))"
"(let-values()"
"(raise-syntax-implicit-error s_15 sym_66 trigger-id_1 ctx_17)))))))))))))))))))"
"(define-values"
"(expand-already-expanded)"
"(lambda(s_387 ctx_18)"
"(let-values(((ae_0)(syntax-e$1 s_387)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_38)(syntax-any-macro-scopes? s_387)))"
"(if or-part_38"
" or-part_38"
"(not(eq?(expand-context-binding-layer ctx_18)(already-expanded-binding-layer ae_0)))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                            \"expanded syntax not in its original lexical context;\\n\""
"                            \" extra bindings or scopes in the current context\")"
"(already-expanded-s ae_0)))"
"(void))"
"(values))))"
"(let-values(((result-s_1)(syntax-track-origin$1(already-expanded-s ae_0) s_387)))"
"(begin"
"(let-values(((obs_8)(expand-context-observer ctx_18)))"
"(if obs_8"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_8 'tag result-s_1)"
"(call-expand-observe obs_8 'opaque-expr result-s_1))))"
"(void)))"
"(if(expand-context-to-parsed? ctx_18)"
"(let-values(((result-s96_0) result-s_1)((ctx97_0) ctx_18))(expand5.1 #f #f result-s96_0 ctx97_0))"
" result-s_1)))))))"
"(define-values"
"(make-explicit)"
"(lambda(sym_67 s_388 disarmed-s_1)"
"(syntax-rearm$1(datum->syntax$1 disarmed-s_1(cons sym_67 disarmed-s_1) s_388 s_388) s_388)))"
"(define-values"
"(dispatch)"
"(lambda(t_48 insp-of-t_3 s_389 id_60 ctx_19 binding_21 primitive?_5)"
"(if(core-form? t_48)"
"(let-values()(dispatch-core-form t_48 s_389 ctx_19))"
"(if(transformer? t_48)"
"(let-values()(dispatch-transformer t_48 insp-of-t_3 s_389 id_60 ctx_19 binding_21))"
"(if(variable? t_48)"
"(let-values()(dispatch-variable t_48 s_389 id_60 ctx_19 binding_21 primitive?_5))"
"          (let-values () (raise-syntax-error$1 #f \"illegal use of syntax\" s_389)))))))"
"(define-values"
"(dispatch-core-form)"
"(lambda(t_3 s_71 ctx_20)"
"(if(expand-context-only-immediate? ctx_20)"
"(let-values()"
"(begin"
"(let-values(((obs_9)(expand-context-observer ctx_20)))"
"(if obs_9(let-values()(let-values()(call-expand-observe obs_9 'exit-check s_71)))(void)))"
" s_71))"
"(if(expand-context-observer ctx_20)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_10)(expand-context-observer ctx_20)))"
"(if obs_10"
"(let-values()(let-values()(call-expand-observe obs_10 'enter-prim s_71)))"
"(void)))"
"(values))))"
"(let-values(((result-s_2)((core-form-expander t_3) s_71 ctx_20)))"
"(begin"
"(let-values(((obs_11)(expand-context-observer ctx_20)))"
"(if obs_11"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_11 'exit-prim result-s_2)"
"(call-expand-observe obs_11 'return result-s_2))))"
"(void)))"
" result-s_2))))"
"(let-values()((core-form-expander t_3) s_71 ctx_20))))))"
"(define-values"
"(dispatch-implicit-#%top-core-form)"
"(lambda(t_49 s_390 ctx_21)"
"(let-values((()"
"(begin"
"(let-values(((obs_12)(expand-context-observer ctx_21)))"
"(if obs_12(let-values()(let-values()(call-expand-observe obs_12 'enter-prim s_390)))(void)))"
"(values))))"
"(let-values(((result-s_3)((core-form-expander t_49) s_390 ctx_21 #t)))"
"(begin"
"(let-values(((obs_13)(expand-context-observer ctx_21)))"
"(if obs_13"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_13 'exit-prim result-s_3)"
"(call-expand-observe obs_13 'return result-s_3))))"
"(void)))"
" result-s_3)))))"
"(define-values"
"(dispatch-transformer)"
"(lambda(t_50 insp-of-t_4 s_29 id_61 ctx_22 binding_22)"
"(if(not-in-this-expand-context? t_50 ctx_22)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_14)(expand-context-observer ctx_22)))"
"(if obs_14"
"(let-values()(let-values()(call-expand-observe obs_14 'enter-macro s_29)))"
"(void)))"
"(values))))"
"(let-values(((adj-s_0)(avoid-current-expand-context(substitute-alternate-id s_29 id_61) t_50 ctx_22)))"
"(begin"
"(let-values(((obs_15)(expand-context-observer ctx_22)))"
"(if obs_15(let-values()(let-values()(call-expand-observe obs_15 'exit-macro s_29)))(void)))"
"(let-values(((adj-s98_0) adj-s_0)((ctx99_0) ctx_22))(expand5.1 #f #f adj-s98_0 ctx99_0))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_16)(expand-context-observer ctx_22)))"
"(if obs_16"
"(let-values()"
"(if(expand-context-only-immediate? ctx_22)"
"(let-values()"
"(begin"
"(call-expand-observe obs_16 'visit s_29)"
"(call-expand-observe obs_16 'resolves id_61)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-s_0 re-ctx_0)"
"(if(1/rename-transformer? t_50)"
"(values s_29 ctx_22)"
"(apply-transformer t_50 insp-of-t_4 s_29 id_61 ctx_22 binding_22))))"
"(begin"
"(let-values(((obs_17)(expand-context-observer ctx_22)))"
"(if obs_17"
"(let-values()"
"(if(expand-context-only-immediate? ctx_22)"
"(let-values()(call-expand-observe obs_17 'return exp-s_0))"
"(void)))"
"(void)))"
"(if(expand-context-just-once? ctx_22)"
"(let-values() exp-s_0)"
"(let-values()"
"(let-values(((temp102_0)"
"(if(1/rename-transformer? t_50)"
"(syntax-track-origin$1(rename-transformer-target-in-context t_50 ctx_22) id_61 id_61)"
" #f)))"
"(expand5.1 temp102_0 #t exp-s_0 re-ctx_0)))))))))))"
"(define-values"
"(dispatch-variable)"
"(lambda(t_51 s_391 id_62 ctx_23 binding_23 primitive?_6)"
"(if(expand-context-only-immediate? ctx_23)"
"(let-values()"
"(begin"
"(let-values(((obs_18)(expand-context-observer ctx_23)))"
"(if obs_18(let-values()(let-values()(call-expand-observe obs_18 'exit-check s_391)))(void)))"
" id_62))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_19)(expand-context-observer ctx_23)))"
"(if obs_19"
"(let-values()(let-values()(call-expand-observe obs_19 'variable s_391)))"
"(void)))"
"(values))))"
"(let-values((()(begin(register-variable-referenced-if-local! binding_23)(values))))"
"(let-values(((result-s_4)"
"(let-values(((temp105_0)(free-id-set-empty-or-just-module*?(expand-context-stops ctx_23))))"
"(substitute-variable6.1 temp105_0 id_62 t_51))))"
"(if(expand-context-to-parsed? ctx_23)"
"(let-values()"
"(let-values(((prop-s_0)(keep-properties-only~ result-s_4)))"
"(let-values(((insp_12)(syntax-inspector result-s_4)))"
"(if primitive?_6"
"(parsed-primitive-id3.1 prop-s_0 binding_23 insp_12)"
"(parsed-id2.1 prop-s_0 binding_23 insp_12)))))"
"(let-values()"
"(begin"
"(let-values(((obs_20)(expand-context-observer ctx_23)))"
"(if obs_20"
"(let-values()(let-values()(call-expand-observe obs_20 'return result-s_4)))"
"(void)))"
" result-s_4))))))))))"
"(define-values"
"(apply-transformer)"
"(lambda(t_52 insp-of-t_5 s_198 id_63 ctx_24 binding_24)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_21)(expand-context-observer ctx_24)))"
"(if obs_21"
"(let-values()(let-values()(call-expand-observe obs_21 'enter-macro s_198)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_2)(syntax-disarm$1 s_198)))"
"(let-values(((intro-scope_0)(new-scope 'macro)))"
"(let-values(((intro-s_0)(flip-scope disarmed-s_2 intro-scope_0)))"
"(let-values(((use-s_0 use-scopes_0)(maybe-add-use-site-scope intro-s_0 ctx_24 binding_24)))"
"(let-values(((cleaned-s_0)(syntax-remove-taint-dispatch-properties use-s_0)))"
"(let-values(((def-ctx-scopes_1)(box null)))"
"(let-values(((transformed-s_0)"
"(apply-transformer-in-context"
" t_52"
" cleaned-s_0"
" ctx_24"
" insp-of-t_5"
" intro-scope_0"
" use-scopes_0"
" def-ctx-scopes_1"
" id_63)))"
"(let-values(((result-s_5)(flip-scope transformed-s_0 intro-scope_0)))"
"(let-values(((post-s_0)(maybe-add-post-expansion-scope result-s_5 ctx_24)))"
"(let-values(((tracked-s_0)(syntax-track-origin$1 post-s_0 cleaned-s_0 id_63)))"
"(let-values(((rearmed-s_0)"
"(taint-dispatch"
" tracked-s_0"
"(lambda(t-s_0)(syntax-rearm$1 t-s_0 s_198))"
"(expand-context-phase ctx_24))))"
"(begin"
"(let-values(((obs_22)(expand-context-observer ctx_24)))"
"(if obs_22"
"(let-values()(let-values()(call-expand-observe obs_22 'exit-macro rearmed-s_0)))"
"(void)))"
"(values rearmed-s_0(accumulate-def-ctx-scopes ctx_24 def-ctx-scopes_1))))))))))))))))))"
"(define-values"
"(apply-transformer-in-context)"
"(lambda(t_53 cleaned-s_1 ctx_25 insp-of-t_6 intro-scope_1 use-scopes_1 def-ctx-scopes_2 id_64)"
"(let-values((()"
"(begin"
"(let-values(((obs_23)(expand-context-observer ctx_25)))"
"(if obs_23"
"(let-values()(let-values()(call-expand-observe obs_23 'macro-pre-x cleaned-s_1)))"
"(void)))"
"(values))))"
"(let-values(((confine-def-ctx-scopes?_0)"
"(not"
"(let-values(((or-part_262)(expand-context-only-immediate? ctx_25)))"
"(if or-part_262"
" or-part_262"
"(not(free-id-set-empty-or-just-module*?(expand-context-stops ctx_25))))))))"
"(let-values(((accum-ctx_0)"
"(if(if confine-def-ctx-scopes?_0"
"(if(expand-context-def-ctx-scopes ctx_25)"
"(not(null?(unbox(expand-context-def-ctx-scopes ctx_25))))"
" #f)"
" #f)"
"(accumulate-def-ctx-scopes ctx_25(expand-context-def-ctx-scopes ctx_25))"
" ctx_25)))"
"(let-values(((m-ctx_0)"
"(let-values(((v_61) accum-ctx_0))"
"(let-values(((the-struct_54) v_61))"
"(if(expand-context/outer? the-struct_54)"
"(let-values(((current-introduction-scopes106_0)(cons intro-scope_1 use-scopes_1))"
"((def-ctx-scopes107_0)"
"(if confine-def-ctx-scopes?_0"
" def-ctx-scopes_2"
"(expand-context-def-ctx-scopes ctx_25)))"
"((inner108_0)(root-expand-context/outer-inner v_61)))"
"(expand-context/outer1.1"
" inner108_0"
"(root-expand-context/outer-post-expansion-scope the-struct_54)"
"(root-expand-context/outer-use-site-scopes the-struct_54)"
"(root-expand-context/outer-frame-id the-struct_54)"
"(expand-context/outer-context the-struct_54)"
"(expand-context/outer-env the-struct_54)"
"(expand-context/outer-post-expansion-scope-action the-struct_54)"
"(expand-context/outer-scopes the-struct_54)"
" def-ctx-scopes107_0"
"(expand-context/outer-binding-layer the-struct_54)"
"(expand-context/outer-reference-records the-struct_54)"
"(expand-context/outer-only-immediate? the-struct_54)"
"(expand-context/outer-need-eventually-defined the-struct_54)"
" current-introduction-scopes106_0"
"(expand-context/outer-name the-struct_54)))"
"                              (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_54))))))"
"(let-values(((transformed-s_1)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" m-ctx_0"
" 1/current-namespace"
"(namespace->namespace-at-phase"
"(expand-context-namespace ctx_25)"
"(add1(expand-context-phase ctx_25)))"
" current-module-code-inspector"
"(let-values(((or-part_263) insp-of-t_6))"
"(if or-part_263 or-part_263(current-module-code-inspector))))"
"(let-values()"
"(call-with-continuation-barrier"
"(lambda()((transformer->procedure t_53) cleaned-s_1)))))))"
"(begin"
"(let-values(((obs_24)(expand-context-observer ctx_25)))"
"(if obs_24"
"(let-values()(let-values()(call-expand-observe obs_24 'macro-post-x transformed-s_1)))"
"(void)))"
"(if(syntax?$1 transformed-s_1)"
"(void)"
"(let-values()"
"(raise-arguments-error"
"(syntax-e$1 id_64)"
"                     \"received value from syntax expander was not syntax\""
"                     \"received\""
" transformed-s_1)))"
" transformed-s_1))))))))"
"(define-values"
"(maybe-add-use-site-scope)"
"(lambda(s_392 ctx_26 binding_25)"
"(if(if(root-expand-context-use-site-scopes ctx_26)"
"(matching-frame?(root-expand-context-frame-id ctx_26)(binding-frame-id binding_25))"
" #f)"
"(let-values()"
"(let-values(((sc_24)(new-scope 'use-site)))"
"(let-values(((b_80)(root-expand-context-use-site-scopes ctx_26)))"
"(begin(set-box! b_80(cons sc_24(unbox b_80)))(values(add-scope s_392 sc_24)(list sc_24))))))"
"(let-values()(values s_392 null)))))"
"(define-values"
"(matching-frame?)"
"(lambda(current-frame-id_0 bind-frame-id_0)"
"(if current-frame-id_0"
"(let-values(((or-part_264)(eq? current-frame-id_0 bind-frame-id_0)))"
"(if or-part_264 or-part_264(eq? current-frame-id_0 'all)))"
" #f)))"
"(define-values"
"(maybe-add-post-expansion-scope)"
"(lambda(s_56 ctx_27)"
"(if(root-expand-context-post-expansion-scope ctx_27)"
"(let-values()"
"((expand-context-post-expansion-scope-action ctx_27) s_56(root-expand-context-post-expansion-scope ctx_27)))"
"(let-values() s_56))))"
"(define-values"
"(accumulate-def-ctx-scopes)"
"(lambda(ctx_28 def-ctx-scopes_3)"
"(if(null?(unbox def-ctx-scopes_3))"
" ctx_28"
"(let-values(((v_78) ctx_28))"
"(let-values(((the-struct_55) v_78))"
"(if(expand-context/outer? the-struct_55)"
"(let-values(((scopes109_0)(append(unbox def-ctx-scopes_3)(expand-context-scopes ctx_28)))"
"((inner110_0)(root-expand-context/outer-inner v_78)))"
"(expand-context/outer1.1"
" inner110_0"
"(root-expand-context/outer-post-expansion-scope the-struct_55)"
"(root-expand-context/outer-use-site-scopes the-struct_55)"
"(root-expand-context/outer-frame-id the-struct_55)"
"(expand-context/outer-context the-struct_55)"
"(expand-context/outer-env the-struct_55)"
"(expand-context/outer-post-expansion-scope-action the-struct_55)"
" scopes109_0"
"(expand-context/outer-def-ctx-scopes the-struct_55)"
"(expand-context/outer-binding-layer the-struct_55)"
"(expand-context/outer-reference-records the-struct_55)"
"(expand-context/outer-only-immediate? the-struct_55)"
"(expand-context/outer-need-eventually-defined the-struct_55)"
"(expand-context/outer-current-introduction-scopes the-struct_55)"
"(expand-context/outer-name the-struct_55)))"
"            (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_55)))))))"
"(define-values"
"(lookup15.1)"
"(lambda(in8_0 in10_1 out-of-context-as-variable?9_0 out-of-context-as-variable?11_0 b12_0 ctx13_0 id14_1)"
"(let-values(((b_53) b12_0))"
"(let-values(((ctx_29) ctx13_0))"
"(let-values(((id_65) id14_1))"
"(let-values(((in-s_7)(if in10_1 in8_0 #f)))"
"(let-values(((out-of-context-as-variable?_1)"
"(if out-of-context-as-variable?11_0 out-of-context-as-variable?9_0 #f)))"
"(let-values()"
"(let-values(((temp112_1)(expand-context-env ctx_29))"
"((temp113_0)(expand-context-lift-envs ctx_29))"
"((temp114_0)(expand-context-namespace ctx_29))"
"((temp115_1)(expand-context-phase ctx_29))"
"((id116_0) id_65)"
"((in-s117_0) in-s_7)"
"((out-of-context-as-variable?118_0) out-of-context-as-variable?_1))"
"(binding-lookup48.1"
" in-s117_0"
" #t"
" out-of-context-as-variable?118_0"
" #t"
" b_53"
" temp112_1"
" temp113_0"
" temp114_0"
" temp115_1"
" id116_0))))))))))"
"(define-values"
"(substitute-alternate-id)"
"(lambda(s_91 alternate-id_3)"
"(if(not alternate-id_3)"
"(let-values() s_91)"
"(if(identifier? s_91)"
"(let-values()(syntax-rearm$1(syntax-track-origin$1 alternate-id_3 s_91) s_91))"
"(let-values()"
"(let-values(((disarmed-s_3)(syntax-disarm$1 s_91)))"
"(syntax-rearm$1"
"(syntax-track-origin$1"
"(datum->syntax$1 disarmed-s_3(cons alternate-id_3(cdr(syntax-e$1 disarmed-s_3))) s_91)"
" s_91)"
" s_91)))))))"
"(define-values"
"(register-variable-referenced-if-local!)"
"(lambda(binding_26)"
"(if(if(local-binding? binding_26)(reference-record?(binding-frame-id binding_26)) #f)"
"(let-values()(reference-record-used!(binding-frame-id binding_26)(local-binding-key binding_26)))"
"(void))))"
"(define-values"
"(expand/capture-lifts28.1)"
"(lambda(always-wrap?21_0"
" always-wrap?25_0"
" begin-form?19_0"
" begin-form?23_0"
" expand-lifts?18_0"
" expand-lifts?22_0"
" lift-key20_0"
" lift-key24_0"
" s26_0"
" ctx27_0)"
"(let-values(((s_211) s26_0))"
"(let-values(((ctx_30) ctx27_0))"
"(let-values(((expand-lifts?_0)(if expand-lifts?22_0 expand-lifts?18_0 #f)))"
"(let-values(((begin-form?_0)(if begin-form?23_0 begin-form?19_0 #f)))"
"(let-values(((lift-key_2)(if lift-key24_0 lift-key20_0(generate-lift-key))))"
"(let-values(((always-wrap?_0)(if always-wrap?25_0 always-wrap?21_0 #f)))"
"(let-values()"
"(let-values(((context_5)(expand-context-context ctx_30)))"
"(let-values(((phase_105)(expand-context-phase ctx_30)))"
"(let-values(((local?_0)(not begin-form?_0)))"
"((letrec-values(((loop_144)"
"(lambda(s_393 always-wrap?_1 ctx_31)"
"(let-values(((lift-env_2)(if local?_0(box empty-env) #f)))"
"(let-values(((lift-ctx_0)"
"(let-values(((temp119_0)"
"(if local?_0"
"(make-local-lift"
" lift-env_2"
"(root-expand-context-counter ctx_31))"
"(make-top-level-lift ctx_31)))"
"((temp120_1)"
"(if(not local?_0)"
"(eq? context_5 'module)"
" #f)))"
"(make-lift-context6.1 temp120_1 #t temp119_0))))"
"(let-values(((capture-ctx_0)"
"(let-values(((v_193) ctx_31))"
"(let-values(((the-struct_56) v_193))"
"(if(expand-context/outer? the-struct_56)"
"(let-values(((inner121_0)"
"(let-values(((the-struct_57)"
"(root-expand-context/outer-inner"
" v_193)))"
"(if(expand-context/inner?"
" the-struct_57)"
"(let-values(((lift-key122_0)"
" lift-key_2)"
"((lifts123_0)"
" lift-ctx_0)"
"((lift-envs124_0)"
"(if local?_0"
"(cons"
" lift-env_2"
"(expand-context-lift-envs"
" ctx_31))"
"(expand-context-lift-envs"
" ctx_31)))"
"((module-lifts125_0)"
"(if(let-values(((or-part_119)"
" local?_0))"
"(if or-part_119"
" or-part_119"
"(not"
"(memq"
" context_5"
" '(top-level"
" module)))))"
"(expand-context-module-lifts"
" ctx_31)"
" lift-ctx_0)))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_57)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_57)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_57)"
"(root-expand-context/inner-defined-syms"
" the-struct_57)"
"(root-expand-context/inner-counter"
" the-struct_57)"
" lift-key122_0"
"(expand-context/inner-to-parsed?"
" the-struct_57)"
"(expand-context/inner-phase"
" the-struct_57)"
"(expand-context/inner-namespace"
" the-struct_57)"
"(expand-context/inner-user-env"
" the-struct_57)"
"(expand-context/inner-just-once?"
" the-struct_57)"
"(expand-context/inner-module-begin-k"
" the-struct_57)"
"(expand-context/inner-allow-unbound?"
" the-struct_57)"
"(expand-context/inner-in-local-expand?"
" the-struct_57)"
"(expand-context/inner-stops"
" the-struct_57)"
"(expand-context/inner-declared-submodule-names"
" the-struct_57)"
" lifts123_0"
" lift-envs124_0"
" module-lifts125_0"
"(expand-context/inner-require-lifts"
" the-struct_57)"
"(expand-context/inner-to-module-lifts"
" the-struct_57)"
"(expand-context/inner-requires+provides"
" the-struct_57)"
"(expand-context/inner-observer"
" the-struct_57)"
"(expand-context/inner-for-serializable?"
" the-struct_57)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                       \"expand-context/inner?\""
" the-struct_57)))))"
"(expand-context/outer1.1"
" inner121_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_56)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_56)"
"(root-expand-context/outer-frame-id"
" the-struct_56)"
"(expand-context/outer-context the-struct_56)"
"(expand-context/outer-env the-struct_56)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_56)"
"(expand-context/outer-scopes the-struct_56)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_56)"
"(expand-context/outer-binding-layer"
" the-struct_56)"
"(expand-context/outer-reference-records"
" the-struct_56)"
"(expand-context/outer-only-immediate?"
" the-struct_56)"
"(expand-context/outer-need-eventually-defined"
" the-struct_56)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_56)"
"(expand-context/outer-name the-struct_56)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                     \"expand-context/outer?\""
" the-struct_56))))))"
"(let-values(((rebuild-s_0)(keep-properties-only s_393)))"
"(let-values(((exp-s_1)"
"(let-values(((s126_0) s_393)"
"((capture-ctx127_0) capture-ctx_0))"
"(expand5.1 #f #f s126_0 capture-ctx127_0))))"
"(let-values(((lifts_6)"
"(get-and-clear-lifts!"
"(expand-context-lifts capture-ctx_0))))"
"(let-values(((with-lifts-s_0)"
"(if(let-values(((or-part_265)(pair? lifts_6)))"
"(if or-part_265 or-part_265 always-wrap?_1))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_31)"
"(let-values()"
"(begin"
"(if expand-lifts?_0"
"(void)"
"(let-values()"
"(error"
"                                                                                     \"internal error: to-parsed mode without expanding lifts\")))"
"(wrap-lifts-as-parsed-let"
" lifts_6"
" exp-s_1"
" rebuild-s_0"
" ctx_31"
"(lambda(rhs_15 rhs-ctx_0)"
"(loop_144 rhs_15 #f rhs-ctx_0)))))"
"(let-values()"
"(if begin-form?_0"
"(let-values(((lifts128_0) lifts_6)"
"((exp-s129_0) exp-s_1)"
"((phase130_0) phase_105))"
"(wrap-lifts-as-begin14.1"
" #f"
" #f"
" lifts128_0"
" exp-s129_0"
" phase130_0))"
"(wrap-lifts-as-let"
" lifts_6"
" exp-s_1"
" phase_105)))))"
"(let-values() exp-s_1))))"
"(if(let-values(((or-part_266)(not expand-lifts?_0)))"
"(if or-part_266"
" or-part_266"
"(let-values(((or-part_267)(null? lifts_6)))"
"(if or-part_267"
" or-part_267"
"(expand-context-to-parsed? ctx_31)))))"
"(let-values() with-lifts-s_0)"
"(let-values()"
"(begin"
"(let-values(((obs_25)"
"(expand-context-observer ctx_31)))"
"(if obs_25"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_25"
" 'lift-loop"
" with-lifts-s_0)))"
"(void)))"
"(loop_144 with-lifts-s_0 #f ctx_31))))))))))))))"
" loop_144)"
" s_211"
" always-wrap?_0"
" ctx_30)))))))))))))"
"(define-values"
"(expand-transformer43.1)"
"(lambda(always-wrap?35_0"
" always-wrap?40_0"
" begin-form?32_0"
" begin-form?37_0"
" context31_0"
" context36_0"
" expand-lifts?33_0"
" expand-lifts?38_0"
" lift-key34_0"
" lift-key39_0"
" s41_0"
" ctx42_0)"
"(let-values(((s_219) s41_0))"
"(let-values(((ctx_32) ctx42_0))"
"(let-values(((context_6)(if context36_0 context31_0 'expression)))"
"(let-values(((begin-form?_1)(if begin-form?37_0 begin-form?32_0 #f)))"
"(let-values(((expand-lifts?_1)(if expand-lifts?38_0 expand-lifts?33_0 #t)))"
"(let-values(((lift-key_3)(if lift-key39_0 lift-key34_0(generate-lift-key))))"
"(let-values(((always-wrap?_2)(if always-wrap?40_0 always-wrap?35_0 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((trans-ctx_0)(context->transformer-context ctx_32 context_6)))"
"(let-values(((expand-lifts?133_0) expand-lifts?_1)"
"((begin-form?134_0) begin-form?_1)"
"((lift-key135_0) lift-key_3)"
"((always-wrap?136_0) always-wrap?_2))"
"(expand/capture-lifts28.1"
" always-wrap?136_0"
" #t"
" begin-form?134_0"
" #t"
" expand-lifts?133_0"
" #t"
" lift-key135_0"
" #t"
" s_219"
" trans-ctx_0))))))))))))))"
"(define-values"
"(context->transformer-context)"
"(let-values(((context->transformer-context49_0)"
"(lambda(ctx48_0 context46_0 context47_0)"
"(let-values(((ctx_33) ctx48_0))"
"(let-values(((context_7)(if context47_0 context46_0 'expression)))"
"(let-values()"
"(let-values(((phase_106)(add1(expand-context-phase ctx_33))))"
"(let-values(((ns_72)"
"(namespace->namespace-at-phase(expand-context-namespace ctx_33) phase_106)))"
"(begin"
"(namespace-visit-available-modules! ns_72 phase_106)"
"(let-values(((v_194) ctx_33))"
"(let-values(((the-struct_58) v_194))"
"(if(expand-context/outer? the-struct_58)"
"(let-values(((context137_0) context_7)"
"((scopes138_0) null)"
"((env139_0) empty-env)"
"((only-immediate?140_0) #f)"
"((def-ctx-scopes141_0) #f)"
"((post-expansion-scope142_0) #f)"
"((inner143_0)"
"(let-values(((the-struct_59)"
"(root-expand-context/outer-inner v_194)))"
"(if(expand-context/inner? the-struct_59)"
"(let-values(((phase144_0) phase_106)((namespace145_0) ns_72))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes the-struct_59)"
"(root-expand-context/inner-top-level-bind-scope the-struct_59)"
"(root-expand-context/inner-all-scopes-stx the-struct_59)"
"(root-expand-context/inner-defined-syms the-struct_59)"
"(root-expand-context/inner-counter the-struct_59)"
"(root-expand-context/inner-lift-key the-struct_59)"
"(expand-context/inner-to-parsed? the-struct_59)"
" phase144_0"
" namespace145_0"
"(expand-context/inner-user-env the-struct_59)"
"(expand-context/inner-just-once? the-struct_59)"
"(expand-context/inner-module-begin-k the-struct_59)"
"(expand-context/inner-allow-unbound? the-struct_59)"
"(expand-context/inner-in-local-expand? the-struct_59)"
"(expand-context/inner-stops the-struct_59)"
"(expand-context/inner-declared-submodule-names the-struct_59)"
"(expand-context/inner-lifts the-struct_59)"
"(expand-context/inner-lift-envs the-struct_59)"
"(expand-context/inner-module-lifts the-struct_59)"
"(expand-context/inner-require-lifts the-struct_59)"
"(expand-context/inner-to-module-lifts the-struct_59)"
"(expand-context/inner-requires+provides the-struct_59)"
"(expand-context/inner-observer the-struct_59)"
"(expand-context/inner-for-serializable? the-struct_59)))"
"(raise-argument-error"
" 'struct-copy"
"                                                       \"expand-context/inner?\""
" the-struct_59)))))"
"(expand-context/outer1.1"
" inner143_0"
" post-expansion-scope142_0"
"(root-expand-context/outer-use-site-scopes the-struct_58)"
"(root-expand-context/outer-frame-id the-struct_58)"
" context137_0"
" env139_0"
"(expand-context/outer-post-expansion-scope-action the-struct_58)"
" scopes138_0"
" def-ctx-scopes141_0"
"(expand-context/outer-binding-layer the-struct_58)"
"(expand-context/outer-reference-records the-struct_58)"
" only-immediate?140_0"
"(expand-context/outer-need-eventually-defined the-struct_58)"
"(expand-context/outer-current-introduction-scopes the-struct_58)"
"(expand-context/outer-name the-struct_58)))"
"(raise-argument-error"
" 'struct-copy"
"                                     \"expand-context/outer?\""
" the-struct_58)))))))))))))"
"(case-lambda"
"((ctx_34)(context->transformer-context49_0 ctx_34 #f #f))"
"((ctx_35 context46_1)(context->transformer-context49_0 ctx_35 context46_1 #t)))))"
"(define-values"
"(expand+eval-for-syntaxes-binding)"
"(lambda(rhs_16 ids_19 ctx_36)"
"(let-values(((exp-rhs_0)"
"(let-values(((rhs146_0) rhs_16)((temp147_0)(as-named-context ctx_36 ids_19)))"
"(expand-transformer43.1 #f #f #f #f #f #f #f #f #f #f rhs146_0 temp147_0))))"
"(let-values(((phase_107)(add1(expand-context-phase ctx_36))))"
"(let-values(((parsed-rhs_0)"
"(if(expand-context-to-parsed? ctx_36)"
" exp-rhs_0"
"(let-values(((exp-rhs148_0) exp-rhs_0)"
"((temp149_0)(context->transformer-context(as-to-parsed-context ctx_36))))"
"(expand5.1 #f #f exp-rhs148_0 temp149_0)))))"
"(values"
" exp-rhs_0"
" parsed-rhs_0"
"(eval-for-bindings"
" ids_19"
" parsed-rhs_0"
" phase_107"
"(namespace->namespace-at-phase(expand-context-namespace ctx_36) phase_107)"
" ctx_36)))))))"
"(define-values"
"(eval-for-syntaxes-binding)"
"(lambda(rhs_17 ids_20 ctx_37)"
"(let-values(((exp-rhs_1 parsed-rhs_1 vals_3)(expand+eval-for-syntaxes-binding rhs_17 ids_20 ctx_37))) vals_3)))"
"(define-values"
"(eval-for-bindings)"
"(lambda(ids_21 p_53 phase_108 ns_73 ctx_38)"
"(let-values(((compiled_0)"
"(if(can-direct-eval? p_53 ns_73)"
" #f"
"(compile-single"
" p_53"
"(let-values(((ns150_0) ns_73)((phase151_0) phase_108))"
"(make-compile-context14.1 #f #f #f #f #f #f ns150_0 #t phase151_0 #t #f #f))))))"
"(let-values(((vals_4)"
"(call-with-values"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" ctx_38"
" 1/current-namespace"
" ns_73"
" eval-jit-enabled"
" #f)"
"(let-values()(if compiled_0(eval-single-top compiled_0 ns_73)(direct-eval p_53 ns_73)))))"
" list)))"
"(begin"
"(if(=(length vals_4)(length ids_21))"
"(void)"
"            (let-values () (error \"wrong number of results (\" (length vals_4) \"vs.\" (length ids_21) \")\" \"from\" p_53)))"
" vals_4)))))"
"(define-values(keep-properties-only)(lambda(s_394)(datum->syntax$1 #f 'props s_394 s_394)))"
"(define-values(keep-properties-only~)(lambda(s_395) #f))"
"(define-values"
"(keep-as-needed59.1)"
"(lambda(for-track?51_0"
" for-track?54_0"
" keep-for-error?53_0"
" keep-for-error?56_0"
" keep-for-parsed?52_0"
" keep-for-parsed?55_0"
" ctx57_0"
" s58_0)"
"(let-values(((ctx_39) ctx57_0))"
"(let-values(((s_258) s58_0))"
"(let-values()"
"(let-values(((keep-for-parsed?_0)(if keep-for-parsed?55_0 keep-for-parsed?52_0 #f)))"
"(let-values(((keep-for-error?_0)(if keep-for-error?56_0 keep-for-error?53_0 #f)))"
"(let-values()"
"(let-values(((d_34)(syntax-e$1 s_258)))"
"(let-values(((keep-e_0)"
"(if(symbol? d_34)"
"(let-values() d_34)"
"(if(if(pair? d_34)(identifier?(car d_34)) #f)"
"(let-values()(syntax-e$1(car d_34)))"
"(let-values() #f)))))"
"(if(expand-context-to-parsed? ctx_39)"
"(let-values()"
"(if(let-values(((or-part_268) keep-for-parsed?_0))"
"(if or-part_268 or-part_268 keep-for-error?_0))"
"(datum->syntax$1 #f keep-e_0 s_258 s_258)"
" #f))"
"(let-values()"
"(syntax-rearm$1"
"(datum->syntax$1(syntax-disarm$1 s_258) keep-e_0 s_258 s_258)"
" s_258)))))))))))))"
"(define-values"
"(rebuild66.1)"
"(lambda(track?62_0 track?63_0 orig-s64_0 new65_0)"
"(let-values(((orig-s_31) orig-s64_0))"
"(let-values(((new_1) new65_0))"
"(let-values(((track?_0)(if track?63_0 track?62_0 #t)))"
"(let-values()"
"(syntax-rearm$1"
"(datum->syntax$1(syntax-disarm$1 orig-s_31) new_1 orig-s_31(if track?_0 orig-s_31 #f))"
" orig-s_31)))))))"
"(define-values"
"(attach-disappeared-transformer-bindings)"
"(lambda(s_396 trans-idss_0)"
"(if(null? trans-idss_0)"
"(let-values() s_396)"
"(let-values()"
"(syntax-property$1"
" s_396"
" 'disappeared-binding"
"(append"
"(apply append trans-idss_0)"
"(let-values(((or-part_269)(syntax-property$1 s_396 'disappeared-binding)))"
"(if or-part_269 or-part_269 null))))))))"
"(define-values"
"(increment-binding-layer)"
"(lambda(ids_22 ctx_40 layer-val_0)"
"(if((letrec-values(((loop_145)"
"(lambda(ids_23)"
"(let-values(((or-part_270)(identifier? ids_23)))"
"(if or-part_270"
" or-part_270"
"(if(pair? ids_23)"
"(let-values(((or-part_271)(loop_145(car ids_23))))"
"(if or-part_271 or-part_271(loop_145(cdr ids_23))))"
" #f))))))"
" loop_145)"
" ids_22)"
" layer-val_0"
"(expand-context-binding-layer ctx_40))))"
"(define-values"
"(wrap-lifts-as-parsed-let)"
"(lambda(lifts_7 exp-s_2 rebuild-s_1 ctx_41 parse-rhs_0)"
"(let-values(((idss+keyss+rhss_0)(get-lifts-as-lists lifts_7)))"
"((letrec-values(((lets-loop_0)"
"(lambda(idss+keyss+rhss_1 rhs-ctx_1)"
"(if(null? idss+keyss+rhss_1)"
"(let-values() exp-s_2)"
"(let-values()"
"(let-values(((ids_24)(caar idss+keyss+rhss_1)))"
"(let-values(((keys_4)(cadar idss+keyss+rhss_1)))"
"(let-values(((rhs_18)(caddar idss+keyss+rhss_1)))"
"(let-values(((exp-rhs_2)(parse-rhs_0 rhs_18 rhs-ctx_1)))"
"(parsed-let-values17.1"
" rebuild-s_1"
"(list ids_24)"
"(list(list keys_4 exp-rhs_2))"
"(list"
"(lets-loop_0"
"(cdr idss+keyss+rhss_1)"
"(let-values(((v_195) rhs-ctx_1))"
"(let-values(((the-struct_60) v_195))"
"(if(expand-context/outer? the-struct_60)"
"(let-values(((env152_0)"
"(let-values(((lst_265) ids_24)((lst_266) keys_4))"
"(begin"
"(check-list lst_265)"
"(check-list lst_266)"
"((letrec-values(((for-loop_227)"
"(lambda(env_3 lst_267 lst_268)"
"(if(if(pair? lst_267)"
"(pair? lst_268)"
" #f)"
"(let-values(((id_66)"
"(unsafe-car"
" lst_267))"
"((rest_145)"
"(unsafe-cdr"
" lst_267))"
"((key_76)"
"(unsafe-car"
" lst_268))"
"((rest_146)"
"(unsafe-cdr"
" lst_268)))"
"(let-values(((env_4)"
"(let-values(((env_5)"
" env_3))"
"(let-values(((env_6)"
"(let-values()"
"(env-extend"
" env_5"
" key_76"
"(local-variable1.1"
" id_66)))))"
"(values"
" env_6)))))"
"(if(not #f)"
"(for-loop_227"
" env_4"
" rest_145"
" rest_146)"
" env_4)))"
" env_3))))"
" for-loop_227)"
"(expand-context-env rhs-ctx_1)"
" lst_265"
" lst_266))))"
"((inner153_0)(root-expand-context/outer-inner v_195)))"
"(expand-context/outer1.1"
" inner153_0"
"(root-expand-context/outer-post-expansion-scope the-struct_60)"
"(root-expand-context/outer-use-site-scopes the-struct_60)"
"(root-expand-context/outer-frame-id the-struct_60)"
"(expand-context/outer-context the-struct_60)"
" env152_0"
"(expand-context/outer-post-expansion-scope-action the-struct_60)"
"(expand-context/outer-scopes the-struct_60)"
"(expand-context/outer-def-ctx-scopes the-struct_60)"
"(expand-context/outer-binding-layer the-struct_60)"
"(expand-context/outer-reference-records the-struct_60)"
"(expand-context/outer-only-immediate? the-struct_60)"
"(expand-context/outer-need-eventually-defined the-struct_60)"
"(expand-context/outer-current-introduction-scopes the-struct_60)"
"(expand-context/outer-name the-struct_60)))"
"(raise-argument-error"
" 'struct-copy"
"                                                \"expand-context/outer?\""
" the-struct_60))))))))))))))))"
" lets-loop_0)"
" idss+keyss+rhss_0"
" ctx_41))))"
"(define-values"
"(rename-transformer-target-in-context)"
"(lambda(t_54 ctx_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) current-expand-context ctx_42)"
"(let-values()(1/rename-transformer-target t_54)))))"
"(define-values"
"(stop-ids->all-stop-ids)"
"(lambda(stop-ids_0 phase_40)"
"(if(null? stop-ids_0)"
"(let-values() stop-ids_0)"
"(let-values()"
"(let-values(((p-core-stx_0)(syntax-shift-phase-level$1 core-stx phase_40)))"
"(if(if(= 1(length stop-ids_0))"
"(free-identifier=?$1(car stop-ids_0)(datum->syntax$1 p-core-stx_0 'module*) phase_40 phase_40)"
" #f)"
"(let-values() stop-ids_0)"
"(let-values()"
"(append"
" stop-ids_0"
"(let-values(((lst_96) auto-stop-syms))"
"(begin"
"(check-list lst_96)"
"((letrec-values(((for-loop_104)"
"(lambda(lst_74)"
"(if(pair? lst_74)"
"(let-values(((sym_25)(unsafe-car lst_74))((rest_33)(unsafe-cdr lst_74)))"
"(let-values(((post-guard-var_22)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_22)"
"(let-values()"
"(let-values()(datum->syntax$1 p-core-stx_0 sym_25)))))"
"(let-values(((result_84)"
"(if(post-guard-var_22)(for-loop_104 rest_33) null)))"
"(cons elem_22 result_84))))))"
" null))))"
" for-loop_104)"
" lst_96)))))))))))"
"(define-values"
"(auto-stop-syms)"
" '(begin"
" quote"
" set!"
" lambda"
" case-lambda"
" let-values"
" letrec-values"
" if"
" begin0"
" with-continuation-mark"
" letrec-syntaxes+values"
" #%app"
" #%expression"
" #%top"
" #%variable-reference))"
"(define-values"
"(struct:internal-definition-context"
" internal-definition-context1.1"
" 1/internal-definition-context?"
" internal-definition-context-frame-id"
" internal-definition-context-scope"
" internal-definition-context-add-scope?"
" internal-definition-context-env-mixins)"
"(let-values(((struct:_26 make-_26 ?_26 -ref_26 -set!_26)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'internal-definition-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'internal-definition-context)))))"
"(values"
" struct:_26"
" make-_26"
" ?_26"
"(make-struct-field-accessor -ref_26 0 'frame-id)"
"(make-struct-field-accessor -ref_26 1 'scope)"
"(make-struct-field-accessor -ref_26 2 'add-scope?)"
"(make-struct-field-accessor -ref_26 3 'env-mixins))))"
"(define-values"
"(struct:env-mixin env-mixin2.1 env-mixin? env-mixin-id env-mixin-sym env-mixin-value env-mixin-cache)"
"(let-values(((struct:_63 make-_63 ?_63 -ref_63 -set!_63)"
"(let-values()"
"(let-values()"
"(make-struct-type 'env-mixin #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'env-mixin)))))"
"(values"
" struct:_63"
" make-_63"
" ?_63"
"(make-struct-field-accessor -ref_63 0 'id)"
"(make-struct-field-accessor -ref_63 1 'sym)"
"(make-struct-field-accessor -ref_63 2 'value)"
"(make-struct-field-accessor -ref_63 3 'cache))))"
"(define-values"
"(1/syntax-local-make-definition-context)"
"(let-values(((syntax-local-make-definition-context7_0)"
"(lambda(parent-ctx3_0 add-scope?4_0 parent-ctx5_0 add-scope?6_0)"
"(let-values(((parent-ctx_0)(if parent-ctx5_0 parent-ctx3_0 #f)))"
"(let-values(((add-scope?_0)(if add-scope?6_0 add-scope?4_0 #t)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_177)(not parent-ctx_0)))"
"(if or-part_177"
" or-part_177"
"(1/internal-definition-context? parent-ctx_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-make-definition-context"
"                                             \"(or/c #f internal-definition-context?)\""
" parent-ctx_0)))"
"(values))))"
"(let-values(((ctx_43)"
"(let-values(((temp38_2) 'syntax-local-make-definition-context))"
"(get-current-expand-context15.1 #f #f temp38_2 #t))))"
"(let-values(((frame-id_7)"
"(let-values(((or-part_206)(root-expand-context-frame-id ctx_43)))"
"(if or-part_206"
" or-part_206"
"(let-values(((or-part_83)"
"(if parent-ctx_0"
"(internal-definition-context-frame-id parent-ctx_0)"
" #f)))"
"(if or-part_83 or-part_83(gensym)))))))"
"(let-values(((sc_25)(new-scope 'intdef)))"
"(let-values(((def-ctx-scopes_4)(expand-context-def-ctx-scopes ctx_43)))"
"(begin"
"(if def-ctx-scopes_4"
"(void)"
"(let-values()"
"                                        (error \"internal error: no box to accumulate definition-context scopes\")))"
"(set-box! def-ctx-scopes_4(cons sc_25(unbox def-ctx-scopes_4)))"
"(internal-definition-context1.1"
" frame-id_7"
" sc_25"
" add-scope?_0"
"(box null))))))))))))))"
"(case-lambda"
"(()(syntax-local-make-definition-context7_0 #f #f #f #f))"
"((parent-ctx_1 add-scope?4_1)(syntax-local-make-definition-context7_0 parent-ctx_1 add-scope?4_1 #t #t))"
"((parent-ctx3_1)(syntax-local-make-definition-context7_0 parent-ctx3_1 #f #t #f)))))"
"(define-values"
"(1/syntax-local-bind-syntaxes)"
"(lambda(ids_25 s_163 intdef_0)"
"(let-values((()"
"(begin"
"(if(if(list? ids_25)(andmap2 identifier? ids_25) #f)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-bind-syntaxes \"(listof identifier?)\" ids_25)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_272)(not s_163)))(if or-part_272 or-part_272(syntax?$1 s_163)))"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-local-bind-syntaxes \"(or/c syntax? #f)\" s_163)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/internal-definition-context? intdef_0)"
"(void)"
"(let-values()"
"                            (raise-argument-error 'syntax-local-bind-syntaxes \"internal-definition-context?\" intdef_0)))"
"(values))))"
"(let-values(((ctx_44)"
"(let-values(((temp39_2) 'local-expand))(get-current-expand-context15.1 #f #f temp39_2 #t))))"
"(let-values((()"
"(begin"
"(let-values(((obs_26)(expand-context-observer ctx_44)))"
"(if obs_26"
"(let-values()(let-values()(call-expand-observe obs_26 'local-bind ids_25)))"
"(void)))"
"(values))))"
"(let-values(((phase_109)(expand-context-phase ctx_44)))"
"(let-values(((intdef-env_0)(add-intdef-bindings(expand-context-env ctx_44) intdef_0)))"
"(let-values(((intdef-ids_0)"
"(let-values(((lst_134) ids_25))"
"(begin"
"(check-list lst_134)"
"((letrec-values(((for-loop_143)"
"(lambda(lst_269)"
"(if(pair? lst_269)"
"(let-values(((id_67)(unsafe-car lst_269))"
"((rest_147)(unsafe-cdr lst_269)))"
"(let-values(((post-guard-var_69)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_62)"
"(let-values()"
"(let-values()"
"(let-values(((pre-id_0)"
"(remove-use-site-scopes"
"(flip-introduction-scopes"
" id_67"
" ctx_44)"
" ctx_44)))"
"(let-values(((temp42_2) #t))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" temp42_2"
" #t"
" pre-id_0"
" intdef_0)))))))"
"(let-values(((result_158)"
"(if(post-guard-var_69)"
"(for-loop_143 rest_147)"
" null)))"
"(cons elem_62 result_158))))))"
" null))))"
" for-loop_143)"
" lst_134)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_27)(expand-context-observer ctx_44)))"
"(if obs_27"
"(let-values()"
"(let-values()(call-expand-observe obs_27 'rename-list intdef-ids_0)))"
"(void)))"
"(values))))"
"(let-values(((syms_21)"
"(let-values(((lst_270) intdef-ids_0))"
"(begin"
"(check-list lst_270)"
"((letrec-values(((for-loop_4)"
"(lambda(lst_125)"
"(if(pair? lst_125)"
"(let-values(((intdef-id_0)(unsafe-car lst_125))"
"((rest_148)(unsafe-cdr lst_125)))"
"(let-values(((post-guard-var_70)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_63)"
"(let-values()"
"(let-values()"
"(let-values(((temp45_1)"
"(root-expand-context-counter"
" ctx_44))"
"((temp46_2)"
"(internal-definition-context-frame-id"
" intdef_0)))"
"(add-local-binding!35.1"
" temp46_2"
" #t"
" #f"
" #f"
" intdef-id_0"
" phase_109"
" temp45_1))))))"
"(let-values(((result_159)"
"(if(post-guard-var_70)"
"(for-loop_4 rest_148)"
" null)))"
"(cons elem_63 result_159))))))"
" null))))"
" for-loop_4)"
" lst_270)))))"
"(let-values(((vals_5)"
"(if s_163"
"(let-values()"
"(let-values(((input-s_0)"
"(flip-introduction-scopes"
"(let-values(((temp49_3) #t))"
"(add-intdef-scopes21.1 #f #f temp49_3 #t s_163 intdef_0))"
" ctx_44)))"
"(let-values(((tmp-env_0)"
"(let-values(((lst_129) syms_21))"
"(begin"
"(check-list lst_129)"
"((letrec-values(((for-loop_228)"
"(lambda(env_7 lst_131)"
"(if(pair? lst_131)"
"(let-values(((sym_68)"
"(unsafe-car lst_131))"
"((rest_149)"
"(unsafe-cdr lst_131)))"
"(let-values(((env_8)"
"(let-values(((env_9)"
" env_7))"
"(let-values(((env_10)"
"(let-values()"
"(hash-set"
" env_9"
" sym_68"
" variable))))"
"(values"
" env_10)))))"
"(if(not #f)"
"(for-loop_228 env_8 rest_149)"
" env_8)))"
" env_7))))"
" for-loop_228)"
" intdef-env_0"
" lst_129)))))"
"(eval-for-syntaxes-binding"
" input-s_0"
" ids_25"
"(let-values(((temp50_2)"
"(let-values(((v_196) ctx_44))"
"(let-values(((the-struct_61) v_196))"
"(if(expand-context/outer? the-struct_61)"
"(let-values(((env53_0) tmp-env_0)"
"((inner54_0)"
"(root-expand-context/outer-inner"
" v_196)))"
"(expand-context/outer1.1"
" inner54_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_61)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_61)"
"(root-expand-context/outer-frame-id the-struct_61)"
"(expand-context/outer-context the-struct_61)"
" env53_0"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_61)"
"(expand-context/outer-scopes the-struct_61)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_61)"
"(expand-context/outer-binding-layer the-struct_61)"
"(expand-context/outer-reference-records"
" the-struct_61)"
"(expand-context/outer-only-immediate?"
" the-struct_61)"
"(expand-context/outer-need-eventually-defined"
" the-struct_61)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_61)"
"(expand-context/outer-name the-struct_61)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                    \"expand-context/outer?\""
" the-struct_61)))))"
"((temp51_1) 'expression)"
"((intdef52_0) intdef_0))"
"(make-local-expand-context33.1"
" temp51_1"
" intdef52_0"
" #f"
" #f"
" #f"
" #f"
" temp50_2))))))"
"(let-values()"
"(let-values(((lst_271) ids_25))"
"(begin"
"(check-list lst_271)"
"((letrec-values(((for-loop_229)"
"(lambda(lst_272)"
"(if(pair? lst_272)"
"(let-values(((id_68)(unsafe-car lst_272))"
"((rest_150)(unsafe-cdr lst_272)))"
"(let-values(((post-guard-var_71)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_64)"
"(let-values()"
"(let-values() variable))))"
"(let-values(((result_160)"
"(if(post-guard-var_71)"
"(for-loop_229 rest_150)"
" null)))"
"(cons elem_64 result_160))))))"
" null))))"
" for-loop_229)"
" lst_271)))))))"
"(let-values(((env-mixins_0)(internal-definition-context-env-mixins intdef_0)))"
"(begin"
"(set-box!"
" env-mixins_0"
"(append"
"(let-values(((lst_273) intdef-ids_0)((lst_274) syms_21)((lst_48) vals_5))"
"(begin"
"(check-list lst_273)"
"(check-list lst_274)"
"(check-list lst_48)"
"((letrec-values(((for-loop_69)"
"(lambda(lst_49 lst_275 lst_223)"
"(if(if(pair? lst_49)"
"(if(pair? lst_275)(pair? lst_223) #f)"
" #f)"
"(let-values(((intdef-id_1)(unsafe-car lst_49))"
"((rest_151)(unsafe-cdr lst_49))"
"((sym_69)(unsafe-car lst_275))"
"((rest_152)(unsafe-cdr lst_275))"
"((val_61)(unsafe-car lst_223))"
"((rest_153)(unsafe-cdr lst_223)))"
"(let-values(((post-guard-var_72)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_65)"
"(let-values()"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_61"
" intdef-id_1"
" phase_109)"
"(env-mixin2.1"
" intdef-id_1"
" sym_69"
" val_61"
"(make-weak-hasheq)))))))"
"(let-values(((result_66)"
"(if(post-guard-var_72)"
"(for-loop_69"
" rest_151"
" rest_152"
" rest_153)"
" null)))"
"(cons elem_65 result_66))))))"
" null))))"
" for-loop_69)"
" lst_273"
" lst_274"
" lst_48)))"
"(unbox env-mixins_0)))"
"(let-values(((obs_22)(expand-context-observer ctx_44)))"
"(if obs_22"
"(let-values()(let-values()(call-expand-observe obs_22 'exit-local-bind)))"
"(void))))))))))))))))))"
"(define-values"
"(1/internal-definition-context-binding-identifiers)"
"(lambda(intdef_1)"
"(begin"
"(if(1/internal-definition-context? intdef_1)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-binding-identifiers"
"           \"internal-definition-context?\""
" intdef_1)))"
"(let-values(((lst_276)(unbox(internal-definition-context-env-mixins intdef_1))))"
"(begin"
"(check-list lst_276)"
"((letrec-values(((for-loop_230)"
"(lambda(lst_277)"
"(if(pair? lst_277)"
"(let-values(((env-mixin_0)(unsafe-car lst_277))((rest_154)(unsafe-cdr lst_277)))"
"(let-values(((post-guard-var_73)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_66)"
"(let-values()(let-values()(env-mixin-id env-mixin_0)))))"
"(let-values(((result_11)"
"(if(post-guard-var_73)(for-loop_230 rest_154) null)))"
"(cons elem_66 result_11))))))"
" null))))"
" for-loop_230)"
" lst_276))))))"
"(define-values"
"(1/internal-definition-context-introduce)"
"(let-values(((internal-definition-context-introduce13_0)"
"(lambda(intdef11_0 s12_1 mode9_0 mode10_0)"
"(let-values(((intdef_2) intdef11_0))"
"(let-values(((s_35) s12_1))"
"(let-values(((mode_12)(if mode10_0 mode9_0 'flip)))"
"(let-values()"
"(begin"
"(if(1/internal-definition-context? intdef_2)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-introduce"
"                                 \"internal-definition-context?\""
" intdef_2)))"
"(if(syntax?$1 s_35)"
"(void)"
"(let-values()"
"                                (raise-argument-error 'internal-definition-context-introduce \"syntax?\" s_35)))"
"(let-values(((temp57_1)"
"(let-values(((tmp_31) mode_12))"
"(if(equal? tmp_31 'add)"
"(let-values() add-scope)"
"(if(equal? tmp_31 'remove)"
"(let-values() remove-scope)"
"(if(equal? tmp_31 'flip)"
"(let-values() flip-scope)"
"(let-values()"
"(raise-argument-error"
" 1/internal-definition-context-introduce"
"                                                     \"(or/c 'add 'remove 'flip)\""
" mode_12))))))))"
"(add-intdef-scopes21.1 temp57_1 #t #f #f s_35 intdef_2))))))))))"
"(case-lambda"
"((intdef_3 s_397)(internal-definition-context-introduce13_0 intdef_3 s_397 #f #f))"
"((intdef_4 s_398 mode9_1)(internal-definition-context-introduce13_0 intdef_4 s_398 mode9_1 #t)))))"
"(define-values"
"(1/internal-definition-context-seal)"
"(lambda(intdef_5)"
"(begin"
"(if(1/internal-definition-context? intdef_5)"
"(void)"
"(let-values()"
"          (raise-argument-error 'internal-definition-context-seal \"internal-definition-context?\" intdef_5)))"
"(void))))"
"(define-values"
"(1/identifier-remove-from-definition-context)"
"(lambda(id_69 intdef_6)"
"(begin"
"(if(identifier? id_69)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-remove-from-definition-context \"identifier?\" id_69)))"
"(if(let-values(((or-part_273)(1/internal-definition-context? intdef_6)))"
"(if or-part_273 or-part_273(if(list? intdef_6)(andmap2 1/internal-definition-context? intdef_6) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'identifier-remove-from-definition-context"
"           \"(or/c internal-definition-context? (listof internal-definition-context?))\""
" intdef_6)))"
"(let-values(((x_114)"
"(let-values(((a_45) intdef_6))"
"(if(list? a_45)"
"(let-values()(reverse$1 a_45))"
"(if(not a_45)(let-values() null)(let-values()(list a_45)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_231)"
"(lambda(id_70 a_46)"
"(if(pair? a_46)"
"(let-values(((intdef_7)(car a_46)))"
"(let-values(((id_71)"
"(let-values(((id_72) id_70))"
"(let-values(((id_19)"
"(let-values()"
"(1/internal-definition-context-introduce"
" intdef_7"
" id_72"
" 'remove))))"
"(values id_19)))))"
"(if(not #f)(for-loop_231 id_71(cdr a_46)) id_71)))"
" id_70))))"
" for-loop_231)"
" id_69"
" x_114))))))"
"(define-values"
"(add-intdef-bindings)"
"(lambda(env_11 intdefs_0)"
"(let-values(((x_115)"
"(let-values(((a_47) intdefs_0))"
"(if(list? a_47)"
"(let-values()(reverse$1 a_47))"
"(if(not a_47)(let-values() null)(let-values()(list a_47)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_232)"
"(lambda(env_12 a_48)"
"(if(pair? a_48)"
"(let-values(((intdef_8)(car a_48)))"
"(let-values(((env_13)"
"(let-values(((env_14) env_12))"
"(let-values(((env_15)"
"(let-values()"
"(let-values(((env-mixins_1)"
"(unbox"
"(internal-definition-context-env-mixins"
" intdef_8))))"
"((letrec-values(((loop_146)"
"(lambda(env_16 env-mixins_2)"
"(if(null? env-mixins_2)"
"(let-values() env_16)"
"(let-values()"
"(let-values(((env-mixin_1)"
"(car"
" env-mixins_2)))"
"(let-values(((or-part_274)"
"(hash-ref"
"(env-mixin-cache"
" env-mixin_1)"
" env_16"
" #f)))"
"(if or-part_274"
" or-part_274"
"(let-values(((new-env_0)"
"(env-extend"
"(loop_146"
" env_16"
"(cdr"
" env-mixins_2))"
"(env-mixin-sym"
" env-mixin_1)"
"(env-mixin-value"
" env-mixin_1))))"
"(begin"
"(hash-set!"
"(env-mixin-cache"
" env-mixin_1)"
" env_16"
" new-env_0)"
" new-env_0))))))))))"
" loop_146)"
" env_14"
" env-mixins_1)))))"
"(values env_15)))))"
"(if(not #f)(for-loop_232 env_13(cdr a_48)) env_13)))"
" env_12))))"
" for-loop_232)"
" env_11"
" x_115)))))"
"(define-values"
"(add-intdef-scopes21.1)"
"(lambda(action16_0 action18_0 always?15_0 always?17_0 s19_0 intdefs20_0)"
"(let-values(((s_399) s19_0))"
"(let-values(((intdefs_1) intdefs20_0))"
"(let-values(((always?_0)(if always?17_0 always?15_0 #f)))"
"(let-values(((action_0)(if action18_0 action16_0 add-scope)))"
"(let-values()"
"(let-values(((x_116)"
"(let-values(((a_49) intdefs_1))"
"(if(list? a_49)"
"(let-values()(reverse$1 a_49))"
"(if(not a_49)(let-values() null)(let-values()(list a_49)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_166)"
"(lambda(s_37 a_50)"
"(if(pair? a_50)"
"(let-values(((intdef_9)(car a_50)))"
"(let-values(((s_90)"
"(let-values(((s_150) s_37))"
"(if(let-values(((or-part_275) always?_0))"
"(if or-part_275"
" or-part_275"
"(internal-definition-context-add-scope? intdef_9)))"
"(let-values(((s_400) s_150))"
"(let-values(((s_401)"
"(let-values()"
"(action_0"
" s_400"
"(internal-definition-context-scope"
" intdef_9)))))"
"(values s_401)))"
" s_150))))"
"(if(not #f)(for-loop_166 s_90(cdr a_50)) s_90)))"
" s_37))))"
" for-loop_166)"
" s_399"
" x_116))))))))))"
"(define-values"
"(make-local-expand-context33.1)"
"(lambda(context24_0 intdefs26_0 phase25_0 phase29_1 stop-ids27_0 stop-ids31_0 ctx32_0)"
"(let-values(((ctx_45) ctx32_0))"
"(let-values(((context_8) context24_0))"
"(let-values(((phase_110)(if phase29_1 phase25_0(expand-context-phase ctx_45))))"
"(let-values(((intdefs_2) intdefs26_0))"
"(let-values(((stop-ids_1)(if stop-ids31_0 stop-ids27_0 #f)))"
"(let-values()"
"(let-values(((same-kind?_0)"
"(let-values(((or-part_175)(eq? context_8(expand-context-context ctx_45))))"
"(if or-part_175"
" or-part_175"
"(if(list? context_8)(list?(expand-context-context ctx_45)) #f)))))"
"(let-values(((all-stop-ids_0)(if stop-ids_1(stop-ids->all-stop-ids stop-ids_1 phase_110) #f)))"
"(let-values(((def-ctx-scopes_5)"
"(if(expand-context-def-ctx-scopes ctx_45)"
"(unbox(expand-context-def-ctx-scopes ctx_45))"
" null)))"
"(let-values(((v_197) ctx_45))"
"(let-values(((the-struct_62) v_197))"
"(if(expand-context/outer? the-struct_62)"
"(let-values(((context58_0) context_8)"
"((env59_0)(add-intdef-bindings(expand-context-env ctx_45) intdefs_2))"
"((use-site-scopes60_0)"
"(if(let-values(((or-part_276)(eq? context_8 'module)))"
"(if or-part_276 or-part_276(list? context_8)))"
"(let-values(((or-part_277)(root-expand-context-use-site-scopes ctx_45)))"
"(if or-part_277 or-part_277(box null)))"
" #f))"
"((frame-id61_1)"
"(let-values(((x_117)"
"(let-values(((a_51) intdefs_2))"
"(if(list? a_51)"
"(let-values()(reverse$1 a_51))"
"(if(not a_51)"
"(let-values() null)"
"(let-values()(list a_51)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_233)"
"(lambda(frame-id_8 a_52)"
"(if(pair? a_52)"
"(let-values(((intdef_10)(car a_52)))"
"(let-values(((frame-id_9)"
"(let-values(((frame-id_10)"
" frame-id_8))"
"(let-values(((frame-id_11)"
"(let-values()"
"(let-values(((i-frame-id_0)"
"(internal-definition-context-frame-id"
" intdef_10)))"
"(if(if frame-id_10"
"(if i-frame-id_0"
"(not"
"(eq?"
" frame-id_10"
" i-frame-id_0))"
" #f)"
" #f)"
"(let-values()"
" 'all)"
"(let-values()"
"(let-values(((or-part_278)"
" frame-id_10))"
"(if or-part_278"
" or-part_278"
" i-frame-id_0))))))))"
"(values frame-id_11)))))"
"(if(not #f)"
"(for-loop_233 frame-id_9(cdr a_52))"
" frame-id_9)))"
" frame-id_8))))"
" for-loop_233)"
"(root-expand-context-frame-id ctx_45)"
" x_117))))"
"((post-expansion-scope62_0)"
"(if intdefs_2"
"(new-scope 'macro)"
"(if same-kind?_0"
"(if(memq context_8 '(module module-begin top-level))"
"(root-expand-context-post-expansion-scope ctx_45)"
" #f)"
" #f)))"
"((post-expansion-scope-action63_0)"
"(if intdefs_2"
"(lambda(s_99 placeholder-sc_0)"
"(let-values(((s68_0) s_99)((intdefs69_0) intdefs_2))"
"(add-intdef-scopes21.1 #f #f #f #f s68_0 intdefs69_0)))"
"(expand-context-post-expansion-scope-action ctx_45)))"
"((scopes64_0)(append def-ctx-scopes_5(expand-context-scopes ctx_45)))"
"((only-immediate?65_0)(not stop-ids_1))"
"((current-introduction-scopes66_0) null)"
"((inner67_0)"
"(let-values(((the-struct_63)(root-expand-context/outer-inner v_197)))"
"(if(expand-context/inner? the-struct_63)"
"(let-values(((to-parsed?70_0) #f)"
"((just-once?71_0) #f)"
"((in-local-expand?72_0) #t)"
"((stops73_0)"
"(free-id-set"
" phase_110"
"(let-values(((or-part_279) all-stop-ids_0))"
"(if or-part_279 or-part_279 null)))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes the-struct_63)"
"(root-expand-context/inner-top-level-bind-scope the-struct_63)"
"(root-expand-context/inner-all-scopes-stx the-struct_63)"
"(root-expand-context/inner-defined-syms the-struct_63)"
"(root-expand-context/inner-counter the-struct_63)"
"(root-expand-context/inner-lift-key the-struct_63)"
" to-parsed?70_0"
"(expand-context/inner-phase the-struct_63)"
"(expand-context/inner-namespace the-struct_63)"
"(expand-context/inner-user-env the-struct_63)"
" just-once?71_0"
"(expand-context/inner-module-begin-k the-struct_63)"
"(expand-context/inner-allow-unbound? the-struct_63)"
" in-local-expand?72_0"
" stops73_0"
"(expand-context/inner-declared-submodule-names the-struct_63)"
"(expand-context/inner-lifts the-struct_63)"
"(expand-context/inner-lift-envs the-struct_63)"
"(expand-context/inner-module-lifts the-struct_63)"
"(expand-context/inner-require-lifts the-struct_63)"
"(expand-context/inner-to-module-lifts the-struct_63)"
"(expand-context/inner-requires+provides the-struct_63)"
"(expand-context/inner-observer the-struct_63)"
"(expand-context/inner-for-serializable? the-struct_63)))"
"(raise-argument-error"
" 'struct-copy"
"                                               \"expand-context/inner?\""
" the-struct_63)))))"
"(expand-context/outer1.1"
" inner67_0"
" post-expansion-scope62_0"
" use-site-scopes60_0"
" frame-id61_1"
" context58_0"
" env59_0"
" post-expansion-scope-action63_0"
" scopes64_0"
"(expand-context/outer-def-ctx-scopes the-struct_62)"
"(expand-context/outer-binding-layer the-struct_62)"
"(expand-context/outer-reference-records the-struct_62)"
" only-immediate?65_0"
"(expand-context/outer-need-eventually-defined the-struct_62)"
" current-introduction-scopes66_0"
"(expand-context/outer-name the-struct_62)))"
"                            (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_62)))))))))))))))"
"(define-values"
"(flip-introduction-scopes)"
"(lambda(s_114 ctx_46)(flip-scopes s_114(expand-context-current-introduction-scopes ctx_46))))"
"(define-values"
"(1/syntax-transforming?)"
"(lambda()(if(let-values(((temp65_1) #t))(get-current-expand-context15.1 temp65_1 #t #f #f)) #t #f)))"
"(define-values"
"(1/syntax-transforming-with-lifts?)"
"(lambda()"
"(let-values(((ctx_47)(let-values(((temp66_1) #t))(get-current-expand-context15.1 temp66_1 #t #f #f))))"
"(if ctx_47(if(expand-context-lifts ctx_47) #t #f) #f))))"
"(define-values"
"(1/syntax-transforming-module-expression?)"
"(lambda()"
"(let-values(((ctx_12)(let-values(((temp67_0) #t))(get-current-expand-context15.1 temp67_0 #t #f #f))))"
"(if ctx_12(if(expand-context-to-module-lifts ctx_12) #t #f) #f))))"
"(define-values"
"(1/syntax-local-transforming-module-provides?)"
"(lambda()"
"(let-values(((ctx_48)(let-values(((temp68_0) #t))(get-current-expand-context15.1 temp68_0 #t #f #f))))"
"(if ctx_48(if(expand-context-requires+provides ctx_48) #t #f) #f))))"
"(define-values"
"(1/syntax-local-context)"
"(lambda()"
"(let-values(((ctx_13)"
"(let-values(((temp69_0) 'syntax-local-context))(get-current-expand-context15.1 #f #f temp69_0 #t))))"
"(expand-context-context ctx_13))))"
"(define-values"
"(1/syntax-local-introduce)"
"(lambda(s_402)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_402)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-introduce \"syntax?\" s_402)))"
"(values))))"
"(let-values(((ctx_49)"
"(let-values(((temp70_1) 'syntax-local-introduce))"
"(get-current-expand-context15.1 #f #f temp70_1 #t))))"
"(flip-introduction-scopes s_402 ctx_49)))))"
"(define-values"
"(1/syntax-local-identifier-as-binding)"
"(lambda(id_3)"
"(let-values((()"
"(begin"
"(if(identifier? id_3)"
"(void)"
"                      (let-values () (raise-argument-error 1/syntax-local-identifier-as-binding \"identifier?\" id_3)))"
"(values))))"
"(let-values(((ctx_50)"
"(let-values(((temp71_1) 'syntax-local-identifier-as-binding))"
"(get-current-expand-context15.1 #f #f temp71_1 #t))))"
"(remove-use-site-scopes id_3 ctx_50)))))"
"(define-values"
"(1/syntax-local-phase-level)"
"(lambda()"
"(let-values(((ctx_14)(let-values(((temp72_1) #t))(get-current-expand-context15.1 temp72_1 #t #f #f))))"
"(if ctx_14(expand-context-phase ctx_14) 0))))"
"(define-values"
"(1/syntax-local-name)"
"(lambda()"
"(let-values(((ctx_51)"
"(let-values(((temp73_1) 'syntax-local-name))(get-current-expand-context15.1 #f #f temp73_1 #t))))"
"(let-values(((id_4)(expand-context-name ctx_51)))(if id_4(datum->syntax$1 #f(syntax-e$1 id_4) id_4) #f)))))"
"(define-values"
"(1/make-syntax-introducer)"
"(let-values(((make-syntax-introducer3_0)"
"(lambda(as-use-site?1_0 as-use-site?2_0)"
"(let-values(((as-use-site?_0)(if as-use-site?2_0 as-use-site?1_0 #f)))"
"(let-values()"
"(let-values(((sc_26)(new-scope(if as-use-site?_0 'use-site 'macro))))"
"(let-values(((core77_0)"
"(lambda(s76_0 mode74_0 mode75_0)"
"(let-values(((s_169) s76_0))"
"(let-values(((mode_13)(if mode75_0 mode74_0 'flip)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_169)"
"(void)"
"(let-values()"
"                                                    (raise-argument-error 'syntax-introducer \"syntax?\" s_169)))"
"(let-values(((tmp_32) mode_13))"
"(if(equal? tmp_32 'add)"
"(let-values()(add-scope s_169 sc_26))"
"(if(equal? tmp_32 'remove)"
"(let-values()(remove-scope s_169 sc_26))"
"(if(equal? tmp_32 'flip)"
"(let-values()(flip-scope s_169 sc_26))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                           \"(or/c 'add 'remove 'flip)\""
" mode_13)))))))))))))"
"(case-lambda"
"((s_78)(core77_0 s_78 #f #f))"
"((s_79 mode74_1)(core77_0 s_79 mode74_1 #t))))))))))"
"(case-lambda"
"(()(make-syntax-introducer3_0 #f #f))"
"((as-use-site?1_1)(make-syntax-introducer3_0 as-use-site?1_1 #t)))))"
"(define-values"
"(1/make-syntax-delta-introducer)"
"(let-values(((make-syntax-delta-introducer9_0)"
"(lambda(ext-s7_0 base-s8_0 phase5_0 phase6_1)"
"(let-values(((ext-s_0) ext-s7_0))"
"(let-values(((base-s_0) base-s8_0))"
"(let-values(((phase_111)(if phase6_1 phase5_0(1/syntax-local-phase-level))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 ext-s_0)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'make-syntax-delta-introducer \"syntax?\" ext-s_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_179)(syntax?$1 base-s_0)))"
"(if or-part_179 or-part_179(not base-s_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
"                                                 \"(or/c syntax? #f)\""
" base-s_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(phase? phase_111)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
" phase?-string"
" phase_111)))"
"(values))))"
"(let-values(((ext-scs_0)(syntax-scope-set ext-s_0 phase_111)))"
"(let-values(((base-scs_0)"
"(syntax-scope-set"
"(let-values(((or-part_180) base-s_0))"
"(if or-part_180 or-part_180 empty-syntax))"
" phase_111)))"
"(let-values(((use-base-scs_0)"
"(if(subset? base-scs_0 ext-scs_0)"
" base-scs_0"
"(let-values(((or-part_181)"
"(if(identifier? base-s_0)"
"(let-values(((temp81_2) #t))"
"(resolve29.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_2"
" #t"
" base-s_0"
" phase_111))"
" #f)))"
"(if or-part_181 or-part_181(seteq))))))"
"(let-values(((delta-scs_0)(set->list(set-subtract ext-scs_0 use-base-scs_0))))"
"(let-values(((maybe-taint_0)"
"(if(syntax-clean? ext-s_0) values syntax-taint$1)))"
"(let-values(((core85_0)"
"(lambda(s84_0 mode82_0 mode83_0)"
"(let-values(((s_403) s84_0))"
"(let-values(((mode_14)(if mode83_0 mode82_0 'add)))"
"(let-values()"
"(maybe-taint_0"
"(let-values(((tmp_33) mode_14))"
"(if(equal? tmp_33 'add)"
"(let-values()(add-scopes s_403 delta-scs_0))"
"(if(equal? tmp_33 'remove)"
"(let-values()(remove-scopes s_403 delta-scs_0))"
"(if(equal? tmp_33 'flip)"
"(let-values()(flip-scopes s_403 delta-scs_0))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                                            \"(or/c 'add 'remove 'flip)\""
" mode_14)))))))))))))"
"(case-lambda"
"((s_175)(core85_0 s_175 #f #f))"
"((s_404 mode82_1)(core85_0 s_404 mode82_1 #t)))))))))))))))))))"
"(case-lambda"
"((ext-s_1 base-s_1)(make-syntax-delta-introducer9_0 ext-s_1 base-s_1 #f #f))"
"((ext-s_2 base-s_2 phase5_1)(make-syntax-delta-introducer9_0 ext-s_2 base-s_2 phase5_1 #t)))))"
"(define-values"
"(do-syntax-local-value17.1)"
"(lambda(immediate?11_0 who13_1 id14_0 intdef15_0 failure-thunk16_0)"
"(let-values(((who_16) who13_1))"
"(let-values(((id_73) id14_0))"
"(let-values(((intdef_11) intdef15_0))"
"(let-values(((failure-thunk_0) failure-thunk16_0))"
"(let-values(((immediate?_1) immediate?11_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_73)"
"(void)"
"                                  (let-values () (raise-argument-error who_16 \"identifier?\" id_73)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_85)(not failure-thunk_0)))"
"(if or-part_85"
" or-part_85"
"(if(procedure? failure-thunk_0)"
"(procedure-arity-includes? failure-thunk_0 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_16"
"                                       \"(or #f (procedure-arity-includes/c 0))\""
" failure-thunk_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_86)(not intdef_11)))"
"(if or-part_86 or-part_86(1/internal-definition-context? intdef_11)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_16"
"                                         \"(or #f internal-definition-context?)\""
" failure-thunk_0)))"
"(values))))"
"(let-values(((current-ctx_0)"
"(let-values(((who87_0) who_16))"
"(get-current-expand-context15.1 #f #f who87_0 #t))))"
"(let-values(((ctx_52)"
"(if intdef_11"
"(let-values(((v_198) current-ctx_0))"
"(let-values(((the-struct_8) v_198))"
"(if(expand-context/outer? the-struct_8)"
"(let-values(((env88_0)"
"(add-intdef-bindings"
"(expand-context-env current-ctx_0)"
" intdef_11))"
"((inner89_0)(root-expand-context/outer-inner v_198)))"
"(expand-context/outer1.1"
" inner89_0"
"(root-expand-context/outer-post-expansion-scope the-struct_8)"
"(root-expand-context/outer-use-site-scopes the-struct_8)"
"(root-expand-context/outer-frame-id the-struct_8)"
"(expand-context/outer-context the-struct_8)"
" env88_0"
"(expand-context/outer-post-expansion-scope-action the-struct_8)"
"(expand-context/outer-scopes the-struct_8)"
"(expand-context/outer-def-ctx-scopes the-struct_8)"
"(expand-context/outer-binding-layer the-struct_8)"
"(expand-context/outer-reference-records the-struct_8)"
"(expand-context/outer-only-immediate? the-struct_8)"
"(expand-context/outer-need-eventually-defined the-struct_8)"
"(expand-context/outer-current-introduction-scopes the-struct_8)"
"(expand-context/outer-name the-struct_8)))"
"(raise-argument-error"
" 'struct-copy"
"                                               \"expand-context/outer?\""
" the-struct_8))))"
" current-ctx_0)))"
"(let-values((()"
"(begin"
"(let-values(((obs_28)(expand-context-observer ctx_52)))"
"(if obs_28"
"(let-values()"
"(let-values()(call-expand-observe obs_28 'local-value id_73)))"
"(void)))"
"(values))))"
"(let-values(((phase_112)(expand-context-phase ctx_52)))"
"((letrec-values(((loop_147)"
"(lambda(id_74)"
"(let-values(((b_20)"
"(if immediate?_1"
"(let-values(((temp92_1) #t))"
"(resolve+shift30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp92_1"
" #t"
" #f"
" #f"
" id_74"
" phase_112))"
"(resolve+shift/extra-inspector"
" id_74"
" phase_112"
"(expand-context-namespace ctx_52)))))"
"(begin"
"(let-values(((obs_29)(expand-context-observer ctx_52)))"
"(if obs_29"
"(let-values()"
"(let-values()(call-expand-observe obs_29 'resolve id_74)))"
"(void)))"
"(if(not b_20)"
"(let-values()"
"(begin"
"(let-values(((obs_30)(expand-context-observer ctx_52)))"
"(if obs_30"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_30"
" 'local-value-result"
" #f)))"
"(void)))"
"(if failure-thunk_0"
"(failure-thunk_0)"
"(error"
" 'syntax-local-value"
"                                                               \"unbound identifier: ~v\""
" id_74))))"
"(let-values()"
"(let-values(((v_199 primitive?_7 insp_13)"
"(let-values(((temp96_2) #t))"
"(lookup15.1"
" #f"
" #f"
" temp96_2"
" #t"
" b_20"
" ctx_52"
" id_74))))"
"(if(let-values(((or-part_280)(variable? v_199)))"
"(if or-part_280 or-part_280(core-form? v_199)))"
"(let-values()"
"(begin"
"(let-values(((obs_31)"
"(expand-context-observer ctx_52)))"
"(if obs_31"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_31"
" 'local-value-result"
" #f)))"
"(void)))"
"(if failure-thunk_0"
"(failure-thunk_0)"
"(error"
" 'syntax-local-value"
"                                                                     \"identifier is not bound to syntax: ~v\""
" id_74))))"
"(let-values()"
"(begin"
"(let-values(((obs_9)"
"(expand-context-observer ctx_52)))"
"(if obs_9"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_9"
" 'local-value-result"
" #t)))"
"(void)))"
"(if(1/rename-transformer? v_199)"
"(let-values()"
"(if immediate?_1"
"(values"
" v_199"
"(1/rename-transformer-target v_199))"
"(loop_147(1/rename-transformer-target v_199))))"
"(if immediate?_1"
"(let-values()(values v_199 #f))"
"(let-values() v_199))))))))))))))"
" loop_147)"
"(flip-introduction-scopes id_73 ctx_52)))))))))))))))))"
"(define-values"
"(1/syntax-local-value)"
"(let-values(((syntax-local-value25_0)"
"(lambda(id24_0 failure-thunk20_0 intdef21_0 failure-thunk22_0 intdef23_0)"
"(let-values(((id_75) id24_0))"
"(let-values(((failure-thunk_1)(if failure-thunk22_0 failure-thunk20_0 #f)))"
"(let-values(((intdef_12)(if intdef23_0 intdef21_0 #f)))"
"(let-values()"
"(let-values(((temp97_1) 'syntax-local-value)"
"((temp98_1) #f)"
"((id99_1) id_75)"
"((intdef100_0) intdef_12)"
"((failure-thunk101_0) failure-thunk_1))"
"(do-syntax-local-value17.1 temp98_1 temp97_1 id99_1 intdef100_0 failure-thunk101_0)))))))))"
"(case-lambda"
"((id_76)(syntax-local-value25_0 id_76 #f #f #f #f))"
"((id_77 failure-thunk_2 intdef21_1)(syntax-local-value25_0 id_77 failure-thunk_2 intdef21_1 #t #t))"
"((id_78 failure-thunk20_1)(syntax-local-value25_0 id_78 failure-thunk20_1 #f #t #f)))))"
"(define-values"
"(1/syntax-local-value/immediate)"
"(let-values(((syntax-local-value/immediate32_0)"
"(lambda(id31_0 failure-thunk27_0 intdef28_0 failure-thunk29_0 intdef30_0)"
"(let-values(((id_17) id31_0))"
"(let-values(((failure-thunk_3)(if failure-thunk29_0 failure-thunk27_0 #f)))"
"(let-values(((intdef_13)(if intdef30_0 intdef28_0 #f)))"
"(let-values()"
"(let-values(((temp102_1) 'syntax-local-value/immediate)"
"((temp103_1) #t)"
"((id104_0) id_17)"
"((intdef105_0) intdef_13)"
"((failure-thunk106_0) failure-thunk_3))"
"(do-syntax-local-value17.1"
" temp103_1"
" temp102_1"
" id104_0"
" intdef105_0"
" failure-thunk106_0)))))))))"
"(case-lambda"
"((id_79)(syntax-local-value/immediate32_0 id_79 #f #f #f #f))"
"((id_80 failure-thunk_4 intdef28_1)(syntax-local-value/immediate32_0 id_80 failure-thunk_4 intdef28_1 #t #t))"
"((id_8 failure-thunk27_1)(syntax-local-value/immediate32_0 id_8 failure-thunk27_1 #f #t #f)))))"
"(define-values"
"(do-lift-values-expression)"
"(lambda(who_17 n_53 s_405)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_405) (void) (let-values () (raise-argument-error who_17 \"syntax?\" s_405)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? n_53)"
"(void)"
"                        (let-values () (raise-argument-error who_17 \"exact-nonnegative-integer?\" n_53)))"
"(values))))"
"(let-values(((ctx_53)(let-values(((who107_0) who_17))(get-current-expand-context15.1 #f #f who107_0 #t))))"
"(let-values(((lifts_8)(expand-context-lifts ctx_53)))"
"(let-values(((counter_4)(root-expand-context-counter ctx_53)))"
"(let-values(((ids_26)"
"(let-values(((start_43) 0)((end_32) n_53)((inc_24) 1))"
"(begin"
"(check-range start_43 end_32 inc_24)"
"((letrec-values(((for-loop_234)"
"(lambda(pos_3)"
"(if(< pos_3 end_32)"
"(let-values()"
"(let-values(((post-guard-var_74)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_67)"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(set-box!"
" counter_4"
"(add1(unbox counter_4)))"
"(values))))"
"(let-values(((name_22)"
"(string->unreadable-symbol"
"(format"
"                                                                                                \"lifted/~a\""
"(unbox counter_4)))))"
"(add-scope"
"(datum->syntax$1 #f name_22)"
"(new-scope 'macro))))))))"
"(let-values(((result_161)"
"(if(post-guard-var_74)"
"(for-loop_234(+ pos_3 inc_24))"
" null)))"
"(cons elem_67 result_161))))))"
" null))))"
" for-loop_234)"
" start_43)))))"
"(begin"
"(let-values(((obs_32)(expand-context-observer ctx_53)))"
"(if obs_32"
"(let-values()(let-values()(call-expand-observe obs_32 'local-lift ids_26 s_405)))"
"(void)))"
"(map2"
"(lambda(id_81)(flip-introduction-scopes id_81 ctx_53))"
"(add-lifted!"
" lifts_8"
" ids_26"
"(flip-introduction-scopes s_405 ctx_53)"
"(expand-context-phase ctx_53))))))))))))"
"(define-values"
"(1/syntax-local-lift-expression)"
"(lambda(s_52)(car(do-lift-values-expression 'syntax-local-lift-expression 1 s_52))))"
"(define-values"
"(1/syntax-local-lift-values-expression)"
"(lambda(n_54 s_406)(do-lift-values-expression 'syntax-local-lift-values-expression n_54 s_406)))"
"(define-values"
"(1/syntax-local-lift-context)"
"(lambda()"
"(let-values(((ctx_54)"
"(let-values(((temp108_0) 'syntax-local-lift-context))"
"(get-current-expand-context15.1 #f #f temp108_0 #t))))"
"(root-expand-context-lift-key ctx_54))))"
"(define-values"
"(1/syntax-local-lift-module)"
"(lambda(s_398)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_398)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-lift-module \"syntax?\" s_398)))"
"(values))))"
"(let-values(((ctx_55)"
"(let-values(((temp109_0) 'syntax-local-lift-module))"
"(get-current-expand-context15.1 #f #f temp109_0 #t))))"
"(let-values(((phase_113)(expand-context-phase ctx_55)))"
"(begin"
"(let-values(((tmp_34)(core-form-sym s_398 phase_113)))"
"(if(if(equal? tmp_34 'module) #t(equal? tmp_34 'module*))"
"(let-values()(add-lifted-module!(expand-context-module-lifts ctx_55) s_398 phase_113))"
"(let-values()"
"                  (raise-arguments-error 'syntax-local-lift-module \"not a module form\" \"given form\" s_398))))"
"(let-values(((obs_33)(expand-context-observer ctx_55)))"
"(if obs_33"
"(let-values()(let-values()(call-expand-observe obs_33 'lift-statement s_398)))"
"(void)))))))))"
"(define-values"
"(do-local-lift-to-module52.1)"
"(lambda(add-lifted!37_0"
" get-lift-ctx36_0"
" get-wrt-phase38_0"
" intro?34_0"
" intro?42_0"
" more-checks35_0"
" more-checks43_0"
" post-wrap41_0"
" post-wrap49_0"
" pre-wrap39_0"
" pre-wrap47_0"
" shift-wrap40_0"
" shift-wrap48_0"
" who50_0"
" s51_0)"
"(let-values(((who_18) who50_0))"
"(let-values(((s_207) s51_0))"
"(let-values(((intro?_0)(if intro?42_0 intro?34_0 #t)))"
"(let-values(((more-checks_0)(if more-checks43_0 more-checks35_0 void)))"
"(let-values(((get-lift-ctx_0) get-lift-ctx36_0))"
"(let-values(((add-lifted!_0) add-lifted!37_0))"
"(let-values(((get-wrt-phase_0) get-wrt-phase38_0))"
"(let-values(((pre-wrap_0)"
"(if pre-wrap47_0 pre-wrap39_0(lambda(s_407 phase_114 lift-ctx_1) s_407))))"
"(let-values(((shift-wrap_0)"
"(if shift-wrap48_0 shift-wrap40_0(lambda(s_399 phase_115 lift-ctx_2) s_399))))"
"(let-values(((post-wrap_0)"
"(if post-wrap49_0 post-wrap41_0(lambda(s_408 phase_116 lift-ctx_3) s_408))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_207)"
"(void)"
"                                            (let-values () (raise-argument-error who_18 \"syntax?\" s_207)))"
"(values))))"
"(let-values((()(begin(more-checks_0)(values))))"
"(let-values(((ctx_56)"
"(let-values(((who110_0) who_18))"
"(get-current-expand-context15.1 #f #f who110_0 #t))))"
"(let-values(((lift-ctx_4)(get-lift-ctx_0 ctx_56)))"
"(let-values(((phase_117)(expand-context-phase ctx_56)))"
"(let-values(((wrt-phase_1)(get-wrt-phase_0 lift-ctx_4)))"
"(let-values(((added-s_0)"
"(if intro?_0(flip-introduction-scopes s_207 ctx_56) s_207)))"
"(let-values(((pre-s_0)(pre-wrap_0 added-s_0 phase_117 lift-ctx_4)))"
"(let-values(((shift-s_0)"
"(let-values(((start_44) phase_117)"
"((end_33) wrt-phase_1)"
"((inc_25) -1))"
"(begin"
"(check-range start_44 end_33 inc_25)"
"((letrec-values(((for-loop_115)"
"(lambda(s_409 pos_103)"
"(if(> pos_103 end_33)"
"(let-values(((phase_118) pos_103))"
"(let-values(((s_300)"
"(let-values(((s_410)"
" s_409))"
"(let-values(((s_411)"
"(let-values()"
"(shift-wrap_0"
" s_410"
"(sub1"
" phase_118)"
" lift-ctx_4))))"
"(values s_411)))))"
"(if(not #f)"
"(for-loop_115"
" s_300"
"(+ pos_103 inc_25))"
" s_300)))"
" s_409))))"
" for-loop_115)"
" pre-s_0"
" start_44)))))"
"(let-values(((post-s_1)(post-wrap_0 shift-s_0 wrt-phase_1 lift-ctx_4)))"
"(begin"
"(add-lifted!_0 lift-ctx_4 post-s_1 wrt-phase_1)"
"(values ctx_56 added-s_0)))))))))))))))))))))))))"
"(define-values"
"(1/syntax-local-lift-require)"
"(lambda(s_412 use-s_1)"
"(let-values(((sc_27)(new-scope 'macro)))"
"(let-values(((ctx_57 added-s_1)"
"(let-values(((temp111_1) 'syntax-local-lift-require)"
"((temp112_2)(datum->syntax$1 #f s_412))"
"((temp113_1) #f)"
"((temp114_1)"
"(lambda()"
"(if(syntax?$1 use-s_1)"
"(void)"
"(let-values()"
"                                        (raise-argument-error 'syntax-local-lift-require \"syntax?\" use-s_1)))))"
"((expand-context-require-lifts115_0) expand-context-require-lifts)"
"((require-lift-context-wrt-phase116_0) require-lift-context-wrt-phase)"
"((add-lifted-require!117_0) add-lifted-require!)"
"((temp118_0)"
"(lambda(s_154 phase_119 require-lift-ctx_0)(require-spec-shift-for-syntax s_154)))"
"((temp119_1)"
"(lambda(s_413 phase_120 require-lift-ctx_1)"
"(wrap-form '#%require(add-scope s_413 sc_27) phase_120))))"
"(do-local-lift-to-module52.1"
" add-lifted-require!117_0"
" expand-context-require-lifts115_0"
" require-lift-context-wrt-phase116_0"
" temp113_1"
" #t"
" temp114_1"
" #t"
" temp119_1"
" #t"
" #f"
" #f"
" temp118_0"
" #t"
" temp111_1"
" temp112_2))))"
"(let-values(((result-s_6)(add-scope use-s_1 sc_27)))"
"(begin"
"(let-values(((obs_34)(expand-context-observer ctx_57)))"
"(if obs_34"
"(let-values()(let-values()(call-expand-observe obs_34 'lift-require added-s_1 use-s_1 result-s_6)))"
"(void)))"
" result-s_6))))))"
"(define-values"
"(1/syntax-local-lift-provide)"
"(lambda(s_101)"
"(let-values(((ctx_58 result-s_7)"
"(let-values(((temp120_2) 'syntax-local-lift-module-end-declaration)"
"((s121_0) s_101)"
"((expand-context-to-module-lifts122_0) expand-context-to-module-lifts)"
"((to-module-lift-context-wrt-phase123_0) to-module-lift-context-wrt-phase)"
"((add-lifted-to-module-provide!124_0) add-lifted-to-module-provide!)"
"((temp125_0)"
"(lambda(s_414 phase_121 to-module-lift-ctx_0)(wrap-form 'for-syntax s_414 #f)))"
"((temp126_0)"
"(lambda(s_107 phase_122 to-module-lift-ctx_1)(wrap-form '#%provide s_107 phase_122))))"
"(do-local-lift-to-module52.1"
" add-lifted-to-module-provide!124_0"
" expand-context-to-module-lifts122_0"
" to-module-lift-context-wrt-phase123_0"
" #f"
" #f"
" #f"
" #f"
" temp126_0"
" #t"
" #f"
" #f"
" temp125_0"
" #t"
" temp120_2"
" s121_0))))"
"(let-values(((obs_35)(expand-context-observer ctx_58)))"
"(if obs_35(let-values()(let-values()(call-expand-observe obs_35 'lift-provide result-s_7)))(void))))))"
"(define-values"
"(1/syntax-local-lift-module-end-declaration)"
"(lambda(s_415)"
"(let-values(((ctx_59 also-s_0)"
"(let-values(((temp127_0) 'syntax-local-lift-module-end-declaration)"
"((s128_0) s_415)"
"((expand-context-to-module-lifts129_0) expand-context-to-module-lifts)"
"((temp130_0)(lambda(lift-ctx_5) 0))"
"((add-lifted-to-module-end!131_0) add-lifted-to-module-end!)"
"((temp132_1)"
"(lambda(orig-s_17 phase_123 to-module-lift-ctx_2)"
"(if(to-module-lift-context-end-as-expressions? to-module-lift-ctx_2)"
"(wrap-form '#%expression orig-s_17 phase_123)"
" orig-s_17)))"
"((temp133_0)"
"(lambda(s_416 phase_124 to-module-lift-ctx_3)"
"(wrap-form 'begin-for-syntax s_416 phase_124))))"
"(do-local-lift-to-module52.1"
" add-lifted-to-module-end!131_0"
" expand-context-to-module-lifts129_0"
" temp130_0"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp132_1"
" #t"
" temp133_0"
" #t"
" temp127_0"
" s128_0))))"
"(let-values(((obs_36)(expand-context-observer ctx_59)))"
"(if obs_36(let-values()(let-values()(call-expand-observe obs_36 'lift-statement s_415)))(void))))))"
"(define-values"
"(wrap-form)"
"(lambda(sym_70 s_312 phase_125)"
"(datum->syntax$1"
" #f"
"(list(datum->syntax$1(if phase_125(syntax-shift-phase-level$1 core-stx phase_125) #f) sym_70) s_312))))"
"(define-values"
"(1/syntax-local-module-defined-identifiers)"
"(lambda()"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-defined-identifiers"
"                         \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_60)"
"(let-values(((temp134_0) 'syntax-local-module-defined-identifiers))"
"(get-current-expand-context15.1 #f #f temp134_0 #t))))"
"(requireds->phase-ht(extract-module-definitions(expand-context-requires+provides ctx_60)))))))"
"(define-values"
"(1/syntax-local-module-required-identifiers)"
"(lambda(mod-path_8 phase-level_21)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_281)(not mod-path_8)))"
"(if or-part_281 or-part_281(1/module-path? mod-path_8)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                         \"(or/c module-path? #f)\""
" mod-path_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_282)(eq? phase-level_21 #t)))"
"(if or-part_282 or-part_282(phase? phase-level_21)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                           (format \"(or/c ~a #t)\" phase?-string)"
" phase-level_21)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-required-identifiers"
"                             \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_61)"
"(let-values(((temp135_1) 'syntax-local-module-required-identifiers))"
"(get-current-expand-context15.1 #f #f temp135_1 #t))))"
"(let-values(((requires+provides_5)(expand-context-requires+provides ctx_61)))"
"(let-values(((mpi_42)(if mod-path_8(module-path->mpi/context mod-path_8 ctx_61) #f)))"
"(let-values(((requireds_0)"
"(extract-all-module-requires"
" requires+provides_5"
" mpi_42"
"(if(eq? phase-level_21 #t) 'all phase-level_21))))"
"(if requireds_0"
"(let-values(((ht_137)(requireds->phase-ht requireds_0)))"
"(begin"
"(check-in-hash ht_137)"
"((letrec-values(((for-loop_235)"
"(lambda(i_121)"
"(if i_121"
"(let-values(((phase_126 ids_27)(hash-iterate-key+value ht_137 i_121)))"
"(let-values(((post-guard-var_75)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_68)"
"(let-values()"
"(let-values()(cons phase_126 ids_27)))))"
"(let-values(((result_122)"
"(if(post-guard-var_75)"
"(for-loop_235(hash-iterate-next ht_137 i_121))"
" null)))"
"(cons elem_68 result_122))))))"
" null))))"
" for-loop_235)"
"(hash-iterate-first ht_137))))"
" #f))))))))))"
"(define-values"
"(requireds->phase-ht)"
"(lambda(requireds_1)"
"(let-values(((lst_278) requireds_1))"
"(begin"
"(check-list lst_278)"
"((letrec-values(((for-loop_236)"
"(lambda(ht_138 lst_153)"
"(if(pair? lst_153)"
"(let-values(((r_47)(unsafe-car lst_153))((rest_155)(unsafe-cdr lst_153)))"
"(let-values(((ht_139)"
"(let-values(((ht_140) ht_138))"
"(let-values(((ht_141)"
"(let-values()"
"(hash-update"
" ht_140"
"(required-phase r_47)"
"(lambda(l_70)(cons(required-id r_47) l_70))"
" null))))"
"(values ht_141)))))"
"(if(not #f)(for-loop_236 ht_139 rest_155) ht_139)))"
" ht_138))))"
" for-loop_236)"
"(hasheqv)"
" lst_278)))))"
"(define-values"
"(1/syntax-local-module-exports)"
"(lambda(mod-path_9)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_283)(1/module-path? mod-path_9)))"
"(if or-part_283"
" or-part_283"
"(if(syntax?$1 mod-path_9)(1/module-path?(syntax->datum$1 mod-path_9)) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-exports"
"(string-append"
"                          \"(or/c module-path?\\n\""
"                          \"      (and/c syntax?\\n\""
"                          \"             (lambda (stx)\\n\""
"                          \"               (module-path? (syntax->datum stx)))))\")"
" mod-path_9)))"
"(values))))"
"(let-values(((ctx_62)"
"(let-values(((temp136_1) 'syntax-local-module-exports))"
"(get-current-expand-context15.1 #f #f temp136_1 #t))))"
"(let-values(((ns_74)(expand-context-namespace ctx_62)))"
"(let-values(((mod-name_16)"
"(1/module-path-index-resolve"
"(module-path->mpi/context"
"(if(syntax?$1 mod-path_9)(syntax->datum$1 mod-path_9) mod-path_9)"
" ctx_62)"
" #t)))"
"(let-values(((m_19)(namespace->module ns_74 mod-name_16)))"
"(begin"
"(if m_19(void)(let-values()(raise-unknown-module-error 'syntax-local-module-exports mod-name_16)))"
"(let-values(((ht_142)(module-provides m_19)))"
"(begin"
"(check-in-hash ht_142)"
"((letrec-values(((for-loop_237)"
"(lambda(i_177)"
"(if i_177"
"(let-values(((phase_127 syms_22)(hash-iterate-key+value ht_142 i_177)))"
"(let-values(((post-guard-var_76)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_69)"
"(let-values()"
"(let-values()"
"(cons"
" phase_127"
"(let-values(((ht_143) syms_22))"
"(begin"
"(check-in-hash-keys ht_143)"
"((letrec-values(((for-loop_238)"
"(lambda(i_178)"
"(if i_178"
"(let-values(((sym_71)"
"(hash-iterate-key"
" ht_143"
" i_178)))"
"(let-values(((post-guard-var_77)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_70)"
"(let-values()"
"(let-values()"
" sym_71))))"
"(let-values(((result_162)"
"(if(post-guard-var_77)"
"(for-loop_238"
"(hash-iterate-next"
" ht_143"
" i_178))"
" null)))"
"(cons"
" elem_70"
" result_162))))))"
" null))))"
" for-loop_238)"
"(hash-iterate-first ht_143)))))))))"
"(let-values(((result_163)"
"(if(post-guard-var_76)"
"(for-loop_237(hash-iterate-next ht_142 i_177))"
" null)))"
"(cons elem_69 result_163))))))"
" null))))"
" for-loop_237)"
"(hash-iterate-first ht_142))))))))))))"
"(define-values"
"(1/syntax-local-submodules)"
"(lambda()"
"(let-values(((ctx_63)"
"(let-values(((temp137_1) 'syntax-local-submodules))"
"(get-current-expand-context15.1 #f #f temp137_1 #t))))"
"(let-values(((submods_3)(expand-context-declared-submodule-names ctx_63)))"
"(let-values(((ht_144) submods_3))"
"(begin"
"(check-in-hash ht_144)"
"((letrec-values(((for-loop_239)"
"(lambda(i_179)"
"(if i_179"
"(let-values(((name_65 kind_8)(hash-iterate-key+value ht_144 i_179)))"
"(let-values(((post-guard-var_78)(lambda() #t)))"
"(let-values()"
"(if(eq? kind_8 'module)"
"(let-values()"
"(let-values(((elem_71)(let-values()(let-values() name_65))))"
"(let-values(((result_164)"
"(if(post-guard-var_78)"
"(for-loop_239(hash-iterate-next ht_144 i_179))"
" null)))"
"(cons elem_71 result_164))))"
"(if(post-guard-var_78)"
"(for-loop_239(hash-iterate-next ht_144 i_179))"
" null)))))"
" null))))"
" for-loop_239)"
"(hash-iterate-first ht_144))))))))"
"(define-values"
"(1/syntax-local-environment-ref)"
"(let-values(((syntax-local-environment-ref58_0)"
"(lambda(key57_0 default55_0 default56_0)"
"(let-values(((key_77) key57_0))"
"(let-values(((default_6)(if default56_0 default55_0 #f)))"
"(let-values()"
"(let-values(((ctx_64)"
"(let-values(((temp138_1) 'syntax-local-environment-ref))"
"(get-current-expand-context15.1 #f #f temp138_1 #t))))"
"(hash-ref(expand-context-user-env ctx_64) key_77 default_6))))))))"
"(case-lambda"
"((key_78)(syntax-local-environment-ref58_0 key_78 #f #f))"
"((key_79 default55_1)(syntax-local-environment-ref58_0 key_79 default55_1 #t)))))"
"(define-values"
"(1/syntax-local-get-shadower)"
"(let-values(((syntax-local-get-shadower63_0)"
"(lambda(id62_0 only-generated?60_0 only-generated?61_0)"
"(let-values(((id_82) id62_0))"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_82)"
"(void)"
"(let-values()"
"                                            (raise-argument-error 'syntax-local-get-shadower \"identifier?\" id_82)))"
"(values))))"
"(let-values(((ctx_65)"
"(let-values(((temp139_0) 'syntax-local-get-shadower))"
"(get-current-expand-context15.1 #f #f temp139_0 #t))))"
"(let-values(((new-id_0)(add-scopes id_82(expand-context-scopes ctx_65))))"
"(if(syntax-clean? id_82) new-id_0(syntax-taint$1 new-id_0)))))))))))"
"(case-lambda"
"((id_83)(syntax-local-get-shadower63_0 id_83 #f #f))"
"((id_84 only-generated?60_1)(syntax-local-get-shadower63_0 id_84 only-generated?60_1 #t)))))"
"(define-values"
"(syntax-source-accessor)"
"(lambda(who_0 srcloc-accessor_0)"
"(lambda(s_155)"
"(let-values((()"
"(begin"
"                      (if (syntax?$1 s_155) (void) (let-values () (raise-argument-error who_0 \"syntax?\" s_155)))"
"(values))))"
"(let-values(((srcloc_7)(syntax-srcloc s_155)))(if srcloc_7(srcloc-accessor_0 srcloc_7) #f))))))"
"(define-values(1/syntax-source)(syntax-source-accessor 'syntax-source srcloc-source))"
"(define-values(1/syntax-line)(syntax-source-accessor 'syntax-line srcloc-line))"
"(define-values(1/syntax-column)(syntax-source-accessor 'syntax-column srcloc-column))"
"(define-values(1/syntax-position)(syntax-source-accessor 'syntax-position srcloc-position))"
"(define-values(1/syntax-span)(syntax-source-accessor 'syntax-span srcloc-span))"
"(define-values"
"(encoded-srcloc?)"
"(lambda(v_73)"
"(let-values(((or-part_39)(if(list? v_73)(if(=(length v_73) 5)(srcloc-vector?(list->vector v_73)) #f) #f)))"
"(if or-part_39 or-part_39(if(vector? v_73)(if(=(vector-length v_73) 5)(srcloc-vector? v_73) #f) #f)))))"
"(define-values"
"(srcloc-vector?)"
"(lambda(v_75)"
"(if(let-values(((or-part_284)(not(vector-ref v_75 1))))"
"(if or-part_284 or-part_284(exact-positive-integer?(vector-ref v_75 1))))"
"(if(let-values(((or-part_25)(not(vector-ref v_75 2))))"
"(if or-part_25 or-part_25(exact-nonnegative-integer?(vector-ref v_75 2))))"
"(if(let-values(((or-part_8)(not(vector-ref v_75 3))))"
"(if or-part_8 or-part_8(exact-positive-integer?(vector-ref v_75 3))))"
"(let-values(((or-part_3)(not(vector-ref v_75 4))))"
"(if or-part_3 or-part_3(exact-nonnegative-integer?(vector-ref v_75 4))))"
" #f)"
" #f)"
" #f)))"
"(define-values"
"(to-srcloc-stx)"
"(lambda(v_200)"
"(if(srcloc? v_200)"
"(let-values()"
"(let-values(((the-struct_64) empty-syntax))"
"(if(syntax?$1 the-struct_64)"
"(let-values(((srcloc1_2) v_200))"
"(syntax1.1"
"(syntax-content the-struct_64)"
"(syntax-scopes the-struct_64)"
"(syntax-shifted-multi-scopes the-struct_64)"
"(syntax-scope-propagations+tamper the-struct_64)"
"(syntax-mpi-shifts the-struct_64)"
" srcloc1_2"
"(syntax-props the-struct_64)"
"(syntax-inspector the-struct_64)))"
"            (raise-argument-error 'struct-copy \"syntax?\" the-struct_64))))"
"(if(pair? v_200)"
"(let-values()(to-srcloc-stx(list->vector v_200)))"
"(if(vector? v_200)"
"(let-values()"
"(let-values(((the-struct_25) empty-syntax))"
"(if(syntax?$1 the-struct_25)"
"(let-values(((srcloc2_1)"
"(srcloc"
"(vector-ref v_200 0)"
"(vector-ref v_200 1)"
"(vector-ref v_200 2)"
"(vector-ref v_200 3)"
"(vector-ref v_200 4))))"
"(syntax1.1"
"(syntax-content the-struct_25)"
"(syntax-scopes the-struct_25)"
"(syntax-shifted-multi-scopes the-struct_25)"
"(syntax-scope-propagations+tamper the-struct_25)"
"(syntax-mpi-shifts the-struct_25)"
" srcloc2_1"
"(syntax-props the-struct_25)"
"(syntax-inspector the-struct_25)))"
"                (raise-argument-error 'struct-copy \"syntax?\" the-struct_25))))"
"(let-values() v_200))))))"
"(define-values"
"(1/syntax-e)"
"(lambda(s_0)"
"(begin"
"      (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'syntax-e \"syntax?\" s_0)))"
"(syntax-e$1 s_0))))"
"(define-values"
"(1/syntax->datum)"
"(lambda(s_10)"
"(begin"
"      (if (syntax?$1 s_10) (void) (let-values () (raise-argument-error 'syntax->datum \"syntax?\" s_10)))"
"(syntax->datum$1 s_10))))"
"(define-values(maybe-syntax->datum)(lambda(s_155)(if(syntax?$1 s_155)(syntax->datum$1 s_155) s_155)))"
"(define-values"
"(1/datum->syntax)"
"(let-values(((datum->syntax9_0)"
"(lambda(stx-c7_0 s8_0 stx-l1_0 stx-p2_0 ignored3_0 stx-l4_1 stx-p5_1 ignored6_0)"
"(let-values(((stx-c_4) stx-c7_0))"
"(let-values(((s_417) s8_0))"
"(let-values(((stx-l_2)(if stx-l4_1 stx-l1_0 #f)))"
"(let-values(((stx-p_1)(if stx-p5_1 stx-p2_0 #f)))"
"(let-values()"
"(let-values()"
"(begin"
"(if(let-values(((or-part_285)(not stx-c_4)))"
"(if or-part_285 or-part_285(syntax?$1 stx-c_4)))"
"(void)"
"                                  (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-c_4)))"
"(if(let-values(((or-part_12)(not stx-l_2)))"
"(if or-part_12"
" or-part_12"
"(let-values(((or-part_40)(syntax?$1 stx-l_2)))"
"(if or-part_40 or-part_40(encoded-srcloc? stx-l_2)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'datum->syntax"
"(string-append"
"                                      \"(or #f syntax?\\n\""
"                                      \"       (list/c any/c\\n\""
"                                      \"               (or/c exact-positive-integer? #f)\\n\""
"                                      \"               (or/c exact-nonnegative-integer? #f)\\n\""
"                                      \"               (or/c exact-positive-integer? #f)\\n\""
"                                      \"               (or/c exact-nonnegative-integer? #f))\\n\""
"                                      \"       (vector/c any/c\\n\""
"                                      \"                 (or/c exact-positive-integer? #f)\\n\""
"                                      \"                 (or/c exact-nonnegative-integer? #f)\\n\""
"                                      \"                 (or/c exact-positive-integer? #f)\\n\""
"                                      \"                 (or/c exact-nonnegative-integer? #f)))\")"
" stx-l_2)))"
"(if(let-values(((or-part_286)(not stx-p_1)))"
"(if or-part_286 or-part_286(syntax?$1 stx-p_1)))"
"(void)"
"                                  (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-p_1)))"
"(datum->syntax$1 stx-c_4 s_417(to-srcloc-stx stx-l_2) stx-p_1)))))))))))"
"(case-lambda"
"((stx-c_5 s_74)(datum->syntax9_0 stx-c_5 s_74 #f #f #f #f #f #f))"
"((stx-c_6 s_43 stx-l_3 stx-p_2 ignored3_1)(datum->syntax9_0 stx-c_6 s_43 stx-l_3 stx-p_2 ignored3_1 #t #t #t))"
"((stx-c_7 s_75 stx-l_4 stx-p2_1)(datum->syntax9_0 stx-c_7 s_75 stx-l_4 stx-p2_1 #f #t #t #f))"
"((stx-c_8 s_42 stx-l1_1)(datum->syntax9_0 stx-c_8 s_42 stx-l1_1 #f #f #t #f #f)))))"
"(define-values"
"(1/syntax->list)"
"(lambda(s_6)"
"(begin"
"      (if (syntax?$1 s_6) (void) (let-values () (raise-argument-error 'syntax->list \"syntax?\" s_6)))"
"(syntax->list$1 s_6))))"
"(define-values"
"(1/syntax-original?)"
"(lambda(s_418)"
"(begin"
"      (if (syntax?$1 s_418) (void) (let-values () (raise-argument-error 'syntax-original? \"syntax?\" s_418)))"
"(if(syntax-property$1 s_418 original-property-sym)(not(syntax-any-macro-scopes? s_418)) #f))))"
"(define-values"
"(1/bound-identifier=?)"
"(let-values(((bound-identifier=?15_0)"
"(lambda(a13_0 b14_0 phase11_2 phase12_0)"
"(let-values(((a_23) a13_0))"
"(let-values(((b_49) b14_0))"
"(let-values(((phase_128)(if phase12_0 phase11_2(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? a_23)"
"(void)"
"                              (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" a_23)))"
"(if(identifier? b_49)"
"(void)"
"                              (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" b_49)))"
"(if(phase? phase_128)"
"(void)"
"(let-values()(raise-argument-error 'bound-identifier=? phase?-string phase_128)))"
"(bound-identifier=?$1 a_23 b_49 phase_128)))))))))"
"(case-lambda"
"((a_53 b_81)(bound-identifier=?15_0 a_53 b_81 #f #f))"
"((a_54 b_82 phase11_3)(bound-identifier=?15_0 a_54 b_82 phase11_3 #t)))))"
"(define-values"
"(1/free-identifier=?)"
"(let-values(((free-identifier=?23_0)"
"(lambda(a21_0 b22_0 a-phase17_0 b-phase18_0 a-phase19_0 b-phase20_0)"
"(let-values(((a_55) a21_0))"
"(let-values(((b_83) b22_0))"
"(let-values(((a-phase_1)(if a-phase19_0 a-phase17_0(1/syntax-local-phase-level))))"
"(let-values(((b-phase_1)(if b-phase20_0 b-phase18_0 a-phase_1)))"
"(let-values()"
"(begin"
"(if(identifier? a_55)"
"(void)"
"                                (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" a_55)))"
"(if(identifier? b_83)"
"(void)"
"                                (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" b_83)))"
"(if(phase? a-phase_1)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string a-phase_1)))"
"(if(phase? b-phase_1)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string b-phase_1)))"
"(free-identifier=?$1 a_55 b_83 a-phase_1 b-phase_1))))))))))"
"(case-lambda"
"((a_56 b_84)(free-identifier=?23_0 a_56 b_84 #f #f #f #f))"
"((a_57 b_85 a-phase_2 b-phase18_1)(free-identifier=?23_0 a_57 b_85 a-phase_2 b-phase18_1 #t #t))"
"((a_58 b_86 a-phase17_1)(free-identifier=?23_0 a_58 b_86 a-phase17_1 #f #t #f)))))"
"(define-values"
"(1/free-transformer-identifier=?)"
"(lambda(a_59 b_87)"
"(let-values((()"
"(begin"
"(if(identifier? a_59)"
"(void)"
"                      (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" a_59)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_87)"
"(void)"
"                        (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" b_87)))"
"(values))))"
"(let-values(((phase_129)(add1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_59 b_87 phase_129 phase_129))))))"
"(define-values"
"(1/free-template-identifier=?)"
"(lambda(a_60 b_76)"
"(let-values((()"
"(begin"
"(if(identifier? a_60)"
"(void)"
"                      (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" a_60)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_76)"
"(void)"
"                        (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" b_76)))"
"(values))))"
"(let-values(((phase_130)(sub1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_60 b_76 phase_130 phase_130))))))"
"(define-values"
"(1/free-label-identifier=?)"
"(lambda(a_61 b_88)"
"(begin"
"      (if (identifier? a_61) (void) (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" a_61)))"
"      (if (identifier? b_88) (void) (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" b_88)))"
"(free-identifier=?$1 a_61 b_88 #f #f))))"
"(define-values"
"(1/identifier-binding)"
"(let-values(((identifier-binding30_0)"
"(lambda(id29_0 phase25_1 top-level-symbol?26_0 phase27_0 top-level-symbol?28_0)"
"(let-values(((id_85) id29_0))"
"(let-values(((phase_131)(if phase27_0 phase25_1(1/syntax-local-phase-level))))"
"(let-values(((top-level-symbol?_1)(if top-level-symbol?28_0 top-level-symbol?26_0 #f)))"
"(let-values()"
"(begin"
"(if(identifier? id_85)"
"(void)"
"                              (let-values () (raise-argument-error 'identifier-binding \"identifier?\" id_85)))"
"(if(phase? phase_131)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding phase?-string phase_131)))"
"(identifier-binding$1 id_85 phase_131 top-level-symbol?_1)))))))))"
"(case-lambda"
"((id_86)(identifier-binding30_0 id_86 #f #f #f #f))"
"((id_87 phase_132 top-level-symbol?26_1)(identifier-binding30_0 id_87 phase_132 top-level-symbol?26_1 #t #t))"
"((id_88 phase25_2)(identifier-binding30_0 id_88 phase25_2 #f #t #f)))))"
"(define-values"
"(1/identifier-transformer-binding)"
"(let-values(((identifier-transformer-binding35_0)"
"(lambda(id34_0 phase32_0 phase33_2)"
"(let-values(((id_89) id34_0))"
"(let-values(((phase_96)(if phase33_2 phase32_0(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_89)"
"(void)"
"                            (let-values () (raise-argument-error 'identifier-transformer-binding \"identifier?\" id_89)))"
"(identifier-binding$1 id_89(if phase_96(add1 phase_96) #f)))))))))"
"(case-lambda"
"((id_90)(identifier-transformer-binding35_0 id_90 #f #f))"
"((id_91 phase32_1)(identifier-transformer-binding35_0 id_91 phase32_1 #t)))))"
"(define-values"
"(1/identifier-template-binding)"
"(lambda(id_92)"
"(begin"
"(if(identifier? id_92)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-template-binding \"identifier?\" id_92)))"
"(identifier-binding$1 id_92(sub1(1/syntax-local-phase-level))))))"
"(define-values"
"(1/identifier-label-binding)"
"(lambda(id_54)"
"(begin"
"(if(identifier? id_54)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-label-binding \"identifier?\" id_54)))"
"(identifier-binding$1 id_54 #f))))"
"(define-values"
"(1/identifier-binding-symbol)"
"(let-values(((identifier-binding-symbol40_0)"
"(lambda(id39_0 phase37_2 phase38_0)"
"(let-values(((id_93) id39_0))"
"(let-values(((phase_133)(if phase38_0 phase37_2(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_93)"
"(void)"
"                            (let-values () (raise-argument-error 'identifier-binding-symbol \"identifier?\" id_93)))"
"(if(phase? phase_133)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding-symbol phase?-string phase_133)))"
"(identifier-binding-symbol$1 id_93 phase_133))))))))"
"(case-lambda"
"((id_74)(identifier-binding-symbol40_0 id_74 #f #f))"
"((id_94 phase37_3)(identifier-binding-symbol40_0 id_94 phase37_3 #t)))))"
"(define-values"
"(1/identifier-prune-lexical-context)"
"(let-values(((identifier-prune-lexical-context45_0)"
"(lambda(id44_0 syms42_0 syms43_0)"
"(let-values(((id_95) id44_0))"
"(let-values(((syms_20)(if syms43_0 syms42_0 null)))"
"(let-values()"
"(begin"
"(if(identifier? id_95)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'identifier-prune-lexical-context \"identifier?\" id_95)))"
"(if(if(list? syms_20)(andmap2 symbol? syms_20) #f)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'identifier-prune-lexical-context \"(listof symbol?)\" syms_20)))"
" id_95)))))))"
"(case-lambda"
"((id_67)(identifier-prune-lexical-context45_0 id_67 #f #f))"
"((id_96 syms42_1)(identifier-prune-lexical-context45_0 id_96 syms42_1 #t)))))"
"(define-values"
"(1/syntax-debug-info)"
"(let-values(((syntax-debug-info52_0)"
"(lambda(s51_1 phase47_2 all-bindings?48_0 phase49_0 all-bindings?50_0)"
"(let-values(((s_419) s51_1))"
"(let-values(((phase_12)(if phase49_0 phase47_2(1/syntax-local-phase-level))))"
"(let-values(((all-bindings?_1)(if all-bindings?50_0 all-bindings?48_0 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_419)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-debug-info \"syntax?\" s_419)))"
"(if(phase? phase_12)"
"(void)"
"(let-values()(raise-argument-error 'syntax-debug-info phase?-string phase_12)))"
"(syntax-debug-info$1 s_419 phase_12 all-bindings?_1)))))))))"
"(case-lambda"
"((s_195)(syntax-debug-info52_0 s_195 #f #f #f #f))"
"((s_28 phase_134 all-bindings?48_1)(syntax-debug-info52_0 s_28 phase_134 all-bindings?48_1 #t #t))"
"((s_31 phase47_3)(syntax-debug-info52_0 s_31 phase47_3 #f #t #f)))))"
"(define-values"
"(1/syntax-shift-phase-level)"
"(lambda(s_149 phase_20)"
"(begin"
"      (if (syntax?$1 s_149) (void) (let-values () (raise-argument-error 'syntax-shift-phase-level \"syntax?\" s_149)))"
"(if(phase? phase_20)"
"(void)"
"(let-values()(raise-argument-error 'syntax-shift-phase-level phase?-string phase_20)))"
"(syntax-shift-phase-level$1 s_149 phase_20))))"
"(define-values"
"(1/syntax-track-origin)"
"(lambda(new-stx_8 old-stx_4 id_97)"
"(let-values((()"
"(begin"
"(if(syntax?$1 new-stx_8)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" new-stx_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(syntax?$1 old-stx_4)"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" old-stx_4)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? id_97)"
"(void)"
"                          (let-values () (raise-argument-error 'syntax-track-origin \"identifier?\" id_97)))"
"(values))))"
"(let-values(((s_420)(syntax-track-origin$1 new-stx_8 old-stx_4 id_97)))"
"(let-values(((ctx_66)(let-values(((temp54_1) #t))(get-current-expand-context15.1 temp54_1 #t #f #f))))"
"(begin"
"(if ctx_66"
"(let-values()"
"(let-values(((obs_17)(expand-context-observer ctx_66)))"
"(if obs_17"
"(let-values()(let-values()(call-expand-observe obs_17 'track-origin s_420)))"
"(void))))"
"(void))"
" s_420))))))))"
"(define-values"
"(1/namespace-attach-module)"
"(let-values(((namespace-attach-module5_0)"
"(lambda(src-namespace3_0 mod-path4_0 dest-namespace1_0 dest-namespace2_0)"
"(let-values(((src-namespace_0) src-namespace3_0))"
"(let-values(((mod-path_10) mod-path4_0))"
"(let-values(((dest-namespace_0)(if dest-namespace2_0 dest-namespace1_0(1/current-namespace))))"
"(let-values()"
"(let-values(((temp22_4) 'namespace-attach-module)"
"((src-namespace23_0) src-namespace_0)"
"((mod-path24_0) mod-path_10)"
"((dest-namespace25_0) dest-namespace_0)"
"((temp26_1) #t))"
"(do-attach-module19.1"
" temp26_1"
" #t"
" temp22_4"
" src-namespace23_0"
" mod-path24_0"
" dest-namespace25_0)))))))))"
"(case-lambda"
"((src-namespace_1 mod-path_11)(namespace-attach-module5_0 src-namespace_1 mod-path_11 #f #f))"
"((src-namespace_2 mod-path_12 dest-namespace1_1)"
"(namespace-attach-module5_0 src-namespace_2 mod-path_12 dest-namespace1_1 #t)))))"
"(define-values"
"(1/namespace-attach-module-declaration)"
"(let-values(((namespace-attach-module-declaration11_0)"
"(lambda(src-namespace9_0 mod-path10_1 dest-namespace7_0 dest-namespace8_0)"
"(let-values(((src-namespace_3) src-namespace9_0))"
"(let-values(((mod-path_13) mod-path10_1))"
"(let-values(((dest-namespace_1)(if dest-namespace8_0 dest-namespace7_0(1/current-namespace))))"
"(let-values()"
"(let-values(((temp27_4) 'namespace-attach-module-declaration)"
"((src-namespace28_0) src-namespace_3)"
"((mod-path29_0) mod-path_13)"
"((dest-namespace30_0) dest-namespace_1)"
"((temp31_2) #f))"
"(do-attach-module19.1"
" temp31_2"
" #t"
" temp27_4"
" src-namespace28_0"
" mod-path29_0"
" dest-namespace30_0)))))))))"
"(case-lambda"
"((src-namespace_4 mod-path_14)(namespace-attach-module-declaration11_0 src-namespace_4 mod-path_14 #f #f))"
"((src-namespace_5 mod-path_15 dest-namespace7_1)"
"(namespace-attach-module-declaration11_0 src-namespace_5 mod-path_15 dest-namespace7_1 #t)))))"
"(define-values"
"(do-attach-module19.1)"
"(lambda(attach-instances?13_0 attach-instances?14_0 who15_0 src-namespace16_0 mod-path17_0 dest-namespace18_0)"
"(let-values(((who_19) who15_0))"
"(let-values(((src-namespace_6) src-namespace16_0))"
"(let-values(((mod-path_16) mod-path17_0))"
"(let-values(((dest-namespace_2) dest-namespace18_0))"
"(let-values(((attach-instances?_0)(if attach-instances?14_0 attach-instances?13_0 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? src-namespace_6)"
"(void)"
"                                  (let-values () (raise-argument-error who_19 \"namespace?\" src-namespace_6)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_96)(1/module-path? mod-path_16)))"
"(if or-part_96 or-part_96(1/resolved-module-path? mod-path_16)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_19"
"                                       \"(or/c module-path? resolved-module-path?)\""
" mod-path_16)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? dest-namespace_2)"
"(void)"
"                                      (let-values () (raise-argument-error who_19 \"namespace?\" dest-namespace_2)))"
"(values))))"
"(let-values(((phase_135)(namespace-phase src-namespace_6)))"
"(let-values((()"
"(begin"
"(if(eqv? phase_135(namespace-phase dest-namespace_2))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_19"
"                                             \"source and destination namespace phases do not match\""
"                                             \"source phase\""
" phase_135"
"                                             \"destination phase\""
"(namespace-phase dest-namespace_2))))"
"(values))))"
"(let-values(((todo_0)(make-hasheq)))"
"(let-values(((missing_0)(gensym 'missing)))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_129)"
"(lambda(mpi_43"
" phase_0"
" attach-instances?_1"
" attach-phase_0)"
"(let-values(((mod-name_17)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_6)"
"(let-values()"
"(1/module-path-index-resolve"
" mpi_43)))))"
"(let-values(((attach-this-instance?_0)"
"(if attach-instances?_1"
"(eqv? phase_0 attach-phase_0)"
" #f)))"
"(let-values(((m-ns_12)"
"(hash-ref"
"(hash-ref"
" todo_0"
" mod-name_17"
" '#hasheqv())"
" phase_0"
" missing_0)))"
"(if(let-values(((or-part_180)"
"(eq? missing_0 m-ns_12)))"
"(if or-part_180"
" or-part_180"
"(if attach-this-instance?_0"
"(not m-ns_12)"
" #f)))"
"(let-values()"
"(let-values(((m_20)"
"(namespace->module"
" src-namespace_6"
" mod-name_17)))"
"(begin"
"(if m_20"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_19"
"                                                                                     \"module not declared (in the source namespace)\""
"                                                                                     \"module name\""
" mod-name_17)))"
"(if(if(module-cross-phase-persistent?"
" m_20)"
"(if(not(label-phase? phase_0))"
"(not(zero-phase? phase_0))"
" #f)"
" #f)"
"(let-values()"
"(loop_129"
" mpi_43"
" 0"
" attach-instances?_1"
" 0))"
"(let-values()"
"(let-values(((already-m_0)"
"(namespace->module"
" dest-namespace_2"
" mod-name_17)))"
"(let-values((()"
"(begin"
"(if(if already-m_0"
"(not"
"(eq?"
" already-m_0"
" m_20))"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_19"
"                                                                                                           \"a different declaration is already in the destination namespace\""
"                                                                                                           \"module name\""
" mod-name_17))"
"(void))"
"(values))))"
"(let-values(((m-ns_13"
" already?_0)"
"(if attach-this-instance?_0"
"(let-values()"
"(let-values(((m-ns_14)"
"(let-values(((src-namespace32_0)"
" src-namespace_6)"
"((mod-name33_0)"
" mod-name_17)"
"((phase34_0)"
" phase_0))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace32_0"
" mod-name33_0"
" phase34_0))))"
"(let-values((()"
"(begin"
"(if m-ns_14"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_19"
"                                                                                                                                 \"module not instantiated (in the source namespace)\""
"                                                                                                                                 \"module name\""
" mod-name_17)))"
"(values))))"
"(let-values(((already-m-ns_0)"
"(if already-m_0"
"(let-values(((dest-namespace35_0)"
" dest-namespace_2)"
"((mod-name36_0)"
" mod-name_17)"
"((phase37_4)"
" phase_0))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" dest-namespace35_0"
" mod-name36_0"
" phase37_4))"
" #f)))"
"(begin"
"(if(if already-m-ns_0"
"(if(not"
"(eq?"
" m-ns_14"
" already-m-ns_0))"
"(not"
"(namespace-same-instance?"
" m-ns_14"
" already-m-ns_0))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_19"
"                                                                                                                       \"a different instance is already in the destination namespace\""
"                                                                                                                       \"module name\""
" mod-name_17))"
"(void))"
"(values"
" m-ns_14"
"(if already-m-ns_0"
" #t"
" #f)))))))"
"(let-values()"
"(begin"
"(if(if(label-phase?"
" phase_0)"
"(not"
"(let-values(((src-namespace38_0)"
" src-namespace_6)"
"((mod-name39_0)"
" mod-name_17)"
"((phase40_0)"
" phase_0))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace38_0"
" mod-name39_0"
" phase40_0)))"
" #f)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_6)"
"(let-values()"
"(let-values(((src-namespace41_0)"
" src-namespace_6)"
"((mpi42_0)"
" mpi_43)"
"((phase43_1)"
" phase_0))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace41_0"
" mpi42_0"
" phase43_1)))))"
"(void))"
"(values"
" #f"
"(if already-m_0"
" #t"
" #f)))))))"
"(begin"
"(hash-update!"
" todo_0"
" mod-name_17"
"(lambda(ht_145)"
"(hash-set"
" ht_145"
" phase_0"
" m-ns_13))"
" '#hasheqv())"
"(if already?_0"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_279)"
"(module-requires"
" m_20)))"
"(begin"
"(check-list"
" lst_279)"
"((letrec-values(((for-loop_240)"
"(lambda(lst_124)"
"(if(pair?"
" lst_124)"
"(let-values(((phase+reqs_1)"
"(unsafe-car"
" lst_124))"
"((rest_156)"
"(unsafe-cdr"
" lst_124)))"
"(let-values((()"
"(let-values(((lst_22)"
"(cdr"
" phase+reqs_1)))"
"(begin"
"(check-list"
" lst_22)"
"((letrec-values(((for-loop_223)"
"(lambda(lst_260)"
"(if(pair?"
" lst_260)"
"(let-values(((req_5)"
"(unsafe-car"
" lst_260))"
"((rest_141)"
"(unsafe-cdr"
" lst_260)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_129"
"(module-path-index-shift"
" req_5"
"(module-self"
" m_20)"
" mpi_43)"
"(phase+"
" phase_0"
"(car"
" phase+reqs_1))"
" attach-instances?_1"
" attach-phase_0))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_223"
" rest_141)"
"(values))))"
"(values)))))"
" for-loop_223)"
" lst_22)))))"
"(if(not"
" #f)"
"(for-loop_240"
" rest_156)"
"(values))))"
"(values)))))"
" for-loop_240)"
" lst_279)))"
"(void)"
"(let-values(((lst_280)"
"(module-submodule-names"
" m_20)))"
"(begin"
"(check-list"
" lst_280)"
"((letrec-values(((for-loop_18)"
"(lambda(lst_91)"
"(if(pair?"
" lst_91)"
"(let-values(((submod-name_0)"
"(unsafe-car"
" lst_91))"
"((rest_157)"
"(unsafe-cdr"
" lst_91)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_129"
"(1/module-path-index-join"
"(list"
" 'submod"
"                                                                                                                                                                     \".\""
" submod-name_0)"
" mpi_43)"
" #f"
" #f"
" attach-phase_0))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_18"
" rest_157)"
"(values))))"
"(values)))))"
" for-loop_18)"
" lst_280)))"
"(void)"
"(if(module-supermodule-name"
" m_20)"
"(let-values()"
"(loop_129"
"(1/module-path-index-join"
"                                                                                                        '(submod \"..\")"
" mpi_43)"
" #f"
" #f"
" attach-phase_0))"
"(void))))))))))))))"
"(void))))))))"
" loop_129)"
"(1/module-path-index-join"
"(if(1/resolved-module-path? mod-path_16)"
"(resolved-module-path->module-path mod-path_16)"
" mod-path_16)"
" #f)"
" phase_135"
" attach-instances?_0"
" phase_135)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ht_146) todo_0))"
"(begin"
"(check-in-hash ht_146)"
"((letrec-values(((for-loop_241)"
"(lambda(i_107)"
"(if i_107"
"(let-values(((mod-name_18 phases_0)"
"(hash-iterate-key+value"
" ht_146"
" i_107)))"
"(let-values((()"
"(let-values(((ht_147)"
" phases_0))"
"(begin"
"(check-in-hash ht_147)"
"((letrec-values(((for-loop_102)"
"(lambda(i_46)"
"(if i_46"
"(let-values(((phase_136"
" m-ns_15)"
"(hash-iterate-key+value"
" ht_147"
" i_46)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_21)"
"(namespace->module"
" src-namespace_6"
" mod-name_18)))"
"(begin"
"(let-values(((dest-namespace44_0)"
" dest-namespace_2)"
"((m45_0)"
" m_21)"
"((mod-name46_0)"
" mod-name_18))"
"(declare-module!56.1"
" #f"
" #f"
" dest-namespace44_0"
" m45_0"
" mod-name46_0))"
"(if m-ns_15"
"(let-values()"
"(begin"
"(namespace-record-module-instance-attached!"
" src-namespace_6"
" mod-name_18"
" phase_136)"
"(let-values(((or-part_287)"
"(let-values(((dest-namespace47_0)"
" dest-namespace_2)"
"((mod-name48_0)"
" mod-name_18)"
"((phase49_1)"
" phase_136))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" dest-namespace47_0"
" mod-name48_0"
" phase49_1))))"
"(if or-part_287"
" or-part_287"
"(namespace-install-module-namespace!"
" dest-namespace_2"
" mod-name_18"
" phase_136"
" m_21"
" m-ns_15)))))"
"(void)))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_102"
"(hash-iterate-next"
" ht_147"
" i_46))"
"(values))))"
"(values)))))"
" for-loop_102)"
"(hash-iterate-first"
" ht_147))))))"
"(if(not #f)"
"(for-loop_241"
"(hash-iterate-next ht_146 i_107))"
"(values))))"
"(values)))))"
" for-loop_241)"
"(hash-iterate-first ht_146))))"
"(values))))"
"(let-values()"
"(let-values(((mnr_0)(1/current-module-name-resolver)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" dest-namespace_2)"
"(let-values()"
"(begin"
"(let-values(((ht_148) todo_0))"
"(begin"
"(check-in-hash-keys ht_148)"
"((letrec-values(((for-loop_108)"
"(lambda(i_180)"
"(if i_180"
"(let-values(((mod-name_19)"
"(hash-iterate-key ht_148 i_180)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(mnr_0"
" mod-name_19"
" src-namespace_6))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_108"
"(hash-iterate-next ht_148 i_180))"
"(values))))"
"(values)))))"
" for-loop_108)"
"(hash-iterate-first ht_148))))"
"(void)))))))))))))))))))))))"
"(define-values"
"(1/make-empty-namespace)"
"(lambda()"
"(let-values(((current-ns_0)(1/current-namespace)))"
"(let-values(((phase_40)(namespace-phase current-ns_0)))"
"(let-values(((ns_56)(namespace->namespace-at-phase(make-namespace) phase_40)))"
"(begin"
"(1/namespace-attach-module current-ns_0 ''#%kernel ns_56)"
"(namespace-primitive-module-visit! ns_56 '#%kernel)"
" ns_56))))))"
"(define-values"
"(1/namespace-syntax-introduce)"
"(let-values(((namespace-syntax-introduce4_0)"
"(lambda(s3_2 ns1_2 ns2_0)"
"(let-values(((s_3) s3_2))"
"(let-values(((ns_57)(if ns2_0 ns1_2(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_3)"
"(void)"
"(let-values()"
"                                            (raise-argument-error 'namespace-syntax-introduce \"syntax?\" s_3)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_57)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'namespace-syntax-introduce \"namespace?\" ns_57)))"
"(values))))"
"(let-values(((root-ctx_5)(namespace-get-root-expand-ctx ns_57)))"
"(let-values(((post-scope_1)(root-expand-context-post-expansion-scope root-ctx_5)))"
"(let-values(((other-namespace-scopes_0)"
"(let-values(((ht_83)"
"(syntax-scope-set"
"(root-expand-context-all-scopes-stx root-ctx_5)"
"(namespace-phase ns_57))))"
"(begin"
"(check-in-immutable-hash-keys ht_83)"
"((letrec-values(((for-loop_224)"
"(lambda(i_181)"
"(if i_181"
"(let-values(((sc_28)"
"(unsafe-immutable-hash-iterate-key"
" ht_83"
" i_181)))"
"(let-values(((post-guard-var_79)"
"(lambda() #t)))"
"(let-values()"
"(if(equal? sc_28 post-scope_1)"
"(if(post-guard-var_79)"
"(for-loop_224"
"(unsafe-immutable-hash-iterate-next"
" ht_83"
" i_181))"
" null)"
"(let-values()"
"(let-values(((elem_72)"
"(let-values()"
"(let-values()"
" sc_28))))"
"(let-values(((result_165)"
"(if(post-guard-var_79)"
"(for-loop_224"
"(unsafe-immutable-hash-iterate-next"
" ht_83"
" i_181))"
" null)))"
"(cons elem_72 result_165))))))))"
" null))))"
" for-loop_224)"
"(unsafe-immutable-hash-iterate-first ht_83))))))"
"(let-values(((add-ns-scopes_0)"
"(lambda(s_421)"
"(let-values(((temp78_1)"
"(add-scopes"
"(push-scope s_421 post-scope_1)"
" other-namespace-scopes_0))"
"((temp79_1)"
"(root-expand-context-all-scopes-stx root-ctx_5))"
"((temp80_3)"
"(let-values(((or-part_261)"
"(namespace-declaration-inspector ns_57)))"
"(if or-part_261"
" or-part_261"
"(current-code-inspector))))"
"((temp81_3) #t))"
"(syntax-transfer-shifts39.1"
" temp81_3"
" #t"
" temp78_1"
" temp79_1"
" temp80_3"
" #t)))))"
"(let-values(((maybe-module-id_0)"
"(if(pair?(1/syntax-e s_3))"
"(if(identifier?(car(1/syntax-e s_3)))"
"(add-ns-scopes_0(car(1/syntax-e s_3)))"
" #f)"
" #f)))"
"(if(if maybe-module-id_0"
"(1/free-identifier=?"
" maybe-module-id_0"
"(1/namespace-module-identifier ns_57))"
" #f)"
"(let-values()"
"(1/datum->syntax s_3(cons maybe-module-id_0(cdr(1/syntax-e s_3))) s_3 s_3))"
"(let-values()(add-ns-scopes_0 s_3))))))))))))))))"
"(case-lambda"
"((s_146)(namespace-syntax-introduce4_0 s_146 #f #f))"
"((s_41 ns1_3)(namespace-syntax-introduce4_0 s_41 ns1_3 #t)))))"
"(define-values"
"(1/namespace-module-identifier)"
"(let-values(((namespace-module-identifier8_0)"
"(lambda(where6_0 where7_0)"
"(let-values(((where_0)(if where7_0 where6_0(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_89)(1/namespace? where_0)))"
"(if or-part_89 or-part_89(phase? where_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-module-identifier"
"                             (string-append \"(or/c namespace? \" phase?-string \")\")"
" where_0)))"
"(1/datum->syntax"
"(1/syntax-shift-phase-level"
" core-stx"
"(if(1/namespace? where_0)(namespace-phase where_0) where_0))"
" 'module)))))))"
"(case-lambda"
"(()(namespace-module-identifier8_0 #f #f))"
"((where6_1)(namespace-module-identifier8_0 where6_1 #t)))))"
"(define-values"
"(1/namespace-symbol->identifier)"
"(lambda(sym_72)"
"(begin"
"      (if (symbol? sym_72) (void) (let-values () (raise-argument-error 'namespace-symbol->identifier \"symbol?\" sym_72)))"
"(1/namespace-syntax-introduce(1/datum->syntax #f sym_72)))))"
"(define-values"
"(do-namespace-require23.1)"
"(lambda(copy-variable-as-constant?13_0"
" copy-variable-as-constant?18_0"
" copy-variable-phase-level12_0"
" copy-variable-phase-level17_0"
" run?10_0"
" run?15_0"
" skip-variable-phase-level14_0"
" skip-variable-phase-level19_0"
" visit?11_0"
" visit?16_0"
" who20_0"
" req21_0"
" ns22_1)"
"(let-values(((run?_3)(if run?15_0 run?10_0 #t)))"
"(let-values(((visit?_3)(if visit?16_0 visit?11_0 #f)))"
"(let-values(((who_20) who20_0))"
"(let-values(((req_6) req21_0))"
"(let-values(((ns_75) ns22_1))"
"(let-values(((copy-variable-phase-level_2)"
"(if copy-variable-phase-level17_0 copy-variable-phase-level12_0 #f)))"
"(let-values(((copy-variable-as-constant?_2)"
"(if copy-variable-as-constant?18_0 copy-variable-as-constant?13_0 #f)))"
"(let-values(((skip-variable-phase-level_2)"
"(if skip-variable-phase-level19_0 skip-variable-phase-level14_0 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_75)"
"(void)"
"                                        (let-values () (raise-argument-error who_20 \"namespace?\" ns_75)))"
"(values))))"
"(let-values(((ctx-stx_0)"
"(add-scopes"
" empty-syntax"
"(root-expand-context-module-scopes(namespace-get-root-expand-ctx ns_75)))))"
"(if(let-values(((or-part_179)(1/module-path-index? req_6)))"
"(if or-part_179 or-part_179(1/module-path? req_6)))"
"(let-values()"
"(let-values(((temp82_0)"
"(if(1/module-path-index? req_6) req_6(1/module-path-index-join req_6 #f)))"
"((temp83_0) #f)"
"((temp84_0) #f)"
"((ctx-stx85_0) ctx-stx_0)"
"((ns86_0) ns_75)"
"((run?87_0) run?_3)"
"((visit?88_0) visit?_3)"
"((temp89_2)(namespace-phase ns_75))"
"((temp90_1)(namespace-phase ns_75))"
"((copy-variable-phase-level91_0) copy-variable-phase-level_2)"
"((copy-variable-as-constant?92_0) copy-variable-as-constant?_2)"
"((skip-variable-phase-level93_0) skip-variable-phase-level_2)"
"((who94_0) who_20))"
"(perform-require!74.1"
" #f"
" #f"
" #f"
" #f"
" copy-variable-as-constant?92_0"
" #t"
" copy-variable-phase-level91_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp89_2"
" #f"
" #f"
" temp90_1"
" run?87_0"
" #t"
" skip-variable-phase-level93_0"
" #t"
" visit?88_0"
" #t"
" who94_0"
" temp82_0"
" temp83_0"
" temp84_0"
" ctx-stx85_0"
" ns86_0)))"
"(let-values()"
"(let-values(((run?95_0) run?_3)"
"((visit?96_0) visit?_3)"
"((temp97_2)(list(1/datum->syntax ctx-stx_0 req_6)))"
"((temp98_2) #f)"
"((ns99_1) ns_75)"
"((temp100_0)(namespace-phase ns_75))"
"((temp101_0)(make-requires+provides #f))"
"((skip-variable-phase-level102_0) skip-variable-phase-level_2)"
"((who103_0) who_20))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" run?95_0"
" #t"
" #f"
" #f"
" skip-variable-phase-level102_0"
" #t"
" visit?96_0"
" #t"
" who103_0"
" temp97_2"
" temp98_2"
" ns99_1"
" temp100_0"
" temp101_0)))))))))))))))))"
"(define-values"
"(1/namespace-require)"
"(let-values(((namespace-require29_0)"
"(lambda(req28_0 ns26_0 ns27_0)"
"(let-values(((req_7) req28_0))"
"(let-values(((ns_76)(if ns27_0 ns26_0(1/current-namespace))))"
"(let-values()"
"(let-values(((temp104_0) 'namespace-require)((req105_0) req_7)((ns106_0) ns_76))"
"(do-namespace-require23.1 #f #f #f #f #f #f #f #f #f #f temp104_0 req105_0 ns106_0))))))))"
"(case-lambda"
"((req_8)(namespace-require29_0 req_8 #f #f))"
"((req_9 ns26_1)(namespace-require29_0 req_9 ns26_1 #t)))))"
"(define-values"
"(1/namespace-require/expansion-time)"
"(let-values(((namespace-require/expansion-time34_0)"
"(lambda(req33_0 ns31_0 ns32_0)"
"(let-values(((req_10) req33_0))"
"(let-values(((ns_77)(if ns32_0 ns31_0(1/current-namespace))))"
"(let-values()"
"(let-values(((temp107_0) #f)"
"((temp108_1) #t)"
"((temp109_1) 'namespace-require/expansion-time)"
"((req110_0) req_10)"
"((ns111_0) ns_77))"
"(do-namespace-require23.1"
" #f"
" #f"
" #f"
" #f"
" temp107_0"
" #t"
" #f"
" #f"
" temp108_1"
" #t"
" temp109_1"
" req110_0"
" ns111_0))))))))"
"(case-lambda"
"((req_11)(namespace-require/expansion-time34_0 req_11 #f #f))"
"((req_12 ns31_1)(namespace-require/expansion-time34_0 req_12 ns31_1 #t)))))"
"(define-values"
"(1/namespace-require/constant)"
"(let-values(((namespace-require/constant39_0)"
"(lambda(req38_0 ns36_0 ns37_0)"
"(let-values(((req_13) req38_0))"
"(let-values(((ns_78)(if ns37_0 ns36_0(1/current-namespace))))"
"(let-values()"
"(let-values(((temp112_3) 'namespace-require/constant)"
"((req113_0) req_13)"
"((ns114_0) ns_78)"
"((temp115_2) 0)"
"((temp116_0) #t))"
"(do-namespace-require23.1"
" temp116_0"
" #t"
" temp115_2"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp112_3"
" req113_0"
" ns114_0))))))))"
"(case-lambda"
"((req_14)(namespace-require/constant39_0 req_14 #f #f))"
"((req_15 ns36_1)(namespace-require/constant39_0 req_15 ns36_1 #t)))))"
"(define-values"
"(1/namespace-require/copy)"
"(let-values(((namespace-require/copy44_0)"
"(lambda(req43_0 ns41_0 ns42_0)"
"(let-values(((req_16) req43_0))"
"(let-values(((ns_79)(if ns42_0 ns41_0(1/current-namespace))))"
"(let-values()"
"(let-values(((temp117_1) 'namespace-require/copy)"
"((req118_0) req_16)"
"((ns119_0) ns_79)"
"((temp120_3) 0)"
"((temp121_1) 0))"
"(do-namespace-require23.1"
" #f"
" #f"
" temp120_3"
" #t"
" #f"
" #f"
" temp121_1"
" #t"
" #f"
" #f"
" temp117_1"
" req118_0"
" ns119_0))))))))"
"(case-lambda"
"((req_17)(namespace-require/copy44_0 req_17 #f #f))"
"((req_18 ns41_1)(namespace-require/copy44_0 req_18 ns41_1 #t)))))"
"(define-values"
"(1/namespace-variable-value)"
"(let-values(((namespace-variable-value53_0)"
"(lambda(sym52_0 use-mapping?46_0 failure-thunk47_0 ns48_0 use-mapping?49_0 failure-thunk50_0 ns51_0)"
"(let-values(((sym_73) sym52_0))"
"(let-values(((use-mapping?_0)(if use-mapping?49_0 use-mapping?46_0 #f)))"
"(let-values(((failure-thunk_5)(if failure-thunk50_0 failure-thunk47_0 #f)))"
"(let-values(((ns_80)(if ns51_0 ns48_0(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_73)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_73)))"
"(if(let-values(((or-part_288)(not failure-thunk_5)))"
"(if or-part_288"
" or-part_288"
"(if(procedure? failure-thunk_5)"
"(procedure-arity-includes? failure-thunk_5 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-variable-value"
"                                   \"(or/c #f (procedure-arity-includes/c 0))\""
" failure-thunk_5)))"
"(if(1/namespace? ns_80)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_80)))"
"((call/ec"
"(lambda(escape_0)"
"(let-values(((var-ns_0 var-phase-level_0 var-sym_6)"
"(if use-mapping?_0"
"(let-values()"
"(let-values(((id_98)(1/datum->syntax #f sym_73)))"
"(let-values(((b_89)"
"(resolve+shift/extra-inspector"
"(1/namespace-syntax-introduce id_98 ns_80)"
"(namespace-phase ns_80)"
" ns_80)))"
"(let-values((()"
"(begin"
"(if b_89"
"(let-values()"
"(namespace-visit-available-modules! ns_80))"
"(void))"
"(values))))"
"(let-values(((v_201 primitive?_8 extra-inspector_7)"
"(if b_89"
"(let-values(((b122_0) b_89)"
"((empty-env123_0) empty-env)"
"((null124_0) null)"
"((ns125_0) ns_80)"
"((temp126_1)"
"(namespace-phase ns_80))"
"((id127_0) id_98))"
"(binding-lookup48.1"
" #f"
" #f"
" #f"
" #f"
" b122_0"
" empty-env123_0"
" null124_0"
" ns125_0"
" temp126_1"
" id127_0))"
"(values variable #f #f))))"
"(begin"
"(if(variable? v_201)"
"(void)"
"(let-values()"
"(escape_0"
"(let-values(((or-part_264) failure-thunk_5))"
"(if or-part_264"
" or-part_264"
"(lambda()"
"(raise"
"(make-exn:fail:syntax$1"
"(format"
"(string-append"
"                                                                             \"namespace-variable-value: bound to syntax\\n\""
"                                                                             \"  in: ~s\")"
" sym_73)"
"(current-continuation-marks)"
" null))))))))"
"(if(module-binding? b_89)"
"(values"
"(if(top-level-module-path-index?"
"(module-binding-module b_89))"
" ns_80"
"(let-values(((temp129_0)"
"(module-binding-module b_89))"
"((temp130_1)"
"(phase-"
"(namespace-phase ns_80)"
"(module-binding-phase b_89)))"
"((temp131_1) #t))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" temp131_1"
" #t"
" #f"
" #f"
" ns_80"
" temp129_0"
" temp130_1)))"
"(module-binding-phase b_89)"
"(module-binding-sym b_89))"
"(values ns_80(namespace-phase ns_80) sym_73))))))))"
"(let-values()(values ns_80(namespace-phase ns_80) sym_73)))))"
"(let-values(((val_23)"
"(namespace-get-variable"
" var-ns_0"
" var-phase-level_0"
" var-sym_6"
"(lambda()"
"(escape_0"
"(let-values(((or-part_289) failure-thunk_5))"
"(if or-part_289"
" or-part_289"
"(raise"
"(exn:fail:contract:variable"
"(format"
"(string-append"
"                                                              \"namespace-variable-value: given name is not defined\\n\""
"                                                              \"  name: ~s\")"
" sym_73)"
"(current-continuation-marks)"
" sym_73)))))))))"
"(lambda() val_23)))))))))))))))"
"(case-lambda"
"((sym_74)(namespace-variable-value53_0 sym_74 #f #f #f #f #f #f))"
"((sym_75 use-mapping?_1 failure-thunk_6 ns48_1)"
"(namespace-variable-value53_0 sym_75 use-mapping?_1 failure-thunk_6 ns48_1 #t #t #t))"
"((sym_76 use-mapping?_2 failure-thunk47_1)"
"(namespace-variable-value53_0 sym_76 use-mapping?_2 failure-thunk47_1 #f #t #t #f))"
"((sym_77 use-mapping?46_1)(namespace-variable-value53_0 sym_77 use-mapping?46_1 #f #f #t #f #f)))))"
"(define-values"
"(1/namespace-set-variable-value!)"
"(let-values(((namespace-set-variable-value!63_0)"
"(lambda(sym61_0 val62_0 map?55_0 ns56_0 as-constant?57_0 map?58_0 ns59_0 as-constant?60_0)"
"(let-values(((sym_78) sym61_0))"
"(let-values(((val_62) val62_0))"
"(let-values(((map?_0)(if map?58_0 map?55_0 #f)))"
"(let-values(((ns_81)(if ns59_0 ns56_0(1/current-namespace))))"
"(let-values(((as-constant?_2)(if as-constant?60_0 as-constant?57_0 #f)))"
"(let-values()"
"(begin"
"(if(symbol? sym_78)"
"(void)"
"                                  (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_78)))"
"(if(1/namespace? ns_81)"
"(void)"
"                                  (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_81)))"
"(namespace-set-variable! ns_81(namespace-phase ns_81) sym_78 val_62 as-constant?_2)"
"(if map?_0"
"(let-values()"
"(let-values((()"
"(begin"
"(namespace-unset-transformer! ns_81(namespace-phase ns_81) sym_78)"
"(values))))"
"(let-values(((id_99)(1/datum->syntax #f sym_78)))"
"(let-values(((temp132_2)(1/namespace-syntax-introduce id_99 ns_81))"
"((temp133_1)"
"(let-values(((temp135_2)(namespace-mpi ns_81))"
"((temp136_2)(namespace-phase ns_81))"
"((sym137_0) sym_78))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp135_2"
" temp136_2"
" sym137_0)))"
"((temp134_1)(namespace-phase ns_81)))"
"(add-binding!17.1 #f #f #f #f temp132_2 temp133_1 temp134_1)))))"
"(void))))))))))))"
"(case-lambda"
"((sym_79 val_63)(namespace-set-variable-value!63_0 sym_79 val_63 #f #f #f #f #f #f))"
"((sym_80 val_64 map?_1 ns_82 as-constant?57_1)"
"(namespace-set-variable-value!63_0 sym_80 val_64 map?_1 ns_82 as-constant?57_1 #t #t #t))"
"((sym_81 val_65 map?_2 ns56_1)(namespace-set-variable-value!63_0 sym_81 val_65 map?_2 ns56_1 #f #t #t #f))"
"((sym_82 val_66 map?55_1)(namespace-set-variable-value!63_0 sym_82 val_66 map?55_1 #f #f #t #f #f)))))"
"(define-values"
"(1/namespace-undefine-variable!)"
"(let-values(((namespace-undefine-variable!68_0)"
"(lambda(sym67_0 ns65_1 ns66_0)"
"(let-values(((sym_83) sym67_0))"
"(let-values(((ns_83)(if ns66_0 ns65_1(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_83)"
"(void)"
"                            (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_83)))"
"(if(1/namespace? ns_83)"
"(void)"
"                            (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_83)))"
"(namespace-unset-variable! ns_83(namespace-phase ns_83) sym_83))))))))"
"(case-lambda"
"((sym_84)(namespace-undefine-variable!68_0 sym_84 #f #f))"
"((sym_85 ns65_2)(namespace-undefine-variable!68_0 sym_85 ns65_2 #t)))))"
"(define-values"
"(1/namespace-mapped-symbols)"
"(let-values(((namespace-mapped-symbols72_0)"
"(lambda(ns70_0 ns71_0)"
"(let-values(((ns_84)(if ns71_0 ns70_0(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_84)"
"(void)"
"                          (let-values () (raise-argument-error 'namespace-mapped-symbols \"namespace?\" ns_84)))"
"(set->list"
"(set-union"
"(syntax-mapped-names"
"(root-expand-context-all-scopes-stx(namespace-get-root-expand-ctx ns_84))"
"(namespace-phase ns_84))"
"(list->set(1/instance-variable-names(namespace->instance ns_84 0)))))))))))"
"(case-lambda(()(namespace-mapped-symbols72_0 #f #f))((ns70_1)(namespace-mapped-symbols72_0 ns70_1 #t)))))"
"(define-values"
"(1/namespace-base-phase)"
"(let-values(((namespace-base-phase76_0)"
"(lambda(ns74_0 ns75_0)"
"(let-values(((ns_85)(if ns75_0 ns74_0(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_85)"
"(void)"
"                          (let-values () (raise-argument-error 'namespace-base-phase \"namespace?\" ns_85)))"
"(namespace-phase ns_85)))))))"
"(case-lambda(()(namespace-base-phase76_0 #f #f))((ns74_1)(namespace-base-phase76_0 ns74_1 #t)))))"
"(define-values"
"(1/eval)"
"(let-values(((eval6_0)"
"(lambda(s5_0 ns1_4 compile2_0 ns3_0 compile4_0)"
"(let-values(((s_145) s5_0))"
"(let-values(((ns_41)(if ns3_0 ns1_4(1/current-namespace))))"
"(let-values(((compile_1)"
"(if compile4_0 compile2_0(lambda(s_402 ns_66)(1/compile s_402 ns_66 #f)))))"
"(let-values()"
"(if(let-values(((or-part_290)(compiled-in-memory? s_145)))"
"(if or-part_290"
" or-part_290"
"(let-values(((or-part_291)(1/linklet-directory? s_145)))"
"(if or-part_291 or-part_291(1/linklet-bundle? s_145)))))"
"(let-values()(eval-compiled s_145 ns_41))"
"(if(if(syntax?$1 s_145)"
"(let-values(((or-part_13)(compiled-in-memory?(1/syntax-e s_145))))"
"(if or-part_13"
" or-part_13"
"(let-values(((or-part_292)(1/linklet-directory?(1/syntax-e s_145))))"
"(if or-part_292 or-part_292(1/linklet-bundle?(1/syntax-e s_145))))))"
" #f)"
"(let-values()(eval-compiled(1/syntax->datum s_145) ns_41))"
"(let-values()"
"(let-values(((temp78_2)"
"(lambda(s_422 ns_86 tail?_17)"
"(eval-compiled(compile_1 s_422 ns_86) ns_86 tail?_17))))"
"(per-top-level64.1 #f #f #f #f #f #f temp78_2 #f #f s_145 ns_41))))))))))))"
"(case-lambda"
"((s_75)(eval6_0 s_75 #f #f #f #f))"
"((s_176 ns_87 compile2_1)(eval6_0 s_176 ns_87 compile2_1 #t #t))"
"((s_42 ns1_5)(eval6_0 s_42 ns1_5 #f #t #f)))))"
"(define-values"
"(eval-compiled)"
"(let-values(((eval-compiled12_0)"
"(lambda(c10_0 ns11_0 as-tail?8_0 as-tail?9_0)"
"(let-values(((c_53) c10_0))"
"(let-values(((ns_88) ns11_0))"
"(let-values(((as-tail?_3)(if as-tail?9_0 as-tail?8_0 #t)))"
"(let-values()"
"(if(1/compiled-module-expression? c_53)"
"(let-values()(let-values(((ns80_0) ns_88))(eval-module8.1 ns80_0 #t #f #f #f #f c_53)))"
"(let-values()(eval-top c_53 ns_88 eval-compiled as-tail?_3))))))))))"
"(case-lambda"
"((c_40 ns_70)(eval-compiled12_0 c_40 ns_70 #f #f))"
"((c_41 ns_89 as-tail?8_1)(eval-compiled12_0 c_41 ns_89 as-tail?8_1 #t)))))"
"(define-values"
"(1/compile)"
"(let-values(((compile23_0)"
"(lambda(s22_1"
" ns14_2"
" serializable?15_0"
" expand16_0"
" to-source?17_0"
" ns18_0"
" serializable?19_0"
" expand20_0"
" to-source?21_0)"
"(let-values(((s_423) s22_1))"
"(let-values(((ns_90)(if ns18_0 ns14_2(1/current-namespace))))"
"(let-values(((serializable?_3)(if serializable?19_0 serializable?15_0 #t)))"
"(let-values(((expand_0)(if expand20_0 expand16_0 expand$1)))"
"(let-values(((to-source?_5)(if to-source?21_0 to-source?17_0 #f)))"
"(let-values()"
"(let-values(((cs_0)"
"(if(1/compiled-expression? s_423)"
"(let-values()(list s_423))"
"(if(if(syntax?$1 s_423)(1/compiled-expression?(1/syntax-e s_423)) #f)"
"(let-values()(list(1/syntax-e s_423)))"
"(let-values()"
"(let-values(((temp83_1)"
"(lambda(s_403 ns_91 as-tail?_4)"
"(list"
"(compile-single$1"
" s_403"
" ns_91"
" expand_0"
" serializable?_3"
" to-source?_5))))"
"((append84_0) append))"
"(per-top-level64.1"
" append84_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp83_1"
" #f"
" #f"
" s_423"
" ns_90)))))))"
"(if(if(= 1(length cs_0))(not(compiled-multiple-top?(car cs_0))) #f)"
"(car cs_0)"
"(let-values(((to-source?86_0) to-source?_5)"
"((serializable?87_0) serializable?_3)"
"((ns88_0) ns_90))"
"(compiled-tops->compiled-top8.1"
" serializable?87_0"
" #t"
" ns88_0"
" #t"
" to-source?86_0"
" #t"
" cs_0)))))))))))))"
"(case-lambda"
"((s_13)(compile23_0 s_13 #f #f #f #f #f #f #f #f))"
"((s_424 ns_58 serializable?_4 expand_1 to-source?17_1)"
"(compile23_0 s_424 ns_58 serializable?_4 expand_1 to-source?17_1 #t #t #t #t))"
"((s_15 ns_92 serializable?_5 expand16_1)(compile23_0 s_15 ns_92 serializable?_5 expand16_1 #f #t #t #t #f))"
"((s_16 ns_93 serializable?15_1)(compile23_0 s_16 ns_93 serializable?15_1 #f #f #t #t #f #f))"
"((s_425 ns14_3)(compile23_0 s_425 ns14_3 #f #f #f #t #f #f #f)))))"
"(define-values"
"(compile-to-linklets)"
"(let-values(((compile-to-linklets28_0)"
"(lambda(s27_1 ns25_0 ns26_2)"
"(let-values(((s_22) s27_1))"
"(let-values(((ns_59)(if ns26_2 ns25_0(1/current-namespace))))"
"(let-values()(1/compile s_22 ns_59 #t expand$1 #t)))))))"
"(case-lambda"
"((s_23)(compile-to-linklets28_0 s_23 #f #f))"
"((s_24 ns25_1)(compile-to-linklets28_0 s_24 ns25_1 #t)))))"
"(define-values"
"(struct:lifted-parsed-begin"
" lifted-parsed-begin30.1"
" lifted-parsed-begin?"
" lifted-parsed-begin-seq"
" lifted-parsed-begin-last)"
"(let-values(((struct:_11 make-_11 ?_11 -ref_11 -set!_11)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'lifted-parsed-begin"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'lifted-parsed-begin)))))"
"(values"
" struct:_11"
" make-_11"
" ?_11"
"(make-struct-field-accessor -ref_11 0 'seq)"
"(make-struct-field-accessor -ref_11 1 'last))))"
"(define-values"
"(compile-single$1)"
"(lambda(s_81 ns_94 expand_2 serializable?_6 to-source?_6)"
"(let-values(((exp-s_3)(expand_2 s_81 ns_94 #f #t serializable?_6)))"
"((letrec-values(((loop_148)"
"(lambda(exp-s_4)"
"(if(parsed-module? exp-s_4)"
"(let-values()"
"(let-values(((temp91_0)"
"(let-values(((ns94_0) ns_94))"
"(make-compile-context14.1 #f #f #f #f #f #f ns94_0 #t #f #f #f #f)))"
"((serializable?92_0) serializable?_6)"
"((to-source?93_0) to-source?_6))"
"(compile-module13.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" serializable?92_0"
" #t"
" to-source?93_0"
" #t"
" exp-s_4"
" temp91_0)))"
"(if(lifted-parsed-begin? exp-s_4)"
"(let-values()"
"(let-values(((temp95_2)"
"(let-values(((lst_281)"
"(append"
"(lifted-parsed-begin-seq exp-s_4)"
"(list(lifted-parsed-begin-last exp-s_4)))))"
"(begin"
"(check-list lst_281)"
"((letrec-values(((for-loop_242)"
"(lambda(lst_282)"
"(if(pair? lst_282)"
"(let-values(((e_75)(unsafe-car lst_282))"
"((rest_158)(unsafe-cdr lst_282)))"
"(let-values(((post-guard-var_80)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_73)"
"(let-values()"
"(let-values()"
"(loop_148 e_75)))))"
"(let-values(((result_166)"
"(if(post-guard-var_80)"
"(for-loop_242 rest_158)"
" null)))"
"(cons elem_73 result_166))))))"
" null))))"
" for-loop_242)"
" lst_281))))"
"((to-source?96_0) to-source?_6))"
"(compiled-tops->compiled-top8.1 #f #f #f #f to-source?96_0 #t temp95_2)))"
"(let-values()"
"(let-values(((temp98_3)"
"(let-values(((ns101_0) ns_94))"
"(make-compile-context14.1 #f #f #f #f #f #f ns101_0 #t #f #f #f #f)))"
"((serializable?99_0) serializable?_6)"
"((to-source?100_0) to-source?_6))"
"(compile-top9.1 serializable?99_0 #t #f #f to-source?100_0 #t exp-s_4 temp98_3))))))))"
" loop_148)"
" exp-s_3))))"
"(define-values"
"(expand$1)"
"(let-values(((expand40_0)"
"(lambda(s39_0"
" ns31_2"
" log-expand?32_0"
" to-parsed?33_0"
" serializable?34_0"
" ns35_0"
" log-expand?36_0"
" to-parsed?37_0"
" serializable?38_0)"
"(let-values(((s_426) s39_0))"
"(let-values(((ns_50)(if ns35_0 ns31_2(1/current-namespace))))"
"(let-values(((log-expand?_0)(if log-expand?36_0 log-expand?32_0 #f)))"
"(let-values(((to-parsed?_2)(if to-parsed?37_0 to-parsed?33_0 #f)))"
"(let-values(((serializable?_7)(if serializable?38_0 serializable?34_0 #f)))"
"(let-values()"
"(begin"
"(if log-expand?_0(let-values()(log-expand-start))(void))"
"(let-values(((temp104_1)"
"(lambda(s_72 ns_95 as-tail?_5)"
"(expand-single s_72 ns_95 to-parsed?_2 serializable?_7)))"
"((cons105_0) cons)"
"((re-pair106_0) re-pair))"
"(per-top-level64.1"
" cons105_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp104_1"
" re-pair106_0"
" #t"
" s_426"
" ns_50))))))))))))"
"(case-lambda"
"((s_200)(expand40_0 s_200 #f #f #f #f #f #f #f #f))"
"((s_201 ns_79 log-expand?_1 to-parsed?_3 serializable?34_1)"
"(expand40_0 s_201 ns_79 log-expand?_1 to-parsed?_3 serializable?34_1 #t #t #t #t))"
"((s_427 ns_96 log-expand?_2 to-parsed?33_1)(expand40_0 s_427 ns_96 log-expand?_2 to-parsed?33_1 #f #t #t #t #f))"
"((s_428 ns_97 log-expand?32_1)(expand40_0 s_428 ns_97 log-expand?32_1 #f #f #t #t #f #f))"
"((s_34 ns31_3)(expand40_0 s_34 ns31_3 #f #f #f #t #f #f #f)))))"
"(define-values"
"(expand-single)"
"(lambda(s_204 ns_98 to-parsed?_4 serializable?_8)"
"(let-values(((rebuild-s_2)(keep-properties-only s_204)))"
"(let-values(((require-lifts_3 lifts_9 exp-s_5)"
"(expand-capturing-lifts"
" s_204"
"(let-values(((to-parsed?108_0) to-parsed?_4)((serializable?109_0) serializable?_8))"
"(make-expand-context8.1 serializable?109_0 #t to-parsed?108_0 #t ns_98)))))"
"(if(if(null? require-lifts_3)(null? lifts_9) #f)"
"(let-values() exp-s_5)"
"(if to-parsed?_4"
"(let-values()"
"(let-values(((temp114_2)(lambda(form_0)(expand-single form_0 ns_98 to-parsed?_4 serializable?_8))))"
"(wrap-lifts-as-lifted-parsed-begin73.1 temp114_2 require-lifts_3 lifts_9 exp-s_5 rebuild-s_2)))"
"(let-values()"
"(let-values(((temp115_3)(append require-lifts_3 lifts_9))"
"((temp116_1)(lambda(form_1)(expand-single form_1 ns_98 to-parsed?_4 serializable?_8)))"
"((exp-s117_0) exp-s_5)"
"((temp118_1)(namespace-phase ns_98)))"
"(wrap-lifts-as-begin14.1 temp116_1 #t temp115_3 exp-s117_0 temp118_1)))))))))"
"(define-values"
"(expand-once$1)"
"(let-values(((expand-once45_0)"
"(lambda(s44_1 ns42_1 ns43_0)"
"(let-values(((s_429) s44_1))"
"(let-values(((ns_99)(if ns43_0 ns42_1(1/current-namespace))))"
"(let-values()"
"(let-values(((temp121_2)(lambda(s_430 ns_12 as-tail?_6)(expand-single-once s_430 ns_12)))"
"((cons122_0) cons)"
"((re-pair123_0) re-pair)"
"((temp124_0) #t))"
"(per-top-level64.1"
" cons122_0"
" #t"
" temp124_0"
" #t"
" #f"
" #f"
" temp121_2"
" re-pair123_0"
" #t"
" s_429"
" ns_99))))))))"
"(case-lambda((s_383)(expand-once45_0 s_383 #f #f))((s_431 ns42_2)(expand-once45_0 s_431 ns42_2 #t)))))"
"(define-values"
"(expand-single-once)"
"(lambda(s_57 ns_100)"
"(let-values(((require-lifts_4 lifts_10 exp-s_6)"
"(expand-capturing-lifts"
" s_57"
"(let-values(((v_106)"
"(let-values(((ns125_1) ns_100))(make-expand-context8.1 #f #f #f #f ns125_1))))"
"(let-values(((the-struct_65) v_106))"
"(if(expand-context/outer? the-struct_65)"
"(let-values(((inner126_0)"
"(let-values(((the-struct_66)(root-expand-context/outer-inner v_106)))"
"(if(expand-context/inner? the-struct_66)"
"(let-values(((just-once?127_0) #t))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes the-struct_66)"
"(root-expand-context/inner-top-level-bind-scope the-struct_66)"
"(root-expand-context/inner-all-scopes-stx the-struct_66)"
"(root-expand-context/inner-defined-syms the-struct_66)"
"(root-expand-context/inner-counter the-struct_66)"
"(root-expand-context/inner-lift-key the-struct_66)"
"(expand-context/inner-to-parsed? the-struct_66)"
"(expand-context/inner-phase the-struct_66)"
"(expand-context/inner-namespace the-struct_66)"
"(expand-context/inner-user-env the-struct_66)"
" just-once?127_0"
"(expand-context/inner-module-begin-k the-struct_66)"
"(expand-context/inner-allow-unbound? the-struct_66)"
"(expand-context/inner-in-local-expand? the-struct_66)"
"(expand-context/inner-stops the-struct_66)"
"(expand-context/inner-declared-submodule-names the-struct_66)"
"(expand-context/inner-lifts the-struct_66)"
"(expand-context/inner-lift-envs the-struct_66)"
"(expand-context/inner-module-lifts the-struct_66)"
"(expand-context/inner-require-lifts the-struct_66)"
"(expand-context/inner-to-module-lifts the-struct_66)"
"(expand-context/inner-requires+provides the-struct_66)"
"(expand-context/inner-observer the-struct_66)"
"(expand-context/inner-for-serializable? the-struct_66)))"
"                                           (raise-argument-error 'struct-copy \"expand-context/inner?\" the-struct_66)))))"
"(expand-context/outer1.1"
" inner126_0"
"(root-expand-context/outer-post-expansion-scope the-struct_65)"
"(root-expand-context/outer-use-site-scopes the-struct_65)"
"(root-expand-context/outer-frame-id the-struct_65)"
"(expand-context/outer-context the-struct_65)"
"(expand-context/outer-env the-struct_65)"
"(expand-context/outer-post-expansion-scope-action the-struct_65)"
"(expand-context/outer-scopes the-struct_65)"
"(expand-context/outer-def-ctx-scopes the-struct_65)"
"(expand-context/outer-binding-layer the-struct_65)"
"(expand-context/outer-reference-records the-struct_65)"
"(expand-context/outer-only-immediate? the-struct_65)"
"(expand-context/outer-need-eventually-defined the-struct_65)"
"(expand-context/outer-current-introduction-scopes the-struct_65)"
"(expand-context/outer-name the-struct_65)))"
"                         (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_65)))))))"
"(if(if(null? require-lifts_4)(null? lifts_10) #f)"
"(let-values() exp-s_6)"
"(let-values()"
"(let-values(((temp128_0)(append require-lifts_4 lifts_10))"
"((exp-s129_1) exp-s_6)"
"((temp130_2)(namespace-phase ns_100)))"
"(wrap-lifts-as-begin14.1 #f #f temp128_0 exp-s129_1 temp130_2)))))))"
"(define-values"
"(expand-to-top-form$1)"
"(let-values(((expand-to-top-form50_0)"
"(lambda(s49_0 ns47_1 ns48_2)"
"(let-values(((s_209) s49_0))"
"(let-values(((ns_81)(if ns48_2 ns47_1(1/current-namespace))))"
"(let-values()"
"(let-values(((temp133_2) #f))"
"(per-top-level64.1 #f #f #f #f #f #f temp133_2 #f #f s_209 ns_81))))))))"
"(case-lambda"
"((s_407)(expand-to-top-form50_0 s_407 #f #f))"
"((s_432 ns47_2)(expand-to-top-form50_0 s_432 ns47_2 #t)))))"
"(define-values"
"(per-top-level64.1)"
"(lambda(combine53_0"
" combine58_0"
" just-once?55_0"
" just-once?60_0"
" serializable?56_0"
" serializable?61_0"
" single52_0"
" wrap54_0"
" wrap59_0"
" given-s62_0"
" ns63_0)"
"(let-values(((given-s_0) given-s62_0))"
"(let-values(((ns_101) ns63_0))"
"(let-values(((single_0) single52_0))"
"(let-values(((combine_0)(if combine58_0 combine53_0 #f)))"
"(let-values(((wrap_2)(if wrap59_0 wrap54_0 #f)))"
"(let-values(((just-once?_1)(if just-once?60_0 just-once?55_0 #f)))"
"(let-values(((serializable?_9)(if serializable?61_0 serializable?56_0 #f)))"
"(let-values()"
"(let-values(((s_300)(maybe-intro given-s_0 ns_101)))"
"(let-values(((ctx_67)"
"(let-values(((ns134_0) ns_101))(make-expand-context8.1 #f #f #f #f ns134_0))))"
"(let-values(((phase_137)(namespace-phase ns_101)))"
"((letrec-values(((loop_149)"
"(lambda(s_39 phase_138 ns_102 as-tail?_7)"
"(let-values(((tl-ctx_0)"
"(let-values(((v_202) ctx_67))"
"(let-values(((the-struct_67) v_202))"
"(if(expand-context/outer? the-struct_67)"
"(let-values(((inner135_0)"
"(let-values(((the-struct_68)"
"(root-expand-context/outer-inner"
" v_202)))"
"(if(expand-context/inner?"
" the-struct_68)"
"(let-values(((phase136_0)"
" phase_138)"
"((namespace137_0)"
" ns_102)"
"((just-once?138_0)"
" just-once?_1)"
"((for-serializable?139_0)"
" serializable?_9))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_68)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_68)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_68)"
"(root-expand-context/inner-defined-syms"
" the-struct_68)"
"(root-expand-context/inner-counter"
" the-struct_68)"
"(root-expand-context/inner-lift-key"
" the-struct_68)"
"(expand-context/inner-to-parsed?"
" the-struct_68)"
" phase136_0"
" namespace137_0"
"(expand-context/inner-user-env"
" the-struct_68)"
" just-once?138_0"
"(expand-context/inner-module-begin-k"
" the-struct_68)"
"(expand-context/inner-allow-unbound?"
" the-struct_68)"
"(expand-context/inner-in-local-expand?"
" the-struct_68)"
"(expand-context/inner-stops"
" the-struct_68)"
"(expand-context/inner-declared-submodule-names"
" the-struct_68)"
"(expand-context/inner-lifts"
" the-struct_68)"
"(expand-context/inner-lift-envs"
" the-struct_68)"
"(expand-context/inner-module-lifts"
" the-struct_68)"
"(expand-context/inner-require-lifts"
" the-struct_68)"
"(expand-context/inner-to-module-lifts"
" the-struct_68)"
"(expand-context/inner-requires+provides"
" the-struct_68)"
"(expand-context/inner-observer"
" the-struct_68)"
" for-serializable?139_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                     \"expand-context/inner?\""
" the-struct_68)))))"
"(expand-context/outer1.1"
" inner135_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_67)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_67)"
"(root-expand-context/outer-frame-id the-struct_67)"
"(expand-context/outer-context the-struct_67)"
"(expand-context/outer-env the-struct_67)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_67)"
"(expand-context/outer-scopes the-struct_67)"
"(expand-context/outer-def-ctx-scopes the-struct_67)"
"(expand-context/outer-binding-layer the-struct_67)"
"(expand-context/outer-reference-records"
" the-struct_67)"
"(expand-context/outer-only-immediate?"
" the-struct_67)"
"(expand-context/outer-need-eventually-defined"
" the-struct_67)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_67)"
"(expand-context/outer-name the-struct_67)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                   \"expand-context/outer?\""
" the-struct_67))))))"
"(let-values(((wb-s_0)(if just-once?_1 s_39 #f)))"
"(let-values(((require-lifts_5 lifts_11 exp-s_7)"
"(expand-capturing-lifts"
" s_39"
"(let-values(((v_203) tl-ctx_0))"
"(let-values(((the-struct_69) v_203))"
"(if(expand-context/outer? the-struct_69)"
"(let-values(((only-immediate?140_1) #t)"
"((def-ctx-scopes141_1)(box null))"
"((inner142_0)"
"(let-values(((the-struct_70)"
"(root-expand-context/outer-inner"
" v_203)))"
"(if(expand-context/inner?"
" the-struct_70)"
"(let-values(((phase143_0)"
" phase_138)"
"((namespace144_0)"
" ns_102))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_70)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_70)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_70)"
"(root-expand-context/inner-defined-syms"
" the-struct_70)"
"(root-expand-context/inner-counter"
" the-struct_70)"
"(root-expand-context/inner-lift-key"
" the-struct_70)"
"(expand-context/inner-to-parsed?"
" the-struct_70)"
" phase143_0"
" namespace144_0"
"(expand-context/inner-user-env"
" the-struct_70)"
"(expand-context/inner-just-once?"
" the-struct_70)"
"(expand-context/inner-module-begin-k"
" the-struct_70)"
"(expand-context/inner-allow-unbound?"
" the-struct_70)"
"(expand-context/inner-in-local-expand?"
" the-struct_70)"
"(expand-context/inner-stops"
" the-struct_70)"
"(expand-context/inner-declared-submodule-names"
" the-struct_70)"
"(expand-context/inner-lifts"
" the-struct_70)"
"(expand-context/inner-lift-envs"
" the-struct_70)"
"(expand-context/inner-module-lifts"
" the-struct_70)"
"(expand-context/inner-require-lifts"
" the-struct_70)"
"(expand-context/inner-to-module-lifts"
" the-struct_70)"
"(expand-context/inner-requires+provides"
" the-struct_70)"
"(expand-context/inner-observer"
" the-struct_70)"
"(expand-context/inner-for-serializable?"
" the-struct_70)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                          \"expand-context/inner?\""
" the-struct_70)))))"
"(expand-context/outer1.1"
" inner142_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_69)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_69)"
"(root-expand-context/outer-frame-id"
" the-struct_69)"
"(expand-context/outer-context the-struct_69)"
"(expand-context/outer-env the-struct_69)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_69)"
"(expand-context/outer-scopes the-struct_69)"
" def-ctx-scopes141_1"
"(expand-context/outer-binding-layer"
" the-struct_69)"
"(expand-context/outer-reference-records"
" the-struct_69)"
" only-immediate?140_1"
"(expand-context/outer-need-eventually-defined"
" the-struct_69)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_69)"
"(expand-context/outer-name the-struct_69)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                        \"expand-context/outer?\""
" the-struct_69)))))))"
"(let-values(((disarmed-exp-s_0)(syntax-disarm$1 exp-s_7)))"
"(if(let-values(((or-part_190)(pair? require-lifts_5)))"
"(if or-part_190 or-part_190(pair? lifts_11)))"
"(let-values()"
"(let-values(((new-s_0)"
"(let-values(((temp145_1)"
"(append require-lifts_5 lifts_11))"
"((exp-s146_0) exp-s_7)"
"((phase147_0) phase_138))"
"(wrap-lifts-as-begin14.1"
" #f"
" #f"
" temp145_1"
" exp-s146_0"
" phase147_0))))"
"(if just-once?_1"
" new-s_0"
"(loop_149 new-s_0 phase_138 ns_102 as-tail?_7))))"
"(if(not single_0)"
"(let-values() exp-s_7)"
"(if(if just-once?_1(not(eq? exp-s_7 wb-s_0)) #f)"
"(let-values() exp-s_7)"
"(let-values()"
"(let-values(((tmp_35)"
"(core-form-sym disarmed-exp-s_0 phase_138)))"
"(if(equal? tmp_35 'begin)"
"(let-values()"
"(let-values(((ok?_14 begin148_0 e149_0)"
"(let-values(((s_433)"
" disarmed-exp-s_0))"
"(let-values(((orig-s_32) s_433))"
"(let-values(((begin148_1 e149_1)"
"(let-values(((s_154)"
"(if(syntax?$1"
" s_433)"
"(syntax-e$1"
" s_433)"
" s_433)))"
"(if(pair? s_154)"
"(let-values(((begin150_0)"
"(let-values(((s_413)"
"(car"
" s_154)))"
" s_413))"
"((e151_0)"
"(let-values(((s_308)"
"(cdr"
" s_154)))"
"(let-values(((s_99)"
"(if(syntax?$1"
" s_308)"
"(syntax-e$1"
" s_308)"
" s_308)))"
"(let-values(((flat-s_20)"
"(to-syntax-list.1"
" s_99)))"
"(if(not"
" flat-s_20)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_32))"
"(let-values()"
" flat-s_20)))))))"
"(values"
" begin150_0"
" e151_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_32)))))"
"(values"
" #t"
" begin148_1"
" e149_1))))))"
"(letrec-values(((begin-loop_0)"
"(lambda(es_2)"
"(if(null? es_2)"
"(let-values()"
"(if combine_0 null(void)))"
"(if(if(not combine_0)"
"(null?(cdr es_2))"
" #f)"
"(let-values()"
"(loop_149"
"(car es_2)"
" phase_138"
" ns_102"
" as-tail?_7))"
"(let-values()"
"(let-values(((a_62)"
"(if combine_0"
"(loop_149"
"(car"
" es_2)"
" phase_138"
" ns_102"
" #f)"
"(begin"
"(loop_149"
"(car"
" es_2)"
" phase_138"
" ns_102"
" #f)"
"(void)))))"
"(if combine_0"
"(combine_0"
" a_62"
"(begin-loop_0"
"(cdr es_2)))"
"(begin-loop_0"
"(cdr es_2))))))))))"
"(if wrap_2"
"(wrap_2"
" begin148_0"
" exp-s_7"
"(begin-loop_0 e149_0))"
"(begin-loop_0 e149_0)))))"
"(if(equal? tmp_35 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_27"
" begin-for-syntax152_0"
" e153_0)"
"(let-values(((s_110)"
" disarmed-exp-s_0))"
"(let-values(((orig-s_33) s_110))"
"(let-values(((begin-for-syntax152_1"
" e153_1)"
"(let-values(((s_111)"
"(if(syntax?$1"
" s_110)"
"(syntax-e$1"
" s_110)"
" s_110)))"
"(if(pair?"
" s_111)"
"(let-values(((begin-for-syntax154_0)"
"(let-values(((s_434)"
"(car"
" s_111)))"
" s_434))"
"((e155_0)"
"(let-values(((s_112)"
"(cdr"
" s_111)))"
"(let-values(((s_113)"
"(if(syntax?$1"
" s_112)"
"(syntax-e$1"
" s_112)"
" s_112)))"
"(let-values(((flat-s_21)"
"(to-syntax-list.1"
" s_113)))"
"(if(not"
" flat-s_21)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_33))"
"(let-values()"
" flat-s_21)))))))"
"(values"
" begin-for-syntax154_0"
" e155_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_33)))))"
"(values"
" #t"
" begin-for-syntax152_1"
" e153_1))))))"
"(let-values(((next-phase_0)(add1 phase_138)))"
"(let-values(((next-ns_0)"
"(namespace->namespace-at-phase"
" ns_102"
" next-phase_0)))"
"(let-values((()"
"(begin"
"(namespace-visit-available-modules!"
" next-ns_0)"
"(values))))"
"(let-values(((l_71)"
"(let-values(((lst_283)"
" e153_0))"
"(begin"
"(check-list lst_283)"
"((letrec-values(((for-loop_243)"
"(lambda(lst_284)"
"(if(pair?"
" lst_284)"
"(let-values(((s_311)"
"(unsafe-car"
" lst_284))"
"((rest_159)"
"(unsafe-cdr"
" lst_284)))"
"(let-values(((post-guard-var_81)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_74)"
"(let-values()"
"(let-values()"
"(loop_149"
" s_311"
" next-phase_0"
" next-ns_0"
" #f)))))"
"(let-values(((result_167)"
"(if(post-guard-var_81)"
"(for-loop_243"
" rest_159)"
" null)))"
"(cons"
" elem_74"
" result_167))))))"
" null))))"
" for-loop_243)"
" lst_283)))))"
"(if wrap_2"
"(let-values()"
"(wrap_2"
" begin-for-syntax152_0"
" exp-s_7"
" l_71))"
"(if combine_0"
"(let-values() l_71)"
"(let-values()(void))))))))))"
"(let-values()"
"(single_0"
" exp-s_7"
" ns_102"
" as-tail?_7))))))))))))))))"
" loop_149)"
" s_300"
" phase_137"
" ns_101"
" #t))))))))))))))"
"(define-values"
"(maybe-intro)"
"(lambda(s_435 ns_103)(if(syntax?$1 s_435) s_435(1/namespace-syntax-introduce(1/datum->syntax #f s_435) ns_103))))"
"(define-values"
"(re-pair)"
"(lambda(form-id_0 s_436 r_48)"
"(syntax-rearm$1(1/datum->syntax(syntax-disarm$1 s_436)(cons form-id_0 r_48) s_436 s_436) s_436)))"
"(define-values"
"(expand-capturing-lifts)"
"(lambda(s_122 ctx_68)"
"(let-values()"
"(let-values(((ns_104)(expand-context-namespace ctx_68)))"
"(let-values((()(begin(namespace-visit-available-modules! ns_104)(values))))"
"(let-values(((lift-ctx_6)"
"(let-values(((temp156_0)(make-top-level-lift ctx_68)))"
"(make-lift-context6.1 #f #f temp156_0))))"
"(let-values(((require-lift-ctx_2)"
"(make-require-lift-context(namespace-phase ns_104)(make-parse-top-lifted-require ns_104))))"
"(let-values(((exp-s_8)"
"(let-values(((s157_0) s_122)"
"((temp158_0)"
"(let-values(((v_204) ctx_68))"
"(let-values(((the-struct_71) v_204))"
"(if(expand-context/outer? the-struct_71)"
"(let-values(((inner159_0)"
"(let-values(((the-struct_72)"
"(root-expand-context/outer-inner v_204)))"
"(if(expand-context/inner? the-struct_72)"
"(let-values(((lifts160_0) lift-ctx_6)"
"((module-lifts161_0) lift-ctx_6)"
"((require-lifts162_0)"
" require-lift-ctx_2))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_72)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_72)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_72)"
"(root-expand-context/inner-defined-syms"
" the-struct_72)"
"(root-expand-context/inner-counter the-struct_72)"
"(root-expand-context/inner-lift-key the-struct_72)"
"(expand-context/inner-to-parsed? the-struct_72)"
"(expand-context/inner-phase the-struct_72)"
"(expand-context/inner-namespace the-struct_72)"
"(expand-context/inner-user-env the-struct_72)"
"(expand-context/inner-just-once? the-struct_72)"
"(expand-context/inner-module-begin-k the-struct_72)"
"(expand-context/inner-allow-unbound? the-struct_72)"
"(expand-context/inner-in-local-expand?"
" the-struct_72)"
"(expand-context/inner-stops the-struct_72)"
"(expand-context/inner-declared-submodule-names"
" the-struct_72)"
" lifts160_0"
"(expand-context/inner-lift-envs the-struct_72)"
" module-lifts161_0"
" require-lifts162_0"
"(expand-context/inner-to-module-lifts"
" the-struct_72)"
"(expand-context/inner-requires+provides"
" the-struct_72)"
"(expand-context/inner-observer the-struct_72)"
"(expand-context/inner-for-serializable?"
" the-struct_72)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                   \"expand-context/inner?\""
" the-struct_72)))))"
"(expand-context/outer1.1"
" inner159_0"
"(root-expand-context/outer-post-expansion-scope the-struct_71)"
"(root-expand-context/outer-use-site-scopes the-struct_71)"
"(root-expand-context/outer-frame-id the-struct_71)"
"(expand-context/outer-context the-struct_71)"
"(expand-context/outer-env the-struct_71)"
"(expand-context/outer-post-expansion-scope-action the-struct_71)"
"(expand-context/outer-scopes the-struct_71)"
"(expand-context/outer-def-ctx-scopes the-struct_71)"
"(expand-context/outer-binding-layer the-struct_71)"
"(expand-context/outer-reference-records the-struct_71)"
"(expand-context/outer-only-immediate? the-struct_71)"
"(expand-context/outer-need-eventually-defined the-struct_71)"
"(expand-context/outer-current-introduction-scopes the-struct_71)"
"(expand-context/outer-name the-struct_71)))"
"(raise-argument-error"
" 'struct-copy"
"                                                 \"expand-context/outer?\""
" the-struct_71))))))"
"(expand5.1 #f #f s157_0 temp158_0))))"
"(values"
"(get-and-clear-require-lifts! require-lift-ctx_2)"
"(get-and-clear-lifts! lift-ctx_6)"
" exp-s_8)))))))))"
"(define-values"
"(make-parse-top-lifted-require)"
"(lambda(ns_105)"
"(lambda(s_221 phase_139)"
"(let-values(((ok?_28 #%require163_0 req164_0)"
"(let-values(((s_234)(syntax-disarm$1 s_221)))"
"(let-values(((orig-s_34) s_234))"
"(let-values(((#%require163_1 req164_1)"
"(let-values(((s_238)(if(syntax?$1 s_234)(syntax-e$1 s_234) s_234)))"
"(if(pair? s_238)"
"(let-values(((#%require165_0)(let-values(((s_241)(car s_238))) s_241))"
"((req166_0)"
"(let-values(((s_437)(cdr s_238)))"
"(let-values(((s_438)"
"(if(syntax?$1 s_437)"
"(syntax-e$1 s_437)"
" s_437)))"
"(if(pair? s_438)"
"(let-values(((req167_0)"
"(let-values(((s_439)(car s_438))) s_439))"
"(()"
"(let-values(((s_321)(cdr s_438)))"
"(let-values(((s_440)"
"(if(syntax?$1 s_321)"
"(syntax-e$1 s_321)"
" s_321)))"
"(if(null? s_440)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_34))))))"
"(values req167_0))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_34))))))"
"(values #%require165_0 req166_0))"
"                                          (raise-syntax-error$1 #f \"bad syntax\" orig-s_34)))))"
"(values #t #%require163_1 req164_1))))))"
"(let-values(((temp168_1)(list req164_0))"
"((s169_0) s_221)"
"((ns170_0) ns_105)"
"((phase171_0) phase_139)"
"((phase172_0) phase_139)"
"((temp173_0)(make-requires+provides #f))"
"((temp174_0) 'require))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" phase172_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp174_0"
" temp168_1"
" s169_0"
" ns170_0"
" phase171_0"
" temp173_0))))))"
"(define-values"
"(wrap-lifts-as-lifted-parsed-begin73.1)"
"(lambda(adjust-form67_0 require-lifts69_0 lifts70_0 exp-s71_0 rebuild-s72_0)"
"(let-values(((require-lifts_6) require-lifts69_0))"
"(let-values(((lifts_12) lifts70_0))"
"(let-values(((exp-s_9) exp-s71_0))"
"(let-values(((rebuild-s_3) rebuild-s72_0))"
"(let-values(((adjust-form_1) adjust-form67_0))"
"(let-values()"
"(lifted-parsed-begin30.1"
"(append"
"(let-values(((lst_285) require-lifts_6))"
"(begin"
"(check-list lst_285)"
"((letrec-values(((for-loop_244)"
"(lambda(lst_286)"
"(if(pair? lst_286)"
"(let-values(((req_19)(unsafe-car lst_286))"
"((rest_160)(unsafe-cdr lst_286)))"
"(let-values(((post-guard-var_82)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_75)"
"(let-values()"
"(let-values()(parsed-require23.1 req_19)))))"
"(let-values(((result_168)"
"(if(post-guard-var_82)"
"(for-loop_244 rest_160)"
" null)))"
"(cons elem_75 result_168))))))"
" null))))"
" for-loop_244)"
" lst_285)))"
"(let-values(((lst_287)(get-lifts-as-lists lifts_12)))"
"(begin"
"(check-list lst_287)"
"((letrec-values(((for-loop_131)"
"(lambda(lst_288)"
"(if(pair? lst_288)"
"(let-values(((ids+syms+rhs_0)(unsafe-car lst_288))"
"((rest_161)(unsafe-cdr lst_288)))"
"(let-values(((post-guard-var_83)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_76)"
"(let-values()"
"(let-values()"
"(let-values(((exp-rhs_3)"
"(adjust-form_1"
"(caddr ids+syms+rhs_0))))"
"(let-values(((just-rhs_0)"
"(if(lifted-parsed-begin? exp-rhs_3)"
"(lifted-parsed-begin-last"
" exp-rhs_3)"
" exp-rhs_3)))"
"(let-values(((dv_0)"
"(parsed-define-values19.1"
" rebuild-s_3"
"(car ids+syms+rhs_0)"
"(cadr ids+syms+rhs_0)"
" just-rhs_0)))"
"(if(lifted-parsed-begin? exp-rhs_3)"
"(let-values(((the-struct_73) exp-rhs_3))"
"(if(lifted-parsed-begin? the-struct_73)"
"(let-values(((last175_0) dv_0))"
"(lifted-parsed-begin30.1"
"(lifted-parsed-begin-seq"
" the-struct_73)"
" last175_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                 \"lifted-parsed-begin?\""
" the-struct_73)))"
" dv_0))))))))"
"(let-values(((result_169)"
"(if(post-guard-var_83)"
"(for-loop_131 rest_161)"
" null)))"
"(cons elem_76 result_169))))))"
" null))))"
" for-loop_131)"
" lst_287))))"
" exp-s_9)))))))))"
"(define-values"
"(do-dynamic-require)"
"(let-values(((do-dynamic-require6_0)"
"(lambda(who3_0 mod-path4_0 sym5_0 fail-k1_0 fail-k2_0)"
"(let-values(((who_4) who3_0))"
"(let-values(((mod-path_5) mod-path4_0))"
"(let-values(((sym_26) sym5_0))"
"(let-values(((fail-k_2)(if fail-k2_0 fail-k1_0 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_11)(1/module-path? mod-path_5)))"
"(if or-part_11"
" or-part_11"
"(let-values(((or-part_293)(1/module-path-index? mod-path_5)))"
"(if or-part_293"
" or-part_293"
"(1/resolved-module-path? mod-path_5)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_4"
"                                                 \"(or/c module-path? module-path-index? resolved-module-path?)\""
" mod-path_5)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_294)(symbol? sym_26)))"
"(if or-part_294"
" or-part_294"
"(let-values(((or-part_285)(not sym_26)))"
"(if or-part_285"
" or-part_285"
"(let-values(((or-part_12)(equal? sym_26 0)))"
"(if or-part_12 or-part_12(void? sym_26)))))))"
"(void)"
"(let-values()"
"                                                  (raise-argument-error who_4 \"(or/c symbol? #f 0 void?)\" sym_26)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(procedure? fail-k_2)(procedure-arity-includes? fail-k_2 0) #f)"
"(void)"
"                                                  (let-values () (raise-argument-error who_4 \"(-> any)\" fail-k_2)))"
"(values))))"
"(let-values(((ns_54)(1/current-namespace)))"
"(let-values(((mpi_44)"
"(if(1/module-path? mod-path_5)"
"(let-values()(1/module-path-index-join mod-path_5 #f))"
"(if(1/module-path-index? mod-path_5)"
"(let-values() mod-path_5)"
"(let-values()"
"(1/module-path-index-join"
"(resolved-module-path->module-path mod-path_5)"
" #f))))))"
"(let-values(((mod-name_20)(1/module-path-index-resolve mpi_44 #t)))"
"(let-values(((phase_38)(namespace-phase ns_54)))"
"(if(not sym_26)"
"(let-values()"
"(let-values(((phase23_0) phase_38)((temp24_4) #f))"
"(namespace-module-instantiate!94.1"
" temp24_4"
" #t"
" phase23_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns_54"
" mpi_44"
" phase_38)))"
"(if(equal? sym_26 0)"
"(let-values()"
"(let-values(((phase28_2) phase_38))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" phase28_2"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns_54"
" mpi_44"
" phase_38)))"
"(if(void? sym_26)"
"(let-values()"
"(let-values(((phase32_2) phase_38))"
"(namespace-module-visit!102.1 phase32_2 #t ns_54 mpi_44 phase_38)))"
"(let-values()"
"(let-values(((m_22)(namespace->module ns_54 mod-name_20)))"
"(let-values((()"
"(begin"
"(if m_22"
"(void)"
"(let-values()"
"(raise-unknown-module-error"
" 'dynamic-require"
" mod-name_20)))"
"(values))))"
"(let-values(((binding/p_5)"
"(hash-ref"
"(hash-ref(module-provides m_22) 0 '#hasheq())"
" sym_26"
" #f)))"
"(if(not binding/p_5)"
"(let-values()"
"(if(eq? fail-k_2 default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                               \"name is not provided\""
"                                                               \"name\""
" sym_26"
"                                                               \"module\""
" mod-name_20)"
"(fail-k_2)))"
"(let-values()"
"(let-values(((binding_27)"
"(provided-as-binding binding/p_5)))"
"(let-values(((ex-sym_2)(module-binding-sym binding_27)))"
"(let-values(((ex-phase_0)"
"(module-binding-phase binding_27)))"
"(let-values((()"
"(begin"
"(let-values(((phase36_0) phase_38))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" phase36_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns_54"
" mpi_44"
" phase_38))"
"(values))))"
"(let-values(((ex-mod-name_0)"
"(1/module-path-index-resolve"
"(module-path-index-shift"
"(module-binding-module binding_27)"
"(module-self m_22)"
" mpi_44))))"
"(let-values(((m-ns_16)"
"(let-values(((temp39_3)"
"(phase-"
" phase_38"
" ex-phase_0))"
"((temp40_1) #t))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" temp40_1"
" #t"
" #f"
" #f"
" ns_54"
" ex-mod-name_0"
" temp39_3))))"
"(let-values(((ex-m_0)"
"(namespace->module"
" ns_54"
" ex-mod-name_0)))"
"(let-values(((access_4)"
"(let-values(((or-part_81)"
"(module-access"
" ex-m_0)))"
"(if or-part_81"
" or-part_81"
"(module-compute-access!"
" ex-m_0)))))"
"(let-values((()"
"(begin"
"(if(if(not"
"(eq?"
" 'provided"
"(hash-ref"
"(hash-ref"
" access_4"
" ex-phase_0"
" '#hasheq())"
" ex-sym_2"
" #f)))"
"(if(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector"
" m-ns_16)))"
"(not"
"(if(module-binding-extra-inspector"
" binding_27)"
"(inspector-superior?"
"(module-binding-extra-inspector"
" binding_27)"
"(namespace-inspector"
" m-ns_16))"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" 'dynamic-require"
"                                                                                                 \"name is protected\""
"                                                                                                 \"name\""
" sym_26"
"                                                                                                 \"module\""
" mod-name_20))"
"(void))"
"(values))))"
"(let-values(((fail_5)"
"(lambda()"
"(if(eq?"
" fail-k_2"
" default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                                                                 \"name's binding is missing\""
"                                                                                                 \"name\""
" sym_26"
"                                                                                                 \"module\""
" mod-name_20)"
"(fail-k_2)))))"
"(if(not"
"(provided-as-transformer?"
" binding/p_5))"
"(let-values()"
"(namespace-get-variable"
" m-ns_16"
" ex-phase_0"
" ex-sym_2"
" fail_5))"
"(let-values()"
"(let-values(((missing_1)"
"(gensym 'missing)))"
"(let-values((()"
"(begin"
"(let-values(((phase44_0)"
" phase_38))"
"(namespace-module-visit!102.1"
" phase44_0"
" #t"
" ns_54"
" mpi_44"
" phase_38))"
"(values))))"
"(let-values(((t_55)"
"(namespace-get-transformer"
" m-ns_16"
" ex-phase_0"
" ex-sym_2"
" missing_1)))"
"(if(eq? t_55 missing_1)"
"(let-values()(fail_5))"
"(let-values()"
"(let-values(((tmp-ns_0)"
"(let-values(((ns45_1)"
" ns_54))"
"(new-namespace9.1"
" #f"
" #f"
" #f"
" #f"
" ns45_1"
" #t))))"
"(let-values(((mod-path_17)"
"(resolved-module-path->module-path"
" mod-name_20)))"
"(begin"
"(1/namespace-require"
" mod-path_17"
" tmp-ns_0)"
"(1/eval"
" sym_26"
" tmp-ns_0)))))))))))))))))))))))))))))))))))))))))))))"
"(case-lambda"
"((who_21 mod-path_16 sym_86)(do-dynamic-require6_0 who_21 mod-path_16 sym_86 #f #f))"
"((who_22 mod-path_18 sym_87 fail-k1_1)(do-dynamic-require6_0 who_22 mod-path_18 sym_87 fail-k1_1 #t)))))"
" (define-values (default-dynamic-require-fail-thunk) (lambda () (error \"failed\")))"
"(define-values"
"(1/dynamic-require)"
"(let-values(((dynamic-require12_0)"
"(lambda(mod-path10_2 sym11_0 fail-k8_0 fail-k9_0)"
"(let-values(((mod-path_19) mod-path10_2))"
"(let-values(((sym_88) sym11_0))"
"(let-values(((fail-k_3)(if fail-k9_0 fail-k8_0 default-dynamic-require-fail-thunk)))"
"(let-values()(do-dynamic-require 'dynamic-require mod-path_19 sym_88 fail-k_3))))))))"
"(case-lambda"
"((mod-path_20 sym_11)(dynamic-require12_0 mod-path_20 sym_11 #f #f))"
"((mod-path_21 sym_89 fail-k8_1)(dynamic-require12_0 mod-path_21 sym_89 fail-k8_1 #t)))))"
"(define-values"
"(1/dynamic-require-for-syntax)"
"(let-values(((dynamic-require-for-syntax18_0)"
"(lambda(mod-path16_0 sym17_1 fail-k14_0 fail-k15_0)"
"(let-values(((mod-path_22) mod-path16_0))"
"(let-values(((sym_90) sym17_1))"
"(let-values(((fail-k_4)(if fail-k15_0 fail-k14_0 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
"(let-values(((ns_106)(1/current-namespace)))"
"(namespace->namespace-at-phase ns_106(add1(namespace-phase ns_106)))))"
"(let-values()"
"(do-dynamic-require 'dynamic-require-for-syntax mod-path_22 sym_90 fail-k_4))))))))))"
"(case-lambda"
"((mod-path_23 sym_91)(dynamic-require-for-syntax18_0 mod-path_23 sym_91 #f #f))"
"((mod-path_24 sym_92 fail-k14_1)(dynamic-require-for-syntax18_0 mod-path_24 sym_92 fail-k14_1 #t)))))"
"(define-values(prop:readtable prop:readtable? prop:readtable-ref)(make-struct-type-property 'readtable))"
"(define-values"
"(1/current-readtable)"
"(make-parameter"
" #f"
"(lambda(v_31)"
"(begin"
"(if(let-values(((or-part_0)(not v_31)))(if or-part_0 or-part_0(prop:readtable? v_31)))"
"(void)"
"         (let-values () (raise-argument-error 'current-readtable \"(or/c readtable? #f)\" v_31)))"
" v_31))))"
"(define-values"
"(struct:read-config/outer"
" read-config/outer1.1"
" read-config/outer?"
" read-config/outer-inner"
" read-config/outer-wrap"
" read-config/outer-line"
" read-config/outer-col"
" read-config/outer-pos"
" read-config/outer-indentations"
" read-config/outer-keep-comment?)"
"(let-values(((struct:_38 make-_38 ?_38 -ref_38 -set!_38)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'read-config"
" #f"
" 7"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'read-config/outer)))))"
"(values"
" struct:_38"
" make-_38"
" ?_38"
"(make-struct-field-accessor -ref_38 0 'inner)"
"(make-struct-field-accessor -ref_38 1 'wrap)"
"(make-struct-field-accessor -ref_38 2 'line)"
"(make-struct-field-accessor -ref_38 3 'col)"
"(make-struct-field-accessor -ref_38 4 'pos)"
"(make-struct-field-accessor -ref_38 5 'indentations)"
"(make-struct-field-accessor -ref_38 6 'keep-comment?))))"
"(define-values"
"(struct:read-config/inner"
" read-config/inner2.1"
" read-config/inner?"
" read-config/inner-readtable"
" read-config/inner-next-readtable"
" read-config/inner-for-syntax?"
" read-config/inner-source"
" read-config/inner-read-compiled"
" read-config/inner-dynamic-require"
" read-config/inner-module-declared?"
" read-config/inner-coerce"
" read-config/inner-coerce-key"
" read-config/inner-parameter-override"
" read-config/inner-parameter-cache"
" read-config/inner-st)"
"(let-values(((struct:_74 make-_74 ?_74 -ref_74 -set!_74)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'read-config/inner"
" #f"
" 12"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11)"
" #f"
" 'read-config/inner)))))"
"(values"
" struct:_74"
" make-_74"
" ?_74"
"(make-struct-field-accessor -ref_74 0 'readtable)"
"(make-struct-field-accessor -ref_74 1 'next-readtable)"
"(make-struct-field-accessor -ref_74 2 'for-syntax?)"
"(make-struct-field-accessor -ref_74 3 'source)"
"(make-struct-field-accessor -ref_74 4 'read-compiled)"
"(make-struct-field-accessor -ref_74 5 'dynamic-require)"
"(make-struct-field-accessor -ref_74 6 'module-declared?)"
"(make-struct-field-accessor -ref_74 7 'coerce)"
"(make-struct-field-accessor -ref_74 8 'coerce-key)"
"(make-struct-field-accessor -ref_74 9 'parameter-override)"
"(make-struct-field-accessor -ref_74 10 'parameter-cache)"
"(make-struct-field-accessor -ref_74 11 'st))))"
"(define-values"
"(read-config/make)"
"(lambda(readtable_0"
" next-readtable_0"
" for-syntax?_0"
" source_1"
" wrap_3"
" read-compiled_0"
" dynamic-require_0"
" module-declared?_0"
" coerce_0"
" coerce-key_0"
" line_1"
" col_0"
" pos_104"
" indentations_0"
" keep-comment?_0"
" parameter-override_0"
" parameter-cache_0"
" st_0)"
"(read-config/outer1.1"
"(read-config/inner2.1"
" readtable_0"
" next-readtable_0"
" for-syntax?_0"
" source_1"
" read-compiled_0"
" dynamic-require_0"
" module-declared?_0"
" coerce_0"
" coerce-key_0"
" parameter-override_0"
" parameter-cache_0"
" st_0)"
" wrap_3"
" line_1"
" col_0"
" pos_104"
" indentations_0"
" keep-comment?_0)))"
"(define-values(read-config-wrap)(lambda(v_192)(read-config/outer-wrap v_192)))"
"(define-values(read-config-line)(lambda(v_205)(read-config/outer-line v_205)))"
"(define-values(read-config-col)(lambda(v_12)(read-config/outer-col v_12)))"
"(define-values(read-config-pos)(lambda(v_196)(read-config/outer-pos v_196)))"
"(define-values(read-config-indentations)(lambda(v_206)(read-config/outer-indentations v_206)))"
"(define-values(read-config-keep-comment?)(lambda(v_207)(read-config/outer-keep-comment? v_207)))"
"(define-values(read-config-readtable)(lambda(v_208)(read-config/inner-readtable(read-config/outer-inner v_208))))"
"(define-values"
"(read-config-next-readtable)"
"(lambda(v_209)(read-config/inner-next-readtable(read-config/outer-inner v_209))))"
"(define-values"
"(read-config-for-syntax?)"
"(lambda(v_210)(read-config/inner-for-syntax?(read-config/outer-inner v_210))))"
"(define-values(read-config-source)(lambda(v_211)(read-config/inner-source(read-config/outer-inner v_211))))"
"(define-values"
"(read-config-read-compiled)"
"(lambda(v_212)(read-config/inner-read-compiled(read-config/outer-inner v_212))))"
"(define-values"
"(read-config-dynamic-require)"
"(lambda(v_142)(read-config/inner-dynamic-require(read-config/outer-inner v_142))))"
"(define-values"
"(read-config-module-declared?)"
"(lambda(v_43)(read-config/inner-module-declared?(read-config/outer-inner v_43))))"
"(define-values(read-config-coerce)(lambda(v_100)(read-config/inner-coerce(read-config/outer-inner v_100))))"
"(define-values"
"(read-config-coerce-key)"
"(lambda(v_213)(read-config/inner-coerce-key(read-config/outer-inner v_213))))"
"(define-values"
"(read-config-parameter-override)"
"(lambda(v_58)(read-config/inner-parameter-override(read-config/outer-inner v_58))))"
"(define-values"
"(read-config-parameter-cache)"
"(lambda(v_214)(read-config/inner-parameter-cache(read-config/outer-inner v_214))))"
"(define-values(read-config-st)(lambda(v_59)(read-config/inner-st(read-config/outer-inner v_59))))"
"(define-values"
"(struct:read-config-state"
" read-config-state3.1"
" read-config-state?"
" read-config-state-accum-str"
" read-config-state-graph"
" set-read-config-state-accum-str!"
" set-read-config-state-graph!)"
"(let-values(((struct:_75 make-_75 ?_75 -ref_75 -set!_75)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'read-config-state"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'read-config-state)))))"
"(values"
" struct:_75"
" make-_75"
" ?_75"
"(make-struct-field-accessor -ref_75 0 'accum-str)"
"(make-struct-field-accessor -ref_75 1 'graph)"
"(make-struct-field-mutator -set!_75 0 'accum-str)"
"(make-struct-field-mutator -set!_75 1 'graph))))"
"(define-values(current-read-config)(make-parameter #f))"
"(define-values"
"(make-read-config26.1)"
"(lambda(coerce12_0"
" coerce23_0"
" coerce-key13_0"
" coerce-key24_0"
" dynamic-require10_0"
" dynamic-require21_0"
" for-syntax?5_0"
" for-syntax?16_0"
" keep-comment?14_0"
" keep-comment?25_0"
" module-declared?11_0"
" module-declared?22_0"
" next-readtable7_0"
" next-readtable18_0"
" read-compiled9_0"
" read-compiled20_0"
" readtable6_0"
" readtable17_0"
" source4_0"
" source15_0"
" wrap8_0"
" wrap19_0)"
"(let-values(((source_2)(if source15_0 source4_0 #f)))"
"(let-values(((for-syntax?_1)(if for-syntax?16_0 for-syntax?5_0 #f)))"
"(let-values(((readtable_1)(if readtable17_0 readtable6_0(1/current-readtable))))"
"(let-values(((next-readtable_1)(if next-readtable18_0 next-readtable7_0 readtable_1)))"
"(let-values(((wrap_4)(if wrap19_0 wrap8_0 #f)))"
"(let-values(((read-compiled_1)(if read-compiled20_0 read-compiled9_0 #f)))"
"(let-values(((dynamic-require_1)(if dynamic-require21_0 dynamic-require10_0 #f)))"
"(let-values(((module-declared?_1)(if module-declared?22_0 module-declared?11_0 #f)))"
"(let-values(((coerce_1)(if coerce23_0 coerce12_0 #f)))"
"(let-values(((coerce-key_1)(if coerce-key24_0 coerce-key13_0 #f)))"
"(let-values(((keep-comment?_1)(if keep-comment?25_0 keep-comment?14_0 #f)))"
"(let-values()"
"(read-config/make"
" readtable_1"
" next-readtable_1"
" for-syntax?_1"
" source_2"
" wrap_4"
"(let-values(((or-part_70) read-compiled_1))"
"                               (if or-part_70 or-part_70 (lambda (in_0) (error 'read \"no `read-compiled` provided\"))))"
"(let-values(((or-part_295) dynamic-require_1))"
"(if or-part_295"
" or-part_295"
"(lambda(mod-path_25 sym_93 failure-k_0)"
"                                   (error 'read \"no `dynamic-require` provided\"))))"
"(let-values(((or-part_296) module-declared?_1))"
"(if or-part_296"
" or-part_296"
"                                 (lambda (mod-path_26) (error 'read \"no `module-declare?` provided\"))))"
"(let-values(((or-part_297) coerce_1))"
"(if or-part_297 or-part_297(lambda(for-syntax?_2 v_117 srcloc_8) v_117)))"
"(let-values(((or-part_298) coerce-key_1))"
"(if or-part_298 or-part_298(lambda(for-syntax?_3 v_121) v_121)))"
" #f"
" #f"
" #f"
" null"
" keep-comment?_1"
" '#hasheq()"
"(make-hasheq)"
"(read-config-state3.1 #f #f))))))))))))))))"
"(define-values"
"(read-config-update42.1)"
"(lambda(for-syntax?29_0"
" keep-comment?34_0"
" next-readtable32_0"
" next-readtable38_0"
" readtable31_0"
" reset-graph?33_0"
" wrap30_0"
" config41_0)"
"(let-values(((config_0) config41_0))"
"(let-values(((for-syntax?_4) for-syntax?29_0))"
"(let-values(((wrap_5) wrap30_0))"
"(let-values(((readtable_2) readtable31_0))"
"(let-values(((next-readtable_2)"
"(if next-readtable38_0 next-readtable32_0(read-config-readtable config_0))))"
"(let-values(((local-graph?_0) reset-graph?33_0))"
"(let-values(((keep-comment?_2) keep-comment?34_0))"
"(let-values()"
"(let-values(((v_215) config_0))"
"(let-values(((the-struct_74) v_215))"
"(if(read-config/outer? the-struct_74)"
"(let-values(((wrap48_0) wrap_5)"
"((keep-comment?49_0) keep-comment?_2)"
"((inner50_0)"
"(let-values(((the-struct_75)(read-config/outer-inner v_215)))"
"(if(read-config/inner? the-struct_75)"
"(let-values(((for-syntax?51_0) for-syntax?_4)"
"((readtable52_0) readtable_2)"
"((next-readtable53_0) next-readtable_2)"
"((st54_0)"
"(if local-graph?_0"
"(read-config-state3.1 #f #f)"
"(read-config-st config_0))))"
"(read-config/inner2.1"
" readtable52_0"
" next-readtable53_0"
" for-syntax?51_0"
"(read-config/inner-source the-struct_75)"
"(read-config/inner-read-compiled the-struct_75)"
"(read-config/inner-dynamic-require the-struct_75)"
"(read-config/inner-module-declared? the-struct_75)"
"(read-config/inner-coerce the-struct_75)"
"(read-config/inner-coerce-key the-struct_75)"
"(read-config/inner-parameter-override the-struct_75)"
"(read-config/inner-parameter-cache the-struct_75)"
" st54_0))"
"                                            (raise-argument-error 'struct-copy \"read-config/inner?\" the-struct_75)))))"
"(read-config/outer1.1"
" inner50_0"
" wrap48_0"
"(read-config/outer-line the-struct_74)"
"(read-config/outer-col the-struct_74)"
"(read-config/outer-pos the-struct_74)"
"(read-config/outer-indentations the-struct_74)"
" keep-comment?49_0))"
"                          (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_74))))))))))))))"
"(define-values"
"(port+config->srcloc)"
"(lambda(in_1 config_1)"
"(let-values(((end-line_0 end-col_0 end-pos_0)(port-next-location in_1)))"
"(srcloc"
"(read-config-source config_1)"
"(read-config-line config_1)"
"(read-config-col config_1)"
"(read-config-pos config_1)"
"(if(read-config-pos config_1)(if end-pos_0(- end-pos_0(read-config-pos config_1)) #f) #f)))))"
"(define-values"
"(reading-at)"
"(lambda(config_2 line_2 col_1 pos_105)"
"(let-values(((v_216) config_2))"
"(let-values(((the-struct_76) v_216))"
"(if(read-config/outer? the-struct_76)"
"(let-values(((line55_0) line_2)"
"((col56_0) col_1)"
"((pos57_0) pos_105)"
"((inner58_0)(read-config/outer-inner v_216)))"
"(read-config/outer1.1"
" inner58_0"
"(read-config/outer-wrap the-struct_76)"
" line55_0"
" col56_0"
" pos57_0"
"(read-config/outer-indentations the-struct_76)"
"(read-config/outer-keep-comment? the-struct_76)))"
"          (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_76))))))"
"(define-values"
"(disable-wrapping)"
"(lambda(config_3)"
"(let-values(((v_217) config_3))"
"(let-values(((the-struct_77) v_217))"
"(if(read-config/outer? the-struct_77)"
"(let-values(((wrap59_1) #f)((inner60_0)(read-config/outer-inner v_217)))"
"(read-config/outer1.1"
" inner60_0"
" wrap59_1"
"(read-config/outer-line the-struct_77)"
"(read-config/outer-col the-struct_77)"
"(read-config/outer-pos the-struct_77)"
"(read-config/outer-indentations the-struct_77)"
"(read-config/outer-keep-comment? the-struct_77)))"
"          (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_77))))))"
"(define-values"
"(keep-comment)"
"(lambda(config_4)"
"(let-values(((v_218) config_4))"
"(let-values(((the-struct_78) v_218))"
"(if(read-config/outer? the-struct_78)"
"(let-values(((keep-comment?61_0) #t)((inner62_0)(read-config/outer-inner v_218)))"
"(read-config/outer1.1"
" inner62_0"
"(read-config/outer-wrap the-struct_78)"
"(read-config/outer-line the-struct_78)"
"(read-config/outer-col the-struct_78)"
"(read-config/outer-pos the-struct_78)"
"(read-config/outer-indentations the-struct_78)"
" keep-comment?61_0))"
"          (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_78))))))"
"(define-values"
"(discard-comment)"
"(lambda(config_5)"
"(if(not(read-config-keep-comment? config_5))"
"(let-values() config_5)"
"(let-values()"
"(let-values(((v_219) config_5))"
"(let-values(((the-struct_79) v_219))"
"(if(read-config/outer? the-struct_79)"
"(let-values(((keep-comment?63_0) #f)((inner64_0)(read-config/outer-inner v_219)))"
"(read-config/outer1.1"
" inner64_0"
"(read-config/outer-wrap the-struct_79)"
"(read-config/outer-line the-struct_79)"
"(read-config/outer-col the-struct_79)"
"(read-config/outer-pos the-struct_79)"
"(read-config/outer-indentations the-struct_79)"
" keep-comment?63_0))"
"              (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_79))))))))"
"(define-values"
"(next-readtable)"
"(lambda(config_6)"
"(if(eq?(read-config-readtable config_6)(read-config-next-readtable config_6))"
"(let-values() config_6)"
"(let-values()"
"(let-values(((v_220) config_6))"
"(let-values(((the-struct_80) v_220))"
"(if(read-config/outer? the-struct_80)"
"(let-values(((inner65_0)"
"(let-values(((the-struct_81)(read-config/outer-inner v_220)))"
"(if(read-config/inner? the-struct_81)"
"(let-values(((readtable66_0)(read-config-next-readtable config_6)))"
"(read-config/inner2.1"
" readtable66_0"
"(read-config/inner-next-readtable the-struct_81)"
"(read-config/inner-for-syntax? the-struct_81)"
"(read-config/inner-source the-struct_81)"
"(read-config/inner-read-compiled the-struct_81)"
"(read-config/inner-dynamic-require the-struct_81)"
"(read-config/inner-module-declared? the-struct_81)"
"(read-config/inner-coerce the-struct_81)"
"(read-config/inner-coerce-key the-struct_81)"
"(read-config/inner-parameter-override the-struct_81)"
"(read-config/inner-parameter-cache the-struct_81)"
"(read-config/inner-st the-struct_81)))"
"                                (raise-argument-error 'struct-copy \"read-config/inner?\" the-struct_81)))))"
"(read-config/outer1.1"
" inner65_0"
"(read-config/outer-wrap the-struct_80)"
"(read-config/outer-line the-struct_80)"
"(read-config/outer-col the-struct_80)"
"(read-config/outer-pos the-struct_80)"
"(read-config/outer-indentations the-struct_80)"
"(read-config/outer-keep-comment? the-struct_80)))"
"              (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_80))))))))"
"(define-values"
"(coerce)"
"(lambda(val_67 in_2 config_7)"
"(let-values(((for-syntax?_5)(read-config-for-syntax? config_7)))"
"((read-config-coerce config_7) for-syntax?_5 val_67(if for-syntax?_5(port+config->srcloc in_2 config_7) #f)))))"
"(define-values(default-reader-guard$1)(lambda(v_221) v_221))"
"(define-values"
"(1/current-reader-guard)"
"(make-parameter"
" default-reader-guard$1"
"(lambda(v_222)"
"(begin"
"(if(if(procedure? v_222)(procedure-arity-includes? v_222 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'current-reader-guard \"(procedure-arity-includes/c 1)\" v_222)))"
" v_222))))"
"(define-values(1/read-square-bracket-as-paren)(make-parameter #t(lambda(v_1)(if v_1 #t #f))))"
"(define-values(1/read-curly-brace-as-paren)(make-parameter #t(lambda(v_223)(if v_223 #t #f))))"
"(define-values(1/read-square-bracket-with-tag)(make-parameter #f(lambda(v_8)(if v_8 #t #f))))"
"(define-values(1/read-curly-brace-with-tag)(make-parameter #f(lambda(v_69)(if v_69 #t #f))))"
"(define-values(1/read-cdot)(make-parameter #f(lambda(v_34)(if v_34 #t #f))))"
"(define-values(1/read-accept-graph)(make-parameter #t(lambda(v_70)(if v_70 #t #f))))"
"(define-values(1/read-accept-compiled)(make-parameter #f(lambda(v_2)(if v_2 #t #f))))"
"(define-values(1/read-accept-box)(make-parameter #t(lambda(v_102)(if v_102 #t #f))))"
"(define-values(1/read-accept-dot)(make-parameter #t(lambda(v_35)(if v_35 #t #f))))"
"(define-values(1/read-accept-infix-dot)(make-parameter #t(lambda(v_82)(if v_82 #t #f))))"
"(define-values(1/read-accept-quasiquote)(make-parameter #t(lambda(v_36)(if v_36 #t #f))))"
"(define-values(1/read-accept-reader)(make-parameter #f(lambda(v_3)(if v_3 #t #f))))"
"(define-values(1/read-accept-lang)(make-parameter #t(lambda(v_37)(if v_37 #t #f))))"
"(define-values(unknown)(gensym 'unknown))"
"(define-values"
"(check-parameter)"
"(lambda(param_0 config_8)"
"(let-values(((cache_4)(read-config-parameter-cache config_8)))"
"(let-values(((v_72)"
"(hash-ref(read-config-parameter-override config_8) param_0(hash-ref cache_4 param_0 unknown))))"
"(if(eq? v_72 unknown)"
"(let-values()(let-values(((v_73)(param_0)))(begin(hash-set! cache_4 param_0 v_73) v_73)))"
"(let-values() v_72))))))"
"(define-values"
"(override-parameter)"
"(lambda(param_1 config_9 v_33)"
"(let-values(((v_101) config_9))"
"(let-values(((the-struct_82) v_101))"
"(if(read-config/outer? the-struct_82)"
"(let-values(((inner1_0)"
"(let-values(((the-struct_83)(read-config/outer-inner v_101)))"
"(if(read-config/inner? the-struct_83)"
"(let-values(((parameter-override2_0)"
"(hash-set(read-config-parameter-override config_9) param_1 v_33)))"
"(read-config/inner2.1"
"(read-config/inner-readtable the-struct_83)"
"(read-config/inner-next-readtable the-struct_83)"
"(read-config/inner-for-syntax? the-struct_83)"
"(read-config/inner-source the-struct_83)"
"(read-config/inner-read-compiled the-struct_83)"
"(read-config/inner-dynamic-require the-struct_83)"
"(read-config/inner-module-declared? the-struct_83)"
"(read-config/inner-coerce the-struct_83)"
"(read-config/inner-coerce-key the-struct_83)"
" parameter-override2_0"
"(read-config/inner-parameter-cache the-struct_83)"
"(read-config/inner-st the-struct_83)))"
"                            (raise-argument-error 'struct-copy \"read-config/inner?\" the-struct_83)))))"
"(read-config/outer1.1"
" inner1_0"
"(read-config/outer-wrap the-struct_82)"
"(read-config/outer-line the-struct_82)"
"(read-config/outer-col the-struct_82)"
"(read-config/outer-pos the-struct_82)"
"(read-config/outer-indentations the-struct_82)"
"(read-config/outer-keep-comment? the-struct_82)))"
"          (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_82))))))"
"(define-values"
"(force-parameters!)"
"(lambda(config_10)"
"(let-values(((cache_5)(read-config-parameter-cache config_10)))"
"(if(hash-ref cache_5 'all-forced #f)"
"(void)"
"(let-values()"
"(begin"
"(hash-set! cache_5 'all-forced #t)"
"(check-parameter read-case-sensitive config_10)"
"(check-parameter 1/read-square-bracket-as-paren config_10)"
"(check-parameter 1/read-curly-brace-as-paren config_10)"
"(check-parameter 1/read-square-bracket-with-tag config_10)"
"(check-parameter 1/read-curly-brace-with-tag config_10)"
"(check-parameter 1/read-cdot config_10)"
"(check-parameter 1/read-accept-graph config_10)"
"(check-parameter 1/read-accept-compiled config_10)"
"(check-parameter 1/read-accept-box config_10)"
"(check-parameter read-accept-bar-quote config_10)"
"(check-parameter read-decimal-as-inexact config_10)"
"(check-parameter 1/read-accept-dot config_10)"
"(check-parameter 1/read-accept-infix-dot config_10)"
"(check-parameter 1/read-accept-quasiquote config_10)"
"(check-parameter 1/read-accept-reader config_10)"
"(check-parameter 1/read-accept-lang config_10)))))))"
"(define-values"
"(struct:special-comment 1/make-special-comment 1/special-comment? 1/special-comment-value)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'special-comment"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'special-comment)))))"
"(values struct:_0 make-_0 ?_0(make-struct-field-accessor -ref_0 0 'value))))"
"(define-values"
"(struct:readtable"
" readtable1.1"
" 1/readtable?"
" readtable-symbol-parser"
" readtable-char-ht"
" readtable-dispatch-ht"
" readtable-delimiter-ht)"
"(let-values(((struct:_76 make-_76 ?_76 -ref_76 -set!_76)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'readtable"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:readtable #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'readtable)))))"
"(values"
" struct:_76"
" make-_76"
" ?_76"
"(make-struct-field-accessor -ref_76 0 'symbol-parser)"
"(make-struct-field-accessor -ref_76 1 'char-ht)"
"(make-struct-field-accessor -ref_76 2 'dispatch-ht)"
"(make-struct-field-accessor -ref_76 3 'delimiter-ht))))"
"(define-values"
"(1/make-readtable)"
"(lambda(rt_0 . args_5)"
"(begin"
"(if(let-values(((or-part_95)(not rt_0)))(if or-part_95 or-part_95(1/readtable? rt_0)))"
"(void)"
"        (let-values () (raise-argument-error 'make-readtable \"(or/c readtable? #f)\" rt_0)))"
"((letrec-values(((loop_150)"
"(lambda(args_6 symbol-parser_0 char-ht_0 dispatch-ht_0 delimiter-ht_0)"
"(if(null? args_6)"
"(let-values()(readtable1.1 symbol-parser_0 char-ht_0 dispatch-ht_0 delimiter-ht_0))"
"(let-values()"
"(let-values(((key_75)(car args_6)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_181)(not key_75)))"
"(if or-part_181 or-part_181(char? key_75)))"
"(void)"
"(let-values()"
"                                                    (raise-argument-error 'make-readtable \"(or/c char? #f)\" key_75)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(null? args_6)"
"(let-values()"
"(if key_75"
"(let-values()"
"(raise-arguments-error"
" 'make-readtable"
"(string-append"
"                                                            \"expected 'terminating-macro, 'non-terminating-macro, 'dispatch-macro,\""
"                                                            \" or character argument after character argument\")"
"                                                           \"character\""
" key_75))"
"(let-values()"
"(raise-arguments-error"
" 'make-readtable"
"                                                           \"expected 'non-terminating-macro after #f\"))))"
"(void))"
"(values))))"
"(let-values(((mode_15)(cadr args_6)))"
"(let-values((()"
"(begin"
"(if key_75"
"(let-values()"
"(if(let-values(((or-part_17)"
"(eq? mode_15 'terminating-macro)))"
"(if or-part_17"
" or-part_17"
"(let-values(((or-part_18)"
"(eq? mode_15 'non-terminating-macro)))"
"(if or-part_18"
" or-part_18"
"(let-values(((or-part_19)"
"(eq? mode_15 'dispatch-macro)))"
"(if or-part_19 or-part_19(char? mode_15)))))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                               \"(or/c 'terminating-macro 'non-terminating-macro 'dispatch-macro char?)\""
" mode_15))))"
"(let-values()"
"(if(eq? mode_15 'non-terminating-macro)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'make-readtable"
"                                                               \"expected 'non-terminating-macro after #f\")))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(null?(cddr args_6))"
"(let-values()"
"(raise-arguments-error"
" 'make-readtable"
"(if key_75"
"                                                               \"expected readtable or #f argument after character argument\""
"                                                               \"expected procedure argument after symbol argument\")"
"                                                             \"given\""
" mode_15))"
"(void))"
"(values))))"
"(let-values(((target_0)(caddr args_6)))"
"(let-values(((rest-args_0)(cdddr args_6)))"
"(if(not key_75)"
"(let-values()"
"(begin"
"(if(if(procedure? target_0)"
"(procedure-arity-includes? target_0 6)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                         \"(procedure-arity-includes/c 6)\""
" target_0)))"
"(loop_150"
" rest-args_0"
" target_0"
" char-ht_0"
" dispatch-ht_0"
" delimiter-ht_0)))"
"(if(eq? mode_15 'dispatch-macro)"
"(let-values()"
"(begin"
"(if(if(procedure? target_0)"
"(procedure-arity-includes? target_0 6)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                           \"(procedure-arity-includes/c 6)\""
" target_0)))"
"(loop_150"
" rest-args_0"
" symbol-parser_0"
" char-ht_0"
"(hash-set dispatch-ht_0 key_75 target_0)"
" delimiter-ht_0)))"
"(if(char? mode_15)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_111)(not target_0)))"
"(if or-part_111"
" or-part_111"
"(1/readtable? target_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                                           \"(or/c readtable? #f)\""
" target_0)))"
"(values))))"
"(let-values(((actual-target_0)"
"(let-values(((or-part_182)"
"(if target_0"
"(hash-ref"
"(readtable-char-ht target_0)"
" mode_15"
" #f)"
" #f)))"
"(if or-part_182 or-part_182 mode_15))))"
"(let-values(((new-char-ht_0)"
"(if actual-target_0"
"(hash-set char-ht_0 key_75 actual-target_0)"
"(hash-remove char-ht_0 key_75))))"
"(let-values(((new-delimiter-ht_0)"
"(hash-set"
" delimiter-ht_0"
" key_75"
"(if target_0"
"(hash-ref"
"(readtable-delimiter-ht target_0)"
" mode_15"
" mode_15)"
" mode_15))))"
"(loop_150"
" rest-args_0"
" symbol-parser_0"
" new-char-ht_0"
" dispatch-ht_0"
" new-delimiter-ht_0))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(if(procedure? target_0)"
"(procedure-arity-includes? target_0 6)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                                           \"(procedure-arity-includes/c 6)\""
" target_0)))"
"(values))))"
"(let-values(((new-char-ht_1)"
"(hash-set char-ht_0 key_75 target_0)))"
"(let-values(((new-delimiter-ht_1)"
"(hash-set"
" delimiter-ht_0"
" key_75"
"(if(eq? mode_15 'terminating-macro)"
" 'delimit"
" 'no-delimit))))"
"(loop_150"
" rest-args_0"
" symbol-parser_0"
" new-char-ht_1"
" dispatch-ht_0"
" new-delimiter-ht_1)))))))))))))))))))))"
" loop_150)"
" args_5"
"(if rt_0(readtable-symbol-parser rt_0) #f)"
"(if rt_0(readtable-char-ht rt_0) '#hasheqv())"
"(if rt_0(readtable-dispatch-ht rt_0) '#hasheqv())"
"(if rt_0(readtable-delimiter-ht rt_0) '#hasheqv())))))"
"(define-values"
"(*readtable-effective-char)"
"(lambda(rt_1 c_46)"
"(let-values(((target_1)(hash-ref(readtable-char-ht rt_1) c_46 #f)))"
"(if(not target_1)(let-values() c_46)(if(char? target_1)(let-values() target_1)(let-values() '#\\x))))))"
"(define-values"
"(effective-char)"
"(lambda(c_54 config_11)"
"(let-values(((rt_2)(read-config-readtable config_11))((c_55) c_54))"
"(if(let-values(((or-part_299)(not rt_2)))(if or-part_299 or-part_299(not(char? c_55))))"
"(let-values() c_55)"
"(let-values()(*readtable-effective-char rt_2 c_55))))))"
"(define-values"
"(readtable-handler)"
"(lambda(config_12 c_56)"
"(let-values(((rt_3)(read-config-readtable config_12)))"
"(if rt_3"
"(let-values(((target_2)(hash-ref(readtable-char-ht rt_3) c_56 #f)))"
"(if target_2(if(not(char? target_2)) target_2 #f) #f))"
" #f))))"
"(define-values"
"(readtable-dispatch-handler)"
"(lambda(config_13 c_57)"
"(let-values((()(begin(force-parameters! config_13)(values))))"
"(let-values(((rt_4)(read-config-readtable config_13)))"
"(if rt_4(hash-ref(readtable-dispatch-ht rt_4) c_57 #f) #f)))))"
"(define-values"
"(readtable-apply)"
"(lambda(handler_0 c_58 in_3 config_14 line_3 col_2 pos_106)"
"(let-values(((for-syntax?_6)(read-config-for-syntax? config_14)))"
"(let-values(((v_96)"
"(if(not for-syntax?_6)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-read-config"
" config_14)"
"(let-values()"
"(if(procedure-arity-includes? handler_0 2)"
"(handler_0 c_58 in_3)"
"(handler_0 c_58 in_3 #f #f #f #f)))))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-read-config"
" config_14)"
"(let-values()(handler_0 c_58 in_3(read-config-source config_14) line_3 col_2 pos_106)))))))"
"(if(1/special-comment? v_96) v_96(coerce v_96 in_3 config_14))))))"
"(define-values"
"(1/readtable-mapping)"
"(lambda(rt_5 c_59)"
"(let-values((()"
"(begin"
"(if(1/readtable? rt_5)"
"(void)"
"                      (let-values () (raise-argument-error 'readtable-mapping \"readtable?\" rt_5)))"
"(values))))"
"(let-values((()"
"(begin"
"                      (if (char? c_59) (void) (let-values () (raise-argument-error 'readtable-mapping \"char?\" c_59)))"
"(values))))"
"(let-values(((handler_1)(hash-ref(readtable-char-ht rt_5) c_59 #f)))"
"(values"
"(let-values(((or-part_83)"
"(if handler_1"
"(if(char? handler_1)"
"(let-values() handler_1)"
"(if(eq? 'delimit(hash-ref(readtable-delimiter-ht rt_5) c_59 #f))"
"(let-values() 'terminating-macro)"
"(let-values() 'non-terminating-macro)))"
" #f)))"
"(if or-part_83 or-part_83 c_59))"
"(if(char? handler_1) #f handler_1)"
"(hash-ref(readtable-dispatch-ht rt_5) c_59 #f)))))))"
"(define-values"
"(readtable-equivalent-chars)"
"(lambda(rt_6 c_60)"
"(let-values(((ht_149)(readtable-char-ht rt_6)))"
"(append"
"(if(hash-ref ht_149 c_60 #f) null(list c_60))"
"(let-values(((ht_150) ht_149))"
"(begin"
"(check-in-hash ht_150)"
"((letrec-values(((for-loop_245)"
"(lambda(i_111)"
"(if i_111"
"(let-values(((k_35 v_224)(hash-iterate-key+value ht_150 i_111)))"
"(let-values(((post-guard-var_84)(lambda() #t)))"
"(let-values()"
"(if(eqv? v_224 c_60)"
"(let-values()"
"(let-values(((elem_77)(let-values()(let-values() k_35))))"
"(let-values(((result_170)"
"(if(post-guard-var_84)"
"(for-loop_245(hash-iterate-next ht_150 i_111))"
" null)))"
"(cons elem_77 result_170))))"
"(if(post-guard-var_84)"
"(for-loop_245(hash-iterate-next ht_150 i_111))"
" null)))))"
" null))))"
" for-loop_245)"
"(hash-iterate-first ht_150))))))))"
"(define-values"
"(struct:special special1.1 special? special-value)"
"(let-values(((struct:_77 make-_77 ?_77 -ref_77 -set!_77)"
"(let-values()"
"(let-values()(make-struct-type 'special #f 1 0 #f null(current-inspector) #f '(0) #f 'special)))))"
"(values struct:_77 make-_77 ?_77(make-struct-field-accessor -ref_77 0 'value))))"
"(define-values"
"(wrap)"
"(lambda(s-exp_2 in_2 config_7 rep_0)"
"(let-values(((wrap_6)(read-config-wrap config_7)))"
"(if wrap_6(wrap_6 s-exp_2(port+config->srcloc in_2 config_7) rep_0) s-exp_2))))"
"(define-values(consume-char)(lambda(in_4 c_33)(begin(read-char in_4)(void))))"
"(define-values"
"(consume-char/special)"
"(lambda(in_5 config_15 c_34)(begin(read-char-or-special in_5 special1.1(read-config-source config_15))(void))))"
"(define-values"
"(reader-error10.1)"
"(lambda(continuation-marks1_0"
" continuation-marks4_0"
" due-to2_0"
" due-to5_0"
" who3_1"
" who6_0"
" in7_0"
" config8_0"
" str9_0"
" new-rest_0)"
"(let-values(((in_6) in7_0))"
"(let-values(((config_16) config8_0))"
"(let-values(((continuation-marks_0)"
"(if continuation-marks4_0 continuation-marks1_0(current-continuation-marks))))"
"(let-values(((due-to_0)(if due-to5_0 due-to2_0 '#\\x)))"
"(let-values(((who_23)(if who6_0 who3_1(if(read-config-for-syntax? config_16) 'read-syntax 'read))))"
"(let-values(((str_25) str9_0))"
"(let-values(((args_7) new-rest_0))"
"                  (let-values (((msg_0) (format \"~a: ~a\" who_23 (apply format str_25 args_7))))"
"(let-values(((srcloc_9)(if in_6(port+config->srcloc in_6 config_16) #f)))"
"(raise"
"((if(eof-object? due-to_0)"
"(let-values() exn:fail:read:eof)"
"(if(not(char? due-to_0))"
"(let-values() exn:fail:read:non-char)"
"(let-values() exn:fail:read)))"
"(let-values(((s_160)"
"(if(error-print-source-location)(if srcloc_9(srcloc->string srcloc_9) #f) #f)))"
"                          (if s_160 (string-append s_160 \": \" msg_0) msg_0))"
" continuation-marks_0"
"(if srcloc_9(list srcloc_9) null))))))))))))))"
"(define-values"
"(bad-syntax-error18.1)"
"(lambda(due-to13_0 due-to14_0 in15_0 config16_0 str17_0)"
"(let-values(((in_7) in15_0))"
"(let-values(((config_17) config16_0))"
"(let-values(((str_26) str17_0))"
"(let-values(((due-to_1)(if due-to14_0 due-to13_0 '#\\x)))"
"(let-values()"
"              (let-values (((due-to23_0) due-to_1) ((temp24_5) \"bad syntax `~a`\") ((str25_0) str_26))"
"(reader-error10.1 #f #f due-to23_0 #t #f #f in_7 config_17 temp24_5(list str25_0))))))))))"
"(define-values"
"(catch-and-reraise-as-reader/proc)"
"(lambda(in_8 config_18 thunk_4)"
"(let-values(((with-handlers-predicate26_0) exn:fail?)"
"((with-handlers-handler27_0)"
"(lambda(exn_2)"
"                    (let-values (((temp30_2) \"~a\")"
"((temp31_3)"
"                                  (let-values (((s_441) (exn-message exn_2))) (regexp-replace \"^[a-z-]*: \" s_441 \"\")))"
"((temp32_4)(exn-continuation-marks exn_2)))"
"(reader-error10.1 temp32_4 #t #f #f #f #f in_8 config_18 temp30_2(list temp31_3))))))"
"(let-values(((bpz_3)(continuation-mark-set-first #f break-enabled-key)))"
"(call-handled-body"
" bpz_3"
"(lambda(e_76)"
"(select-handler/no-breaks e_76 bpz_3(list(cons with-handlers-predicate26_0 with-handlers-handler27_0))))"
"(lambda()(thunk_4)))))))"
"(define-values"
"(port-next-location*)"
"(lambda(in_4 init-c_0)"
"(if(not init-c_0)"
"(let-values()(port-next-location in_4))"
"(let-values()"
"(let-values(((line_4 col_3 pos_107)(port-next-location in_4)))"
"(values line_4(if col_3(max 0(sub1 col_3)) #f)(if pos_107(max 1(sub1 pos_107)) #f)))))))"
"(define-values"
"(read-char/skip-whitespace-and-comments)"
"(lambda(init-c_1 read-one_0 in_5 config_15)"
"(let-values(((rt_7)(read-config-readtable config_15)))"
"(let-values(((source_3)(read-config-source config_15)))"
"((letrec-values(((skip-loop_0)"
"(lambda(init-c_2)"
"(let-values(((c_37)"
"(let-values(((or-part_3) init-c_2))"
"(if or-part_3"
" or-part_3"
"(let-values(((in_9) in_5)((source_4) source_3))"
"(read-char-or-special in_9 special1.1 source_4))))))"
"(let-values(((ec_0)"
"(let-values(((rt_8) rt_7)((c_61) c_37))"
"(if(let-values(((or-part_294)(not rt_8)))"
"(if or-part_294 or-part_294(not(char? c_61))))"
"(let-values() c_61)"
"(let-values()(*readtable-effective-char rt_8 c_61))))))"
"(if(eof-object? ec_0)"
"(let-values() c_37)"
"(if(not(char? ec_0))"
"(let-values()"
"(let-values(((v_1)(special-value c_37)))"
"(if(if(1/special-comment? v_1)(not(read-config-keep-comment? config_15)) #f)"
"(let-values()(skip-loop_0 #f))"
"(let-values() c_37))))"
"(if(char-whitespace? ec_0)"
"(let-values()(skip-loop_0 #f))"
"(if(char=? '#\\; ec_0)"
"(let-values()"
"(begin"
"((letrec-values(((loop_128)"
"(lambda()"
"(let-values(((c_49)"
"(let-values(((in_10) in_5)"
"((source_5) source_3))"
"(read-char-or-special"
" in_10"
" special1.1"
" source_5))))"
"(if(let-values(((or-part_13)(eof-object? c_49)))"
"(if or-part_13"
" or-part_13"
"(eqv?"
" '#\\newline"
"(effective-char c_49 config_15))))"
"(void)"
"(let-values()(loop_128)))))))"
" loop_128))"
"(if(read-config-keep-comment? config_15)"
"(result-special-comment)"
"(skip-loop_0 #f))))"
"(if(if(char=? '#\\# ec_0)"
"(eqv?"
" '#\\|"
"(let-values(((in_11) in_5)((skip-count_0) 0)((source_6) source_3))"
"(peek-char-or-special in_11 skip-count_0 special1.1 source_6)))"
" #f)"
"(let-values()"
"(begin"
"(skip-pipe-comment! c_37 in_5 config_15)"
"(if(read-config-keep-comment? config_15)"
"(result-special-comment)"
"(skip-loop_0 #f))))"
"(if(if(char=? '#\\# ec_0)"
"(if(eqv?"
" '#\\!"
"(let-values(((in_6) in_5)"
"((skip-count_1) 0)"
"((source_7) source_3))"
"(peek-char-or-special in_6 skip-count_1 special1.1 source_7)))"
"(let-values(((c3_1)"
"(let-values(((in_12) in_5)"
"((skip-count_2) 1)"
"((source_8) source_3))"
"(peek-char-or-special"
" in_12"
" skip-count_2"
" special1.1"
" source_8))))"
"(let-values(((or-part_82)(eqv? '#\\space c3_1)))"
"(if or-part_82 or-part_82(eqv? '#\\/ c3_1))))"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(skip-unix-line-comment! in_5 config_15)"
"(if(read-config-keep-comment? config_15)"
"(result-special-comment)"
"(skip-loop_0 #f))))"
"(if(if(char=? '#\\# ec_0)"
"(eqv?"
" '#\\;"
"(let-values(((in_13) in_5)((skip-count_3) 0)((source_9) source_3))"
"(peek-char-or-special in_13 skip-count_3 special1.1 source_9)))"
" #f)"
"(let-values()"
"(let-values((()(begin(consume-char in_5 '#\\;)(values))))"
"(let-values(((v_225)(read-one_0 #f in_5 config_15)))"
"(begin"
"(if(eof-object? v_225)"
"(let-values()"
"(let-values(((v3_0) v_225)"
"((temp4_3)"
"                                                                        \"expected a commented-out element for `~a;', but found end-of-file\")"
"((ec5_0) ec_0))"
"(reader-error10.1"
" #f"
" #f"
" v3_0"
" #t"
" #f"
" #f"
" in_5"
" config_15"
" temp4_3"
"(list ec5_0))))"
"(void))"
"(if(read-config-keep-comment? config_15)"
"(result-special-comment)"
"(skip-loop_0 #f))))))"
"(let-values() c_37)))))))))))))"
" skip-loop_0)"
" init-c_1)))))"
"(define-values(result-special-comment)(lambda()(special1.1(1/make-special-comment #f))))"
"(define-values"
"(skip-pipe-comment!)"
"(lambda(init-c_3 in_14 config_19)"
"(let-values(((source_10)(read-config-source config_19)))"
"(let-values(((line_5 col_4 pos_108)(port-next-location in_14)))"
"(begin"
"(consume-char in_14 '#\\|)"
"((letrec-values(((loop_151)"
"(lambda(prev-c_0 depth_10)"
"(let-values(((c_62)"
"(let-values(((in_15) in_14)((source_11) source_10))"
"(read-char-or-special in_15 special1.1 source_11))))"
"(if(eof-object? c_62)"
"(let-values()"
"(let-values(((temp7_2)(reading-at config_19 line_5 col_4 pos_108))"
"((c8_0) c_62)"
"                                                 ((temp9_2) \"end of file in `#|` comment\"))"
"(reader-error10.1 #f #f c8_0 #t #f #f in_14 temp7_2 temp9_2(list))))"
"(if(not(char? c_62))"
"(let-values()(loop_151 #f depth_10))"
"(if(if(char=? '#\\| c_62)(eqv? prev-c_0 '#\\#) #f)"
"(let-values()(loop_151 #f(add1 depth_10)))"
"(if(if(char=? '#\\# c_62)(eqv? prev-c_0 '#\\|) #f)"
"(let-values()"
"(if(positive? depth_10)"
"(let-values()(loop_151 #f(sub1 depth_10)))"
"(void)))"
"(let-values()(loop_151 c_62 depth_10))))))))))"
" loop_151)"
" #f"
" 0))))))"
"(define-values"
"(skip-unix-line-comment!)"
"(lambda(in_16 config_20)"
"((letrec-values(((loop_152)"
"(lambda(backslash?_0)"
"(let-values(((c_63)"
"(let-values(((in_17) in_16)((source_12)(read-config-source config_20)))"
"(read-char-or-special in_17 special1.1 source_12))))"
"(if(eof-object? c_63)"
"(let-values()(void))"
"(if(not(char? c_63))"
"(let-values()(loop_152 #f))"
"(if(char=? c_63 '#\\newline)"
"(let-values()(if backslash?_0(let-values()(loop_152 #f))(void)))"
"(if(char=? c_63 '#\\\\)"
"(let-values()(loop_152 #t))"
"(let-values()(loop_152 #f))))))))))"
" loop_152)"
" #f)))"
"(define-values"
"(readtable-char-delimiter?)"
"(lambda(rt_9 c_33 config_7)"
"(let-values(((dc_0)"
"(let-values(((or-part_2)(if rt_9(hash-ref(readtable-delimiter-ht rt_9) c_33 #f) #f)))"
"(if or-part_2 or-part_2 c_33))))"
"(if(eq? dc_0 'no-delimit)"
"(let-values() #f)"
"(if(not(char? dc_0))"
"(let-values() #t)"
"(let-values()"
"(let-values(((or-part_39)(char-whitespace? dc_0)))"
"(if or-part_39"
" or-part_39"
"(let-values(((or-part_300)(char=? dc_0 '#\\()))"
"(if or-part_300"
" or-part_300"
"(let-values(((or-part_284)(char=? dc_0 '#\\))))"
"(if or-part_284"
" or-part_284"
"(let-values(((or-part_25)(char=? dc_0 '#\\[)))"
"(if or-part_25"
" or-part_25"
"(let-values(((or-part_8)(char=? dc_0 '#\\])))"
"(if or-part_8"
" or-part_8"
"(let-values(((or-part_3)(char=? dc_0 '#\\{)))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(char=? dc_0 '#\\})))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_10)(char=? dc_0 '#\\')))"
"(if or-part_10"
" or-part_10"
"(let-values(((or-part_149)(char=? dc_0 '#\\`)))"
"(if or-part_149"
" or-part_149"
"(let-values(((or-part_11)(char=? dc_0 '#\\,)))"
"(if or-part_11"
" or-part_11"
"(let-values(((or-part_293)(char=? dc_0 '#\\;)))"
"(if or-part_293"
" or-part_293"
"                                                        (let-values (((or-part_294) (char=? dc_0 '#\\\")))"
"(if or-part_294"
" or-part_294"
"(if(char=? dc_0 '#\\.)"
"(check-parameter 1/read-cdot config_7)"
" #f)))))))))))))))))))))))))))))))"
"(define-values"
"(char-delimiter?)"
"(lambda(c_15 config_21)(readtable-char-delimiter?(read-config-readtable config_21) c_15 config_21)))"
"(define-values"
"(char-closer?)"
"(lambda(ec_1 config_8)"
"(if(not(eof-object? ec_1))"
"(let-values(((or-part_1)(char=? ec_1 '#\\))))"
"(if or-part_1"
" or-part_1"
"(let-values(((or-part_9)(char=? ec_1 '#\\])))(if or-part_9 or-part_9(char=? ec_1 '#\\})))))"
" #f)))"
" (define-values (closer-name) (lambda (c_34 config_22) (effective-char-names c_34 config_22 \"closer\")))"
" (define-values (opener-name) (lambda (c_35 config_23) (effective-char-names c_35 config_23 \"opener\")))"
"(define-values"
"(effective-char-names)"
"(lambda(c_37 config_24 fallback-str_0)"
"(let-values(((rt_10)(read-config-readtable config_24)))"
"(if(not rt_10)"
"        (let-values () (format \"`~a`\" c_37))"
"(let-values()"
"(let-values(((cs_1)(readtable-equivalent-chars rt_10 c_37)))"
"(if(null? cs_1)"
"(let-values() fallback-str_0)"
"(if(null?(cdr cs_1))"
"                (let-values () (format \"`~a`\" (car cs_1)))"
"(if(null?(cddr cs_1))"
"                  (let-values () (format \"`~a` or `~a`\" (car cs_1) (cadr cs_1)))"
"(let-values()"
"(apply"
" string-append"
"((letrec-values(((loop_153)"
"(lambda(cs_2)"
"(if(null?(cdr cs_2))"
"                                           (let-values () (list (format \"or `~a`\" (car cs_2))))"
"                                           (let-values () (cons (format \"`~a`, \" (car cs_2)) (loop_153 (cdr cs_2))))))))"
" loop_153)"
" cs_1))))))))))))"
"(define-values"
"(closer->opener)"
"(lambda(c_61)"
"(let-values(((tmp_36) c_61))"
"(if(equal? tmp_36 '#\\))"
"(let-values() '#\\()"
"(if(equal? tmp_36 '#\\])"
"(let-values() '#\\[)"
"(if(equal? tmp_36 '#\\})(let-values() '#\\{)(let-values() c_61)))))))"
" (define-values (dot-name) (lambda (config_25) \"`.`\"))"
"(define-values"
"(all-openers-str)"
"(lambda(config_21)"
"(let-values(((p_54)(opener-name '#\\( config_21)))"
"(let-values(((s_9)"
"(if(check-parameter 1/read-square-bracket-as-paren config_21)(opener-name '#\\[ config_21) #f)))"
"(let-values(((c_50)"
"(if(check-parameter 1/read-curly-brace-as-paren config_21)(opener-name '#\\{ config_21) #f)))"
"(if(if s_9 c_50 #f)"
"            (let-values () (format \"~a, ~a, or ~a\" p_54 s_9 c_50))"
"(if(let-values(((or-part_291) s_9))(if or-part_291 or-part_291 c_50))"
"              (let-values () (format \"~a or ~a\" p_54 (let-values (((or-part_13) s_9)) (if or-part_13 or-part_13 c_50))))"
"(let-values() p_54))))))))"
"(define-values"
"(struct:accum-string"
" accum-string1.1"
" accum-string?"
" accum-string-pos"
" accum-string-str"
" set-accum-string-pos!"
" set-accum-string-str!)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type 'accum-string #f 2 0 #f null(current-inspector) #f '() #f 'accum-string)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'pos)"
"(make-struct-field-accessor -ref_0 1 'str)"
"(make-struct-field-mutator -set!_0 0 'pos)"
"(make-struct-field-mutator -set!_0 1 'str))))"
"(define-values"
"(accum-string-init!)"
"(lambda(config_26)"
"(let-values(((st_1)(read-config-st config_26)))"
"(let-values(((a_63)(read-config-state-accum-str st_1)))"
"(if a_63"
"(let-values()(begin(set-read-config-state-accum-str! st_1 #f)(set-accum-string-pos! a_63 0) a_63))"
"(let-values()(accum-string1.1 0(make-string 32))))))))"
"(define-values"
"(accum-string-add!)"
"(lambda(a_64 c_64)"
"(let-values(((pos_109)(accum-string-pos a_64)))"
"(let-values(((str_27)(accum-string-str a_64)))"
"(let-values(((str2_0)"
"(if(< pos_109(string-length str_27))"
"(let-values() str_27)"
"(let-values()"
"(let-values(((str2_1)(make-string(*(string-length str_27) 2))))"
"(begin(string-copy! str2_1 0 str_27)(set-accum-string-str! a_64 str2_1) str2_1))))))"
"(begin(string-set! str2_0 pos_109 c_64)(set-accum-string-pos! a_64(add1 pos_109))))))))"
"(define-values(accum-string-count)(lambda(a_65)(accum-string-pos a_65)))"
"(define-values(set-accum-string-count!)(lambda(a_66 pos_110)(set-accum-string-pos! a_66 pos_110)))"
"(define-values"
"(accum-string-convert!)"
"(lambda(a_67 convert_1 start-pos_6)"
"(let-values(((str_28)(accum-string-str a_67)))"
"(let-values(((s_77)(convert_1(substring str_28 start-pos_6(accum-string-pos a_67)))))"
"(let-values(((len_34)(string-length s_77)))"
"(begin"
"(if(<(+ len_34 start-pos_6)(string-length str_28))"
"(void)"
"(let-values()"
"(let-values(((str2_2)(make-string(+ start-pos_6 len_34))))"
"(begin(string-copy! str2_2 0 str_28 0 start-pos_6)(set-accum-string-str! a_67 str2_2)))))"
"(string-copy!(accum-string-str a_67) start-pos_6 s_77)"
"(set-accum-string-pos! a_67(+ start-pos_6 len_34))))))))"
"(define-values"
"(accum-string-get!6.1)"
"(lambda(start-pos2_0 start-pos3_0 a4_0 config5_0)"
"(let-values(((a_1) a4_0))"
"(let-values(((config_27) config5_0))"
"(let-values(((start-pos_7)(if start-pos3_0 start-pos2_0 0)))"
"(let-values()"
"(let-values(((s_86)(substring(accum-string-str a_1) start-pos_7(accum-string-pos a_1))))"
"(begin(accum-string-abandon! a_1 config_27) s_86))))))))"
"(define-values"
"(accum-string-get-bytes!13.1)"
"(lambda(start-pos9_0 start-pos10_0 a11_0 config12_0)"
"(let-values(((a_60) a11_0))"
"(let-values(((config_28) config12_0))"
"(let-values(((start-pos_8)(if start-pos10_0 start-pos9_0 0)))"
"(let-values()"
"(let-values(((bstr_3)"
"(string->bytes/latin-1(accum-string-str a_60) #f start-pos_8(accum-string-pos a_60))))"
"(begin(accum-string-abandon! a_60 config_28) bstr_3))))))))"
"(define-values"
"(accum-string-abandon!)"
"(lambda(a_68 config_29)(set-read-config-state-accum-str!(read-config-st config_29) a_68)))"
"(define-values"
"(struct:indentation"
" indentation1.1"
" indentation?"
" indentation-closer"
" indentation-suspicious-closer"
" indentation-multiline?"
" indentation-start-line"
" indentation-last-line"
" indentation-suspicious-line"
" indentation-max-indent"
" indentation-suspicious-quote"
" set-indentation-suspicious-closer!"
" set-indentation-multiline?!"
" set-indentation-last-line!"
" set-indentation-suspicious-line!"
" set-indentation-max-indent!"
" set-indentation-suspicious-quote!)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type 'indentation #f 8 0 #f null(current-inspector) #f '(0 3) #f 'indentation)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'closer)"
"(make-struct-field-accessor -ref_0 1 'suspicious-closer)"
"(make-struct-field-accessor -ref_0 2 'multiline?)"
"(make-struct-field-accessor -ref_0 3 'start-line)"
"(make-struct-field-accessor -ref_0 4 'last-line)"
"(make-struct-field-accessor -ref_0 5 'suspicious-line)"
"(make-struct-field-accessor -ref_0 6 'max-indent)"
"(make-struct-field-accessor -ref_0 7 'suspicious-quote)"
"(make-struct-field-mutator -set!_0 1 'suspicious-closer)"
"(make-struct-field-mutator -set!_0 2 'multiline?)"
"(make-struct-field-mutator -set!_0 4 'last-line)"
"(make-struct-field-mutator -set!_0 5 'suspicious-line)"
"(make-struct-field-mutator -set!_0 6 'max-indent)"
"(make-struct-field-mutator -set!_0 7 'suspicious-quote))))"
"(define-values"
"(make-indentation)"
"(lambda(closer_0 in_18 config_30)"
"(let-values(((line_6 col_5 pos_95)(port-next-location in_18)))"
"(indentation1.1 closer_0 #f #f line_6 line_6 #f(if col_5(add1 col_5) #f) #f))))"
"(define-values"
"(track-indentation!)"
"(lambda(config_31 line_7 col_6)"
"(let-values(((indts_0)(read-config-indentations config_31)))"
"(let-values(((indt_0)(if(pair? indts_0)(car indts_0) #f)))"
"(if(if indt_0"
"(if line_7(if(indentation-last-line indt_0)(> line_7(indentation-last-line indt_0)) #f) #f)"
" #f)"
"(let-values()"
"(begin"
"(set-indentation-last-line! indt_0 line_7)"
"(set-indentation-multiline?! indt_0 #t)"
"(if(>= col_6(indentation-max-indent indt_0))"
"(let-values()(set-indentation-max-indent! indt_0 col_6))"
"(let-values()"
"(if(indentation-suspicious-line indt_0)"
"(void)"
"(let-values()"
"(begin"
"(set-indentation-suspicious-closer! indt_0(indentation-closer indt_0))"
"(set-indentation-suspicious-line! indt_0 line_7))))))))"
"(void))))))"
"(define-values"
"(indentation-possible-cause)"
"(lambda(config_32)"
"(let-values(((indt_1)(car(read-config-indentations config_32))))"
"(if(indentation-suspicious-line indt_1)"
"(let-values()"
"(format"
"           \"\\n  possible cause: indentation suggests a missing ~a before line ~a\""
"(closer-name(indentation-suspicious-closer indt_1) config_32)"
"(indentation-suspicious-line indt_1)))"
"        (let-values () \"\")))))"
"(define-values"
"(indentation-unexpected-closer-message)"
"(lambda(ec_2 c_65 config_33)"
"(let-values(((indts_1)(read-config-indentations config_33)))"
"(if(null? indts_1)"
"        (let-values () (format \"unexpected `~a`\" c_65))"
"(let-values()"
"(let-values(((indt_2)(car indts_1)))"
"(string-append"
"(if(char=? ec_2(indentation-closer indt_2))"
"               (let-values () (format \"unexpected `~a`\" c_65))"
"(let-values()"
"(let-values(((missing_2)"
"(let-values(((or-part_301)"
"(let-values(((lst_289)(cdr indts_1)))"
"(begin"
"(check-list lst_289)"
"((letrec-values(((for-loop_28)"
"(lambda(result_44 lst_90)"
"(if(pair? lst_90)"
"(let-values(((indt_3)(unsafe-car lst_90))"
"((rest_44)(unsafe-cdr lst_90)))"
"(let-values(((result_171)"
"(let-values()"
"(let-values(((result_82)"
"(let-values()"
"(let-values()"
"(if(char=?"
" ec_2"
"(indentation-closer"
" indt_3))"
"                                                                                                             \"missing\""
" #f)))))"
"(values result_82)))))"
"(if(if(not"
"((lambda x_118 result_171) indt_3))"
"(not #f)"
" #f)"
"(for-loop_28 result_171 rest_44)"
" result_171)))"
" result_44))))"
" for-loop_28)"
" #f"
" lst_289)))))"
"                                 (if or-part_301 or-part_301 \"expected\"))))"
"(let-values(((opener-str_0)(opener-name(closer->opener(indentation-closer indt_2)) config_33)))"
"(format"
"                      \"~a ~a to close ~a, found instead `~a`\""
" missing_2"
"(closer-name(indentation-closer indt_2) config_33)"
"(if(indentation-multiline? indt_2)"
"                        (let-values () (format \"~a on line ~a\" opener-str_0 (indentation-start-line indt_2)))"
"                        (let-values () (format \"preceding ~a\" opener-str_0)))"
" c_65)))))"
"(indentation-possible-cause config_33))))))))"
"(define-values"
"(read-unwrapped-sequence17.1)"
"(lambda(dot-mode2_0"
" dot-mode7_0"
" elem-config1_0"
" elem-config6_0"
" first-read-one5_0"
" first-read-one10_0"
" shape-tag?3_0"
" shape-tag?8_0"
" whitespace-read-one4_0"
" whitespace-read-one9_0"
" read-one11_0"
" opener-c12_0"
" opener13_0"
" closer14_0"
" in15_1"
" seq-config16_0)"
"(let-values(((read-one_1) read-one11_0))"
"(let-values(((opener-c_0) opener-c12_0))"
"(let-values(((opener_0) opener13_0))"
"(let-values(((closer_1) closer14_0))"
"(let-values(((in_10) in15_1))"
"(let-values(((seq-config_0) seq-config16_0))"
"(let-values(((elem-config_0)(if elem-config6_0 elem-config1_0(next-readtable seq-config_0))))"
"(let-values(((dot-mode_0)(if dot-mode7_0 dot-mode2_0 'all)))"
"(let-values(((shape-tag?_0)(if shape-tag?8_0 shape-tag?3_0 #f)))"
"(let-values(((whitespace-read-one_0)"
"(if whitespace-read-one9_0 whitespace-read-one4_0 read-one_1)))"
"(let-values(((first-read-one_0)(if first-read-one10_0 first-read-one5_0 read-one_1)))"
"(let-values()"
"(let-values(((head_0) #f))"
"(let-values(((indentation_0)(make-indentation closer_1 in_10 seq-config_0)))"
"(let-values(((config_16)"
"(let-values(((v_5) elem-config_0))"
"(let-values(((the-struct_84) v_5))"
"(if(read-config/outer? the-struct_84)"
"(let-values(((indentations20_0)"
"(cons"
" indentation_0"
"(read-config-indentations seq-config_0)))"
"((inner21_0)(read-config/outer-inner v_5)))"
"(read-config/outer1.1"
" inner21_0"
"(read-config/outer-wrap the-struct_84)"
"(read-config/outer-line the-struct_84)"
"(read-config/outer-col the-struct_84)"
"(read-config/outer-pos the-struct_84)"
" indentations20_0"
"(read-config/outer-keep-comment? the-struct_84)))"
"(raise-argument-error"
" 'struct-copy"
"                                                     \"read-config/outer?\""
" the-struct_84))))))"
"(let-values(((config/keep-comment_0)(keep-comment config_16)))"
"(let-values(((read-one/not-eof_0)"
"(lambda(init-c_4 read-one_2 config_34)"
"(let-values(((e_77)(read-one_2 init-c_4 in_10 config_34)))"
"(begin"
"(if(eof-object? e_77)"
"(let-values()"
"(let-values(((e24_0) e_77)"
"                                                                         ((temp25_3) \"expected a ~a to close `~a`~a\")"
"((temp26_2)(closer-name closer_1 config_34))"
"((opener-c27_0) opener-c_0)"
"((temp28_0)"
"(indentation-possible-cause config_34)))"
"(reader-error10.1"
" #f"
" #f"
" e24_0"
" #t"
" #f"
" #f"
" in_10"
" config_34"
" temp25_3"
"(list temp26_2 opener-c27_0 temp28_0))))"
"(void))"
" e_77)))))"
"(let-values(((seq_0)"
"((letrec-values(((loop_154)"
"(lambda(depth_11"
" accum_0"
" init-c_5"
" first?_1"
" first-read-one_1)"
"(let-values(((c_66)"
"(read-char/skip-whitespace-and-comments"
" init-c_5"
" whitespace-read-one_0"
" in_10"
" seq-config_0)))"
"(let-values(((ec_3)"
"(effective-char"
" c_66"
" seq-config_0)))"
"(if(eqv? ec_3 closer_1)"
"(let-values()"
"(if(null? accum_0)"
" null"
"(reverse$1 accum_0)))"
"(if(if(not first?_1)"
"(if(eqv? ec_3 '#\\.)"
"(if(check-parameter"
" 1/read-accept-dot"
" config_16)"
"(char-delimiter?"
"(let-values(((in_19) in_10)"
"((skip-count_4) 0)"
"((source_13)"
"(read-config-source"
" config_16)))"
"(peek-char-or-special"
" in_19"
" skip-count_4"
" special1.1"
" source_13))"
" seq-config_0)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((dot-line_0"
" dot-col_0"
" dot-pos_0)"
"(port-next-location*"
" in_10"
" c_66)))"
"(let-values((()"
"(begin"
"(track-indentation!"
" config_16"
" dot-line_0"
" dot-col_0)"
"(values))))"
"(let-values((()"
"(begin"
"(if(if dot-mode_0"
"(not head_0)"
" #f)"
"(void)"
"(let-values()"
"(let-values(((in29_1)"
" in_10)"
"((temp30_3)"
"(reading-at"
" config_16"
" dot-line_0"
" dot-col_0"
" dot-pos_0))"
"((temp31_4)"
"                                                                                                                        \"illegal use of `.`\"))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in29_1"
" temp30_3"
" temp31_4"
"(list)))))"
"(values))))"
"(let-values(((v_40)"
"(read-one/not-eof_0"
" #f"
" first-read-one_1"
" config_16)))"
"(let-values(((rest-c_0)"
"(read-char/skip-whitespace-and-comments"
" #f"
" whitespace-read-one_0"
" in_10"
" seq-config_0)))"
"(let-values(((rest-ec_0)"
"(effective-char"
" rest-c_0"
" seq-config_0)))"
"(if(eqv?"
" rest-ec_0"
" closer_1)"
"(let-values()"
"(if(null? accum_0)"
" v_40"
"(append"
"(reverse$1 accum_0)"
" v_40)))"
"(if(if(eqv?"
" rest-ec_0"
" '#\\.)"
"(if(check-parameter"
" 1/read-accept-dot"
" config_16)"
"(if(check-parameter"
" 1/read-accept-infix-dot"
" config_16)"
"(char-delimiter?"
"(let-values(((in_17)"
" in_10)"
"((skip-count_5)"
" 0)"
"((source_14)"
"(read-config-source"
" config_16)))"
"(peek-char-or-special"
" in_17"
" skip-count_5"
" special1.1"
" source_14))"
" seq-config_0)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(set! head_0"
"(box"
" v_40))"
"(values))))"
"(let-values(((dot2-line_0"
" dot2-col_0"
" dot2-pos_0)"
"(port-next-location"
" in_10)))"
"(let-values((()"
"(begin"
"(track-indentation!"
" config_16"
" dot2-line_0"
" dot2-col_0)"
"(values))))"
"(let-values(((post-c_0)"
"(read-char/skip-whitespace-and-comments"
" #f"
" whitespace-read-one_0"
" in_10"
" seq-config_0)))"
"(let-values(((post-ec_0)"
"(effective-char"
" post-c_0"
" seq-config_0)))"
"(begin"
"(if(let-values(((or-part_302)"
"(eof-object?"
" post-ec_0)))"
"(if or-part_302"
" or-part_302"
"(eqv?"
" post-ec_0"
" closer_1)))"
"(let-values()"
"(let-values(((temp33_2)"
"(reading-at"
" config_16"
" dot-line_0"
" dot-col_0"
" dot-pos_0))"
"((post-ec34_0)"
" post-ec_0)"
"((temp35_2)"
"                                                                                                                                  \"illegal use of `.`\"))"
"(reader-error10.1"
" #f"
" #f"
" post-ec34_0"
" #t"
" #f"
" #f"
" in_10"
" temp33_2"
" temp35_2"
"(list))))"
"(void))"
"(loop_154"
" depth_11"
" accum_0"
" post-c_0"
" #f"
" read-one_1))))))))"
"(let-values()"
"(let-values(((temp37_2)"
"(reading-at"
" config_16"
" dot-line_0"
" dot-col_0"
" dot-pos_0))"
"((rest-c38_0)"
" rest-c_0)"
"((temp39_4)"
"                                                                                                                  \"illegal use of `.`\"))"
"(reader-error10.1"
" #f"
" #f"
" rest-c38_0"
" #t"
" #f"
" #f"
" in_10"
" temp37_2"
" temp39_4"
"(list)))))))))))))"
"(let-values()"
"(let-values(((v_62)"
"(read-one/not-eof_0"
" c_66"
" first-read-one_1"
" config/keep-comment_0)))"
"(if(1/special-comment? v_62)"
"(let-values()"
"(loop_154"
" depth_11"
" accum_0"
" #f"
" #f"
" read-one_1))"
"(if(> depth_11 1024)"
"(let-values()"
"(loop_154"
" depth_11"
"(cons v_62 accum_0)"
" #f"
" #f"
" read-one_1))"
"(let-values()"
"(cons"
" v_62"
"(loop_154"
"(add1 depth_11)"
" null"
" #f"
" #f"
" read-one_1))))))))))))))"
" loop_154)"
" 0"
" null"
" #f"
" #t"
" first-read-one_0)))"
"(let-values(((full-seq_0)(if head_0(cons(unbox head_0) seq_0) seq_0)))"
"(if shape-tag?_0"
"(add-shape-tag opener_0 in_10 config_16 full-seq_0)"
" full-seq_0))))))))))))))))))))))"
"(define-values"
"(add-shape-tag)"
"(lambda(opener_1 in_20 config_35 seq_1)"
"(let-values(((tag_0)"
"(let-values(((tmp_37) opener_1))"
"(if(equal? tmp_37 '#\\[)"
"(let-values()(if(check-parameter 1/read-square-bracket-with-tag config_35) '#%brackets #f))"
"(if(equal? tmp_37 '#\\{)"
"(let-values()(if(check-parameter 1/read-curly-brace-with-tag config_35) '#%braces #f))"
"(let-values() #f))))))"
"(if tag_0(cons(wrap tag_0 in_20 config_35 #f) seq_1) seq_1))))"
" (define-values (not-an-fX.1$1) (lambda (who_24 v_226) (raise-argument-error who_24 \"fixnum?\" v_226)))"
" (define-values (not-an-fX.1) (lambda (who_24 v_226) (raise-argument-error who_24 \"flonum?\" v_226)))"
"(define-values"
"(read-digits13.1)"
"(lambda(base1_0"
" init3_0"
" init7_0"
" max-count2_0"
" zero-digits-result4_0"
" zero-digits-result8_0"
" in11_0"
" config12_1"
" accum-str9_0"
" accum-str10_0)"
"(let-values(((in_21) in11_0))"
"(let-values(((config_36) config12_1))"
"(let-values(((accum-str_0)(if accum-str10_0 accum-str9_0 #f)))"
"(let-values(((base_25) base1_0))"
"(let-values(((max-count_0) max-count2_0))"
"(let-values(((init-v_0)(if init7_0 init3_0 0)))"
"(let-values(((zero-digits-result_0)(if zero-digits-result8_0 zero-digits-result4_0 #f)))"
"(let-values()"
"(let-values(((c_67)"
"(let-values(((in_22) in_21)"
"((skip-count_6) 0)"
"((source_15)(read-config-source config_36)))"
"(peek-char-or-special in_22 skip-count_6 special1.1 source_15))))"
"(if(digit? c_67 base_25)"
"(let-values()"
"(begin"
"(consume-char in_21 c_67)"
"(if accum-str_0(let-values()(accum-string-add! accum-str_0 c_67))(void))"
"((letrec-values(((loop_155)"
"(lambda(v_225 max-count_1)"
"(if(zero? max-count_1)"
"(let-values() v_225)"
"(let-values()"
"(let-values(((c_40)"
"(let-values(((in_23) in_21)"
"((skip-count_7) 0)"
"((source_16)"
"(read-config-source config_36)))"
"(peek-char-or-special"
" in_23"
" skip-count_7"
" special1.1"
" source_16))))"
"(if(digit? c_40 base_25)"
"(let-values()"
"(begin"
"(consume-char in_21 c_40)"
"(if accum-str_0"
"(let-values()(accum-string-add! accum-str_0 c_40))"
"(void))"
"(loop_155"
"(+(digit->number c_40)(* v_225 base_25))"
"(sub1 max-count_1))))"
"(let-values() v_225))))))))"
" loop_155)"
"(+(digit->number c_67)(* init-v_0 base_25))"
"(sub1 max-count_0))))"
"(if zero-digits-result_0(let-values() zero-digits-result_0)(let-values() c_67))))))))))))))"
"(define-values"
"(digit?)"
"(lambda(c_55 base_26)"
"(if(not(char? c_55))"
"(let-values() #f)"
"(if(= base_26 8)"
"(let-values()(octal-digit? c_55))"
"(if(= base_26 16)(let-values()(hex-digit? c_55))(let-values()(decimal-digit? c_55)))))))"
"(define-values(decimal-digit?)(lambda(c_68)(if(char>=? c_68 '#\\0)(char<=? c_68 '#\\9) #f)))"
"(define-values(octal-digit?)(lambda(c_56)(if(char>=? c_56 '#\\0)(char<=? c_56 '#\\7) #f)))"
"(define-values"
"(hex-digit?)"
"(lambda(c_69)"
"(let-values(((or-part_78)(if(char>=? c_69 '#\\0)(char<=? c_69 '#\\9) #f)))"
"(if or-part_78"
" or-part_78"
"(let-values(((or-part_113)(if(char>=? c_69 '#\\A)(char<=? c_69 '#\\F) #f)))"
"(if or-part_113 or-part_113(if(char>=? c_69 '#\\a)(char<=? c_69 '#\\f) #f)))))))"
"(define-values"
"(digit->number)"
"(lambda(c_57)"
"(if(if(char>=? c_57 '#\\0)(char<=? c_57 '#\\9) #f)"
"(let-values()(-(char->integer c_57)(char->integer '#\\0)))"
"(if(if(char>=? c_57 '#\\A)(char<=? c_57 '#\\F) #f)"
"(let-values()(-(char->integer c_57)(-(char->integer '#\\A) 10)))"
"(let-values()(-(char->integer c_57)(-(char->integer '#\\a) 10)))))))"
"(define-values"
"(read-symbol-or-number8.1)"
"(lambda(extra-prefix2_0 extra-prefix4_0 mode1_0 mode3_0 init-c5_0 in6_0 config7_0)"
"(let-values(((init-c_2) init-c5_0))"
"(let-values(((in_24) in6_0))"
"(let-values(((config_24) config7_0))"
"(let-values(((mode_16)(if mode3_0 mode1_0 'symbol-or-number)))"
"(let-values(((extra-prefix_0)(if extra-prefix4_0 extra-prefix2_0 #f)))"
"(let-values()"
"(let-values(((rt_11)(read-config-readtable config_24)))"
"(let-values(((c1_131)"
"(if rt_11"
"(if(let-values(((or-part_11)(eq? mode_16 'symbol-or-number)))"
"(if or-part_11 or-part_11(eq? mode_16 'symbol/indirect)))"
"(readtable-symbol-parser rt_11)"
" #f)"
" #f)))"
"(if c1_131"
"((lambda(handler_2)"
"(readtable-apply"
" handler_2"
" init-c_2"
" in_24"
" config_24"
"(read-config-line config_24)"
"(read-config-col config_24)"
"(read-config-pos config_24)))"
" c1_131)"
"(let-values()"
"(let-values(((accum-str_1)(accum-string-init! config_24)))"
"(let-values(((quoted-ever?_0) #f))"
"(let-values(((case-sens?_0)(check-parameter read-case-sensitive config_24)))"
"(let-values((()"
"(begin"
"(if extra-prefix_0"
"(let-values()(accum-string-add! accum-str_1 extra-prefix_0))"
"(void))"
"(values))))"
"(let-values(((source_17)(read-config-source config_24)))"
"(let-values(((unexpected-quoted_0)"
"(lambda(c_70 after-c_0)"
"(let-values(((c13_1) c_70)"
"                                                               ((temp14_4) \"~a following `~a` in ~a\")"
"((temp15_4)"
"                                                                (if (eof-object? c_70) \"end-of-file\" \"non-character\"))"
"((after-c16_0) after-c_0)"
"((temp17_1)"
"(if(eq? mode_16 'keyword)"
"                                                                  (let-values () \"keyword\")"
"(if(string? mode_16)"
"                                                                    (let-values () \"number\")"
"                                                                    (let-values () \"symbol\")))))"
"(reader-error10.1"
" #f"
" #f"
" c13_1"
" #t"
" #f"
" #f"
" in_24"
" config_24"
" temp14_4"
"(list temp15_4 after-c16_0 temp17_1))))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_156)"
"(lambda(init-c_6 pipe-quote-c_0 foldcase-from_0)"
"(let-values(((c_71)"
"(let-values(((or-part_81)"
" init-c_6))"
"(if or-part_81"
" or-part_81"
"(let-values(((in_22) in_24)"
"((skip-count_6)"
" 0)"
"((source_15)"
" source_17))"
"(peek-char-or-special"
" in_22"
" skip-count_6"
" special1.1"
" source_15))))))"
"(let-values(((ec_4)"
"(let-values(((rt_12) rt_11)"
"((c_72) c_71))"
"(if(let-values(((or-part_6)"
"(not"
" rt_12)))"
"(if or-part_6"
" or-part_6"
"(not(char? c_72))))"
"(let-values() c_72)"
"(let-values()"
"(*readtable-effective-char"
" rt_12"
" c_72))))))"
"(if(if pipe-quote-c_0"
"(not(char? ec_4))"
" #f)"
"(let-values()"
"(begin"
"(if init-c_6"
"(void)"
"(let-values()"
"(consume-char/special"
" in_24"
" config_24"
" c_71)))"
"(unexpected-quoted_0"
" c_71"
" pipe-quote-c_0)))"
"(if(if(not pipe-quote-c_0)"
"(readtable-char-delimiter?"
" rt_11"
" c_71"
" config_24)"
" #f)"
"(let-values()"
"(if case-sens?_0"
"(void)"
"(let-values()"
"(accum-string-convert!"
" accum-str_1"
" string-foldcase"
" foldcase-from_0))))"
"(if(if pipe-quote-c_0"
"(char=? c_71 pipe-quote-c_0)"
" #f)"
"(let-values()"
"(begin"
"(if init-c_6"
"(void)"
"(let-values()"
"(consume-char in_24 c_71)))"
"(loop_156"
" #f"
" #f"
"(accum-string-count"
" accum-str_1))))"
"(if(if(char=? ec_4 '#\\|)"
"(check-parameter"
" read-accept-bar-quote"
" config_24)"
" #f)"
"(let-values()"
"(begin"
"(if init-c_6"
"(void)"
"(let-values()"
"(consume-char in_24 c_71)))"
"(set! quoted-ever?_0 #t)"
"(if case-sens?_0"
"(void)"
"(let-values()"
"(accum-string-convert!"
" accum-str_1"
" string-foldcase"
" foldcase-from_0)))"
"(loop_156"
" #f"
" c_71"
"(accum-string-count"
" accum-str_1))))"
"(if(if(char=? ec_4 '#\\\\)"
"(not pipe-quote-c_0)"
" #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(if init-c_6"
"(void)"
"(let-values()"
"(consume-char"
" in_24"
" c_71)))"
"(values))))"
"(let-values(((next-c_0)"
"(let-values(((in_23)"
" in_24)"
"((source_18)"
" source_17))"
"(read-char-or-special"
" in_23"
" special1.1"
" source_18))))"
"(begin"
"(if(char? next-c_0)"
"(void)"
"(let-values()"
"(unexpected-quoted_0"
" next-c_0"
" c_71)))"
"(if(let-values(((or-part_43)"
" pipe-quote-c_0))"
"(if or-part_43"
" or-part_43"
" case-sens?_0))"
"(void)"
"(let-values()"
"(accum-string-convert!"
" accum-str_1"
" string-foldcase"
" foldcase-from_0)))"
"(accum-string-add!"
" accum-str_1"
" next-c_0)"
"(set! quoted-ever?_0 #t)"
"(loop_156"
" #f"
" #f"
"(accum-string-count"
" accum-str_1))))))"
"(let-values()"
"(begin"
"(if init-c_6"
"(void)"
"(let-values()"
"(consume-char"
" in_24"
" c_71)))"
"(accum-string-add!"
" accum-str_1"
" c_71)"
"(loop_156"
" #f"
" pipe-quote-c_0"
" foldcase-from_0)))))))))))))"
" loop_156)"
" init-c_2"
" #f"
" 0)"
"(values))))"
"(let-values(((str_29)"
"(let-values(((accum-str18_0) accum-str_1)((config19_0) config_24))"
"(accum-string-get!6.1 #f #f accum-str18_0 config19_0))))"
"(let-values((()"
"(begin"
"(if(if(= 1(string-length str_29))"
"(if(not quoted-ever?_0)"
"(char=?"
" '#\\."
"(effective-char(string-ref str_29 0) config_24))"
" #f)"
" #f)"
"(let-values()"
"(let-values(((in20_1) in_24)"
"((config21_0) config_24)"
"                                                                         ((temp22_5) \"illegal use of `.`\"))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in20_1"
" config21_0"
" temp22_5"
"(list))))"
"(void))"
"(values))))"
"(let-values(((num_0)"
"(if(let-values(((or-part_303)"
"(eq? mode_16 'symbol-or-number)))"
"(if or-part_303 or-part_303(string? mode_16)))"
"(if(not quoted-ever?_0)"
"(string->number"
"(if(string? mode_16)"
"(string-append mode_16 str_29)"
" str_29)"
" 10"
" 'read"
"(if(check-parameter read-decimal-as-inexact config_24)"
" 'decimal-as-inexact"
" 'decimal-as-exact))"
" #f)"
" #f)))"
"(begin"
"(if(string? num_0)"
"(let-values()"
"(let-values(((in23_0) in_24)"
"((config24_0) config_24)"
"                                                               ((temp25_4) \"~a\")"
"((num26_0) num_0))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in23_0"
" config24_0"
" temp25_4"
"(list num26_0))))"
"(void))"
"(if(if(not num_0)(string? mode_16) #f)"
"(let-values()"
"(let-values(((in27_0) in_24)"
"((config28_0) config_24)"
"                                                               ((temp29_2) \"bad number: `~a`\")"
"((temp30_4)(string-append mode_16 str_29)))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in27_0"
" config28_0"
" temp29_2"
"(list temp30_4))))"
"(void))"
"(wrap"
"(let-values(((or-part_18) num_0))"
"(if or-part_18"
" or-part_18"
"(let-values(((or-part_19)"
"(if(eq? mode_16 'keyword)"
"(string->keyword str_29)"
" #f)))"
"(if or-part_19 or-part_19(string->symbol str_29)))))"
" in_24"
" config_24"
" str_29))))))))))))))))))))))))"
"(define-values"
"(read-fixnum)"
"(lambda(read-one_3 init-c_0 in_5 config_15)"
"(let-values(((c_34)(read-char/skip-whitespace-and-comments init-c_0 read-one_3 in_5 config_15)))"
"(let-values(((line_8 col_7 pos_111)(port-next-location* in_5 c_34)))"
"        (let-values (((v_101) (read-number-literal c_34 in_5 config_15 \"#e\")))"
"(if(fixnum? v_101)"
"(let-values() v_101)"
"(if(eof-object? v_101)"
"(let-values() v_101)"
"(let-values()"
"(let-values(((in1_0) in_5)"
"((temp2_5)(reading-at config_15 line_8 col_7 pos_111))"
"                             ((temp3_6) \"expected a fixnum, found ~a\")"
"((v4_1) v_101))"
"(reader-error10.1 #f #f #f #f #f #f in1_0 temp2_5 temp3_6(list v4_1)))))))))))"
"(define-values"
"(read-flonum)"
"(lambda(read-one_4 init-c_7 in_25 config_37)"
"(let-values(((c_15)(read-char/skip-whitespace-and-comments init-c_7 read-one_4 in_25 config_37)))"
"(let-values(((line_9 col_8 pos_92)(port-next-location* in_25 c_15)))"
"        (let-values (((v_34) (read-number-literal c_15 in_25 config_37 \"#i\")))"
"(if(flonum? v_34)"
"(let-values() v_34)"
"(if(eof-object? v_34)"
"(let-values() v_34)"
"(let-values()"
"(let-values(((in5_0) in_25)"
"((temp6_2)(reading-at config_37 line_9 col_8 pos_92))"
"                             ((temp7_3) \"expected a flonum, found ~a\")"
"((v8_0) v_34))"
"(reader-error10.1 #f #f #f #f #f #f in5_0 temp6_2 temp7_3(list v8_0)))))))))))"
"(define-values"
"(read-number-literal)"
"(lambda(c_18 in_26 config_38 mode_17)"
"(if(not(char? c_18))"
"(let-values() c_18)"
"(let-values()"
"(let-values(((mode12_0) mode_17))(read-symbol-or-number8.1 #f #f mode12_0 #t c_18 in_26 config_38))))))"
"(define-values"
"(read-vector11.1)"
"(lambda(length2_0 length4_0 mode1_0 mode3_0 read-one5_0 opener-c6_0 opener7_0 closer8_0 in9_1 config10_0)"
"(let-values(((read-one_5) read-one5_0))"
"(let-values(((opener-c_1) opener-c6_0))"
"(let-values(((opener_2) opener7_0))"
"(let-values(((closer_2) closer8_0))"
"(let-values(((in_27) in9_1))"
"(let-values(((config_39) config10_0))"
"(let-values(((vector-mode_0)(if mode3_0 mode1_0 'any)))"
"(let-values(((expected-len_0)(if length4_0 length2_0 #f)))"
"(let-values()"
"(let-values(((read-one-element_0)"
"(let-values(((tmp_30) vector-mode_0))"
"(if(equal? tmp_30 'any)"
"(let-values() read-one_5)"
"(if(equal? tmp_30 'fixnum)"
"(let-values()"
"(lambda(init-c_8 in_28 config_40)"
"(read-fixnum read-one_5 init-c_8 in_28 config_40)))"
"(if(equal? tmp_30 'flonum)"
"(let-values()"
"(lambda(init-c_9 in_29 config_41)"
"(read-flonum read-one_5 init-c_9 in_29 config_41)))"
"(let-values()(void))))))))"
"(let-values(((seq_2)"
"(let-values(((read-one20_0) read-one_5)((temp21_1) #f))"
"(read-unwrapped-sequence17.1"
" temp21_1"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" read-one20_0"
" #t"
" read-one-element_0"
" opener-c_1"
" opener_2"
" closer_2"
" in_27"
" config_39))))"
"(let-values(((vec_65)"
"(if(not expected-len_0)"
"(let-values()"
"(let-values(((tmp_38) vector-mode_0))"
"(if(equal? tmp_38 'any)"
"(let-values()(list->vector seq_2))"
"(if(equal? tmp_38 'fixnum)"
"(let-values()"
"(let-values(((len_35)(length seq_2)))"
"(begin"
"(if(exact-nonnegative-integer? len_35)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/fxvector"
"                                                             \"exact-nonnegative-integer?\""
" len_35)))"
"(let-values(((fill_0) 0))"
"(let-values(((v_227)(make-fxvector len_35 fill_0)))"
"(begin"
"(if(zero? len_35)"
"(void)"
"(let-values()"
"(let-values(((lst_122) seq_2))"
"(begin"
"(check-list lst_122)"
"((letrec-values(((for-loop_246)"
"(lambda(i_100 lst_290)"
"(if(pair? lst_290)"
"(let-values(((e_78)"
"(unsafe-car"
" lst_290))"
"((rest_162)"
"(unsafe-cdr"
" lst_290)))"
"(let-values(((i_182)"
"(let-values(((i_165)"
" i_100))"
"(let-values(((i_183)"
"(let-values()"
"(begin"
"(let-values(((elem_78)"
"(let-values()"
" e_78)))"
"(if(fixnum?"
" elem_78)"
"(unsafe-fxvector-set!"
" v_227"
" i_165"
" elem_78)"
"(not-an-fX.1$1"
" 'for*/vector"
" elem_78)))"
"(unsafe-fx+"
" 1"
" i_165)))))"
"(values"
" i_183)))))"
"(if(if(not"
"((lambda x_119"
"(unsafe-fx="
" i_182"
" len_35))"
" e_78))"
"(not #f)"
" #f)"
"(for-loop_246"
" i_182"
" rest_162)"
" i_182)))"
" i_100))))"
" for-loop_246)"
" 0"
" lst_122)))))"
" v_227))))))"
"(if(equal? tmp_38 'flonum)"
"(let-values()"
"(let-values(((len_36)(length seq_2)))"
"(begin"
"(if(exact-nonnegative-integer? len_36)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/flvector"
"                                                               \"exact-nonnegative-integer?\""
" len_36)))"
"(let-values(((fill_1) 0.0))"
"(let-values(((v_228)(make-flvector len_36 fill_1)))"
"(begin"
"(if(zero? len_36)"
"(void)"
"(let-values()"
"(let-values(((lst_291) seq_2))"
"(begin"
"(check-list lst_291)"
"((letrec-values(((for-loop_247)"
"(lambda(i_68 lst_23)"
"(if(pair? lst_23)"
"(let-values(((e_79)"
"(unsafe-car"
" lst_23))"
"((rest_163)"
"(unsafe-cdr"
" lst_23)))"
"(let-values(((i_47)"
"(let-values(((i_184)"
" i_68))"
"(let-values(((i_102)"
"(let-values()"
"(begin"
"(let-values(((elem_2)"
"(let-values()"
" e_79)))"
"(if(flonum?"
" elem_2)"
"(unsafe-flvector-set!"
" v_228"
" i_184"
" elem_2)"
"(not-an-fX.1"
" 'for*/vector"
" elem_2)))"
"(unsafe-fx+"
" 1"
" i_184)))))"
"(values"
" i_102)))))"
"(if(if(not"
"((lambda x_63"
"(unsafe-fx="
" i_47"
" len_36))"
" e_79))"
"(not #f)"
" #f)"
"(for-loop_247"
" i_47"
" rest_163)"
" i_47)))"
" i_68))))"
" for-loop_247)"
" 0"
" lst_291)))))"
" v_228))))))"
"(let-values()(void)))))))"
"(let-values()"
"(let-values(((len_37)(length seq_2)))"
"(if(= expected-len_0 len_37)"
"(let-values()(list->vector seq_2))"
"(if(< expected-len_0 len_37)"
"(let-values()"
"(let-values(((in22_0) in_27)"
"((config23_0) config_39)"
"((temp24_6)"
"                                                                  \"~avector length ~a is too small, ~a values provided\")"
"((temp25_5)"
"(let-values(((tmp_39) vector-mode_0))"
"(if(equal? tmp_39 'any)"
"                                                                      (let-values () \"\")"
"(if(equal? tmp_39 'fixnum)"
"                                                                        (let-values () \"fx\")"
"(if(equal? tmp_39 'flonum)"
"                                                                          (let-values () \"fl\")"
"(let-values()(void)))))))"
"((expected-len26_0) expected-len_0)"
"((len27_0) len_37))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in22_0"
" config23_0"
" temp24_6"
"(list temp25_5 expected-len26_0 len27_0))))"
"(let-values()"
"(let-values(((last-or_0)"
"(lambda(v_229)"
"(if(null? seq_2)"
"(wrap v_229 in_27 config_39 #f)"
"((letrec-values(((loop_157)"
"(lambda(seq_3)"
"(if(null?(cdr seq_3))"
"(car seq_3)"
"(loop_157(cdr seq_3))))))"
" loop_157)"
" seq_2)))))"
"(let-values(((vec_66)"
"(let-values(((tmp_40) vector-mode_0))"
"(if(equal? tmp_40 'any)"
"(let-values()"
"(make-vector expected-len_0(last-or_0 0)))"
"(if(equal? tmp_40 'fixnum)"
"(let-values()"
"(make-fxvector"
" expected-len_0"
"(last-or_0 0)))"
"(if(equal? tmp_40 'flonum)"
"(let-values()"
"(make-flvector"
" expected-len_0"
"(last-or_0 0.0)))"
"(let-values()(void))))))))"
"(begin"
"(let-values(((tmp_41) vector-mode_0))"
"(if(equal? tmp_41 'any)"
"(let-values()"
"(begin"
"(let-values(((lst_8) seq_2)((start_19) 0))"
"(begin"
"(check-list lst_8)"
"(check-naturals start_19)"
"((letrec-values(((for-loop_16)"
"(lambda(lst_89 pos_112)"
"(if(if(pair? lst_89) #t #f)"
"(let-values(((e_80)"
"(unsafe-car"
" lst_89))"
"((rest_164)"
"(unsafe-cdr"
" lst_89))"
"((i_104)"
" pos_112))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" vec_66"
" i_104"
" e_80))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_16"
" rest_164"
"(+ pos_112 1))"
"(values))))"
"(values)))))"
" for-loop_16)"
" lst_8"
" start_19)))"
"(void)))"
"(if(equal? tmp_41 'fixnum)"
"(let-values()"
"(begin"
"(let-values(((lst_124) seq_2)((start_35) 0))"
"(begin"
"(check-list lst_124)"
"(check-naturals start_35)"
"((letrec-values(((for-loop_17)"
"(lambda(lst_22 pos_89)"
"(if(if(pair? lst_22)"
" #t"
" #f)"
"(let-values(((e_34)"
"(unsafe-car"
" lst_22))"
"((rest_62)"
"(unsafe-cdr"
" lst_22))"
"((i_138)"
" pos_89))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(fxvector-set!"
" vec_66"
" i_138"
" e_34))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_17"
" rest_62"
"(+ pos_89 1))"
"(values))))"
"(values)))))"
" for-loop_17)"
" lst_124"
" start_35)))"
"(void)))"
"(if(equal? tmp_41 'flonum)"
"(let-values()"
"(begin"
"(let-values(((lst_280) seq_2)((start_45) 0))"
"(begin"
"(check-list lst_280)"
"(check-naturals start_45)"
"((letrec-values(((for-loop_248)"
"(lambda(lst_292 pos_113)"
"(if(if(pair? lst_292)"
" #t"
" #f)"
"(let-values(((e_81)"
"(unsafe-car"
" lst_292))"
"((rest_45)"
"(unsafe-cdr"
" lst_292))"
"((i_107)"
" pos_113))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(flvector-set!"
" vec_66"
" i_107"
" e_81))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_248"
" rest_45"
"(+ pos_113 1))"
"(values))))"
"(values)))))"
" for-loop_248)"
" lst_280"
" start_45)))"
"(void)))"
"(let-values()(void))))))"
" vec_66)))))))))))"
"(wrap vec_65 in_27 config_39 opener_2)))))))))))))))"
"(define-values"
"(read-fixnum-or-flonum-vector)"
"(lambda(read-one_6 dispatch-c_0 c_73 c2_3 in_30 config_42)"
"(let-values(((vector-mode_1)(if(char=? c2_3 '#\\x) 'fixnum 'flonum)))"
"(let-values((()(begin(consume-char in_30 c2_3)(values))))"
"(let-values((()"
"(begin"
"(if(read-config-for-syntax? config_42)"
"(let-values()"
"(let-values(((in28_0) in_30)"
"((config29_0) config_42)"
"                                         ((temp30_5) \"literal f~avectors not allowed\")"
"((c231_0) c2_3))"
"(reader-error10.1 #f #f #f #f #f #f in28_0 config29_0 temp30_5(list c231_0))))"
"(void))"
"(values))))"
"(let-values(((c3_2)"
"(let-values(((in_31) in_30)((source_19)(read-config-source config_42)))"
"(read-char-or-special in_31 special1.1 source_19))))"
"(let-values(((vector-len_0 len-str_0 c4_0)"
"(if(decimal-digit? c3_2)"
"(let-values()(read-simple-number in_30 config_42 c3_2))"
"                            (let-values () (values #f \"\" c3_2)))))"
"(let-values(((tmp_42) c4_0))"
"(if(equal? tmp_42 '#\\()"
"(let-values()"
"(let-values(((temp33_3) '#\\()"
"((temp34_1) '#\\()"
"((temp35_3) '#\\))"
"((in36_0) in_30)"
"((config37_0) config_42)"
"((vector-mode38_0) vector-mode_1)"
"((vector-len39_0) vector-len_0))"
"(read-vector11.1"
" vector-len39_0"
" #t"
" vector-mode38_0"
" #t"
" read-one_6"
" temp33_3"
" temp34_1"
" temp35_3"
" in36_0"
" config37_0)))"
"(if(equal? tmp_42 '#\\[)"
"(let-values()"
"(if(check-parameter 1/read-square-bracket-as-paren config_42)"
"(let-values()"
"(let-values(((temp41_3) '#\\[)"
"((temp42_3) '#\\[)"
"((temp43_1) '#\\])"
"((in44_0) in_30)"
"((config45_0) config_42)"
"((vector-mode46_0) vector-mode_1)"
"((vector-len47_0) vector-len_0))"
"(read-vector11.1"
" vector-len47_0"
" #t"
" vector-mode46_0"
" #t"
" read-one_6"
" temp41_3"
" temp42_3"
" temp43_1"
" in44_0"
" config45_0)))"
"(let-values()"
"(let-values(((in48_0) in_30)"
"((config49_0) config_42)"
"                                       ((temp50_3) (format \"~a~a\" dispatch-c_0 (format \"~a~a\" c_73 c2_3))))"
"(bad-syntax-error18.1 #f #f in48_0 config49_0 temp50_3)))))"
"(if(equal? tmp_42 '#\\{)"
"(let-values()"
"(if(check-parameter 1/read-curly-brace-as-paren config_42)"
"(let-values()"
"(let-values(((temp52_2) '#\\{)"
"((temp53_1) '#\\{)"
"((temp54_2) '#\\})"
"((in55_0) in_30)"
"((config56_0) config_42)"
"((vector-mode57_0) vector-mode_1)"
"((vector-len58_0) vector-len_0))"
"(read-vector11.1"
" vector-len58_0"
" #t"
" vector-mode57_0"
" #t"
" read-one_6"
" temp52_2"
" temp53_1"
" temp54_2"
" in55_0"
" config56_0)))"
"(let-values()"
"(let-values(((in59_0) in_30)"
"((config60_0) config_42)"
"                                         ((temp61_0) (format \"~a~a\" dispatch-c_0 (format \"~a~a\" c_73 c2_3))))"
"(bad-syntax-error18.1 #f #f in59_0 config60_0 temp61_0)))))"
"(let-values()"
"(let-values(((c464_0) c4_0)"
"                                     ((temp65_2) \"expected `(`, `[`, or `{` after `#~a~a~a`\")"
"((c66_0) c_73)"
"((c267_0) c2_3)"
"((len-str68_0) len-str_0))"
"(reader-error10.1"
" #f"
" #f"
" c464_0"
" #t"
" #f"
" #f"
" in_30"
" config_42"
" temp65_2"
"(list c66_0 c267_0 len-str68_0)))))))))))))))"
"(define-values"
"(read-simple-number)"
"(lambda(in_32 config_43 init-c_10)"
"(let-values(((accum-str_2)(accum-string-init! config_43)))"
"(let-values((()(begin(accum-string-add! accum-str_2 init-c_10)(values))))"
"(let-values(((init-v_1)(digit->number init-c_10)))"
"(let-values(((v_230)"
"(let-values(((temp72_2) 10)"
"((temp73_2) +inf.0)"
"((init-v74_0) init-v_1)"
"((init-v75_0) init-v_1))"
"(read-digits13.1"
" temp72_2"
" init-v74_0"
" #t"
" temp73_2"
" init-v75_0"
" #t"
" in_32"
" config_43"
" accum-str_2"
" #t))))"
"(values"
" v_230"
"(let-values(((accum-str76_0) accum-str_2)((config77_0) config_43))"
"(accum-string-get!6.1 #f #f accum-str76_0 config77_0))"
"(let-values(((in_33) in_32)((source_20)(read-config-source config_43)))"
"(read-char-or-special in_33 special1.1 source_20)))))))))"
"(define-values"
"(read-struct)"
"(lambda(read-one_3 dispatch-c_1 in_5 config_15)"
"(let-values(((c_34)"
"(let-values(((in_28) in_5)((source_21)(read-config-source config_15)))"
"(read-char-or-special in_28 special1.1 source_21))))"
"(let-values(((ec_5)(effective-char c_34 config_15)))"
"(let-values(((seq_4)"
"(let-values(((tmp_43) ec_5))"
"(if(equal? tmp_43 '#\\()"
"(let-values()(read-struct-sequence read-one_3 c_34 '#\\( '#\\) in_5 config_15))"
"(if(equal? tmp_43 '#\\[)"
"(let-values()"
"(if(check-parameter 1/read-square-bracket-as-paren config_15)"
"(let-values()(read-struct-sequence read-one_3 c_34 '#\\[ '#\\] in_5 config_15))"
"(let-values()"
"(let-values(((in1_1) in_5)"
"((config2_0) config_15)"
"                                               ((temp3_7) (format \"~as~a\" dispatch-c_1 c_34)))"
"(bad-syntax-error18.1 #f #f in1_1 config2_0 temp3_7)))))"
"(if(equal? tmp_43 '#\\{)"
"(let-values()"
"(if(check-parameter 1/read-curly-brace-as-paren config_15)"
"(let-values()(read-struct-sequence read-one_3 c_34 '#\\{ '#\\} in_5 config_15))"
"(let-values()"
"(let-values(((in4_1) in_5)"
"((config5_1) config_15)"
"                                                 ((temp6_3) (format \"~as~a\" dispatch-c_1 c_34)))"
"(bad-syntax-error18.1 #f #f in4_1 config5_1 temp6_3)))))"
"(let-values()"
"(let-values(((in7_1) in_5)"
"((config8_1) config_15)"
"                                             ((temp9_3) \"expected ~a after `~as`\")"
"((temp10_3)(all-openers-str config_15))"
"((dispatch-c11_0) dispatch-c_1))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in7_1"
" config8_1"
" temp9_3"
"(list temp10_3 dispatch-c11_0))))))))))"
"(let-values((()"
"(begin"
"(if(null? seq_4)"
"(let-values()"
"(let-values(((in12_1) in_5)"
"((config13_0) config_15)"
"                                           ((temp14_5) \"missing structure description in `~as' form\")"
"((dispatch-c15_0) dispatch-c_1))"
"(reader-error10.1 #f #f #f #f #f #f in12_1 config13_0 temp14_5(list dispatch-c15_0))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(prefab-key?(car seq_4))"
"(void)"
"(let-values()"
"(let-values(((in16_0) in_5)"
"((config17_0) config_15)"
"                                             ((temp18_3) \"invalid structure description in `~as' form\")"
"((dispatch-c19_0) dispatch-c_1))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in16_0"
" config17_0"
" temp18_3"
"(list dispatch-c19_0)))))"
"(values))))"
"(let-values(((st_2)"
"(let-values(((with-handlers-predicate20_0) exn:fail?)"
"((with-handlers-handler21_0)(lambda(exn_3) #f)))"
"(let-values(((bpz_4)(continuation-mark-set-first #f break-enabled-key)))"
"(call-handled-body"
" bpz_4"
"(lambda(e_82)"
"(select-handler/no-breaks"
" e_82"
" bpz_4"
"(list(cons with-handlers-predicate20_0 with-handlers-handler21_0))))"
"(lambda()(prefab-key->struct-type(car seq_4)(length(cdr seq_4)))))))))"
"(begin"
"(if st_2"
"(void)"
"(let-values()"
"(let-values(((in22_1) in_5)"
"((config23_1) config_15)"
"((temp24_7)"
"(string-append"
"                                     \"mismatch between structure description\""
"                                     \" and number of provided field values in `~as' form\"))"
"((dispatch-c25_0) dispatch-c_1))"
"(reader-error10.1 #f #f #f #f #f #f in22_1 config23_1 temp24_7(list dispatch-c25_0)))))"
"(if(read-config-for-syntax? config_15)"
"(let-values()"
"(if(all-fields-immutable?(car seq_4))"
"(void)"
"(let-values()"
"(let-values(((in26_0) in_5)"
"((config27_0) config_15)"
"                                       ((temp28_3) \"cannot read mutable `~as' form as syntax\")"
"((dispatch-c29_0) dispatch-c_1))"
"(reader-error10.1 #f #f #f #f #f #f in26_0 config27_0 temp28_3(list dispatch-c29_0))))))"
"(void))"
"(wrap(apply make-prefab-struct seq_4) in_5 config_15 ec_5))))))))))"
"(define-values"
"(read-struct-sequence)"
"(lambda(read-one_7 opener-c_2 opener_3 closer_3 in_16 config_20)"
"(let-values(((temp36_3)"
"(lambda(init-c_11 in_34 config_44)(read-one_7 init-c_11 in_34(disable-wrapping config_44)))))"
"(read-unwrapped-sequence17.1"
" #f"
" #f"
" #f"
" #f"
" temp36_3"
" #t"
" #f"
" #f"
" #f"
" #f"
" read-one_7"
" opener-c_2"
" opener_3"
" closer_3"
" in_16"
" config_20))))"
"(define-values"
"(read-vector-or-graph)"
"(lambda(read-one_3 dispatch-c_1 init-c_12 in_35 config_45)"
"(let-values(((accum-str_3)(accum-string-init! config_45)))"
"(let-values((()(begin(accum-string-add! accum-str_3 init-c_12)(values))))"
"(let-values(((init-v_2)(digit->number init-c_12)))"
"(let-values(((v_33)"
"(let-values(((temp4_4) 10)((temp5_6) +inf.0)((init-v6_0) init-v_2)((init-v7_0) init-v_2))"
"(read-digits13.1 temp4_4 init-v6_0 #t temp5_6 init-v7_0 #t in_35 config_45 accum-str_3 #t))))"
"(let-values(((post-line_0 post-col_0 post-pos_0)(port-next-location in_35)))"
"(let-values(((get-accum_0)"
"(lambda(c_67)"
"(format"
"                               \"~a~a~a\""
" dispatch-c_1"
"(let-values(((accum-str8_0) accum-str_3)((config9_0) config_45))"
"(accum-string-get!6.1 #f #f accum-str8_0 config9_0))"
" c_67))))"
"(let-values(((c_74)"
"(let-values(((in_36) in_35)((source_9)(read-config-source config_45)))"
"(read-char-or-special in_36 special1.1 source_9))))"
"(let-values(((ec_6)(effective-char c_74 config_45)))"
"(let-values(((tmp_44) ec_6))"
"(if(equal? tmp_44 '#\\()"
"(let-values()"
"(begin"
"(accum-string-abandon! accum-str_3 config_45)"
"(let-values(((temp12_1) '#\\()"
"((temp13_2) '#\\))"
"((in14_0) in_35)"
"((config15_0) config_45)"
"((v16_0) v_33))"
"(read-vector11.1 v16_0 #t #f #f read-one_3 c_74 temp12_1 temp13_2 in14_0 config15_0))))"
"(if(equal? tmp_44 '#\\[)"
"(let-values()"
"(begin"
"(accum-string-abandon! accum-str_3 config_45)"
"(if(check-parameter 1/read-square-bracket-as-paren config_45)"
"(let-values()"
"(let-values(((temp19_1) '#\\[)"
"((temp20_1) '#\\])"
"((in21_1) in_35)"
"((config22_0) config_45)"
"((v23_0) v_33))"
"(read-vector11.1"
" v23_0"
" #t"
" #f"
" #f"
" read-one_3"
" c_74"
" temp19_1"
" temp20_1"
" in21_1"
" config22_0)))"
"(let-values()"
"(let-values(((in24_0) in_35)"
"((config25_0) config_45)"
"((temp26_3)(get-accum_0(get-accum_0 c_74))))"
"(bad-syntax-error18.1 #f #f in24_0 config25_0 temp26_3))))))"
"(if(equal? tmp_44 '#\\{)"
"(let-values()"
"(begin"
"(accum-string-abandon! accum-str_3 config_45)"
"(if(check-parameter 1/read-curly-brace-as-paren config_45)"
"(let-values()"
"(let-values(((temp29_3) '#\\{)"
"((temp30_6) '#\\})"
"((in31_1) in_35)"
"((config32_0) config_45)"
"((v33_0) v_33))"
"(read-vector11.1"
" v33_0"
" #t"
" #f"
" #f"
" read-one_3"
" c_74"
" temp29_3"
" temp30_6"
" in31_1"
" config32_0)))"
"(let-values()"
"(let-values(((in34_0) in_35)"
"((config35_0) config_45)"
"((temp36_4)(get-accum_0(get-accum_0 c_74))))"
"(bad-syntax-error18.1 #f #f in34_0 config35_0 temp36_4))))))"
"(let-values()"
"(let-values(((tmp_6) c_74))"
"(if(if(equal? tmp_6 '#\\=) #t(equal? tmp_6 '#\\#))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_20)(read-config-for-syntax? config_45)))"
"(if or-part_20"
" or-part_20"
"(not(check-parameter 1/read-accept-graph config_45))))"
"(let-values()"
"(let-values(((in37_0) in_35)"
"((config38_0) config_45)"
"                                                       ((temp39_5) \"`#...~a` forms not ~a\")"
"((c40_0) c_74)"
"((temp41_4)"
"(if(read-config-for-syntax? config_45)"
"                                                          \"enabled\""
"                                                          \"allowed in `read-syntax` mode\")))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in37_0"
" config38_0"
" temp39_5"
"(list c40_0 temp41_4))))"
"(void))"
"(if(<=(accum-string-count accum-str_3) 8)"
"(void)"
"(let-values()"
"(let-values(((in42_0) in_35)"
"((config43_0) config_45)"
"                                                       ((temp44_1) \"graph ID too long in `~a~a~a`\")"
"((dispatch-c45_0) dispatch-c_1)"
"((temp46_3)"
"(let-values(((accum-str48_0) accum-str_3)"
"((config49_1) config_45))"
"(accum-string-get!6.1 #f #f accum-str48_0 config49_1)))"
"((c47_0) c_74))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in42_0"
" config43_0"
" temp44_1"
"(list dispatch-c45_0 temp46_3 c47_0)))))"
"(let-values(((tmp_45) c_74))"
"(if(equal? tmp_45 '#\\=)"
"(let-values()"
"(let-values(((ph_1)(make-placeholder 'placeholder)))"
"(let-values(((ht_151)(get-graph-hash config_45)))"
"(let-values((()"
"(begin"
"(if(hash-ref ht_151 v_33 #f)"
"(let-values()"
"(let-values(((in50_0) in_35)"
"((config51_0) config_45)"
"                                                                                 ((temp52_3) \"multiple `~a~a~a` tags\")"
"((dispatch-c53_0) dispatch-c_1)"
"((temp54_3)"
"(let-values(((accum-str56_0)"
" accum-str_3)"
"((config57_0) config_45))"
"(accum-string-get!6.1"
" #f"
" #f"
" accum-str56_0"
" config57_0)))"
"((c55_0) c_74))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in50_0"
" config51_0"
" temp52_3"
"(list dispatch-c53_0 temp54_3 c55_0))))"
"(void))"
"(values))))"
"(let-values((()(begin(hash-set! ht_151 v_33 ph_1)(values))))"
"(let-values(((result-v_0)"
"(read-one_3 #f in_35(next-readtable config_45))))"
"(begin"
"(if(eof-object? result-v_0)"
"(let-values()"
"(let-values(((result-v60_0) result-v_0)"
"((temp61_1)"
"                                                                          \"expected an element for graph after `~a~a~a`, found end-of-file\")"
"((dispatch-c62_0) dispatch-c_1)"
"((temp63_1)"
"(let-values(((accum-str65_0) accum-str_3)"
"((config66_0) config_45))"
"(accum-string-get!6.1"
" #f"
" #f"
" accum-str65_0"
" config66_0)))"
"((c64_0) c_74))"
"(reader-error10.1"
" #f"
" #f"
" result-v60_0"
" #t"
" #f"
" #f"
" in_35"
" config_45"
" temp61_1"
"(list dispatch-c62_0 temp63_1 c64_0))))"
"(void))"
"(accum-string-abandon! accum-str_3 config_45)"
"(placeholder-set! ph_1 result-v_0)"
" ph_1)))))))"
"(if(equal? tmp_45 '#\\#)"
"(let-values()"
"(begin0"
"(hash-ref"
"(let-values(((or-part_206)"
"(read-config-state-graph(read-config-st config_45))))"
"(if or-part_206 or-part_206 '#hash()))"
" v_33"
"(lambda()"
"(let-values(((in67_0) in_35)"
"((config68_0) config_45)"
"                                                                ((temp69_1) \"no preceding `~a~a=` for `~a~a~a`\")"
"((dispatch-c70_0) dispatch-c_1)"
"((v71_0) v_33)"
"((dispatch-c72_0) dispatch-c_1)"
"((temp73_3)"
"(let-values(((accum-str75_0) accum-str_3)"
"((config76_0) config_45))"
"(accum-string-get!6.1"
" #f"
" #f"
" accum-str75_0"
" config76_0)))"
"((c74_0) c_74))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in67_0"
" config68_0"
" temp69_1"
"(list dispatch-c70_0 v71_0 dispatch-c72_0 temp73_3 c74_0)))))"
"(accum-string-abandon! accum-str_3 config_45)))"
"(let-values()(void)))))))"
"(let-values()"
"(let-values(((c79_0) c_74)"
"                                                 ((temp80_4) \"bad syntax `~a`\")"
"((temp81_4)(get-accum_0 c_74)))"
"(reader-error10.1"
" #f"
" #f"
" c79_0"
" #t"
" #f"
" #f"
" in_35"
" config_45"
" temp80_4"
"(list temp81_4)))))))))))))))))))))"
"(define-values"
"(get-graph-hash)"
"(lambda(config_46)"
"(let-values(((st_3)(read-config-st config_46)))"
"(let-values(((or-part_304)(read-config-state-graph st_3)))"
"(if or-part_304"
" or-part_304"
"(let-values(((ht_152)(make-hasheqv)))(begin(set-read-config-state-graph! st_3 ht_152) ht_152)))))))"
"(define-values"
"(coerce-key)"
"(lambda(key_80 config_8)"
"(let-values(((for-syntax?_7)(read-config-for-syntax? config_8)))"
"((read-config-coerce-key config_8) for-syntax?_7 key_80))))"
"(define-values"
"(read-hash)"
"(lambda(read-one_3 dispatch-c_1 init-c_12 in_35 config_45)"
"(let-values(((accum-str_3)(accum-string-init! config_45)))"
"(let-values((()(begin(accum-string-add! accum-str_3 dispatch-c_1)(values))))"
"(let-values((()(begin(accum-string-add! accum-str_3 init-c_12)(values))))"
"(let-values(((get-next!_0)"
"(lambda(expect-c_0 expect-alt-c_0)"
"(let-values(((c_75)"
"(let-values(((in_27) in_35)((source_22)(read-config-source config_45)))"
"(read-char-or-special in_27 special1.1 source_22))))"
"(begin"
"(if(let-values(((or-part_285)(eqv? c_75 expect-c_0)))"
"(if or-part_285 or-part_285(eqv? c_75 expect-alt-c_0)))"
"(void)"
"(let-values()"
"(let-values(((c3_3) c_75)"
"                                               ((temp4_5) \"expected `~a` after `~a`\")"
"((expect-c5_0) expect-c_0)"
"((temp6_0)"
"(let-values(((accum-str7_0) accum-str_3)((config8_2) config_45))"
"(accum-string-get!6.1 #f #f accum-str7_0 config8_2))))"
"(reader-error10.1"
" #f"
" #f"
" c3_3"
" #t"
" #f"
" #f"
" in_35"
" config_45"
" temp4_5"
"(list expect-c5_0 temp6_0)))))"
"(accum-string-add! accum-str_3 c_75))))))"
"(let-values((()(begin(get-next!_0 '#\\a '#\\A)(values))))"
"(let-values((()(begin(get-next!_0 '#\\s '#\\S)(values))))"
"(let-values((()(begin(get-next!_0 '#\\h '#\\H)(values))))"
"(let-values(((content_10 opener_4 mode_18)"
"((letrec-values(((loop_158)"
"(lambda(mode_19)"
"(let-values(((c_18)"
"(let-values(((in_6) in_35)"
"((source_23)"
"(read-config-source config_45)))"
"(read-char-or-special in_6 special1.1 source_23))))"
"(let-values(((ec_7)(effective-char c_18 config_45)))"
"(let-values(((tmp_46) ec_7))"
"(if(equal? tmp_46 '#\\()"
"(let-values()"
"(let-values(((read-one-key+value_0)"
"(make-read-one-key+value"
" read-one_3"
" c_18"
" '#\\))))"
"(values"
"(let-values(((temp11_2) '#\\()"
"((temp12_2) '#\\))"
"((in13_0) in_35)"
"((config14_0) config_45)"
"((config15_1) config_45)"
"((temp16_5) #f))"
"(read-unwrapped-sequence17.1"
" temp16_5"
" #t"
" config15_1"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" read-one-key+value_0"
" c_18"
" temp11_2"
" temp12_2"
" in13_0"
" config14_0))"
" ec_7"
" mode_19)))"
"(if(equal? tmp_46 '#\\[)"
"(let-values()"
"(if(check-parameter"
" 1/read-square-bracket-as-paren"
" config_45)"
"(let-values()"
"(let-values(((read-one-key+value_1)"
"(make-read-one-key+value"
" read-one_3"
" c_18"
" '#\\])))"
"(values"
"(let-values(((temp19_2) '#\\[)"
"((temp20_2) '#\\])"
"((in21_2) in_35)"
"((config22_1) config_45)"
"((config23_2) config_45)"
"((temp24_8) #f))"
"(read-unwrapped-sequence17.1"
" temp24_8"
" #t"
" config23_2"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" read-one-key+value_1"
" c_18"
" temp19_2"
" temp20_2"
" in21_2"
" config22_1))"
" ec_7"
" mode_19)))"
"(let-values()"
"(let-values(((in25_0) in_35)"
"((config26_0) config_45)"
"                                                                                 ((temp27_5) \"illegal use of `~a`\")"
"((c28_0) c_18))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in25_0"
" config26_0"
" temp27_5"
"(list c28_0))))))"
"(if(equal? tmp_46 '#\\{)"
"(let-values()"
"(if(check-parameter"
" 1/read-curly-brace-as-paren"
" config_45)"
"(let-values()"
"(let-values(((read-one-key+value_2)"
"(make-read-one-key+value"
" read-one_3"
" c_18"
" '#\\})))"
"(values"
"(let-values(((temp31_1) '#\\{)"
"((temp32_1) '#\\})"
"((in33_1) in_35)"
"((config34_0) config_45)"
"((config35_1) config_45)"
"((temp36_5) #f))"
"(read-unwrapped-sequence17.1"
" temp36_5"
" #t"
" config35_1"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" read-one-key+value_2"
" c_18"
" temp31_1"
" temp32_1"
" in33_1"
" config34_0))"
" ec_7"
" mode_19)))"
"(let-values()"
"(let-values(((in37_1) in_35)"
"((config38_1) config_45)"
"                                                                                   ((temp39_6) \"illegal use of `~a`\")"
"((c40_1) c_18))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in37_1"
" config38_1"
" temp39_6"
"(list c40_1))))))"
"(if(if(equal? tmp_46 '#\\e) #t(equal? tmp_46 '#\\E))"
"(let-values()"
"(begin"
"(accum-string-add! accum-str_3 c_18)"
"(get-next!_0 '#\\q '#\\Q)"
"(loop_158 'eq)))"
"(if(if(equal? tmp_46 '#\\v) #t(equal? tmp_46 '#\\V))"
"(let-values()"
"(begin"
"(accum-string-add! accum-str_3 c_18)"
"(if(eq? mode_19 'eq)"
"(loop_158 'eqv)"
"(let-values(((in41_0) in_35)"
"((config42_0) config_45)"
"                                                                                       ((temp43_2) \"bad syntax `~a`\")"
"((temp44_2)"
"(let-values(((accum-str45_0)"
" accum-str_3)"
"((config46_0)"
" config_45))"
"(accum-string-get!6.1"
" #f"
" #f"
" accum-str45_0"
" config46_0))))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in41_0"
" config42_0"
" temp43_2"
"(list temp44_2))))))"
"(let-values()"
"(begin"
"(if(char? c_18)"
"(let-values()"
"(accum-string-add! accum-str_3 c_18))"
"(void))"
"(let-values(((c49_0) c_18)"
"                                                                                     ((temp50_4) \"bad syntax `~a`\")"
"((temp51_2)"
"(let-values(((accum-str52_0)"
" accum-str_3)"
"((config53_0)"
" config_45))"
"(accum-string-get!6.1"
" #f"
" #f"
" accum-str52_0"
" config53_0))))"
"(reader-error10.1"
" #f"
" #f"
" c49_0"
" #t"
" #f"
" #f"
" in_35"
" config_45"
" temp50_4"
"(list temp51_2))))))))))))))))"
" loop_158)"
" 'equal)))"
"(let-values(((graph?_0)(if(read-config-state-graph(read-config-st config_45)) #t #f)))"
"(wrap"
"(let-values(((tmp_40) mode_18))"
"(if(equal? tmp_40 'equal)"
"(let-values()"
"(if graph?_0(make-hash-placeholder content_10)(make-immutable-hash content_10)))"
"(if(equal? tmp_40 'eq)"
"(let-values()"
"(if graph?_0(make-hasheq-placeholder content_10)(make-immutable-hasheq content_10)))"
"(if(equal? tmp_40 'eqv)"
"(let-values()"
"(if graph?_0"
"(make-hasheqv-placeholder content_10)"
"(make-immutable-hasheqv content_10)))"
"(let-values()(void))))))"
" in_35"
" config_45"
" opener_4))))))))))))"
"(define-values"
"(make-read-one-key+value)"
"(lambda(read-one_8 overall-opener-c_0 overall-closer-ec_0)"
"(lambda(init-c_13 in_37 config_47)"
"(let-values(((c_76)(read-char/skip-whitespace-and-comments init-c_13 read-one_8 in_37 config_47)))"
"(let-values(((open-line_0 open-col_0 open-pos_0)(port-next-location* in_37 c_76)))"
"(let-values(((ec_8)(effective-char c_76 config_47)))"
"(let-values(((elem-config_1)(next-readtable config_47)))"
"(let-values(((closer_4)"
"(let-values(((tmp_47) ec_8))"
"(if(equal? tmp_47 '#\\()"
"(let-values() '#\\))"
"(if(equal? tmp_47 '#\\[)"
"(let-values()"
"(if(check-parameter 1/read-square-bracket-as-paren config_47) '#\\] #f))"
"(if(equal? tmp_47 '#\\{)"
"(let-values()(if(check-parameter 1/read-curly-brace-as-paren config_47) '#\\} #f))"
"(let-values() #f)))))))"
"(if(not closer_4)"
"(let-values()"
"(if(eof-object? c_76)"
"(let-values()"
"(let-values(((temp55_1)(reading-at config_47 open-line_0 open-col_0 open-pos_0))"
"((c56_0) c_76)"
"                                     ((temp57_2) \"expected ~a to close `~a`\")"
"((temp58_4)(closer-name overall-closer-ec_0 config_47))"
"((overall-opener-c59_0) overall-opener-c_0))"
"(reader-error10.1"
" #f"
" #f"
" c56_0"
" #t"
" #f"
" #f"
" in_37"
" temp55_1"
" temp57_2"
"(list temp58_4 overall-opener-c59_0))))"
"(if(char-closer? ec_8 config_47)"
"(let-values()"
"(let-values(((in60_0) in_37)"
"((temp61_2)(reading-at config_47 open-line_0 open-col_0 open-pos_0))"
"                                       ((temp62_0) \"~a\")"
"((temp63_2)(indentation-unexpected-closer-message ec_8 c_76 config_47)))"
"(reader-error10.1 #f #f #f #f #f #f in60_0 temp61_2 temp62_0(list temp63_2))))"
"(let-values()"
"(let-values(((v_97)(read-one_8 c_76 in_37(keep-comment elem-config_1))))"
"(if(1/special-comment? v_97)"
"(let-values()"
"((make-read-one-key+value read-one_8 overall-opener-c_0 overall-closer-ec_0)"
" #f"
" in_37"
" config_47))"
"(let-values()"
"(let-values(((in64_0) in_37)"
"((temp65_3)(reading-at config_47 open-line_0 open-col_0 open-pos_0))"
"                                             ((temp66_2) \"expected ~a to start a hash pair\")"
"((temp67_1)(all-openers-str config_47)))"
"(reader-error10.1 #f #f #f #f #f #f in64_0 temp65_3 temp66_2(list temp67_1))))))))))"
"(let-values()"
"(let-values(((k_36)(read-one_8 #f in_37(disable-wrapping elem-config_1))))"
"(let-values(((dot-c_0)(read-char/skip-whitespace-and-comments #f read-one_8 in_37 config_47)))"
"(let-values(((dot-line_1 dot-col_1 dot-pos_1)(port-next-location* in_37 dot-c_0)))"
"(let-values(((dot-ec_0)(effective-char dot-c_0 config_47)))"
"(let-values((()"
"(begin"
"(if(if(eqv? dot-ec_0 '#\\.)"
"(char-delimiter?"
"(let-values(((in_38) in_37)"
"((skip-count_8) 0)"
"((source_24)(read-config-source config_47)))"
"(peek-char-or-special in_38 skip-count_8 special1.1 source_24))"
" config_47)"
" #f)"
"(void)"
"(let-values()"
"(let-values(((temp69_2)"
"(reading-at config_47 dot-line_1 dot-col_1 dot-pos_1))"
"((dot-c70_0) dot-c_0)"
"                                                             ((temp71_2) \"expected ~a and value for hash\")"
"((temp72_3)(dot-name config_47)))"
"(reader-error10.1"
" #f"
" #f"
" dot-c70_0"
" #t"
" #f"
" #f"
" in_37"
" temp69_2"
" temp71_2"
"(list temp72_3)))))"
"(values))))"
"(let-values(((v_224)(read-one_8 #f in_37 elem-config_1)))"
"(let-values(((closer-c_0)"
"(read-char/skip-whitespace-and-comments #f read-one_8 in_37 config_47)))"
"(let-values(((closer-line_0 closer-col_0 closer-pos_0)"
"(port-next-location* in_37 closer-c_0)))"
"(let-values(((closer-ec_0)(effective-char closer-c_0 config_47)))"
"(begin"
"(if(eqv? closer-ec_0 closer_4)"
"(void)"
"(let-values()"
"(let-values(((temp74_0)"
"(reading-at"
" config_47"
" closer-line_0"
" closer-col_0"
" closer-pos_0))"
"((closer-c75_0) closer-c_0)"
"                                                         ((temp76_2) \"expected ~a after value within a hash\")"
"((temp77_1)(closer-name closer_4 config_47)))"
"(reader-error10.1"
" #f"
" #f"
" closer-c75_0"
" #t"
" #f"
" #f"
" in_37"
" temp74_0"
" temp76_2"
"(list temp77_1)))))"
"(cons(coerce-key k_36 elem-config_1) v_224)))))))))))))))))))))"
"(define-values"
"(read-string5.1)"
"(lambda(mode1_1 mode2_0 in3_0 config4_0)"
"(let-values(((in_39) in3_0))"
"(let-values(((config_22) config4_0))"
"(let-values(((mode_1)(if mode2_0 mode1_1 'string)))"
"(let-values()"
"(let-values(((source_25)(read-config-source config_22)))"
"(let-values(((accum-str_4)(accum-string-init! config_22)))"
"(let-values(((bad-end_0)"
"(lambda(c_77)"
"(if(eof-object? c_77)"
"(let-values()"
"                                    (let-values (((c10_1) c_77) ((temp11_3) \"expected a closing `\\\"`\"))"
"(reader-error10.1 #f #f c10_1 #t #f #f in_39 config_22 temp11_3(list))))"
"(let-values()"
"(let-values(((c14_0) c_77)"
"                                                 ((temp15_5) \"found non-character while reading a ~a\")"
"((mode16_0) mode_1))"
"(reader-error10.1"
" #f"
" #f"
" c14_0"
" #t"
" #f"
" #f"
" in_39"
" config_22"
" temp15_5"
"(list mode16_0))))))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_159)"
"(lambda()"
"(let-values(((c_78)"
"(let-values(((in_40) in_39)"
"((source_26) source_25))"
"(read-char-or-special"
" in_40"
" special1.1"
" source_26))))"
"(if(not(char? c_78))"
"(let-values()(bad-end_0 c_78))"
"(if(char=? '#\\\\ c_78)"
"(let-values()"
"(let-values(((escaping-c_0) c_78))"
"(let-values(((escaped-c_0)"
"(let-values(((in_41) in_39)"
"((source_6) source_25))"
"(read-char-or-special"
" in_41"
" special1.1"
" source_6))))"
"(let-values((()"
"(begin"
"(if(not(char? escaped-c_0))"
"(let-values()"
"(bad-end_0 escaped-c_0))"
"(void))"
"(values))))"
"(let-values(((unknown-error_0)"
"(lambda()"
"(let-values(((in17_0) in_39)"
"((config18_0)"
" config_22)"
"((temp19_3)"
"                                                                                                  \"unknown escape sequence `~a~a` in ~a\")"
"((escaping-c20_0)"
" escaping-c_0)"
"((escaped-c21_0)"
" escaped-c_0)"
"((mode22_0) mode_1))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in17_0"
" config18_0"
" temp19_3"
"(list"
" escaping-c20_0"
" escaped-c21_0"
" mode22_0))))))"
"(begin"
"(let-values(((tmp_48) escaped-c_0))"
"(let-values(((index_2)"
"(if(char? tmp_48)"
"(let-values(((codepoint_0)"
"(char->integer"
" tmp_48)))"
"(if(if(unsafe-fx>="
" codepoint_0"
" 10)"
"(unsafe-fx<"
" codepoint_0"
" 121)"
" #f)"
"(let-values(((tbl_0)"
" '#(10"
" 0"
" 0"
" 11"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 1"
" 0"
" 0"
" 0"
" 0"
" 1"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 12"
" 12"
" 12"
" 12"
" 12"
" 12"
" 12"
" 12"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 15"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 1"
" 0"
" 0"
" 0"
" 0"
" 2"
" 3"
" 0"
" 0"
" 9"
" 7"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 5"
" 0"
" 0"
" 0"
" 8"
" 0"
" 4"
" 14"
" 6"
" 0"
" 13)))"
"(unsafe-vector*-ref"
" tbl_0"
"(unsafe-fx-"
" codepoint_0"
" 10)))"
" 0))"
" 0)))"
"(if(unsafe-fx< index_2 7)"
"(if(unsafe-fx< index_2 3)"
"(if(unsafe-fx< index_2 1)"
"(let-values()(unknown-error_0))"
"(if(unsafe-fx< index_2 2)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" escaped-c_0))"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\u0007))))"
"(if(unsafe-fx< index_2 4)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\backspace))"
"(if(unsafe-fx< index_2 5)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\tab))"
"(if(unsafe-fx< index_2 6)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\newline))"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\vtab))))))"
"(if(unsafe-fx< index_2 11)"
"(if(unsafe-fx< index_2 8)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\page))"
"(if(unsafe-fx< index_2 9)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\return))"
"(if(unsafe-fx< index_2 10)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\u001B))"
"(let-values()(void)))))"
"(if(unsafe-fx< index_2 13)"
"(if(unsafe-fx< index_2 12)"
"(let-values()"
"(let-values(((maybe-newline-c_0)"
"(let-values(((in_36)"
" in_39)"
"((skip-count_9)"
" 0)"
"((source_27)"
" source_25))"
"(peek-char-or-special"
" in_36"
" skip-count_9"
" special1.1"
" source_27))))"
"(begin"
"(if(eqv?"
" maybe-newline-c_0"
" '#\\newline)"
"(let-values()"
"(consume-char"
" in_39"
" maybe-newline-c_0))"
"(void))"
"(void))))"
"(let-values()"
"(let-values(((pos_96)"
"(accum-string-count"
" accum-str_4)))"
"(let-values((()"
"(begin"
"(accum-string-add!"
" accum-str_4"
" escaped-c_0)"
"(values))))"
"(let-values(((init-v_3)"
"(digit->number"
" escaped-c_0)))"
"(let-values(((v_139)"
"(let-values(((temp26_4)"
" 8)"
"((temp27_6)"
" 2)"
"((init-v28_0)"
" init-v_3)"
"((init-v29_0)"
" init-v_3))"
"(read-digits13.1"
" temp26_4"
" init-v28_0"
" #t"
" temp27_6"
" init-v29_0"
" #t"
" in_39"
" config_22"
" accum-str_4"
" #t))))"
"(begin"
"(if(<= v_139 255)"
"(void)"
"(let-values()"
"(let-values(((in30_0)"
" in_39)"
"((config31_0)"
" config_22)"
"((temp32_1)"
"                                                                                                                  \"escape sequence `~a~a` is out of range in ~a\")"
"((escaping-c33_0)"
" escaping-c_0)"
"((temp34_2)"
"(let-values(((pos38_0)"
" pos_96))"
"(accum-string-get!6.1"
" pos38_0"
" #t"
" accum-str_4"
" config_22)))"
"((mode35_0)"
" mode_1))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in30_0"
" config31_0"
" temp32_1"
"(list"
" escaping-c33_0"
" temp34_2"
" mode35_0)))))"
"(set-accum-string-count!"
" accum-str_4"
" pos_96)"
"(accum-string-add!"
" accum-str_4"
"(integer->char"
" v_139)))))))))"
"(if(unsafe-fx< index_2 14)"
"(let-values()"
"(let-values(((pos_114)"
"(accum-string-count"
" accum-str_4)))"
"(let-values(((v_83)"
"(let-values(((temp42_4)"
" 16)"
"((temp43_3)"
" 2))"
"(read-digits13.1"
" temp42_4"
" #f"
" #f"
" temp43_3"
" #f"
" #f"
" in_39"
" config_22"
" accum-str_4"
" #t))))"
"(begin"
"(if(integer? v_83)"
"(void)"
"(let-values()"
"(no-hex-digits"
" in_39"
" config_22"
" v_83"
" escaping-c_0"
" escaped-c_0)))"
"(set-accum-string-count!"
" accum-str_4"
" pos_114)"
"(accum-string-add!"
" accum-str_4"
"(integer->char v_83))))))"
"(if(unsafe-fx< index_2 15)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(eq?"
" mode_1"
" 'string)"
"(void)"
"(let-values()"
"(unknown-error_0)))"
"(values))))"
"(let-values(((pos_99)"
"(accum-string-count"
" accum-str_4)))"
"(let-values(((v_40)"
"(let-values(((temp47_1)"
" 16)"
"((temp48_1)"
" 4))"
"(read-digits13.1"
" temp47_1"
" #f"
" #f"
" temp48_1"
" #f"
" #f"
" in_39"
" config_22"
" accum-str_4"
" #t))))"
"(begin"
"(if(integer? v_40)"
"(void)"
"(let-values()"
"(no-hex-digits"
" in_39"
" config_22"
" v_40"
" escaping-c_0"
" escaped-c_0)))"
"(if(let-values(((or-part_20)"
"(<"
" v_40"
" 55296)))"
"(if or-part_20"
" or-part_20"
"(> v_40 57343)))"
"(let-values()"
"(begin"
"(set-accum-string-count!"
" accum-str_4"
" pos_99)"
"(accum-string-add!"
" accum-str_4"
"(integer->char"
" v_40))))"
"(let-values()"
"(let-values(((next!_0)"
"(lambda()"
"(let-values(((next-c_1)"
"(let-values(((in_42)"
" in_39)"
"((source_14)"
" source_25))"
"(read-char-or-special"
" in_42"
" special1.1"
" source_14))))"
"(begin"
"(if(char?"
" next-c_1)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" next-c_1))"
"(void))"
" next-c_1)))))"
"(let-values(((v2_0)"
"(let-values(((next-c_2)"
"(next!_0)))"
"(if(char=?"
" next-c_2"
" '#\\\\)"
"(let-values()"
"(let-values(((next-c_3)"
"(next!_0)))"
"(if(char=?"
" next-c_3"
" '#\\u)"
"(let-values()"
"(let-values(((v2_1)"
"(let-values(((temp52_4)"
" 16)"
"((temp53_2)"
" 4))"
"(read-digits13.1"
" temp52_4"
" #f"
" #f"
" temp53_2"
" #f"
" #f"
" in_39"
" config_22"
" accum-str_4"
" #t))))"
"(if(integer?"
" v2_1)"
"(let-values()"
"(if(>="
" v2_1"
" 56320)"
"(if(<="
" v2_1"
" 57343)"
" v2_1"
" #f)"
" #f))"
"(let-values()"
" v2_1))))"
"(let-values()"
" next-c_3))))"
"(let-values()"
" next-c_2)))))"
"(if(integer?"
" v2_0)"
"(let-values()"
"(let-values(((combined-v_0)"
"(+"
"(arithmetic-shift"
"(-"
" v_40"
" 55296)"
" 10)"
"(-"
" v2_0"
" 56320)"
" 65536)))"
"(if(>"
" combined-v_0"
" 1114111)"
"(let-values()"
"(let-values(((in54_0)"
" in_39)"
"((config55_0)"
" config_22)"
"((temp56_0)"
"                                                                                                                                \"escape sequence `~au~a` is out of range in string\")"
"((escaping-c57_0)"
" escaping-c_0)"
"((temp58_5)"
"(let-values(((pos61_0)"
" pos_99))"
"(accum-string-get!6.1"
" pos61_0"
" #t"
" accum-str_4"
" config_22))))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in54_0"
" config55_0"
" temp56_0"
"(list"
" escaping-c57_0"
" temp58_5))))"
"(let-values()"
"(begin"
"(set-accum-string-count!"
" accum-str_4"
" pos_99)"
"(accum-string-add!"
" accum-str_4"
"(integer->char"
" combined-v_0)))))))"
"(let-values()"
"(let-values(((v264_0)"
" v2_0)"
"((temp65_4)"
"                                                                                                                          \"bad or incomplete surrogate-style encoding at `~au~a`\")"
"((escaping-c66_0)"
" escaping-c_0)"
"((temp67_2)"
"(let-values(((pos70_0)"
" pos_99))"
"(accum-string-get!6.1"
" pos70_0"
" #t"
" accum-str_4"
" config_22))))"
"(reader-error10.1"
" #f"
" #f"
" v264_0"
" #t"
" #f"
" #f"
" in_39"
" config_22"
" temp65_4"
"(list"
" escaping-c66_0"
" temp67_2))))))))))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(eq?"
" mode_1"
" 'string)"
"(void)"
"(let-values()"
"(unknown-error_0)))"
"(values))))"
"(let-values(((pos_115)"
"(accum-string-count"
" accum-str_4)))"
"(let-values(((v_92)"
"(let-values(((temp74_1)"
" 16)"
"((temp75_0)"
" 8))"
"(read-digits13.1"
" temp74_1"
" #f"
" #f"
" temp75_0"
" #f"
" #f"
" in_39"
" config_22"
" accum-str_4"
" #t))))"
"(begin"
"(if(integer? v_92)"
"(void)"
"(let-values()"
"(no-hex-digits"
" in_39"
" config_22"
" v_92"
" escaping-c_0"
" escaped-c_0)))"
"(if(if(let-values(((or-part_47)"
"(<"
" v_92"
" 55296)))"
"(if or-part_47"
" or-part_47"
"(>"
" v_92"
" 57343)))"
"(<= v_92 1114111)"
" #f)"
"(let-values()"
"(begin"
"(set-accum-string-count!"
" accum-str_4"
" pos_115)"
"(accum-string-add!"
" accum-str_4"
"(integer->char"
" v_92))))"
"(let-values()"
"(let-values(((in76_0)"
" in_39)"
"((config77_1)"
" config_22)"
"((temp78_3)"
"                                                                                                                  \"escape sequence `~aU~a` is out of range in string\")"
"((escaping-c79_0)"
" escaping-c_0)"
"((temp80_5)"
"(let-values(((pos83_0)"
" pos_115))"
"(accum-string-get!6.1"
" pos83_0"
" #t"
" accum-str_4"
" config_22))))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in76_0"
" config77_1"
" temp78_3"
"(list"
" escaping-c79_0"
" temp80_5)))))))))))))))))"
"(loop_159)))))))"
"                                                            (if (char=? '#\\\" c_78)"
"(let-values() null)"
"(let-values()"
"(begin"
"(if(eq? mode_1 '|byte string|)"
"(let-values()"
"(if(byte?(char->integer c_78))"
"(void)"
"(let-values()"
"(let-values(((in84_0) in_39)"
"((config85_0) config_22)"
"((temp86_1)"
"                                                                                        \"character `~a` is out of range in byte string\")"
"((c87_0) c_78))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in84_0"
" config85_0"
" temp86_1"
"(list c87_0))))))"
"(void))"
"(accum-string-add! accum-str_4 c_78)"
"(loop_159))))))))))"
" loop_159))"
"(values))))"
"(let-values(((str_30)"
"(if(eq? mode_1 '|byte string|)"
"(let-values(((accum-str88_0) accum-str_4)((config89_0) config_22))"
"(accum-string-get-bytes!13.1 #f #f accum-str88_0 config89_0))"
"(let-values(((accum-str90_0) accum-str_4)((config91_0) config_22))"
"(accum-string-get!6.1 #f #f accum-str90_0 config91_0)))))"
"(wrap str_30 in_39 config_22 str_30))))))))))))"
"(define-values"
"(read-here-string)"
"(lambda(in_43 config_48)"
"(let-values(((source_28)(read-config-source config_48)))"
"(let-values(((accum-str_5)(accum-string-init! config_48)))"
"(let-values(((full-terminator_0)"
"((letrec-values(((loop_160)"
"(lambda()"
"(let-values(((c_79)"
"(let-values(((in_44) in_43)((source_29) source_28))"
"(read-char-or-special in_44 special1.1 source_29))))"
"(if(eof-object? c_79)"
"(let-values()"
"(let-values(((c94_0) c_79)"
"((temp95_3)"
"                                                              \"found end-of-file after `#<<` and before a newline\"))"
"(reader-error10.1"
" #f"
" #f"
" c94_0"
" #t"
" #f"
" #f"
" in_43"
" config_48"
" temp95_3"
"(list))))"
"(if(not(char? c_79))"
"(let-values()"
"(let-values(((c98_0) c_79)"
"                                                               ((temp99_1) \"found non-character while reading `#<<`\"))"
"(reader-error10.1"
" #f"
" #f"
" c98_0"
" #t"
" #f"
" #f"
" in_43"
" config_48"
" temp99_1"
"(list))))"
"(if(char=? c_79 '#\\newline)"
"(let-values() null)"
"(let-values()(cons c_79(loop_160))))))))))"
" loop_160))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_161)"
"(lambda(terminator_0 terminator-accum_0)"
"(let-values(((c_80)"
"(let-values(((in_45) in_43)((source_30) source_28))"
"(read-char-or-special in_45 special1.1 source_30))))"
"(if(eof-object? c_80)"
"(let-values()"
"(if(null? terminator_0)"
"(void)"
"(let-values()"
"(let-values(((c102_0) c_80)"
"((temp103_2)"
"                                                                      \"found end-of-file before terminating `~a`\")"
"((temp104_2)(list->string full-terminator_0)))"
"(reader-error10.1"
" #f"
" #f"
" c102_0"
" #t"
" #f"
" #f"
" in_43"
" config_48"
" temp103_2"
"(list temp104_2))))))"
"(if(not(char? c_80))"
"(let-values()"
"(let-values(((c107_0) c_80)"
"((temp108_2)"
"                                                                    \"found non-character while reading `#<<`\"))"
"(reader-error10.1"
" #f"
" #f"
" c107_0"
" #t"
" #f"
" #f"
" in_43"
" config_48"
" temp108_2"
"(list))))"
"(if(if(pair? terminator_0)(char=? c_80(car terminator_0)) #f)"
"(let-values()"
"(loop_161"
"(cdr terminator_0)"
"(cons(car terminator_0) terminator-accum_0)))"
"(if(if(null? terminator_0)(char=? c_80 '#\\newline) #f)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(if(null? terminator-accum_0)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_97)"
"(reverse$1 terminator-accum_0)))"
"(begin"
"(check-list lst_97)"
"((letrec-values(((for-loop_6)"
"(lambda(lst_98)"
"(if(pair? lst_98)"
"(let-values(((c_81)"
"(unsafe-car"
" lst_98))"
"((rest_47)"
"(unsafe-cdr"
" lst_98)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(accum-string-add!"
" accum-str_5"
" c_81))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_6 rest_47)"
"(values))))"
"(values)))))"
" for-loop_6)"
" lst_97)))"
"(void))))"
"(accum-string-add! accum-str_5 c_80)"
"(loop_161 full-terminator_0 null)))))))))))"
" loop_161)"
" full-terminator_0"
" null)"
"(values))))"
"(let-values(((str_31)"
"(let-values(((accum-str109_0) accum-str_5)((config110_0) config_48))"
"(accum-string-get!6.1 #f #f accum-str109_0 config110_0))))"
"(wrap str_31 in_43 config_48 str_31))))))))"
"(define-values"
"(no-hex-digits)"
"(lambda(in_46 config_49 c_82 escaping-c_1 escaped-c_1)"
"(let-values(((c113_0) c_82)"
"                 ((temp114_3) \"no hex digit following `~a~a`\")"
"((escaping-c115_0) escaping-c_1)"
"((escaped-c116_0) escaped-c_1))"
"(reader-error10.1 #f #f c113_0 #t #f #f in_46 config_49 temp114_3(list escaping-c115_0 escaped-c116_0)))))"
"(define-values"
"(read-character)"
"(lambda(in_4 config_8)"
"(let-values(((c_83)"
"(let-values(((in_39) in_4)((source_31)(read-config-source config_8)))"
"(read-char-or-special in_39 special1.1 source_31))))"
"(let-values(((char_0)"
"(if(eof-object? c_83)"
"(let-values()"
"                        (let-values (((c3_4) c_83) ((temp4_0) \"expected a character after `#\\\\`\"))"
"(reader-error10.1 #f #f c3_4 #t #f #f in_4 config_8 temp4_0(list))))"
"(if(not(char? c_83))"
"(let-values()"
"                          (let-values (((c7_1) c_83) ((temp8_4) \"found non-character after `#\\\\`\"))"
"(reader-error10.1 #f #f c7_1 #t #f #f in_4 config_8 temp8_4(list))))"
"(if(octal-digit? c_83)"
"(let-values()"
"(let-values(((c2_4)"
"(let-values(((in_47) in_4)"
"((skip-count_10) 0)"
"((source_32)(read-config-source config_8)))"
"(peek-char-or-special in_47 skip-count_10 special1.1 source_32))))"
"(if(if(char? c2_4)(octal-digit? c2_4) #f)"
"(let-values()"
"(let-values((()(begin(consume-char in_4 c2_4)(values))))"
"(let-values(((c3_5)"
"(let-values(((in_48) in_4)"
"((source_33)(read-config-source config_8)))"
"(read-char-or-special in_48 special1.1 source_33))))"
"(let-values(((v_1)"
"(if(if(char? c3_5)(octal-digit? c3_5) #f)"
"(let-values()"
"(+"
"(arithmetic-shift(digit->number c_83) 6)"
"(arithmetic-shift(digit->number c2_4) 3)"
"(digit->number c3_5)))"
"(let-values() #f))))"
"(begin"
"(if(if v_1(<= v_1 255) #f)"
"(void)"
"(let-values()"
"(let-values(((c311_0) c3_5)"
"                                                           ((temp12_3) \"bad character constant `#\\\\~a~a~a`\")"
"((c13_2) c_83)"
"((c214_0) c2_4)"
"                                                           ((temp15_6) (if (char? c3_5) c3_5 \"\")))"
"(reader-error10.1"
" #f"
" #f"
" c311_0"
" #t"
" #f"
" #f"
" in_4"
" config_8"
" temp12_3"
"(list c13_2 c214_0 temp15_6)))))"
"(integer->char v_1))))))"
"(let-values() c_83))))"
"(if(let-values(((or-part_261)(char=? c_83 '#\\u)))"
"(if or-part_261 or-part_261(char=? c_83 '#\\U)))"
"(let-values()"
"(let-values(((accum-str_6)(accum-string-init! config_8)))"
"(let-values(((v_3)"
"(let-values(((temp19_4) 16)((temp20_3)(if(char=? c_83 '#\\u) 4 8)))"
"(read-digits13.1"
" temp19_4"
" #f"
" #f"
" temp20_3"
" #f"
" #f"
" in_4"
" config_8"
" accum-str_6"
" #t))))"
"(if(integer? v_3)"
"(let-values()"
"(if(if(let-values(((or-part_41)(< v_3 55296)))"
"(if or-part_41 or-part_41(> v_3 57343)))"
"(<= v_3 1114111)"
" #f)"
"(let-values()"
"(begin(accum-string-abandon! accum-str_6 config_8)(integer->char v_3)))"
"(let-values()"
"(let-values(((in21_3) in_4)"
"((config22_2) config_8)"
"                                                       ((temp23_3) \"bad character constant `#\\\\u~a`\")"
"((temp24_9)"
"(let-values(((accum-str25_0) accum-str_6)"
"((config26_1) config_8))"
"(accum-string-get!6.1 #f #f accum-str25_0 config26_1))))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in21_3"
" config22_2"
" temp23_3"
"(list temp24_9))))))"
"(let-values()(begin(accum-string-abandon! accum-str_6 config_8) c_83))))))"
"(if(char-alphabetic? c_83)"
"(let-values()"
"(let-values(((next-c_4)"
"(let-values(((in_36) in_4)"
"((skip-count_9) 0)"
"((source_27)(read-config-source config_8)))"
"(peek-char-or-special in_36 skip-count_9 special1.1 source_27))))"
"(if(if(char? next-c_4)(char-alphabetic? next-c_4) #f)"
"(let-values()"
"(let-values(((accum-str_7)(accum-string-init! config_8)))"
"(let-values((()(begin(accum-string-add! accum-str_7 c_83)(values))))"
"(let-values((()(begin(accum-string-add! accum-str_7 next-c_4)(values))))"
"(let-values((()(begin(consume-char in_4 next-c_4)(values))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_162)"
"(lambda()"
"(let-values(((next-c_5)"
"(let-values(((in_14)"
" in_4)"
"((skip-count_11)"
" 0)"
"((source_34)"
"(read-config-source"
" config_8)))"
"(peek-char-or-special"
" in_14"
" skip-count_11"
" special1.1"
" source_34))))"
"(if(if(char? next-c_5)"
"(char-alphabetic? next-c_5)"
" #f)"
"(let-values()"
"(begin"
"(accum-string-add!"
" accum-str_7"
" next-c_5)"
"(consume-char in_4 next-c_5)"
"(loop_162)))"
"(void))))))"
" loop_162))"
"(values))))"
"(let-values(((name_66)"
"(string-foldcase"
"(let-values(((accum-str27_0) accum-str_7)"
"((config28_1) config_8))"
"(accum-string-get!6.1"
" #f"
" #f"
" accum-str27_0"
" config28_1)))))"
"(let-values(((tmp_49) name_66))"
"                                                    (if (if (equal? tmp_49 \"nul\") #t (equal? tmp_49 \"null\"))"
"(let-values() '#\\nul)"
"                                                      (if (equal? tmp_49 \"backspace\")"
"(let-values() '#\\backspace)"
"                                                        (if (equal? tmp_49 \"tab\")"
"(let-values() '#\\tab)"
"                                                          (if (if (equal? tmp_49 \"newline\")"
" #t"
"                                                                (equal? tmp_49 \"linefeed\"))"
"(let-values() '#\\newline)"
"                                                            (if (equal? tmp_49 \"vtab\")"
"(let-values() '#\\vtab)"
"                                                              (if (equal? tmp_49 \"page\")"
"(let-values() '#\\page)"
"                                                                (if (equal? tmp_49 \"return\")"
"(let-values() '#\\return)"
"                                                                  (if (equal? tmp_49 \"space\")"
"(let-values() '#\\space)"
"                                                                    (if (equal? tmp_49 \"rubout\")"
"(let-values() '#\\rubout)"
"(let-values()"
"(let-values(((in29_2) in_4)"
"((config30_0) config_8)"
"((temp31_5)"
"                                                                                      \"bad character constant `#\\\\~a`\")"
"((name32_0) name_66))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in29_2"
" config30_0"
" temp31_5"
"(list name32_0)))))))))))))))))))))"
"(let-values() c_83))))"
"(let-values() c_83))))))))"
"(wrap char_0 in_4 config_8 char_0)))))"
"(define-values"
"(read-quote)"
"(lambda(read-one_3 sym_32 desc_0 c_36 in_39 config_22)"
"(let-values(((wrapped-sym_0)(wrap sym_32 in_39 config_22 c_36)))"
"(let-values(((e_83)(read-one_3 #f in_39 config_22)))"
"(begin"
"(if(eof-object? e_83)"
"(let-values()"
"              (let-values (((e3_0) e_83) ((temp4_6) \"expected an element for ~a, found end-of-file\") ((desc5_0) desc_0))"
"(reader-error10.1 #f #f e3_0 #t #f #f in_39 config_22 temp4_6(list desc5_0))))"
"(void))"
"(wrap(list wrapped-sym_0 e_83) in_39 config_22 #f))))))"
"(define-values"
"(read-delimited-constant)"
"(lambda(init-c_1 can-match?_0 chars_0 val_68 in_39 config_22)"
"(let-values(((accum-str_8)(accum-string-init! config_22)))"
"(begin"
"(accum-string-add! accum-str_8 init-c_1)"
"((letrec-values(((loop_163)"
"(lambda(chars_1)"
"(let-values(((c_84)"
"(let-values(((in_49) in_39)"
"((skip-count_12) 0)"
"((source_4)(read-config-source config_22)))"
"(peek-char-or-special in_49 skip-count_12 special1.1 source_4))))"
"(if(char-delimiter? c_84 config_22)"
"(let-values()"
"(if(null? chars_1)"
"(void)"
"(let-values()"
"(let-values(((c3_6) c_84)"
"                                                   ((temp4_7) \"bad syntax `#~a`\")"
"((temp5_7)"
"(let-values(((accum-str6_0) accum-str_8)((config7_1) config_22))"
"(accum-string-get!6.1 #f #f accum-str6_0 config7_1))))"
"(reader-error10.1"
" #f"
" #f"
" c3_6"
" #t"
" #f"
" #f"
" in_39"
" config_22"
" temp4_7"
"(list temp5_7))))))"
"(if(null? chars_1)"
"(let-values()"
"(begin"
"(accum-string-add! accum-str_8 c_84)"
"(let-values(((in8_1) in_39)"
"((config9_1) config_22)"
"                                                   ((temp10_0) \"bad syntax `#~a`\")"
"((temp11_0)"
"(let-values(((accum-str12_0) accum-str_8)((config13_1) config_22))"
"(accum-string-get!6.1 #f #f accum-str12_0 config13_1))))"
"(reader-error10.1 #f #f #f #f #f #f in8_1 config9_1 temp10_0(list temp11_0)))))"
"(if(if can-match?_0(char=? c_84(car chars_1)) #f)"
"(let-values()"
"(begin"
"(consume-char in_39 c_84)"
"(accum-string-add! accum-str_8 c_84)"
"(loop_163(cdr chars_1))))"
"(let-values()"
"(begin"
"(consume-char/special in_39 config_22 c_84)"
"(accum-string-add! accum-str_8 c_84)"
"(let-values(((in14_1) in_39)"
"((config15_2) config_22)"
"                                                     ((temp16_2) \"bad syntax `#~a`\")"
"((temp17_2)"
"(let-values(((accum-str18_1) accum-str_8)"
"((config19_1) config_22))"
"(accum-string-get!6.1 #f #f accum-str18_1 config19_1))))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in14_1"
" config15_2"
" temp16_2"
"(list temp17_2))))))))))))"
" loop_163)"
" chars_0)"
"(wrap"
" val_68"
" in_39"
" config_22"
"(let-values(((accum-str20_0) accum-str_8)((config21_1) config_22))"
"(accum-string-get!6.1 #f #f accum-str20_0 config21_1)))))))"
"(define-values"
"(read-box)"
"(lambda(read-one_3 dispatch-c_1 in_5 config_15)"
"(let-values((()"
"(begin"
"(if(check-parameter 1/read-accept-box config_15)"
"(void)"
"(let-values()"
"(let-values(((in1_2) in_5)"
"((config2_1) config_15)"
"                                     ((temp3_8) \"`~a&` forms not enabled\")"
"((dispatch-c4_0) dispatch-c_1))"
"(reader-error10.1 #f #f #f #f #f #f in1_2 config2_1 temp3_8(list dispatch-c4_0)))))"
"(values))))"
"(let-values(((e_73)(read-one_3 #f in_5(next-readtable config_15))))"
"(begin"
"(if(eof-object? e_73)"
"(let-values()"
"(let-values(((e7_1) e_73)"
"                           ((temp8_4) \"expected an element for `~a&` box, found end-of-file\")"
"((dispatch-c9_0) dispatch-c_1))"
"(reader-error10.1 #f #f e7_1 #t #f #f in_5 config_15 temp8_4(list dispatch-c9_0))))"
"(void))"
"(wrap(box e_73) in_5 config_15 #f))))))"
"(define-values"
"(read-regexp)"
"(lambda(mode-c_0 accum-str_9 in_5 config_15)"
"(let-values(((c3_7)"
"(let-values(((in_50) in_5)((source_35)(read-config-source config_15)))"
"(read-char-or-special in_50 special1.1 source_35))))"
"(let-values(((no-wrap-config_0)(disable-wrapping config_15)))"
"(let-values(((rx_0)"
"(let-values(((tmp_16) c3_7))"
"                        (if (equal? tmp_16 '#\\\")"
"(let-values()"
"(let-values((()(begin(accum-string-abandon! accum-str_9 config_15)(values))))"
"(let-values(((str_32)"
"(let-values(((in1_3) in_5)((no-wrap-config2_0) no-wrap-config_0))"
"(read-string5.1 #f #f in1_3 no-wrap-config2_0))))"
"(catch-and-reraise-as-reader/proc"
" in_5"
" config_15"
"(lambda()((if(char=? mode-c_0 '#\\r) regexp pregexp) str_32))))))"
"(if(equal? tmp_16 '#\\#)"
"(let-values()"
"(let-values((()(begin(accum-string-add! accum-str_9 c3_7)(values))))"
"(let-values(((c4_1)"
"(let-values(((in_25) in_5)((source_36)(read-config-source config_15)))"
"(read-char-or-special in_25 special1.1 source_36))))"
"(let-values(((tmp_50) c4_1))"
"                                    (if (equal? tmp_50 '#\\\")"
"(let-values()"
"(let-values((()"
"(begin(accum-string-abandon! accum-str_9 config_15)(values))))"
"(let-values(((bstr_4)"
"(let-values(((temp5_8) '|byte string|))"
"(read-string5.1 temp5_8 #t in_5 no-wrap-config_0))))"
"(catch-and-reraise-as-reader/proc"
" in_5"
" config_15"
"(lambda()"
"((if(char=? mode-c_0 '#\\r) byte-regexp byte-pregexp) bstr_4))))))"
"(let-values()"
"(let-values(((c48_0) c4_1)"
"                                                     ((temp9_4) \"expected `\\\"` after `~a`\")"
"((temp10_4)"
"(let-values(((accum-str11_0) accum-str_9)"
"((config12_2) config_15))"
"(accum-string-get!6.1 #f #f accum-str11_0 config12_2))))"
"(reader-error10.1"
" #f"
" #f"
" c48_0"
" #t"
" #f"
" #f"
" in_5"
" config_15"
" temp9_4"
"(list temp10_4)))))))))"
"(let-values()"
"(let-values(((c315_0) c3_7)"
"                                           ((temp16_2) \"expected `\\\"` or `#` after `~a`\")"
"((temp17_2)"
"(let-values(((accum-str18_1) accum-str_9)((config19_1) config_15))"
"(accum-string-get!6.1 #f #f accum-str18_1 config19_1))))"
"(reader-error10.1 #f #f c315_0 #t #f #f in_5 config_15 temp16_2(list temp17_2)))))))))"
"(wrap rx_0 in_5 config_15 #f))))))"
"(define-values"
"(read-extension-reader)"
"(lambda(read-one_9 read-recur_0 dispatch-c_2 in_24 config_24)"
"(let-values(((extend-str_0)"
"(read-extension-prefix(cons dispatch-c_2 '(#\\r #\\e)) '(#\\a #\\d #\\e #\\r) in_24 config_24)))"
"(let-values((()"
"(begin"
"(if(check-parameter 1/read-accept-reader config_24)"
"(void)"
"(let-values()"
"(let-values(((in52_0) in_24)"
"((config53_1) config_24)"
"                                       ((temp54_4) \"`~a` not enabled\")"
"((extend-str55_0) extend-str_0))"
"(reader-error10.1 #f #f #f #f #f #f in52_0 config53_1 temp54_4(list extend-str55_0)))))"
"(values))))"
"(let-values(((mod-path-wrapped_0)(read-one_9 #f in_24(next-readtable config_24))))"
"(begin"
"(if(eof-object? mod-path-wrapped_0)"
"(let-values()"
"(let-values(((mod-path-wrapped58_0) mod-path-wrapped_0)"
"                             ((temp59_3) \"expected a datum after `~a`, found end-of-file\")"
"((extend-str60_0) extend-str_0))"
"(reader-error10.1"
" #f"
" #f"
" mod-path-wrapped58_0"
" #t"
" #f"
" #f"
" in_24"
" config_24"
" temp59_3"
"(list extend-str60_0))))"
"(void))"
"(let-values(((temp47_2)((read-config-coerce config_24) #f mod-path-wrapped_0 #f))"
"((read-recur48_0) read-recur_0)"
"((in49_0) in_24)"
"((config50_0) config_24)"
"((mod-path-wrapped51_0) mod-path-wrapped_0))"
"(read-extension44.1"
" #f"
" #f"
" mod-path-wrapped51_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp47_2"
" read-recur48_0"
" in49_0"
" config50_0))))))))"
"(define-values"
"(read-extension-lang7.1)"
"(lambda(get-info?1_0 get-info?2_0 read-recur3_0 dispatch-c4_1 in5_1 config6_0)"
"(let-values(((read-recur_1) read-recur3_0))"
"(let-values(((dispatch-c_3) dispatch-c4_1))"
"(let-values(((in_51) in5_1))"
"(let-values(((config_50) config6_0))"
"(let-values(((get-info?_0)(if get-info?2_0 get-info?1_0 #f)))"
"(let-values()"
"(let-values(((extend-str_1)"
"(read-extension-prefix(cons dispatch-c_3 '(#\\l)) '(#\\a #\\n #\\g) in_51 config_50)))"
"(let-values(((c_67)"
"(let-values(((in_22) in_51)((source_37)(read-config-source config_50)))"
"(read-char-or-special in_22 special1.1 source_37))))"
"(begin"
"(if(char=? c_67 '#\\space)"
"(void)"
"(let-values()"
"(let-values(((in67_1) in_51)"
"((config68_1) config_50)"
"                                       ((temp69_3) \"expected a single space after `~a`\")"
"((extend-str70_0) extend-str_1))"
"(reader-error10.1 #f #f #f #f #f #f in67_1 config68_1 temp69_3(list extend-str70_0)))))"
"(let-values(((temp65_5) '|#lang|)((get-info?66_0) get-info?_0))"
"(read-lang29.1"
" get-info?66_0"
" #t"
" #f"
" #f"
" temp65_5"
" extend-str_1"
" read-recur_1"
" in_51"
" config_50)))))))))))))"
"(define-values"
"(read-extension-#!16.1)"
"(lambda(get-info?10_0 get-info?11_0 read-recur12_0 dispatch-c13_0 in14_2 config15_3)"
"(let-values(((read-recur_2) read-recur12_0))"
"(let-values(((dispatch-c_4) dispatch-c13_0))"
"(let-values(((in_37) in14_2))"
"(let-values(((config_47) config15_3))"
"(let-values(((get-info?_1)(if get-info?11_0 get-info?10_0 #f)))"
"(let-values()"
"(let-values(((c_68)"
"(let-values(((in_52) in_37)((source_38)(read-config-source config_47)))"
"(read-char-or-special in_52 special1.1 source_38))))"
"(begin"
"(if(char-lang-nonsep? c_68)"
"(void)"
"(let-values()"
"(let-values(((in78_0) in_37)"
"((config79_0) config_47)"
"((temp80_6)"
"(if(char? c_68)(string dispatch-c_4 '#\\! c_68)(string dispatch-c_4 '#\\!))))"
"(bad-syntax-error18.1 #f #f in78_0 config79_0 temp80_6))))"
"(let-values(((temp71_3)(string dispatch-c_4 '#\\!))"
"((read-recur72_0) read-recur_2)"
"((in73_1) in_37)"
"((config74_0) config_47)"
"((c75_0) c_68)"
"((temp76_3) '|#!|)"
"((get-info?77_0) get-info?_1))"
"(read-lang29.1"
" get-info?77_0"
" #t"
" c75_0"
" #t"
" temp76_3"
" temp71_3"
" read-recur72_0"
" in73_1"
" config74_0))))))))))))"
"(define-values"
"(read-lang29.1)"
"(lambda(get-info?20_0 get-info?23_0 init-c19_0 init-c22_0 who21_0 extend-str25_0 read-recur26_0 in27_1 config28_2)"
"(let-values(((extend-str_2) extend-str25_0))"
"(let-values(((read-recur_3) read-recur26_0))"
"(let-values(((in_53) in27_1))"
"(let-values(((config_51) config28_2))"
"(let-values(((init-c_14)(if init-c22_0 init-c19_0 #f)))"
"(let-values(((get-info?_2)(if get-info?23_0 get-info?20_0 #f)))"
"(let-values(((who_25) who21_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(if(check-parameter 1/read-accept-reader config_51)"
"(check-parameter 1/read-accept-lang config_51)"
" #f)"
"(void)"
"(let-values()"
"(let-values(((in88_0) in_53)"
"((config89_1) config_51)"
"                                                     ((temp90_2) \"`~a` not enabled\")"
"((extend-str91_0) extend-str_2))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in88_0"
" config89_1"
" temp90_2"
"(list extend-str91_0)))))"
"(values))))"
"(let-values(((accum-str_10)(accum-string-init! config_51)))"
"(let-values((()"
"(begin"
"(if init-c_14(let-values()(accum-string-add! accum-str_10 init-c_14))(void))"
"(values))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_164)"
"(lambda()"
"(let-values(((c_85)"
"(let-values(((in_54) in_53)"
"((skip-count_13) 0)"
"((source_39)"
"(read-config-source"
" config_51)))"
"(peek-char-or-special"
" in_54"
" skip-count_13"
" special1.1"
" source_39))))"
"(if(eof-object? c_85)"
"(let-values()(void))"
"(if(not(char? c_85))"
"(let-values()"
"(begin"
"(consume-char/special in_53 config_51 c_85)"
"(let-values(((c94_1) c_85)"
"((temp95_4)"
"                                                                                      \"found non-character while reading `#~a'\")"
"((extend-str96_0) extend-str_2))"
"(reader-error10.1"
" #f"
" #f"
" c94_1"
" #t"
" #f"
" #f"
" in_53"
" config_51"
" temp95_4"
"(list extend-str96_0)))))"
"(if(char-whitespace? c_85)"
"(let-values()(void))"
"(if(let-values(((or-part_305)"
"(char-lang-nonsep? c_85)))"
"(if or-part_305"
" or-part_305"
"(char=? '#\\/ c_85)))"
"(let-values()"
"(begin"
"(consume-char in_53 c_85)"
"(accum-string-add! accum-str_10 c_85)"
"(loop_164)))"
"(let-values()"
"(begin"
"(consume-char in_53 c_85)"
"(let-values(((in97_0) in_53)"
"((config98_0) config_51)"
"((temp99_2)"
"(string-append"
"                                                                                           \"expected only alphanumeric, `-`, `+`, `_`, or `/`\""
"                                                                                           \" characters for `~a`, found `~a`\"))"
"((extend-str100_0)"
" extend-str_2)"
"((c101_0) c_85))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in97_0"
" config98_0"
" temp99_2"
"(list extend-str100_0 c101_0)))))))))))))"
" loop_164))"
"(values))))"
"(let-values(((lang-str_0)"
"(let-values(((accum-str102_0) accum-str_10)((config103_0) config_51))"
"(accum-string-get!6.1 #f #f accum-str102_0 config103_0))))"
"(let-values((()"
"(begin"
"                                              (if (equal? lang-str_0 \"\")"
"(let-values()"
"(let-values(((in104_0) in_53)"
"((config105_0) config_51)"
"((temp106_1)"
"                                                                \"expected a non-empty sequence of alphanumeric, `-`, `+`, `_`, or `/` after `~a`\")"
"((extend-str107_0) extend-str_2))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in104_0"
" config105_0"
" temp106_1"
"(list extend-str107_0))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(char=? '#\\/(string-ref lang-str_0 0))"
"(let-values()"
"(let-values(((in108_0) in_53)"
"((config109_0) config_51)"
"((temp110_0)"
"                                                                  \"expected a name that does not start `/` after `~a`\")"
"((extend-str111_0) extend-str_2))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in108_0"
" config109_0"
" temp110_0"
"(list extend-str111_0))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(char=?"
" '#\\/"
"(string-ref lang-str_0(sub1(string-length lang-str_0))))"
"(let-values()"
"(let-values(((in112_0) in_53)"
"((config113_0) config_51)"
"((temp114_4)"
"                                                                    \"expected a name that does not end `/` after `~a`\")"
"((extend-str115_0) extend-str_2))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in112_0"
" config113_0"
" temp114_4"
"(list extend-str115_0))))"
"(void))"
"(values))))"
"(let-values(((submod-path_0)"
"(list* 'submod(string->symbol lang-str_0) '(reader))))"
"(let-values(((reader-path_0)"
"                                                    (string->symbol (string-append lang-str_0 \"/lang/reader\"))))"
"(let-values(((submod-path81_0) submod-path_0)"
"((reader-path82_0) reader-path_0)"
"((read-recur83_0) read-recur_3)"
"((in84_1) in_53)"
"((config85_1) config_51)"
"((get-info?86_0) get-info?_2)"
"((who87_1) who_25))"
"(read-extension44.1"
" get-info?86_0"
" #t"
" #f"
" #f"
" submod-path81_0"
" #t"
" who87_1"
" #t"
" reader-path82_0"
" read-recur83_0"
" in84_1"
" config85_1))))))))))))))))))))))"
"(define-values"
"(char-lang-nonsep?)"
"(lambda(c_86)"
"(if(<(char->integer c_86) 128)"
"(let-values(((or-part_108)(char-alphabetic? c_86)))"
"(if or-part_108"
" or-part_108"
"(let-values(((or-part_306)(char-numeric? c_86)))"
"(if or-part_306"
" or-part_306"
"(let-values(((or-part_289)(char=? '#\\- c_86)))"
"(if or-part_289"
" or-part_289"
"(let-values(((or-part_307)(char=? '#\\+ c_86)))"
"(if or-part_307 or-part_307(char=? '#\\_ c_86)))))))))"
" #f)))"
"(define-values"
"(read-extension-prefix)"
"(lambda(already_0 wanted_0 in_55 config_52)"
"(let-values(((accum-str_11)(accum-string-init! config_52)))"
"(begin"
"(let-values(((lst_293) already_0))"
"(begin"
"(check-list lst_293)"
"((letrec-values(((for-loop_249)"
"(lambda(lst_294)"
"(if(pair? lst_294)"
"(let-values(((c_27)(unsafe-car lst_294))((rest_165)(unsafe-cdr lst_294)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(accum-string-add! accum-str_11 c_27))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_249 rest_165)(values))))"
"(values)))))"
" for-loop_249)"
" lst_293)))"
"(void)"
"((letrec-values(((loop_165)"
"(lambda(wanted_1)"
"(if(null? wanted_1)"
"(void)"
"(let-values()"
"(let-values(((c_28)"
"(let-values(((in_56) in_55)((source_40)(read-config-source config_52)))"
"(read-char-or-special in_56 special1.1 source_40))))"
"(begin"
"(if(char? c_28)(let-values()(accum-string-add! accum-str_11 c_28))(void))"
"(if(eqv? c_28(car wanted_1))"
"(void)"
"(let-values()"
"(let-values(((temp120_4)"
"(let-values(((accum-str122_0) accum-str_11)"
"((config123_0) config_52))"
"(accum-string-get!6.1 #f #f accum-str122_0 config123_0)))"
"((c121_0) c_28))"
"(bad-syntax-error18.1 c121_0 #t in_55 config_52 temp120_4))))"
"(loop_165(cdr wanted_1)))))))))"
" loop_165)"
" wanted_0)"
"(let-values(((accum-str116_0) accum-str_11)((config117_0) config_52))"
"(accum-string-get!6.1 #f #f accum-str116_0 config117_0))))))"
"(define-values"
"(read-extension44.1)"
"(lambda(get-info?34_0"
" get-info?38_0"
" mod-path-wrapped33_0"
" mod-path-wrapped37_0"
" try-first-mod-path32_0"
" try-first-mod-path36_0"
" who35_0"
" who39_0"
" mod-path-datum40_0"
" read-recur41_0"
" in42_1"
" config43_1)"
"(let-values(((try-first-mod-path_0)(if try-first-mod-path36_0 try-first-mod-path32_0 #f)))"
"(let-values(((mod-path-datum_0) mod-path-datum40_0))"
"(let-values(((read-recur_4) read-recur41_0))"
"(let-values(((in_57) in42_1))"
"(let-values(((config_53) config43_1))"
"(let-values(((mod-path-wrapped_1)"
"(if mod-path-wrapped37_0"
" mod-path-wrapped33_0"
"((read-config-coerce config_53) #t mod-path-datum_0 #f))))"
"(let-values(((get-info?_3)(if get-info?38_0 get-info?34_0 #f)))"
"(let-values(((who_26)(if who39_0 who35_0 '|#reader|)))"
"(let-values()"
"(let-values((()(begin(force-parameters! config_53)(values))))"
"(let-values(((guard_0)(1/current-reader-guard)))"
"(let-values(((mod-path_27)"
"(let-values(((or-part_104)"
"(if try-first-mod-path_0"
"(let-values(((mod-path_28)(guard_0 try-first-mod-path_0)))"
"(if((read-config-module-declared? config_53)"
" try-first-mod-path_0)"
" mod-path_28"
" #f))"
" #f)))"
"(if or-part_104 or-part_104(guard_0 mod-path-datum_0)))))"
"(let-values(((for-syntax?_8)(read-config-for-syntax? config_53)))"
"(let-values(((dynamic-require_2)(read-config-dynamic-require config_53)))"
"(let-values(((no-value_0)(gensym)))"
"(let-values(((extension_0)"
"(if get-info?_3"
"(let-values()"
"(dynamic-require_2 mod-path_27 'get-info(lambda() no-value_0)))"
"(let-values()"
"(dynamic-require_2"
" mod-path_27"
"(if for-syntax?_8 'read-syntax 'read))))))"
"(if(eq? extension_0 no-value_0)"
"(let-values() #f)"
"(let-values()"
"(let-values(((result-v_1)"
"(if(if for-syntax?_8(not get-info?_3) #f)"
"(let-values()"
"(if(procedure-arity-includes? extension_0 6)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-read-config"
" config_53)"
"(let-values()"
"(extension_0"
"(read-config-source config_53)"
" in_57"
" mod-path-wrapped_1"
"(read-config-line config_53)"
"(read-config-col config_53)"
"(read-config-pos config_53)))))"
"(if(procedure-arity-includes? extension_0 2)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-read-config"
" config_53)"
"(let-values()"
"(extension_0(read-config-source config_53) in_57))))"
"(let-values()"
"(raise-argument-error"
" who_26"
"                                                                 \"(or/c (procedure-arity-includes?/c 2) (procedure-arity-includes?/c 6))\""
" extension_0)))))"
"(let-values()"
"(if(procedure-arity-includes? extension_0 5)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-read-config"
" config_53)"
"(let-values()"
"(extension_0"
" in_57"
" mod-path-wrapped_1"
"(read-config-line config_53)"
"(read-config-col config_53)"
"(read-config-pos config_53)))))"
"(if get-info?_3"
"(let-values()"
"(raise-argument-error"
" who_26"
"                                                                 \"(procedure-arity-includes?/c 5)\""
" extension_0))"
"(if(procedure-arity-includes? extension_0 1)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-read-config"
" config_53)"
"(let-values()(extension_0 in_57))))"
"(let-values()"
"(raise-argument-error"
" who_26"
"                                                                   \"(or/c (procedure-arity-includes?/c 1) (procedure-arity-includes?/c 5))\""
" extension_0)))))))))"
"(if get-info?_3"
"(let-values()"
"(begin"
"(if(if(procedure? result-v_1)"
"(procedure-arity-includes? result-v_1 2)"
" #f)"
"(void)"
"(let-values()"
"(raise-result-error"
" 'read-language"
"                                                     \"(procedure-arity-includes?/c 2)\""
" result-v_1)))"
" result-v_1))"
"(if(1/special-comment? result-v_1)"
"(let-values()(read-recur_4 in_57 config_53))"
"(let-values()(coerce result-v_1 in_57 config_53)))))))))))))))))))))))))"
"(define-values"
"(read-language/get-info)"
"(lambda(read-one_3 in_2 config_7 fail-k_5)"
"(let-values(((c_34)(read-char/skip-whitespace-and-comments #f read-one_3 in_2 config_7)))"
"(let-values(((line_8 col_7 pos_111)(port-next-location* in_2 c_34)))"
"(let-values(((l-config_0)"
"(override-parameter 1/read-accept-reader(reading-at config_7 line_8 col_7 pos_111) #t)))"
"(if(not(eqv? c_34 '#\\#))"
"            (let-values () (if fail-k_5 (fail-k_5) (lang-error in_2 l-config_0 \"\" c_34)))"
"(let-values()"
"(let-values(((c2_5)"
"(let-values(((in_49) in_2)((source_41)(read-config-source l-config_0)))"
"(read-char-or-special in_49 special1.1 source_41))))"
"(if(eqv? c2_5 '#\\l)"
"(let-values()"
"(let-values(((temp5_9) #t))(read-extension-lang7.1 temp5_9 #t read-one_3 c_34 in_2 l-config_0)))"
"(if(eqv? c2_5 '#\\!)"
"(let-values()"
"(let-values(((temp10_5) #t))"
"(read-extension-#!16.1 temp10_5 #t read-one_3 c_34 in_2 l-config_0)))"
"(let-values()(if fail-k_5(fail-k_5)(lang-error in_2 l-config_0(string c_34) c2_5)))))))))))))"
"(define-values"
"(lang-error)"
"(lambda(in_25 config_37 prefix_6 c_78)"
"(let-values(((add-prefix_0)"
"                  (lambda (s_9) (if (string=? prefix_6 \"\") (format \"`~a` followed by ~a\" prefix_6 s_9) s_9))))"
"(let-values(((c13_3) c_78)"
"((temp14_0) 'read-language)"
"((temp15_0)"
"(string-append"
"                     \"expected (after whitespace and comments) `#lang ` or `#!` followed\""
"                     \" immediately by a language name, found ~a\"))"
"((temp16_0)"
"(if(eof-object? c_78)"
"                      (let-values () (add-prefix_0 \"end-of-file\"))"
"(if(not(char? c_78))"
"                        (let-values () (add-prefix_0 \"non-character\"))"
"                        (let-values () (format \"`~a~a`\" prefix_6 c_78))))))"
"(reader-error10.1 #f #f c13_3 #t temp14_0 #t in_25 config_37 temp15_0(list temp16_0))))))"
"(define-values"
"(read30.1)"
"(lambda(coerce12_1"
" coerce26_0"
" coerce-key13_1"
" coerce-key27_0"
" dynamic-require10_1"
" dynamic-require24_0"
" for-syntax?8_0"
" for-syntax?22_0"
" init-c2_0"
" init-c16_0"
" keep-comment?14_1"
" keep-comment?28_0"
" local-graph?6_0"
" local-graph?20_0"
" module-declared?11_1"
" module-declared?25_0"
" next-readtable3_0"
" next-readtable17_0"
" read-compiled9_1"
" read-compiled23_0"
" readtable4_0"
" readtable18_0"
" recursive?5_0"
" recursive?19_0"
" source7_0"
" source21_0"
" wrap1_0"
" wrap15_0"
" in29_3)"
"(let-values(((in_21) in29_3))"
"(let-values(((wrap_7)(if wrap15_0 wrap1_0 #f)))"
"(let-values(((init-c_6)(if init-c16_0 init-c2_0 #f)))"
"(let-values(((next-readtable_3)(if next-readtable17_0 next-readtable3_0(1/current-readtable))))"
"(let-values(((readtable_3)(if readtable18_0 readtable4_0 next-readtable_3)))"
"(let-values(((recursive?_0)(if recursive?19_0 recursive?5_0 #f)))"
"(let-values(((local-graph?_1)(if local-graph?20_0 local-graph?6_0 #f)))"
"(let-values(((source_8)(if source21_0 source7_0 #f)))"
"(let-values(((for-syntax?_9)(if for-syntax?22_0 for-syntax?8_0 #f)))"
"(let-values(((read-compiled_2)(if read-compiled23_0 read-compiled9_1 #f)))"
"(let-values(((dynamic-require_3)(if dynamic-require24_0 dynamic-require10_1 #f)))"
"(let-values(((module-declared?_2)(if module-declared?25_0 module-declared?11_1 #f)))"
"(let-values(((coerce_2)(if coerce26_0 coerce12_1 #f)))"
"(let-values(((coerce-key_2)(if coerce-key27_0 coerce-key13_1 #f)))"
"(let-values(((keep-comment?_3)(if keep-comment?28_0 keep-comment?14_1 recursive?_0)))"
"(let-values()"
"(let-values(((config_54)"
"(let-values(((c1_132)(if recursive?_0(current-read-config) #f)))"
"(if c1_132"
"((lambda(config_55)"
"(let-values(((for-syntax?53_0) for-syntax?_9)"
"((wrap54_1) wrap_7)"
"((readtable55_0) readtable_3)"
"((next-readtable56_0) next-readtable_3)"
"((local-graph?57_0) local-graph?_1)"
"((keep-comment?58_0) keep-comment?_3))"
"(read-config-update42.1"
" for-syntax?53_0"
" keep-comment?58_0"
" next-readtable56_0"
" #t"
" readtable55_0"
" local-graph?57_0"
" wrap54_1"
" config_55)))"
" c1_132)"
"(let-values()"
"(let-values(((readtable59_0) readtable_3)"
"((next-readtable60_0) next-readtable_3)"
"((source61_0) source_8)"
"((for-syntax?62_0) for-syntax?_9)"
"((wrap63_0) wrap_7)"
"((read-compiled64_0) read-compiled_2)"
"((dynamic-require65_0) dynamic-require_3)"
"((module-declared?66_0) module-declared?_2)"
"((coerce67_0) coerce_2)"
"((coerce-key68_0) coerce-key_2)"
"((keep-comment?69_0) keep-comment?_3))"
"(make-read-config26.1"
" coerce67_0"
" #t"
" coerce-key68_0"
" #t"
" dynamic-require65_0"
" #t"
" for-syntax?62_0"
" #t"
" keep-comment?69_0"
" #t"
" module-declared?66_0"
" #t"
" next-readtable60_0"
" #t"
" read-compiled64_0"
" #t"
" readtable59_0"
" #t"
" source61_0"
" #t"
" wrap63_0"
" #t)))))))"
"(let-values(((v_139)(read-one init-c_6 in_21 config_54)))"
"(if(if(let-values(((or-part_20)(not recursive?_0)))"
"(if or-part_20 or-part_20 local-graph?_1))"
"(read-config-state-graph(read-config-st config_54))"
" #f)"
"(let-values()"
"(catch-and-reraise-as-reader/proc"
" #f"
" config_54"
"(lambda()(make-reader-graph v_139))))"
"(if(if recursive?_0"
"(if(not local-graph?_1)"
"(if(not for-syntax?_9)"
"(if(not(eof-object? v_139))(not(1/special-comment? v_139)) #f)"
" #f)"
" #f)"
" #f)"
"(let-values()(begin(get-graph-hash config_54)(make-placeholder v_139)))"
"(let-values() v_139)))))))))))))))))))))))"
"(define-values"
"(read-language49.1)"
"(lambda(coerce38_0"
" coerce45_0"
" coerce-key39_0"
" coerce-key46_0"
" dynamic-require36_0"
" dynamic-require43_0"
" for-syntax?33_0"
" for-syntax?40_0"
" module-declared?37_0"
" module-declared?44_0"
" read-compiled35_0"
" read-compiled42_0"
" wrap34_0"
" wrap41_0"
" in47_0"
" fail-k48_0)"
"(let-values(((in_58) in47_0))"
"(let-values(((fail-k_6) fail-k48_0))"
"(let-values(((for-syntax?_10)(if for-syntax?40_0 for-syntax?33_0 #f)))"
"(let-values(((wrap_8)(if wrap41_0 wrap34_0 #f)))"
"(let-values(((read-compiled_3)(if read-compiled42_0 read-compiled35_0 #f)))"
"(let-values(((dynamic-require_4)(if dynamic-require43_0 dynamic-require36_0 #f)))"
"(let-values(((module-declared?_3)(if module-declared?44_0 module-declared?37_0 #f)))"
"(let-values(((coerce_3)(if coerce45_0 coerce38_0 #f)))"
"(let-values(((coerce-key_3)(if coerce-key46_0 coerce-key39_0 #f)))"
"(let-values()"
"(let-values(((config_56)"
"(let-values(((temp70_2) #f)"
"((temp71_4) #f)"
"((for-syntax?72_0) for-syntax?_10)"
"((wrap73_0) wrap_8)"
"((read-compiled74_0) read-compiled_3)"
"((dynamic-require75_0) dynamic-require_4)"
"((module-declared?76_0) module-declared?_3)"
"((coerce77_0) coerce_3)"
"((coerce-key78_0) coerce-key_3))"
"(make-read-config26.1"
" coerce77_0"
" #t"
" coerce-key78_0"
" #t"
" dynamic-require75_0"
" #t"
" for-syntax?72_0"
" #t"
" #f"
" #f"
" module-declared?76_0"
" #t"
" temp71_4"
" #t"
" read-compiled74_0"
" #t"
" temp70_2"
" #t"
" #f"
" #f"
" wrap73_0"
" #t))))"
"(let-values(((l-config_1)(override-parameter 1/read-accept-reader config_56 #f)))"
"(read-language/get-info read-undotted in_58 config_56 fail-k_6)))))))))))))))"
"(define-values"
"(read-one)"
"(lambda(init-c_15 in_59 config_57)"
"(if(not(check-parameter 1/read-cdot config_57))"
"(let-values()(read-undotted init-c_15 in_59 config_57))"
"(if(check-parameter 1/read-cdot config_57)"
"(let-values()"
"(let-values(((line_10 col_9 pos_116)(port-next-location in_59)))"
"(let-values(((v_231)(read-undotted init-c_15 in_59 config_57)))"
"(if(1/special-comment? v_231)"
"(let-values() v_231)"
"(let-values()"
"((letrec-values(((loop_166)"
"(lambda(v_232)"
"(let-values(((c_87)"
"(let-values(((in_60) in_59)"
"((skip-count_14) 0)"
"((source_42)(read-config-source config_57)))"
"(peek-char-or-special in_60 skip-count_14 special1.1 source_42))))"
"(let-values(((ec_9)(effective-char c_87 config_57)))"
"(if(not(char? ec_9))"
"(let-values() v_232)"
"(if(char-whitespace? ec_9)"
"(let-values()(begin(consume-char in_59 c_87)(loop_166 v_232)))"
"(if(char=? ec_9 '#\\.)"
"(let-values()"
"(let-values(((dot-line_2 dot-col_2 dot-pos_2)"
"(port-next-location in_59)))"
"(let-values((()(begin(consume-char in_59 c_87)(values))))"
"(let-values(((cdot_0)"
"(wrap"
" '#%dot"
" in_59"
"(reading-at"
" config_57"
" dot-line_2"
" dot-col_2"
" dot-pos_2)"
" '#\\.)))"
"(let-values(((post-v_0)(read-undotted #f in_59 config_57)))"
"(loop_166"
"(wrap"
"(list '#%dot v_232 post-v_0)"
" in_59"
"(reading-at config_57 line_10 col_9 pos_116)"
" '#\\.)))))))"
"(let-values() v_232)))))))))"
" loop_166)"
" v_231))))))"
"(void)))))"
"(define-values"
"(read-undotted)"
"(lambda(init-c_16 in_61 config_58)"
"(let-values(((c_88)(read-char/skip-whitespace-and-comments init-c_16 read-one in_61 config_58)))"
"(let-values(((line_11 col_10 pos_117)(port-next-location* in_61 c_88)))"
"(if(eof-object? c_88)"
"(let-values() eof)"
"(if(not(char? c_88))"
"(let-values()"
"(let-values(((v_233)(special-value c_88)))"
"(if(1/special-comment? v_233)"
"(let-values()(if(read-config-keep-comment? config_58) v_233(read-undotted #f in_61 config_58)))"
"(let-values()(coerce v_233 in_61(reading-at config_58 line_11 col_10 pos_117))))))"
"(let-values(((c2_6)(readtable-handler config_58 c_88)))"
"(if c2_6"
"((lambda(handler_3)"
"(let-values(((v_234)(readtable-apply handler_3 c_88 in_61 config_58 line_11 col_10 pos_117)))"
"(retry-special-comment v_234 in_61 config_58)))"
" c2_6)"
"(let-values()"
"(let-values(((ec_10)(effective-char c_88 config_58)))"
"(let-values((()"
"(begin"
"(if(not(char-closer? ec_10 config_58))"
"(let-values()(track-indentation! config_58 line_11 col_10))"
"(void))"
"(values))))"
"(let-values(((r-config_0)(reading-at(discard-comment config_58) line_11 col_10 pos_117)))"
"(let-values(((tmp_51) ec_10))"
"(let-values(((index_3)"
"(if(char? tmp_51)"
"(let-values(((codepoint_1)(char->integer tmp_51)))"
"(if(if(unsafe-fx>= codepoint_1 34)(unsafe-fx< codepoint_1 126) #f)"
"(if(unsafe-fx< codepoint_1 91)"
"(if(unsafe-fx< codepoint_1 40)"
"(let-values(((tbl_1) '#(11 1 0 0 0 2)))"
"(unsafe-vector*-ref tbl_1(unsafe-fx- codepoint_1 34)))"
"(if(unsafe-fx< codepoint_1 42)"
"(let-values(((tbl_2) '#(5 6)))"
"(unsafe-vector*-ref tbl_2(unsafe-fx- codepoint_1 40)))"
"(if(unsafe-fx< codepoint_1 44)"
" 0"
"(if(unsafe-fx< codepoint_1 45) 4 0))))"
"(let-values(((tbl_3)"
" '#(7"
" 0"
" 8"
" 0"
" 0"
" 3"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 9"
" 12"
" 10)))"
"(unsafe-vector*-ref tbl_3(unsafe-fx- codepoint_1 91))))"
" 0))"
" 0)))"
"(if(unsafe-fx< index_3 6)"
"(if(unsafe-fx< index_3 2)"
"(if(unsafe-fx< index_3 1)"
"(let-values()"
"(let-values(((v_47)"
"(let-values(((temp82_1)"
"(if(let-values(((or-part_72)(eq? c_88 ec_10)))"
"(if or-part_72"
" or-part_72"
"(if(<(char->integer ec_10) 128)"
"(char-numeric? ec_10)"
" #f)))"
" 'symbol-or-number"
" 'symbol/indirect)))"
"(read-symbol-or-number8.1"
" #f"
" #f"
" temp82_1"
" #t"
" c_88"
" in_61"
" r-config_0))))"
"(retry-special-comment v_47 in_61 config_58)))"
"(let-values()(read-dispatch c_88 in_61 r-config_0 config_58)))"
"(if(unsafe-fx< index_3 3)"
"                                  (let-values () (read-quote read-one 'quote \"quoting '\" c_88 in_61 r-config_0))"
"(if(unsafe-fx< index_3 4)"
"(let-values()"
"(if(check-parameter 1/read-accept-quasiquote config_58)"
"(let-values()"
"                                          (read-quote read-one 'quasiquote \"quasiquoting `\" c_88 in_61 r-config_0))"
"(let-values()"
"(let-values(((in83_0) in_61)"
"((r-config84_0) r-config_0)"
"                                                       ((temp85_1) \"illegal use of `~a`\")"
"((c86_0) c_88))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in83_0"
" r-config84_0"
" temp85_1"
"(list c86_0))))))"
"(if(unsafe-fx< index_3 5)"
"(let-values()"
"(if(check-parameter 1/read-accept-quasiquote config_58)"
"(let-values()"
"(let-values(((c2_7)"
"(let-values(((in_62) in_61)"
"((skip-count_15) 0)"
"((source_43)(read-config-source config_58)))"
"(peek-char-or-special"
" in_62"
" skip-count_15"
" special1.1"
" source_43))))"
"(if(eqv? c2_7 '#\\@)"
"(begin"
"(consume-char in_61 c2_7)"
"(read-quote"
" read-one"
" 'unquote-splicing"
"                                                   \"unquoting ,@\""
" c_88"
" in_61"
" r-config_0))"
"                                                (read-quote read-one 'unquote \"unquoting ,\" c_88 in_61 r-config_0))))"
"(let-values()"
"(let-values(((in87_0) in_61)"
"((r-config88_0) r-config_0)"
"                                                         ((temp89_3) \"illegal use of `~a`\")"
"((c90_0) c_88))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in87_0"
" r-config88_0"
" temp89_3"
"(list c90_0))))))"
"(let-values()"
"(wrap"
"(let-values(((temp93_2) '#\\()"
"((temp94_1) '#\\))"
"((in95_0) in_61)"
"((r-config96_0) r-config_0)"
"((temp97_3) #t))"
"(read-unwrapped-sequence17.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp97_3"
" #t"
" #f"
" #f"
" read-one"
" ec_10"
" temp93_2"
" temp94_1"
" in95_0"
" r-config96_0))"
" in_61"
" r-config_0"
" ec_10))))))"
"(if(unsafe-fx< index_3 9)"
"(if(unsafe-fx< index_3 7)"
"(let-values()"
"(let-values(((in98_0) in_61)"
"((r-config99_0) r-config_0)"
"                                                 ((temp100_1) \"~a\")"
"((temp101_1)"
"(indentation-unexpected-closer-message ec_10 c_88 r-config_0)))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in98_0"
" r-config99_0"
" temp100_1"
"(list temp101_1))))"
"(if(unsafe-fx< index_3 8)"
"(let-values()"
"(if(let-values(((or-part_308)"
"(check-parameter 1/read-square-bracket-as-paren config_58)))"
"(if or-part_308"
" or-part_308"
"(check-parameter 1/read-square-bracket-with-tag config_58)))"
"(let-values()"
"(wrap"
"(let-values(((temp104_3) '#\\[)"
"((temp105_1) '#\\])"
"((in106_0) in_61)"
"((r-config107_0) r-config_0)"
"((temp108_3) #t))"
"(read-unwrapped-sequence17.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp108_3"
" #t"
" #f"
" #f"
" read-one"
" ec_10"
" temp104_3"
" temp105_1"
" in106_0"
" r-config107_0))"
" in_61"
" r-config_0"
" ec_10))"
"(let-values()"
"(let-values(((in109_0) in_61)"
"((r-config110_0) r-config_0)"
"                                                       ((temp111_2) \"illegal use of `~a`\")"
"((c112_0) c_88))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in109_0"
" r-config110_0"
" temp111_2"
"(list c112_0))))))"
"(let-values()"
"(if(let-values(((or-part_309)"
"(check-parameter 1/read-square-bracket-as-paren config_58)))"
"(if or-part_309"
" or-part_309"
"(check-parameter 1/read-square-bracket-with-tag config_58)))"
"(let-values()"
"(let-values(((in113_0) in_61)"
"((r-config114_0) r-config_0)"
"                                                       ((temp115_4) \"~a\")"
"((temp116_2)"
"(indentation-unexpected-closer-message ec_10 c_88 r-config_0)))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in113_0"
" r-config114_0"
" temp115_4"
"(list temp116_2))))"
"(let-values()"
"(let-values(((in117_0) in_61)"
"((r-config118_0) r-config_0)"
"                                                       ((temp119_2) \"illegal use of `~a`\")"
"((c120_0) c_88))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in117_0"
" r-config118_0"
" temp119_2"
"(list c120_0))))))))"
"(if(unsafe-fx< index_3 10)"
"(let-values()"
"(if(let-values(((or-part_310)"
"(check-parameter 1/read-curly-brace-as-paren config_58)))"
"(if or-part_310"
" or-part_310"
"(check-parameter 1/read-curly-brace-with-tag config_58)))"
"(let-values()"
"(wrap"
"(let-values(((temp123_0) '#\\{)"
"((temp124_1) '#\\})"
"((in125_0) in_61)"
"((r-config126_0) r-config_0)"
"((temp127_1) #t))"
"(read-unwrapped-sequence17.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp127_1"
" #t"
" #f"
" #f"
" read-one"
" ec_10"
" temp123_0"
" temp124_1"
" in125_0"
" r-config126_0))"
" in_61"
" r-config_0"
" ec_10))"
"(let-values()"
"(let-values(((in128_0) in_61)"
"((r-config129_0) r-config_0)"
"                                                     ((temp130_3) \"illegal use of `~a`\")"
"((c131_0) c_88))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in128_0"
" r-config129_0"
" temp130_3"
"(list c131_0))))))"
"(if(unsafe-fx< index_3 11)"
"(let-values()"
"(if(let-values(((or-part_311)"
"(check-parameter 1/read-curly-brace-as-paren config_58)))"
"(if or-part_311"
" or-part_311"
"(check-parameter 1/read-curly-brace-with-tag config_58)))"
"(let-values()"
"(let-values(((in132_0) in_61)"
"((r-config133_0) r-config_0)"
"                                                       ((temp134_2) \"~a\")"
"((temp135_3)"
"(indentation-unexpected-closer-message ec_10 c_88 r-config_0)))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in132_0"
" r-config133_0"
" temp134_2"
"(list temp135_3))))"
"(let-values()"
"(let-values(((in136_0) in_61)"
"((r-config137_0) r-config_0)"
"                                                       ((temp138_2) \"illegal use of `~a`\")"
"((c139_0) c_88))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in136_0"
" r-config137_0"
" temp138_2"
"(list c139_0))))))"
"(if(unsafe-fx< index_3 12)"
"(let-values()"
"(let-values(((in140_0) in_61)((r-config141_0) r-config_0))"
"(read-string5.1 #f #f in140_0 r-config141_0)))"
"(let-values()"
"(let-values(((temp145_2) 'symbol))"
"(read-symbol-or-number8.1"
" #f"
" #f"
" temp145_2"
" #t"
" c_88"
" in_61"
" r-config_0))))))))))))))))))))))"
"(define-values"
"(read-dispatch)"
"(lambda(dispatch-c_5 in_63 config_59 orig-config_0)"
"(let-values(((c_89)"
"(let-values(((in_64) in_63)((source_44)(read-config-source config_59)))"
"(read-char-or-special in_64 special1.1 source_44))))"
"(if(eof-object? c_89)"
"(let-values()"
"          (let-values (((c148_0) c_89) ((temp149_1) \"bad syntax `~a`\") ((dispatch-c150_0) dispatch-c_5))"
"(reader-error10.1 #f #f c148_0 #t #f #f in_63 config_59 temp149_1(list dispatch-c150_0))))"
"(if(not(char? c_89))"
"(let-values()"
"            (let-values (((c153_0) c_89) ((temp154_0) \"bad syntax `~a`\") ((dispatch-c155_0) dispatch-c_5))"
"(reader-error10.1 #f #f c153_0 #t #f #f in_63 config_59 temp154_0(list dispatch-c155_0))))"
"(let-values(((c3_8)(readtable-dispatch-handler orig-config_0 c_89)))"
"(if c3_8"
"((lambda(handler_4)"
"(let-values(((line_12)(read-config-line config_59)))"
"(let-values(((col_11)(read-config-col config_59)))"
"(let-values(((pos_118)(read-config-pos config_59)))"
"(let-values(((v_218)(readtable-apply handler_4 c_89 in_63 config_59 line_12 col_11 pos_118)))"
"(retry-special-comment v_218 in_63 orig-config_0))))))"
" c3_8)"
"(let-values()"
"(let-values()"
"(let-values(((tmp_52) c_89))"
"(let-values(((index_4)"
"(if(char? tmp_52)"
"(let-values(((codepoint_2)(char->integer tmp_52)))"
"(if(if(unsafe-fx>= codepoint_2 33)(unsafe-fx< codepoint_2 127) #f)"
"(let-values(((tbl_4)"
" '#(34"
" 11"
" 0"
" 0"
" 13"
" 6"
" 7"
" 2"
" 0"
" 0"
" 0"
" 9"
" 0"
" 0"
" 0"
" 1"
" 1"
" 1"
" 1"
" 1"
" 1"
" 1"
" 1"
" 1"
" 1"
" 14"
" 0"
" 12"
" 0"
" 0"
" 0"
" 0"
" 0"
" 22"
" 29"
" 25"
" 18"
" 16"
" 0"
" 30"
" 20"
" 0"
" 0"
" 0"
" 0"
" 0"
" 24"
" 0"
" 0"
" 0"
" 0"
" 15"
" 0"
" 0"
" 0"
" 28"
" 0"
" 0"
" 3"
" 10"
" 0"
" 0"
" 0"
" 8"
" 0"
" 26"
" 29"
" 21"
" 17"
" 16"
" 0"
" 30"
" 19"
" 0"
" 0"
" 33"
" 0"
" 0"
" 23"
" 32"
" 0"
" 31"
" 5"
" 15"
" 0"
" 0"
" 0"
" 27"
" 0"
" 0"
" 4"
" 0"
" 0"
" 35)))"
"(unsafe-vector*-ref tbl_4(unsafe-fx- codepoint_2 33)))"
" 0))"
" 0)))"
"(if(unsafe-fx< index_4 17)"
"(if(unsafe-fx< index_4 8)"
"(if(unsafe-fx< index_4 3)"
"(if(unsafe-fx< index_4 1)"
"(let-values()"
"(let-values(((in156_0) in_63)"
"((config157_0) config_59)"
"                                             ((temp158_1) \"bad syntax `~a~a`\")"
"((dispatch-c159_0) dispatch-c_5)"
"((c160_0) c_89))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in156_0"
" config157_0"
" temp158_1"
"(list dispatch-c159_0 c160_0))))"
"(if(unsafe-fx< index_4 2)"
"(let-values()(read-vector-or-graph read-one dispatch-c_5 c_89 in_63 config_59))"
"(let-values()"
"(let-values(((read-one161_0) read-one)"
"((temp162_0) '#\\()"
"((temp163_1) '#\\()"
"((temp164_0) '#\\))"
"((in165_0) in_63)"
"((config166_0) config_59))"
"(read-vector11.1"
" #f"
" #f"
" #f"
" #f"
" read-one161_0"
" temp162_0"
" temp163_1"
" temp164_0"
" in165_0"
" config166_0)))))"
"(if(unsafe-fx< index_4 5)"
"(if(unsafe-fx< index_4 4)"
"(let-values()"
"(if(check-parameter 1/read-square-bracket-as-paren config_59)"
"(let-values()"
"(let-values(((read-one167_0) read-one)"
"((temp168_2) '#\\[)"
"((temp169_0) '#\\[)"
"((temp170_0) '#\\])"
"((in171_0) in_63)"
"((config172_0) config_59))"
"(read-vector11.1"
" #f"
" #f"
" #f"
" #f"
" read-one167_0"
" temp168_2"
" temp169_0"
" temp170_0"
" in171_0"
" config172_0)))"
"(let-values()"
"(let-values(((in173_0) in_63)"
"((config174_0) config_59)"
"                                                   ((temp175_0) (format \"~a~a\" dispatch-c_5 c_89)))"
"(bad-syntax-error18.1 #f #f in173_0 config174_0 temp175_0)))))"
"(let-values()"
"(if(check-parameter 1/read-curly-brace-as-paren config_59)"
"(let-values()"
"(let-values(((read-one176_0) read-one)"
"((temp177_0) '#\\{)"
"((temp178_0) '#\\{)"
"((temp179_0) '#\\})"
"((in180_0) in_63)"
"((config181_0) config_59))"
"(read-vector11.1"
" #f"
" #f"
" #f"
" #f"
" read-one176_0"
" temp177_0"
" temp178_0"
" temp179_0"
" in180_0"
" config181_0)))"
"(let-values()"
"(let-values(((in182_0) in_63)"
"((config183_0) config_59)"
"                                                   ((temp184_0) (format \"~a~a\" dispatch-c_5 c_89)))"
"(bad-syntax-error18.1 #f #f in182_0 config183_0 temp184_0))))))"
"(if(unsafe-fx< index_4 6)"
"(let-values()(read-struct read-one dispatch-c_5 in_63 config_59))"
"(if(unsafe-fx< index_4 7)"
"(let-values()(read-box read-one dispatch-c_5 in_63 config_59))"
"                                  (let-values () (read-quote read-one 'syntax \"quoting #'\" c_89 in_63 config_59))))))"
"(if(unsafe-fx< index_4 12)"
"(if(unsafe-fx< index_4 9)"
"                              (let-values () (read-quote read-one 'quasisyntax \"quasiquoting #`\" c_89 in_63 config_59))"
"(if(unsafe-fx< index_4 10)"
"(let-values()"
"(let-values(((c2_8)"
"(let-values(((in_65) in_63)"
"((skip-count_16) 0)"
"((source_45)(read-config-source config_59)))"
"(peek-char-or-special in_65 skip-count_16 special1.1 source_45))))"
"(if(eqv? c2_8 '#\\@)"
"(begin"
"(consume-char in_63 c2_8)"
"                                        (read-quote read-one 'unsyntax-splicing \"unquoting #,@\" c_89 in_63 config_59))"
"                                      (read-quote read-one 'unsyntax \"unquoting #,\" c_89 in_63 config_59))))"
"(if(unsafe-fx< index_4 11)"
"(let-values()(read-character in_63 config_59))"
"(let-values()"
"(let-values(((temp187_0) '|byte string|))"
"(read-string5.1 temp187_0 #t in_63 config_59))))))"
"(if(unsafe-fx< index_4 14)"
"(if(unsafe-fx< index_4 13)"
"(let-values()"
"(let-values(((c2_9)"
"(let-values(((in_66) in_63)"
"((skip-count_17) 0)"
"((source_46)(read-config-source config_59)))"
"(peek-char-or-special in_66 skip-count_17 special1.1 source_46))))"
"(if(eqv? '#\\< c2_9)"
"(let-values()"
"(begin(consume-char in_63 '#\\<)(read-here-string in_63 config_59)))"
"(let-values()"
"(let-values(((c2190_0) c2_9)"
"                                                     ((temp191_0) \"bad syntax `~a<`\")"
"((dispatch-c192_0) dispatch-c_5))"
"(reader-error10.1"
" #f"
" #f"
" c2190_0"
" #t"
" #f"
" #f"
" in_63"
" config_59"
" temp191_0"
"(list dispatch-c192_0)))))))"
"(let-values()"
"(let-values(((dispatch-c196_0) dispatch-c_5)((temp197_0) 'symbol))"
"(read-symbol-or-number8.1 dispatch-c196_0 #t temp197_0 #t c_89 in_63 config_59))))"
"(if(unsafe-fx< index_4 15)"
"(let-values()"
"(let-values(((temp198_0) #f)"
"((in199_0) in_63)"
"((config200_0) config_59)"
"((temp201_0) 'keyword))"
"(read-symbol-or-number8.1 #f #f temp201_0 #t temp198_0 in199_0 config200_0)))"
"(if(unsafe-fx< index_4 16)"
"(let-values()"
"(let-values(((c2_10)"
"(let-values(((in_67) in_63)"
"((skip-count_18) 0)"
"((source_47)(read-config-source config_59)))"
"(peek-char-or-special in_67 skip-count_18 special1.1 source_47))))"
"(if(char-delimiter? c2_10 config_59)"
"(let-values()(wrap #t in_63 config_59 c_89))"
"(let-values()"
"(read-delimited-constant"
" c_89"
"(char=? c_89 '#\\t)"
" '(#\\r #\\u #\\e)"
" #t"
" in_63"
" config_59)))))"
"(let-values()"
"(let-values(((c2_11)"
"(let-values(((in_68) in_63)"
"((skip-count_19) 0)"
"((source_48)(read-config-source config_59)))"
"(peek-char-or-special in_68 skip-count_19 special1.1 source_48))))"
"(if(char-delimiter? c2_11 config_59)"
"(let-values()(wrap #f in_63 config_59 c_89))"
"(if(let-values(((or-part_312)(char=? c2_11 '#\\x)))"
"(if or-part_312 or-part_312(char=? c2_11 '#\\l)))"
"(let-values()"
"(read-fixnum-or-flonum-vector"
" read-one"
" dispatch-c_5"
" c_89"
" c2_11"
" in_63"
" config_59))"
"(let-values()"
"(read-delimited-constant"
" c_89"
"(char=? c_89 '#\\f)"
" '(#\\a #\\l #\\s #\\e)"
" #f"
" in_63"
" config_59)))))))))))"
"(if(unsafe-fx< index_4 26)"
"(if(unsafe-fx< index_4 21)"
"(if(unsafe-fx< index_4 18)"
"(let-values()"
"(let-values(((temp202_0) #f)"
"((in203_0) in_63)"
"((config204_0) config_59)"
"                                             ((temp205_0) \"#e\"))"
"(read-symbol-or-number8.1 #f #f temp205_0 #t temp202_0 in203_0 config204_0)))"
"(if(unsafe-fx< index_4 19)"
"(let-values()"
"(let-values(((temp206_0) #f)"
"((in207_0) in_63)"
"((config208_0) config_59)"
"                                               ((temp209_1) \"#E\"))"
"(read-symbol-or-number8.1 #f #f temp209_1 #t temp206_0 in207_0 config208_0)))"
"(if(unsafe-fx< index_4 20)"
"(let-values()"
"(let-values(((temp210_0) #f)"
"((in211_0) in_63)"
"((config212_0) config_59)"
"                                                 ((temp213_2) \"#i\"))"
"(read-symbol-or-number8.1 #f #f temp213_2 #t temp210_0 in211_0 config212_0)))"
"(let-values()"
"(let-values(((temp214_2) #f)"
"((in215_0) in_63)"
"((config216_0) config_59)"
"                                                 ((temp217_1) \"#I\"))"
"(read-symbol-or-number8.1 #f #f temp217_1 #t temp214_2 in215_0 config216_0))))))"
"(if(unsafe-fx< index_4 23)"
"(if(unsafe-fx< index_4 22)"
"(let-values()"
"(let-values(((temp218_1) #f)"
"((in219_0) in_63)"
"((config220_0) config_59)"
"                                               ((temp221_2) \"#d\"))"
"(read-symbol-or-number8.1 #f #f temp221_2 #t temp218_1 in219_0 config220_0)))"
"(let-values()"
"(let-values(((temp222_1) #f)"
"((in223_0) in_63)"
"((config224_0) config_59)"
"                                               ((temp225_1) \"#B\"))"
"(read-symbol-or-number8.1 #f #f temp225_1 #t temp222_1 in223_0 config224_0))))"
"(if(unsafe-fx< index_4 24)"
"(let-values()"
"(let-values(((temp226_1) #f)"
"((in227_0) in_63)"
"((config228_0) config_59)"
"                                               ((temp229_1) \"#o\"))"
"(read-symbol-or-number8.1 #f #f temp229_1 #t temp226_1 in227_0 config228_0)))"
"(if(unsafe-fx< index_4 25)"
"(let-values()"
"(let-values(((temp230_1) #f)"
"((in231_0) in_63)"
"((config232_0) config_59)"
"                                                 ((temp233_1) \"#O\"))"
"(read-symbol-or-number8.1 #f #f temp233_1 #t temp230_1 in231_0 config232_0)))"
"(let-values()"
"(let-values(((temp234_0) #f)"
"((in235_0) in_63)"
"((config236_0) config_59)"
"                                                 ((temp237_1) \"#D\"))"
"(read-symbol-or-number8.1 #f #f temp237_1 #t temp234_0 in235_0 config236_0)))))))"
"(if(unsafe-fx< index_4 30)"
"(if(unsafe-fx< index_4 27)"
"(let-values()"
"(let-values(((temp238_1) #f)"
"((in239_0) in_63)"
"((config240_0) config_59)"
"                                             ((temp241_0) \"#b\"))"
"(read-symbol-or-number8.1 #f #f temp241_0 #t temp238_1 in239_0 config240_0)))"
"(if(unsafe-fx< index_4 28)"
"(let-values()"
"(let-values(((temp242_0) #f)"
"((in243_0) in_63)"
"((config244_0) config_59)"
"                                               ((temp245_0) \"#x\"))"
"(read-symbol-or-number8.1 #f #f temp245_0 #t temp242_0 in243_0 config244_0)))"
"(if(unsafe-fx< index_4 29)"
"(let-values()"
"(let-values(((temp246_0) #f)"
"((in247_0) in_63)"
"((config248_0) config_59)"
"                                                 ((temp249_0) \"#X\"))"
"(read-symbol-or-number8.1 #f #f temp249_0 #t temp246_0 in247_0 config248_0)))"
"(let-values()"
"(let-values(((c2_12)"
"(let-values(((in_69) in_63)"
"((source_49)(read-config-source config_59)))"
"(read-char-or-special in_69 special1.1 source_49))))"
"(let-values(((tmp_11) c2_12))"
"(if(if(equal? tmp_11 '#\\s) #t(equal? tmp_11 '#\\S))"
"(let-values()"
"(read-one #f in_63(override-parameter read-case-sensitive config_59 #t)))"
"(if(if(equal? tmp_11 '#\\i) #t(equal? tmp_11 '#\\I))"
"(let-values()"
"(read-one #f in_63(override-parameter read-case-sensitive config_59 #f)))"
"(let-values()"
"(let-values(((c2252_0) c2_12)"
"                                                           ((temp253_1) \"expected `s', `S`, `i', or `I` after `~a~a`\")"
"((dispatch-c254_0) dispatch-c_5)"
"((c255_0) c_89))"
"(reader-error10.1"
" #f"
" #f"
" c2252_0"
" #t"
" #f"
" #f"
" in_63"
" config_59"
" temp253_1"
"(list dispatch-c254_0 c255_0))))))))))))"
"(if(unsafe-fx< index_4 32)"
"(if(unsafe-fx< index_4 31)"
"(let-values()(read-hash read-one dispatch-c_5 c_89 in_63 config_59))"
"(let-values()"
"(let-values(((accum-str_12)(accum-string-init! config_59)))"
"(let-values((()(begin(accum-string-add! accum-str_12 dispatch-c_5)(values))))"
"(let-values((()(begin(accum-string-add! accum-str_12 c_89)(values))))"
"(let-values(((c2_13)"
"(let-values(((in_70) in_63)"
"((source_50)(read-config-source config_59)))"
"(read-char-or-special in_70 special1.1 source_50))))"
"(begin"
"(if(char? c2_13)"
"(let-values()(accum-string-add! accum-str_12 c2_13))"
"(void))"
"(let-values(((tmp_53) c2_13))"
"(if(equal? tmp_53 '#\\x)"
"(let-values()(read-regexp c_89 accum-str_12 in_63 config_59))"
"(if(equal? tmp_53 '#\\e)"
"(let-values()"
"(read-extension-reader"
" read-one"
" read-undotted"
" dispatch-c_5"
" in_63"
" config_59))"
"(let-values()"
"(let-values(((c2258_0) c2_13)"
"((temp259_0)"
"(let-values(((accum-str260_0) accum-str_12)"
"((config261_0) config_59))"
"(accum-string-get!6.1"
" #f"
" #f"
" accum-str260_0"
" config261_0))))"
"(bad-syntax-error18.1"
" c2258_0"
" #t"
" in_63"
" config_59"
" temp259_0)))))))))))))"
"(if(unsafe-fx< index_4 33)"
"(let-values()"
"(let-values(((accum-str_13)(accum-string-init! config_59)))"
"(let-values((()(begin(accum-string-add! accum-str_13 dispatch-c_5)(values))))"
"(let-values((()(begin(accum-string-add! accum-str_13 c_89)(values))))"
"(let-values(((c2_14)"
"(let-values(((in_71) in_63)"
"((source_51)(read-config-source config_59)))"
"(read-char-or-special in_71 special1.1 source_51))))"
"(begin"
"(if(char? c2_14)"
"(let-values()(accum-string-add! accum-str_13 c2_14))"
"(void))"
"(let-values(((tmp_54) c2_14))"
"(if(equal? tmp_54 '#\\x)"
"(let-values()(read-regexp c_89 accum-str_13 in_63 config_59))"
"(let-values()"
"(let-values(((c2264_0) c2_14)"
"((temp265_0)"
"(let-values(((accum-str266_0) accum-str_13)"
"((config267_0) config_59))"
"(accum-string-get!6.1"
" #f"
" #f"
" accum-str266_0"
" config267_0))))"
"(bad-syntax-error18.1"
" c2264_0"
" #t"
" in_63"
" config_59"
" temp265_0)))))))))))"
"(if(unsafe-fx< index_4 34)"
"(let-values()"
"(let-values(((read-undotted268_0) read-undotted)"
"((dispatch-c269_0) dispatch-c_5)"
"((in270_0) in_63)"
"((config271_0) config_59))"
"(read-extension-lang7.1"
" #f"
" #f"
" read-undotted268_0"
" dispatch-c269_0"
" in270_0"
" config271_0)))"
"(if(unsafe-fx< index_4 35)"
"(let-values()"
"(let-values(((read-undotted272_0) read-undotted)"
"((dispatch-c273_0) dispatch-c_5)"
"((in274_0) in_63)"
"((config275_0) config_59))"
"(read-extension-#!16.1"
" #f"
" #f"
" read-undotted272_0"
" dispatch-c273_0"
" in274_0"
" config275_0)))"
"(let-values()"
"(if(check-parameter 1/read-accept-compiled config_59)"
"(let-values()"
"(wrap((read-config-read-compiled config_59) in_63) in_63 config_59 c_89))"
"(let-values()"
"(let-values(((in276_0) in_63)"
"((config277_0) config_59)"
"                                                       ((temp278_1) \"`~a~~` compiled expressions not enabled\")"
"((dispatch-c279_0) dispatch-c_5))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in276_0"
" config277_0"
" temp278_1"
"(list dispatch-c279_0))))))))))))))))))))))))"
"(define-values"
"(retry-special-comment)"
"(lambda(v_235 in_72 config_60)"
"(if(1/special-comment? v_235)"
"(let-values()(if(read-config-keep-comment? config_60) v_235(read-undotted #f in_72 config_60)))"
"(let-values() v_235))))"
"(define-values"
"(1/module-declared?)"
"(let-values(((module-declared?4_0)"
"(lambda(mod3_0 load?1_0 load?2_0)"
"(let-values(((mod_4) mod3_0))"
"(let-values(((load?_3)(if load?2_0 load?1_0 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_4)"
"(void)"
"(let-values()"
"(raise-argument-error 'module-declared? module-reference-str mod_4)))"
"(values))))"
"(let-values(((ns_107)(1/current-namespace)))"
"(let-values(((name_67)"
"(let-values(((load?36_0) load?_3))"
"(reference->resolved-module-path32.1 load?36_0 mod_4))))"
"(if(namespace->module ns_107 name_67) #t #f))))))))))"
"(case-lambda"
"((mod_5)(module-declared?4_0 mod_5 #f #f))"
"((mod_6 load?1_1)(module-declared?4_0 mod_6 load?1_1 #t)))))"
"(define-values"
"(1/module-predefined?)"
"(lambda(mod_7)"
"(let-values((()"
"(begin"
"(if(module-reference? mod_7)"
"(void)"
"(let-values()(raise-argument-error 'module-predefined? module-reference-str mod_7)))"
"(values))))"
"(let-values(((ns_51)(1/current-namespace)))"
"(let-values(((name_68)(let-values(((temp38_3) #f))(reference->resolved-module-path32.1 temp38_3 mod_7))))"
"(let-values(((m_23)(namespace->module ns_51 name_68)))(if m_23(module-primitive? m_23) #f)))))))"
"(define-values"
"(module->)"
"(let-values(((module->11_0)"
"(lambda(extract8_0 who9_0 mod10_0 load?6_0 load?7_0)"
"(let-values(((extract_1) extract8_0))"
"(let-values(((who_27) who9_0))"
"(let-values(((mod_8) mod10_0))"
"(let-values(((load?_4)(if load?7_0 load?6_0 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_8)"
"(void)"
"(let-values()(raise-argument-error who_27 module-reference-str mod_8)))"
"(values))))"
"(let-values(((m_24)"
"(namespace->module/complain"
" who_27"
"(1/current-namespace)"
"(let-values(((load?40_0) load?_4))"
"(reference->resolved-module-path32.1 load?40_0 mod_8)))))"
"(extract_1 m_24)))))))))))"
"(case-lambda"
"((extract_2 who_28 mod_9)(module->11_0 extract_2 who_28 mod_9 #f #f))"
"((extract_3 who_29 mod_10 load?6_1)(module->11_0 extract_3 who_29 mod_10 load?6_1 #t)))))"
"(define-values"
"(1/module->language-info)"
"(let-values(((module->language-info16_0)"
"(lambda(mod15_0 load?13_0 load?14_0)"
"(let-values(((mod_11) mod15_0))"
"(let-values(((load?_5)(if load?14_0 load?13_0 #f)))"
"(let-values()(module-> module-language-info 'module->language-info mod_11 load?_5)))))))"
"(case-lambda"
"((mod_12)(module->language-info16_0 mod_12 #f #f))"
"((mod_13 load?13_1)(module->language-info16_0 mod_13 load?13_1 #t)))))"
"(define-values(1/module->imports)(lambda(mod_14)(module-> module-requires 'module->imports mod_14)))"
"(define-values"
"(1/module->exports)"
"(lambda(mod_15)"
"(let-values(((provides_11 self_25)"
"(module->"
"(lambda(m_25)(values(module-provides m_25)(module-self m_25)))"
" 'module->exports"
" mod_15)))"
"(provides->api-provides provides_11 self_25))))"
"(define-values"
"(1/module->indirect-exports)"
"(lambda(mod_16)"
"(module->"
"(lambda(m_26)(variables->api-nonprovides(module-provides m_26)((module-get-all-variables m_26))))"
" 'module->indirect-exports"
" mod_16)))"
"(define-values"
"(1/module-provide-protected?)"
"(lambda(mod_17 sym_94)"
"(module->"
"(lambda(m_27)"
"(let-values(((b/p_3)(hash-ref(module-provides m_27) sym_94 #f)))"
"(let-values(((or-part_181)(not b/p_3)))(if or-part_181 or-part_181(provided-as-protected? b/p_3)))))"
" 'module-provide-protected?"
" mod_17)))"
"(define-values"
"(1/module->namespace)"
"(let-values(((module->namespace21_0)"
"(lambda(mod20_0 ns18_1 ns19_0)"
"(let-values(((mod_18) mod20_0))"
"(let-values(((ns_108)(if ns19_0 ns18_1(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_18)"
"(void)"
"(let-values()"
"(raise-argument-error 'module->namespace module-reference-str mod_18)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_108)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'module->namespace \"namespace?\" ns_108)))"
"(values))))"
"(let-values(((name_69)"
"(let-values(((temp45_2) #t))"
"(reference->resolved-module-path32.1 temp45_2 mod_18))))"
"(let-values(((phase_94)(namespace-phase ns_108)))"
"(let-values(((m-ns_17)"
"(let-values(((ns46_0) ns_108)"
"((name47_0) name_69)"
"((phase48_0) phase_94))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns46_0"
" name47_0"
" phase48_0))))"
"(begin"
"(if m-ns_17"
"(void)"
"(let-values()"
"(begin"
"(namespace->module/complain 'module->namespace ns_108 name_69)"
"(raise-arguments-error"
" 'module->namespace"
"                                           \"module not instantiated in the current namespace\""
"                                           \"name\""
" name_69))))"
"(if(inspector-superior?(current-code-inspector)(namespace-inspector m-ns_17))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module->namespace"
"                                         \"current code inspector cannot access namespace of module\""
"                                         \"module name\""
" name_69)))"
"(if(namespace-get-root-expand-ctx m-ns_17)"
"(void)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" m-ns_17"
"(let-values()(make-root-expand-context11.1 #f #f #f #f #f #f #f #f)))))"
"(let-values(((ns41_2) ns_108)"
"((temp42_5)(namespace-mpi m-ns_17))"
"((phase43_2) phase_94))"
"(namespace-module-make-available!110.1 #f #f ns41_2 temp42_5 phase43_2))"
" m-ns_17))))))))))))"
"(case-lambda"
"((mod_19)(module->namespace21_0 mod_19 #f #f))"
"((mod_20 ns18_2)(module->namespace21_0 mod_20 ns18_2 #t)))))"
"(define-values"
"(1/namespace-unprotect-module)"
"(let-values(((namespace-unprotect-module27_0)"
"(lambda(insp25_0 mod26_0 ns23_0 ns24_1)"
"(let-values(((insp_14) insp25_0))"
"(let-values(((mod_21) mod26_0))"
"(let-values(((ns_109)(if ns24_1 ns23_0(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(inspector? insp_14)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'namespace-unprotect-module \"inspector?\" insp_14)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod_21)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                 \"module-path?\""
" mod_21)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_109)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                   \"namespace?\""
" ns_109)))"
"(values))))"
"(let-values(((name_70)"
"(let-values(((temp50_5) #f))"
"(reference->resolved-module-path32.1 temp50_5 mod_21))))"
"(let-values(((phase_95)(namespace-phase ns_109)))"
"(let-values(((m-ns_18)"
"(let-values(((ns51_1) ns_109)"
"((name52_0) name_70)"
"((phase53_0) phase_95))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns51_1"
" name52_0"
" phase53_0))))"
"(begin"
"(if m-ns_18"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'namespace-unprotect-module"
"                                             \"module not instantiated\""
"                                             \"module name\""
" name_70)))"
"(if(inspector-superior? insp_14(namespace-inspector m-ns_18))"
"(let-values()"
"(set-namespace-inspector!"
" m-ns_18"
"(make-inspector(current-code-inspector))))"
"(void))))))))))))))))"
"(case-lambda"
"((insp_15 mod_22)(namespace-unprotect-module27_0 insp_15 mod_22 #f #f))"
"((insp_16 mod_23 ns23_1)(namespace-unprotect-module27_0 insp_16 mod_23 ns23_1 #t)))))"
"(define-values"
"(namespace->module/complain)"
"(lambda(who_30 ns_110 name_64)"
"(let-values(((or-part_38)(namespace->module ns_110 name_64)))"
"(if or-part_38"
" or-part_38"
"        (raise-arguments-error who_30 \"unknown module in the current namespace\" \"name\" name_64)))))"
"(define-values"
"(module-reference?)"
"(lambda(mod_24)"
"(let-values(((or-part_196)(1/module-path? mod_24)))"
"(if or-part_196"
" or-part_196"
"(let-values(((or-part_197)(1/module-path-index? mod_24)))"
"(if or-part_197 or-part_197(1/resolved-module-path? mod_24)))))))"
" (define-values (module-reference-str) \"(or/c module-path? module-path-index? resolved-module-path?)\")"
"(define-values"
"(reference->resolved-module-path32.1)"
"(lambda(load?29_0 mod31_0)"
"(let-values(((mod_25) mod31_0))"
"(let-values(((load?_6) load?29_0))"
"(let-values()"
"(if(1/resolved-module-path? mod_25)"
"(let-values() mod_25)"
"(let-values()"
"(let-values(((mpi_45)(if(1/module-path-index? mod_25) mod_25(1/module-path-index-join mod_25 #f))))"
"(1/module-path-index-resolve mpi_45 load?_6)))))))))"
"(define-values"
"(read-syntax$1)"
"(lambda(src_0 in_73)"
"(if(default-read-handler? in_73)"
"(let-values()"
"(let-values(((temp24_10) #t)((src25_0) src_0))"
"(read*14.1 temp24_10 #f #f #f #f #f #f #f #f src25_0 #t in_73)))"
"(let-values()(values((port-read-handler in_73) in_73 src_0))))))"
"(define-values"
"(read-syntax/recursive$1)"
"(lambda(src_1 in_49 start_46 readtable_4 graph?_1)"
"(let-values(((temp27_7) #t)"
"((temp28_4) #t)"
"((src29_0) src_1)"
"((start30_0) start_46)"
"((readtable31_1) readtable_4)"
"((temp32_5)(not graph?_1)))"
"(read*14.1 temp27_7 start30_0 #t temp32_5 #t readtable31_1 #t temp28_4 #t src29_0 #t in_49))))"
"(define-values"
"(read$1)"
"(lambda(in_10)"
"(if(default-read-handler? in_10)"
"(let-values()(let-values(((temp34_3) #f))(read*14.1 temp34_3 #f #f #f #f #f #f #f #f #f #f in_10)))"
"(let-values()(values((port-read-handler in_10) in_10))))))"
"(define-values"
"(read/recursive$1)"
"(lambda(in_74 start_47 readtable_5 graph?_2)"
"(let-values(((temp36_6) #f)"
"((temp37_3) #t)"
"((start38_0) start_47)"
"((readtable39_0) readtable_5)"
"((temp40_2)(not graph?_2)))"
"(read*14.1 temp36_6 start38_0 #t temp40_2 #t readtable39_0 #t temp37_3 #t #f #f in_74))))"
"(define-values"
"(read*14.1)"
"(lambda(for-syntax?1_0"
" init-c4_0"
" init-c10_0"
" local-graph?6_1"
" local-graph?12_0"
" readtable5_0"
" readtable11_0"
" recursive?2_0"
" recursive?8_0"
" source3_0"
" source9_0"
" in13_1)"
"(let-values(((in_14) in13_1))"
"(let-values(((for-syntax?_11) for-syntax?1_0))"
"(let-values(((recursive?_1)(if recursive?8_0 recursive?2_0 #f)))"
"(let-values(((source_34)(if source9_0 source3_0 #f)))"
"(let-values(((init-c_17)(if init-c10_0 init-c4_0 #f)))"
"(let-values(((readtable_6)(if readtable11_0 readtable5_0(1/current-readtable))))"
"(let-values(((local-graph?_2)(if local-graph?12_0 local-graph?6_1 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((for-syntax?42_0) for-syntax?_11)"
"((recursive?43_0) recursive?_1)"
"((source44_0) source_34)"
"((temp45_3)(if for-syntax?_11 read-to-syntax #f))"
"((init-c46_0) init-c_17)"
"((readtable47_0) readtable_6)"
"((local-graph?48_0) local-graph?_2)"
"((read-compiled-linklet49_0) 1/read-compiled-linklet)"
"((dynamic-require-reader50_0) dynamic-require-reader)"
"((read-module-declared?51_0) read-module-declared?)"
"((read-coerce52_0) read-coerce)"
"((read-coerce-key53_0) read-coerce-key))"
"(read30.1"
" read-coerce52_0"
" #t"
" read-coerce-key53_0"
" #t"
" dynamic-require-reader50_0"
" #t"
" for-syntax?42_0"
" #t"
" init-c46_0"
" #t"
" #f"
" #f"
" local-graph?48_0"
" #t"
" read-module-declared?51_0"
" #t"
" #f"
" #f"
" read-compiled-linklet49_0"
" #t"
" readtable47_0"
" #t"
" recursive?43_0"
" #t"
" source44_0"
" #t"
" temp45_3"
" #t"
" in_14)))))))))))))"
"(define-values"
"(read-language$1)"
"(lambda(in_75 fail-thunk_0)"
"(let-values(((temp56_1) #t)"
"((read-to-syntax57_0) read-to-syntax)"
"((read-compiled-linklet58_0) 1/read-compiled-linklet)"
"((dynamic-require-reader59_0) dynamic-require-reader)"
"((read-module-declared?60_0) read-module-declared?)"
"((read-coerce61_0) read-coerce)"
"((read-coerce-key62_0) read-coerce-key))"
"(read-language49.1"
" read-coerce61_0"
" #t"
" read-coerce-key62_0"
" #t"
" dynamic-require-reader59_0"
" #t"
" temp56_1"
" #t"
" read-module-declared?60_0"
" #t"
" read-compiled-linklet58_0"
" #t"
" read-to-syntax57_0"
" #t"
" in_75"
" fail-thunk_0))))"
"(define-values"
"(read-to-syntax)"
"(lambda(s-exp_3 srcloc_10 rep_1)"
"(let-values(((the-struct_85) empty-syntax))"
"(if(syntax?$1 the-struct_85)"
"(let-values(((content63_0)(datum-intern-literal s-exp_3))"
"((srcloc64_0) srcloc_10)"
"((props65_0)"
"(let-values(((tmp_55) rep_1))"
"(if(equal? tmp_55 '#\\[)"
"(let-values() original-square-props)"
"(if(equal? tmp_55 '#\\{)"
"(let-values() original-curly-props)"
"(let-values() original-props))))))"
"(syntax1.1"
" content63_0"
"(syntax-scopes the-struct_85)"
"(syntax-shifted-multi-scopes the-struct_85)"
"(syntax-scope-propagations+tamper the-struct_85)"
"(syntax-mpi-shifts the-struct_85)"
" srcloc64_0"
" props65_0"
"(syntax-inspector the-struct_85)))"
"        (raise-argument-error 'struct-copy \"syntax?\" the-struct_85)))))"
"(define-values(original-props)(syntax-props(syntax-property$1 empty-syntax original-property-sym #t)))"
"(define-values"
"(original-square-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\[)))"
"(define-values"
"(original-curly-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\{)))"
"(define-values(read-module-declared?)(lambda(mod-path_29)(1/module-declared? mod-path_29 #t)))"
"(define-values"
"(read-coerce)"
"(lambda(for-syntax?_12 v_236 srcloc_11)"
"(if(not for-syntax?_12)"
"(let-values()(if(syntax?$1 v_236)(let-values()(syntax->datum$1 v_236))(let-values() v_236)))"
"(let-values()(datum->syntax$1 #f v_236(if srcloc_11(to-srcloc-stx srcloc_11) #f))))))"
"(define-values"
"(read-coerce-key)"
"(lambda(for-syntax?_13 k_37)(if for-syntax?_13(let-values()(datum-intern-literal k_37))(let-values() k_37))))"
"(define-values(default-read-handler) #f)"
"(define-values"
"(default-read-handler?)"
"(lambda(in_76)"
"(if(not default-read-handler)"
"(let-values()(begin(set! default-read-handler(port-read-handler in_76)) #t))"
"(let-values()(eq? default-read-handler(port-read-handler in_76))))))"
"(define-values"
"(dynamic-require-reader)"
"(let-values(((dynamic-require-reader21_0)"
"(lambda(mod-path19_0 sym20_0 fail-thunk17_0 fail-thunk18_0)"
"(let-values(((mod-path_30) mod-path19_0))"
"(let-values(((sym_1) sym20_0))"
"(let-values(((fail-thunk_1)"
"(if fail-thunk18_0 fail-thunk17_0 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(let-values(((root-ns_0)(namespace-root-namespace(1/current-namespace))))"
"(if root-ns_0"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" root-ns_0)"
"(let-values()(1/dynamic-require mod-path_30 sym_1 fail-thunk_1)))"
"(1/dynamic-require mod-path_30 sym_1 fail-thunk_1))))))))))"
"(case-lambda"
"((mod-path_31 sym_95)(dynamic-require-reader21_0 mod-path_31 sym_95 #f #f))"
"((mod-path_32 sym_42 fail-thunk17_1)(dynamic-require-reader21_0 mod-path_32 sym_42 fail-thunk17_1 #t)))))"
"(define-values"
"(1/read-syntax)"
"(let-values(((read-syntax5_0)"
"(lambda(src1_0 in2_0 src3_0 in4_2)"
"(let-values(((src_0)(if src3_0 src1_0(object-name(current-input-port)))))"
"(let-values(((in_73)(if in4_2 in2_0(current-input-port))))"
"(let-values()"
"(begin"
"(if(input-port? in_73)"
"(void)"
"                            (let-values () (raise-argument-error 'read-syntax \"input-port?\" in_73)))"
"(read-syntax$1 src_0 in_73))))))))"
"(case-lambda"
"(()(read-syntax5_0 #f #f #f #f))"
"((src_2 in2_1)(read-syntax5_0 src_2 in2_1 #t #t))"
"((src1_1)(read-syntax5_0 src1_1 #f #t #f)))))"
"(define-values"
"(1/read-syntax/recursive)"
"(let-values(((read-syntax/recursive17_0)"
"(lambda(src7_0"
" in8_2"
" start9_0"
" readtable10_0"
" graph?11_0"
" src12_0"
" in13_2"
" start14_0"
" readtable15_0"
" graph?16_0)"
"(let-values(((src_3)(if src12_0 src7_0(object-name(current-input-port)))))"
"(let-values(((in_74)(if in13_2 in8_2(current-input-port))))"
"(let-values(((start_47)(if start14_0 start9_0 #f)))"
"(let-values(((readtable_5)(if readtable15_0 readtable10_0(1/current-readtable))))"
"(let-values(((graph?_2)(if graph?16_0 graph?11_0 #t)))"
"(let-values()"
"(begin"
"(if(input-port? in_74)"
"(void)"
"                                  (let-values () (raise-argument-error 'read-syntax/recursive \"input-port?\" in_74)))"
"(if(let-values(((or-part_261)(char? start_47)))"
"(if or-part_261 or-part_261(not start_47)))"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'read-syntax/recursive \"(or/c char? #f)\" start_47)))"
"(if(let-values(((or-part_172)(1/readtable? readtable_5)))"
"(if or-part_172 or-part_172(not readtable_5)))"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'read-syntax/recursive \"(or/c readtable? #f)\" readtable_5)))"
"(read-syntax/recursive$1 src_3 in_74 start_47 readtable_5 graph?_2)))))))))))"
"(case-lambda"
"(()(read-syntax/recursive17_0 #f #f #f #f #f #f #f #f #f #f))"
"((src_4 in_21 start_48 readtable_7 graph?11_1)"
"(read-syntax/recursive17_0 src_4 in_21 start_48 readtable_7 graph?11_1 #t #t #t #t #t))"
"((src_5 in_77 start_49 readtable10_1)"
"(read-syntax/recursive17_0 src_5 in_77 start_49 readtable10_1 #f #t #t #t #t #f))"
"((src_6 in_13 start9_1)(read-syntax/recursive17_0 src_6 in_13 start9_1 #f #f #t #t #t #f #f))"
"((src_7 in8_3)(read-syntax/recursive17_0 src_7 in8_3 #f #f #f #t #t #f #f #f))"
"((src7_1)(read-syntax/recursive17_0 src7_1 #f #f #f #f #t #f #f #f #f)))))"
"(define-values"
"(1/read)"
"(let-values(((read21_0)"
"(lambda(in19_0 in20_2)"
"(let-values(((in_78)(if in20_2 in19_0(current-input-port))))"
"(let-values()"
"(begin"
"                        (if (input-port? in_78) (void) (let-values () (raise-argument-error 'read \"input-port?\" in_78)))"
"(read$1 in_78)))))))"
"(case-lambda(()(read21_0 #f #f))((in19_1)(read21_0 in19_1 #t)))))"
"(define-values"
"(1/read/recursive)"
"(let-values(((read/recursive31_0)"
"(lambda(in23_1 start24_0 readtable25_0 graph?26_0 in27_2 start28_0 readtable29_0 graph?30_0)"
"(let-values(((in_15)(if in27_2 in23_1(current-input-port))))"
"(let-values(((start_50)(if start28_0 start24_0 #f)))"
"(let-values(((readtable_8)(if readtable29_0 readtable25_0(1/current-readtable))))"
"(let-values(((graph?_3)(if graph?30_0 graph?26_0 #t)))"
"(let-values()"
"(begin"
"(if(input-port? in_15)"
"(void)"
"                                (let-values () (raise-argument-error 'read/recursive \"input-port?\" in_15)))"
"(if(let-values(((or-part_181)(char? start_50)))"
"(if or-part_181 or-part_181(not start_50)))"
"(void)"
"                                (let-values () (raise-argument-error 'read/recursive \"(or/c char? #f)\" start_50)))"
"(if(let-values(((or-part_17)(1/readtable? readtable_8)))"
"(if or-part_17 or-part_17(not readtable_8)))"
"(void)"
"(let-values()"
"                                  (raise-argument-error 'read/recursive \"(or/c readtable? #f)\" readtable_8)))"
"(read/recursive$1 in_15 start_50 readtable_8 graph?_3))))))))))"
"(case-lambda"
"(()(read/recursive31_0 #f #f #f #f #f #f #f #f))"
"((in_16 start_51 readtable_9 graph?26_1)(read/recursive31_0 in_16 start_51 readtable_9 graph?26_1 #t #t #t #t))"
"((in_34 start_41 readtable25_1)(read/recursive31_0 in_34 start_41 readtable25_1 #f #t #t #t #f))"
"((in_79 start24_1)(read/recursive31_0 in_79 start24_1 #f #f #t #t #f #f))"
"((in23_2)(read/recursive31_0 in23_2 #f #f #f #t #f #f #f)))))"
"(define-values"
"(1/read-language)"
"(let-values(((read-language37_0)"
"(lambda(in33_2 fail-thunk34_0 in35_0 fail-thunk36_0)"
"(let-values(((in_7)(if in35_0 in33_2(current-input-port))))"
"(let-values(((fail-thunk_2)(if fail-thunk36_0 fail-thunk34_0 read-language-fail-thunk)))"
"(let-values()"
"(begin"
"(if(input-port? in_7)"
"(void)"
"                            (let-values () (raise-argument-error 'read-language \"input-port?\" in_7)))"
"(if(if(procedure? fail-thunk_2)(procedure-arity-includes? fail-thunk_2 0) #f)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'read-language \"(procedure-arity-includes?/c 0)\" fail-thunk_2)))"
"(read-language$1 in_7(if(eq? fail-thunk_2 read-language-fail-thunk) #f fail-thunk_2)))))))))"
"(case-lambda"
"(()(read-language37_0 #f #f #f #f))"
"((in_80 fail-thunk34_1)(read-language37_0 in_80 fail-thunk34_1 #t #t))"
"((in33_3)(read-language37_0 in33_3 #f #t #f)))))"
" (define-values (read-language-fail-thunk) (lambda () (error \"fail\")))"
"(define-values"
"(eval$1)"
"(case-lambda"
"((s_0)((current-eval)(intro s_0)))"
"((s_10 ns_56)"
"(begin"
"      (if (1/namespace? ns_56) (void) (let-values () (raise-argument-error 'eval \"namespace?\" ns_56)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_56)"
"(let-values()((current-eval)(intro s_10 ns_56))))))))"
"(define-values"
"(1/eval-syntax)"
"(case-lambda"
"((s_1)"
"(begin"
"      (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_1)))"
"((current-eval) s_1)))"
"((s_12 ns_111)"
"(begin"
"      (if (syntax?$1 s_12) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_12)))"
"      (if (1/namespace? ns_111) (void) (let-values () (raise-argument-error 'eval-syntax \"namespace?\" ns_111)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_111)"
"(let-values()((current-eval) s_12)))))))"
"(define-values(compile$1)(lambda(s_2)((current-compile)(intro s_2) #f)))"
"(define-values"
"(1/compile-syntax)"
"(lambda(s_3)"
"(begin"
"      (if (syntax?$1 s_3) (void) (let-values () (raise-argument-error 'compile-syntax \"syntax?\" s_3)))"
"((current-compile) s_3 #f))))"
"(define-values(1/expand)(lambda(s_165)(expand$1(intro s_165)(1/current-namespace) #t)))"
"(define-values"
"(1/expand-syntax)"
"(lambda(s_144)"
"(begin"
"      (if (syntax?$1 s_144) (void) (let-values () (raise-argument-error 'expand-syntax \"syntax?\" s_144)))"
"(expand$1 s_144(1/current-namespace) #t))))"
"(define-values(1/expand-once)(lambda(s_73)(expand-once$1(intro s_73))))"
"(define-values"
"(1/expand-syntax-once)"
"(lambda(s_8)"
"(begin"
"      (if (syntax?$1 s_8) (void) (let-values () (raise-argument-error 'expand-syntax-once \"syntax?\" s_8)))"
"(expand-once$1 s_8))))"
"(define-values(1/expand-to-top-form)(lambda(s_442)(expand-to-top-form$1(intro s_442))))"
"(define-values"
"(1/expand-syntax-to-top-form)"
"(lambda(s_417)"
"(begin"
"      (if (syntax?$1 s_417) (void) (let-values () (raise-argument-error 'expand-syntax-to-top-form \"syntax?\" s_417)))"
"(expand-to-top-form$1 s_417))))"
"(define-values"
"(intro)"
"(let-values(((intro4_0)"
"(lambda(given-s3_0 ns1_6 ns2_1)"
"(let-values(((given-s_1) given-s3_0))"
"(let-values(((ns_112)(if ns2_1 ns1_6(1/current-namespace))))"
"(let-values()"
"(let-values(((s_9)(if(syntax?$1 given-s_1) given-s_1(1/datum->syntax #f given-s_1))))"
"(1/namespace-syntax-introduce s_9 ns_112))))))))"
"(case-lambda((given-s_2)(intro4_0 given-s_2 #f #f))((given-s_3 ns1_7)(intro4_0 given-s_3 ns1_7 #t)))))"
"(define-values"
"(1/prop:missing-module 1/exn:missing-module? 1/exn:missing-module-accessor)"
"(make-struct-type-property"
" 'missing-module"
"(lambda(v_32 info_6)"
"(begin"
"(if(if(procedure? v_32)(procedure-arity-includes? v_32 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:missing-module \"(procedure-arity-includes/c 1)\" v_32)))"
" v_32))))"
"(define-values"
"(1/struct:exn:fail:filesystem:missing-module"
" 1/make-exn:fail:filesystem:missing-module"
" 1/exn:fail:filesystem:missing-module?"
" 1/exn:fail:filesystem:missing-module-path)"
"(let-values(((struct:_78 make-_78 ?_78 -ref_78 -set!_78)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:filesystem:missing-module"
" struct:exn:fail:filesystem"
" 1"
" 0"
" #f"
"(list"
"(cons 1/prop:missing-module(lambda(e_84)(1/exn:fail:filesystem:missing-module-path e_84))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:filesystem:missing-module)))))"
"(values struct:_78 make-_78 ?_78(make-struct-field-accessor -ref_78 0 'path))))"
"(define-values"
"(1/struct:exn:fail:syntax:missing-module"
" 1/make-exn:fail:syntax:missing-module"
" 1/exn:fail:syntax:missing-module?"
" 1/exn:fail:syntax:missing-module-path)"
"(let-values(((struct:_79 make-_79 ?_79 -ref_79 -set!_79)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax:missing-module"
" 1/struct:exn:fail:syntax"
" 1"
" 0"
" #f"
"(list(cons 1/prop:missing-module(lambda(e_85)(1/exn:fail:syntax:missing-module-path e_85))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:syntax:missing-module)))))"
"(values struct:_79 make-_79 ?_79(make-struct-field-accessor -ref_79 0 'path))))"
"(define-values"
"(1/current-module-path-for-load)"
"(make-parameter"
" #f"
"(lambda(v_237)"
"(begin"
"(if(let-values(((or-part_16)(not v_237)))"
"(if or-part_16"
" or-part_16"
"(let-values(((or-part_95)(1/module-path? v_237)))"
"(if or-part_95 or-part_95(if(syntax?$1 v_237)(1/module-path?(syntax->datum$1 v_237)) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-path-for-load"
"(string-append"
"             \"(or/c module-path?\""
"             \" (and/c syntax? (lambda (stx) (module-path? (syntax->datum stx))))\""
"             \" #f)\")"
" v_237)))"
" v_237))))"
"(define-values"
"(maybe-raise-missing-module)"
"(lambda(name_71 filename_0 pre_0 rel_0 post_0 errstr_0)"
"(let-values(((path_9)(1/current-module-path-for-load)))"
"(if path_9"
"(let-values()"
"(begin"
"(if(syntax?$1 path_9)"
"(let-values()"
"(raise"
"(1/make-exn:fail:syntax:missing-module"
"(format"
"(string-append"
"                    \"~a: cannot open module file\\n\""
"                    \"  module path: ~a\\n\""
"                    \"  path: ~a~a~a~a\\n\""
"                    \"  system error: ~a\")"
"(if(syntax-srcloc path_9)(srcloc->string(syntax-srcloc path_9)) name_71)"
"(syntax->datum$1 path_9)"
" filename_0"
" pre_0"
" rel_0"
" post_0"
" errstr_0)"
"(current-continuation-marks)"
"(list path_9)"
"(syntax->datum$1 path_9))))"
"(void))"
"(raise"
"(1/make-exn:fail:filesystem:missing-module"
"(format"
"(string-append"
"                \"~a: cannot open module file\\n\""
"                \"  module path: ~a\\n\""
"                \"  path: ~a~a~a~a\\n\""
"                \"  system error: ~a\")"
" name_71"
" path_9"
" filename_0"
" pre_0"
" rel_0"
" post_0"
" errstr_0)"
"(current-continuation-marks)"
" path_9))))"
"(void)))))"
"(define-values"
"(1/local-expand)"
"(let-values(((local-expand6_0)"
"(lambda(s3_3 context4_0 stop-ids5_0 intdefs1_0 intdefs2_0)"
"(let-values(((s_2) s3_3))"
"(let-values(((context_9) context4_0))"
"(let-values(((stop-ids_2) stop-ids5_0))"
"(let-values(((intdefs_3)(if intdefs2_0 intdefs1_0 #f)))"
"(let-values()"
"(let-values(((temp63_3) 'local-expand)"
"((s64_0) s_2)"
"((context65_0) context_9)"
"((stop-ids66_0) stop-ids_2)"
"((intdefs67_0) intdefs_3))"
"(do-local-expand60.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp63_3"
" s64_0"
" context65_0"
" stop-ids66_0"
" intdefs67_0"
" #t))))))))))"
"(case-lambda"
"((s_166 context_10 stop-ids_3)(local-expand6_0 s_166 context_10 stop-ids_3 #f #f))"
"((s_4 context_11 stop-ids_4 intdefs1_1)(local-expand6_0 s_4 context_11 stop-ids_4 intdefs1_1 #t)))))"
"(define-values"
"(1/local-expand/capture-lifts)"
"(let-values(((local-expand/capture-lifts15_0)"
"(lambda(s12_2 context13_0 stop-ids14_0 intdefs8_0 lift-key9_0 intdefs10_0 lift-key11_0)"
"(let-values(((s_176) s12_2))"
"(let-values(((context_12) context13_0))"
"(let-values(((stop-ids_5) stop-ids14_0))"
"(let-values(((intdefs_4)(if intdefs10_0 intdefs8_0 #f)))"
"(let-values(((lift-key_4)(if lift-key11_0 lift-key9_0(generate-lift-key))))"
"(let-values()"
"(let-values(((temp68_1) 'local-expand)"
"((s69_0) s_176)"
"((context70_0) context_12)"
"((stop-ids71_0) stop-ids_5)"
"((intdefs72_0) intdefs_4)"
"((temp73_4) #t)"
"((lift-key74_0) lift-key_4))"
"(do-local-expand60.1"
" #f"
" #f"
" temp73_4"
" #t"
" lift-key74_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp68_1"
" s69_0"
" context70_0"
" stop-ids71_0"
" intdefs72_0"
" #t)))))))))))"
"(case-lambda"
"((s_78 context_13 stop-ids_6)(local-expand/capture-lifts15_0 s_78 context_13 stop-ids_6 #f #f #f #f))"
"((s_84 context_14 stop-ids_7 intdefs_5 lift-key9_1)"
"(local-expand/capture-lifts15_0 s_84 context_14 stop-ids_7 intdefs_5 lift-key9_1 #t #t))"
"((s_443 context_15 stop-ids_8 intdefs8_1)"
"(local-expand/capture-lifts15_0 s_443 context_15 stop-ids_8 intdefs8_1 #f #t #f)))))"
"(define-values"
"(1/local-transformer-expand)"
"(let-values(((local-transformer-expand22_0)"
"(lambda(s19_1 context20_0 stop-ids21_0 intdefs17_0 intdefs18_0)"
"(let-values(((s_161) s19_1))"
"(let-values(((context_16) context20_0))"
"(let-values(((stop-ids_9) stop-ids21_0))"
"(let-values(((intdefs_6)(if intdefs18_0 intdefs17_0 #f)))"
"(let-values()"
"(let-values(((temp75_1) 'local-expand)"
"((s76_1) s_161)"
"((context77_0) context_16)"
"((stop-ids78_0) stop-ids_9)"
"((intdefs79_0) intdefs_6)"
"((temp80_7) #t))"
"(do-local-expand60.1"
" temp80_7"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp75_1"
" s76_1"
" context77_0"
" stop-ids78_0"
" intdefs79_0"
" #t))))))))))"
"(case-lambda"
"((s_175 context_17 stop-ids_10)(local-transformer-expand22_0 s_175 context_17 stop-ids_10 #f #f))"
"((s_13 context_18 stop-ids_11 intdefs17_1)"
"(local-transformer-expand22_0 s_13 context_18 stop-ids_11 intdefs17_1 #t)))))"
"(define-values"
"(1/local-transformer-expand/capture-lifts)"
"(let-values(((local-transformer-expand/capture-lifts31_0)"
"(lambda(s28_1 context29_0 stop-ids30_0 intdefs24_0 lift-key25_0 intdefs26_1 lift-key27_0)"
"(let-values(((s_444) s28_1))"
"(let-values(((context_19) context29_0))"
"(let-values(((stop-ids_12) stop-ids30_0))"
"(let-values(((intdefs_7)(if intdefs26_1 intdefs24_0 #f)))"
"(let-values(((lift-key_0)(if lift-key27_0 lift-key25_0(generate-lift-key))))"
"(let-values()"
"(let-values(((temp81_5) 'local-expand)"
"((s82_0) s_444)"
"((context83_0) context_19)"
"((stop-ids84_0) stop-ids_12)"
"((intdefs85_0) intdefs_7)"
"((temp86_2) #t)"
"((temp87_1) #t)"
"((lift-key88_0) lift-key_0))"
"(do-local-expand60.1"
" temp86_2"
" #t"
" temp87_1"
" #t"
" lift-key88_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_5"
" s82_0"
" context83_0"
" stop-ids84_0"
" intdefs85_0"
" #t)))))))))))"
"(case-lambda"
"((s_445 context_20 stop-ids_13)"
"(local-transformer-expand/capture-lifts31_0 s_445 context_20 stop-ids_13 #f #f #f #f))"
"((s_162 context_21 stop-ids_14 intdefs_8 lift-key25_1)"
"(local-transformer-expand/capture-lifts31_0 s_162 context_21 stop-ids_14 intdefs_8 lift-key25_1 #t #t))"
"((s_446 context_22 stop-ids_15 intdefs24_1)"
"(local-transformer-expand/capture-lifts31_0 s_446 context_22 stop-ids_15 intdefs24_1 #f #t #f)))))"
"(define-values"
"(do-syntax-local-expand-expression39.1)"
"(lambda(local-keys33_0 local-keys35_0 local-values34_0 local-values36_0 who37_1 s38_0)"
"(let-values(((who_31) who37_1))"
"(let-values(((s_447) s38_0))"
"(let-values(((local-keys_0)(if local-keys35_0 local-keys33_0 null)))"
"(let-values(((local-values_0)(if local-values36_0 local-values34_0 null)))"
"(let-values()"
"(let-values(((exp-s_10)"
"(let-values(((temp91_1) 'expression)"
"((null92_0) null)"
"((temp93_3) #f)"
"((temp94_2) #t)"
"((local-keys95_0) local-keys_0)"
"((local-values96_0) local-values_0))"
"(do-local-expand60.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" local-keys95_0"
" #t"
" local-values96_0"
" #t"
" temp94_2"
" #t"
" who_31"
" s_447"
" temp91_1"
" null92_0"
" temp93_3"
" #t))))"
"(let-values(((ctx_69)(let-values()(get-current-expand-context15.1 #f #f #f #f))))"
"(let-values(((ae_1)"
"(already-expanded1.1"
"(flip-introduction-scopes exp-s_10 ctx_69)"
"(expand-context-binding-layer ctx_69))))"
"(begin"
"(let-values(((obs_12)(expand-context-observer ctx_69)))"
"(if obs_12"
"(let-values()(let-values()(call-expand-observe obs_12 'opaque-expr ae_1)))"
"(void)))"
"(let-values(((obs_13)(expand-context-observer ctx_69)))"
"(if obs_13"
"(let-values()(let-values()(call-expand-observe obs_13 'exit-local exp-s_10)))"
"(void)))"
"(values exp-s_10(flip-introduction-scopes(datum->syntax$1 #f ae_1) ctx_69)))))))))))))"
"(define-values"
"(1/syntax-local-expand-expression)"
"(lambda(s_448)"
"(let-values(((temp97_4) 'syntax-local-expand-expression)((s98_0) s_448))"
"(do-syntax-local-expand-expression39.1 #f #f #f #f temp97_4 s98_0))))"
"(define-values"
"(1/syntax-local-expand-expression/extend-environment)"
"(lambda(s_47 keys_5 values_0)"
"(let-values(((temp99_3) 'syntax-local-expand-expression/extend-environment)"
"((s100_0) s_47)"
"((keys101_0) keys_5)"
"((values102_0) values_0))"
"(do-syntax-local-expand-expression39.1 keys101_0 #t values102_0 #t temp99_3 s100_0))))"
"(define-values"
"(do-local-expand60.1)"
"(lambda(as-transformer?43_0"
" as-transformer?49_0"
" capture-lifts?42_0"
" capture-lifts?48_0"
" lift-key44_0"
" lift-key50_0"
" local-keys46_0"
" local-keys52_0"
" local-values47_0"
" local-values53_0"
" skip-log-exit?45_0"
" skip-log-exit?51_0"
" who56_0"
" s57_0"
" context58_1"
" stop-ids59_0"
" intdefs54_0"
" intdefs55_0)"
"(let-values(((who_32) who56_0))"
"(let-values(((s_449) s57_0))"
"(let-values(((context_23) context58_1))"
"(let-values(((stop-ids_16) stop-ids59_0))"
"(let-values(((intdefs_9)(if intdefs55_0 intdefs54_0 #f)))"
"(let-values(((capture-lifts?_0)(if capture-lifts?48_0 capture-lifts?42_0 #f)))"
"(let-values(((as-transformer?_5)(if as-transformer?49_0 as-transformer?43_0 #f)))"
"(let-values(((lift-key_1)"
"(if lift-key50_0"
" lift-key44_0"
"(if(let-values(((or-part_192) capture-lifts?_0))"
"(if or-part_192 or-part_192 as-transformer?_5))"
"(generate-lift-key)"
" #f))))"
"(let-values(((skip-log-exit?_0)(if skip-log-exit?51_0 skip-log-exit?45_0 #f)))"
"(let-values(((local-keys_1)(if local-keys52_0 local-keys46_0 null)))"
"(let-values(((local-values_1)(if local-values53_0 local-values47_0 null)))"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_449)"
"(void)"
"                                                (let-values () (raise-argument-error who_32 \"syntax?\" s_449)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_313)(list? context_23)))"
"(if or-part_313"
" or-part_313"
"(memq"
" context_23"
"(if as-transformer?_5"
" '(expression top-level)"
" '(expression top-level module module-begin)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_32"
"(if as-transformer?_5"
"                                                       \"(or/c 'expression 'top-level list?)\""
"                                                       \"(or/c 'expression 'top-level 'module 'module-begin list?)\")"
" context_23)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_314)(not stop-ids_16)))"
"(if or-part_314"
" or-part_314"
"(if(list? stop-ids_16)"
"(andmap2 identifier? stop-ids_16)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_32"
"                                                       \"(or/c (listof identifier?) #f)\""
" stop-ids_16)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_315)(not intdefs_9)))"
"(if or-part_315"
" or-part_315"
"(let-values(((or-part_316)"
"(1/internal-definition-context? intdefs_9)))"
"(if or-part_316"
" or-part_316"
"(if(list? intdefs_9)"
"(andmap2 1/internal-definition-context? intdefs_9)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_32"
"                                                         \"(or/c #f internal-definitionc-context? (listof internal-definitionc-context?))\""
" intdefs_9)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(list? local-keys_1)"
"(void)"
"(let-values()"
"                                                          (raise-argument-error who_32 \"list?\" local-keys_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(list? local-values_1)"
"(void)"
"(let-values()"
"                                                            (raise-argument-error who_32 \"list?\" local-values_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(=(length local-keys_1)(length local-values_1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_32"
"                                                               \"different lengths for list of keys and values for extending the environment\""
"                                                               \"keys\""
" local-keys_1"
"                                                               \"values\""
" local-values_1)))"
"(values))))"
"(let-values(((ctx_70)"
"(let-values(((who103_1) who_32))"
"(get-current-expand-context15.1 #f #f who103_1 #t))))"
"(let-values(((phase_140)"
"(if as-transformer?_5"
"(add1(expand-context-phase ctx_70))"
"(expand-context-phase ctx_70))))"
"(let-values(((base-local-ctx_0)"
"(let-values(((context105_0) context_23)"
"((phase106_0) phase_140)"
"((intdefs107_0) intdefs_9)"
"((stop-ids108_0) stop-ids_16))"
"(make-local-expand-context33.1"
" context105_0"
" intdefs107_0"
" phase106_0"
" #t"
" stop-ids108_0"
" #t"
" ctx_70))))"
"(let-values(((local-ctx_0)"
"(let-values(((v_238) base-local-ctx_0))"
"(let-values(((the-struct_86) v_238))"
"(if(expand-context/outer? the-struct_86)"
"(let-values(((inner109_0)"
"(let-values(((the-struct_87)"
"(root-expand-context/outer-inner"
" v_238)))"
"(if(expand-context/inner?"
" the-struct_87)"
"(let-values(((user-env110_0)"
"(let-values(((user-env_1)"
"(expand-context-user-env"
" base-local-ctx_0)))"
"(let-values(((lst_295)"
" local-keys_1)"
"((lst_296)"
" local-values_1))"
"(begin"
"(check-list"
" lst_295)"
"(check-list"
" lst_296)"
"((letrec-values(((for-loop_250)"
"(lambda(user-env_2"
" lst_293"
" lst_297)"
"(if(if(pair?"
" lst_293)"
"(pair?"
" lst_297)"
" #f)"
"(let-values(((key_81)"
"(unsafe-car"
" lst_293))"
"((rest_166)"
"(unsafe-cdr"
" lst_293))"
"((value_0)"
"(unsafe-car"
" lst_297))"
"((rest_167)"
"(unsafe-cdr"
" lst_297)))"
"(let-values(((user-env_3)"
"(let-values(((user-env_4)"
" user-env_2))"
"(let-values(((user-env_5)"
"(let-values()"
"(hash-set"
" user-env_4"
" key_81"
" value_0))))"
"(values"
" user-env_5)))))"
"(if(not"
" #f)"
"(for-loop_250"
" user-env_3"
" rest_166"
" rest_167)"
" user-env_3)))"
" user-env_2))))"
" for-loop_250)"
" user-env_1"
" lst_295"
" lst_296))))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_87)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_87)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_87)"
"(root-expand-context/inner-defined-syms"
" the-struct_87)"
"(root-expand-context/inner-counter"
" the-struct_87)"
"(root-expand-context/inner-lift-key"
" the-struct_87)"
"(expand-context/inner-to-parsed?"
" the-struct_87)"
"(expand-context/inner-phase"
" the-struct_87)"
"(expand-context/inner-namespace"
" the-struct_87)"
" user-env110_0"
"(expand-context/inner-just-once?"
" the-struct_87)"
"(expand-context/inner-module-begin-k"
" the-struct_87)"
"(expand-context/inner-allow-unbound?"
" the-struct_87)"
"(expand-context/inner-in-local-expand?"
" the-struct_87)"
"(expand-context/inner-stops"
" the-struct_87)"
"(expand-context/inner-declared-submodule-names"
" the-struct_87)"
"(expand-context/inner-lifts"
" the-struct_87)"
"(expand-context/inner-lift-envs"
" the-struct_87)"
"(expand-context/inner-module-lifts"
" the-struct_87)"
"(expand-context/inner-require-lifts"
" the-struct_87)"
"(expand-context/inner-to-module-lifts"
" the-struct_87)"
"(expand-context/inner-requires+provides"
" the-struct_87)"
"(expand-context/inner-observer"
" the-struct_87)"
"(expand-context/inner-for-serializable?"
" the-struct_87)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                         \"expand-context/inner?\""
" the-struct_87)))))"
"(expand-context/outer1.1"
" inner109_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_86)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_86)"
"(root-expand-context/outer-frame-id"
" the-struct_86)"
"(expand-context/outer-context the-struct_86)"
"(expand-context/outer-env the-struct_86)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_86)"
"(expand-context/outer-scopes the-struct_86)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_86)"
"(expand-context/outer-binding-layer"
" the-struct_86)"
"(expand-context/outer-reference-records"
" the-struct_86)"
"(expand-context/outer-only-immediate?"
" the-struct_86)"
"(expand-context/outer-need-eventually-defined"
" the-struct_86)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_86)"
"(expand-context/outer-name the-struct_86)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                       \"expand-context/outer?\""
" the-struct_86))))))"
"(let-values(((input-s_1)"
"(let-values(((temp111_3)"
"(flip-introduction-scopes s_449 ctx_70))"
"((intdefs112_0) intdefs_9))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" #f"
" #f"
" temp111_3"
" intdefs112_0))))"
"(let-values((()"
"(begin"
"(let-values(((obs_37)"
"(expand-context-observer"
" local-ctx_0)))"
"(if obs_37"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_37"
" 'enter-local)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if as-transformer?_5"
"(let-values()"
"(let-values(((obs_38)"
"(expand-context-observer"
" local-ctx_0)))"
"(if obs_38"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_38"
" 'phase-up)))"
"(void))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_39)"
"(expand-context-observer"
" local-ctx_0)))"
"(if obs_39"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_39"
" 'local-pre"
" input-s_1)"
"(call-expand-observe"
" obs_39"
" 'start-expand))))"
"(void)))"
"(values))))"
"(let-values(((output-s_0)"
"(if(if as-transformer?_5 capture-lifts?_0 #f)"
"(let-values()"
"(let-values(((context115_0) context_23)"
"((temp116_3) #f)"
"((temp117_2) #t)"
"((lift-key118_0) lift-key_1)"
"((temp119_3) #t))"
"(expand-transformer43.1"
" temp119_3"
" #t"
" temp117_2"
" #t"
" context115_0"
" #t"
" temp116_3"
" #t"
" lift-key118_0"
" #t"
" input-s_1"
" local-ctx_0)))"
"(if as-transformer?_5"
"(let-values()"
"(let-values(((context122_0) context_23)"
"((temp123_1) #f)"
"((temp124_2)"
"(eq?"
" 'top-level"
" context_23))"
"((lift-key125_0)"
" lift-key_1))"
"(expand-transformer43.1"
" #f"
" #f"
" temp124_2"
" #t"
" context122_0"
" #t"
" temp123_1"
" #t"
" lift-key125_0"
" #t"
" input-s_1"
" local-ctx_0)))"
"(if capture-lifts?_0"
"(let-values()"
"(let-values(((temp128_1) #t)"
"((lift-key129_0)"
" lift-key_1)"
"((temp130_4) #t))"
"(expand/capture-lifts28.1"
" temp130_4"
" #t"
" temp128_1"
" #t"
" #f"
" #f"
" lift-key129_0"
" #t"
" input-s_1"
" local-ctx_0)))"
"(let-values()"
"(let-values(((input-s131_0)"
" input-s_1)"
"((local-ctx132_0)"
" local-ctx_0))"
"(expand5.1"
" #f"
" #f"
" input-s131_0"
" local-ctx132_0))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_40)"
"(expand-context-observer"
" local-ctx_0)))"
"(if obs_40"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_40"
" 'local-post"
" output-s_0)))"
"(void)))"
"(values))))"
"(let-values(((result-s_8)"
"(flip-introduction-scopes"
" output-s_0"
" ctx_70)))"
"(begin"
"(if skip-log-exit?_0"
"(void)"
"(let-values()"
"(let-values(((obs_41)"
"(expand-context-observer"
" local-ctx_0)))"
"(if obs_41"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_41"
" 'exit-local"
" result-s_8)))"
"(void)))))"
" result-s_8))))))))))))))))))))))))))))))))))"
"(define-values"
"(1/syntax-tainted?)"
"(lambda(s_0)"
"(begin"
"      (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'syntax-tainted? \"syntax?\" s_0)))"
"(syntax-tainted?$1 s_0))))"
"(define-values"
"(1/syntax-arm)"
"(let-values(((syntax-arm6_0)"
"(lambda(s5_1 maybe-insp1_0 use-mode?2_0 maybe-insp3_0 use-mode?4_0)"
"(let-values(((s_3) s5_1))"
"(let-values(((maybe-insp_0)(if maybe-insp3_0 maybe-insp1_0 #f)))"
"(let-values(((use-mode?_0)(if use-mode?4_0 use-mode?2_0 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_3)"
"(void)"
"                                            (let-values () (raise-argument-error 'syntax-arm \"syntax?\" s_3)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)(not maybe-insp_0)))"
"(if or-part_4 or-part_4(inspector? maybe-insp_0)))"
"(void)"
"(let-values()"
"                                                (raise-argument-error 'syntax-arm \"(or/c inspector? #f)\" maybe-insp_0)))"
"(values))))"
"(let-values(((insp_17)(inspector-for-taint maybe-insp_0)))"
"(if use-mode?_0"
"(let-values()"
"(taint-dispatch"
" s_3"
"(lambda(s_442)(syntax-arm$1 s_442 insp_17))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-arm$1 s_3 insp_17)))))))))))))"
"(case-lambda"
"((s_417)(syntax-arm6_0 s_417 #f #f #f #f))"
"((s_450 maybe-insp_1 use-mode?2_1)(syntax-arm6_0 s_450 maybe-insp_1 use-mode?2_1 #t #t))"
"((s_451 maybe-insp1_1)(syntax-arm6_0 s_451 maybe-insp1_1 #f #t #f)))))"
"(define-values"
"(1/syntax-disarm)"
"(lambda(s_402 maybe-insp_2)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_402) (void) (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_402)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_291)(not maybe-insp_2)))"
"(if or-part_291 or-part_291(inspector? maybe-insp_2)))"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-disarm \"(or/c inspector? #f)\" maybe-insp_2)))"
"(values))))"
"(let-values(((insp_18)(inspector-for-taint maybe-insp_2)))(syntax-disarm$1 s_402 insp_18))))))"
"(define-values"
"(1/syntax-rearm)"
"(let-values(((syntax-rearm12_0)"
"(lambda(s10_0 from-s11_0 use-mode?8_0 use-mode?9_0)"
"(let-values(((s_41) s10_0))"
"(let-values(((from-s_2) from-s11_0))"
"(let-values(((use-mode?_1)(if use-mode?9_0 use-mode?8_0 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_41)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_41)))"
"(if(syntax?$1 from-s_2)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" from-s_2)))"
"(if use-mode?_1"
"(let-values()"
"(taint-dispatch"
" s_41"
"(lambda(s_5)(syntax-rearm$1 s_5 from-s_2))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-rearm$1 s_41 from-s_2)))))))))))"
"(case-lambda"
"((s_452 from-s_3)(syntax-rearm12_0 s_452 from-s_3 #f #f))"
"((s_168 from-s_4 use-mode?8_1)(syntax-rearm12_0 s_168 from-s_4 use-mode?8_1 #t)))))"
"(define-values"
"(1/syntax-taint)"
"(lambda(s_160)"
"(begin"
"      (if (syntax?$1 s_160) (void) (let-values () (raise-argument-error 'syntax-taint \"syntax?\" s_160)))"
"(syntax-taint$1 s_160))))"
"(define-values"
"(inspector-for-taint)"
"(lambda(maybe-insp_3)"
"(let-values(((or-part_92) maybe-insp_3))"
"(if or-part_92"
" or-part_92"
"(let-values(((or-part_93)(current-module-code-inspector)))"
"(if or-part_93 or-part_93(current-code-inspector)))))))"
"(define-values"
"(1/variable-reference->empty-namespace)"
"(lambda(vr_0)"
"(begin"
"(if(1/variable-reference? vr_0)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->empty-namespace \"variable-reference?\" vr_0)))"
"(let-values(((temp1_2)(1/variable-reference->namespace vr_0)))(new-namespace9.1 #f #f #f #f temp1_2 #t)))))"
"(define-values"
"(1/variable-reference->namespace)"
"(lambda(vr_1)"
"(begin"
"(if(1/variable-reference? vr_1)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->namespace \"variable-reference?\" vr_1)))"
"(1/instance-data(1/variable-reference->instance vr_1)))))"
"(define-values"
"(1/variable-reference->module-path-index)"
"(lambda(vr_2)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_2)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->module-path-index \"variable-reference?\" vr_2)))"
"(values))))"
"(let-values(((mpi_46)(namespace-mpi(1/variable-reference->namespace vr_2))))"
"(if(top-level-module-path-index? mpi_46) #f mpi_46)))))"
"(define-values"
"(1/variable-reference->resolved-module-path)"
"(lambda(vr_3)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_3)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->resolved-module-path \"variable-reference?\" vr_3)))"
"(values))))"
"(let-values(((mpi_47)(1/variable-reference->module-path-index vr_3)))"
"(if mpi_47(1/module-path-index-resolve mpi_47) #f)))))"
"(define-values"
"(1/variable-reference->module-source)"
"(lambda(vr_4)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_4)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->module-source \"variable-reference?\" vr_4)))"
"(values))))"
"(let-values(((ns_57)(1/variable-reference->namespace vr_4)))(namespace-source-name ns_57)))))"
"(define-values"
"(1/variable-reference->phase)"
"(lambda(vr_5)"
"(begin"
"(if(1/variable-reference? vr_5)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->phase \"variable-reference?\" vr_5)))"
"(namespace-phase(1/variable-reference->namespace vr_5)))))"
"(define-values"
"(1/variable-reference->module-base-phase)"
"(lambda(vr_6)"
"(begin"
"(if(1/variable-reference? vr_6)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->module-base-phase \"variable-reference?\" vr_6)))"
"(namespace-0-phase(1/variable-reference->namespace vr_6)))))"
"(define-values"
"(1/variable-reference->module-declaration-inspector)"
"(lambda(vr_7)"
"(begin"
"(if(1/variable-reference? vr_7)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->base-phase \"variable-reference?\" vr_7)))"
"(let-values(((or-part_10)(namespace-declaration-inspector(1/variable-reference->namespace vr_7))))"
"(if or-part_10"
" or-part_10"
"(raise-arguments-error"
" 'variable-reference->module-declaration-inspector"
"           \"given variable reference is not from a module\"))))))"
"(define-values"
"(primitive-ids)"
"(seteq"
" 'syntax?"
" 'syntax-e"
" 'syntax->datum"
" 'datum->syntax"
" 'bound-identifier=?"
" 'free-identifier=?"
" 'free-transformer-identifier=?"
" 'free-template-identifier=?"
" 'free-label-identifier=?"
" 'identifier-binding"
" 'identifier-transformer-binding"
" 'identifier-template-binding"
" 'identifier-label-binding"
" 'identifier-binding-symbol"
" 'identifier-prune-lexical-context"
" 'syntax-debug-info"
" 'syntax-track-origin"
" 'syntax-shift-phase-level"
" 'syntax-source-module"
" 'identifier-prune-to-source-module"
" 'syntax-source"
" 'syntax-line"
" 'syntax-column"
" 'syntax-position"
" 'syntax-span"
" 'syntax->list"
" 'syntax-property"
" 'syntax-property-preserved?"
" 'syntax-property-symbol-keys"
" 'syntax-original?"
" 'syntax-tainted?"
" 'syntax-arm"
" 'syntax-disarm"
" 'syntax-rearm"
" 'syntax-taint"
" 'raise-syntax-error"
" 'struct:exn:fail:syntax"
" 'exn:fail:syntax"
" 'make-exn:fail:syntax"
" 'exn:fail:syntax?"
" 'exn:fail:syntax-exprs"
" 'struct:exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound"
" 'make-exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound?"
" 'current-module-path-for-load"
" 'prop:missing-module"
" 'exn:missing-module?"
" 'exn:missing-module-accessor"
" 'struct:exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module"
" 'make-exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module?"
" 'exn:fail:filesystem:missing-module-path"
" 'struct:exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module"
" 'make-exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module?"
" 'exn:fail:syntax:missing-module-path"
" 'syntax-transforming?"
" 'syntax-transforming-with-lifts?"
" 'syntax-transforming-module-expression?"
" 'syntax-local-transforming-module-provides?"
" 'syntax-local-context"
" 'syntax-local-introduce"
" 'syntax-local-identifier-as-binding"
" 'syntax-local-phase-level"
" 'syntax-local-name"
" 'make-syntax-introducer"
" 'make-syntax-delta-introducer"
" 'syntax-local-value"
" 'syntax-local-value/immediate"
" 'syntax-local-lift-expression"
" 'syntax-local-lift-values-expression"
" 'syntax-local-lift-context"
" 'syntax-local-lift-module"
" 'syntax-local-lift-require"
" 'syntax-local-lift-provide"
" 'syntax-local-lift-module-end-declaration"
" 'syntax-local-module-defined-identifiers"
" 'syntax-local-module-required-identifiers"
" 'syntax-local-module-exports"
" 'syntax-local-submodules"
" 'syntax-local-get-shadower"
" 'local-expand"
" 'local-expand/capture-lifts"
" 'local-transformer-expand"
" 'local-transformer-expand/capture-lifts"
" 'syntax-local-expand-expression"
" 'syntax-local-expand-expression/extend-environment"
" 'syntax-local-environment-ref"
" 'internal-definition-context?"
" 'syntax-local-make-definition-context"
" 'syntax-local-bind-syntaxes"
" 'internal-definition-context-binding-identifiers"
" 'internal-definition-context-introduce"
" 'internal-definition-context-seal"
" 'identifier-remove-from-definition-context"
" 'make-set!-transformer"
" 'prop:set!-transformer"
" 'set!-transformer?"
" 'set!-transformer-procedure"
" 'rename-transformer?"
" 'prop:rename-transformer"
" 'make-rename-transformer"
" 'rename-transformer-target"
" 'prop:liberal-define-context"
" 'liberal-define-context?"
" 'prop:expansion-contexts"
" 'module-path?"
" 'resolved-module-path?"
" 'make-resolved-module-path"
" 'resolved-module-path-name"
" 'module-path-index?"
" 'module-path-index-resolve"
" 'module-path-index-join"
" 'module-path-index-split"
" 'module-path-index-submodule"
" 'current-module-name-resolver"
" 'current-module-declare-name"
" 'current-module-declare-source"
" 'current-namespace"
" 'namespace-module-registry"
" 'namespace?"
" 'variable-reference->empty-namespace"
" 'variable-reference->namespace"
" 'variable-reference->resolved-module-path"
" 'variable-reference->module-path-index"
" 'variable-reference->module-source"
" 'variable-reference->phase"
" 'variable-reference->module-base-phase"
" 'variable-reference->module-declaration-inspector"
" 'read-syntax"
" 'read-syntax/recursive))"
"(call-with-values(lambda()(add-core-primitive! 'syntax? syntax?$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-e 1/syntax-e)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax->datum 1/syntax->datum)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'datum->syntax 1/datum->syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'bound-identifier=? 1/bound-identifier=?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'free-identifier=? 1/free-identifier=?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'free-transformer-identifier=? 1/free-transformer-identifier=?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'free-template-identifier=? 1/free-template-identifier=?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'free-label-identifier=? 1/free-label-identifier=?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'identifier-binding 1/identifier-binding)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-transformer-binding 1/identifier-transformer-binding))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-template-binding 1/identifier-template-binding))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'identifier-label-binding 1/identifier-label-binding)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-binding-symbol 1/identifier-binding-symbol))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-prune-lexical-context 1/identifier-prune-lexical-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-debug-info 1/syntax-debug-info)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-track-origin 1/syntax-track-origin)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-shift-phase-level 1/syntax-shift-phase-level)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-source-module 1/syntax-source-module)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-prune-to-source-module 1/identifier-prune-to-source-module))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-source 1/syntax-source)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-line 1/syntax-line)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-column 1/syntax-column)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-position 1/syntax-position)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-span 1/syntax-span)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax->list 1/syntax->list)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-property syntax-property$1)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-property-preserved? 1/syntax-property-preserved?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-property-symbol-keys 1/syntax-property-symbol-keys))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-original? 1/syntax-original?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-tainted? 1/syntax-tainted?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-arm 1/syntax-arm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-disarm 1/syntax-disarm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-rearm 1/syntax-rearm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-taint 1/syntax-taint)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'raise-syntax-error raise-syntax-error$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'struct:exn:fail:syntax 1/struct:exn:fail:syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax make-exn:fail:syntax$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-exn:fail:syntax make-exn:fail:syntax$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax? 1/exn:fail:syntax?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax-exprs 1/exn:fail:syntax-exprs)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'struct:exn:fail:syntax:unbound 1/struct:exn:fail:syntax:unbound))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax:unbound? 1/exn:fail:syntax:unbound?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-path-for-load 1/current-module-path-for-load))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:missing-module 1/prop:missing-module)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:missing-module? 1/exn:missing-module?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:missing-module-accessor 1/exn:missing-module-accessor))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'struct:exn:fail:filesystem:missing-module 1/struct:exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module 1/make-exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:filesystem:missing-module 1/make-exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module? 1/exn:fail:filesystem:missing-module?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module-path 1/exn:fail:filesystem:missing-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'struct:exn:fail:syntax:missing-module 1/struct:exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module 1/make-exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:syntax:missing-module 1/make-exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module? 1/exn:fail:syntax:missing-module?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module-path 1/exn:fail:syntax:missing-module-path))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-transforming? 1/syntax-transforming?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-transforming-with-lifts? 1/syntax-transforming-with-lifts?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-transforming-module-expression? 1/syntax-transforming-module-expression?))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'syntax-local-transforming-module-provides? 1/syntax-local-transforming-module-provides?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-context 1/syntax-local-context)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-introduce 1/syntax-local-introduce)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-identifier-as-binding 1/syntax-local-identifier-as-binding))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-phase-level 1/syntax-local-phase-level)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-name 1/syntax-local-name)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-syntax-introducer 1/make-syntax-introducer)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-syntax-delta-introducer 1/make-syntax-delta-introducer))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-value 1/syntax-local-value)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-value/immediate 1/syntax-local-value/immediate))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-expression 1/syntax-local-lift-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-values-expression 1/syntax-local-lift-values-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-context 1/syntax-local-lift-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-lift-module 1/syntax-local-lift-module)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-require 1/syntax-local-lift-require))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-provide 1/syntax-local-lift-provide))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-module-end-declaration 1/syntax-local-lift-module-end-declaration))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-defined-identifiers 1/syntax-local-module-defined-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-required-identifiers 1/syntax-local-module-required-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-exports 1/syntax-local-module-exports))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-submodules 1/syntax-local-submodules)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-get-shadower 1/syntax-local-get-shadower))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'local-expand 1/local-expand)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'local-expand/capture-lifts 1/local-expand/capture-lifts))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'local-transformer-expand 1/local-transformer-expand)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'local-transformer-expand/capture-lifts 1/local-transformer-expand/capture-lifts))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-expand-expression 1/syntax-local-expand-expression))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'syntax-local-expand-expression/extend-environment"
" 1/syntax-local-expand-expression/extend-environment))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-environment-ref 1/syntax-local-environment-ref))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context? 1/internal-definition-context?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-make-definition-context 1/syntax-local-make-definition-context))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-bind-syntaxes 1/syntax-local-bind-syntaxes))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'internal-definition-context-binding-identifiers"
" 1/internal-definition-context-binding-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context-introduce 1/internal-definition-context-introduce))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context-seal 1/internal-definition-context-seal))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'identifier-remove-from-definition-context 1/identifier-remove-from-definition-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-set!-transformer 1/make-set!-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:set!-transformer 1/prop:set!-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'set!-transformer? 1/set!-transformer?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'set!-transformer-procedure 1/set!-transformer-procedure))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'rename-transformer? 1/rename-transformer?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:rename-transformer 1/prop:rename-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-rename-transformer 1/make-rename-transformer)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'rename-transformer-target 1/rename-transformer-target))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'prop:liberal-define-context 1/prop:liberal-define-context))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'liberal-define-context? has-liberal-define-context-property?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:expansion-contexts 1/prop:expansion-contexts)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path? 1/module-path?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'resolved-module-path? 1/resolved-module-path?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-resolved-module-path 1/make-resolved-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'resolved-module-path-name 1/resolved-module-path-name))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index? 1/module-path-index?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'module-path-index-resolve 1/module-path-index-resolve))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index-join 1/module-path-index-join)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index-split 1/module-path-index-split)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'module-path-index-submodule 1/module-path-index-submodule))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-name-resolver 1/current-module-name-resolver))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-declare-name 1/current-module-declare-name))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-declare-source 1/current-module-declare-source))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'current-namespace 1/current-namespace)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'namespace-module-registry 1/namespace-module-registry))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'namespace? 1/namespace?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->empty-namespace 1/variable-reference->empty-namespace))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->namespace 1/variable-reference->namespace))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->resolved-module-path 1/variable-reference->resolved-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-path-index 1/variable-reference->module-path-index))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-source 1/variable-reference->module-source))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->phase 1/variable-reference->phase))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-base-phase 1/variable-reference->module-base-phase))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'variable-reference->module-declaration-inspector"
" 1/variable-reference->module-declaration-inspector))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'read-syntax 1/read-syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'read-syntax/recursive 1/read-syntax/recursive)) print-values)"
"(define-values"
"(declare-kernel-module!8.1)"
"(lambda(eval1_0 main-ids2_0 read-ids3_0 ns7_2)"
"(let-values(((ns_113) ns7_2))"
"(let-values()"
"(let-values(((main-ids_0) main-ids2_0))"
"(let-values(((read-ids_0) read-ids3_0))"
"(let-values()"
"(begin"
"(let-values(((temp53_3) '#%kernel)"
"((temp54_5) '#%runtime)"
"((temp55_2)(set-union primitive-ids(set-union main-ids_0 read-ids_0)))"
"((temp56_2)"
"(hasheq"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference-constant?"
" 1/variable-reference-constant?))"
"((ns57_0) ns_113))"
"(copy-runtime-module!26.1 #f #f temp56_2 #t ns57_0 #f #f #f #f temp55_2 #t temp54_5 #t temp53_3))"
"(let-values(((temp58_6) '#%kernel)((temp59_4) '(#%core #%runtime #%main #%read))((ns60_0) ns_113))"
"(declare-reexporting-module!50.1 ns60_0 #f #f temp58_6 temp59_4))))))))))"
"(define-values"
"(copy-runtime-module!26.1)"
"(lambda(alts14_0"
" alts21_0"
" extras15_0"
" extras22_0"
" namespace12_0"
" primitive?16_0"
" primitive?23_0"
" protected?17_0"
" protected?24_0"
" skip13_0"
" skip20_0"
" to11_0"
" to18_0"
" name25_0)"
"(let-values(((name_11) name25_0))"
"(let-values(((to-name_0)(if to18_0 to11_0 name_11)))"
"(let-values(((ns_114) namespace12_0))"
"(let-values(((skip-syms_0)(if skip20_0 skip13_0(seteq))))"
"(let-values(((alts_0)(if alts21_0 alts14_0 '#hasheq())))"
"(let-values(((extras_0)(if extras22_0 extras15_0 '#hasheq())))"
"(let-values(((primitive?_9)(if primitive?23_0 primitive?16_0 #t)))"
"(let-values(((protected?_2)(if protected?24_0 protected?17_0 #f)))"
"(let-values()"
"(let-values(((mod-name_7)(list 'quote name_11)))"
"(let-values(((prims_0)(1/primitive-table name_11)))"
"(let-values((()"
"(begin"
"(let-values(((ht_153) prims_0))"
"(begin"
"(check-in-hash-keys ht_153)"
"((letrec-values(((for-loop_251)"
"(lambda(i_55)"
"(if i_55"
"(let-values(((sym_96)"
"(hash-iterate-key ht_153 i_55)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(register-built-in-symbol!"
" sym_96))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_251(hash-iterate-next ht_153 i_55))"
"(values))))"
"(values)))))"
" for-loop_251)"
"(hash-iterate-first ht_153))))"
"(values))))"
"(let-values()"
"(let-values(((ht_154)"
"(let-values(((ht_30) prims_0))"
"(begin"
"(check-in-hash ht_30)"
"((letrec-values(((for-loop_101)"
"(lambda(table_12 i_40)"
"(if i_40"
"(let-values(((sym_97 val_5)"
"(hash-iterate-key+value"
" ht_30"
" i_40)))"
"(let-values(((table_176)"
"(let-values(((table_177)"
" table_12))"
"(if(set-member?"
" skip-syms_0"
" sym_97)"
" table_177"
"(let-values(((table_178)"
" table_177))"
"(let-values(((table_179)"
"(let-values()"
"(let-values(((key_82"
" val_69)"
"(let-values()"
"(values"
" sym_97"
"(let-values(((or-part_38)"
"(hash-ref"
" alts_0"
" sym_97"
" #f)))"
"(if or-part_38"
" or-part_38"
" val_5))))))"
"(hash-set"
" table_178"
" key_82"
" val_69)))))"
"(values table_179)))))))"
"(if(not #f)"
"(for-loop_101"
" table_176"
"(hash-iterate-next ht_30 i_40))"
" table_176)))"
" table_12))))"
" for-loop_101)"
" '#hasheq()"
"(hash-iterate-first ht_30))))))"
"(let-values(((ht+extras_0)"
"(let-values(((ht_155) extras_0))"
"(begin"
"(check-in-hash ht_155)"
"((letrec-values(((for-loop_252)"
"(lambda(ht_21 i_185)"
"(if i_185"
"(let-values(((k_38 v_239)"
"(hash-iterate-key+value"
" ht_155"
" i_185)))"
"(let-values(((ht_156)"
"(let-values(((ht_157) ht_21))"
"(let-values(((ht_148)"
"(let-values()"
"(hash-set"
" ht_157"
" k_38"
" v_239))))"
"(values ht_148)))))"
"(if(not #f)"
"(for-loop_252"
" ht_156"
"(hash-iterate-next ht_155 i_185))"
" ht_156)))"
" ht_21))))"
" for-loop_252)"
" ht_154"
"(hash-iterate-first ht_155))))))"
"(let-values(((ns63_1) ns_114)"
"((primitive?64_0) primitive?_9)"
"((protected?65_0) protected?_2))"
"(declare-hash-based-module!41.1"
" ns63_1"
" primitive?64_0"
" #t"
" #f"
" #f"
" protected?65_0"
" #t"
" #f"
" #f"
" to-name_0"
" ht+extras_0)))))))))))))))))))"
"(define-values"
"(declare-hash-based-module!41.1)"
"(lambda(namespace29_0"
" primitive?30_1"
" primitive?35_0"
" protected32_0"
" protected37_0"
" protected?31_0"
" protected?36_0"
" register-builtin?33_0"
" register-builtin?38_0"
" name39_0"
" ht40_0)"
"(let-values(((name_21) name39_0))"
"(let-values(((ht_40) ht40_0))"
"(let-values(((ns_5) namespace29_0))"
"(let-values(((primitive?_10)(if primitive?35_0 primitive?30_1 #f)))"
"(let-values(((protected?_3)(if protected?36_0 protected?31_0 #f)))"
"(let-values(((protected-syms_0)(if protected37_0 protected32_0 null)))"
"(let-values(((register-builtin?_0)(if register-builtin?38_0 register-builtin?33_0 #f)))"
"(let-values()"
"(let-values(((mpi_3)(1/module-path-index-join(list 'quote name_21) #f)))"
"(let-values(((ns66_1) ns_5)"
"((temp67_3)"
"(let-values(((temp69_4) #t)"
"((primitive?70_0) primitive?_10)"
"((temp71_5) #t)"
"((temp72_4)(not protected?_3))"
"((mpi73_0) mpi_3)"
"((temp74_2)"
"(hasheqv"
" 0"
"(let-values(((ht_158) ht_40))"
"(begin"
"(check-in-hash-keys ht_158)"
"((letrec-values(((for-loop_253)"
"(lambda(table_33 i_186)"
"(if i_186"
"(let-values(((sym_98)"
"(hash-iterate-key"
" ht_158"
" i_186)))"
"(let-values(((table_180)"
"(let-values(((table_181)"
" table_33))"
"(let-values(((table_182)"
"(let-values()"
"(let-values(((key_83"
" val_70)"
"(let-values()"
"(let-values((()"
"(begin"
"(if register-builtin?_0"
"(let-values()"
"(register-built-in-symbol!"
" sym_98))"
"(void))"
"(values))))"
"(let-values(((binding_28)"
"(let-values(((mpi76_0)"
" mpi_3)"
"((temp77_2)"
" 0)"
"((sym78_0)"
" sym_98))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi76_0"
" temp77_2"
" sym78_0))))"
"(values"
" sym_98"
"(if(let-values(((or-part_317)"
" protected?_3))"
"(if or-part_317"
" or-part_317"
"(member"
" sym_98"
" protected-syms_0)))"
"(provided1.1"
" binding_28"
" #t"
" #f)"
" binding_28)))))))"
"(hash-set"
" table_181"
" key_83"
" val_70)))))"
"(values table_182)))))"
"(if(not #f)"
"(for-loop_253"
" table_180"
"(hash-iterate-next ht_158 i_186))"
" table_180)))"
" table_33))))"
" for-loop_253)"
" '#hash()"
"(hash-iterate-first ht_158))))))"
"((temp75_2)"
"(lambda(data-box_5"
" ns_115"
" phase-shift_20"
" phase-level_4"
" self_26"
" bulk-binding-registry_15"
" insp_19)"
"(if(= 0 phase-level_4)"
"(let-values()"
"(begin"
"(let-values(((ht_159) ht_40))"
"(begin"
"(check-in-hash ht_159)"
"((letrec-values(((for-loop_254)"
"(lambda(i_187)"
"(if i_187"
"(let-values(((sym_99 val_71)"
"(hash-iterate-key+value"
" ht_159"
" i_187)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" ns_115"
" 0"
" sym_99"
" val_71))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_254"
"(hash-iterate-next"
" ht_159"
" i_187))"
"(values))))"
"(values)))))"
" for-loop_254)"
"(hash-iterate-first ht_159))))"
"(void)))"
"(void)))))"
"(make-module37.1"
" temp69_4"
" #t"
" #f"
" #f"
" temp75_2"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp72_4"
" #t"
" #f"
" #f"
" temp71_5"
" #t"
" #f"
" #f"
" primitive?70_0"
" #t"
" temp74_2"
" #f"
" #f"
" mpi73_0"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)))"
"((temp68_2)(1/module-path-index-resolve mpi_3)))"
"(declare-module!56.1 #f #f ns66_1 temp67_3 temp68_2)))))))))))))"
"(define-values"
"(declare-reexporting-module!50.1)"
"(lambda(namespace45_0 reexport?44_0 reexport?46_0 name48_0 require-names49_0)"
"(let-values(((name_72) name48_0))"
"(let-values(((require-names_0) require-names49_0))"
"(let-values(((reexport?_0)(if reexport?46_0 reexport?44_0 #t)))"
"(let-values(((ns_43) namespace45_0))"
"(let-values()"
"(let-values(((mpi_48)(1/module-path-index-join(list 'quote name_72) #f)))"
"(let-values(((require-mpis_0)"
"(let-values(((lst_298) require-names_0))"
"(begin"
"(check-list lst_298)"
"((letrec-values(((for-loop_255)"
"(lambda(lst_31)"
"(if(pair? lst_31)"
"(let-values(((require-name_0)(unsafe-car lst_31))"
"((rest_11)(unsafe-cdr lst_31)))"
"(let-values(((post-guard-var_85)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_79)"
"(let-values()"
"(let-values()"
"(1/module-path-index-join"
"(list 'quote require-name_0)"
" #f)))))"
"(let-values(((result_172)"
"(if(post-guard-var_85)"
"(for-loop_255 rest_11)"
" null)))"
"(cons elem_79 result_172))))))"
" null))))"
" for-loop_255)"
" lst_298)))))"
"(let-values(((ns79_0) ns_43)"
"((temp80_8)"
"(let-values(((temp82_2) #t)"
"((temp83_2) #t)"
"((mpi84_0) mpi_48)"
"((temp85_2)(list(cons 0 require-mpis_0)))"
"((temp86_3)"
"(if reexport?_0"
"(hasheqv"
" 0"
"(let-values(((lst_148) require-mpis_0))"
"(begin"
"(check-list lst_148)"
"((letrec-values(((for-loop_154)"
"(lambda(table_183 lst_299)"
"(if(pair? lst_299)"
"(let-values(((require-mpi_0)"
"(unsafe-car lst_299))"
"((rest_168)"
"(unsafe-cdr lst_299)))"
"(let-values(((table_184)"
"(let-values(((m_28)"
"(namespace->module"
" ns_43"
"(1/module-path-index-resolve"
" require-mpi_0))))"
"(begin"
" #t"
"((letrec-values(((for-loop_256)"
"(lambda(table_185)"
"(let-values()"
"(let-values(((table_102)"
"(let-values(((ht_160)"
"(hash-ref"
"(shift-provides-module-path-index"
"(module-provides"
" m_28)"
"(module-self"
" m_28)"
" require-mpi_0)"
" 0)))"
"(begin"
"(check-in-hash"
" ht_160)"
"((letrec-values(((for-loop_257)"
"(lambda(table_186"
" i_188)"
"(if i_188"
"(let-values(((sym_100"
" binding_29)"
"(hash-iterate-key+value"
" ht_160"
" i_188)))"
"(let-values(((table_104)"
"(let-values(((table_105)"
" table_186))"
"(let-values(((table_119)"
"(let-values()"
"(let-values(((key_84"
" val_72)"
"(let-values()"
"(values"
" sym_100"
" binding_29))))"
"(hash-set"
" table_105"
" key_84"
" val_72)))))"
"(values"
" table_119)))))"
"(if(not"
" #f)"
"(for-loop_257"
" table_104"
"(hash-iterate-next"
" ht_160"
" i_188))"
" table_104)))"
" table_186))))"
" for-loop_257)"
" table_185"
"(hash-iterate-first"
" ht_160))))))"
" table_102)))))"
" for-loop_256)"
" table_183)))))"
"(if(not #f)"
"(for-loop_154 table_184 rest_168)"
" table_184)))"
" table_183))))"
" for-loop_154)"
" '#hash()"
" lst_148))))"
" '#hasheqv()))"
"((void87_0) void))"
"(make-module37.1"
" temp82_2"
" #t"
" #f"
" #f"
" void87_0"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp83_2"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp86_3"
" temp85_2"
" #t"
" mpi84_0"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)))"
"((temp81_6)(1/module-path-index-resolve mpi_48)))"
"(declare-module!56.1 #f #f ns79_0 temp80_8 temp81_6)))))))))))"
"(define-values"
"(read-primitives)"
"(hasheq"
" 'read"
" 1/read"
" 'read/recursive"
" 1/read/recursive"
" 'read-language"
" 1/read-language"
" 'current-reader-guard"
" 1/current-reader-guard"
" 'read-square-bracket-as-paren"
" 1/read-square-bracket-as-paren"
" 'read-curly-brace-as-paren"
" 1/read-curly-brace-as-paren"
" 'read-square-bracket-with-tag"
" 1/read-square-bracket-with-tag"
" 'read-curly-brace-with-tag"
" 1/read-curly-brace-with-tag"
" 'read-cdot"
" 1/read-cdot"
" 'read-accept-graph"
" 1/read-accept-graph"
" 'read-accept-compiled"
" 1/read-accept-compiled"
" 'read-accept-box"
" 1/read-accept-box"
" 'read-accept-dot"
" 1/read-accept-dot"
" 'read-accept-infix-dot"
" 1/read-accept-infix-dot"
" 'read-accept-quasiquote"
" 1/read-accept-quasiquote"
" 'read-accept-reader"
" 1/read-accept-reader"
" 'read-accept-lang"
" 1/read-accept-lang"
" 'current-readtable"
" 1/current-readtable"
" 'readtable?"
" 1/readtable?"
" 'make-readtable"
" 1/make-readtable"
" 'readtable-mapping"
" 1/readtable-mapping"
" 'special-comment?"
" 1/special-comment?"
" 'make-special-comment"
" 1/make-special-comment"
" 'special-comment-value"
" 1/special-comment-value))"
"(define-values"
"(main-primitives)"
"(hasheq"
" 'eval"
" eval$1"
" 'eval-syntax"
" 1/eval-syntax"
" 'compile"
" compile$1"
" 'compile-syntax"
" 1/compile-syntax"
" 'expand"
" 1/expand"
" 'expand-syntax"
" 1/expand-syntax"
" 'expand-once"
" 1/expand-once"
" 'expand-syntax-once"
" 1/expand-syntax-once"
" 'expand-to-top-form"
" 1/expand-to-top-form"
" 'expand-syntax-to-top-form"
" 1/expand-syntax-to-top-form"
" 'dynamic-require"
" 1/dynamic-require"
" 'dynamic-require-for-syntax"
" 1/dynamic-require-for-syntax"
" 'compiled-expression?"
" 1/compiled-expression?"
" 'compiled-module-expression?"
" 1/compiled-module-expression?"
" 'module-compiled-name"
" 1/module-compiled-name"
" 'module-compiled-submodules"
" 1/module-compiled-submodules"
" 'module-compiled-language-info"
" 1/module-compiled-language-info"
" 'module-compiled-imports"
" 1/module-compiled-imports"
" 'module-compiled-exports"
" 1/module-compiled-exports"
" 'module-compiled-indirect-exports"
" 1/module-compiled-indirect-exports"
" 'make-empty-namespace"
" 1/make-empty-namespace"
" 'namespace-attach-module"
" 1/namespace-attach-module"
" 'namespace-attach-module-declaration"
" 1/namespace-attach-module-declaration"
" 'namespace-symbol->identifier"
" 1/namespace-symbol->identifier"
" 'namespace-module-identifier"
" 1/namespace-module-identifier"
" 'namespace-syntax-introduce"
" 1/namespace-syntax-introduce"
" 'namespace-require"
" 1/namespace-require"
" 'namespace-require/copy"
" 1/namespace-require/copy"
" 'namespace-require/constant"
" 1/namespace-require/constant"
" 'namespace-require/expansion-time"
" 1/namespace-require/expansion-time"
" 'namespace-variable-value"
" 1/namespace-variable-value"
" 'namespace-set-variable-value!"
" 1/namespace-set-variable-value!"
" 'namespace-undefine-variable!"
" 1/namespace-undefine-variable!"
" 'namespace-mapped-symbols"
" 1/namespace-mapped-symbols"
" 'namespace-base-phase"
" 1/namespace-base-phase"
" 'module-declared?"
" 1/module-declared?"
" 'module-predefined?"
" 1/module-predefined?"
" 'module->language-info"
" 1/module->language-info"
" 'module->imports"
" 1/module->imports"
" 'module->exports"
" 1/module->exports"
" 'module->indirect-exports"
" 1/module->indirect-exports"
" 'module-compiled-cross-phase-persistent?"
" 1/module-compiled-cross-phase-persistent?"
" 'module-provide-protected?"
" 1/module-provide-protected?"
" 'module->namespace"
" 1/module->namespace"
" 'namespace-unprotect-module"
" 1/namespace-unprotect-module))"
"(define-values"
"(utils-primitives)"
"(hasheq"
" 'path-string?"
" path-string?"
" 'normal-case-path"
" normal-case-path"
" 'path-replace-extension"
" path-replace-extension"
" 'path-add-extension"
" path-add-extension"
" 'reroot-path"
" reroot-path"
" 'path-list-string->path-list"
" path-list-string->path-list"
" 'find-executable-path"
" find-executable-path"
" 'call-with-default-reading-parameterization"
" call-with-default-reading-parameterization"
" 'collection-path"
" collection-path"
" 'collection-file-path"
" collection-file-path"
" 'find-library-collection-paths"
" find-library-collection-paths"
" 'find-library-collection-links"
" find-library-collection-links"
" 'load/use-compiled"
" load/use-compiled"
" 'find-main-config"
" find-main-config"
" 'find-main-collects"
" find-main-collects))"
"(define-values(expobs-primitives)(hasheq 'current-expand-observe current-expand-observe))"
"(define-values"
"(struct:TH-place-channel TH-place-channel TH-place-channel? TH-place-channel-ref TH-place-channel-set!)"
"(make-struct-type 'TH-place-channel #f 2 0 #f(list(cons prop:evt(lambda(x_120)(TH-place-channel-ref x_120 0))))))"
"(define-values"
"(TH-place-channel-in TH-place-channel-out)"
"(values(lambda(x_121)(TH-place-channel-ref x_121 0))(lambda(x_122)(TH-place-channel-ref x_122 1))))"
"(define-values"
"(place-struct-primitives)"
"(hasheq"
" 'struct:TH-place-channel"
" struct:TH-place-channel"
" 'TH-place-channel"
" TH-place-channel"
" 'TH-place-channel?"
" TH-place-channel?"
" 'TH-place-channel-in"
" TH-place-channel-in"
" 'TH-place-channel-out"
" TH-place-channel-out))"
"(define-values"
"(linklet-primitives)"
"(hasheq"
" 'primitive-table"
" 1/primitive-table"
" 'primitive->compiled-position"
" 1/primitive->compiled-position"
" 'compiled-position->primitive"
" 1/compiled-position->primitive"
" 'linklet?"
" 1/linklet?"
" 'compile-linklet"
" 1/compile-linklet"
" 'recompile-linklet"
" 1/recompile-linklet"
" 'eval-linklet"
" 1/eval-linklet"
" 'read-compiled-linklet"
" 1/read-compiled-linklet"
" 'instantiate-linklet"
" 1/instantiate-linklet"
" 'linklet-import-variables"
" 1/linklet-import-variables"
" 'linklet-export-variables"
" 1/linklet-export-variables"
" 'instance?"
" 1/instance?"
" 'make-instance"
" 1/make-instance"
" 'instance-name"
" 1/instance-name"
" 'instance-data"
" 1/instance-data"
" 'instance-variable-names"
" 1/instance-variable-names"
" 'instance-variable-value"
" 1/instance-variable-value"
" 'instance-set-variable-value!"
" 1/instance-set-variable-value!"
" 'instance-unset-variable!"
" 1/instance-unset-variable!"
" 'linklet-directory?"
" 1/linklet-directory?"
" 'hash->linklet-directory"
" 1/hash->linklet-directory"
" 'linklet-directory->hash"
" 1/linklet-directory->hash"
" 'linklet-bundle?"
" 1/linklet-bundle?"
" 'hash->linklet-bundle"
" 1/hash->linklet-bundle"
" 'linklet-bundle->hash"
" 1/linklet-bundle->hash"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference->instance"
" 1/variable-reference->instance"
" 'variable-reference-constant?"
" 1/variable-reference-constant?))"
"(define-values"
"(with-module-reading-parameterization)"
"(lambda(thunk_1)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/read-accept-reader"
" #t"
" 1/read-accept-lang"
" #t"
" 1/read-accept-compiled"
" #t"
" read-case-sensitive"
" #t"
" 1/read-square-bracket-as-paren"
" #t"
" 1/read-curly-brace-as-paren"
" #t"
" 1/read-square-bracket-with-tag"
" #f"
" 1/read-curly-brace-with-tag"
" #f"
" 1/read-accept-box"
" #t"
" read-accept-bar-quote"
" #t"
" 1/read-accept-graph"
" #t"
" read-decimal-as-inexact"
" #t"
" 1/read-cdot"
" #f"
" 1/read-accept-dot"
" #t"
" 1/read-accept-infix-dot"
" #t"
" 1/read-accept-quasiquote"
" #t"
" 1/current-readtable"
" #f)"
"(let-values()(thunk_1)))))"
"(define-values"
"(check-module-form)"
"(lambda(exp_0 filename_1)"
"(if(let-values(((or-part_300)(eof-object? exp_0)))(if or-part_300 or-part_300(eof-object?(1/syntax-e exp_0))))"
"(let-values()"
"(if filename_1"
"(error"
" 'load-handler"
"           (string-append \"expected a `module' declaration, but found end-of-file\\n\" \"  file: ~a\")"
" filename_1)"
" #f))"
"(if(1/compiled-module-expression?(1/syntax-e exp_0))"
"(let-values() exp_0)"
"(if(if(syntax?$1 exp_0)"
"(if(pair?(1/syntax-e exp_0))"
"(if(eq? 'module(1/syntax-e(car(1/syntax-e exp_0))))"
"(let-values(((r_49)(cdr(1/syntax-e exp_0))))"
"(let-values(((r_50)(if(syntax?$1 r_49)(1/syntax-e r_49) r_49)))"
"(if(pair? r_50)(identifier?(car r_50)) #f)))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(1/datum->syntax exp_0(cons(1/namespace-module-identifier)(cdr(1/syntax-e exp_0))) exp_0 exp_0))"
"(let-values()"
"(if filename_1"
"(error"
" 'default-load-handler"
"               (string-append \"expected a `module' declaration, but found something else\\n\" \"  file: ~a\")"
" filename_1)"
" #f)))))))"
"(define-values"
"(default-load-handler)"
"(lambda(path_10 expected-mod_0)"
"(begin"
"(if(path-string? path_10)"
"(void)"
"        (let-values () (raise-argument-error 'default-load-handler \"path-string?\" path_10)))"
"(if(let-values(((or-part_1)(not expected-mod_0)))"
"(if or-part_1"
" or-part_1"
"(let-values(((or-part_9)(symbol? expected-mod_0)))"
"(if or-part_9"
" or-part_9"
"(if(pair? expected-mod_0)"
"(if(list? expected-mod_0)"
"(if(let-values(((or-part_2)(not(car expected-mod_0))))"
"(if or-part_2 or-part_2(symbol?(car expected-mod_0))))"
"(andmap2 symbol?(cdr expected-mod_0))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'default-load-handler"
"           \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" expected-mod_0)))"
"(if expected-mod_0"
"(let-values()"
"((call-with-input-module-file"
" path_10"
"(lambda(i_189)"
"(begin"
"                (if (regexp-match? '#rx\"[.]zo$\" path_10) (void) (let-values () (port-count-lines! i_189)))"
"(with-module-reading-parameterization+delay-source"
" path_10"
"(lambda()"
"(let-values(((c1_133)(linklet-directory-start i_189)))"
"(if c1_133"
"((lambda(pos_111)"
"(let-values(((b-pos_0)(search-directory i_189 pos_111(encode-symbols expected-mod_0))))"
"(if b-pos_0"
"(let-values()"
"(begin"
"(file-position i_189 b-pos_0)"
"(let-values(((or-part_8)(cached-bundle i_189)))"
"(if or-part_8"
" or-part_8"
"(let-values(((v_240)(1/read i_189)))"
"(if(1/compiled-module-expression? v_240)"
"(lambda()((current-eval) v_240))"
"(error"
" 'default-load-handler"
"                                           (string-append \"expected a compiled module\\n\" \"  in: ~e\\n\" \"  found: ~e\")"
"(object-name i_189)"
" v_240)))))))"
"(if(pair? expected-mod_0)"
"(let-values() void)"
"(let-values()"
"(error"
" 'default-load-handler"
"                                   (string-append \"could not find main module\\n\" \"  in: ~e\")"
"(object-name i_189)))))))"
" c1_133)"
"(if(if(pair? expected-mod_0)(not(car expected-mod_0)) #f)"
"(let-values() void)"
"(let-values(((c2_4)(cached-bundle i_189)))"
"(if c2_4"
"((lambda(thunk_5) thunk_5) c2_4)"
"(let-values()"
"(let-values(((s_417)(1/read-syntax(object-name i_189) i_189)))"
"(let-values((()"
"(begin"
"(if(eof-object? s_417)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                                       \"expected a `module' declaration;\\n\""
"                                                       \" found end-of-file\\n\""
"                                                       \"  in: ~e\")"
"(object-name i_189)))"
"(void))"
"(values))))"
"(let-values(((m-s_0)(check-module-form s_417 path_10)))"
"(let-values(((s2_7)(1/read-syntax(object-name i_189) i_189)))"
"(begin"
"(if(eof-object? s2_7)"
"(void)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                               \"expected a `module' declaration;\\n\""
"                                               \" found an extra form\\n\""
"                                               \"  in: ~e\\n\""
"                                               \"  found: ~.s\")"
"(object-name i_189)"
" s2_7)))"
"(lambda()((current-eval) m-s_0))))))))))))))))))))"
"(let-values()"
"(let-values(((add-top-interaction_0)"
"(lambda(s_451)"
"(1/namespace-syntax-introduce(1/datum->syntax #f(cons '#%top-interaction s_451))))))"
"(let-values(((path1_0) path_10)"
"((temp2_6)"
"(lambda(i_190)"
"(begin"
"(port-count-lines! i_190)"
"((letrec-values(((loop_7)"
"(lambda(vals_6)"
"(let-values(((s_167)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/read-accept-compiled"
" #t"
" 1/read-accept-reader"
" #t"
" 1/read-accept-lang"
" #t)"
"(let-values()"
"(if(load-on-demand-enabled)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" read-on-demand-source"
"(path->complete-path path_10))"
"(let-values()"
"(1/read-syntax(object-name i_190) i_190)))"
"(1/read-syntax(object-name i_190) i_190))))))"
"(if(eof-object? s_167)"
"(apply values vals_6)"
"(loop_7"
"(call-with-continuation-prompt"
"(lambda()"
"(call-with-values"
"(lambda()((current-eval)(add-top-interaction_0 s_167)))"
" list))"
"(default-continuation-prompt-tag)"
"(lambda args_8"
"(apply"
" abort-current-continuation"
"(default-continuation-prompt-tag)"
" args_8)))))))))"
" loop_7)"
"(list(void)))))))"
"(call-with-input-file*61.1 #f #f path1_0 temp2_6))))))))"
"(define-values"
"(linklet-bundle-or-directory-start)"
"(lambda(i_146 tag_1)"
"(let-values(((version-length_0)(string-length(version))))"
"(if(equal?(peek-byte i_146)(char->integer '#\\#))"
"(if(equal?(peek-byte i_146 1)(char->integer '#\\~))"
"(if(equal?(peek-byte i_146 2) version-length_0)"
"(if(equal?(peek-bytes version-length_0 3 i_146)(string->bytes/utf-8(version)))"
"(if(equal?(peek-byte i_146(+ 3 version-length_0))(char->integer tag_1))(+ version-length_0 4) #f)"
" #f)"
" #f)"
" #f)"
" #f))))"
"(define-values"
"(linklet-directory-start)"
"(lambda(i_191)"
"(let-values(((pos_119)(linklet-bundle-or-directory-start i_191 '#\\D)))(if pos_119(+ pos_119 4) #f))))"
"(define-values"
"(linklet-bundle-hash-code)"
"(lambda(i_2)"
"(let-values(((pos_93)(linklet-bundle-or-directory-start i_2 '#\\B)))"
"(let-values(((hash-code_5)(if pos_93(peek-bytes 20 pos_93 i_2) #f)))"
"(if(bytes? hash-code_5)"
"(if(= 20(bytes-length hash-code_5))"
"(if(let-values(((vec_67 len_38)"
"(let-values(((vec_68) hash-code_5))"
"(begin(check-bytes vec_68)(values vec_68(unsafe-bytes-length vec_68))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_258)"
"(lambda(result_42 pos_120)"
"(if(unsafe-fx< pos_120 len_38)"
"(let-values(((c_90)(unsafe-bytes-ref vec_67 pos_120)))"
"(let-values(((result_80)"
"(let-values()"
"(let-values(((result_173)"
"(let-values()"
"(let-values()(not(eq? c_90 0))))))"
"(values result_173)))))"
"(if(if(not((lambda x_123 result_80) c_90))(not #f) #f)"
"(for-loop_258 result_80(unsafe-fx+ 1 pos_120))"
" result_80)))"
" result_42))))"
" for-loop_258)"
" #f"
" 0)))"
" hash-code_5"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(cached-bundle)"
"(lambda(i_49)"
"(let-values(((c3_9)(module-cache-ref(make-module-cache-key(linklet-bundle-hash-code i_49)))))"
"(if c3_9"
"((lambda(declare-module_0)(lambda()(declare-module_0(1/current-namespace)))) c3_9)"
"(let-values() #f)))))"
"(define-values"
"(read-number)"
"(lambda(i_50)"
"(let-values(((read-byte/not-eof_0)"
"(lambda(i_52)(let-values(((v_241)(read-byte i_52)))(if(eof-object? v_241) 0 v_241)))))"
"(bitwise-ior"
"(read-byte/not-eof_0 i_50)"
"(arithmetic-shift(read-byte/not-eof_0 i_50) 8)"
"(arithmetic-shift(read-byte/not-eof_0 i_50) 16)"
"(arithmetic-shift(read-byte/not-eof_0 i_50) 24)))))"
"(define-values"
"(search-directory)"
"(lambda(i_192 pos_108 bstr_5)"
"(if(zero? pos_108)"
"(let-values() #f)"
"(let-values()"
"(let-values((()(begin(file-position i_192 pos_108)(values))))"
"(let-values(((name-len_0)(read-number i_192)))"
"(let-values(((v_242)(read-bytes name-len_0 i_192)))"
"(begin"
"(if(if(bytes? v_242)(=(bytes-length v_242) name-len_0) #f)"
"(void)"
"(let-values()"
"(error"
" 'deafult-load-handler"
"(string-append"
"                      \"failure getting submodule path\\n\""
"                      \"  in: ~e\\n\""
"                      \"  at position: ~a\\n\""
"                      \"  expected bytes: ~a\\n\""
"                      \"  read bytes: ~e\")"
"(object-name i_192)"
" pos_108"
" name-len_0"
" v_242)))"
"(if(bytes=? bstr_5 v_242)"
"(let-values()(read-number i_192))"
"(if(bytes<? bstr_5 v_242)"
"(let-values()"
"(begin"
"(read-number i_192)"
"(read-number i_192)"
"(search-directory i_192(read-number i_192) bstr_5)))"
"(let-values()"
"(begin"
"(read-number i_192)"
"(read-number i_192)"
"(read-number i_192)"
"(search-directory i_192(read-number i_192) bstr_5)))))))))))))"
"(define-values"
"(encode-symbols)"
"(lambda(expected-mod_1)"
"(if(symbol? expected-mod_1)"
"      (let-values () #\"\")"
"(let-values()"
"(apply"
" bytes-append"
"(let-values(((lst_19)(cdr expected-mod_1)))"
"(begin"
"(check-list lst_19)"
"((letrec-values(((for-loop_15)"
"(lambda(lst_86)"
"(if(pair? lst_86)"
"(let-values(((s_161)(unsafe-car lst_86))((rest_42)(unsafe-cdr lst_86)))"
"(let-values(((post-guard-var_4)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_4)"
"(let-values()"
"(let-values()"
"(let-values(((bstr_6)"
"(string->bytes/utf-8(symbol->string s_161))))"
"(let-values(((len_39)(bytes-length bstr_6)))"
"(if(< len_39 255)"
"(let-values()(bytes-append(bytes len_39) bstr_6))"
"(let-values()"
"(bytes-append"
" 255"
"(integer->integer-bytes len_39 4 #f #f)"
" bstr_6)))))))))"
"(let-values(((result_174)"
"(if(post-guard-var_4)(for-loop_15 rest_42) null)))"
"(cons elem_4 result_174))))))"
" null))))"
" for-loop_15)"
" lst_19))))))))"
"(define-values"
"(with-module-reading-parameterization+delay-source)"
"(lambda(path_11 thunk_6)"
"(if(load-on-demand-enabled)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-on-demand-source"
"(path->complete-path path_11))"
"(let-values()(with-module-reading-parameterization thunk_6)))"
"(with-module-reading-parameterization thunk_6))))"
"(define-values"
"(call-with-input-module-file)"
"(lambda(path_12 proc_8)"
"(let-values(((i_193) #f))"
"(dynamic-wind"
"(lambda()(set! i_193(let-values(((temp4_8) #t))(open-input-file6.1 temp4_8 #t #f #f path_12))))"
"(lambda()(proc_8 i_193))"
"(lambda()(close-input-port i_193))))))"
"(define-values(dll-suffix)(system-type 'so-suffix))"
"(define-values"
"(default-load/use-compiled)"
"(let-values(((resolve_0)"
"(lambda(s_10)"
"(if(complete-path? s_10)"
" s_10"
"(let-values(((d_35)(current-load-relative-directory)))"
"(if d_35(path->complete-path s_10 d_35) s_10))))))"
"(let-values(((date-of-1_0)"
"(lambda(a_28)"
"(let-values(((v_74)(file-or-directory-modify-seconds a_28 #f(lambda() #f))))"
"(if v_74(cons a_28 v_74) #f)))))"
"(let-values(((date-of_0)"
"(lambda(a_35 modes_1 roots_1)"
"(ormap2"
"(lambda(root-dir_0)"
"(ormap2"
"(lambda(compiled-dir_0)"
"(let-values(((a_36)(a_35 root-dir_0 compiled-dir_0)))(date-of-1_0 a_36)))"
" modes_1))"
" roots_1))))"
"(let-values(((date>=?_0)"
"(lambda(modes_2 roots_2 a_69 bm_0)"
"(if a_69"
"(let-values(((am_0)(date-of_0 a_69 modes_2 roots_2)))"
"(let-values(((or-part_40)(if(not bm_0) am_0 #f)))"
"(if or-part_40"
" or-part_40"
"(if am_0(if bm_0(if(>=(cdr am_0)(cdr bm_0)) am_0 #f) #f) #f))))"
" #f))))"
"(let-values(((with-dir*_0)"
"(lambda(base_27 t_56)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-load-relative-directory"
"(if(path? base_27) base_27(current-directory)))"
"(let-values()(t_56))))))"
"(lambda(path_13 expect-module_0)"
"(let-values((()"
"(begin"
"(if(path-string? path_13)"
"(void)"
"                                (let-values () (raise-argument-error 'load/use-compiled \"path-string?\" path_13)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_178)(not expect-module_0)))"
"(if or-part_178"
" or-part_178"
"(let-values(((or-part_87)(symbol? expect-module_0)))"
"(if or-part_87"
" or-part_87"
"(if(list? expect-module_0)"
"(if(>(length expect-module_0) 1)"
"(if(let-values(((or-part_88)(symbol?(car expect-module_0))))"
"(if or-part_88 or-part_88(not(car expect-module_0))))"
"(andmap2 symbol?(cdr expect-module_0))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'load/use-compiled"
"                                     \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" path_13)))"
"(values))))"
"(let-values(((name_73)(if expect-module_0(1/current-module-declare-name) #f)))"
"(let-values(((ns-hts_0)"
"(if name_73"
"(hash-ref"
" -module-hash-table-table"
"(1/namespace-module-registry(1/current-namespace))"
" #f)"
" #f)))"
"(let-values(((use-path/src_0)(if ns-hts_0(hash-ref(cdr ns-hts_0) name_73 #f) #f)))"
"(if use-path/src_0"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-module-declare-source"
"(cadr use-path/src_0))"
"(let-values()"
"(with-dir*_0"
"(caddr use-path/src_0)"
"(lambda()((current-load)(car use-path/src_0) expect-module_0)))))"
"(let-values(((orig-path_0)(resolve_0 path_13)))"
"(let-values(((base_25 orig-file_0 dir?_8)(split-path path_13)))"
"(let-values(((file_1 alt-file_0)"
"(if expect-module_0"
"(let-values(((b_48)(path->bytes orig-file_0)))"
"(let-values(((len_8)(bytes-length b_48)))"
"                                                  (if (if (>= len_8 4) (bytes=? #\".rkt\" (subbytes b_48 (- len_8 4))) #f)"
"(let-values()"
"(values"
" orig-file_0"
"(bytes->path"
"                                                        (bytes-append (subbytes b_48 0 (- len_8 4)) #\".ss\"))))"
"(let-values()(values orig-file_0 #f)))))"
"(values orig-file_0 #f))))"
"(let-values(((path_1)"
"(if(eq? file_1 orig-file_0) orig-path_0(build-path base_25 file_1))))"
"(let-values(((alt-path_0)"
"(if alt-file_0"
"(if(eq? alt-file_0 orig-file_0)"
" orig-path_0"
"(build-path base_25 alt-file_0))"
" #f)))"
"(let-values(((base_28)(if(eq? base_25 'relative) 'same base_25)))"
"(let-values(((modes_3)(use-compiled-file-paths)))"
"(let-values(((roots_3)(current-compiled-file-roots)))"
"(let-values(((reroot_0)"
"(lambda(p_55 d_36)"
"(if(eq? d_36 'same)"
"(let-values() p_55)"
"(if(relative-path? d_36)"
"(let-values()(build-path p_55 d_36))"
"(let-values()(reroot-path p_55 d_36)))))))"
"(let-values(((main-path-d_0)(date-of-1_0 path_1)))"
"(let-values(((alt-path-d_0)"
"(if alt-path_0"
"(if(not main-path-d_0)(date-of-1_0 alt-path_0) #f)"
" #f)))"
"(let-values(((path-d_0)"
"(let-values(((or-part_95) main-path-d_0))"
"(if or-part_95 or-part_95 alt-path-d_0))))"
"(let-values(((get-so_0)"
"(lambda(file_2 rep-sfx?_0)"
"(lambda(root-dir_1 compiled-dir_1)"
"(build-path"
"(reroot_0 base_28 root-dir_1)"
" compiled-dir_1"
"                                                                     \"native\""
"(system-library-subpath)"
"(if rep-sfx?_0"
"(path-add-extension file_2 dll-suffix)"
" file_2))))))"
"(let-values(((zo_0)"
"(lambda(root-dir_2 compiled-dir_2)"
"(build-path"
"(reroot_0 base_28 root-dir_2)"
" compiled-dir_2"
"                                                                     (path-add-extension file_1 #\".zo\")))))"
"(let-values(((alt-zo_0)"
"(lambda(root-dir_3 compiled-dir_3)"
"(build-path"
"(reroot_0 base_28 root-dir_3)"
" compiled-dir_3"
"                                                                       (path-add-extension alt-file_0 #\".zo\")))))"
"(let-values(((so_0)(get-so_0 file_1 #t)))"
"(let-values(((alt-so_0)(get-so_0 alt-file_0 #t)))"
"(let-values(((try-main?_0)"
"(let-values(((or-part_20) main-path-d_0))"
"(if or-part_20"
" or-part_20"
"(not alt-path-d_0)))))"
"(let-values(((try-alt?_0)"
"(if alt-file_0"
"(let-values(((or-part_257) alt-path-d_0))"
"(if or-part_257"
" or-part_257"
"(not main-path-d_0)))"
" #f)))"
"(let-values(((with-dir_0)"
"(lambda(t_57)"
"(with-dir*_0 base_28 t_57))))"
"(let-values(((c1_134)"
"(if try-main?_0"
"(date>=?_0"
" modes_3"
" roots_3"
" so_0"
" path-d_0)"
" #f)))"
"(if c1_134"
"((lambda(so-d_0)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_0"
"(lambda()"
"((current-load-extension)"
"(car so-d_0)"
" expect-module_0))))))"
" c1_134)"
"(let-values(((c2_15)"
"(if try-alt?_0"
"(date>=?_0"
" modes_3"
" roots_3"
" alt-so_0"
" alt-path-d_0)"
" #f)))"
"(if c2_15"
"((lambda(so-d_1)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_0)"
"(let-values()"
"(with-dir_0"
"(lambda()"
"((current-load-extension)"
"(car so-d_1)"
" expect-module_0))))))"
" c2_15)"
"(let-values(((c3_10)"
"(if try-main?_0"
"(date>=?_0"
" modes_3"
" roots_3"
" zo_0"
" path-d_0)"
" #f)))"
"(if c3_10"
"((lambda(zo-d_0)"
"(begin"
"(register-zo-path"
" name_73"
" ns-hts_0"
"(car zo-d_0)"
" #f"
" base_28)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_0"
"(lambda()"
"((current-load)"
"(car zo-d_0)"
" expect-module_0)))))))"
" c3_10)"
"(let-values(((c4_2)"
"(if try-alt?_0"
"(date>=?_0"
" modes_3"
" roots_3"
" alt-zo_0"
" path-d_0)"
" #f)))"
"(if c4_2"
"((lambda(zo-d_1)"
"(begin"
"(register-zo-path"
" name_73"
" ns-hts_0"
"(car zo-d_1)"
" alt-path_0"
" base_28)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_0)"
"(let-values()"
"(with-dir_0"
"(lambda()"
"((current-load)"
"(car zo-d_1)"
" expect-module_0)))))))"
" c4_2)"
"(if(let-values(((or-part_318)"
"(not"
"(pair?"
" expect-module_0))))"
"(if or-part_318"
" or-part_318"
"(car expect-module_0)))"
"(let-values()"
"(let-values(((p_56)"
"(if try-main?_0"
" path_1"
" alt-path_0)))"
"(if(if(pair? expect-module_0)"
"(not(file-exists? p_56))"
" #f)"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
"(if expect-module_0"
"(if(not try-main?_0)"
" p_56"
" #f)"
" #f))"
"(let-values()"
"(with-dir_0"
"(lambda()"
"((current-load)"
" p_56"
" expect-module_0)))))))))"
"(void)))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(register-zo-path)"
"(lambda(name_74 ns-hts_1 path_14 src-path_0 base_8)"
"(if ns-hts_1(let-values()(hash-set!(cdr ns-hts_1) name_74(list path_14 src-path_0 base_8)))(void))))"
"(define-values(default-reader-guard)(lambda(path_15) path_15))"
"(define-values(-module-hash-table-table)(make-weak-hasheq))"
"(define-values(CACHE-N) 512)"
"(define-values(-path-cache)(make-vector CACHE-N #f))"
"(define-values"
"(path-cache-get)"
"(lambda(p_57)"
"(let-values(((i_194)(modulo(abs(equal-hash-code p_57)) CACHE-N)))"
"(let-values(((w_0)(vector-ref -path-cache i_194)))"
"(let-values(((l_72)(if w_0(weak-box-value w_0) #f)))"
"(if l_72(let-values(((a_70)(1/assoc p_57 l_72)))(if a_70(cdr a_70) #f)) #f))))))"
"(define-values"
"(path-cache-set!)"
"(lambda(p_34 v_68)"
"(let-values(((i_195)(modulo(abs(equal-hash-code p_34)) CACHE-N)))"
"(let-values(((w_1)(vector-ref -path-cache i_195)))"
"(let-values(((l_73)(if w_1(weak-box-value w_1) #f)))"
"(vector-set!"
" -path-cache"
" i_195"
"(make-weak-box"
"(cons(cons p_34 v_68)(let-values(((or-part_177) l_73))(if or-part_177 or-part_177 null))))))))))"
"(define-values(-loading-filename)(gensym))"
"(define-values(-loading-prompt-tag)(make-continuation-prompt-tag 'module-loading))"
"(define-values(-prev-relto) #f)"
"(define-values(-prev-relto-dir) #f)"
"(define-values"
"(split-relative-string)"
"(lambda(s_25 coll-mode?_0)"
"(let-values(((l_74)"
"((letrec-values(((loop_111)"
"(lambda(s_162)"
"(let-values(((len_40)(string-length s_162)))"
"((letrec-values(((iloop_15)"
"(lambda(i_196)"
"(if(= i_196 len_40)"
"(let-values()(list s_162))"
"(if(char=? '#\\/(string-ref s_162 i_196))"
"(let-values()"
"(cons"
"(substring s_162 0 i_196)"
"(loop_111(substring s_162(add1 i_196)))))"
"(let-values()(iloop_15(add1 i_196))))))))"
" iloop_15)"
" 0)))))"
" loop_111)"
" s_25)))"
"(if coll-mode?_0"
" l_74"
"((letrec-values(((loop_167)"
"(lambda(l_24)"
"(if(null?(cdr l_24))"
"(values null(car l_24))"
"(let-values(((c_91 f_35)(loop_167(cdr l_24))))"
"(values(cons(car l_24) c_91) f_35))))))"
" loop_167)"
" l_74)))))"
"(define-values"
"(format-source-location)"
"(lambda(stx_6)"
"(srcloc->string"
"(srcloc"
"(1/syntax-source stx_6)"
"(1/syntax-line stx_6)"
"(1/syntax-column stx_6)"
"(1/syntax-position stx_6)"
"(1/syntax-span stx_6)))))"
"(define-values(orig-paramz) #f)"
"(define-values"
"(standard-module-name-resolver)"
"(let-values()"
"(let-values(((planet-resolver_0) #f))"
"(let-values(((prep-planet-resolver!_0)"
"(lambda()"
"(if planet-resolver_0"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
" orig-paramz"
"(set! planet-resolver_0"
"                             (1/dynamic-require '(lib \"planet/resolver.rkt\") 'planet-module-name-resolver))))))))"
"(letrec-values(((standard-module-name-resolver_0)"
"(case-lambda"
"((s_389 from-namespace_1)"
"(begin"
"(if(1/resolved-module-path? s_389)"
"(void)"
"(let-values()"
"                                 (raise-argument-error 'standard-module-name-resolver \"resolved-module-path?\" s_389)))"
"(if(let-values(((or-part_319)(not from-namespace_1)))"
"(if or-part_319 or-part_319(1/namespace? from-namespace_1)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                  \"(or/c #f namespace?)\""
" from-namespace_1)))"
"(if planet-resolver_0(let-values()(planet-resolver_0 s_389))(void))"
"(let-values(((hts_1)"
"(let-values(((or-part_320)"
"(hash-ref"
" -module-hash-table-table"
"(1/namespace-module-registry(1/current-namespace))"
" #f)))"
"(if or-part_320"
" or-part_320"
"(let-values(((hts_2)(cons(make-hasheq)(make-hasheq))))"
"(begin"
"(hash-set!"
" -module-hash-table-table"
"(1/namespace-module-registry(1/current-namespace))"
" hts_2)"
" hts_2))))))"
"(begin"
"(hash-set!(car hts_1) s_389 'declared)"
"(if from-namespace_1"
"(let-values()"
"(let-values(((root-name_2)"
"(if(pair?(1/resolved-module-path-name s_389))"
"(1/make-resolved-module-path"
"(car(1/resolved-module-path-name s_389)))"
" s_389))"
"((from-hts_0)"
"(hash-ref"
" -module-hash-table-table"
"(1/namespace-module-registry from-namespace_1)"
" #f)))"
"(if from-hts_0"
"(let-values()"
"(let-values(((use-path/src_1)(hash-ref(cdr from-hts_0) root-name_2 #f)))"
"(if use-path/src_1"
"(let-values()(hash-set!(cdr hts_1) root-name_2 use-path/src_1))"
"(void))))"
"(void))))"
"(void))))))"
"((s_81 relto_0 stx_15)"
"(begin"
"(log-message"
"(current-logger)"
" 'error"
"                              \"default module name resolver called with three arguments (deprecated)\""
" #f)"
"(standard-module-name-resolver_0 s_81 relto_0 stx_15 #t)))"
"((s_193 relto_1 stx_16 load?_7)"
"(let-values((()"
"(begin"
"(if(1/module-path? s_193)"
"(void)"
"(let-values()"
"(if(syntax?$1 stx_16)"
"                                                 (raise-syntax-error$1 #f \"bad module path\" stx_16)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"module-path?\""
" s_193))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_321)(not relto_1)))"
"(if or-part_321 or-part_321(1/resolved-module-path? relto_1)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"(or/c #f resolved-module-path?)\""
" relto_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_322)(not stx_16)))"
"(if or-part_322 or-part_322(syntax?$1 stx_16)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                    \"(or/c #f syntax?)\""
" stx_16)))"
"(values))))"
"(let-values(((flatten-sub-path_0)"
"(lambda(base_29 orig-l_10)"
"((letrec-values(((loop_168)"
"(lambda(a_71 l_75)"
"(if(null? l_75)"
"(let-values()"
"(if(null? a_71)"
" base_29"
"(cons base_29(reverse$1 a_71))))"
"                                                                       (if (equal? (car l_75) \"..\")"
"(let-values()"
"(if(null? a_71)"
"(error"
" 'standard-module-name-resolver"
"                                                                              \"too many \\\"..\\\"s in submodule path: ~.s\""
"(list*"
" 'submod"
"                                                                               (if (equal? base_29 \".\")"
" base_29"
"(if(path? base_29)"
" base_29"
"(list"
"(if(symbol? base_29) 'quote 'file)"
" base_29)))"
" orig-l_10))"
"(loop_168(cdr a_71)(cdr l_75))))"
"(let-values()"
"(loop_168"
"(cons(car l_75) a_71)"
"(cdr l_75))))))))"
" loop_168)"
" null"
" orig-l_10))))"
"(if(if(pair? s_193)(eq?(car s_193) 'quote) #f)"
"(let-values()(1/make-resolved-module-path(cadr s_193)))"
"(if(if(pair? s_193)"
"(if(eq?(car s_193) 'submod)"
"(if(pair?(cadr s_193))(eq?(caadr s_193) 'quote) #f)"
" #f)"
" #f)"
"(let-values()"
"(1/make-resolved-module-path(flatten-sub-path_0(cadadr s_193)(cddr s_193))))"
"(if(if(pair? s_193)"
"(if(eq?(car s_193) 'submod)"
"                                               (if (let-values (((or-part_158) (equal? (cadr s_193) \".\")))"
"                                                     (if or-part_158 or-part_158 (equal? (cadr s_193) \"..\")))"
"(if relto_1"
"(let-values(((p_16)(1/resolved-module-path-name relto_1)))"
"(let-values(((or-part_159)(symbol? p_16)))"
"(if or-part_159"
" or-part_159"
"(if(pair? p_16)(symbol?(car p_16)) #f))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((rp_0)(1/resolved-module-path-name relto_1)))"
"(1/make-resolved-module-path"
"(flatten-sub-path_0"
"(if(pair? rp_0)(car rp_0) rp_0)"
"(let-values(((r_51)"
"                                                             (if (equal? (cadr s_193) \"..\") (cdr s_193) (cddr s_193))))"
"(if(pair? rp_0)(append(cdr rp_0) r_51) r_51))))))"
"(if(if(pair? s_193)(eq?(car s_193) 'planet) #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_0)"
"(planet-resolver_0 s_193 relto_1 stx_16 load?_7 #f orig-paramz)))"
"(if(if(pair? s_193)"
"(if(eq?(car s_193) 'submod)"
"(if(pair?(cadr s_193))(eq?(caadr s_193) 'planet) #f)"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_0)"
"(planet-resolver_0"
"(cadr s_193)"
" relto_1"
" stx_16"
" load?_7"
"(cddr s_193)"
" orig-paramz)))"
"(let-values()"
"(let-values(((get-dir_0)"
"(lambda()"
"(let-values(((or-part_51)"
"(if relto_1"
"(if(eq? relto_1 -prev-relto)"
" -prev-relto-dir"
"(let-values(((p_58)"
"(1/resolved-module-path-name"
" relto_1)))"
"(let-values(((p_59)"
"(if(pair? p_58)"
"(car p_58)"
" p_58)))"
"(if(path? p_59)"
"(let-values(((base_30 n_55 d?_0)"
"(split-path p_59)))"
"(begin"
"(set! -prev-relto relto_1)"
"(set! -prev-relto-dir"
" base_30)"
" base_30))"
" #f))))"
" #f)))"
"(if or-part_51"
" or-part_51"
"(let-values(((or-part_323)"
"(current-load-relative-directory)))"
"(if or-part_323"
" or-part_323"
"(current-directory)))))))"
"((get-reg_0)"
"(lambda()"
"(1/namespace-module-registry(1/current-namespace))))"
"((show-collection-err_0)"
"(lambda(msg_1)"
"(let-values(((msg_2)"
"(string-append"
"(let-values(((or-part_324)"
"(if stx_16"
"(if(error-print-source-location)"
"(format-source-location"
" stx_16)"
" #f)"
" #f)))"
"(if or-part_324"
" or-part_324"
"                                                                                  \"standard-module-name-resolver\"))"
"                                                                              \": \""
"(regexp-replace"
"                                                                               '#rx\"\\n\""
" msg_1"
"(format"
"                                                                                \"\\n  for module path: ~s\\n\""
" s_193)))))"
"(raise"
"(if stx_16"
"(1/make-exn:fail:syntax:missing-module"
" msg_2"
"(current-continuation-marks)"
"(list stx_16)"
" s_193)"
"(1/make-exn:fail:filesystem:missing-module"
" msg_2"
"(current-continuation-marks)"
" s_193))))))"
"((ss->rkt_0)"
"(lambda(s_453)"
"(let-values(((len_41)(string-length s_453)))"
"(if(if(>= len_41 3)"
"(if(equal? '#\\.(string-ref s_453(- len_41 3)))"
"(if(equal?"
" '#\\s"
"(string-ref s_453(- len_41 2)))"
"(equal? '#\\s(string-ref s_453(- len_41 1)))"
" #f)"
" #f)"
" #f)"
"(string-append"
"(substring s_453 0(- len_41 3))"
"                                                                    \".rkt\")"
" s_453))))"
"((path-ss->rkt_0)"
"(lambda(p_60)"
"(let-values(((base_31 name_75 dir?_9)"
"(split-path p_60)))"
"                                                                 (if (regexp-match '#rx\"[.]ss$\" (path->bytes name_75))"
"                                                                   (path-replace-extension p_60 #\".rkt\")"
" p_60))))"
"((s_454)"
"(if(if(pair? s_193)(eq? 'submod(car s_193)) #f)"
"(let-values(((v_214)(cadr s_193)))"
"                                                                 (if (let-values (((or-part_325) (equal? v_214 \".\")))"
"                                                                       (if or-part_325 or-part_325 (equal? v_214 \"..\")))"
"(if relto_1"
"(let-values(((p_61)"
"(1/resolved-module-path-name"
" relto_1)))"
"(if(pair? p_61)(car p_61) p_61))"
"(error"
" 'standard-module-name-resolver"
"                                                                      \"no base path for relative submodule path: ~.s\""
" s_193))"
" v_214))"
" s_193))"
"((subm-path_0)"
"(if(if(pair? s_193)(eq? 'submod(car s_193)) #f)"
"(let-values(((p_62)"
"(if(if(let-values(((or-part_65)"
"(equal?"
"(cadr s_193)"
"                                                                                                    \".\")))"
"(if or-part_65"
" or-part_65"
"                                                                                         (equal? (cadr s_193) \"..\")))"
" relto_1"
" #f)"
"(let-values(((p_63)"
"(1/resolved-module-path-name"
" relto_1))"
"((r_52)"
"(if(equal?"
"(cadr s_193)"
"                                                                                                  \"..\")"
"(cdr s_193)"
"(cddr s_193))))"
"(if(pair? p_63)"
"(flatten-sub-path_0"
"(car p_63)"
"(append(cdr p_63) r_52))"
"(flatten-sub-path_0 p_63 r_52)))"
"(flatten-sub-path_0"
"                                                                                \".\""
"                                                                                (if (equal? (cadr s_193) \"..\")"
"(cdr s_193)"
"(cddr s_193))))))"
"(if(pair? p_62)(cdr p_62) #f))"
" #f)))"
"(let-values(((s-parsed_0)"
"(if(symbol? s_454)"
"(let-values()"
"(let-values(((or-part_56)"
"(path-cache-get"
"(cons s_454(get-reg_0)))))"
"(if or-part_56"
" or-part_56"
"(let-values(((cols_0 file_3)"
"(split-relative-string"
"(symbol->string s_454)"
" #f)))"
"(let-values(((f-file_0)"
"(if(null? cols_0)"
"                                                                                         \"main.rkt\""
"(string-append"
" file_3"
"                                                                                          \".rkt\"))))"
"(find-col-file"
" show-collection-err_0"
"(if(null? cols_0) file_3(car cols_0))"
"(if(null? cols_0) null(cdr cols_0))"
" f-file_0"
" #t))))))"
"(if(string? s_454)"
"(let-values()"
"(let-values(((dir_4)(get-dir_0)))"
"(let-values(((or-part_326)"
"(path-cache-get"
"(cons s_454 dir_4))))"
"(if or-part_326"
" or-part_326"
"(let-values(((cols_1 file_4)"
"(split-relative-string"
" s_454"
" #f)))"
"(if(null? cols_1)"
"(build-path dir_4(ss->rkt_0 file_4))"
"(apply"
" build-path"
" dir_4"
"(append"
"(map2"
"(lambda(s_203)"
"                                                                                    (if (string=? s_203 \".\")"
"(let-values() 'same)"
"                                                                                      (if (string=? s_203 \"..\")"
"(let-values() 'up)"
"(let-values() s_203))))"
" cols_1)"
"(list(ss->rkt_0 file_4))))))))))"
"(if(path? s_454)"
"(let-values()"
"(path-ss->rkt_0"
"(simplify-path"
"(if(complete-path? s_454)"
" s_454"
"(path->complete-path s_454(get-dir_0))))))"
"(if(eq?(car s_454) 'lib)"
"(let-values()"
"(let-values(((or-part_153)"
"(path-cache-get"
"(cons s_454(get-reg_0)))))"
"(if or-part_153"
" or-part_153"
"(let-values(((cols_2 file_5)"
"(split-relative-string"
"(cadr s_454)"
" #f)))"
"(let-values(((old-style?_0)"
"(if(null?(cddr s_454))"
"(if(null? cols_2)"
"(regexp-match?"
"                                                                                                  '#rx\"[.]\""
" file_5)"
" #f)"
" #t)))"
"(let-values(((f-file_1)"
"(if old-style?_0"
"(ss->rkt_0 file_5)"
"(if(null? cols_2)"
"                                                                                                   \"main.rkt\""
"(if(regexp-match?"
"                                                                                                        '#rx\"[.]\""
" file_5)"
"(ss->rkt_0 file_5)"
"(string-append"
" file_5"
"                                                                                                      \".rkt\"))))))"
"(let-values(((cols_3)"
"(if old-style?_0"
"(append"
"(if(null?"
"(cddr s_454))"
"                                                                                                      '(\"mzlib\")"
"(apply"
" append"
"(map2"
"(lambda(p_64)"
"(split-relative-string"
" p_64"
" #t))"
"(cddr s_454))))"
" cols_2)"
"(if(null? cols_2)"
"(list file_5)"
" cols_2))))"
"(find-col-file"
" show-collection-err_0"
"(car cols_3)"
"(cdr cols_3)"
" f-file_1"
" #t))))))))"
"(if(eq?(car s_454) 'file)"
"(let-values()"
"(path-ss->rkt_0"
"(simplify-path"
"(path->complete-path"
"(expand-user-path(cadr s_454))"
"(get-dir_0)))))"
"(void))))))))"
"(begin"
"(if(let-values(((or-part_327)(path? s-parsed_0)))"
"(if or-part_327 or-part_327(vector? s-parsed_0)))"
"(void)"
"(let-values()"
"(if stx_16"
"(raise-syntax-error$1"
" 'require"
"(format"
"                                                             \"bad module path~a\""
"                                                             (if s-parsed_0 (car s-parsed_0) \"\"))"
" stx_16)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                            \"module-path?\""
" s_454))))"
"(let-values(((filename_2)"
"(if(vector? s-parsed_0)"
"(vector-ref s-parsed_0 0)"
"(simplify-path(cleanse-path s-parsed_0) #f))))"
"(let-values(((normal-filename_0)"
"(if(vector? s-parsed_0)"
"(vector-ref s-parsed_0 1)"
"(normal-case-path filename_2))))"
"(let-values(((base_32 name_76 dir?_10)"
"(if(vector? s-parsed_0)"
"(values"
" 'ignored"
"(vector-ref s-parsed_0 2)"
" 'ignored)"
"(split-path filename_2))))"
"(let-values(((no-sfx_0)"
"(if(vector? s-parsed_0)"
"(vector-ref s-parsed_0 3)"
"                                                                           (path-replace-extension name_76 #\"\"))))"
"(let-values(((root-modname_0)"
"(if(vector? s-parsed_0)"
"(vector-ref s-parsed_0 4)"
"(1/make-resolved-module-path filename_2))))"
"(let-values(((hts_3)"
"(let-values(((or-part_200)"
"(hash-ref"
" -module-hash-table-table"
"(get-reg_0)"
" #f)))"
"(if or-part_200"
" or-part_200"
"(let-values(((hts_4)"
"(cons"
"(make-hasheq)"
"(make-hasheq))))"
"(begin"
"(hash-set!"
" -module-hash-table-table"
"(get-reg_0)"
" hts_4)"
" hts_4))))))"
"(let-values(((modname_0)"
"(if subm-path_0"
"(1/make-resolved-module-path"
"(cons"
"(1/resolved-module-path-name"
" root-modname_0)"
" subm-path_0))"
" root-modname_0)))"
"(begin"
"(if load?_7"
"(let-values()"
"(let-values(((got_0)"
"(hash-ref"
"(car hts_3)"
" modname_0"
" #f)))"
"(if got_0"
"(void)"
"(let-values()"
"(let-values(((loading_0)"
"(let-values(((tag_2)"
"(if(continuation-prompt-available?"
" -loading-prompt-tag)"
" -loading-prompt-tag"
"(default-continuation-prompt-tag))))"
"(continuation-mark-set-first"
" #f"
" -loading-filename"
" null"
" tag_2)))"
"((nsr_0)(get-reg_0)))"
"(begin"
"(for-each2"
"(lambda(s_429)"
"(if(if(equal?"
"(cdr s_429)"
" normal-filename_0)"
"(eq?(car s_429) nsr_0)"
" #f)"
"(let-values()"
"(error"
" 'standard-module-name-resolver"
"                                                                                           \"cycle in loading\\n  at path: ~a\\n  paths:~a\""
" filename_2"
"(apply"
" string-append"
"((letrec-values(((loop_169)"
"(lambda(l_76)"
"(if(null?"
" l_76)"
" '()"
"(list*"
"                                                                                                                   \"\\n   \""
"(path->string"
"(cdar"
" l_76))"
"(loop_169"
"(cdr"
" l_76)))))))"
" loop_169)"
"(reverse$1 loading_0)))))"
"(void)))"
" loading_0)"
"((if(continuation-prompt-available?"
" -loading-prompt-tag)"
"(lambda(f_36)(f_36))"
"(lambda(f_37)"
"(call-with-continuation-prompt"
" f_37"
" -loading-prompt-tag)))"
"(lambda()"
"(with-continuation-mark"
" -loading-filename"
"(cons"
"(cons nsr_0 normal-filename_0)"
" loading_0)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-name"
" root-modname_0"
" 1/current-module-path-for-load"
"((if stx_16"
"(lambda(p_65)"
"(1/datum->syntax"
" #f"
" p_65"
" stx_16))"
" values)"
"(if(symbol? s_454)"
"(let-values() s_454)"
"(if(if(pair? s_454)"
"(eq?(car s_454) 'lib)"
" #f)"
"(let-values() s_454)"
"(let-values()"
"(if(1/resolved-module-path?"
" root-modname_0)"
"(let-values(((src_8)"
"(1/resolved-module-path-name"
" root-modname_0)))"
"(if(symbol? src_8)"
"(list"
" 'quote"
" src_8)"
" src_8))"
" root-modname_0))))))"
"(let-values()"
"((current-load/use-compiled)"
" filename_2"
"(let-values(((sym_101)"
"(string->symbol"
"(path->string"
" no-sfx_0))))"
"(if subm-path_0"
"(if(hash-ref"
"(car hts_3)"
" root-modname_0"
" #f)"
"(cons #f subm-path_0)"
"(cons"
" sym_101"
" subm-path_0))"
" sym_101))))))))))))))"
"(void))"
"(if(if(not(vector? s-parsed_0))"
"(if load?_7"
"(let-values(((or-part_289)"
"(string? s_454)))"
"(if or-part_289"
" or-part_289"
"(let-values(((or-part_307)"
"(symbol? s_454)))"
"(if or-part_307"
" or-part_307"
"(if(pair? s_454)"
"(eq?(car s_454) 'lib)"
" #f)))))"
" #f)"
" #f)"
"(let-values()"
"(path-cache-set!"
"(if(string? s_454)"
"(cons s_454(get-dir_0))"
"(cons s_454(get-reg_0)))"
"(vector"
" filename_2"
" normal-filename_0"
" name_76"
" no-sfx_0"
" root-modname_0)))"
"(void))"
" modname_0)))))))))))))))))))))))))"
" standard-module-name-resolver_0)))))"
"(define-values"
"(default-eval-handler)"
"(lambda(s_431)"
"(1/eval"
" s_431"
"(1/current-namespace)"
"(let-values(((c_92)(current-compile)))"
"(lambda(e_86 ns_100)"
"(if(eq? ns_100(1/current-namespace))"
"(c_92 e_86 #t)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_100)"
"(let-values()(c_92 e_86 #t)))))))))"
"(define-values"
"(default-compile-handler)"
"(lambda(s_292 immediate-eval?_0)(1/compile s_292(1/current-namespace)(not immediate-eval?_0))))"
"(define-values"
"(default-read-interaction)"
"(lambda(src_9 in_81)"
"(begin"
"(if(input-port? in_81)"
"(void)"
"        (let-values () (raise-argument-error 'default-read-interaction \"input-port?\" in_81)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/read-accept-reader"
" #t"
" 1/read-accept-lang"
" #f)"
"(let-values()(1/read-syntax src_9 in_81))))))"
"(define-values"
"(boot)"
"(lambda()"
"(begin"
"(seal)"
"(1/current-module-name-resolver standard-module-name-resolver)"
"(current-load/use-compiled default-load/use-compiled)"
"(1/current-reader-guard default-reader-guard)"
"(current-eval default-eval-handler)"
"(current-compile default-compile-handler)"
"(current-load default-load-handler)"
"(current-read-interaction default-read-interaction))))"
"(define-values"
"(seal)"
"(lambda()(set! orig-paramz(reparameterize(continuation-mark-set-first #f parameterization-key)))))"
"(define-values(boot-primitives)(hash 'boot boot 'seal seal 'orig-paramz orig-paramz))"
"(define-values"
"(expand-body7.1)"
"(lambda(source1_0 stratified?2_0 stratified?4_0 bodys5_0 ctx6_0)"
"(let-values(((bodys_7) bodys5_0))"
"(let-values(((ctx_51) ctx6_0))"
"(let-values(((s_41) source1_0))"
"(let-values(((stratified?_0)(if stratified?4_0 stratified?2_0 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_42)(expand-context-observer ctx_51)))"
"(if obs_42"
"(let-values()(let-values()(call-expand-observe obs_42 'enter-block)))"
"(void)))"
"(values))))"
"(let-values(((inside-sc_0)(new-scope 'intdef)))"
"(let-values(((init-bodys_0)"
"(let-values(((lst_240) bodys_7))"
"(begin"
"(check-list lst_240)"
"((letrec-values(((for-loop_213)"
"(lambda(lst_84)"
"(if(pair? lst_84)"
"(let-values(((body_9)(unsafe-car lst_84))"
"((rest_138)(unsafe-cdr lst_84)))"
"(let-values(((post-guard-var_63)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_80)"
"(let-values()"
"(let-values()"
"(add-scope body_9 inside-sc_0)))))"
"(let-values(((result_175)"
"(if(post-guard-var_63)"
"(for-loop_213 rest_138)"
" null)))"
"(cons elem_80 result_175))))))"
" null))))"
" for-loop_213)"
" lst_240)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_43)(expand-context-observer ctx_51)))"
"(if obs_43"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_43"
" 'block-renames"
"(datum->syntax$1 #f init-bodys_0)"
"(datum->syntax$1 #f bodys_7))))"
"(void)))"
"(values))))"
"(let-values(((phase_141)(expand-context-phase ctx_51)))"
"(let-values(((frame-id_12)(make-reference-record)))"
"(let-values(((def-ctx-scopes_6)(box null)))"
"(let-values(((body-ctx_0)"
"(let-values(((v_237) ctx_51))"
"(let-values(((the-struct_88) v_237))"
"(if(expand-context/outer? the-struct_88)"
"(let-values(((context48_0)(list(make-liberal-define-context)))"
"((name49_0) #f)"
"((only-immediate?50_0) #t)"
"((def-ctx-scopes51_0) def-ctx-scopes_6)"
"((post-expansion-scope52_0) inside-sc_0)"
"((post-expansion-scope-action53_0) add-scope)"
"((scopes54_0)"
"(cons inside-sc_0(expand-context-scopes ctx_51)))"
"((use-site-scopes55_0)(box null))"
"((frame-id56_0) frame-id_12)"
"((reference-records57_0)"
"(cons"
" frame-id_12"
"(expand-context-reference-records ctx_51)))"
"((inner58_1)(root-expand-context/outer-inner v_237)))"
"(expand-context/outer1.1"
" inner58_1"
" post-expansion-scope52_0"
" use-site-scopes55_0"
" frame-id56_0"
" context48_0"
"(expand-context/outer-env the-struct_88)"
" post-expansion-scope-action53_0"
" scopes54_0"
" def-ctx-scopes51_0"
"(expand-context/outer-binding-layer the-struct_88)"
" reference-records57_0"
" only-immediate?50_0"
"(expand-context/outer-need-eventually-defined the-struct_88)"
"(expand-context/outer-current-introduction-scopes the-struct_88)"
" name49_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                 \"expand-context/outer?\""
" the-struct_88))))))"
"(let-values(((maybe-increment-binding-layer_0)"
"(lambda(ids_28 body-ctx_1)"
"(if(eq?"
"(expand-context-binding-layer body-ctx_1)"
"(expand-context-binding-layer ctx_51))"
"(increment-binding-layer ids_28 body-ctx_1 inside-sc_0)"
"(expand-context-binding-layer body-ctx_1)))))"
"(let-values(((name_77)(expand-context-name ctx_51)))"
"((letrec-values(((loop_170)"
"(lambda(body-ctx_2"
" bodys_8"
" done-bodys_0"
" val-idss_0"
" val-keyss_0"
" val-rhss_0"
" track-stxs_0"
" trans-idss_1"
" dups_0)"
"(if(null? bodys_8)"
"(let-values()"
"(begin"
"(let-values(((obs_44)"
"(expand-context-observer body-ctx_2)))"
"(if obs_44"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_44"
"(if(null? val-idss_0)"
" 'block->list"
" 'block->letrec))))"
"(void)))"
"(let-values(((temp62_1)(reverse$1 val-idss_0))"
"((temp63_4)(reverse$1 val-keyss_0))"
"((temp64_2)(reverse$1 val-rhss_0))"
"((temp65_6)(reverse$1 track-stxs_0))"
"((temp66_3)(reverse$1 done-bodys_0))"
"((s67_0) s_41)"
"((stratified?68_0) stratified?_0)"
"((name69_0) name_77)"
"((temp70_3)(reverse$1 trans-idss_1)))"
"(finish-expanding-body26.1"
" temp70_3"
" name69_0"
" s67_0"
" stratified?68_0"
" body-ctx_2"
" frame-id_12"
" def-ctx-scopes_6"
" temp62_1"
" temp63_4"
" temp64_2"
" temp65_6"
" temp66_3))))"
"(let-values()"
"(let-values(((rest-bodys_0)(cdr bodys_8)))"
"(let-values((()"
"(begin"
"(let-values(((obs_45)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_45"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_45 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_0)"
"(let-values(((temp71_3)(car bodys_8))"
"((temp72_5)"
"(if(if name_77"
"(null?(cdr bodys_8))"
" #f)"
"(let-values(((v_243)"
" body-ctx_2))"
"(let-values(((the-struct_89)"
" v_243))"
"(if(expand-context/outer?"
" the-struct_89)"
"(let-values(((name73_0)"
" name_77)"
"((inner74_0)"
"(root-expand-context/outer-inner"
" v_243)))"
"(expand-context/outer1.1"
" inner74_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_89)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_89)"
"(root-expand-context/outer-frame-id"
" the-struct_89)"
"(expand-context/outer-context"
" the-struct_89)"
"(expand-context/outer-env"
" the-struct_89)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_89)"
"(expand-context/outer-scopes"
" the-struct_89)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_89)"
"(expand-context/outer-binding-layer"
" the-struct_89)"
"(expand-context/outer-reference-records"
" the-struct_89)"
"(expand-context/outer-only-immediate?"
" the-struct_89)"
"(expand-context/outer-need-eventually-defined"
" the-struct_89)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_89)"
" name73_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                   \"expand-context/outer?\""
" the-struct_89))))"
" body-ctx_2)))"
"(expand5.1 #f #f temp71_3 temp72_5))))"
"(let-values(((disarmed-exp-body_0)"
"(syntax-disarm$1 exp-body_0)))"
"(let-values(((tmp_56)"
"(core-form-sym"
" disarmed-exp-body_0"
" phase_141)))"
"(if(equal? tmp_56 'begin)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_46)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_46"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_46"
" 'prim-begin)))"
"(void)))"
"(values))))"
"(let-values(((ok?_29 begin75_0 e76_0)"
"(let-values(((s_455)"
" disarmed-exp-body_0))"
"(let-values(((orig-s_35)"
" s_455))"
"(let-values(((begin75_1"
" e76_1)"
"(let-values(((s_441)"
"(if(syntax?$1"
" s_455)"
"(syntax-e$1"
" s_455)"
" s_455)))"
"(if(pair?"
" s_441)"
"(let-values(((begin77_0)"
"(let-values(((s_447)"
"(car"
" s_441)))"
" s_447))"
"((e78_0)"
"(let-values(((s_456)"
"(cdr"
" s_441)))"
"(let-values(((s_71)"
"(if(syntax?$1"
" s_456)"
"(syntax-e$1"
" s_456)"
" s_456)))"
"(let-values(((flat-s_22)"
"(to-syntax-list.1"
" s_71)))"
"(if(not"
" flat-s_22)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_35))"
"(let-values()"
" flat-s_22)))))))"
"(values"
" begin77_0"
" e78_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                               \"bad syntax\""
" orig-s_35)))))"
"(values"
" #t"
" begin75_1"
" e76_1))))))"
"(let-values(((track_0)"
"(lambda(e_87)"
"(syntax-track-origin$1"
" e_87"
" exp-body_0))))"
"(let-values(((splice-bodys_0)"
"(append"
"(map2 track_0 e76_0)"
" rest-bodys_0)))"
"(begin"
"(let-values(((obs_47)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_47"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_47"
" 'splice"
" splice-bodys_0)))"
"(void)))"
"(loop_170"
" body-ctx_2"
" splice-bodys_0"
" done-bodys_0"
" val-idss_0"
" val-keyss_0"
" val-rhss_0"
" track-stxs_0"
" trans-idss_1"
" dups_0)))))))"
"(if(equal? tmp_56 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_16)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_16"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_16"
" 'prim-define-values)))"
"(void)))"
"(values))))"
"(let-values(((ok?_30"
" define-values79_0"
" id80_0"
" rhs81_0)"
"(let-values(((s_457)"
" disarmed-exp-body_0))"
"(let-values(((orig-s_36)"
" s_457))"
"(let-values(((define-values79_1"
" id80_1"
" rhs81_1)"
"(let-values(((s_458)"
"(if(syntax?$1"
" s_457)"
"(syntax-e$1"
" s_457)"
" s_457)))"
"(if(pair?"
" s_458)"
"(let-values(((define-values82_0)"
"(let-values(((s_448)"
"(car"
" s_458)))"
" s_448))"
"((id83_0"
" rhs84_0)"
"(let-values(((s_459)"
"(cdr"
" s_458)))"
"(let-values(((s_89)"
"(if(syntax?$1"
" s_459)"
"(syntax-e$1"
" s_459)"
" s_459)))"
"(if(pair?"
" s_89)"
"(let-values(((id85_1)"
"(let-values(((s_453)"
"(car"
" s_89)))"
"(let-values(((s_460)"
"(if(syntax?$1"
" s_453)"
"(syntax-e$1"
" s_453)"
" s_453)))"
"(let-values(((flat-s_23)"
"(to-syntax-list.1"
" s_460)))"
"(if(not"
" flat-s_23)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_36))"
"(let-values()"
"(let-values(((id_100)"
"(let-values(((lst_12)"
" flat-s_23))"
"(begin"
"(check-list"
" lst_12)"
"((letrec-values(((for-loop_259)"
"(lambda(id_101"
" lst_48)"
"(if(pair?"
" lst_48)"
"(let-values(((s_199)"
"(unsafe-car"
" lst_48))"
"((rest_169)"
"(unsafe-cdr"
" lst_48)))"
"(let-values(((id_102)"
"(let-values(((id_103)"
" id_101))"
"(let-values(((id_25)"
"(let-values()"
"(let-values(((id88_0)"
"(let-values()"
"(if(let-values(((or-part_56)"
"(if(syntax?$1"
" s_199)"
"(symbol?"
"(syntax-e$1"
" s_199))"
" #f)))"
"(if or-part_56"
" or-part_56"
"(symbol?"
" s_199)))"
" s_199"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_36"
" s_199)))))"
"(cons"
" id88_0"
" id_103)))))"
"(values"
" id_25)))))"
"(if(not"
" #f)"
"(for-loop_259"
" id_102"
" rest_169)"
" id_102)))"
" id_101))))"
" for-loop_259)"
" null"
" lst_12)))))"
"(reverse$1"
" id_100))))))))"
"((rhs86_0)"
"(let-values(((s_461)"
"(cdr"
" s_89)))"
"(let-values(((s_427)"
"(if(syntax?$1"
" s_461)"
"(syntax-e$1"
" s_461)"
" s_461)))"
"(if(pair?"
" s_427)"
"(let-values(((rhs87_0)"
"(let-values(((s_157)"
"(car"
" s_427)))"
" s_157))"
"(()"
"(let-values(((s_462)"
"(cdr"
" s_427)))"
"(let-values(((s_428)"
"(if(syntax?$1"
" s_462)"
"(syntax-e$1"
" s_462)"
" s_462)))"
"(if(null?"
" s_428)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_36))))))"
"(values"
" rhs87_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_36))))))"
"(values"
" id85_1"
" rhs86_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_36))))))"
"(values"
" define-values82_0"
" id83_0"
" rhs84_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_36)))))"
"(values"
" #t"
" define-values79_1"
" id80_1"
" rhs81_1))))))"
"(let-values(((ids_29)"
"(remove-use-site-scopes"
" id80_0"
" body-ctx_2)))"
"(let-values((()"
"(begin"
"(let-values(((obs_22)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_22"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_22"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_29"
" rhs81_0)))))"
"(void)))"
"(values))))"
"(let-values(((new-dups_0)"
"(let-values(((ids89_0)"
" ids_29)"
"((phase90_0)"
" phase_141)"
"((exp-body91_0)"
" exp-body_0)"
"((dups92_0)"
" dups_0))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids89_0"
" phase90_0"
" exp-body91_0"
" dups92_0"
" #t))))"
"(let-values(((counter_5)"
"(root-expand-context-counter"
" ctx_51)))"
"(let-values(((keys_6)"
"(let-values(((lst_300)"
" ids_29))"
"(begin"
"(check-list"
" lst_300)"
"((letrec-values(((for-loop_253)"
"(lambda(lst_301)"
"(if(pair?"
" lst_301)"
"(let-values(((id_64)"
"(unsafe-car"
" lst_301))"
"((rest_170)"
"(unsafe-cdr"
" lst_301)))"
"(let-values(((post-guard-var_86)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_81)"
"(let-values()"
"(let-values()"
"(let-values(((frame-id96_0)"
" frame-id_12)"
"((exp-body97_0)"
" exp-body_0))"
"(add-local-binding!35.1"
" frame-id96_0"
" #t"
" exp-body97_0"
" #t"
" id_64"
" phase_141"
" counter_5))))))"
"(let-values(((result_13)"
"(if(post-guard-var_86)"
"(for-loop_253"
" rest_170)"
" null)))"
"(cons"
" elem_81"
" result_13))))))"
" null))))"
" for-loop_253)"
" lst_300)))))"
"(let-values(((extended-env_0)"
"(let-values(((lst_253)"
" keys_6)"
"((lst_141)"
" ids_29))"
"(begin"
"(check-list"
" lst_253)"
"(check-list"
" lst_141)"
"((letrec-values(((for-loop_260)"
"(lambda(env_17"
" lst_166"
" lst_167)"
"(if(if(pair?"
" lst_166)"
"(pair?"
" lst_167)"
" #f)"
"(let-values(((key_85)"
"(unsafe-car"
" lst_166))"
"((rest_171)"
"(unsafe-cdr"
" lst_166))"
"((id_9)"
"(unsafe-car"
" lst_167))"
"((rest_172)"
"(unsafe-cdr"
" lst_167)))"
"(let-values(((env_18)"
"(let-values(((env_19)"
" env_17))"
"(let-values(((env_20)"
"(let-values()"
"(env-extend"
" env_19"
" key_85"
"(local-variable1.1"
" id_9)))))"
"(values"
" env_20)))))"
"(if(not"
" #f)"
"(for-loop_260"
" env_18"
" rest_171"
" rest_172)"
" env_18)))"
" env_17))))"
" for-loop_260)"
"(expand-context-env"
" body-ctx_2)"
" lst_253"
" lst_141)))))"
"(loop_170"
"(let-values(((v_244)"
" body-ctx_2))"
"(let-values(((the-struct_90)"
" v_244))"
"(if(expand-context/outer?"
" the-struct_90)"
"(let-values(((env98_0)"
" extended-env_0)"
"((binding-layer99_0)"
"(maybe-increment-binding-layer_0"
" ids_29"
" body-ctx_2))"
"((inner100_0)"
"(root-expand-context/outer-inner"
" v_244)))"
"(expand-context/outer1.1"
" inner100_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_90)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_90)"
"(root-expand-context/outer-frame-id"
" the-struct_90)"
"(expand-context/outer-context"
" the-struct_90)"
" env98_0"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_90)"
"(expand-context/outer-scopes"
" the-struct_90)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_90)"
" binding-layer99_0"
"(expand-context/outer-reference-records"
" the-struct_90)"
"(expand-context/outer-only-immediate?"
" the-struct_90)"
"(expand-context/outer-need-eventually-defined"
" the-struct_90)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_90)"
"(expand-context/outer-name"
" the-struct_90)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                  \"expand-context/outer?\""
" the-struct_90))))"
" rest-bodys_0"
" null"
"(cons"
" ids_29"
"(append"
"(let-values(((lst_302)"
" done-bodys_0))"
"(begin"
"(check-list lst_302)"
"((letrec-values(((for-loop_261)"
"(lambda(lst_303)"
"(if(pair?"
" lst_303)"
"(let-values(((done-body_0)"
"(unsafe-car"
" lst_303))"
"((rest_173)"
"(unsafe-cdr"
" lst_303)))"
"(let-values(((post-guard-var_87)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_82)"
"(let-values()"
"(let-values()"
" null))))"
"(let-values(((result_19)"
"(if(post-guard-var_87)"
"(for-loop_261"
" rest_173)"
" null)))"
"(cons"
" elem_82"
" result_19))))))"
" null))))"
" for-loop_261)"
" lst_302)))"
" val-idss_0))"
"(cons"
" keys_6"
"(append"
"(let-values(((lst_297)"
" done-bodys_0))"
"(begin"
"(check-list lst_297)"
"((letrec-values(((for-loop_232)"
"(lambda(lst_304)"
"(if(pair?"
" lst_304)"
"(let-values(((done-body_1)"
"(unsafe-car"
" lst_304))"
"((rest_167)"
"(unsafe-cdr"
" lst_304)))"
"(let-values(((post-guard-var_88)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_83)"
"(let-values()"
"(let-values()"
" null))))"
"(let-values(((result_176)"
"(if(post-guard-var_88)"
"(for-loop_232"
" rest_167)"
" null)))"
"(cons"
" elem_83"
" result_176))))))"
" null))))"
" for-loop_232)"
" lst_297)))"
" val-keyss_0))"
"(cons"
" rhs81_0"
"(append"
"(let-values(((lst_71)"
" done-bodys_0))"
"(begin"
"(check-list lst_71)"
"((letrec-values(((for-loop_87)"
"(lambda(lst_50)"
"(if(pair?"
" lst_50)"
"(let-values(((done-body_2)"
"(unsafe-car"
" lst_50))"
"((rest_174)"
"(unsafe-cdr"
" lst_50)))"
"(let-values(((post-guard-var_89)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_84)"
"(let-values()"
"(let-values()"
"(no-binds"
" done-body_2"
" s_41"
" phase_141)))))"
"(let-values(((result_177)"
"(if(post-guard-var_89)"
"(for-loop_87"
" rest_174)"
" null)))"
"(cons"
" elem_84"
" result_177))))))"
" null))))"
" for-loop_87)"
" lst_71)))"
" val-rhss_0))"
"(cons"
" exp-body_0"
"(append"
"(let-values(((lst_255)"
" done-bodys_0))"
"(begin"
"(check-list lst_255)"
"((letrec-values(((for-loop_218)"
"(lambda(lst_305)"
"(if(pair?"
" lst_305)"
"(let-values(((done-body_3)"
"(unsafe-car"
" lst_305))"
"((rest_175)"
"(unsafe-cdr"
" lst_305)))"
"(let-values(((post-guard-var_90)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_85)"
"(let-values()"
"(let-values()"
" #f))))"
"(let-values(((result_178)"
"(if(post-guard-var_90)"
"(for-loop_218"
" rest_175)"
" null)))"
"(cons"
" elem_85"
" result_178))))))"
" null))))"
" for-loop_218)"
" lst_255)))"
" track-stxs_0))"
" trans-idss_1"
" new-dups_0))))))))))"
"(if(equal? tmp_56 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_48)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_48"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_48"
" 'prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values(((ok?_31"
" define-syntaxes101_0"
" id102_0"
" rhs103_0)"
"(let-values(((s_65)"
" disarmed-exp-body_0))"
"(let-values(((orig-s_37)"
" s_65))"
"(let-values(((define-syntaxes101_1"
" id102_1"
" rhs103_1)"
"(let-values(((s_302)"
"(if(syntax?$1"
" s_65)"
"(syntax-e$1"
" s_65)"
" s_65)))"
"(if(pair?"
" s_302)"
"(let-values(((define-syntaxes104_0)"
"(let-values(((s_211)"
"(car"
" s_302)))"
" s_211))"
"((id105_0"
" rhs106_0)"
"(let-values(((s_68)"
"(cdr"
" s_302)))"
"(let-values(((s_212)"
"(if(syntax?$1"
" s_68)"
"(syntax-e$1"
" s_68)"
" s_68)))"
"(if(pair?"
" s_212)"
"(let-values(((id107_0)"
"(let-values(((s_463)"
"(car"
" s_212)))"
"(let-values(((s_464)"
"(if(syntax?$1"
" s_463)"
"(syntax-e$1"
" s_463)"
" s_463)))"
"(let-values(((flat-s_24)"
"(to-syntax-list.1"
" s_464)))"
"(if(not"
" flat-s_24)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_37))"
"(let-values()"
"(let-values(((id_104)"
"(let-values(((lst_306)"
" flat-s_24))"
"(begin"
"(check-list"
" lst_306)"
"((letrec-values(((for-loop_262)"
"(lambda(id_105"
" lst_307)"
"(if(pair?"
" lst_307)"
"(let-values(((s_303)"
"(unsafe-car"
" lst_307))"
"((rest_176)"
"(unsafe-cdr"
" lst_307)))"
"(let-values(((id_106)"
"(let-values(((id_107)"
" id_105))"
"(let-values(((id_108)"
"(let-values()"
"(let-values(((id110_0)"
"(let-values()"
"(if(let-values(((or-part_190)"
"(if(syntax?$1"
" s_303)"
"(symbol?"
"(syntax-e$1"
" s_303))"
" #f)))"
"(if or-part_190"
" or-part_190"
"(symbol?"
" s_303)))"
" s_303"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_37"
" s_303)))))"
"(cons"
" id110_0"
" id_107)))))"
"(values"
" id_108)))))"
"(if(not"
" #f)"
"(for-loop_262"
" id_106"
" rest_176)"
" id_106)))"
" id_105))))"
" for-loop_262)"
" null"
" lst_306)))))"
"(reverse$1"
" id_104))))))))"
"((rhs108_0)"
"(let-values(((s_305)"
"(cdr"
" s_212)))"
"(let-values(((s_306)"
"(if(syntax?$1"
" s_305)"
"(syntax-e$1"
" s_305)"
" s_305)))"
"(if(pair?"
" s_306)"
"(let-values(((rhs109_0)"
"(let-values(((s_93)"
"(car"
" s_306)))"
" s_93))"
"(()"
"(let-values(((s_465)"
"(cdr"
" s_306)))"
"(let-values(((s_466)"
"(if(syntax?$1"
" s_465)"
"(syntax-e$1"
" s_465)"
" s_465)))"
"(if(null?"
" s_466)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_37))))))"
"(values"
" rhs109_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_37))))))"
"(values"
" id107_0"
" rhs108_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_37))))))"
"(values"
" define-syntaxes104_0"
" id105_0"
" rhs106_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_37)))))"
"(values"
" #t"
" define-syntaxes101_1"
" id102_1"
" rhs103_1))))))"
"(let-values(((ids_30)"
"(remove-use-site-scopes"
" id102_0"
" body-ctx_2)))"
"(let-values((()"
"(begin"
"(let-values(((obs_49)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_49"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_49"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_30"
" rhs103_0)))))"
"(void)))"
"(values))))"
"(let-values(((new-dups_1)"
"(let-values(((ids111_0)"
" ids_30)"
"((phase112_0)"
" phase_141)"
"((exp-body113_0)"
" exp-body_0)"
"((dups114_0)"
" dups_0))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids111_0"
" phase112_0"
" exp-body113_0"
" dups114_0"
" #t))))"
"(let-values(((counter_6)"
"(root-expand-context-counter"
" ctx_51)))"
"(let-values(((keys_7)"
"(let-values(((lst_55)"
" ids_30))"
"(begin"
"(check-list"
" lst_55)"
"((letrec-values(((for-loop_263)"
"(lambda(lst_308)"
"(if(pair?"
" lst_308)"
"(let-values(((id_109)"
"(unsafe-car"
" lst_308))"
"((rest_177)"
"(unsafe-cdr"
" lst_308)))"
"(let-values(((post-guard-var_91)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_86)"
"(let-values()"
"(let-values()"
"(let-values(((frame-id118_0)"
" frame-id_12)"
"((exp-body119_0)"
" exp-body_0))"
"(add-local-binding!35.1"
" frame-id118_0"
" #t"
" exp-body119_0"
" #t"
" id_109"
" phase_141"
" counter_6))))))"
"(let-values(((result_179)"
"(if(post-guard-var_91)"
"(for-loop_263"
" rest_177)"
" null)))"
"(cons"
" elem_86"
" result_179))))))"
" null))))"
" for-loop_263)"
" lst_55)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_25)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_25"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_25"
" 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values(((vals_7)"
"(eval-for-syntaxes-binding"
" rhs103_0"
" ids_30"
" body-ctx_2)))"
"(let-values(((extended-env_1)"
"(let-values(((lst_40)"
" keys_7)"
"((lst_309)"
" vals_7)"
"((lst_310)"
" ids_30))"
"(begin"
"(check-list"
" lst_40)"
"(check-list"
" lst_309)"
"(check-list"
" lst_310)"
"((letrec-values(((for-loop_264)"
"(lambda(env_21"
" lst_311"
" lst_312"
" lst_313)"
"(if(if(pair?"
" lst_311)"
"(if(pair?"
" lst_312)"
"(pair?"
" lst_313)"
" #f)"
" #f)"
"(let-values(((key_86)"
"(unsafe-car"
" lst_311))"
"((rest_178)"
"(unsafe-cdr"
" lst_311))"
"((val_73)"
"(unsafe-car"
" lst_312))"
"((rest_179)"
"(unsafe-cdr"
" lst_312))"
"((id_110)"
"(unsafe-car"
" lst_313))"
"((rest_180)"
"(unsafe-cdr"
" lst_313)))"
"(let-values(((env_22)"
"(let-values(((env_23)"
" env_21))"
"(let-values(((env_24)"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_73"
" id_110"
" phase_141)"
"(env-extend"
" env_23"
" key_86"
" val_73)))))"
"(values"
" env_24)))))"
"(if(not"
" #f)"
"(for-loop_264"
" env_22"
" rest_178"
" rest_179"
" rest_180)"
" env_22)))"
" env_21))))"
" for-loop_264)"
"(expand-context-env"
" body-ctx_2)"
" lst_40"
" lst_309"
" lst_310)))))"
"(loop_170"
"(let-values(((v_245)"
" body-ctx_2))"
"(let-values(((the-struct_91)"
" v_245))"
"(if(expand-context/outer?"
" the-struct_91)"
"(let-values(((env120_0)"
" extended-env_1)"
"((binding-layer121_0)"
"(maybe-increment-binding-layer_0"
" ids_30"
" body-ctx_2))"
"((inner122_0)"
"(root-expand-context/outer-inner"
" v_245)))"
"(expand-context/outer1.1"
" inner122_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_91)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_91)"
"(root-expand-context/outer-frame-id"
" the-struct_91)"
"(expand-context/outer-context"
" the-struct_91)"
" env120_0"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_91)"
"(expand-context/outer-scopes"
" the-struct_91)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_91)"
" binding-layer121_0"
"(expand-context/outer-reference-records"
" the-struct_91)"
"(expand-context/outer-only-immediate?"
" the-struct_91)"
"(expand-context/outer-need-eventually-defined"
" the-struct_91)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_91)"
"(expand-context/outer-name"
" the-struct_91)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                        \"expand-context/outer?\""
" the-struct_91))))"
" rest-bodys_0"
" done-bodys_0"
" val-idss_0"
" val-keyss_0"
" val-rhss_0"
" track-stxs_0"
"(cons"
" ids_30"
" trans-idss_1)"
" new-dups_1))))))))))))"
"(let-values()"
"(if stratified?_0"
"(let-values()"
"(loop_170"
" body-ctx_2"
" null"
"(append"
"(reverse$1 rest-bodys_0)"
"(cons exp-body_0 done-bodys_0))"
" val-idss_0"
" val-keyss_0"
" val-rhss_0"
" track-stxs_0"
" trans-idss_1"
" dups_0))"
"(let-values()"
"(loop_170"
" body-ctx_2"
" rest-bodys_0"
"(cons exp-body_0 done-bodys_0)"
" val-idss_0"
" val-keyss_0"
" val-rhss_0"
" track-stxs_0"
" trans-idss_1"
" dups_0)))))))))))))))))"
" loop_170)"
" body-ctx_0"
" init-bodys_0"
" null"
" null"
" null"
" null"
" null"
" null"
"(make-check-no-duplicate-table)))))))))))))))))))"
"(define-values"
"(finish-expanding-body26.1)"
"(lambda(disappeared-transformer-bindings13_0"
" name12_0"
" source10_0"
" stratified?11_0"
" body-ctx18_0"
" frame-id19_0"
" def-ctx-scopes20_0"
" val-idss21_0"
" val-keyss22_0"
" val-rhss23_0"
" track-stxs24_0"
" done-bodys25_0)"
"(let-values(((body-ctx_3) body-ctx18_0))"
"(let-values(((frame-id_13) frame-id19_0))"
"(let-values(((def-ctx-scopes_7) def-ctx-scopes20_0))"
"(let-values(((val-idss_1) val-idss21_0))"
"(let-values(((val-keyss_1) val-keyss22_0))"
"(let-values(((val-rhss_1) val-rhss23_0))"
"(let-values(((track-stxs_1) track-stxs24_0))"
"(let-values(((done-bodys_1) done-bodys25_0))"
"(let-values(((s_436) source10_0))"
"(let-values(((stratified?_1) stratified?11_0))"
"(let-values(((name_78) name12_0))"
"(let-values(((disappeared-transformer-bindings_0) disappeared-transformer-bindings13_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(null? done-bodys_1)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                   \"no expression after a sequence of internal definitions\""
" s_436))"
"(void))"
"(values))))"
"(let-values(((finish-ctx_0)"
"(let-values(((v_246)"
"(accumulate-def-ctx-scopes body-ctx_3 def-ctx-scopes_7)))"
"(let-values(((the-struct_92) v_246))"
"(if(expand-context/outer? the-struct_92)"
"(let-values(((context123_0) 'expression)"
"((use-site-scopes124_0)(box null))"
"((scopes125_0)"
"(append"
"(unbox"
"(root-expand-context-use-site-scopes body-ctx_3))"
"(expand-context-scopes body-ctx_3)))"
"((only-immediate?126_0) #f)"
"((def-ctx-scopes127_0) #f)"
"((post-expansion-scope128_0) #f)"
"((inner129_0)(root-expand-context/outer-inner v_246)))"
"(expand-context/outer1.1"
" inner129_0"
" post-expansion-scope128_0"
" use-site-scopes124_0"
"(root-expand-context/outer-frame-id the-struct_92)"
" context123_0"
"(expand-context/outer-env the-struct_92)"
"(expand-context/outer-post-expansion-scope-action the-struct_92)"
" scopes125_0"
" def-ctx-scopes127_0"
"(expand-context/outer-binding-layer the-struct_92)"
"(expand-context/outer-reference-records the-struct_92)"
" only-immediate?126_0"
"(expand-context/outer-need-eventually-defined the-struct_92)"
"(expand-context/outer-current-introduction-scopes the-struct_92)"
"(expand-context/outer-name the-struct_92)))"
"(raise-argument-error"
" 'struct-copy"
"                                                     \"expand-context/outer?\""
" the-struct_92))))))"
"(let-values(((finish-bodys_0)"
"(lambda()"
"(let-values(((block->list?_0)(null? val-idss_1)))"
"(let-values((()"
"(begin"
"(if block->list?_0"
"(void)"
"(let-values()"
"(let-values(((obs_50)"
"(expand-context-observer"
" body-ctx_3)))"
"(if obs_50"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_50"
" 'next-group)))"
"(void)))))"
"(values))))"
"(let-values((()"
"(begin"
"(if block->list?_0"
"(void)"
"(let-values()"
"(let-values(((obs_51)"
"(expand-context-observer"
" body-ctx_3)))"
"(if obs_51"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_51"
" 'prim-begin)))"
"(void)))))"
"(values))))"
"(let-values(((last-i_1)(sub1(length done-bodys_1))))"
"(let-values((()"
"(begin"
"(let-values(((obs_52)"
"(expand-context-observer"
" body-ctx_3)))"
"(if obs_52"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_52"
" 'enter-list"
" done-bodys_1)))"
"(void)))"
"(values))))"
"(let-values(((exp-bodys_0)"
"(let-values(((lst_314) done-bodys_1)"
"((start_52) 0))"
"(begin"
"(check-list lst_314)"
"(check-naturals start_52)"
"((letrec-values(((for-loop_265)"
"(lambda(lst_158"
" pos_121)"
"(if(if(pair?"
" lst_158)"
" #t"
" #f)"
"(let-values(((done-body_4)"
"(unsafe-car"
" lst_158))"
"((rest_181)"
"(unsafe-cdr"
" lst_158))"
"((i_179)"
" pos_121))"
"(let-values(((post-guard-var_45)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_45)"
"(let-values()"
"(let-values()"
"(begin"
"(let-values(((obs_53)"
"(expand-context-observer"
" body-ctx_3)))"
"(if obs_53"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_53"
" 'next)))"
"(void)))"
"(let-values(((done-body130_0)"
" done-body_4)"
"((temp131_2)"
"(if(if name_78"
"(="
" i_179"
" last-i_1)"
" #f)"
"(let-values(((v_168)"
" finish-ctx_0))"
"(let-values(((the-struct_93)"
" v_168))"
"(if(expand-context/outer?"
" the-struct_93)"
"(let-values(((name132_0)"
" name_78)"
"((inner133_0)"
"(root-expand-context/outer-inner"
" v_168)))"
"(expand-context/outer1.1"
" inner133_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_93)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_93)"
"(root-expand-context/outer-frame-id"
" the-struct_93)"
"(expand-context/outer-context"
" the-struct_93)"
"(expand-context/outer-env"
" the-struct_93)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_93)"
"(expand-context/outer-scopes"
" the-struct_93)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_93)"
"(expand-context/outer-binding-layer"
" the-struct_93)"
"(expand-context/outer-reference-records"
" the-struct_93)"
"(expand-context/outer-only-immediate?"
" the-struct_93)"
"(expand-context/outer-need-eventually-defined"
" the-struct_93)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_93)"
" name132_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                     \"expand-context/outer?\""
" the-struct_93))))"
" finish-ctx_0)))"
"(expand5.1"
" #f"
" #f"
" done-body130_0"
" temp131_2)))))))"
"(let-values(((result_180)"
"(if(post-guard-var_45)"
"(for-loop_265"
" rest_181"
"(+"
" pos_121"
" 1))"
" null)))"
"(cons"
" elem_45"
" result_180))))))"
" null))))"
" for-loop_265)"
" lst_314"
" start_52)))))"
"(begin"
"(let-values(((obs_54)"
"(expand-context-observer body-ctx_3)))"
"(if obs_54"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_54"
" 'exit-list"
" exp-bodys_0)))"
"(void)))"
"(reference-record-clear! frame-id_13)"
" exp-bodys_0))))))))))"
"(if(if(null? val-idss_1)(null? disappeared-transformer-bindings_0) #f)"
"(let-values()(finish-bodys_0))"
"(let-values()"
"(let-values(((exp-s_11)"
"(let-values(((temp138_1)(not stratified?_1))"
"((frame-id139_0) frame-id_13)"
"((finish-ctx140_0) finish-ctx_0)"
"((s141_0) s_436)"
"((finish-bodys142_0) finish-bodys_0)"
"((temp143_0) #f))"
"(expand-and-split-bindings-by-reference45.1"
" finish-ctx140_0"
" frame-id139_0"
" finish-bodys142_0"
" s141_0"
" temp138_1"
" temp143_0"
" val-idss_1"
" val-keyss_1"
" val-rhss_1"
" track-stxs_1))))"
"(if(expand-context-to-parsed? body-ctx_3)"
"(list exp-s_11)"
"(list"
"(attach-disappeared-transformer-bindings"
" exp-s_11"
" disappeared-transformer-bindings_0))))))))))))))))))))))))"
"(define-values"
"(expand-and-split-bindings-by-reference45.1)"
"(lambda(ctx31_0"
" frame-id30_1"
" get-body33_0"
" source32_0"
" split?29_0"
" track?34_0"
" idss41_0"
" keyss42_0"
" rhss43_0"
" track-stxs44_0)"
"(let-values(((idss_1) idss41_0))"
"(let-values(((keyss_0) keyss42_0))"
"(let-values(((rhss_1) rhss43_0))"
"(let-values(((track-stxs_2) track-stxs44_0))"
"(let-values(((split?_0) split?29_0))"
"(let-values(((frame-id_14) frame-id30_1))"
"(let-values(((ctx_71) ctx31_0))"
"(let-values(((s_467) source32_0))"
"(let-values(((get-body_0) get-body33_0))"
"(let-values(((track?_1) track?34_0))"
"(let-values()"
"(let-values(((phase_142)(expand-context-phase ctx_71)))"
"((letrec-values(((loop_171)"
"(lambda(idss_2"
" keyss_1"
" rhss_2"
" track-stxs_3"
" accum-idss_0"
" accum-keyss_0"
" accum-rhss_0"
" accum-track-stxs_0"
" track?_2"
" get-list?_0)"
"(if(null? idss_2)"
"(let-values()"
"(if(if(null? accum-idss_0) get-list?_0 #f)"
"(let-values()(get-body_0))"
"(let-values()"
"(let-values(((exp-body_1)(get-body_0)))"
"(let-values(((result-s_9)"
"(if(expand-context-to-parsed? ctx_71)"
"(if(null? accum-idss_0)"
"(parsed-let-values17.1"
"(keep-properties-only s_467)"
" null"
" null"
" exp-body_1)"
"(parsed-letrec-values18.1"
"(keep-properties-only s_467)"
"(reverse$1 accum-idss_0)"
"(reverse$1"
"(map2 list accum-keyss_0 accum-rhss_0))"
" exp-body_1))"
"(let-values(((track?144_0) track?_2)"
"((s145_0) s_467)"
"((temp146_1)"
"(list*"
"(if(null? accum-idss_0)"
"(core-id"
" 'let-values"
" phase_142)"
"(core-id"
" 'letrec-values"
" phase_142))"
"(build-clauses"
" accum-idss_0"
" accum-rhss_0"
" accum-track-stxs_0)"
" exp-body_1)))"
"(rebuild66.1"
" track?144_0"
" #t"
" s145_0"
" temp146_1)))))"
"(begin"
"(if track?_2"
"(let-values()"
"(let-values(((obs_55)"
"(expand-context-observer ctx_71)))"
"(if obs_55"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_55 'tag result-s_9)))"
"(void))))"
"(void))"
"(if get-list?_0(list result-s_9) result-s_9)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_56)"
"(expand-context-observer ctx_71)))"
"(if obs_56"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_56 'next)))"
"(void)))"
"(values))))"
"(let-values(((ids_31)(car idss_2)))"
"(let-values(((expanded-rhs_0)"
"(let-values(((temp147_1)(car rhss_2))"
"((temp148_1)"
"(as-named-context ctx_71 ids_31)))"
"(expand5.1 #f #f temp147_1 temp148_1))))"
"(let-values(((track-stx_0)(car track-stxs_3)))"
"(let-values(((local-or-forward-references?_0)"
"(reference-record-forward-references?"
" frame-id_14)))"
"(let-values((()"
"(begin"
"(reference-record-bound!"
" frame-id_14"
"(car keyss_1))"
"(values))))"
"(let-values(((forward-references?_0)"
"(reference-record-forward-references?"
" frame-id_14)))"
"(if(if(not local-or-forward-references?_0)"
" split?_0"
" #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(null? accum-idss_0)"
"(void)"
"(let-values()"
"(error"
"                                                                                           \"internal error: accumulated ids not empty\")))"
"(values))))"
"(let-values(((exp-rest_0)"
"(loop_171"
"(cdr idss_2)"
"(cdr keyss_1)"
"(cdr rhss_2)"
"(cdr track-stxs_3)"
" null"
" null"
" null"
" null"
" #f"
" #t)))"
"((if get-list?_0 list values)"
"(if(expand-context-to-parsed? ctx_71)"
"(parsed-let-values17.1"
"(keep-properties-only s_467)"
"(list ids_31)"
"(list(list(car keyss_1) expanded-rhs_0))"
" exp-rest_0)"
"(let-values(((track?149_0) track?_2)"
"((s150_0) s_467)"
"((temp151_1)"
"(list*"
"(core-id"
" 'let-values"
" phase_142)"
"(list"
"(build-clause"
" ids_31"
" expanded-rhs_0"
" track-stx_0))"
" exp-rest_0)))"
"(rebuild66.1"
" track?149_0"
" #t"
" s150_0"
" temp151_1)))))))"
"(if(if(not forward-references?_0)"
"(let-values(((or-part_328) split?_0))"
"(if or-part_328"
" or-part_328"
"(null?(cdr idss_2))))"
" #f)"
"(let-values()"
"(let-values(((exp-rest_1)"
"(loop_171"
"(cdr idss_2)"
"(cdr keyss_1)"
"(cdr rhss_2)"
"(cdr track-stxs_3)"
" null"
" null"
" null"
" null"
" #f"
" #t)))"
"((if get-list?_0 list values)"
"(if(expand-context-to-parsed? ctx_71)"
"(parsed-letrec-values18.1"
"(keep-properties-only s_467)"
"(reverse$1(cons ids_31 accum-idss_0))"
"(reverse$1"
"(cons"
"(list(car keyss_1) expanded-rhs_0)"
"(map2 list accum-keyss_0 accum-rhss_0)))"
" exp-rest_1)"
"(let-values(((track?152_0) track?_2)"
"((s153_0) s_467)"
"((temp154_1)"
"(list*"
"(core-id"
" 'letrec-values"
" phase_142)"
"(build-clauses"
"(cons ids_31 accum-idss_0)"
"(cons"
" expanded-rhs_0"
" accum-rhss_0)"
"(cons"
" track-stx_0"
" accum-track-stxs_0))"
" exp-rest_1)))"
"(rebuild66.1"
" track?152_0"
" #t"
" s153_0"
" temp154_1))))))"
"(let-values()"
"(loop_171"
"(cdr idss_2)"
"(cdr keyss_1)"
"(cdr rhss_2)"
"(cdr track-stxs_3)"
"(cons ids_31 accum-idss_0)"
"(cons(car keyss_1) accum-keyss_0)"
"(cons expanded-rhs_0 accum-rhss_0)"
"(cons track-stx_0 accum-track-stxs_0)"
" track?_2"
" get-list?_0))))))))))))))))"
" loop_171)"
" idss_1"
" keyss_0"
" rhss_1"
" track-stxs_2"
" null"
" null"
" null"
" null"
" track?_1"
" #f)))))))))))))))"
"(define-values"
"(build-clauses)"
"(lambda(accum-idss_1 accum-rhss_1 accum-track-stxs_1)"
"(map2 build-clause(reverse$1 accum-idss_1)(reverse$1 accum-rhss_1)(reverse$1 accum-track-stxs_1))))"
"(define-values"
"(build-clause)"
"(lambda(ids_32 rhs_19 track-stx_1)"
"(let-values(((clause_2)(datum->syntax$1 #f(list ids_32 rhs_19))))"
"(if track-stx_1(syntax-track-origin$1 clause_2 track-stx_1) clause_2))))"
"(define-values"
"(no-binds)"
"(lambda(expr_10 s_468 phase_143)"
"(let-values(((s-runtime-stx_0)(syntax-shift-phase-level$1 runtime-stx phase_143)))"
"(datum->syntax$1"
" #f"
"(list"
"(core-id 'begin phase_143)"
" expr_10"
"(list(core-id '#%app phase_143)(datum->syntax$1 s-runtime-stx_0 'values)))"
" s_468))))"
"(define-values"
"(lambda-clause-expander)"
"(lambda(s_73 disarmed-s_4 formals_1 bodys_9 ctx_72 log-renames-tag_0)"
"(let-values(((sc_29)(new-scope 'local)))"
"(let-values(((phase_64)(expand-context-phase ctx_72)))"
"(let-values(((ids_33)(parse-and-flatten-formals formals_1 sc_29 disarmed-s_4)))"
"(let-values((()"
"(begin"
"                          (let-values (((temp37_4) \"argument name\"))"
"(check-no-duplicate-ids8.1 temp37_4 #t ids_33 phase_64 s_73 #f #f))"
"(values))))"
"(let-values(((counter_7)(root-expand-context-counter ctx_72)))"
"(let-values(((keys_8)"
"(let-values(((lst_315) ids_33))"
"(begin"
"(check-list lst_315)"
"((letrec-values(((for-loop_266)"
"(lambda(lst_78)"
"(if(pair? lst_78)"
"(let-values(((id_5)(unsafe-car lst_78))"
"((rest_182)(unsafe-cdr lst_78)))"
"(let-values(((post-guard-var_92)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_87)"
"(let-values()"
"(let-values()"
"(let-values(((s41_1) s_73))"
"(add-local-binding!35.1"
" #f"
" #f"
" s41_1"
" #t"
" id_5"
" phase_64"
" counter_7))))))"
"(let-values(((result_181)"
"(if(post-guard-var_92)"
"(for-loop_266 rest_182)"
" null)))"
"(cons elem_87 result_181))))))"
" null))))"
" for-loop_266)"
" lst_315)))))"
"(let-values(((body-env_0)"
"(let-values(((lst_239) keys_8)((lst_290) ids_33))"
"(begin"
"(check-list lst_239)"
"(check-list lst_290)"
"((letrec-values(((for-loop_206)"
"(lambda(env_25 lst_241 lst_84)"
"(if(if(pair? lst_241)(pair? lst_84) #f)"
"(let-values(((key_87)(unsafe-car lst_241))"
"((rest_138)(unsafe-cdr lst_241))"
"((id_111)(unsafe-car lst_84))"
"((rest_61)(unsafe-cdr lst_84)))"
"(let-values(((env_26)"
"(let-values(((env_27) env_25))"
"(let-values(((env_28)"
"(let-values()"
"(env-extend"
" env_27"
" key_87"
"(local-variable1.1"
" id_111)))))"
"(values env_28)))))"
"(if(not #f)"
"(for-loop_206 env_26 rest_138 rest_61)"
" env_26)))"
" env_25))))"
" for-loop_206)"
"(expand-context-env ctx_72)"
" lst_239"
" lst_290)))))"
"(let-values(((sc-formals_0)(add-scope formals_1 sc_29)))"
"(let-values(((sc-bodys_0)"
"(let-values(((lst_251) bodys_9))"
"(begin"
"(check-list lst_251)"
"((letrec-values(((for-loop_267)"
"(lambda(lst_23)"
"(if(pair? lst_23)"
"(let-values(((body_10)(unsafe-car lst_23))"
"((rest_163)(unsafe-cdr lst_23)))"
"(let-values(((post-guard-var_93)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_88)"
"(let-values()"
"(let-values()"
"(add-scope body_10 sc_29)))))"
"(let-values(((result_6)"
"(if(post-guard-var_93)"
"(for-loop_267 rest_163)"
" null)))"
"(cons elem_88 result_6))))))"
" null))))"
" for-loop_267)"
" lst_251)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_57)(expand-context-observer ctx_72)))"
"(if obs_57"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_57"
" log-renames-tag_0"
" sc-formals_0"
"(datum->syntax$1 #f sc-bodys_0))))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_4)"
"(let-values(((v_83) ctx_72))"
"(let-values(((the-struct_94) v_83))"
"(if(expand-context/outer? the-struct_94)"
"(let-values(((env42_0) body-env_0)"
"((scopes43_0)(cons sc_29(expand-context-scopes ctx_72)))"
"((binding-layer44_0)"
"(increment-binding-layer ids_33 ctx_72 sc_29))"
"((frame-id45_0) #f)"
"((inner46_1)(root-expand-context/outer-inner v_83)))"
"(expand-context/outer1.1"
" inner46_1"
"(root-expand-context/outer-post-expansion-scope the-struct_94)"
"(root-expand-context/outer-use-site-scopes the-struct_94)"
" frame-id45_0"
"(expand-context/outer-context the-struct_94)"
" env42_0"
"(expand-context/outer-post-expansion-scope-action the-struct_94)"
" scopes43_0"
"(expand-context/outer-def-ctx-scopes the-struct_94)"
" binding-layer44_0"
"(expand-context/outer-reference-records the-struct_94)"
"(expand-context/outer-only-immediate? the-struct_94)"
"(expand-context/outer-need-eventually-defined the-struct_94)"
"(expand-context/outer-current-introduction-scopes the-struct_94)"
"(expand-context/outer-name the-struct_94)))"
"(raise-argument-error"
" 'struct-copy"
"                                             \"expand-context/outer?\""
" the-struct_94))))))"
"(let-values(((exp-body_2)"
"(let-values(((temp49_4)"
"(let-values(((temp52_5) #t))"
"(keep-as-needed59.1 #f #f temp52_5 #t #f #f ctx_72 s_73))))"
"(expand-body7.1 temp49_4 #f #f sc-bodys_0 body-ctx_4))))"
"(values"
"(if(expand-context-to-parsed? ctx_72)"
"(unflatten-like-formals keys_8 formals_1)"
" sc-formals_0)"
" exp-body_2)))))))))))))))"
"(define-values"
"(make-expand-lambda)"
"(lambda(get-lambda_0)"
"(lambda(s_174 ctx_73)"
"(let-values((()"
"(begin"
"(let-values(((obs_58)(expand-context-observer ctx_73)))"
"(if obs_58(let-values()(let-values()(call-expand-observe obs_58 'prim-lambda)))(void)))"
"(values))))"
"(let-values(((disarmed-s_5)(syntax-disarm$1 s_174)))"
"(let-values(((ok?_32 lambda53_0 formals54_0 body55_0)"
"(let-values(((s_21) disarmed-s_5))"
"(let-values(((orig-s_38) s_21))"
"(let-values(((lambda53_1 formals54_1 body55_1)"
"(let-values(((s_469)(if(syntax?$1 s_21)(syntax-e$1 s_21) s_21)))"
"(if(pair? s_469)"
"(let-values(((lambda56_0)(let-values(((s_387)(car s_469))) s_387))"
"((formals57_0 body58_0)"
"(let-values(((s_162)(cdr s_469)))"
"(let-values(((s_470)"
"(if(syntax?$1 s_162)"
"(syntax-e$1 s_162)"
" s_162)))"
"(if(pair? s_470)"
"(let-values(((formals59_0)"
"(let-values(((s_164)(car s_470)))"
" s_164))"
"((body60_0)"
"(let-values(((s_446)(cdr s_470)))"
"(let-values(((s_471)"
"(if(syntax?$1 s_446)"
"(syntax-e$1 s_446)"
" s_446)))"
"(let-values(((flat-s_25)"
"(to-syntax-list.1"
" s_471)))"
"(if(not flat-s_25)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_38))"
"(if(null? flat-s_25)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_38))"
"(let-values()"
" flat-s_25))))))))"
"(values formals59_0 body60_0))"
"                                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_38))))))"
"(values lambda56_0 formals57_0 body58_0))"
"                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_38)))))"
"(values #t lambda53_1 formals54_1 body55_1))))))"
"(let-values(((rebuild-s_4)"
"(let-values(((temp63_5) #t))(keep-as-needed59.1 #f #f #f #f temp63_5 #t ctx_73 s_174))))"
"(let-values(((formals_2 body_11)"
"(lambda-clause-expander s_174 disarmed-s_5 formals54_0 body55_0 ctx_73 'lambda-renames)))"
"(if(expand-context-to-parsed? ctx_73)"
"(parsed-lambda5.1 rebuild-s_4 formals_2 body_11)"
"(let-values(((rebuild-s64_0) rebuild-s_4)"
"((temp65_7)(list*(get-lambda_0 ctx_73 lambda53_0) formals_2 body_11)))"
"(rebuild66.1 #f #f rebuild-s64_0 temp65_7)))))))))))"
"(call-with-values"
"(lambda()(add-core-form! 'lambda(make-expand-lambda(lambda(ctx_11 lam-id_0) lam-id_0))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'λ"
"(make-expand-lambda"
"(lambda(ctx_74 lam-id_1)"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase ctx_74))"
" 'lambda"
" lam-id_1"
" lam-id_1)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'case-lambda"
"(lambda(s_472 ctx_75)"
"(let-values((()"
"(begin"
"(let-values(((obs_59)(expand-context-observer ctx_75)))"
"(if obs_59"
"(let-values()(let-values()(call-expand-observe obs_59 'prim-case-lambda)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_6)(syntax-disarm$1 s_472)))"
"(let-values(((ok?_33 case-lambda66_0 formals67_0 body68_0)"
"(let-values(((s_32) disarmed-s_6))"
"(let-values(((orig-s_39) s_32))"
"(let-values(((case-lambda66_1 formals67_1 body68_1)"
"(let-values(((s_89)(if(syntax?$1 s_32)(syntax-e$1 s_32) s_32)))"
"(if(pair? s_89)"
"(let-values(((case-lambda69_0)"
"(let-values(((s_460)(car s_89))) s_460))"
"((formals70_0 body71_0)"
"(let-values(((s_473)(cdr s_89)))"
"(let-values(((s_198)"
"(if(syntax?$1 s_473)"
"(syntax-e$1 s_473)"
" s_473)))"
"(let-values(((flat-s_26)(to-syntax-list.1 s_198)))"
"(if(not flat-s_26)"
"(let-values()"
"                                                                       (raise-syntax-error$1 #f \"bad syntax\" orig-s_39))"
"(let-values()"
"(let-values(((formals_3 body_12)"
"(let-values(((lst_48) flat-s_26))"
"(begin"
"(check-list lst_48)"
"((letrec-values(((for-loop_69)"
"(lambda(formals_4"
" body_4"
" lst_223)"
"(if(pair?"
" lst_223)"
"(let-values(((s_202)"
"(unsafe-car"
" lst_223))"
"((rest_151)"
"(unsafe-cdr"
" lst_223)))"
"(let-values(((formals_5"
" body_13)"
"(let-values(((formals_6)"
" formals_4)"
"((body_14)"
" body_4))"
"(let-values(((formals_7"
" body_15)"
"(let-values()"
"(let-values(((formals78_0"
" body79_0)"
"(let-values()"
"(let-values(((s_203)"
"(if(syntax?$1"
" s_202)"
"(syntax-e$1"
" s_202)"
" s_202)))"
"(if(pair?"
" s_203)"
"(let-values(((formals72_0)"
"(let-values(((s_204)"
"(car"
" s_203)))"
" s_204))"
"((body73_0)"
"(let-values(((s_156)"
"(cdr"
" s_203)))"
"(let-values(((s_205)"
"(if(syntax?$1"
" s_156)"
"(syntax-e$1"
" s_156)"
" s_156)))"
"(let-values(((flat-s_27)"
"(to-syntax-list.1"
" s_205)))"
"(if(not"
" flat-s_27)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                              \"bad syntax\""
" orig-s_39))"
"(if(null?"
" flat-s_27)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                \"bad syntax\""
" orig-s_39))"
"(let-values()"
" flat-s_27))))))))"
"(values"
" formals72_0"
" body73_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                      \"bad syntax\""
" orig-s_39))))))"
"(values"
"(cons"
" formals78_0"
" formals_6)"
"(cons"
" body79_0"
" body_14))))))"
"(values"
" formals_7"
" body_15)))))"
"(if(not"
" #f)"
"(for-loop_69"
" formals_5"
" body_13"
" rest_151)"
"(values"
" formals_5"
" body_13))))"
"(values"
" formals_4"
" body_4)))))"
" for-loop_69)"
" null"
" null"
" lst_48)))))"
"(values"
"(reverse$1 formals_3)"
"(reverse$1 body_12))))))))))"
"(values case-lambda69_0 formals70_0 body71_0))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_39)))))"
"(values #t case-lambda66_1 formals67_1 body68_1))))))"
"(let-values(((ok?_34 case-lambda74_0 clause75_0)"
"(let-values(((s_380) disarmed-s_6))"
"(let-values(((orig-s_40) s_380))"
"(let-values(((case-lambda74_1 clause75_1)"
"(let-values(((s_382)(if(syntax?$1 s_380)(syntax-e$1 s_380) s_380)))"
"(if(pair? s_382)"
"(let-values(((case-lambda76_0)"
"(let-values(((s_50)(car s_382))) s_50))"
"((clause77_0)"
"(let-values(((s_35)(cdr s_382)))"
"(let-values(((s_51)"
"(if(syntax?$1 s_35)"
"(syntax-e$1 s_35)"
" s_35)))"
"(let-values(((flat-s_28)(to-syntax-list.1 s_51)))"
"(if(not flat-s_28)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_40))"
"(let-values() flat-s_28)))))))"
"(values case-lambda76_0 clause77_0))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_40)))))"
"(values #t case-lambda74_1 clause75_1))))))"
"(let-values(((rebuild-s_5)"
"(let-values(((temp82_3) #t))(keep-as-needed59.1 #f #f #f #f temp82_3 #t ctx_75 s_472))))"
"(let-values(((clauses_0)"
"(let-values(((lst_167) formals67_0)((lst_316) body68_0)((lst_317) clause75_0))"
"(begin"
"(check-list lst_167)"
"(check-list lst_316)"
"(check-list lst_317)"
"((letrec-values(((for-loop_268)"
"(lambda(lst_169 lst_142 lst_143)"
"(if(if(pair? lst_169)"
"(if(pair? lst_142)(pair? lst_143) #f)"
" #f)"
"(let-values(((formals_8)(unsafe-car lst_169))"
"((rest_90)(unsafe-cdr lst_169))"
"((body_16)(unsafe-car lst_142))"
"((rest_183)(unsafe-cdr lst_142))"
"((clause_3)(unsafe-car lst_143))"
"((rest_184)(unsafe-cdr lst_143)))"
"(let-values(((post-guard-var_94)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_89)"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_60)"
"(expand-context-observer"
" ctx_75)))"
"(if obs_60"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_60"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((rebuild-clause_0)"
"(let-values(((ctx83_0)"
" ctx_75)"
"((clause84_0)"
" clause_3))"
"(keep-as-needed59.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ctx83_0"
" clause84_0))))"
"(let-values(((exp-formals_0"
" exp-body_3)"
"(lambda-clause-expander"
" s_472"
" disarmed-s_6"
" formals_8"
" body_16"
" ctx_75"
" 'case-lambda-renames)))"
"(if(expand-context-to-parsed?"
" ctx_75)"
"(list exp-formals_0 exp-body_3)"
"(let-values(((rebuild-clause85_0)"
" rebuild-clause_0)"
"((temp86_4)"
"(list*"
" exp-formals_0"
" exp-body_3)))"
"(rebuild66.1"
" #f"
" #f"
" rebuild-clause85_0"
" temp86_4))))))))))"
"(let-values(((result_182)"
"(if(post-guard-var_94)"
"(for-loop_268"
" rest_90"
" rest_183"
" rest_184)"
" null)))"
"(cons elem_89 result_182))))))"
" null))))"
" for-loop_268)"
" lst_167"
" lst_316"
" lst_317)))))"
"(if(expand-context-to-parsed? ctx_75)"
"(parsed-case-lambda6.1 rebuild-s_5 clauses_0)"
"(let-values(((rebuild-s87_0) rebuild-s_5)((temp88_2)(list* case-lambda66_0 clauses_0)))"
"(rebuild66.1 #f #f rebuild-s87_0 temp88_2))))))))))))"
" print-values)"
"(define-values"
"(parse-and-flatten-formals)"
"(lambda(all-formals_0 sc_30 s_59)"
"((letrec-values(((loop_172)"
"(lambda(formals_9)"
"(if(identifier? formals_9)"
"(let-values()(list(add-scope formals_9 sc_30)))"
"(if(syntax?$1 formals_9)"
"(let-values()"
"(let-values(((p_66)(syntax-e$1 formals_9)))"
"(if(pair? p_66)"
"(let-values()(loop_172 p_66))"
"(if(null? p_66)"
"(let-values() null)"
"                                    (let-values () (raise-syntax-error$1 #f \"not an identifier\" s_59 p_66))))))"
"(if(pair? formals_9)"
"(let-values()"
"(begin"
"(if(identifier?(car formals_9))"
"(void)"
"                                    (let-values () (raise-syntax-error$1 #f \"not an identifier\" s_59 (car formals_9))))"
"(cons(add-scope(car formals_9) sc_30)(loop_172(cdr formals_9)))))"
"(if(null? formals_9)"
"(let-values() null)"
"                                (let-values () (raise-syntax-error$1 \"bad argument sequence\" s_59 all-formals_0)))))))))"
" loop_172)"
" all-formals_0)))"
"(define-values"
"(unflatten-like-formals)"
"(lambda(keys_9 formals_10)"
"((letrec-values(((loop_173)"
"(lambda(keys_10 formals_11)"
"(if(null? formals_11)"
"(let-values() null)"
"(if(pair? formals_11)"
"(let-values()(cons(car keys_10)(loop_173(cdr keys_10)(cdr formals_11))))"
"(if(syntax?$1 formals_11)"
"(let-values()(loop_173 keys_10(syntax-e$1 formals_11)))"
"(let-values()(car keys_10))))))))"
" loop_173)"
" keys_9"
" formals_10)))"
"(define-values"
"(make-let-values-form11.1)"
"(lambda(log-tag1_0"
" rec?3_0"
" rec?8_0"
" renames-log-tag5_0"
" renames-log-tag10_0"
" split-by-reference?4_0"
" split-by-reference?9_0"
" syntaxes?2_0"
" syntaxes?7_0)"
"(let-values(((log-tag_0) log-tag1_0))"
"(let-values(((syntaxes?_0)(if syntaxes?7_0 syntaxes?2_0 #f)))"
"(let-values(((rec?_1)(if rec?8_0 rec?3_0 #f)))"
"(let-values(((split-by-reference?_0)(if split-by-reference?9_0 split-by-reference?4_0 #f)))"
"(let-values(((renames-log-tag_0)(if renames-log-tag10_0 renames-log-tag5_0 'let-renames)))"
"(let-values()"
"(lambda(s_150 ctx_76)"
"(let-values((()"
"(begin"
"(let-values(((obs_61)(expand-context-observer ctx_76)))"
"(if obs_61"
"(let-values()(let-values()(call-expand-observe obs_61 log-tag_0)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_7)(syntax-disarm$1 s_150)))"
"(let-values(((ok?_35"
" letrec-syntaxes+values89_0"
" id:trans90_0"
" trans-rhs91_0"
" id:val92_0"
" val-rhs93_0"
" body94_0)"
"(let-values(((s_98) disarmed-s_7))"
"(if(if syntaxes?_0 #t #f)"
"(let-values(((orig-s_41) s_98))"
"(let-values(((letrec-syntaxes+values89_1"
" id:trans90_1"
" trans-rhs91_1"
" id:val92_1"
" val-rhs93_1"
" body94_1)"
"(let-values(((s_309)"
"(if(syntax?$1 s_98)(syntax-e$1 s_98) s_98)))"
"(if(pair? s_309)"
"(let-values(((letrec-syntaxes+values95_0)"
"(let-values(((s_474)(car s_309))) s_474))"
"((id:trans96_0"
" trans-rhs97_0"
" id:val98_0"
" val-rhs99_0"
" body100_0)"
"(let-values(((s_414)(cdr s_309)))"
"(let-values(((s_105)"
"(if(syntax?$1 s_414)"
"(syntax-e$1 s_414)"
" s_414)))"
"(if(pair? s_105)"
"(let-values(((id:trans101_0"
" trans-rhs102_0)"
"(let-values(((s_415)"
"(car"
" s_105)))"
"(let-values(((s_110)"
"(if(syntax?$1"
" s_415)"
"(syntax-e$1"
" s_415)"
" s_415)))"
"(let-values(((flat-s_29)"
"(to-syntax-list.1"
" s_110)))"
"(if(not flat-s_29)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_41))"
"(let-values()"
"(let-values(((id:trans_0"
" trans-rhs_0)"
"(let-values(((lst_318)"
" flat-s_29))"
"(begin"
"(check-list"
" lst_318)"
"((letrec-values(((for-loop_269)"
"(lambda(id:trans_1"
" trans-rhs_1"
" lst_319)"
"(if(pair?"
" lst_319)"
"(let-values(((s_113)"
"(unsafe-car"
" lst_319))"
"((rest_185)"
"(unsafe-cdr"
" lst_319)))"
"(let-values(((id:trans_2"
" trans-rhs_2)"
"(let-values(((id:trans_3)"
" id:trans_1)"
"((trans-rhs_3)"
" trans-rhs_1))"
"(let-values(((id:trans_4"
" trans-rhs_4)"
"(let-values()"
"(let-values(((id:trans132_0"
" trans-rhs133_0)"
"(let-values()"
"(let-values(((s_116)"
"(if(syntax?$1"
" s_113)"
"(syntax-e$1"
" s_113)"
" s_113)))"
"(if(pair?"
" s_116)"
"(let-values(((id:trans106_0)"
"(let-values(((s_220)"
"(car"
" s_116)))"
"(let-values(((s_313)"
"(if(syntax?$1"
" s_220)"
"(syntax-e$1"
" s_220)"
" s_220)))"
"(let-values(((flat-s_30)"
"(to-syntax-list.1"
" s_313)))"
"(if(not"
" flat-s_30)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_41))"
"(let-values()"
"(let-values(((id:trans_5)"
"(let-values(((lst_320)"
" flat-s_30))"
"(begin"
"(check-list"
" lst_320)"
"((letrec-values(((for-loop_270)"
"(lambda(id:trans_6"
" lst_321)"
"(if(pair?"
" lst_321)"
"(let-values(((s_475)"
"(unsafe-car"
" lst_321))"
"((rest_186)"
"(unsafe-cdr"
" lst_321)))"
"(let-values(((id:trans_7)"
"(let-values(((id:trans_8)"
" id:trans_6))"
"(let-values(((id:trans_9)"
"(let-values()"
"(let-values(((id:trans134_0)"
"(let-values()"
"(if(let-values(((or-part_329)"
"(if(syntax?$1"
" s_475)"
"(symbol?"
"(syntax-e$1"
" s_475))"
" #f)))"
"(if or-part_329"
" or-part_329"
"(symbol?"
" s_475)))"
" s_475"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_41"
" s_475)))))"
"(cons"
" id:trans134_0"
" id:trans_8)))))"
"(values"
" id:trans_9)))))"
"(if(not"
" #f)"
"(for-loop_270"
" id:trans_7"
" rest_186)"
" id:trans_7)))"
" id:trans_6))))"
" for-loop_270)"
" null"
" lst_320)))))"
"(reverse$1"
" id:trans_5))))))))"
"((trans-rhs107_0)"
"(let-values(((s_476)"
"(cdr"
" s_116)))"
"(let-values(((s_477)"
"(if(syntax?$1"
" s_476)"
"(syntax-e$1"
" s_476)"
" s_476)))"
"(if(pair?"
" s_477)"
"(let-values(((trans-rhs108_0)"
"(let-values(((s_120)"
"(car"
" s_477)))"
" s_120))"
"(()"
"(let-values(((s_478)"
"(cdr"
" s_477)))"
"(let-values(((s_479)"
"(if(syntax?$1"
" s_478)"
"(syntax-e$1"
" s_478)"
" s_478)))"
"(if(null?"
" s_479)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_41))))))"
"(values"
" trans-rhs108_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_41))))))"
"(values"
" id:trans106_0"
" trans-rhs107_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_41))))))"
"(values"
"(cons"
" id:trans132_0"
" id:trans_3)"
"(cons"
" trans-rhs133_0"
" trans-rhs_3))))))"
"(values"
" id:trans_4"
" trans-rhs_4)))))"
"(if(not"
" #f)"
"(for-loop_269"
" id:trans_2"
" trans-rhs_2"
" rest_185)"
"(values"
" id:trans_2"
" trans-rhs_2))))"
"(values"
" id:trans_1"
" trans-rhs_1)))))"
" for-loop_269)"
" null"
" null"
" lst_318)))))"
"(values"
"(reverse$1"
" id:trans_0)"
"(reverse$1"
" trans-rhs_0)))))))))"
"((id:val103_0"
" val-rhs104_0"
" body105_0)"
"(let-values(((s_480)"
"(cdr"
" s_105)))"
"(let-values(((s_121)"
"(if(syntax?$1"
" s_480)"
"(syntax-e$1"
" s_480)"
" s_480)))"
"(if(pair? s_121)"
"(let-values(((id:val109_0"
" val-rhs110_0)"
"(let-values(((s_481)"
"(car"
" s_121)))"
"(let-values(((s_436)"
"(if(syntax?$1"
" s_481)"
"(syntax-e$1"
" s_481)"
" s_481)))"
"(let-values(((flat-s_31)"
"(to-syntax-list.1"
" s_436)))"
"(if(not"
" flat-s_31)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_41))"
"(let-values()"
"(let-values(((id:val_0"
" val-rhs_0)"
"(let-values(((lst_322)"
" flat-s_31))"
"(begin"
"(check-list"
" lst_322)"
"((letrec-values(((for-loop_271)"
"(lambda(id:val_1"
" val-rhs_1"
" lst_323)"
"(if(pair?"
" lst_323)"
"(let-values(((s_482)"
"(unsafe-car"
" lst_323))"
"((rest_187)"
"(unsafe-cdr"
" lst_323)))"
"(let-values(((id:val_2"
" val-rhs_2)"
"(let-values(((id:val_3)"
" id:val_1)"
"((val-rhs_3)"
" val-rhs_1))"
"(let-values(((id:val_4"
" val-rhs_4)"
"(let-values()"
"(let-values(((id:val135_0"
" val-rhs136_0)"
"(let-values()"
"(let-values(((s_221)"
"(if(syntax?$1"
" s_482)"
"(syntax-e$1"
" s_482)"
" s_482)))"
"(if(pair?"
" s_221)"
"(let-values(((id:val112_0)"
"(let-values(((s_224)"
"(car"
" s_221)))"
"(let-values(((s_225)"
"(if(syntax?$1"
" s_224)"
"(syntax-e$1"
" s_224)"
" s_224)))"
"(let-values(((flat-s_32)"
"(to-syntax-list.1"
" s_225)))"
"(if(not"
" flat-s_32)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_41))"
"(let-values()"
"(let-values(((id:val_5)"
"(let-values(((lst_159)"
" flat-s_32))"
"(begin"
"(check-list"
" lst_159)"
"((letrec-values(((for-loop_239)"
"(lambda(id:val_6"
" lst_324)"
"(if(pair?"
" lst_324)"
"(let-values(((s_231)"
"(unsafe-car"
" lst_324))"
"((rest_188)"
"(unsafe-cdr"
" lst_324)))"
"(let-values(((id:val_7)"
"(let-values(((id:val_8)"
" id:val_6))"
"(let-values(((id:val_9)"
"(let-values()"
"(let-values(((id:val137_0)"
"(let-values()"
"(if(let-values(((or-part_330)"
"(if(syntax?$1"
" s_231)"
"(symbol?"
"(syntax-e$1"
" s_231))"
" #f)))"
"(if or-part_330"
" or-part_330"
"(symbol?"
" s_231)))"
" s_231"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_41"
" s_231)))))"
"(cons"
" id:val137_0"
" id:val_8)))))"
"(values"
" id:val_9)))))"
"(if(not"
" #f)"
"(for-loop_239"
" id:val_7"
" rest_188)"
" id:val_7)))"
" id:val_6))))"
" for-loop_239)"
" null"
" lst_159)))))"
"(reverse$1"
" id:val_5))))))))"
"((val-rhs113_0)"
"(let-values(((s_237)"
"(cdr"
" s_221)))"
"(let-values(((s_238)"
"(if(syntax?$1"
" s_237)"
"(syntax-e$1"
" s_237)"
" s_237)))"
"(if(pair?"
" s_238)"
"(let-values(((val-rhs114_0)"
"(let-values(((s_240)"
"(car"
" s_238)))"
" s_240))"
"(()"
"(let-values(((s_241)"
"(cdr"
" s_238)))"
"(let-values(((s_437)"
"(if(syntax?$1"
" s_241)"
"(syntax-e$1"
" s_241)"
" s_241)))"
"(if(null?"
" s_437)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_41))))))"
"(values"
" val-rhs114_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_41))))))"
"(values"
" id:val112_0"
" val-rhs113_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_41))))))"
"(values"
"(cons"
" id:val135_0"
" id:val_3)"
"(cons"
" val-rhs136_0"
" val-rhs_3))))))"
"(values"
" id:val_4"
" val-rhs_4)))))"
"(if(not"
" #f)"
"(for-loop_271"
" id:val_2"
" val-rhs_2"
" rest_187)"
"(values"
" id:val_2"
" val-rhs_2))))"
"(values"
" id:val_1"
" val-rhs_1)))))"
" for-loop_271)"
" null"
" null"
" lst_322)))))"
"(values"
"(reverse$1"
" id:val_0)"
"(reverse$1"
" val-rhs_0)))))))))"
"((body111_0)"
"(let-values(((s_438)"
"(cdr"
" s_121)))"
"(let-values(((s_483)"
"(if(syntax?$1"
" s_438)"
"(syntax-e$1"
" s_438)"
" s_438)))"
"(let-values(((flat-s_33)"
"(to-syntax-list.1"
" s_483)))"
"(if(not"
" flat-s_33)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_41))"
"(if(null?"
" flat-s_33)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_41))"
"(let-values()"
" flat-s_33))))))))"
"(values"
" id:val109_0"
" val-rhs110_0"
" body111_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_41))))))"
"(values"
" id:trans101_0"
" trans-rhs102_0"
" id:val103_0"
" val-rhs104_0"
" body105_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                 \"bad syntax\""
" orig-s_41))))))"
"(values"
" letrec-syntaxes+values95_0"
" id:trans96_0"
" trans-rhs97_0"
" id:val98_0"
" val-rhs99_0"
" body100_0))"
"                                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_41)))))"
"(values"
" #t"
" letrec-syntaxes+values89_1"
" id:trans90_1"
" trans-rhs91_1"
" id:val92_1"
" val-rhs93_1"
" body94_1)))"
"(values #f #f #f #f #f #f #f)))))"
"(let-values(((ok?_36 let-values115_0 id:val116_0 val-rhs117_0 body118_0)"
"(let-values(((s_321) disarmed-s_7))"
"(if(if(not syntaxes?_0) #t #f)"
"(let-values(((orig-s_19) s_321))"
"(let-values(((let-values115_1 id:val116_1 val-rhs117_1 body118_1)"
"(let-values(((s_484)"
"(if(syntax?$1 s_321)"
"(syntax-e$1 s_321)"
" s_321)))"
"(if(pair? s_484)"
"(let-values(((let-values119_0)"
"(let-values(((s_323)(car s_484))) s_323))"
"((id:val120_0 val-rhs121_0 body122_0)"
"(let-values(((s_485)(cdr s_484)))"
"(let-values(((s_486)"
"(if(syntax?$1 s_485)"
"(syntax-e$1 s_485)"
" s_485)))"
"(if(pair? s_486)"
"(let-values(((id:val123_0"
" val-rhs124_0)"
"(let-values(((s_487)"
"(car"
" s_486)))"
"(let-values(((s_488)"
"(if(syntax?$1"
" s_487)"
"(syntax-e$1"
" s_487)"
" s_487)))"
"(let-values(((flat-s_34)"
"(to-syntax-list.1"
" s_488)))"
"(if(not"
" flat-s_34)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_19))"
"(let-values()"
"(let-values(((id:val_10"
" val-rhs_5)"
"(let-values(((lst_227)"
" flat-s_34))"
"(begin"
"(check-list"
" lst_227)"
"((letrec-values(((for-loop_180)"
"(lambda(id:val_11"
" val-rhs_6"
" lst_325)"
"(if(pair?"
" lst_325)"
"(let-values(((s_394)"
"(unsafe-car"
" lst_325))"
"((rest_189)"
"(unsafe-cdr"
" lst_325)))"
"(let-values(((id:val_12"
" val-rhs_7)"
"(let-values(((id:val_13)"
" id:val_11)"
"((val-rhs_8)"
" val-rhs_6))"
"(let-values(((id:val_14"
" val-rhs_9)"
"(let-values()"
"(let-values(((id:val138_0"
" val-rhs139_0)"
"(let-values()"
"(let-values(((s_257)"
"(if(syntax?$1"
" s_394)"
"(syntax-e$1"
" s_394)"
" s_394)))"
"(if(pair?"
" s_257)"
"(let-values(((id:val126_0)"
"(let-values(((s_259)"
"(car"
" s_257)))"
"(let-values(((s_260)"
"(if(syntax?$1"
" s_259)"
"(syntax-e$1"
" s_259)"
" s_259)))"
"(let-values(((flat-s_35)"
"(to-syntax-list.1"
" s_260)))"
"(if(not"
" flat-s_35)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_19))"
"(let-values()"
"(let-values(((id:val_15)"
"(let-values(((lst_326)"
" flat-s_35))"
"(begin"
"(check-list"
" lst_326)"
"((letrec-values(((for-loop_272)"
"(lambda(id:val_16"
" lst_327)"
"(if(pair?"
" lst_327)"
"(let-values(((s_489)"
"(unsafe-car"
" lst_327))"
"((rest_190)"
"(unsafe-cdr"
" lst_327)))"
"(let-values(((id:val_17)"
"(let-values(((id:val_18)"
" id:val_16))"
"(let-values(((id:val_19)"
"(let-values()"
"(let-values(((id:val140_0)"
"(let-values()"
"(if(let-values(((or-part_331)"
"(if(syntax?$1"
" s_489)"
"(symbol?"
"(syntax-e$1"
" s_489))"
" #f)))"
"(if or-part_331"
" or-part_331"
"(symbol?"
" s_489)))"
" s_489"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_19"
" s_489)))))"
"(cons"
" id:val140_0"
" id:val_18)))))"
"(values"
" id:val_19)))))"
"(if(not"
" #f)"
"(for-loop_272"
" id:val_17"
" rest_190)"
" id:val_17)))"
" id:val_16))))"
" for-loop_272)"
" null"
" lst_326)))))"
"(reverse$1"
" id:val_15))))))))"
"((val-rhs127_0)"
"(let-values(((s_490)"
"(cdr"
" s_257)))"
"(let-values(((s_326)"
"(if(syntax?$1"
" s_490)"
"(syntax-e$1"
" s_490)"
" s_490)))"
"(if(pair?"
" s_326)"
"(let-values(((val-rhs128_0)"
"(let-values(((s_491)"
"(car"
" s_326)))"
" s_491))"
"(()"
"(let-values(((s_492)"
"(cdr"
" s_326)))"
"(let-values(((s_493)"
"(if(syntax?$1"
" s_492)"
"(syntax-e$1"
" s_492)"
" s_492)))"
"(if(null?"
" s_493)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_19))))))"
"(values"
" val-rhs128_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_19))))))"
"(values"
" id:val126_0"
" val-rhs127_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_19))))))"
"(values"
"(cons"
" id:val138_0"
" id:val_13)"
"(cons"
" val-rhs139_0"
" val-rhs_8))))))"
"(values"
" id:val_14"
" val-rhs_9)))))"
"(if(not"
" #f)"
"(for-loop_180"
" id:val_12"
" val-rhs_7"
" rest_189)"
"(values"
" id:val_12"
" val-rhs_7))))"
"(values"
" id:val_11"
" val-rhs_6)))))"
" for-loop_180)"
" null"
" null"
" lst_227)))))"
"(values"
"(reverse$1"
" id:val_10)"
"(reverse$1"
" val-rhs_5)))))))))"
"((body125_0)"
"(let-values(((s_327)"
"(cdr"
" s_486)))"
"(let-values(((s_328)"
"(if(syntax?$1"
" s_327)"
"(syntax-e$1"
" s_327)"
" s_327)))"
"(let-values(((flat-s_36)"
"(to-syntax-list.1"
" s_328)))"
"(if(not"
" flat-s_36)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_19))"
"(if(null?"
" flat-s_36)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_19))"
"(let-values()"
" flat-s_36))))))))"
"(values"
" id:val123_0"
" val-rhs124_0"
" body125_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_19))))))"
"(values"
" let-values119_0"
" id:val120_0"
" val-rhs121_0"
" body122_0))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_19)))))"
"(values #t let-values115_1 id:val116_1 val-rhs117_1 body118_1)))"
"(values #f #f #f #f #f)))))"
"(let-values(((sc_31)(new-scope 'local)))"
"(let-values(((phase_102)(expand-context-phase ctx_76)))"
"(let-values(((frame-id_15)(if syntaxes?_0(make-reference-record) #f)))"
"(let-values(((trans-idss_2)"
"(let-values(((lst_328)(if syntaxes?_0 id:trans90_0 null)))"
"(begin"
"(check-list lst_328)"
"((letrec-values(((for-loop_133)"
"(lambda(lst_329)"
"(if(pair? lst_329)"
"(let-values(((ids_34)(unsafe-car lst_329))"
"((rest_191)(unsafe-cdr lst_329)))"
"(let-values(((post-guard-var_95)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_90)"
"(let-values()"
"(let-values()"
"(let-values(((lst_330)"
" ids_34))"
"(begin"
"(check-list lst_330)"
"((letrec-values(((for-loop_273)"
"(lambda(lst_331)"
"(if(pair?"
" lst_331)"
"(let-values(((id_32)"
"(unsafe-car"
" lst_331))"
"((rest_192)"
"(unsafe-cdr"
" lst_331)))"
"(let-values(((post-guard-var_96)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_91)"
"(let-values()"
"(let-values()"
"(add-scope"
" id_32"
" sc_31)))))"
"(let-values(((result_183)"
"(if(post-guard-var_96)"
"(for-loop_273"
" rest_192)"
" null)))"
"(cons"
" elem_91"
" result_183))))))"
" null))))"
" for-loop_273)"
" lst_330)))))))"
"(let-values(((result_184)"
"(if(post-guard-var_95)"
"(for-loop_133 rest_191)"
" null)))"
"(cons elem_90 result_184))))))"
" null))))"
" for-loop_133)"
" lst_328)))))"
"(let-values(((val-idss_2)"
"(let-values(((lst_332)(if syntaxes?_0 id:val92_0 id:val116_0)))"
"(begin"
"(check-list lst_332)"
"((letrec-values(((for-loop_274)"
"(lambda(lst_333)"
"(if(pair? lst_333)"
"(let-values(((ids_35)(unsafe-car lst_333))"
"((rest_193)"
"(unsafe-cdr lst_333)))"
"(let-values(((post-guard-var_97)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_92)"
"(let-values()"
"(let-values()"
"(let-values(((lst_334)"
" ids_35))"
"(begin"
"(check-list"
" lst_334)"
"((letrec-values(((for-loop_275)"
"(lambda(lst_335)"
"(if(pair?"
" lst_335)"
"(let-values(((id_112)"
"(unsafe-car"
" lst_335))"
"((rest_194)"
"(unsafe-cdr"
" lst_335)))"
"(let-values(((post-guard-var_98)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_93)"
"(let-values()"
"(let-values()"
"(add-scope"
" id_112"
" sc_31)))))"
"(let-values(((result_185)"
"(if(post-guard-var_98)"
"(for-loop_275"
" rest_194)"
" null)))"
"(cons"
" elem_93"
" result_185))))))"
" null))))"
" for-loop_275)"
" lst_334)))))))"
"(let-values(((result_186)"
"(if(post-guard-var_97)"
"(for-loop_274"
" rest_193)"
" null)))"
"(cons elem_92 result_186))))))"
" null))))"
" for-loop_274)"
" lst_332)))))"
"(let-values((()"
"(begin"
"(let-values(((temp129_1)(list trans-idss_2 val-idss_2))"
"((phase130_1) phase_102)"
"((s131_0) s_150))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" temp129_1"
" phase130_1"
" s131_0"
" #f"
" #f))"
"(values))))"
"(let-values(((counter_8)(root-expand-context-counter ctx_76)))"
"(let-values(((trans-keyss_0)"
"(let-values(((lst_336) trans-idss_2))"
"(begin"
"(check-list lst_336)"
"((letrec-values(((for-loop_276)"
"(lambda(lst_337)"
"(if(pair? lst_337)"
"(let-values(((ids_36)"
"(unsafe-car lst_337))"
"((rest_195)"
"(unsafe-cdr lst_337)))"
"(let-values(((post-guard-var_99)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_94)"
"(let-values()"
"(let-values()"
"(let-values(((lst_338)"
" ids_36))"
"(begin"
"(check-list"
" lst_338)"
"((letrec-values(((for-loop_277)"
"(lambda(lst_339)"
"(if(pair?"
" lst_339)"
"(let-values(((id_113)"
"(unsafe-car"
" lst_339))"
"((rest_196)"
"(unsafe-cdr"
" lst_339)))"
"(let-values(((post-guard-var_100)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_95)"
"(let-values()"
"(let-values()"
"(let-values(((frame-id144_0)"
" frame-id_15)"
"((s145_1)"
" s_150))"
"(add-local-binding!35.1"
" frame-id144_0"
" #t"
" s145_1"
" #t"
" id_113"
" phase_102"
" counter_8))))))"
"(let-values(((result_142)"
"(if(post-guard-var_100)"
"(for-loop_277"
" rest_196)"
" null)))"
"(cons"
" elem_95"
" result_142))))))"
" null))))"
" for-loop_277)"
" lst_338)))))))"
"(let-values(((result_187)"
"(if(post-guard-var_99)"
"(for-loop_276"
" rest_195)"
" null)))"
"(cons elem_94 result_187))))))"
" null))))"
" for-loop_276)"
" lst_336)))))"
"(let-values(((val-keyss_2)"
"(let-values(((lst_340) val-idss_2))"
"(begin"
"(check-list lst_340)"
"((letrec-values(((for-loop_278)"
"(lambda(lst_341)"
"(if(pair? lst_341)"
"(let-values(((ids_37)"
"(unsafe-car lst_341))"
"((rest_197)"
"(unsafe-cdr lst_341)))"
"(let-values(((post-guard-var_101)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_96)"
"(let-values()"
"(let-values()"
"(let-values(((lst_342)"
" ids_37))"
"(begin"
"(check-list"
" lst_342)"
"((letrec-values(((for-loop_279)"
"(lambda(lst_266)"
"(if(pair?"
" lst_266)"
"(let-values(((id_114)"
"(unsafe-car"
" lst_266))"
"((rest_198)"
"(unsafe-cdr"
" lst_266)))"
"(let-values(((post-guard-var_102)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_97)"
"(let-values()"
"(let-values()"
"(let-values(((frame-id149_0)"
" frame-id_15)"
"((s150_1)"
" s_150))"
"(add-local-binding!35.1"
" frame-id149_0"
" #t"
" s150_1"
" #t"
" id_114"
" phase_102"
" counter_8))))))"
"(let-values(((result_188)"
"(if(post-guard-var_102)"
"(for-loop_279"
" rest_198)"
" null)))"
"(cons"
" elem_97"
" result_188))))))"
" null))))"
" for-loop_279)"
" lst_342)))))))"
"(let-values(((result_189)"
"(if(post-guard-var_101)"
"(for-loop_278"
" rest_197)"
" null)))"
"(cons"
" elem_96"
" result_189))))))"
" null))))"
" for-loop_278)"
" lst_340)))))"
"(let-values(((bodys_10)"
"(let-values(((lst_343)(if syntaxes?_0 body94_0 body118_0)))"
"(begin"
"(check-list lst_343)"
"((letrec-values(((for-loop_280)"
"(lambda(lst_344)"
"(if(pair? lst_344)"
"(let-values(((body_17)"
"(unsafe-car lst_344))"
"((rest_199)"
"(unsafe-cdr lst_344)))"
"(let-values(((post-guard-var_103)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_98)"
"(let-values()"
"(let-values()"
"(add-scope"
" body_17"
" sc_31)))))"
"(let-values(((result_190)"
"(if(post-guard-var_103)"
"(for-loop_280"
" rest_199)"
" null)))"
"(cons"
" elem_98"
" result_190))))))"
" null))))"
" for-loop_280)"
" lst_343)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_62)(expand-context-observer ctx_76)))"
"(if obs_62"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_62"
" renames-log-tag_0"
" val-idss_2"
"(datum->syntax$1 #f bodys_10))))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if syntaxes?_0"
"(let-values()"
"(begin"
"(let-values(((obs_63)"
"(expand-context-observer ctx_76)))"
"(if obs_63"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_63"
" 'prepare-env)))"
"(void)))"
"(let-values(((obs_64)"
"(expand-context-observer ctx_76)))"
"(if obs_64"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_64 'enter-bind)))"
"(void)))))"
"(void))"
"(values))))"
"(let-values(((trans-valss_0)"
"(let-values(((lst_345)"
"(if syntaxes?_0 trans-rhs91_0 '()))"
"((lst_346) trans-idss_2))"
"(begin"
"(check-list lst_345)"
"(check-list lst_346)"
"((letrec-values(((for-loop_281)"
"(lambda(lst_347 lst_348)"
"(if(if(pair? lst_347)"
"(pair? lst_348)"
" #f)"
"(let-values(((rhs_20)"
"(unsafe-car"
" lst_347))"
"((rest_200)"
"(unsafe-cdr"
" lst_347))"
"((ids_38)"
"(unsafe-car"
" lst_348))"
"((rest_201)"
"(unsafe-cdr"
" lst_348)))"
"(let-values(((post-guard-var_104)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_99)"
"(let-values()"
"(let-values()"
"(begin"
"(let-values(((obs_65)"
"(expand-context-observer"
" ctx_76)))"
"(if obs_65"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_65"
" 'next)))"
"(void)))"
"(eval-for-syntaxes-binding"
"(add-scope"
" rhs_20"
" sc_31)"
" ids_38"
" ctx_76))))))"
"(let-values(((result_191)"
"(if(post-guard-var_104)"
"(for-loop_281"
" rest_200"
" rest_201)"
" null)))"
"(cons"
" elem_99"
" result_191))))))"
" null))))"
" for-loop_281)"
" lst_345"
" lst_346)))))"
"(let-values(((rec-val-env_0)"
"(let-values(((lst_349) val-keyss_2)"
"((lst_350) val-idss_2))"
"(begin"
"(check-list lst_349)"
"(check-list lst_350)"
"((letrec-values(((for-loop_282)"
"(lambda(env_29 lst_209 lst_351)"
"(if(if(pair? lst_209)"
"(pair? lst_351)"
" #f)"
"(let-values(((keys_11)"
"(unsafe-car"
" lst_209))"
"((rest_202)"
"(unsafe-cdr"
" lst_209))"
"((ids_39)"
"(unsafe-car"
" lst_351))"
"((rest_203)"
"(unsafe-cdr"
" lst_351)))"
"(let-values(((env_30)"
"(let-values(((env_31)"
" env_29))"
"(let-values(((lst_176)"
" keys_11)"
"((lst_352)"
" ids_39))"
"(begin"
"(check-list"
" lst_176)"
"(check-list"
" lst_352)"
"((letrec-values(((for-loop_283)"
"(lambda(env_32"
" lst_178"
" lst_353)"
"(if(if(pair?"
" lst_178)"
"(pair?"
" lst_353)"
" #f)"
"(let-values(((key_88)"
"(unsafe-car"
" lst_178))"
"((rest_204)"
"(unsafe-cdr"
" lst_178))"
"((id_115)"
"(unsafe-car"
" lst_353))"
"((rest_205)"
"(unsafe-cdr"
" lst_353)))"
"(let-values(((env_33)"
"(let-values(((env_34)"
" env_32))"
"(let-values(((env_35)"
"(let-values()"
"(env-extend"
" env_34"
" key_88"
"(local-variable1.1"
" id_115)))))"
"(values"
" env_35)))))"
"(if(not"
" #f)"
"(for-loop_283"
" env_33"
" rest_204"
" rest_205)"
" env_33)))"
" env_32))))"
" for-loop_283)"
" env_31"
" lst_176"
" lst_352))))))"
"(if(not #f)"
"(for-loop_282"
" env_30"
" rest_202"
" rest_203)"
" env_30)))"
" env_29))))"
" for-loop_282)"
"(expand-context-env ctx_76)"
" lst_349"
" lst_350)))))"
"(let-values(((rec-env_0)"
"(let-values(((lst_354) trans-keyss_0)"
"((lst_355) trans-valss_0)"
"((lst_356) trans-idss_2))"
"(begin"
"(check-list lst_354)"
"(check-list lst_355)"
"(check-list lst_356)"
"((letrec-values(((for-loop_284)"
"(lambda(env_36"
" lst_357"
" lst_358"
" lst_181)"
"(if(if(pair? lst_357)"
"(if(pair? lst_358)"
"(pair? lst_181)"
" #f)"
" #f)"
"(let-values(((keys_12)"
"(unsafe-car"
" lst_357))"
"((rest_206)"
"(unsafe-cdr"
" lst_357))"
"((vals_8)"
"(unsafe-car"
" lst_358))"
"((rest_207)"
"(unsafe-cdr"
" lst_358))"
"((ids_40)"
"(unsafe-car"
" lst_181))"
"((rest_208)"
"(unsafe-cdr"
" lst_181)))"
"(let-values(((env_37)"
"(let-values(((env_38)"
" env_36))"
"(let-values(((env_39)"
"(let-values()"
"(let-values(((lst_359)"
" keys_12)"
"((lst_360)"
" vals_8)"
"((lst_184)"
" ids_40))"
"(begin"
"(check-list"
" lst_359)"
"(check-list"
" lst_360)"
"(check-list"
" lst_184)"
"((letrec-values(((for-loop_285)"
"(lambda(env_40"
" lst_361"
" lst_211"
" lst_362)"
"(if(if(pair?"
" lst_361)"
"(if(pair?"
" lst_211)"
"(pair?"
" lst_362)"
" #f)"
" #f)"
"(let-values(((key_89)"
"(unsafe-car"
" lst_361))"
"((rest_209)"
"(unsafe-cdr"
" lst_361))"
"((val_74)"
"(unsafe-car"
" lst_211))"
"((rest_210)"
"(unsafe-cdr"
" lst_211))"
"((id_116)"
"(unsafe-car"
" lst_362))"
"((rest_211)"
"(unsafe-cdr"
" lst_362)))"
"(let-values(((env_41)"
"(let-values(((env_42)"
" env_40))"
"(let-values(((env_43)"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_74"
" id_116"
" phase_102)"
"(env-extend"
" env_42"
" key_89"
" val_74)))))"
"(values"
" env_43)))))"
"(if(not"
" #f)"
"(for-loop_285"
" env_41"
" rest_209"
" rest_210"
" rest_211)"
" env_41)))"
" env_40))))"
" for-loop_285)"
" env_38"
" lst_359"
" lst_360"
" lst_184))))))"
"(values"
" env_39)))))"
"(if(not #f)"
"(for-loop_284"
" env_37"
" rest_206"
" rest_207"
" rest_208)"
" env_37)))"
" env_36))))"
" for-loop_284)"
" rec-val-env_0"
" lst_354"
" lst_355"
" lst_356)))))"
"(let-values((()"
"(begin"
"(if syntaxes?_0"
"(let-values()"
"(let-values(((obs_66)"
"(expand-context-observer"
" ctx_76)))"
"(if obs_66"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_66"
" 'exit-bind)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((expr-ctx_0)(as-expression-context ctx_76)))"
"(let-values(((orig-rrs_0)"
"(expand-context-reference-records"
" expr-ctx_0)))"
"(let-values(((rec-ctx_0)"
"(let-values(((v_247) expr-ctx_0))"
"(let-values(((the-struct_95) v_247))"
"(if(expand-context/outer?"
" the-struct_95)"
"(let-values(((env151_0) rec-env_0)"
"((scopes152_0)"
"(cons"
" sc_31"
"(expand-context-scopes"
" ctx_76)))"
"((reference-records153_0)"
"(if split-by-reference?_0"
"(cons"
" frame-id_15"
" orig-rrs_0)"
" orig-rrs_0))"
"((binding-layer154_0)"
"(increment-binding-layer"
"(cons"
" trans-idss_2"
" val-idss_2)"
" ctx_76"
" sc_31))"
"((inner155_0)"
"(root-expand-context/outer-inner"
" v_247)))"
"(expand-context/outer1.1"
" inner155_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_95)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_95)"
"(root-expand-context/outer-frame-id"
" the-struct_95)"
"(expand-context/outer-context"
" the-struct_95)"
" env151_0"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_95)"
" scopes152_0"
"(expand-context/outer-def-ctx-scopes"
" the-struct_95)"
" binding-layer154_0"
" reference-records153_0"
"(expand-context/outer-only-immediate?"
" the-struct_95)"
"(expand-context/outer-need-eventually-defined"
" the-struct_95)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_95)"
"(expand-context/outer-name"
" the-struct_95)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                   \"expand-context/outer?\""
" the-struct_95))))))"
"(let-values(((letrec-values-id_0)"
"(if(not"
"(expand-context-to-parsed? ctx_76))"
"(if syntaxes?_0"
"(core-id 'letrec-values phase_102)"
" let-values115_0)"
" #f)))"
"(let-values(((rebuild-s_6)"
"(let-values(((temp158_2) #t))"
"(keep-as-needed59.1"
" #f"
" #f"
" temp158_2"
" #t"
" #f"
" #f"
" ctx_76"
" s_150))))"
"(let-values(((val-name-idss_0)"
"(if(expand-context-to-parsed? ctx_76)"
"(let-values(((lst_363) val-idss_2))"
"(begin"
"(check-list lst_363)"
"((letrec-values(((for-loop_286)"
"(lambda(lst_364)"
"(if(pair?"
" lst_364)"
"(let-values(((val-ids_0)"
"(unsafe-car"
" lst_364))"
"((rest_212)"
"(unsafe-cdr"
" lst_364)))"
"(let-values(((post-guard-var_105)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_100)"
"(let-values()"
"(let-values()"
"(let-values(((lst_365)"
" val-ids_0))"
"(begin"
"(check-list"
" lst_365)"
"((letrec-values(((for-loop_287)"
"(lambda(lst_366)"
"(if(pair?"
" lst_366)"
"(let-values(((val-id_0)"
"(unsafe-car"
" lst_366))"
"((rest_213)"
"(unsafe-cdr"
" lst_366)))"
"(let-values(((post-guard-var_106)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_101)"
"(let-values()"
"(let-values()"
"(datum->syntax$1"
" #f"
"(syntax-e$1"
" val-id_0)"
" val-id_0"
" val-id_0)))))"
"(let-values(((result_192)"
"(if(post-guard-var_106)"
"(for-loop_287"
" rest_213)"
" null)))"
"(cons"
" elem_101"
" result_192))))))"
" null))))"
" for-loop_287)"
" lst_365)))))))"
"(let-values(((result_193)"
"(if(post-guard-var_105)"
"(for-loop_286"
" rest_212)"
" null)))"
"(cons"
" elem_100"
" result_193))))))"
" null))))"
" for-loop_286)"
" lst_363)))"
" val-idss_2)))"
"(let-values(((get-body_1)"
"(lambda()"
"(let-values((()"
"(begin"
"(let-values(((obs_67)"
"(expand-context-observer"
" ctx_76)))"
"(if obs_67"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_67"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_5)"
"(let-values(((v_248)"
" rec-ctx_0))"
"(let-values(((the-struct_96)"
" v_248))"
"(if(expand-context/outer?"
" the-struct_96)"
"(let-values(((reference-records162_0)"
" orig-rrs_0)"
"((inner163_0)"
"(root-expand-context/outer-inner"
" v_248)))"
"(expand-context/outer1.1"
" inner163_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_96)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_96)"
"(root-expand-context/outer-frame-id"
" the-struct_96)"
"(expand-context/outer-context"
" the-struct_96)"
"(expand-context/outer-env"
" the-struct_96)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_96)"
"(expand-context/outer-scopes"
" the-struct_96)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_96)"
"(expand-context/outer-binding-layer"
" the-struct_96)"
" reference-records162_0"
"(expand-context/outer-only-immediate?"
" the-struct_96)"
"(expand-context/outer-need-eventually-defined"
" the-struct_96)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_96)"
"(expand-context/outer-name"
" the-struct_96)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                             \"expand-context/outer?\""
" the-struct_96))))))"
"(let-values(((temp160_1)"
"(let-values(((ctx165_0)"
" ctx_76))"
"(as-tail-context21.1"
" ctx165_0"
" body-ctx_5)))"
"((rebuild-s161_0)"
" rebuild-s_6))"
"(expand-body7.1"
" rebuild-s161_0"
" #f"
" #f"
" bodys_10"
" temp160_1)))))))"
"(let-values(((result-s_10)"
"(if(not split-by-reference?_0)"
"(let-values()"
"(let-values(((clauses_1)"
"(let-values(((lst_367)"
" val-name-idss_0)"
"((lst_192)"
" val-keyss_2)"
"((lst_368)"
"(if syntaxes?_0"
" val-rhs93_0"
" val-rhs117_0)))"
"(begin"
"(check-list"
" lst_367)"
"(check-list"
" lst_192)"
"(check-list"
" lst_368)"
"((letrec-values(((for-loop_288)"
"(lambda(lst_369"
" lst_370"
" lst_371)"
"(if(if(pair?"
" lst_369)"
"(if(pair?"
" lst_370)"
"(pair?"
" lst_371)"
" #f)"
" #f)"
"(let-values(((ids_41)"
"(unsafe-car"
" lst_369))"
"((rest_214)"
"(unsafe-cdr"
" lst_369))"
"((keys_13)"
"(unsafe-car"
" lst_370))"
"((rest_215)"
"(unsafe-cdr"
" lst_370))"
"((rhs_21)"
"(unsafe-car"
" lst_371))"
"((rest_216)"
"(unsafe-cdr"
" lst_371)))"
"(let-values(((post-guard-var_107)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_102)"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_68)"
"(expand-context-observer"
" ctx_76)))"
"(if obs_68"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_68"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-rhs_4)"
"(if rec?_1"
"(let-values(((temp166_0)"
"(add-scope"
" rhs_21"
" sc_31))"
"((temp167_0)"
"(as-named-context"
" rec-ctx_0"
" ids_41)))"
"(expand5.1"
" #f"
" #f"
" temp166_0"
" temp167_0))"
"(let-values(((rhs168_0)"
" rhs_21)"
"((temp169_1)"
"(as-named-context"
" expr-ctx_0"
" ids_41)))"
"(expand5.1"
" #f"
" #f"
" rhs168_0"
" temp169_1)))))"
"(if(expand-context-to-parsed?"
" ctx_76)"
"(list"
" keys_13"
" exp-rhs_4)"
"(list"
" ids_41"
" exp-rhs_4))))))))"
"(let-values(((result_194)"
"(if(post-guard-var_107)"
"(for-loop_288"
" rest_214"
" rest_215"
" rest_216)"
" null)))"
"(cons"
" elem_102"
" result_194))))))"
" null))))"
" for-loop_288)"
" lst_367"
" lst_192"
" lst_368)))))"
"(let-values(((exp-body_4)"
"(get-body_1)))"
"(begin"
"(if frame-id_15"
"(let-values()"
"(reference-record-clear!"
" frame-id_15))"
"(void))"
"(if(expand-context-to-parsed?"
" ctx_76)"
"(if rec?_1"
"(parsed-letrec-values18.1"
" rebuild-s_6"
" val-name-idss_0"
" clauses_1"
" exp-body_4)"
"(parsed-let-values17.1"
" rebuild-s_6"
" val-name-idss_0"
" clauses_1"
" exp-body_4))"
"(let-values(((rebuild-s170_0)"
" rebuild-s_6)"
"((temp171_0)"
"(list*"
" letrec-values-id_0"
" clauses_1"
" exp-body_4)))"
"(rebuild66.1"
" #f"
" #f"
" rebuild-s170_0"
" temp171_0)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_69)"
"(expand-context-observer"
" ctx_76)))"
"(if obs_69"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_69"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_70)"
"(expand-context-observer"
" ctx_76)))"
"(if obs_70"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_70"
" 'letrec-values)))"
"(void)))"
"(values))))"
"(let-values(((val-rhss_2)"
"(let-values(((lst_372)"
"(if syntaxes?_0"
" val-rhs93_0"
" val-rhs117_0)))"
"(begin"
"(check-list"
" lst_372)"
"((letrec-values(((for-loop_289)"
"(lambda(lst_373)"
"(if(pair?"
" lst_373)"
"(let-values(((rhs_22)"
"(unsafe-car"
" lst_373))"
"((rest_217)"
"(unsafe-cdr"
" lst_373)))"
"(let-values(((post-guard-var_108)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_103)"
"(let-values()"
"(let-values()"
"(add-scope"
" rhs_22"
" sc_31)))))"
"(let-values(((result_131)"
"(if(post-guard-var_108)"
"(for-loop_289"
" rest_217)"
" null)))"
"(cons"
" elem_103"
" result_131))))))"
" null))))"
" for-loop_289)"
" lst_372)))))"
"(let-values(((temp175_1)"
"(let-values(((lst_374)"
" val-idss_2))"
"(begin"
"(check-list"
" lst_374)"
"((letrec-values(((for-loop_290)"
"(lambda(lst_375)"
"(if(pair?"
" lst_375)"
"(let-values(((rhs_23)"
"(unsafe-car"
" lst_375))"
"((rest_218)"
"(unsafe-cdr"
" lst_375)))"
"(let-values(((post-guard-var_109)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_104)"
"(let-values()"
"(let-values()"
" #f))))"
"(let-values(((result_195)"
"(if(post-guard-var_109)"
"(for-loop_290"
" rest_218)"
" null)))"
"(cons"
" elem_104"
" result_195))))))"
" null))))"
" for-loop_290)"
" lst_374))))"
"((temp176_0)"
" #t)"
"((frame-id177_0)"
" frame-id_15)"
"((rec-ctx178_0)"
" rec-ctx_0)"
"((rebuild-s179_0)"
" rebuild-s_6)"
"((get-body180_0)"
" get-body_1)"
"((temp181_0)"
" #t))"
"(expand-and-split-bindings-by-reference45.1"
" rec-ctx178_0"
" frame-id177_0"
" get-body180_0"
" rebuild-s179_0"
" temp176_0"
" temp181_0"
" val-idss_2"
" val-keyss_2"
" val-rhss_2"
" temp175_1)))))))))"
"(if(expand-context-to-parsed? ctx_76)"
" result-s_10"
"(attach-disappeared-transformer-bindings"
" result-s_10"
" trans-idss_2)))))))))))))))))))))))))))))))))))))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'let-values"
"(let-values(((temp182_0) 'prim-let-values))(make-let-values-form11.1 temp182_0 #f #f #f #f #f #f #f #f))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'letrec-values"
"(let-values(((temp183_0) #t)((temp184_1) 'prim-letrec-values))"
"(make-let-values-form11.1 temp184_1 temp183_0 #t #f #f #f #f #f #f))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'letrec-syntaxes+values"
"(let-values(((temp185_0) #t)"
"((temp186_0) #t)"
"((temp187_1) #t)"
"((temp188_0) 'prim-letrec-syntaxes+values)"
"((temp189_0) 'letrec-syntaxes-renames))"
"(make-let-values-form11.1 temp188_0 temp186_0 #t temp189_0 #t temp187_1 #t temp185_0 #t))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%stratified-body"
"(lambda(s_142 ctx_77)"
"(let-values((()"
"(begin"
"(let-values(((obs_71)(expand-context-observer ctx_77)))"
"(if obs_71"
"(let-values()(let-values()(call-expand-observe obs_71 'prim-#%stratified)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_8)(syntax-disarm$1 s_142)))"
"(let-values(((ok?_37 #%stratified-body190_0 body191_0)"
"(let-values(((s_494) disarmed-s_8))"
"(let-values(((orig-s_42) s_494))"
"(let-values(((#%stratified-body190_1 body191_1)"
"(let-values(((s_495)(if(syntax?$1 s_494)(syntax-e$1 s_494) s_494)))"
"(if(pair? s_495)"
"(let-values(((#%stratified-body192_0)"
"(let-values(((s_496)(car s_495))) s_496))"
"((body193_0)"
"(let-values(((s_497)(cdr s_495)))"
"(let-values(((s_498)"
"(if(syntax?$1 s_497)"
"(syntax-e$1 s_497)"
" s_497)))"
"(let-values(((flat-s_37)(to-syntax-list.1 s_498)))"
"(if(not flat-s_37)"
"(let-values()"
"                                                                       (raise-syntax-error$1 #f \"bad syntax\" orig-s_42))"
"(if(null? flat-s_37)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_42))"
"(let-values() flat-s_37))))))))"
"(values #%stratified-body192_0 body193_0))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_42)))))"
"(values #t #%stratified-body190_1 body191_1))))))"
"(let-values(((rebuild-s_7)"
"(let-values(((temp196_1) #t))(keep-as-needed59.1 #f #f temp196_1 #t #f #f ctx_77 s_142))))"
"(let-values(((exp-body_5)"
"(let-values(((temp197_1) body191_0)"
"((ctx198_0) ctx_77)"
"((temp199_0) #t)"
"((rebuild-s200_0) rebuild-s_7))"
"(expand-body7.1 rebuild-s200_0 temp199_0 #t temp197_1 ctx198_0))))"
"(if(expand-context-to-parsed? ctx_77)"
"(parsed-begin12.1 rebuild-s_7 exp-body_5)"
"(let-values(((rebuild-s201_0) rebuild-s_7)"
"((temp202_1)(list*(core-id 'begin(expand-context-phase ctx_77)) exp-body_5)))"
"(rebuild66.1 #f #f rebuild-s201_0 temp202_1)))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%datum"
"(lambda(s_499 ctx_78)"
"(let-values((()"
"(begin"
"(let-values(((obs_72)(expand-context-observer ctx_78)))"
"(if obs_72(let-values()(let-values()(call-expand-observe obs_72 'prim-#%datum)))(void)))"
"(values))))"
"(let-values(((disarmed-s_9)(syntax-disarm$1 s_499)))"
"(let-values(((ok?_38 #%datum203_0 datum204_0)"
"(let-values(((s_500) disarmed-s_9))"
"(let-values(((orig-s_43) s_500))"
"(let-values(((#%datum203_1 datum204_1)"
"(let-values(((s_501)(if(syntax?$1 s_500)(syntax-e$1 s_500) s_500)))"
"(if(pair? s_501)"
"(let-values(((#%datum205_0)(let-values(((s_502)(car s_501))) s_502))"
"((datum206_0)(let-values(((s_503)(cdr s_501))) s_503)))"
"(values #%datum205_0 datum206_0))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_43)))))"
"(values #t #%datum203_1 datum204_1))))))"
"(let-values(((datum_2) datum204_0))"
"(let-values((()"
"(begin"
"(if(if(syntax?$1 datum_2)(keyword?(syntax-e$1 datum_2)) #f)"
"(let-values()"
"                                   (raise-syntax-error$1 '#%datum \"keyword misused as an expression\" #f datum_2))"
"(void))"
"(values))))"
"(let-values(((phase_144)(expand-context-phase ctx_78)))"
"(if(expand-context-to-parsed? ctx_78)"
"(parsed-quote14.1(keep-properties-only~ s_499)(syntax->datum$1 datum_2))"
"(let-values(((s207_0) s_499)((temp208_0)(list(core-id 'quote phase_144) datum_2)))"
"(rebuild66.1 #f #f s207_0 temp208_0))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%app"
"(lambda(s_504 ctx_79)"
"(let-values((()"
"(begin"
"(let-values(((obs_73)(expand-context-observer ctx_79)))"
"(if obs_73(let-values()(let-values()(call-expand-observe obs_73 'prim-#%app)))(void)))"
"(values))))"
"(let-values(((disarmed-s_10)(syntax-disarm$1 s_504)))"
"(let-values(((ok?_39 #%app209_0 e210_0)"
"(let-values(((s_505) disarmed-s_10))"
"(let-values(((orig-s_44) s_505))"
"(let-values(((#%app209_1 e210_1)"
"(let-values(((s_506)(if(syntax?$1 s_505)(syntax-e$1 s_505) s_505)))"
"(if(pair? s_506)"
"(let-values(((#%app211_0)(let-values(((s_507)(car s_506))) s_507))"
"((e212_0)"
"(let-values(((s_508)(cdr s_506)))"
"(let-values(((s_509)"
"(if(syntax?$1 s_508)"
"(syntax-e$1 s_508)"
" s_508)))"
"(let-values(((flat-s_38)(to-syntax-list.1 s_509)))"
"(if(not flat-s_38)"
"(let-values()"
"                                                                       (raise-syntax-error$1 #f \"bad syntax\" orig-s_44))"
"(let-values() flat-s_38)))))))"
"(values #%app211_0 e212_0))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_44)))))"
"(values #t #%app209_1 e210_1))))))"
"(let-values(((es_3) e210_0))"
"(if(null? es_3)"
"(let-values()"
"(let-values(((phase_145)(expand-context-phase ctx_79)))"
"(if(expand-context-to-parsed? ctx_79)"
"(parsed-quote14.1(keep-properties-only~ s_504) null)"
"(let-values(((s213_0) s_504)((temp214_3)(list(core-id 'quote phase_145) null)))"
"(rebuild66.1 #f #f s213_0 temp214_3)))))"
"(let-values()"
"(let-values(((rebuild-s_8)"
"(let-values(((ctx215_0) ctx_79)((s216_0) s_504))"
"(keep-as-needed59.1 #f #f #f #f #f #f ctx215_0 s216_0))))"
"(let-values(((prefixless_0)(cdr(syntax-e$1 disarmed-s_10))))"
"(let-values(((rebuild-prefixless_0)"
"(if(syntax?$1 prefixless_0)"
"(let-values(((ctx217_0) ctx_79)((prefixless218_0) prefixless_0))"
"(keep-as-needed59.1 #f #f #f #f #f #f ctx217_0 prefixless218_0))"
" #f)))"
"(let-values(((expr-ctx_1)(as-expression-context ctx_79)))"
"(let-values(((rest-es_0)(cdr es_3)))"
"(let-values(((exp-rator_0)"
"(let-values(((temp219_1)(car es_3))((expr-ctx220_0) expr-ctx_1))"
"(expand5.1 #f #f temp219_1 expr-ctx220_0))))"
"(let-values(((exp-es_0)"
"(let-values(((lst_376) rest-es_0))"
"(begin"
"(check-list lst_376)"
"((letrec-values(((for-loop_291)"
"(lambda(lst_377)"
"(if(pair? lst_377)"
"(let-values(((e_88)(unsafe-car lst_377))"
"((rest_219)(unsafe-cdr lst_377)))"
"(let-values(((post-guard-var_110)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_105)"
"(let-values()"
"(let-values()"
"(let-values(((e221_0)"
" e_88)"
"((expr-ctx222_0)"
" expr-ctx_1))"
"(expand5.1"
" #f"
" #f"
" e221_0"
" expr-ctx222_0))))))"
"(let-values(((result_196)"
"(if(post-guard-var_110)"
"(for-loop_291 rest_219)"
" null)))"
"(cons elem_105 result_196))))))"
" null))))"
" for-loop_291)"
" lst_376)))))"
"(if(expand-context-to-parsed? ctx_79)"
"(parsed-app7.1"
"(let-values(((or-part_332) rebuild-prefixless_0))"
"(if or-part_332 or-part_332 rebuild-s_8))"
" exp-rator_0"
" exp-es_0)"
"(let-values(((rebuild-s223_0) rebuild-s_8)"
"((temp224_0)"
"(let-values(((exp-es_1)(cons exp-rator_0 exp-es_0)))"
"(cons"
" #%app209_0"
"(if rebuild-prefixless_0"
"(let-values(((rebuild-prefixless225_0) rebuild-prefixless_0)"
"((exp-es226_0) exp-es_1))"
"(rebuild66.1 #f #f rebuild-prefixless225_0 exp-es226_0))"
" exp-es_1)))))"
"(rebuild66.1 #f #f rebuild-s223_0 temp224_0)))))))))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'quote"
"(lambda(s_510 ctx_80)"
"(let-values((()"
"(begin"
"(let-values(((obs_74)(expand-context-observer ctx_80)))"
"(if obs_74(let-values()(let-values()(call-expand-observe obs_74 'prim-quote)))(void)))"
"(values))))"
"(let-values(((ok?_40 quote227_0 datum228_0)"
"(let-values(((s_511)(syntax-disarm$1 s_510)))"
"(let-values(((orig-s_45) s_511))"
"(let-values(((quote227_1 datum228_1)"
"(let-values(((s_512)(if(syntax?$1 s_511)(syntax-e$1 s_511) s_511)))"
"(if(pair? s_512)"
"(let-values(((quote229_0)(let-values(((s_513)(car s_512))) s_513))"
"((datum230_0)"
"(let-values(((s_514)(cdr s_512)))"
"(let-values(((s_515)"
"(if(syntax?$1 s_514)"
"(syntax-e$1 s_514)"
" s_514)))"
"(if(pair? s_515)"
"(let-values(((datum231_0)"
"(let-values(((s_516)(car s_515)))"
" s_516))"
"(()"
"(let-values(((s_517)(cdr s_515)))"
"(let-values(((s_518)"
"(if(syntax?$1 s_517)"
"(syntax-e$1 s_517)"
" s_517)))"
"(if(null? s_518)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"bad syntax\""
" orig-s_45))))))"
"(values datum231_0))"
"                                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_45))))))"
"(values quote229_0 datum230_0))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_45)))))"
"(values #t quote227_1 datum228_1))))))"
"(if(expand-context-to-parsed? ctx_80)"
"(parsed-quote14.1(keep-properties-only~ s_510)(syntax->datum$1 datum228_0))"
" s_510))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'quote-syntax"
"(lambda(s_519 ctx_81)"
"(let-values((()"
"(begin"
"(let-values(((obs_75)(expand-context-observer ctx_81)))"
"(if obs_75"
"(let-values()(let-values()(call-expand-observe obs_75 'prim-quote-syntax)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_11)(syntax-disarm$1 s_519)))"
"(let-values(((ok?_41 quote-syntax232_0 datum233_0)"
"(let-values(((s_520) disarmed-s_11))"
"(if(let-values(((s_521)(if(syntax?$1 s_520)(syntax-e$1 s_520) s_520)))"
"(if(pair? s_521)"
"(if(let-values(((s_522)(car s_521))) #t)"
"(let-values(((s_523)(cdr s_521)))"
"(let-values(((s_524)(if(syntax?$1 s_523)(syntax-e$1 s_523) s_523)))"
"(if(pair? s_524)"
"(if(let-values(((s_525)(car s_524))) #t)"
"(let-values(((s_526)(cdr s_524)))"
"(let-values(((s_527)(if(syntax?$1 s_526)(syntax-e$1 s_526) s_526)))"
"(if(pair? s_527)"
"(if(let-values(((s_528)(car s_527)))"
"(let-values(((s_529)"
"(if(syntax?$1 s_528)(syntax-e$1 s_528) s_528)))"
"(eq? '#:local s_529)))"
"(let-values(((s_530)(cdr s_527)))"
"(let-values(((s_531)"
"(if(syntax?$1 s_530)(syntax-e$1 s_530) s_530)))"
"(null? s_531)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((quote-syntax232_1 datum233_1)"
"(let-values(((s_532)(if(syntax?$1 s_520)(syntax-e$1 s_520) s_520)))"
"(let-values(((quote-syntax234_0)"
"(let-values(((s_533)(car s_532))) s_533))"
"((datum235_0)"
"(let-values(((s_534)(cdr s_532)))"
"(let-values(((s_535)"
"(if(syntax?$1 s_534)"
"(syntax-e$1 s_534)"
" s_534)))"
"(let-values(((datum236_0)"
"(let-values(((s_536)(car s_535)))"
" s_536))"
"(()"
"(let-values(((s_537)(cdr s_535)))"
"(let-values(((s_538)"
"(if(syntax?$1 s_537)"
"(syntax-e$1 s_537)"
" s_537)))"
"(let-values((()"
"(let-values(((s_539)"
"(car"
" s_538)))"
"(let-values(((s_540)"
"(if(syntax?$1"
" s_539)"
"(syntax-e$1"
" s_539)"
" s_539)))"
"(values))))"
"(()"
"(let-values(((s_541)"
"(cdr"
" s_538)))"
"(let-values(((s_542)"
"(if(syntax?$1"
" s_541)"
"(syntax-e$1"
" s_541)"
" s_541)))"
"(values)))))"
"(values))))))"
"(values datum236_0))))))"
"(values quote-syntax234_0 datum235_0)))))"
"(values #t quote-syntax232_1 datum233_1)))"
"(values #f #f #f)))))"
"(let-values(((ok?_42 quote-syntax237_0 datum238_0)"
"(let-values(((s_543) disarmed-s_11))"
"(if(if(not ok?_41) #t #f)"
"(let-values(((orig-s_46) s_543))"
"(let-values(((quote-syntax237_1 datum238_1)"
"(let-values(((s_544)(if(syntax?$1 s_543)(syntax-e$1 s_543) s_543)))"
"(if(pair? s_544)"
"(let-values(((quote-syntax239_0)"
"(let-values(((s_545)(car s_544))) s_545))"
"((datum240_0)"
"(let-values(((s_546)(cdr s_544)))"
"(let-values(((s_547)"
"(if(syntax?$1 s_546)"
"(syntax-e$1 s_546)"
" s_546)))"
"(if(pair? s_547)"
"(let-values(((datum241_0)"
"(let-values(((s_548)(car s_547)))"
" s_548))"
"(()"
"(let-values(((s_549)(cdr s_547)))"
"(let-values(((s_550)"
"(if(syntax?$1"
" s_549)"
"(syntax-e$1"
" s_549)"
" s_549)))"
"(if(null? s_550)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_46))))))"
"(values datum241_0))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_46))))))"
"(values quote-syntax239_0 datum240_0))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_46)))))"
"(values #t quote-syntax237_1 datum238_1)))"
"(values #f #f #f)))))"
"(if ok?_41"
"(let-values()"
"(let-values((()"
"(begin"
"(reference-records-all-used!(expand-context-reference-records ctx_81))"
"(values))))"
"(let-values(((ok?_43 _242_0 _243_0 kw244_0)"
"(let-values(((s_551) disarmed-s_11))"
"(let-values(((orig-s_47) s_551))"
"(let-values(((_242_1 _243_1 kw244_1)"
"(let-values(((s_552)"
"(if(syntax?$1 s_551)(syntax-e$1 s_551) s_551)))"
"(if(pair? s_552)"
"(let-values(((_245_0)"
"(let-values(((s_553)(car s_552))) s_553))"
"((_246_0 kw247_0)"
"(let-values(((s_554)(cdr s_552)))"
"(let-values(((s_555)"
"(if(syntax?$1 s_554)"
"(syntax-e$1 s_554)"
" s_554)))"
"(if(pair? s_555)"
"(let-values(((_248_0)"
"(let-values(((s_556)"
"(car s_555)))"
" s_556))"
"((kw249_0)"
"(let-values(((s_557)"
"(cdr s_555)))"
"(let-values(((s_558)"
"(if(syntax?$1"
" s_557)"
"(syntax-e$1"
" s_557)"
" s_557)))"
"(if(pair? s_558)"
"(let-values(((kw250_0)"
"(let-values(((s_559)"
"(car"
" s_558)))"
" s_559))"
"(()"
"(let-values(((s_560)"
"(cdr"
" s_558)))"
"(let-values(((s_561)"
"(if(syntax?$1"
" s_560)"
"(syntax-e$1"
" s_560)"
" s_560)))"
"(if(null?"
" s_561)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                      \"bad syntax\""
" orig-s_47))))))"
"(values kw250_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                  \"bad syntax\""
" orig-s_47))))))"
"(values _248_0 kw249_0))"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_47))))))"
"(values _245_0 _246_0 kw247_0))"
"                                                         (raise-syntax-error$1 #f \"bad syntax\" orig-s_47)))))"
"(values #t _242_1 _243_1 kw244_1))))))"
"(if(expand-context-to-parsed? ctx_81)"
"(parsed-quote-syntax15.1(keep-properties-only~ s_519) datum233_0)"
"(let-values(((s251_0) s_519)((temp252_0)(list quote-syntax232_0 datum233_0 kw244_0)))"
"(rebuild66.1 #f #f s251_0 temp252_0))))))"
"(let-values()"
"(let-values(((datum-s_0)(remove-scopes datum238_0(expand-context-scopes ctx_81))))"
"(if(expand-context-to-parsed? ctx_81)"
"(parsed-quote-syntax15.1(keep-properties-only~ s_519) datum-s_0)"
"(let-values(((s253_0) s_519)((temp254_0)(list quote-syntax237_0 datum-s_0)))"
"(rebuild66.1 #f #f s253_0 temp254_0)))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'if"
"(lambda(s_562 ctx_82)"
"(let-values((()"
"(begin"
"(let-values(((obs_76)(expand-context-observer ctx_82)))"
"(if obs_76(let-values()(let-values()(call-expand-observe obs_76 'prim-if)))(void)))"
"(values))))"
"(let-values(((disarmed-s_12)(syntax-disarm$1 s_562)))"
"(let-values(((ok?_44 if255_0 tst256_0 thn257_0 els258_0)"
"(let-values(((s_563) disarmed-s_12))"
"(let-values(((orig-s_48) s_563))"
"(let-values(((if255_1 tst256_1 thn257_1 els258_1)"
"(let-values(((s_564)(if(syntax?$1 s_563)(syntax-e$1 s_563) s_563)))"
"(if(pair? s_564)"
"(let-values(((if259_0)(let-values(((s_565)(car s_564))) s_565))"
"((tst260_0 thn261_0 els262_0)"
"(let-values(((s_566)(cdr s_564)))"
"(let-values(((s_567)"
"(if(syntax?$1 s_566)"
"(syntax-e$1 s_566)"
" s_566)))"
"(if(pair? s_567)"
"(let-values(((tst263_0)"
"(let-values(((s_568)(car s_567)))"
" s_568))"
"((thn264_0 els265_0)"
"(let-values(((s_569)(cdr s_567)))"
"(let-values(((s_570)"
"(if(syntax?$1 s_569)"
"(syntax-e$1 s_569)"
" s_569)))"
"(if(pair? s_570)"
"(let-values(((thn266_0)"
"(let-values(((s_571)"
"(car"
" s_570)))"
" s_571))"
"((els267_0)"
"(let-values(((s_572)"
"(cdr"
" s_570)))"
"(let-values(((s_573)"
"(if(syntax?$1"
" s_572)"
"(syntax-e$1"
" s_572)"
" s_572)))"
"(if(pair?"
" s_573)"
"(let-values(((els268_0)"
"(let-values(((s_574)"
"(car"
" s_573)))"
" s_574))"
"(()"
"(let-values(((s_575)"
"(cdr"
" s_573)))"
"(let-values(((s_576)"
"(if(syntax?$1"
" s_575)"
"(syntax-e$1"
" s_575)"
" s_575)))"
"(if(null?"
" s_576)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_48))))))"
"(values"
" els268_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_48))))))"
"(values thn266_0 els267_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_48))))))"
"(values tst263_0 thn264_0 els265_0))"
"                                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_48))))))"
"(values if259_0 tst260_0 thn261_0 els262_0))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_48)))))"
"(values #t if255_1 tst256_1 thn257_1 els258_1))))))"
"(let-values(((expr-ctx_2)(as-expression-context ctx_82)))"
"(let-values(((tail-ctx_0)(let-values(((ctx270_0) ctx_82))(as-tail-context21.1 ctx270_0 expr-ctx_2))))"
"(let-values(((rebuild-s_9)"
"(let-values(((ctx271_0) ctx_82)((s272_0) s_562))"
"(keep-as-needed59.1 #f #f #f #f #f #f ctx271_0 s272_0))))"
"(let-values((()"
"(begin"
"(let-values(((obs_77)(expand-context-observer ctx_82)))"
"(if obs_77"
"(let-values()(let-values()(call-expand-observe obs_77 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((exp-tst_0)"
"(let-values(((temp273_0) tst256_0)((expr-ctx274_0) expr-ctx_2))"
"(expand5.1 #f #f temp273_0 expr-ctx274_0))))"
"(let-values((()"
"(begin"
"(let-values(((obs_78)(expand-context-observer ctx_82)))"
"(if obs_78"
"(let-values()(let-values()(call-expand-observe obs_78 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-thn_0)"
"(let-values(((temp275_0) thn257_0)((tail-ctx276_0) tail-ctx_0))"
"(expand5.1 #f #f temp275_0 tail-ctx276_0))))"
"(let-values((()"
"(begin"
"(let-values(((obs_79)(expand-context-observer ctx_82)))"
"(if obs_79"
"(let-values()(let-values()(call-expand-observe obs_79 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-els_0)"
"(let-values(((temp277_0) els258_0)((tail-ctx278_0) tail-ctx_0))"
"(expand5.1 #f #f temp277_0 tail-ctx278_0))))"
"(if(expand-context-to-parsed? ctx_82)"
"(parsed-if8.1 rebuild-s_9 exp-tst_0 exp-thn_0 exp-els_0)"
"(let-values(((rebuild-s279_0) rebuild-s_9)"
"((temp280_0)(list if255_0 exp-tst_0 exp-thn_0 exp-els_0)))"
"(rebuild66.1 #f #f rebuild-s279_0 temp280_0))))))))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'with-continuation-mark"
"(lambda(s_577 ctx_83)"
"(let-values((()"
"(begin"
"(let-values(((obs_80)(expand-context-observer ctx_83)))"
"(if obs_80"
"(let-values()(let-values()(call-expand-observe obs_80 'prim-with-continuation-mark)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_13)(syntax-disarm$1 s_577)))"
"(let-values(((ok?_45 with-continuation-mark281_0 key282_0 val283_0 body284_0)"
"(let-values(((s_578) disarmed-s_13))"
"(let-values(((orig-s_49) s_578))"
"(let-values(((with-continuation-mark281_1 key282_1 val283_1 body284_1)"
"(let-values(((s_579)(if(syntax?$1 s_578)(syntax-e$1 s_578) s_578)))"
"(if(pair? s_579)"
"(let-values(((with-continuation-mark285_0)"
"(let-values(((s_580)(car s_579))) s_580))"
"((key286_0 val287_0 body288_0)"
"(let-values(((s_581)(cdr s_579)))"
"(let-values(((s_582)"
"(if(syntax?$1 s_581)"
"(syntax-e$1 s_581)"
" s_581)))"
"(if(pair? s_582)"
"(let-values(((key289_0)"
"(let-values(((s_583)(car s_582)))"
" s_583))"
"((val290_0 body291_0)"
"(let-values(((s_584)(cdr s_582)))"
"(let-values(((s_377)"
"(if(syntax?$1 s_584)"
"(syntax-e$1 s_584)"
" s_584)))"
"(if(pair? s_377)"
"(let-values(((val292_0)"
"(let-values(((s_585)"
"(car"
" s_377)))"
" s_585))"
"((body293_0)"
"(let-values(((s_586)"
"(cdr"
" s_377)))"
"(let-values(((s_587)"
"(if(syntax?$1"
" s_586)"
"(syntax-e$1"
" s_586)"
" s_586)))"
"(if(pair?"
" s_587)"
"(let-values(((body294_0)"
"(let-values(((s_588)"
"(car"
" s_587)))"
" s_588))"
"(()"
"(let-values(((s_589)"
"(cdr"
" s_587)))"
"(let-values(((s_590)"
"(if(syntax?$1"
" s_589)"
"(syntax-e$1"
" s_589)"
" s_589)))"
"(if(null?"
" s_590)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_49))))))"
"(values"
" body294_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_49))))))"
"(values val292_0 body293_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_49))))))"
"(values key289_0 val290_0 body291_0))"
"                                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_49))))))"
"(values with-continuation-mark285_0 key286_0 val287_0 body288_0))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_49)))))"
"(values #t with-continuation-mark281_1 key282_1 val283_1 body284_1))))))"
"(let-values(((expr-ctx_3)(as-expression-context ctx_83)))"
"(let-values(((rebuild-s_10)"
"(let-values(((ctx295_0) ctx_83)((s296_0) s_577))"
"(keep-as-needed59.1 #f #f #f #f #f #f ctx295_0 s296_0))))"
"(let-values(((exp-key_0)"
"(let-values(((temp297_0) key282_0)((expr-ctx298_0) expr-ctx_3))"
"(expand5.1 #f #f temp297_0 expr-ctx298_0))))"
"(let-values((()"
"(begin"
"(let-values(((obs_81)(expand-context-observer ctx_83)))"
"(if obs_81"
"(let-values()(let-values()(call-expand-observe obs_81 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-val_0)"
"(let-values(((temp299_0) val283_0)((expr-ctx300_0) expr-ctx_3))"
"(expand5.1 #f #f temp299_0 expr-ctx300_0))))"
"(let-values((()"
"(begin"
"(let-values(((obs_82)(expand-context-observer ctx_83)))"
"(if obs_82"
"(let-values()(let-values()(call-expand-observe obs_82 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_6)"
"(let-values(((temp301_0) body284_0)"
"((temp302_0)"
"(let-values(((ctx304_0) ctx_83))"
"(as-tail-context21.1 ctx304_0 expr-ctx_3))))"
"(expand5.1 #f #f temp301_0 temp302_0))))"
"(if(expand-context-to-parsed? ctx_83)"
"(parsed-with-continuation-mark10.1 rebuild-s_10 exp-key_0 exp-val_0 exp-body_6)"
"(let-values(((rebuild-s305_0) rebuild-s_10)"
"((temp306_0)"
"(list with-continuation-mark281_0 exp-key_0 exp-val_0 exp-body_6)))"
"(rebuild66.1 #f #f rebuild-s305_0 temp306_0))))))))))))))))"
" print-values)"
"(define-values"
"(make-begin20.1)"
"(lambda(last-is-tail?15_0 list-start-index14_0 log-tag18_0 parsed-begin19_0)"
"(let-values(((log-tag_1) log-tag18_0))"
"(let-values(((parsed-begin_0) parsed-begin19_0))"
"(let-values(((list-start-index_0) list-start-index14_0))"
"(let-values(((last-is-tail?_0) last-is-tail?15_0))"
"(let-values()"
"(lambda(s_591 ctx_84)"
"(let-values((()"
"(begin"
"(let-values(((obs_83)(expand-context-observer ctx_84)))"
"(if obs_83"
"(let-values()(let-values()(call-expand-observe obs_83 log-tag_1)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_14)(syntax-disarm$1 s_591)))"
"(let-values(((ok?_46 begin307_0 e308_0)"
"(let-values(((s_592) disarmed-s_14))"
"(let-values(((orig-s_50) s_592))"
"(let-values(((begin307_1 e308_1)"
"(let-values(((s_593)"
"(if(syntax?$1 s_592)(syntax-e$1 s_592) s_592)))"
"(if(pair? s_593)"
"(let-values(((begin309_0)"
"(let-values(((s_594)(car s_593))) s_594))"
"((e310_0)"
"(let-values(((s_595)(cdr s_593)))"
"(let-values(((s_596)"
"(if(syntax?$1 s_595)"
"(syntax-e$1 s_595)"
" s_595)))"
"(let-values(((flat-s_39)"
"(to-syntax-list.1 s_596)))"
"(if(not flat-s_39)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                 \"bad syntax\""
" orig-s_50))"
"(if(null? flat-s_39)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_50))"
"(let-values() flat-s_39))))))))"
"(values begin309_0 e310_0))"
"                                                        (raise-syntax-error$1 #f \"bad syntax\" orig-s_50)))))"
"(values #t begin307_1 e308_1))))))"
"(let-values(((expr-ctx_4)"
"(if last-is-tail?_0"
"(as-begin-expression-context ctx_84)"
"(as-expression-context ctx_84))))"
"(let-values(((rebuild-s_11)"
"(let-values(((ctx311_0) ctx_84)((s312_0) s_591))"
"(keep-as-needed59.1 #f #f #f #f #f #f ctx311_0 s312_0))))"
"(let-values(((exp-es_2)"
"((letrec-values(((loop_174)"
"(lambda(es_4 list-start-index_1)"
"(begin"
"(if(zero? list-start-index_1)"
"(let-values()"
"(let-values(((obs_84)"
"(expand-context-observer ctx_84)))"
"(if obs_84"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_84"
" 'enter-list"
" es_4)))"
"(void))))"
"(void))"
"(if(null? es_4)"
"(let-values() null)"
"(let-values()"
"(let-values(((rest-es_1)(cdr es_4)))"
"(begin"
"(let-values(((obs_85)"
"(expand-context-observer ctx_84)))"
"(if obs_85"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_85 'next)))"
"(void)))"
"(cons"
"(let-values(((temp313_0)(car es_4))"
"((temp314_0)"
"(if(if last-is-tail?_0"
"(null? rest-es_1)"
" #f)"
"(let-values(((ctx316_0) ctx_84))"
"(as-tail-context21.1"
" ctx316_0"
" expr-ctx_4))"
" expr-ctx_4)))"
"(expand5.1 #f #f temp313_0 temp314_0))"
"(loop_174"
" rest-es_1"
"(sub1 list-start-index_1)))))))))))"
" loop_174)"
" e308_0"
" list-start-index_0)))"
"(begin"
"(let-values(((obs_86)(expand-context-observer ctx_84)))"
"(if obs_86"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_86 'exit-list(list-tail exp-es_2 list-start-index_0))))"
"(void)))"
"(if(expand-context-to-parsed? ctx_84)"
"(parsed-begin_0 rebuild-s_11 exp-es_2)"
"(let-values(((rebuild-s317_0) rebuild-s_11)((temp318_0)(cons begin307_0 exp-es_2)))"
"(rebuild66.1 #f #f rebuild-s317_0 temp318_0))))))))))))))))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin"
"(let-values(((nonempty-begin_0)"
"(let-values(((temp319_0) 'prim-begin0)"
"((parsed-begin320_0) parsed-begin12.1)"
"((temp321_0) 0)"
"((temp322_1) #t))"
"(make-begin20.1 temp322_1 temp321_0 temp319_0 parsed-begin320_0))))"
"(lambda(s_597 ctx_85)"
"(let-values(((context_24)(expand-context-context ctx_85)))"
"(if(let-values(((or-part_333)(eq? context_24 'top-level)))"
"(if or-part_333 or-part_333(eq? context_24 'module)))"
"(let-values()"
"(let-values(((disarmed-s_15)(syntax-disarm$1 s_597)))"
"(let-values(((ok?_47 begin323_0)"
"(let-values(((s_598) disarmed-s_15))"
"(if(let-values(((s_599)(if(syntax?$1 s_598)(syntax-e$1 s_598) s_598)))"
"(if(pair? s_599)"
"(if(let-values(((s_600)(car s_599))) #t)"
"(let-values(((s_601)(cdr s_599)))"
"(let-values(((s_602)(if(syntax?$1 s_601)(syntax-e$1 s_601) s_601)))"
"(null? s_602)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((begin323_1)"
"(let-values(((s_603)"
"(if(syntax?$1 s_598)(syntax-e$1 s_598) s_598)))"
"(let-values(((begin324_0)"
"(let-values(((s_604)(car s_603))) s_604))"
"(()"
"(let-values(((s_605)(cdr s_603)))"
"(let-values(((s_606)"
"(if(syntax?$1 s_605)"
"(syntax-e$1 s_605)"
" s_605)))"
"(values)))))"
"(values begin324_0)))))"
"(values #t begin323_1)))"
"(values #f #f)))))"
"(if ok?_47 s_597(nonempty-begin_0 s_597 ctx_85)))))"
"(let-values()(nonempty-begin_0 s_597 ctx_85))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin0"
"(let-values(((temp325_0) 'prim-begin0)((parsed-begin0326_0) parsed-begin013.1)((temp327_0) 1)((temp328_0) #f))"
"(make-begin20.1 temp328_0 temp327_0 temp325_0 parsed-begin0326_0))))"
" print-values)"
"(define-values"
"(register-eventual-variable!?)"
"(lambda(id_117 ctx_86)"
"(if(if(expand-context-need-eventually-defined ctx_86)(>=(expand-context-phase ctx_86) 1) #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(expand-context-need-eventually-defined ctx_86)"
"(expand-context-phase ctx_86)"
"(lambda(l_77)(cons id_117 l_77))"
" null)"
" #t))"
"(let-values() #f))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%top"
"(let-values(((core333_0)"
"(lambda(s331_0 ctx332_0 implicit-omitted?329_0 implicit-omitted?330_0)"
"(let-values(((s_607) s331_0))"
"(let-values(((ctx_87) ctx332_0))"
"(let-values(((implicit-omitted?_0)(if implicit-omitted?330_0 implicit-omitted?329_0 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_87)(expand-context-observer ctx_87)))"
"(if obs_87"
"(let-values()"
"(let-values()(call-expand-observe obs_87 'prim-#%top)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_16)(syntax-disarm$1 s_607)))"
"(let-values(((id_118)"
"(if implicit-omitted?_0"
"(let-values() s_607)"
"(let-values()"
"(let-values(((ok?_48 #%top335_0 id336_0)"
"(let-values(((s_608) disarmed-s_16))"
"(let-values(((orig-s_51) s_608))"
"(let-values(((#%top335_1 id336_1)"
"(let-values(((s_609)"
"(if(syntax?$1 s_608)"
"(syntax-e$1 s_608)"
" s_608)))"
"(if(pair? s_609)"
"(let-values(((#%top337_0)"
"(let-values(((s_610)"
"(car"
" s_609)))"
" s_610))"
"((id338_0)"
"(let-values(((s_611)"
"(cdr"
" s_609)))"
"(if(let-values(((or-part_334)"
"(if(syntax?$1"
" s_611)"
"(symbol?"
"(syntax-e$1"
" s_611))"
" #f)))"
"(if or-part_334"
" or-part_334"
"(symbol?"
" s_611)))"
" s_611"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"not an identifier\""
" orig-s_51"
" s_611)))))"
"(values #%top337_0 id338_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_51)))))"
"(values #t #%top335_1 id336_1))))))"
" id336_0)))))"
"(let-values(((b_90)"
"(let-values(((temp340_0)(expand-context-phase ctx_87))"
"((temp341_0) 'ambiguous))"
"(resolve+shift30.1"
" temp341_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id_118"
" temp340_0))))"
"(if(eq? b_90 'ambiguous)"
"(let-values()(raise-ambiguous-error id_118 ctx_87))"
"(if(if b_90"
"(if(module-binding? b_90)"
"(eq?"
"(module-binding-module b_90)"
"(namespace-mpi(expand-context-namespace ctx_87)))"
" #f)"
" #f)"
"(let-values()"
"(if(expand-context-to-parsed? ctx_87)"
"(parsed-id2.1 id_118 b_90 #f)"
"(if(top-level-module-path-index?(module-binding-module b_90))"
"(let-values() s_607)"
"(let-values() id_118))))"
"(if(register-eventual-variable!? id_118 ctx_87)"
"(let-values()"
"(if(expand-context-to-parsed? ctx_87)"
"(parsed-id2.1 id_118 b_90 #f)"
" id_118))"
"(let-values()"
"(if(not(expand-context-allow-unbound? ctx_87))"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" id_118"
" #f"
" null"
"(syntax-debug-info-string id_118 ctx_87)))"
"(let-values()"
"(let-values(((tl-id_1)"
"(add-scope"
" id_118"
"(root-expand-context-top-level-bind-scope ctx_87))))"
"(let-values(((tl-b_1)"
"(let-values(((tl-id342_0) tl-id_1)"
"((temp343_0)"
"(expand-context-phase ctx_87)))"
"(resolve29.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" tl-id342_0"
" temp343_0))))"
"(if tl-b_1"
"(let-values()"
"(if(expand-context-to-parsed? ctx_87)"
"(parsed-top-id4.1 tl-id_1 tl-b_1 #f)"
"(if implicit-omitted?_0"
"(let-values() id_118)"
"(let-values()"
"(let-values(((ok?_49 #%top344_0 id345_0)"
"(let-values(((s_612) disarmed-s_16))"
"(let-values(((orig-s_52) s_612))"
"(let-values(((#%top344_1 id345_1)"
"(let-values(((s_613)"
"(if(syntax?$1"
" s_612)"
"(syntax-e$1"
" s_612)"
" s_612)))"
"(if(pair? s_613)"
"(let-values(((#%top346_0)"
"(let-values(((s_614)"
"(car"
" s_613)))"
" s_614))"
"((id347_0)"
"(let-values(((s_615)"
"(cdr"
" s_613)))"
"(if(let-values(((or-part_335)"
"(if(syntax?$1"
" s_615)"
"(symbol?"
"(syntax-e$1"
" s_615))"
" #f)))"
"(if or-part_335"
" or-part_335"
"(symbol?"
" s_615)))"
" s_615"
"(raise-syntax-error$1"
" #f"
"                                                                                                                      \"not an identifier\""
" orig-s_52"
" s_615)))))"
"(values"
" #%top346_0"
" id347_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_52)))))"
"(values #t #%top344_1 id345_1))))))"
"(let-values(((s348_0) s_607)"
"((temp349_0)(cons #%top344_0 id_118)))"
"(rebuild66.1 #f #f s348_0 temp349_0)))))))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_87)"
"(parsed-top-id4.1 id_118 b_90 #f)"
" s_607))))))))))))))))))))))"
"(case-lambda"
"((s_616 ctx_88)(core333_0 s_616 ctx_88 #f #f))"
"((s_617 ctx_89 implicit-omitted?329_1)(core333_0 s_617 ctx_89 implicit-omitted?329_1 #t))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'set!"
"(lambda(s_618 ctx_90)"
"(let-values((()"
"(begin"
"(let-values(((obs_88)(expand-context-observer ctx_90)))"
"(if obs_88(let-values()(let-values()(call-expand-observe obs_88 'prim-set!)))(void)))"
"(values))))"
"(let-values(((disarmed-s_17)(syntax-disarm$1 s_618)))"
"(let-values(((ok?_50 set!350_0 id351_0 rhs352_0)"
"(let-values(((s_619) disarmed-s_17))"
"(let-values(((orig-s_53) s_619))"
"(let-values(((set!350_1 id351_1 rhs352_1)"
"(let-values(((s_620)(if(syntax?$1 s_619)(syntax-e$1 s_619) s_619)))"
"(if(pair? s_620)"
"(let-values(((set!353_0)(let-values(((s_621)(car s_620))) s_621))"
"((id354_0 rhs355_0)"
"(let-values(((s_622)(cdr s_620)))"
"(let-values(((s_623)"
"(if(syntax?$1 s_622)"
"(syntax-e$1 s_622)"
" s_622)))"
"(if(pair? s_623)"
"(let-values(((id356_0)"
"(let-values(((s_624)(car s_623)))"
"(if(let-values(((or-part_336)"
"(if(syntax?$1"
" s_624)"
"(symbol?"
"(syntax-e$1"
" s_624))"
" #f)))"
"(if or-part_336"
" or-part_336"
"(symbol? s_624)))"
" s_624"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"not an identifier\""
" orig-s_53"
" s_624))))"
"((rhs357_0)"
"(let-values(((s_625)(cdr s_623)))"
"(let-values(((s_626)"
"(if(syntax?$1 s_625)"
"(syntax-e$1 s_625)"
" s_625)))"
"(if(pair? s_626)"
"(let-values(((rhs358_0)"
"(let-values(((s_627)"
"(car"
" s_626)))"
" s_627))"
"(()"
"(let-values(((s_628)"
"(cdr"
" s_626)))"
"(let-values(((s_629)"
"(if(syntax?$1"
" s_628)"
"(syntax-e$1"
" s_628)"
" s_628)))"
"(if(null?"
" s_629)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_53))))))"
"(values rhs358_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_53))))))"
"(values id356_0 rhs357_0))"
"                                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_53))))))"
"(values set!353_0 id354_0 rhs355_0))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_53)))))"
"(values #t set!350_1 id351_1 rhs352_1))))))"
"(let-values(((id_119) id351_0))"
"((letrec-values(((rename-loop_0)"
"(lambda(id_120 from-rename?_0)"
"(let-values(((binding_30)"
"(let-values(((temp360_0)(expand-context-phase ctx_90))"
"((temp361_0) 'ambiguous)"
"((temp362_0) #t))"
"(resolve+shift30.1"
" temp361_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp362_0"
" #t"
" #f"
" #f"
" id_120"
" temp360_0))))"
"(let-values((()"
"(begin"
"(if(eq? binding_30 'ambiguous)"
"(let-values()(raise-ambiguous-error id_120 ctx_90))"
"(void))"
"(values))))"
"(let-values(((t_58 primitive?_11 insp_20)"
"(if binding_30"
"(let-values(((binding363_0) binding_30)"
"((ctx364_0) ctx_90)"
"((s365_0) s_618))"
"(lookup15.1 #f #f #f #f binding363_0 ctx364_0 s365_0))"
"(values #f #f #f))))"
"(begin"
"(let-values(((obs_89)(expand-context-observer ctx_90)))"
"(if obs_89"
"(let-values()"
"(let-values()(call-expand-observe obs_89 'resolve id_120)))"
"(void)))"
"(if(let-values(((or-part_337)(variable? t_58)))"
"(if or-part_337"
" or-part_337"
"(if(not binding_30)"
"(let-values(((or-part_338)"
"(register-eventual-variable!? id_120 ctx_90)))"
"(if or-part_338"
" or-part_338"
"(expand-context-allow-unbound? ctx_90)))"
" #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(if(module-binding? binding_30)"
"(not"
"(eq?"
"(module-binding-module binding_30)"
"(namespace-mpi"
"(expand-context-namespace ctx_90))))"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                    \"cannot mutate module-required identifier\""
" s_618"
" id_120))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_90)"
"(expand-context-observer ctx_90)))"
"(if obs_90"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_90 'next)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(register-variable-referenced-if-local! binding_30)"
"(values))))"
"(let-values(((rebuild-s_12)"
"(let-values(((ctx366_0) ctx_90)((s367_0) s_618))"
"(keep-as-needed59.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ctx366_0"
" s367_0))))"
"(let-values(((exp-rhs_5)"
"(let-values(((temp368_0) rhs352_0)"
"((temp369_0)"
"(as-expression-context ctx_90)))"
"(expand5.1 #f #f temp368_0 temp369_0))))"
"(if(expand-context-to-parsed? ctx_90)"
"(parsed-set!9.1"
" rebuild-s_12"
"(parsed-id2.1 id_120 binding_30 #f)"
" exp-rhs_5)"
"(let-values(((rebuild-s370_0) rebuild-s_12)"
"((temp371_0)"
"(list"
" set!350_0"
"(let-values(((temp374_0)"
"(free-id-set-empty-or-just-module*?"
"(expand-context-stops"
" ctx_90))))"
"(substitute-variable6.1"
" temp374_0"
" id_120"
" t_58))"
" exp-rhs_5)))"
"(rebuild66.1 #f #f rebuild-s370_0 temp371_0)))))))))"
"(if(not binding_30)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" s_618"
" id_120"
" null"
"(syntax-debug-info-string id_120 ctx_90)))"
"(if(1/set!-transformer? t_58)"
"(let-values()"
"(if(not-in-this-expand-context? t_58 ctx_90)"
"(let-values()"
"(let-values(((temp375_0)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_618"
" disarmed-s_17"
" set!350_0"
" rhs352_0"
" id_120"
" from-rename?_0"
" ctx_90)"
" t_58"
" ctx_90))"
"((ctx376_0) ctx_90))"
"(expand5.1 #f #f temp375_0 ctx376_0)))"
"(let-values()"
"(let-values(((exp-s_12 re-ctx_1)"
"(apply-transformer"
" t_58"
" insp_20"
" s_618"
" id_120"
" ctx_90"
" binding_30)))"
"(if(expand-context-just-once? ctx_90)"
"(let-values() exp-s_12)"
"(let-values()"
"(let-values(((exp-s377_0) exp-s_12)"
"((re-ctx378_0) re-ctx_1))"
"(expand5.1 #f #f exp-s377_0 re-ctx378_0))))))))"
"(if(1/rename-transformer? t_58)"
"(let-values()"
"(if(not-in-this-expand-context? t_58 ctx_90)"
"(let-values()"
"(let-values(((temp379_0)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_618"
" disarmed-s_17"
" set!350_0"
" rhs352_0"
" id_120"
" from-rename?_0"
" ctx_90"
" t_58)"
" t_58"
" ctx_90))"
"((ctx380_0) ctx_90))"
"(expand5.1 #f #f temp379_0 ctx380_0)))"
"(let-values()"
"(rename-loop_0"
"(rename-transformer-target-in-context t_58 ctx_90)"
" #t))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                      \"cannot mutate syntax identifier\""
" s_618"
" id_120)))))))))))))"
" rename-loop_0)"
" id_119"
" #f))))))))"
" print-values)"
"(define-values"
"(substitute-set!-rename)"
"(let-values(((substitute-set!-rename32_0)"
"(lambda(s25_0 disarmed-s26_0 set!-id27_0 id28_0 rhs-s29_0 from-rename?30_0 ctx31_1 t23_0 t24_0)"
"(let-values(((s_630) s25_0))"
"(let-values(((disarmed-s_18) disarmed-s26_0))"
"(let-values(((set!-id_0) set!-id27_0))"
"(let-values(((id_121) id28_0))"
"(let-values(((rhs-s_0) rhs-s29_0))"
"(let-values(((from-rename?_1) from-rename?30_0))"
"(let-values(((ctx_91) ctx31_1))"
"(let-values(((t_59)(if t24_0 t23_0 #f)))"
"(let-values()"
"(if(let-values(((or-part_339) t_59))(if or-part_339 or-part_339 from-rename?_1))"
"(let-values()"
"(let-values(((new-id_1)"
"(if t_59"
"(rename-transformer-target-in-context t_59 ctx_91)"
" id_121)))"
"(syntax-rearm$1"
"(datum->syntax$1"
" disarmed-s_18"
"(list set!-id_0 new-id_1 rhs-s_0)"
" disarmed-s_18"
" disarmed-s_18)"
" s_630)))"
"(let-values() s_630))))))))))))))"
"(case-lambda"
"((s_631 disarmed-s_19 set!-id_1 id_122 rhs-s_1 from-rename?_2 ctx_92)"
"(substitute-set!-rename32_0 s_631 disarmed-s_19 set!-id_1 id_122 rhs-s_1 from-rename?_2 ctx_92 #f #f))"
"((s_632 disarmed-s_20 set!-id_2 id_123 rhs-s_2 from-rename?_3 ctx_93 t23_1)"
"(substitute-set!-rename32_0 s_632 disarmed-s_20 set!-id_2 id_123 rhs-s_2 from-rename?_3 ctx_93 t23_1 #t)))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%variable-reference"
"(lambda(s_633 ctx_94)"
"(let-values((()"
"(begin"
"(let-values(((obs_91)(expand-context-observer ctx_94)))"
"(if obs_91"
"(let-values()(let-values()(call-expand-observe obs_91 'prim-#%variable-reference)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_21)(syntax-disarm$1 s_633)))"
"(let-values(((ok?_51 #%variable-reference381_0 id382_0)"
"(let-values(((s_634) disarmed-s_21))"
"(if(let-values(((s_635)(if(syntax?$1 s_634)(syntax-e$1 s_634) s_634)))"
"(if(pair? s_635)"
"(if(let-values(((s_636)(car s_635))) #t)"
"(let-values(((s_637)(cdr s_635)))"
"(let-values(((s_638)(if(syntax?$1 s_637)(syntax-e$1 s_637) s_637)))"
"(if(pair? s_638)"
"(if(let-values(((s_639)(car s_638)))"
"(let-values(((or-part_340)"
"(if(syntax?$1 s_639)(symbol?(syntax-e$1 s_639)) #f)))"
"(if or-part_340 or-part_340(symbol? s_639))))"
"(let-values(((s_640)(cdr s_638)))"
"(let-values(((s_641)(if(syntax?$1 s_640)(syntax-e$1 s_640) s_640)))"
"(null? s_641)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((#%variable-reference381_1 id382_1)"
"(let-values(((s_642)(if(syntax?$1 s_634)(syntax-e$1 s_634) s_634)))"
"(let-values(((#%variable-reference383_0)"
"(let-values(((s_643)(car s_642))) s_643))"
"((id384_0)"
"(let-values(((s_644)(cdr s_642)))"
"(let-values(((s_645)"
"(if(syntax?$1 s_644)"
"(syntax-e$1 s_644)"
" s_644)))"
"(let-values(((id385_0)"
"(let-values(((s_646)(car s_645)))"
" s_646))"
"(()"
"(let-values(((s_647)(cdr s_645)))"
"(let-values(((s_648)"
"(if(syntax?$1 s_647)"
"(syntax-e$1 s_647)"
" s_647)))"
"(values)))))"
"(values id385_0))))))"
"(values #%variable-reference383_0 id384_0)))))"
"(values #t #%variable-reference381_1 id382_1)))"
"(values #f #f #f)))))"
"(let-values(((ok?_52 #%variable-reference386_0 #%top387_0 id388_0)"
"(let-values(((s_649) disarmed-s_21))"
"(if(if(not ok?_51)"
"(let-values(((s_650)(if(syntax?$1 s_649)(syntax-e$1 s_649) s_649)))"
"(if(pair? s_650)"
"(if(let-values(((s_651)(car s_650))) #t)"
"(let-values(((s_652)(cdr s_650)))"
"(let-values(((s_653)(if(syntax?$1 s_652)(syntax-e$1 s_652) s_652)))"
"(if(pair? s_653)"
"(if(let-values(((s_654)(car s_653)))"
"(let-values(((s_655)"
"(if(syntax?$1 s_654)(syntax-e$1 s_654) s_654)))"
"(if(pair? s_655)"
"(if(let-values(((s_656)(car s_655))) #t)"
"(let-values(((s_657)(cdr s_655)))"
"(let-values(((or-part_341)"
"(if(syntax?$1 s_657)"
"(symbol?(syntax-e$1 s_657))"
" #f)))"
"(if or-part_341 or-part_341(symbol? s_657))))"
" #f)"
" #f)))"
"(let-values(((s_658)(cdr s_653)))"
"(let-values(((s_659)"
"(if(syntax?$1 s_658)(syntax-e$1 s_658) s_658)))"
"(null? s_659)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values()"
"(let-values(((#%variable-reference386_1 #%top387_1 id388_1)"
"(let-values(((s_660)(if(syntax?$1 s_649)(syntax-e$1 s_649) s_649)))"
"(let-values(((#%variable-reference389_0)"
"(let-values(((s_661)(car s_660))) s_661))"
"((#%top390_0 id391_0)"
"(let-values(((s_662)(cdr s_660)))"
"(let-values(((s_663)"
"(if(syntax?$1 s_662)"
"(syntax-e$1 s_662)"
" s_662)))"
"(let-values(((#%top392_0 id393_0)"
"(let-values(((s_664)(car s_663)))"
"(let-values(((s_665)"
"(if(syntax?$1 s_664)"
"(syntax-e$1 s_664)"
" s_664)))"
"(let-values(((#%top394_0)"
"(let-values(((s_666)"
"(car"
" s_665)))"
" s_666))"
"((id395_0)"
"(let-values(((s_667)"
"(cdr"
" s_665)))"
" s_667)))"
"(values #%top394_0 id395_0)))))"
"(()"
"(let-values(((s_668)(cdr s_663)))"
"(let-values(((s_669)"
"(if(syntax?$1 s_668)"
"(syntax-e$1 s_668)"
" s_668)))"
"(values)))))"
"(values #%top392_0 id393_0))))))"
"(values #%variable-reference389_0 #%top390_0 id391_0)))))"
"(values #t #%variable-reference386_1 #%top387_1 id388_1)))"
"(values #f #f #f #f)))))"
"(let-values(((ok?_53 #%variable-reference396_0)"
"(let-values(((s_670) disarmed-s_21))"
"(if(if(not(let-values(((or-part_342) ok?_51))(if or-part_342 or-part_342 ok?_52)))"
" #t"
" #f)"
"(let-values(((orig-s_54) s_670))"
"(let-values(((#%variable-reference396_1)"
"(let-values(((s_671)(if(syntax?$1 s_670)(syntax-e$1 s_670) s_670)))"
"(if(pair? s_671)"
"(let-values(((#%variable-reference397_0)"
"(let-values(((s_672)(car s_671))) s_672))"
"(()"
"(let-values(((s_673)(cdr s_671)))"
"(let-values(((s_674)"
"(if(syntax?$1 s_673)"
"(syntax-e$1 s_673)"
" s_673)))"
"(if(null? s_674)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_54))))))"
"(values #%variable-reference397_0))"
"                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_54)))))"
"(values #t #%variable-reference396_1)))"
"(values #f #f)))))"
"(if(let-values(((or-part_343) ok?_51))(if or-part_343 or-part_343 ok?_52))"
"(let-values()"
"(let-values(((var-id_0)(if ok?_51 id382_0 id388_0)))"
"(let-values(((binding_31)"
"(let-values(((temp399_0)(expand-context-phase ctx_94))((temp400_0) 'ambiguous))"
"(resolve+shift30.1 temp400_0 #t #f #f #f #f #f #f #f #f var-id_0 temp399_0))))"
"(begin"
"(if(eq? binding_31 'ambiguous)"
"(let-values()(raise-ambiguous-error var-id_0 ctx_94))"
"(void))"
"(if binding_31"
"(void)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                \"unbound identifier\""
" s_633"
" var-id_0"
" null"
"(syntax-debug-info-string var-id_0 ctx_94))))"
"(if(expand-context-to-parsed? ctx_94)"
"(parsed-#%variable-reference11.1"
"(keep-properties-only~ s_633)"
"(if ok?_52"
"(parsed-top-id4.1 var-id_0 binding_31 #f)"
"(parsed-id2.1 var-id_0 binding_31 #f)))"
" s_633)))))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_94)"
"(parsed-#%variable-reference11.1(keep-properties-only~ s_633) #f)"
" s_633)))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%expression"
"(lambda(s_675 ctx_95)"
"(let-values((()"
"(begin"
"(let-values(((obs_92)(expand-context-observer ctx_95)))"
"(if obs_92"
"(let-values()(let-values()(call-expand-observe obs_92 'prim-#%expression)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_22)(syntax-disarm$1 s_675)))"
"(let-values(((ok?_54 #%expression401_0 e402_0)"
"(let-values(((s_676) disarmed-s_22))"
"(let-values(((orig-s_55) s_676))"
"(let-values(((#%expression401_1 e402_1)"
"(let-values(((s_677)(if(syntax?$1 s_676)(syntax-e$1 s_676) s_676)))"
"(if(pair? s_677)"
"(let-values(((#%expression403_0)"
"(let-values(((s_678)(car s_677))) s_678))"
"((e404_0)"
"(let-values(((s_679)(cdr s_677)))"
"(let-values(((s_680)"
"(if(syntax?$1 s_679)"
"(syntax-e$1 s_679)"
" s_679)))"
"(if(pair? s_680)"
"(let-values(((e405_0)"
"(let-values(((s_681)(car s_680)))"
" s_681))"
"(()"
"(let-values(((s_682)(cdr s_680)))"
"(let-values(((s_683)"
"(if(syntax?$1 s_682)"
"(syntax-e$1 s_682)"
" s_682)))"
"(if(null? s_683)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_55))))))"
"(values e405_0))"
"                                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_55))))))"
"(values #%expression403_0 e404_0))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_55)))))"
"(values #t #%expression401_1 e402_1))))))"
"(let-values(((rebuild-s_13)"
"(let-values(((temp408_0) #t))(keep-as-needed59.1 temp408_0 #t #f #f #f #f ctx_95 s_675))))"
"(let-values(((exp-e_0)"
"(let-values(((temp409_0) e402_0)"
"((temp410_0)"
"(let-values(((temp411_0)(as-expression-context ctx_95))"
"((ctx412_0) ctx_95))"
"(as-tail-context21.1 ctx412_0 temp411_0))))"
"(expand5.1 #f #f temp409_0 temp410_0))))"
"(if(expand-context-to-parsed? ctx_95)"
" exp-e_0"
"(let-values(((tmp_57)"
"(if(not(expand-context-in-local-expand? ctx_95))"
"(expand-context-context ctx_95)"
" #f)))"
"(if(equal? tmp_57 'expression)"
"(let-values()"
"(let-values(((result-s_11)(syntax-track-origin$1 exp-e_0 rebuild-s_13)))"
"(begin"
"(let-values(((obs_93)(expand-context-observer ctx_95)))"
"(if obs_93"
"(let-values()(let-values()(call-expand-observe obs_93 'tag result-s_11)))"
"(void)))"
" result-s_11)))"
"(let-values()"
"(let-values(((rebuild-s413_0) rebuild-s_13)((temp414_0)(list #%expression401_0 exp-e_0)))"
"(rebuild66.1 #f #f rebuild-s413_0 temp414_0))))))))))))))"
" print-values)"
"(call-with-values"
"  (lambda () (add-core-form! 'unquote (lambda (s_684 ctx_96) (raise-syntax-error$1 #f \"not in quasiquote\" s_684))))"
" print-values)"
"(call-with-values"
"(lambda()"
"    (add-core-form! 'unquote-splicing (lambda (s_685 ctx_97) (raise-syntax-error$1 #f \"not in quasiquote\" s_685))))"
" print-values)"
"(define-values"
"(binding-for-transformer?)"
"(lambda(b_42 id_124 at-phase_12 ns_116)"
"(if(not at-phase_12)"
"(let-values()"
"(let-values(((m_29)"
"(namespace->module ns_116(1/module-path-index-resolve(module-binding-nominal-module b_42)))))"
"(let-values(((b/p_4)"
"(hash-ref"
"(hash-ref(module-provides m_29)(module-binding-nominal-phase b_42) '#hasheq())"
"(module-binding-nominal-sym b_42)"
" #f)))"
"(provided-as-transformer? b/p_4))))"
"(let-values()"
"(let-values(((val_75 primitive?_12 insp_21)"
"(let-values(((b1_60) b_42)"
"((empty-env2_0) empty-env)"
"((null3_0) null)"
"((ns4_0) ns_116)"
"((at-phase5_0) at-phase_12)"
"((id6_0) id_124))"
"(binding-lookup48.1 #f #f #f #f b1_60 empty-env2_0 null3_0 ns4_0 at-phase5_0 id6_0))))"
"(not(variable? val_75)))))))"
"(define-values(layers) '(raw phaseless id))"
"(define-values(provide-form-name) 'provide)"
"(define-values"
"(parse-and-expand-provides!)"
"(lambda(specs_0 orig-s_56 rp_1 self_27 phase_43 ctx_98)"
"(let-values(((ns_117)(expand-context-namespace ctx_98)))"
"((letrec-values(((loop_163)"
"(lambda(specs_1 at-phase_11 protected?_4 layer_6)"
"(let-values(((track-stxess_0 exp-specss_0)"
"(let-values(((track-stxes_0 exp-specs_0)"
"(let-values(((lst_95) specs_1))"
"(begin"
"(check-list lst_95)"
"((letrec-values(((for-loop_103)"
"(lambda(track-stxes_1 exp-specs_1 lst_248)"
"(if(pair? lst_248)"
"(let-values(((spec_0)"
"(unsafe-car lst_248))"
"((rest_220)"
"(unsafe-cdr lst_248)))"
"(let-values(((track-stxes_2"
" exp-specs_2)"
"(let-values(((track-stxes_3)"
" track-stxes_1)"
"((exp-specs_3)"
" exp-specs_1))"
"(let-values(((track-stxes_4"
" exp-specs_4)"
"(let-values()"
"(let-values(((track-stxes1_0"
" exp-specs2_0)"
"(let-values()"
"(let-values(((disarmed-spec_0)"
"(syntax-disarm$1"
" spec_0)))"
"(let-values(((fm_2)"
"(if(pair?"
"(syntax-e$1"
" disarmed-spec_0))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" disarmed-spec_0)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" disarmed-spec_0)))"
" #f)"
" #f)))"
"(let-values(((check-nested_1)"
"(lambda(want-layer_3)"
"(if(member"
" want-layer_3"
"(member"
" layer_6"
" layers))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"                                                                                                                                                            \"nested `~a' not allowed\""
" fm_2)"
" orig-s_56"
" spec_0))))))"
"(let-values(((tmp_58)"
" fm_2))"
"(let-values(((index_5)"
"(if(symbol?"
" tmp_58)"
"(hash-ref"
" '#hasheq((rename ."
" 5)"
"(all-from-except"
" ."
" 8)"
"(for-meta"
" ."
" 1)"
"(all-defined-except"
" ."
" 10)"
"(for-syntax"
" ."
" 2)"
"(all-from"
" ."
" 7)"
"(prefix-all-defined"
" ."
" 11)"
"(protect"
" ."
" 4)"
"(prefix-all-defined-except"
" ."
" 12)"
"(struct"
" ."
" 6)"
"(all-defined"
" ."
" 9)"
"(expand"
" ."
" 13)"
"(for-label"
" ."
" 3))"
" tmp_58"
"(lambda()"
" 0))"
" 0)))"
"(if(unsafe-fx<"
" index_5"
" 6)"
"(if(unsafe-fx<"
" index_5"
" 2)"
"(if(unsafe-fx<"
" index_5"
" 1)"
"(let-values()"
"(if(identifier?"
" spec_0)"
"(let-values()"
"(begin"
"(parse-identifier!"
" spec_0"
" orig-s_56"
"(syntax-e$1"
" spec_0)"
" at-phase_11"
" ns_117"
" rp_1"
" protected?_4)"
"(values"
" null"
"(list"
" spec_0))))"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                         \"bad syntax\""
" orig-s_56"
" spec_0))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'raw)"
"(values))))"
"(let-values(((ok?_55"
" for-meta3_0"
" phase-level4_0"
" spec5_0)"
"(let-values(((s_191)"
" disarmed-spec_0))"
"(let-values(((orig-s_57)"
" s_191))"
"(let-values(((for-meta3_1"
" phase-level4_1"
" spec5_1)"
"(let-values(((s_88)"
"(if(syntax?$1"
" s_191)"
"(syntax-e$1"
" s_191)"
" s_191)))"
"(if(pair?"
" s_88)"
"(let-values(((for-meta6_0)"
"(let-values(((s_173)"
"(car"
" s_88)))"
" s_173))"
"((phase-level7_0"
" spec8_0)"
"(let-values(((s_82)"
"(cdr"
" s_88)))"
"(let-values(((s_403)"
"(if(syntax?$1"
" s_82)"
"(syntax-e$1"
" s_82)"
" s_82)))"
"(if(pair?"
" s_403)"
"(let-values(((phase-level9_0)"
"(let-values(((s_175)"
"(car"
" s_403)))"
" s_175))"
"((spec10_0)"
"(let-values(((s_404)"
"(cdr"
" s_403)))"
"(let-values(((s_147)"
"(if(syntax?$1"
" s_404)"
"(syntax-e$1"
" s_404)"
" s_404)))"
"(let-values(((flat-s_40)"
"(to-syntax-list.1"
" s_147)))"
"(if(not"
" flat-s_40)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_57))"
"(let-values()"
" flat-s_40)))))))"
"(values"
" phase-level9_0"
" spec10_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_57))))))"
"(values"
" for-meta6_0"
" phase-level7_0"
" spec8_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_57)))))"
"(values"
" #t"
" for-meta3_1"
" phase-level4_1"
" spec5_1))))))"
"(let-values(((p_67)"
"(syntax-e$1"
" phase-level4_0)))"
"(let-values((()"
"(begin"
"(if(phase?"
" p_67)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                               \"bad `for-meta' phase\""
" orig-s_56"
" spec_0)))"
"(values))))"
"(let-values(((track-stxes_5"
" exp-specs_5)"
"(loop_163"
" spec5_0"
"(phase+"
" p_67"
" at-phase_11)"
" protected?_4"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_5"
"(let-values(((spec11_0)"
" spec_0)"
"((temp12_4)"
"(list*"
" for-meta3_0"
" phase-level4_0"
" exp-specs_5)))"
"(rebuild66.1"
" #f"
" #f"
" spec11_0"
" temp12_4))))))))))))"
"(if(unsafe-fx<"
" index_5"
" 3)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'raw)"
"(values))))"
"(let-values(((ok?_56"
" for-syntax13_0"
" spec14_0)"
"(let-values(((s_21)"
" disarmed-spec_0))"
"(let-values(((orig-s_38)"
" s_21))"
"(let-values(((for-syntax13_1"
" spec14_1)"
"(let-values(((s_24)"
"(if(syntax?$1"
" s_21)"
"(syntax-e$1"
" s_21)"
" s_21)))"
"(if(pair?"
" s_24)"
"(let-values(((for-syntax15_0)"
"(let-values(((s_445)"
"(car"
" s_24)))"
" s_445))"
"((spec16_0)"
"(let-values(((s_26)"
"(cdr"
" s_24)))"
"(let-values(((s_387)"
"(if(syntax?$1"
" s_26)"
"(syntax-e$1"
" s_26)"
" s_26)))"
"(let-values(((flat-s_41)"
"(to-syntax-list.1"
" s_387)))"
"(if(not"
" flat-s_41)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_38))"
"(let-values()"
" flat-s_41)))))))"
"(values"
" for-syntax15_0"
" spec16_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_38)))))"
"(values"
" #t"
" for-syntax13_1"
" spec14_1))))))"
"(let-values(((track-stxes_6"
" exp-specs_6)"
"(loop_163"
" spec14_0"
"(phase+"
" 1"
" at-phase_11)"
" protected?_4"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_6"
"(let-values(((spec17_0)"
" spec_0)"
"((temp18_4)"
"(list*"
" for-syntax13_0"
" exp-specs_6)))"
"(rebuild66.1"
" #f"
" #f"
" spec17_0"
" temp18_4)))))))))"
"(if(unsafe-fx<"
" index_5"
" 4)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'raw)"
"(values))))"
"(let-values(((ok?_57"
" for-label19_0"
" spec20_0)"
"(let-values(((s_71)"
" disarmed-spec_0))"
"(let-values(((orig-s_3)"
" s_71))"
"(let-values(((for-label19_1"
" spec20_1)"
"(let-values(((s_686)"
"(if(syntax?$1"
" s_71)"
"(syntax-e$1"
" s_71)"
" s_71)))"
"(if(pair?"
" s_686)"
"(let-values(((for-label21_0)"
"(let-values(((s_390)"
"(car"
" s_686)))"
" s_390))"
"((spec22_0)"
"(let-values(((s_687)"
"(cdr"
" s_686)))"
"(let-values(((s_419)"
"(if(syntax?$1"
" s_687)"
"(syntax-e$1"
" s_687)"
" s_687)))"
"(let-values(((flat-s_42)"
"(to-syntax-list.1"
" s_419)))"
"(if(not"
" flat-s_42)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_3))"
"(let-values()"
" flat-s_42)))))))"
"(values"
" for-label21_0"
" spec22_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_3)))))"
"(values"
" #t"
" for-label19_1"
" spec20_1))))))"
"(let-values(((track-stxes_7"
" exp-specs_7)"
"(loop_163"
" spec20_0"
" #f"
" protected?_4"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_7"
"(let-values(((spec23_0)"
" spec_0)"
"((temp24_11)"
"(list*"
" for-label19_0"
" exp-specs_7)))"
"(rebuild66.1"
" #f"
" #f"
" spec23_0"
" temp24_11)))))))))"
"(if(unsafe-fx<"
" index_5"
" 5)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values((()"
"(begin"
"(if protected?_4"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                               \"nested `protect' not allowed\""
" orig-s_56"
" spec_0))"
"(void))"
"(values))))"
"(let-values(((ok?_58"
" protect25_0"
" p-spec26_0)"
"(let-values(((s_454)"
" disarmed-spec_0))"
"(let-values(((orig-s_58)"
" s_454))"
"(let-values(((protect25_1"
" p-spec26_1)"
"(let-values(((s_32)"
"(if(syntax?$1"
" s_454)"
"(syntax-e$1"
" s_454)"
" s_454)))"
"(if(pair?"
" s_32)"
"(let-values(((protect27_0)"
"(let-values(((s_448)"
"(car"
" s_32)))"
" s_448))"
"((p-spec28_0)"
"(let-values(((s_459)"
"(cdr"
" s_32)))"
"(let-values(((s_89)"
"(if(syntax?$1"
" s_459)"
"(syntax-e$1"
" s_459)"
" s_459)))"
"(let-values(((flat-s_43)"
"(to-syntax-list.1"
" s_89)))"
"(if(not"
" flat-s_43)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_58))"
"(let-values()"
" flat-s_43)))))))"
"(values"
" protect27_0"
" p-spec28_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_58)))))"
"(values"
" #t"
" protect25_1"
" p-spec26_1))))))"
"(let-values(((track-stxes_8"
" exp-specs_8)"
"(loop_163"
" p-spec26_0"
" at-phase_11"
" #t"
" layer_6)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_8"
"(let-values(((spec29_0)"
" spec_0)"
"((temp30_7)"
"(list*"
" protect25_0"
" exp-specs_8)))"
"(rebuild66.1"
" #f"
" #f"
" spec29_0"
" temp30_7))))))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_59"
" rename31_0"
" id:from32_0"
" id:to33_0)"
"(let-values(((s_688)"
" disarmed-spec_0))"
"(let-values(((orig-s_59)"
" s_688))"
"(let-values(((rename31_1"
" id:from32_1"
" id:to33_1)"
"(let-values(((s_203)"
"(if(syntax?$1"
" s_688)"
"(syntax-e$1"
" s_688)"
" s_688)))"
"(if(pair?"
" s_203)"
"(let-values(((rename34_0)"
"(let-values(((s_156)"
"(car"
" s_203)))"
" s_156))"
"((id:from35_0"
" id:to36_0)"
"(let-values(((s_205)"
"(cdr"
" s_203)))"
"(let-values(((s_689)"
"(if(syntax?$1"
" s_205)"
"(syntax-e$1"
" s_205)"
" s_205)))"
"(if(pair?"
" s_689)"
"(let-values(((id:from37_0)"
"(let-values(((s_49)"
"(car"
" s_689)))"
"(if(let-values(((or-part_344)"
"(if(syntax?$1"
" s_49)"
"(symbol?"
"(syntax-e$1"
" s_49))"
" #f)))"
"(if or-part_344"
" or-part_344"
"(symbol?"
" s_49)))"
" s_49"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_59"
" s_49))))"
"((id:to38_0)"
"(let-values(((s_382)"
"(cdr"
" s_689)))"
"(let-values(((s_187)"
"(if(syntax?$1"
" s_382)"
"(syntax-e$1"
" s_382)"
" s_382)))"
"(if(pair?"
" s_187)"
"(let-values(((id:to39_0)"
"(let-values(((s_50)"
"(car"
" s_187)))"
"(if(let-values(((or-part_345)"
"(if(syntax?$1"
" s_50)"
"(symbol?"
"(syntax-e$1"
" s_50))"
" #f)))"
"(if or-part_345"
" or-part_345"
"(symbol?"
" s_50)))"
" s_50"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_59"
" s_50))))"
"(()"
"(let-values(((s_51)"
"(cdr"
" s_187)))"
"(let-values(((s_52)"
"(if(syntax?$1"
" s_51)"
"(syntax-e$1"
" s_51)"
" s_51)))"
"(if(null?"
" s_52)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_59))))))"
"(values"
" id:to39_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_59))))))"
"(values"
" id:from37_0"
" id:to38_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_59))))))"
"(values"
" rename34_0"
" id:from35_0"
" id:to36_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_59)))))"
"(values"
" #t"
" rename31_1"
" id:from32_1"
" id:to33_1))))))"
"(begin"
"(parse-identifier!"
" id:from32_0"
" orig-s_56"
"(syntax-e$1"
" id:to33_0)"
" at-phase_11"
" ns_117"
" rp_1"
" protected?_4)"
"(values"
" null"
"(list"
" spec_0))))))))))"
"(if(unsafe-fx<"
" index_5"
" 9)"
"(if(unsafe-fx<"
" index_5"
" 7)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_60"
" struct40_0"
" id:struct41_0"
" id:field42_0)"
"(let-values(((s_431)"
" disarmed-spec_0))"
"(let-values(((orig-s_60)"
" s_431))"
"(let-values(((struct40_1"
" id:struct41_1"
" id:field42_1)"
"(let-values(((s_384)"
"(if(syntax?$1"
" s_431)"
"(syntax-e$1"
" s_431)"
" s_431)))"
"(if(pair?"
" s_384)"
"(let-values(((struct43_0)"
"(let-values(((s_295)"
"(car"
" s_384)))"
" s_295))"
"((id:struct44_0"
" id:field45_0)"
"(let-values(((s_690)"
"(cdr"
" s_384)))"
"(let-values(((s_691)"
"(if(syntax?$1"
" s_690)"
"(syntax-e$1"
" s_690)"
" s_690)))"
"(if(pair?"
" s_691)"
"(let-values(((id:struct46_0)"
"(let-values(((s_692)"
"(car"
" s_691)))"
"(if(let-values(((or-part_346)"
"(if(syntax?$1"
" s_692)"
"(symbol?"
"(syntax-e$1"
" s_692))"
" #f)))"
"(if or-part_346"
" or-part_346"
"(symbol?"
" s_692)))"
" s_692"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_60"
" s_692))))"
"((id:field47_0)"
"(let-values(((s_207)"
"(cdr"
" s_691)))"
"(let-values(((s_693)"
"(if(syntax?$1"
" s_207)"
"(syntax-e$1"
" s_207)"
" s_207)))"
"(if(pair?"
" s_693)"
"(let-values(((id:field48_0)"
"(let-values(((s_208)"
"(car"
" s_693)))"
"(let-values(((s_209)"
"(if(syntax?$1"
" s_208)"
"(syntax-e$1"
" s_208)"
" s_208)))"
"(let-values(((flat-s_44)"
"(to-syntax-list.1"
" s_209)))"
"(if(not"
" flat-s_44)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_60))"
"(let-values()"
"(let-values(((id:field_0)"
"(let-values(((lst_102)"
" flat-s_44))"
"(begin"
"(check-list"
" lst_102)"
"((letrec-values(((for-loop_292)"
"(lambda(id:field_1"
" lst_103)"
"(if(pair?"
" lst_103)"
"(let-values(((s_399)"
"(unsafe-car"
" lst_103))"
"((rest_221)"
"(unsafe-cdr"
" lst_103)))"
"(let-values(((id:field_2)"
"(let-values(((id:field_3)"
" id:field_1))"
"(let-values(((id:field_4)"
"(let-values()"
"(let-values(((id:field49_0)"
"(let-values()"
"(if(let-values(((or-part_347)"
"(if(syntax?$1"
" s_399)"
"(symbol?"
"(syntax-e$1"
" s_399))"
" #f)))"
"(if or-part_347"
" or-part_347"
"(symbol?"
" s_399)))"
" s_399"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_60"
" s_399)))))"
"(cons"
" id:field49_0"
" id:field_3)))))"
"(values"
" id:field_4)))))"
"(if(not"
" #f)"
"(for-loop_292"
" id:field_2"
" rest_221)"
" id:field_2)))"
" id:field_1))))"
" for-loop_292)"
" null"
" lst_102)))))"
"(reverse$1"
" id:field_0))))))))"
"(()"
"(let-values(((s_37)"
"(cdr"
" s_693)))"
"(let-values(((s_62)"
"(if(syntax?$1"
" s_37)"
"(syntax-e$1"
" s_37)"
" s_37)))"
"(if(null?"
" s_62)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_60))))))"
"(values"
" id:field48_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_60))))))"
"(values"
" id:struct46_0"
" id:field47_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_60))))))"
"(values"
" struct43_0"
" id:struct44_0"
" id:field45_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_60)))))"
"(values"
" #t"
" struct40_1"
" id:struct41_1"
" id:field42_1))))))"
"(begin"
"(parse-struct!"
" id:struct41_0"
" orig-s_56"
" id:field42_0"
" at-phase_11"
" ns_117"
" rp_1"
" protected?_4)"
"(values"
" null"
"(list"
" spec_0))))))"
"(if(unsafe-fx<"
" index_5"
" 8)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_61"
" all-from50_0"
" mod-path51_0)"
"(let-values(((s_694)"
" disarmed-spec_0))"
"(let-values(((orig-s_61)"
" s_694))"
"(let-values(((all-from50_1"
" mod-path51_1)"
"(let-values(((s_65)"
"(if(syntax?$1"
" s_694)"
"(syntax-e$1"
" s_694)"
" s_694)))"
"(if(pair?"
" s_65)"
"(let-values(((all-from52_0)"
"(let-values(((s_695)"
"(car"
" s_65)))"
" s_695))"
"((mod-path53_0)"
"(let-values(((s_66)"
"(cdr"
" s_65)))"
"(let-values(((s_302)"
"(if(syntax?$1"
" s_66)"
"(syntax-e$1"
" s_66)"
" s_66)))"
"(if(pair?"
" s_302)"
"(let-values(((mod-path54_0)"
"(let-values(((s_696)"
"(car"
" s_302)))"
" s_696))"
"(()"
"(let-values(((s_697)"
"(cdr"
" s_302)))"
"(let-values(((s_211)"
"(if(syntax?$1"
" s_697)"
"(syntax-e$1"
" s_697)"
" s_697)))"
"(if(null?"
" s_211)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_61))))))"
"(values"
" mod-path54_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_61))))))"
"(values"
" all-from52_0"
" mod-path53_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_61)))))"
"(values"
" #t"
" all-from50_1"
" mod-path51_1))))))"
"(begin"
"(parse-all-from"
" mod-path51_0"
" orig-s_56"
" self_27"
" null"
" at-phase_11"
" ns_117"
" rp_1"
" protected?_4"
" ctx_98)"
"(values"
" null"
"(list"
" spec_0))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_62"
" all-from-except55_0"
" mod-path56_0"
" id57_0)"
"(let-values(((s_304)"
" disarmed-spec_0))"
"(let-values(((orig-s_62)"
" s_304))"
"(let-values(((all-from-except55_1"
" mod-path56_1"
" id57_1)"
"(let-values(((s_307)"
"(if(syntax?$1"
" s_304)"
"(syntax-e$1"
" s_304)"
" s_304)))"
"(if(pair?"
" s_307)"
"(let-values(((all-from-except58_0)"
"(let-values(((s_152)"
"(car"
" s_307)))"
" s_152))"
"((mod-path59_0"
" id60_0)"
"(let-values(((s_40)"
"(cdr"
" s_307)))"
"(let-values(((s_412)"
"(if(syntax?$1"
" s_40)"
"(syntax-e$1"
" s_40)"
" s_40)))"
"(if(pair?"
" s_412)"
"(let-values(((mod-path61_0)"
"(let-values(((s_698)"
"(car"
" s_412)))"
" s_698))"
"((id62_1)"
"(let-values(((s_699)"
"(cdr"
" s_412)))"
"(let-values(((s_700)"
"(if(syntax?$1"
" s_699)"
"(syntax-e$1"
" s_699)"
" s_699)))"
"(let-values(((flat-s_45)"
"(to-syntax-list.1"
" s_700)))"
"(if(not"
" flat-s_45)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_62))"
"(let-values()"
"(let-values(((id_125)"
"(let-values(((lst_378)"
" flat-s_45))"
"(begin"
"(check-list"
" lst_378)"
"((letrec-values(((for-loop_293)"
"(lambda(id_126"
" lst_379)"
"(if(pair?"
" lst_379)"
"(let-values(((s_97)"
"(unsafe-car"
" lst_379))"
"((rest_222)"
"(unsafe-cdr"
" lst_379)))"
"(let-values(((id_127)"
"(let-values(((id_128)"
" id_126))"
"(let-values(((id_129)"
"(let-values()"
"(let-values(((id63_0)"
"(let-values()"
"(if(let-values(((or-part_348)"
"(if(syntax?$1"
" s_97)"
"(symbol?"
"(syntax-e$1"
" s_97))"
" #f)))"
"(if or-part_348"
" or-part_348"
"(symbol?"
" s_97)))"
" s_97"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_62"
" s_97)))))"
"(cons"
" id63_0"
" id_128)))))"
"(values"
" id_129)))))"
"(if(not"
" #f)"
"(for-loop_293"
" id_127"
" rest_222)"
" id_127)))"
" id_126))))"
" for-loop_293)"
" null"
" lst_378)))))"
"(reverse$1"
" id_125)))))))))"
"(values"
" mod-path61_0"
" id62_1))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_62))))))"
"(values"
" all-from-except58_0"
" mod-path59_0"
" id60_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_62)))))"
"(values"
" #t"
" all-from-except55_1"
" mod-path56_1"
" id57_1))))))"
"(begin"
"(parse-all-from"
" mod-path56_0"
" orig-s_56"
" self_27"
" id57_0"
" at-phase_11"
" ns_117"
" rp_1"
" protected?_4"
" ctx_98)"
"(values"
" null"
"(list"
" spec_0))))))))"
"(if(unsafe-fx<"
" index_5"
" 11)"
"(if(unsafe-fx<"
" index_5"
" 10)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_63"
" all-defined64_0)"
"(let-values(((s_104)"
" disarmed-spec_0))"
"(let-values(((orig-s_63)"
" s_104))"
"(let-values(((all-defined64_1)"
"(let-values(((s_414)"
"(if(syntax?$1"
" s_104)"
"(syntax-e$1"
" s_104)"
" s_104)))"
"(if(pair?"
" s_414)"
"(let-values(((all-defined65_0)"
"(let-values(((s_106)"
"(car"
" s_414)))"
" s_106))"
"(()"
"(let-values(((s_107)"
"(cdr"
" s_414)))"
"(let-values(((s_108)"
"(if(syntax?$1"
" s_107)"
"(syntax-e$1"
" s_107)"
" s_107)))"
"(if(null?"
" s_108)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_63))))))"
"(values"
" all-defined65_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_63)))))"
"(values"
" #t"
" all-defined64_1))))))"
"(begin"
"(parse-all-from-module"
" self_27"
" spec_0"
" orig-s_56"
" null"
" #f"
" at-phase_11"
" ns_117"
" rp_1"
" protected?_4)"
"(values"
" null"
"(list"
" spec_0))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_64"
" all-defined-except66_0"
" id67_1)"
"(let-values(((s_114)"
" disarmed-spec_0))"
"(let-values(((orig-s_64)"
" s_114))"
"(let-values(((all-defined-except66_1"
" id67_2)"
"(let-values(((s_311)"
"(if(syntax?$1"
" s_114)"
"(syntax-e$1"
" s_114)"
" s_114)))"
"(if(pair?"
" s_311)"
"(let-values(((all-defined-except68_0)"
"(let-values(((s_217)"
"(car"
" s_311)))"
" s_217))"
"((id69_0)"
"(let-values(((s_312)"
"(cdr"
" s_311)))"
"(let-values(((s_116)"
"(if(syntax?$1"
" s_312)"
"(syntax-e$1"
" s_312)"
" s_312)))"
"(let-values(((flat-s_46)"
"(to-syntax-list.1"
" s_116)))"
"(if(not"
" flat-s_46)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_64))"
"(let-values()"
"(let-values(((id_130)"
"(let-values(((lst_380)"
" flat-s_46))"
"(begin"
"(check-list"
" lst_380)"
"((letrec-values(((for-loop_294)"
"(lambda(id_131"
" lst_381)"
"(if(pair?"
" lst_381)"
"(let-values(((s_117)"
"(unsafe-car"
" lst_381))"
"((rest_223)"
"(unsafe-cdr"
" lst_381)))"
"(let-values(((id_132)"
"(let-values(((id_133)"
" id_131))"
"(let-values(((id_37)"
"(let-values()"
"(let-values(((id70_0)"
"(let-values()"
"(if(let-values(((or-part_349)"
"(if(syntax?$1"
" s_117)"
"(symbol?"
"(syntax-e$1"
" s_117))"
" #f)))"
"(if or-part_349"
" or-part_349"
"(symbol?"
" s_117)))"
" s_117"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_64"
" s_117)))))"
"(cons"
" id70_0"
" id_133)))))"
"(values"
" id_37)))))"
"(if(not"
" #f)"
"(for-loop_294"
" id_132"
" rest_223)"
" id_132)))"
" id_131))))"
" for-loop_294)"
" null"
" lst_380)))))"
"(reverse$1"
" id_130)))))))))"
"(values"
" all-defined-except68_0"
" id69_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_64)))))"
"(values"
" #t"
" all-defined-except66_1"
" id67_2))))))"
"(begin"
"(parse-all-from-module"
" self_27"
" spec_0"
" orig-s_56"
" id67_1"
" #f"
" at-phase_11"
" ns_117"
" rp_1"
" protected?_4)"
"(values"
" null"
"(list"
" spec_0)))))))"
"(if(unsafe-fx<"
" index_5"
" 12)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_65"
" prefix-all-defined71_0"
" id:prefix72_0)"
"(let-values(((s_435)"
" disarmed-spec_0))"
"(let-values(((orig-s_65)"
" s_435))"
"(let-values(((prefix-all-defined71_1"
" id:prefix72_1)"
"(let-values(((s_701)"
"(if(syntax?$1"
" s_435)"
"(syntax-e$1"
" s_435)"
" s_435)))"
"(if(pair?"
" s_701)"
"(let-values(((prefix-all-defined73_0)"
"(let-values(((s_702)"
"(car"
" s_701)))"
" s_702))"
"((id:prefix74_0)"
"(let-values(((s_703)"
"(cdr"
" s_701)))"
"(let-values(((s_704)"
"(if(syntax?$1"
" s_703)"
"(syntax-e$1"
" s_703)"
" s_703)))"
"(if(pair?"
" s_704)"
"(let-values(((id:prefix75_0)"
"(let-values(((s_705)"
"(car"
" s_704)))"
"(if(let-values(((or-part_350)"
"(if(syntax?$1"
" s_705)"
"(symbol?"
"(syntax-e$1"
" s_705))"
" #f)))"
"(if or-part_350"
" or-part_350"
"(symbol?"
" s_705)))"
" s_705"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_65"
" s_705))))"
"(()"
"(let-values(((s_706)"
"(cdr"
" s_704)))"
"(let-values(((s_707)"
"(if(syntax?$1"
" s_706)"
"(syntax-e$1"
" s_706)"
" s_706)))"
"(if(null?"
" s_707)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_65))))))"
"(values"
" id:prefix75_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_65))))))"
"(values"
" prefix-all-defined73_0"
" id:prefix74_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_65)))))"
"(values"
" #t"
" prefix-all-defined71_1"
" id:prefix72_1))))))"
"(begin"
"(parse-all-from-module"
" self_27"
" spec_0"
" orig-s_56"
" null"
"(syntax-e$1"
" id:prefix72_0)"
" at-phase_11"
" ns_117"
" rp_1"
" protected?_4)"
"(values"
" null"
"(list"
" spec_0))))))"
"(if(unsafe-fx<"
" index_5"
" 13)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_66"
" prefix-all-defined-except76_0"
" id:prefix77_0"
" id78_0)"
"(let-values(((s_229)"
" disarmed-spec_0))"
"(let-values(((orig-s_66)"
" s_229))"
"(let-values(((prefix-all-defined-except76_1"
" id:prefix77_1"
" id78_1)"
"(let-values(((s_233)"
"(if(syntax?$1"
" s_229)"
"(syntax-e$1"
" s_229)"
" s_229)))"
"(if(pair?"
" s_233)"
"(let-values(((prefix-all-defined-except79_0)"
"(let-values(((s_237)"
"(car"
" s_233)))"
" s_237))"
"((id:prefix80_0"
" id81_0)"
"(let-values(((s_238)"
"(cdr"
" s_233)))"
"(let-values(((s_239)"
"(if(syntax?$1"
" s_238)"
"(syntax-e$1"
" s_238)"
" s_238)))"
"(if(pair?"
" s_239)"
"(let-values(((id:prefix82_0)"
"(let-values(((s_437)"
"(car"
" s_239)))"
"(if(let-values(((or-part_351)"
"(if(syntax?$1"
" s_437)"
"(symbol?"
"(syntax-e$1"
" s_437))"
" #f)))"
"(if or-part_351"
" or-part_351"
"(symbol?"
" s_437)))"
" s_437"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_66"
" s_437))))"
"((id83_1)"
"(let-values(((s_483)"
"(cdr"
" s_239)))"
"(let-values(((s_439)"
"(if(syntax?$1"
" s_483)"
"(syntax-e$1"
" s_483)"
" s_483)))"
"(let-values(((flat-s_47)"
"(to-syntax-list.1"
" s_439)))"
"(if(not"
" flat-s_47)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_66))"
"(let-values()"
"(let-values(((id_134)"
"(let-values(((lst_382)"
" flat-s_47))"
"(begin"
"(check-list"
" lst_382)"
"((letrec-values(((for-loop_295)"
"(lambda(id_135"
" lst_383)"
"(if(pair?"
" lst_383)"
"(let-values(((s_484)"
"(unsafe-car"
" lst_383))"
"((rest_224)"
"(unsafe-cdr"
" lst_383)))"
"(let-values(((id_83)"
"(let-values(((id_84)"
" id_135))"
"(let-values(((id_136)"
"(let-values()"
"(let-values(((id84_0)"
"(let-values()"
"(if(let-values(((or-part_352)"
"(if(syntax?$1"
" s_484)"
"(symbol?"
"(syntax-e$1"
" s_484))"
" #f)))"
"(if or-part_352"
" or-part_352"
"(symbol?"
" s_484)))"
" s_484"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_66"
" s_484)))))"
"(cons"
" id84_0"
" id_84)))))"
"(values"
" id_136)))))"
"(if(not"
" #f)"
"(for-loop_295"
" id_83"
" rest_224)"
" id_83)))"
" id_135))))"
" for-loop_295)"
" null"
" lst_382)))))"
"(reverse$1"
" id_134)))))))))"
"(values"
" id:prefix82_0"
" id83_1))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_66))))))"
"(values"
" prefix-all-defined-except79_0"
" id:prefix80_0"
" id81_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_66)))))"
"(values"
" #t"
" prefix-all-defined-except76_1"
" id:prefix77_1"
" id78_1))))))"
"(begin"
"(parse-all-from-module"
" self_27"
" spec_0"
" orig-s_56"
" id78_0"
"(syntax-e$1"
" id:prefix77_0)"
" at-phase_11"
" ns_117"
" rp_1"
" protected?_4)"
"(values"
" null"
"(list"
" spec_0))))))"
"(let-values()"
"(let-values(((ok?_67"
" expand85_0"
" id86_0"
" datum87_0)"
"(let-values(((s_491)"
" disarmed-spec_0))"
"(let-values(((orig-s_67)"
" s_491))"
"(let-values(((expand85_1"
" id86_1"
" datum87_1)"
"(let-values(((s_329)"
"(if(syntax?$1"
" s_491)"
"(syntax-e$1"
" s_491)"
" s_491)))"
"(if(pair?"
" s_329)"
"(let-values(((expand88_0)"
"(let-values(((s_330)"
"(car"
" s_329)))"
" s_330))"
"((id89_0"
" datum90_0)"
"(let-values(((s_708)"
"(cdr"
" s_329)))"
"(let-values(((s_331)"
"(if(syntax?$1"
" s_708)"
"(syntax-e$1"
" s_708)"
" s_708)))"
"(if(pair?"
" s_331)"
"(let-values(((id91_0"
" datum92_0)"
"(let-values(((s_709)"
"(car"
" s_331)))"
"(let-values(((s_333)"
"(if(syntax?$1"
" s_709)"
"(syntax-e$1"
" s_709)"
" s_709)))"
"(if(pair?"
" s_333)"
"(let-values(((id93_1)"
"(let-values(((s_710)"
"(car"
" s_333)))"
"(if(let-values(((or-part_353)"
"(if(syntax?$1"
" s_710)"
"(symbol?"
"(syntax-e$1"
" s_710))"
" #f)))"
"(if or-part_353"
" or-part_353"
"(symbol?"
" s_710)))"
" s_710"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_67"
" s_710))))"
"((datum94_0)"
"(let-values(((s_263)"
"(cdr"
" s_333)))"
" s_263)))"
"(values"
" id93_1"
" datum94_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_67)))))"
"(()"
"(let-values(((s_264)"
"(cdr"
" s_331)))"
"(let-values(((s_265)"
"(if(syntax?$1"
" s_264)"
"(syntax-e$1"
" s_264)"
" s_264)))"
"(if(null?"
" s_265)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_67))))))"
"(values"
" id91_0"
" datum92_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_67))))))"
"(values"
" expand88_0"
" id89_0"
" datum90_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_67)))))"
"(values"
" #t"
" expand85_1"
" id86_1"
" datum87_1))))))"
"(let-values(((ok?_68"
" expand95_0"
" form96_0)"
"(let-values(((s_266)"
" disarmed-spec_0))"
"(let-values(((orig-s_68)"
" s_266))"
"(let-values(((expand95_1"
" form96_1)"
"(let-values(((s_270)"
"(if(syntax?$1"
" s_266)"
"(syntax-e$1"
" s_266)"
" s_266)))"
"(if(pair?"
" s_270)"
"(let-values(((expand97_0)"
"(let-values(((s_273)"
"(car"
" s_270)))"
" s_273))"
"((form98_0)"
"(let-values(((s_274)"
"(cdr"
" s_270)))"
"(let-values(((s_275)"
"(if(syntax?$1"
" s_274)"
"(syntax-e$1"
" s_274)"
" s_274)))"
"(if(pair?"
" s_275)"
"(let-values(((form99_0)"
"(let-values(((s_711)"
"(car"
" s_275)))"
" s_711))"
"(()"
"(let-values(((s_712)"
"(cdr"
" s_275)))"
"(let-values(((s_713)"
"(if(syntax?$1"
" s_712)"
"(syntax-e$1"
" s_712)"
" s_712)))"
"(if(null?"
" s_713)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_68))))))"
"(values"
" form99_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_68))))))"
"(values"
" expand97_0"
" form98_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_68)))))"
"(values"
" #t"
" expand95_1"
" form96_1))))))"
"(let-values(((exp-spec_0)"
"(let-values(((temp104_4)"
" form96_0)"
"((temp105_2)"
"(let-values(((v_249)"
" ctx_98))"
"(let-values(((the-struct_97)"
" v_249))"
"(if(expand-context/outer?"
" the-struct_97)"
"(let-values(((only-immediate?106_0)"
" #t)"
"((def-ctx-scopes107_1)"
"(box"
" null))"
"((inner108_1)"
"(root-expand-context/outer-inner"
" v_249)))"
"(expand-context/outer1.1"
" inner108_1"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_97)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_97)"
"(root-expand-context/outer-frame-id"
" the-struct_97)"
"(expand-context/outer-context"
" the-struct_97)"
"(expand-context/outer-env"
" the-struct_97)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_97)"
"(expand-context/outer-scopes"
" the-struct_97)"
" def-ctx-scopes107_1"
"(expand-context/outer-binding-layer"
" the-struct_97)"
"(expand-context/outer-reference-records"
" the-struct_97)"
" only-immediate?106_0"
"(expand-context/outer-need-eventually-defined"
" the-struct_97)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_97)"
"(expand-context/outer-name"
" the-struct_97)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                               \"expand-context/outer?\""
" the-struct_97))))))"
"(expand5.1"
" #f"
" #f"
" temp104_4"
" temp105_2))))"
"(let-values((()"
"(begin"
"(if(if(pair?"
"(syntax-e$1"
" exp-spec_0))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" exp-spec_0)))"
"(eq?"
" 'begin"
"(core-form-sym"
" exp-spec_0"
" at-phase_11))"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                                   \"expansion was not a `begin' sequence\""
" orig-s_56"
" spec_0)))"
"(values))))"
"(let-values(((ok?_69"
" begin100_0"
" spec101_0)"
"(let-values(((s_278)"
" exp-spec_0))"
"(let-values(((orig-s_69)"
" s_278))"
"(let-values(((begin100_1"
" spec101_1)"
"(let-values(((s_714)"
"(if(syntax?$1"
" s_278)"
"(syntax-e$1"
" s_278)"
" s_278)))"
"(if(pair?"
" s_714)"
"(let-values(((begin102_0)"
"(let-values(((s_282)"
"(car"
" s_714)))"
" s_282))"
"((spec103_0)"
"(let-values(((s_715)"
"(cdr"
" s_714)))"
"(let-values(((s_716)"
"(if(syntax?$1"
" s_715)"
"(syntax-e$1"
" s_715)"
" s_715)))"
"(let-values(((flat-s_48)"
"(to-syntax-list.1"
" s_716)))"
"(if(not"
" flat-s_48)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_69))"
"(let-values()"
" flat-s_48)))))))"
"(values"
" begin102_0"
" spec103_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_69)))))"
"(values"
" #t"
" begin100_1"
" spec101_1))))))"
"(let-values(((track-stxes_9"
" exp-specs_9)"
"(loop_163"
" spec101_0"
" at-phase_11"
" protected?_4"
" layer_6)))"
"(values"
"(list*"
" spec_0"
" exp-spec_0"
" track-stxes_9)"
" exp-specs_9)))))))))))))))))))))"
"(values"
"(cons"
" track-stxes1_0"
" track-stxes_3)"
"(cons"
" exp-specs2_0"
" exp-specs_3))))))"
"(values"
" track-stxes_4"
" exp-specs_4)))))"
"(if(not #f)"
"(for-loop_103"
" track-stxes_2"
" exp-specs_2"
" rest_220)"
"(values"
" track-stxes_2"
" exp-specs_2))))"
"(values track-stxes_1 exp-specs_1)))))"
" for-loop_103)"
" null"
" null"
" lst_95)))))"
"(values(reverse$1 track-stxes_0)(reverse$1 exp-specs_0)))))"
"(values(apply append track-stxess_0)(apply append exp-specss_0))))))"
" loop_163)"
" specs_0"
" phase_43"
" #f"
" 'raw))))"
"(define-values"
"(parse-identifier!)"
"(lambda(spec_1 orig-s_70 sym_102 at-phase_13 ns_118 rp_2 protected?_5)"
"(let-values(((b_91)(resolve+shift/extra-inspector spec_1 at-phase_13 ns_118)))"
"(let-values((()"
"(begin"
"(if b_91"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                           \"provided identifier is not defined or required\""
" orig-s_70"
" spec_1)))"
"(values))))"
"(let-values(((as-transformer?_6)(binding-for-transformer? b_91 spec_1 at-phase_13 ns_118)))"
"(let-values(((immed-b_0)"
"(let-values(((temp120_5) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f temp120_5 #t #f #f spec_1 at-phase_13))))"
"(let-values(((protected?116_0) protected?_5)((as-transformer?117_0) as-transformer?_6))"
"(add-provide!101.1"
" protected?116_0"
" as-transformer?117_0"
" rp_2"
" sym_102"
" at-phase_13"
" b_91"
" immed-b_0"
" spec_1"
" orig-s_70))))))))"
"(define-values"
"(parse-struct!)"
"(lambda(id:struct_0 orig-s_71 fields_0 at-phase_14 ns_119 rp_3 protected?_6)"
"(let-values(((mk_0)"
"(lambda(fmt_1)"
"(let-values(((sym_103)(string->symbol(format fmt_1(syntax-e$1 id:struct_0)))))"
"(datum->syntax$1 id:struct_0 sym_103 id:struct_0)))))"
"(let-values(((mk2_0)"
"(lambda(fmt_2 field-id_0)"
"(let-values(((sym_104)"
"(string->symbol(format fmt_2(syntax-e$1 id:struct_0)(syntax-e$1 field-id_0)))))"
"(datum->syntax$1 id:struct_0 sym_104 id:struct_0)))))"
"(begin"
"          (let-values (((lst_384) (list \"~a\" \"make-~a\" \"struct:~a\" \"~a?\")))"
"(begin"
"(check-list lst_384)"
"((letrec-values(((for-loop_59)"
"(lambda(lst_385)"
"(if(pair? lst_385)"
"(let-values(((fmt_3)(unsafe-car lst_385))((rest_225)(unsafe-cdr lst_385)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_137)(mk_0 fmt_3)))"
"(parse-identifier!"
" id_137"
" orig-s_71"
"(syntax-e$1 id_137)"
" at-phase_14"
" ns_119"
" rp_3"
" protected?_6)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_59 rest_225)(values))))"
"(values)))))"
" for-loop_59)"
" lst_384)))"
"(void)"
"(let-values(((lst_345) fields_0))"
"(begin"
"(check-list lst_345)"
"((letrec-values(((for-loop_296)"
"(lambda(lst_386)"
"(if(pair? lst_386)"
"(let-values(((field_0)(unsafe-car lst_386))((rest_226)(unsafe-cdr lst_386)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((get-id_0)"
"                                                                                        (mk2_0 \"~a-~a\" field_0)))"
"(let-values(((set-id_0)"
"                                                                                          (mk2_0 \"set-~a-~a!\" field_0)))"
"(begin"
"(parse-identifier!"
" get-id_0"
" orig-s_71"
"(syntax-e$1 get-id_0)"
" at-phase_14"
" ns_119"
" rp_3"
" protected?_6)"
"(parse-identifier!"
" set-id_0"
" orig-s_71"
"(syntax-e$1 set-id_0)"
" at-phase_14"
" ns_119"
" rp_3"
" protected?_6)))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_296 rest_226)(values))))"
"(values)))))"
" for-loop_296)"
" lst_345)))"
"(void))))))"
"(define-values"
"(parse-all-from)"
"(lambda(mod-path-stx_0 orig-s_72 self_28 except-ids_0 at-phase_15 ns_120 rp_4 protected?_7 ctx_99)"
"(let-values(((mod-path_33)(syntax->datum$1 mod-path-stx_0)))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod-path_33)"
"(void)"
"(let-values()"
"                          (raise-syntax-error$1 provide-form-name \"not a module path\" orig-s_72 mod-path-stx_0)))"
"(values))))"
"(let-values(((mpi_49)(module-path->mpi/context mod-path_33 ctx_99)))"
"(parse-all-from-module mpi_49 #f orig-s_72 except-ids_0 #f at-phase_15 ns_120 rp_4 protected?_7))))))"
"(define-values"
"(parse-all-from-module)"
"(lambda(mpi_50 matching-stx_0 orig-s_73 except-ids_1 prefix-sym_0 at-phase_16 ns_121 rp_5 protected?_8)"
"(let-values(((requireds_2)(extract-module-requires rp_5 mpi_50 at-phase_16)))"
"(let-values(((phase-desc_0)"
"(lambda()"
"(if(zero-phase? at-phase_16)"
"                        (let-values () \"\")"
"(if(label-phase? at-phase_16)"
"                          (let-values () \" for-label\")"
"                          (let-values () (format \" for phase ~a\" at-phase_16)))))))"
"(let-values((()"
"(begin"
"(if requireds_2"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                             (format \"cannot provide from a module without a matching require~a\" (phase-desc_0))"
" orig-s_73"
" matching-stx_0)))"
"(values))))"
"(let-values(((add-prefix_1)"
"(lambda(sym_105)"
"                          (if prefix-sym_0 (string->symbol (format \"~a~a\" prefix-sym_0 sym_105)) sym_105))))"
"(let-values(((found_0)(make-hasheq)))"
"(begin"
"(let-values(((lst_387) requireds_2))"
"(begin"
"(check-list lst_387)"
"((letrec-values(((for-loop_297)"
"(lambda(lst_388)"
"(if(pair? lst_388)"
"(let-values(((i_197)(unsafe-car lst_388))((rest_227)(unsafe-cdr lst_388)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_138)"
"(required-id i_197)))"
"(let-values(((phase_146)"
"(required-phase i_197)))"
"(if(let-values(((or-part_354)"
"(if matching-stx_0"
"(not"
"(if(eqv?"
" phase_146"
" at-phase_16)"
"(free-identifier=?$1"
" id_138"
"(datum->syntax$1"
" matching-stx_0"
"(syntax-e$1"
" id_138))"
" phase_146"
" phase_146)"
" #f))"
" #f)))"
"(if or-part_354"
" or-part_354"
"(let-values(((lst_356)"
" except-ids_1))"
"(begin"
"(check-list lst_356)"
"((letrec-values(((for-loop_284)"
"(lambda(result_197"
" lst_357)"
"(if(pair?"
" lst_357)"
"(let-values(((except-id_0)"
"(unsafe-car"
" lst_357))"
"((rest_228)"
"(unsafe-cdr"
" lst_357)))"
"(let-values(((result_198)"
"(let-values()"
"(let-values(((result_199)"
"(let-values()"
"(let-values()"
"(if(free-identifier=?$1"
" id_138"
" except-id_0"
" phase_146"
" phase_146)"
"(hash-set!"
" found_0"
" except-id_0"
" #t)"
" #f)))))"
"(values"
" result_199)))))"
"(if(if(not"
"((lambda x_124"
" result_198)"
" except-id_0))"
"(not"
" #f)"
" #f)"
"(for-loop_284"
" result_198"
" rest_228)"
" result_198)))"
" result_197))))"
" for-loop_284)"
" #f"
" lst_356)))))"
"(void)"
"(let-values()"
"(let-values(((b_92)"
"(resolve+shift/extra-inspector"
" id_138"
" phase_146"
" ns_121)))"
"(let-values(((immed-b_1)"
"(let-values(((temp132_3)"
" #t))"
"(resolve+shift30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp132_3"
" #t"
" #f"
" #f"
" id_138"
" phase_146))))"
"(let-values(((temp122_0)"
"(add-prefix_1"
"(syntax-e$1"
" id_138)))"
"((phase123_0)"
" phase_146)"
"((b124_0) b_92)"
"((immed-b125_0)"
" immed-b_1)"
"((id126_0)"
" id_138)"
"((orig-s127_0)"
" orig-s_73)"
"((protected?128_0)"
" protected?_8)"
"((temp129_2)"
"(required-as-transformer?"
" i_197)))"
"(add-provide!101.1"
" protected?128_0"
" temp129_2"
" rp_5"
" temp122_0"
" phase123_0"
" b124_0"
" immed-b125_0"
" id126_0"
" orig-s127_0)))))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_297 rest_227)(values))))"
"(values)))))"
" for-loop_297)"
" lst_387)))"
"(void)"
"(if(=(hash-count found_0)(length except-ids_1))"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_211) except-ids_1))"
"(begin"
"(check-list lst_211)"
"((letrec-values(((for-loop_298)"
"(lambda(lst_389)"
"(if(pair? lst_389)"
"(let-values(((except-id_1)(unsafe-car lst_389))"
"((rest_229)(unsafe-cdr lst_389)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(let-values(((or-part_355)"
"(hash-ref"
" found_0"
" except-id_1"
" #f)))"
"(if or-part_355"
" or-part_355"
"(let-values(((lst_186)"
" requireds_2))"
"(begin"
"(check-list lst_186)"
"((letrec-values(((for-loop_299)"
"(lambda(result_200"
" lst_390)"
"(if(pair?"
" lst_390)"
"(let-values(((i_198)"
"(unsafe-car"
" lst_390))"
"((rest_230)"
"(unsafe-cdr"
" lst_390)))"
"(let-values(((result_201)"
"(let-values()"
"(let-values(((result_125)"
"(let-values()"
"(let-values()"
"(let-values(((id_139)"
"(required-id"
" i_198)))"
"(let-values(((phase_147)"
"(required-phase"
" i_198)))"
"(free-identifier=?$1"
" id_139"
" except-id_1"
" phase_147"
" phase_147)))))))"
"(values"
" result_125)))))"
"(if(if(not"
"((lambda x_125"
" result_201)"
" i_198))"
"(not"
" #f)"
" #f)"
"(for-loop_299"
" result_201"
" rest_230)"
" result_201)))"
" result_200))))"
" for-loop_299)"
" #f"
" lst_186)))))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"(if matching-stx_0"
"                                                                                              \"excluded identifier was not defined or required in the module~a\""
"                                                                                              \"excluded identifier was not required from the specified module~a\")"
"(phase-desc_0))"
" orig-s_73"
" except-id_1))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_298 rest_229)(values))))"
"(values)))))"
" for-loop_298)"
" lst_211)))"
"(void))))))))))))"
"(define-values"
"(struct:expanded+parsed expanded+parsed1.1 expanded+parsed? expanded+parsed-s expanded+parsed-parsed)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expanded+parsed"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'expanded+parsed)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 's)"
"(make-struct-field-accessor -ref_0 1 'parsed))))"
"(define-values"
"(struct:semi-parsed-define-values"
" semi-parsed-define-values2.1"
" semi-parsed-define-values?"
" semi-parsed-define-values-s"
" semi-parsed-define-values-syms"
" semi-parsed-define-values-ids"
" semi-parsed-define-values-rhs)"
"(let-values(((struct:_61 make-_61 ?_61 -ref_61 -set!_61)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'semi-parsed-define-values"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'semi-parsed-define-values)))))"
"(values"
" struct:_61"
" make-_61"
" ?_61"
"(make-struct-field-accessor -ref_61 0 's)"
"(make-struct-field-accessor -ref_61 1 'syms)"
"(make-struct-field-accessor -ref_61 2 'ids)"
"(make-struct-field-accessor -ref_61 3 'rhs))))"
"(define-values"
"(struct:semi-parsed-begin-for-syntax"
" semi-parsed-begin-for-syntax3.1"
" semi-parsed-begin-for-syntax?"
" semi-parsed-begin-for-syntax-s"
" semi-parsed-begin-for-syntax-body)"
"(let-values(((struct:_41 make-_41 ?_41 -ref_41 -set!_41)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'semi-parsed-begin-for-syntax"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'semi-parsed-begin-for-syntax)))))"
"(values"
" struct:_41"
" make-_41"
" ?_41"
"(make-struct-field-accessor -ref_41 0 's)"
"(make-struct-field-accessor -ref_41 1 'body))))"
"(define-values"
"(parsed-only)"
"(lambda(l_78)"
"(let-values(((lst_164) l_78))"
"(begin"
"(check-list lst_164)"
"((letrec-values(((for-loop_300)"
"(lambda(lst_391)"
"(if(pair? lst_391)"
"(let-values(((i_138)(unsafe-car lst_391))((rest_87)(unsafe-cdr lst_391)))"
"(let-values(((post-guard-var_111)(lambda() #t)))"
"(let-values()"
"(if(let-values(((or-part_46)(parsed? i_138)))"
"(if or-part_46"
" or-part_46"
"(let-values(((or-part_47)(expanded+parsed? i_138)))"
"(if or-part_47 or-part_47(semi-parsed-begin-for-syntax? i_138)))))"
"(let-values()"
"(let-values(((elem_106)"
"(let-values()"
"(let-values()"
"(if(expanded+parsed? i_138)"
"(let-values()(expanded+parsed-parsed i_138))"
"(if(semi-parsed-begin-for-syntax? i_138)"
"(let-values()"
"(parsed-begin-for-syntax21.1"
"(semi-parsed-begin-for-syntax-s i_138)"
"(parsed-only"
"(semi-parsed-begin-for-syntax-body i_138))))"
"(let-values() i_138)))))))"
"(let-values(((result_202)"
"(if(post-guard-var_111)(for-loop_300 rest_87) null)))"
"(cons elem_106 result_202))))"
"(if(post-guard-var_111)(for-loop_300 rest_87) null)))))"
" null))))"
" for-loop_300)"
" lst_164)))))"
"(define-values"
"(syntax-only)"
"(lambda(l_79)"
"(let-values(((lst_392) l_79))"
"(begin"
"(check-list lst_392)"
"((letrec-values(((for-loop_301)"
"(lambda(lst_393)"
"(if(pair? lst_393)"
"(let-values(((i_199)(unsafe-car lst_393))((rest_231)(unsafe-cdr lst_393)))"
"(let-values(((post-guard-var_112)(lambda() #t)))"
"(let-values()"
"(if(let-values(((or-part_356)(syntax?$1 i_199)))"
"(if or-part_356"
" or-part_356"
"(let-values(((or-part_38)(expanded+parsed? i_199)))"
"(if or-part_38 or-part_38(semi-parsed-begin-for-syntax? i_199)))))"
"(let-values()"
"(let-values(((elem_107)"
"(let-values()"
"(let-values()"
"(if(expanded+parsed? i_199)"
"(let-values()(expanded+parsed-s i_199))"
"(if(semi-parsed-begin-for-syntax? i_199)"
"(let-values()"
"(let-values(((s_446)"
"(semi-parsed-begin-for-syntax-s i_199)))"
"(let-values(((nested-bodys_0)"
"(semi-parsed-begin-for-syntax-body"
" i_199)))"
"(let-values(((disarmed-s_23)"
"(syntax-disarm$1 s_446)))"
"(let-values(((ok?_70 begin-for-syntax7_0 _8_0)"
"(let-values(((s_81) disarmed-s_23))"
"(let-values(((orig-s_74) s_81))"
"(let-values(((begin-for-syntax7_1"
" _8_1)"
"(let-values(((s_390)"
"(if(syntax?$1"
" s_81)"
"(syntax-e$1"
" s_81)"
" s_81)))"
"(if(pair?"
" s_390)"
"(let-values(((begin-for-syntax9_0)"
"(let-values(((s_27)"
"(car"
" s_390)))"
" s_27))"
"((_10_0)"
"(let-values(((s_194)"
"(cdr"
" s_390)))"
"(let-values(((s_195)"
"(if(syntax?$1"
" s_194)"
"(syntax-e$1"
" s_194)"
" s_194)))"
"(let-values(((flat-s_49)"
"(to-syntax-list.1"
" s_195)))"
"(if(not"
" flat-s_49)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_74))"
"(let-values()"
" flat-s_49)))))))"
"(values"
" begin-for-syntax9_0"
" _10_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_74)))))"
"(values"
" #t"
" begin-for-syntax7_1"
" _8_1))))))"
"(let-values(((s11_0) s_446)"
"((temp12_5)"
"(list*"
" begin-for-syntax7_0"
"(syntax-only nested-bodys_0))))"
"(rebuild66.1 #f #f s11_0 temp12_5)))))))"
"(let-values() i_199)))))))"
"(let-values(((result_8)"
"(if(post-guard-var_112)(for-loop_301 rest_231) null)))"
"(cons elem_107 result_8))))"
"(if(post-guard-var_112)(for-loop_301 rest_231) null)))))"
" null))))"
" for-loop_301)"
" lst_392)))))"
"(define-values(check-cross-phase-persistent-form)(lambda(bodys_11)(check-body bodys_11)))"
"(define-values"
"(check-body)"
"(lambda(bodys_12)"
"(begin"
"(let-values(((lst_73) bodys_12))"
"(begin"
"(check-list lst_73)"
"((letrec-values(((for-loop_88)"
"(lambda(lst_394)"
"(if(pair? lst_394)"
"(let-values(((body_18)(unsafe-car lst_394))((rest_232)(unsafe-cdr lst_394)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((p_68)"
"(if(expanded+parsed? body_18)"
"(expanded+parsed-parsed body_18)"
" body_18)))"
"(if(parsed-define-values? p_68)"
"(let-values()"
"(check-expr"
"(parsed-define-values-rhs p_68)"
"(length(parsed-define-values-syms p_68))"
" p_68))"
"(if(let-values(((or-part_25)"
"(parsed-#%declare? p_68)))"
"(if or-part_25"
" or-part_25"
"(let-values(((or-part_8)"
"(parsed-module? p_68)))"
"(if or-part_8"
" or-part_8"
"(syntax?$1 p_68)))))"
"(let-values()(void))"
"(let-values()(disallow p_68))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_88 rest_232)(values))))"
"(values)))))"
" for-loop_88)"
" lst_73)))"
"(void))))"
"(define-values"
"(check-expr)"
"(lambda(e_89 num-results_0 enclosing_15)"
"(if(let-values(((or-part_149)(parsed-lambda? e_89)))(if or-part_149 or-part_149(parsed-case-lambda? e_89)))"
"(let-values()(check-count 1 num-results_0 enclosing_15))"
"(if(parsed-quote? e_89)"
"(let-values()(begin(check-datum(parsed-quote-datum e_89) e_89)(check-count 1 num-results_0 enclosing_15)))"
"(if(parsed-app? e_89)"
"(let-values()"
"(let-values(((rands_1)(parsed-app-rands e_89)))"
"(begin"
"(let-values(((lst_75) rands_1))"
"(begin"
"(check-list lst_75)"
"((letrec-values(((for-loop_89)"
"(lambda(lst_236)"
"(if(pair? lst_236)"
"(let-values(((rand_0)(unsafe-car lst_236))"
"((rest_124)(unsafe-cdr lst_236)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()(check-expr rand_0 1 e_89))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_89 rest_124)(values))))"
"(values)))))"
" for-loop_89)"
" lst_75)))"
"(void)"
"(let-values(((tmp_59)(cross-phase-primitive-name(parsed-app-rator e_89))))"
"(if(if(equal? tmp_59 'cons) #t(equal? tmp_59 'list))"
"(let-values()(check-count 1 num-results_0 enclosing_15))"
"(if(equal? tmp_59 'make-struct-type)"
"(let-values()(check-count 5 num-results_0 enclosing_15))"
"(if(equal? tmp_59 'make-struct-type-property)"
"(let-values()(check-count 3 num-results_0 enclosing_15))"
"(if(equal? tmp_59 'gensym)"
"(let-values()"
"(if(let-values(((or-part_290)(= 0(length rands_1))))"
"(if or-part_290"
" or-part_290"
"(if(= 1(length rands_1))(quoted-string?(car rands_1)) #f)))"
"(void)"
"(let-values()(disallow e_89))))"
"(if(equal? tmp_59 'string->uninterned-symbol)"
"(let-values()"
"(if(if(= 1(length rands_1))(quoted-string?(car rands_1)) #f)"
"(void)"
"(let-values()(disallow e_89))))"
"(let-values()(disallow e_89)))))))))))"
"(void))))))"
"(define-values"
"(check-count)"
"(lambda(is-num_0 expected-num_0 enclosing_16)"
"(if(= is-num_0 expected-num_0)(void)(let-values()(disallow enclosing_16)))))"
"(define-values"
"(check-datum)"
"(lambda(d_37 e_90)"
"(if(let-values(((or-part_172)(number? d_37)))"
"(if or-part_172"
" or-part_172"
"(let-values(((or-part_178)(boolean? d_37)))"
"(if or-part_178"
" or-part_178"
"(let-values(((or-part_87)(symbol? d_37)))"
"(if or-part_87"
" or-part_87"
"(let-values(((or-part_88)(string? d_37)))(if or-part_88 or-part_88(bytes? d_37)))))))))"
"(let-values()(void))"
"(let-values()(disallow e_90)))))"
"(define-values(quoted-string?)(lambda(e_91)(if(parsed-quote? e_91)(string?(parsed-quote-datum e_91)) #f)))"
"(define-values"
"(cross-phase-primitive-name)"
"(lambda(id_140)"
"(if(parsed-id? id_140)"
"(let-values()"
"(let-values(((b_93)(parsed-id-binding id_140)))"
"(if(module-binding? b_93)"
"(if(eq? runtime-module-name(1/module-path-index-resolve(module-binding-module b_93)))"
"(module-binding-sym b_93)"
" #f)"
" #f)))"
"(let-values() #f))))"
"(define-values"
"(disallow)"
"(lambda(body_19)"
"(raise-syntax-error$1"
" 'module"
"     \"not allowed in a cross-phase persistent module\""
"(if(parsed? body_19)(datum->syntax$1 #f body_19(parsed-s body_19)) body_19))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'module"
"(lambda(s_443 ctx_100)"
"(begin"
"(if(eq?(expand-context-context ctx_100) 'top-level)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((obs_94)(expand-context-observer ctx_100)))"
"(if obs_94(let-values()(let-values()(call-expand-observe obs_94 'prim-module)))(void)))"
"               (raise-syntax-error$1 #f \"allowed only at the top level\" s_443))))"
"(let-values()"
"(let-values(((s225_0) s_443)((ctx226_0) ctx_100)((temp227_0) #f))"
"(expand-module18.1 #f #f #f #f #f #f #f #f #f #f #f #f #f #f s225_0 ctx226_0 temp227_0)))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'module*"
"(lambda(s_191 ctx_101)"
"(begin"
"(let-values(((obs_95)(expand-context-observer ctx_101)))"
"(if obs_95(let-values()(let-values()(call-expand-observe obs_95 'prim-module)))(void)))"
"         (raise-syntax-error$1 #f \"illegal use (not in a module top-level)\" s_191)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%module-begin"
"(lambda(s_423 ctx_102)"
"(begin"
"(let-values(((obs_96)(expand-context-observer ctx_102)))"
"(if obs_96(let-values()(let-values()(call-expand-observe obs_96 'prim-module-begin)))(void)))"
"(if(eq?(expand-context-context ctx_102) 'module-begin)"
"(void)"
"           (let-values () (raise-syntax-error$1 #f \"not in a module-definition context\" s_423)))"
"(if(expand-context-module-begin-k ctx_102)"
"(void)"
"           (let-values () (raise-syntax-error$1 #f \"not currently transforming a module\" s_423)))"
"((expand-context-module-begin-k ctx_102)"
" s_423"
"(let-values(((v_40) ctx_102))"
"(let-values(((the-struct_98) v_40))"
"(if(expand-context/outer? the-struct_98)"
"(let-values(((inner228_0)"
"(let-values(((the-struct_99)(root-expand-context/outer-inner v_40)))"
"(if(expand-context/inner? the-struct_99)"
"(let-values(((module-begin-k229_0) #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes the-struct_99)"
"(root-expand-context/inner-top-level-bind-scope the-struct_99)"
"(root-expand-context/inner-all-scopes-stx the-struct_99)"
"(root-expand-context/inner-defined-syms the-struct_99)"
"(root-expand-context/inner-counter the-struct_99)"
"(root-expand-context/inner-lift-key the-struct_99)"
"(expand-context/inner-to-parsed? the-struct_99)"
"(expand-context/inner-phase the-struct_99)"
"(expand-context/inner-namespace the-struct_99)"
"(expand-context/inner-user-env the-struct_99)"
"(expand-context/inner-just-once? the-struct_99)"
" module-begin-k229_0"
"(expand-context/inner-allow-unbound? the-struct_99)"
"(expand-context/inner-in-local-expand? the-struct_99)"
"(expand-context/inner-stops the-struct_99)"
"(expand-context/inner-declared-submodule-names the-struct_99)"
"(expand-context/inner-lifts the-struct_99)"
"(expand-context/inner-lift-envs the-struct_99)"
"(expand-context/inner-module-lifts the-struct_99)"
"(expand-context/inner-require-lifts the-struct_99)"
"(expand-context/inner-to-module-lifts the-struct_99)"
"(expand-context/inner-requires+provides the-struct_99)"
"(expand-context/inner-observer the-struct_99)"
"(expand-context/inner-for-serializable? the-struct_99)))"
"                                  (raise-argument-error 'struct-copy \"expand-context/inner?\" the-struct_99)))))"
"(expand-context/outer1.1"
" inner228_0"
"(root-expand-context/outer-post-expansion-scope the-struct_98)"
"(root-expand-context/outer-use-site-scopes the-struct_98)"
"(root-expand-context/outer-frame-id the-struct_98)"
"(expand-context/outer-context the-struct_98)"
"(expand-context/outer-env the-struct_98)"
"(expand-context/outer-post-expansion-scope-action the-struct_98)"
"(expand-context/outer-scopes the-struct_98)"
"(expand-context/outer-def-ctx-scopes the-struct_98)"
"(expand-context/outer-binding-layer the-struct_98)"
"(expand-context/outer-reference-records the-struct_98)"
"(expand-context/outer-only-immediate? the-struct_98)"
"(expand-context/outer-need-eventually-defined the-struct_98)"
"(expand-context/outer-current-introduction-scopes the-struct_98)"
"(expand-context/outer-name the-struct_98)))"
"                (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_98)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%declare"
"(lambda(s_403 ctx_103)"
"(begin"
"(let-values(((obs_97)(expand-context-observer ctx_103)))"
"(if obs_97(let-values()(let-values()(call-expand-observe obs_97 'prim-declare)))(void)))"
"         (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_403)))))"
" print-values)"
"(define-values"
"(expand-module18.1)"
"(lambda(always-produce-compiled?1_0"
" always-produce-compiled?8_0"
" enclosing-all-scopes-stx3_0"
" enclosing-all-scopes-stx10_0"
" enclosing-is-cross-phase-persistent?4_0"
" enclosing-is-cross-phase-persistent?11_0"
" enclosing-requires+provides5_0"
" enclosing-requires+provides12_0"
" keep-enclosing-scope-at-phase2_0"
" keep-enclosing-scope-at-phase9_0"
" modules-being-compiled7_0"
" modules-being-compiled14_0"
" mpis-for-enclosing-reset6_0"
" mpis-for-enclosing-reset13_0"
" s15_0"
" init-ctx16_0"
" enclosing-self17_0)"
"(let-values(((s_17) s15_0))"
"(let-values(((init-ctx_0) init-ctx16_0))"
"(let-values(((enclosing-self_1) enclosing-self17_0))"
"(let-values(((always-produce-compiled?_0)(if always-produce-compiled?8_0 always-produce-compiled?1_0 #f)))"
"(let-values(((keep-enclosing-scope-at-phase_0)"
"(if keep-enclosing-scope-at-phase9_0 keep-enclosing-scope-at-phase2_0 #f)))"
"(let-values(((enclosing-all-scopes-stx_0)"
"(if enclosing-all-scopes-stx10_0 enclosing-all-scopes-stx3_0 #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_0)"
"(if enclosing-is-cross-phase-persistent?11_0 enclosing-is-cross-phase-persistent?4_0 #f)))"
"(let-values(((enclosing-r+p_1)"
"(if enclosing-requires+provides12_0 enclosing-requires+provides5_0 #f)))"
"(let-values(((mpis-for-enclosing-reset_0)"
"(if mpis-for-enclosing-reset13_0 mpis-for-enclosing-reset6_0 #f)))"
"(let-values(((modules-being-compiled_3)"
"(if modules-being-compiled14_0 modules-being-compiled7_0(make-hasheq))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_98)(expand-context-observer init-ctx_0)))"
"(if obs_98"
"(let-values()(let-values()(call-expand-observe obs_98 'prim-module)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_24)(syntax-disarm$1 s_17)))"
"(let-values(((ok?_71 module230_0 id:module-name231_0 initial-require232_0 body233_0)"
"(let-values(((s_459) disarmed-s_24))"
"(let-values(((orig-s_75) s_459))"
"(let-values(((module230_1"
" id:module-name231_1"
" initial-require232_1"
" body233_1)"
"(let-values(((s_473)"
"(if(syntax?$1 s_459)"
"(syntax-e$1 s_459)"
" s_459)))"
"(if(pair? s_473)"
"(let-values(((module234_0)"
"(let-values(((s_72)(car s_473)))"
" s_72))"
"((id:module-name235_0"
" initial-require236_0"
" body237_0)"
"(let-values(((s_199)(cdr s_473)))"
"(let-values(((s_717)"
"(if(syntax?$1 s_199)"
"(syntax-e$1 s_199)"
" s_199)))"
"(if(pair? s_717)"
"(let-values(((id:module-name238_0)"
"(let-values(((s_718)"
"(car"
" s_717)))"
"(if(let-values(((or-part_56)"
"(if(syntax?$1"
" s_718)"
"(symbol?"
"(syntax-e$1"
" s_718))"
" #f)))"
"(if or-part_56"
" or-part_56"
"(symbol?"
" s_718)))"
" s_718"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"not an identifier\""
" orig-s_75"
" s_718))))"
"((initial-require239_0"
" body240_0)"
"(let-values(((s_461)"
"(cdr"
" s_717)))"
"(let-values(((s_427)"
"(if(syntax?$1"
" s_461)"
"(syntax-e$1"
" s_461)"
" s_461)))"
"(if(pair?"
" s_427)"
"(let-values(((initial-require241_0)"
"(let-values(((s_462)"
"(car"
" s_427)))"
" s_462))"
"((body242_0)"
"(let-values(((s_428)"
"(cdr"
" s_427)))"
"(let-values(((s_405)"
"(if(syntax?$1"
" s_428)"
"(syntax-e$1"
" s_428)"
" s_428)))"
"(let-values(((flat-s_50)"
"(to-syntax-list.1"
" s_405)))"
"(if(not"
" flat-s_50)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_75))"
"(let-values()"
" flat-s_50)))))))"
"(values"
" initial-require241_0"
" body242_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_75))))))"
"(values"
" id:module-name238_0"
" initial-require239_0"
" body240_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                       \"bad syntax\""
" orig-s_75))))))"
"(values"
" module234_0"
" id:module-name235_0"
" initial-require236_0"
" body237_0))"
"                                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_75)))))"
"(values"
" #t"
" module230_1"
" id:module-name231_1"
" initial-require232_1"
" body233_1))))))"
"(let-values(((rebuild-s_14)"
"(let-values(((temp251_0) #t)((temp252_1) #t))"
"(keep-as-needed59.1 #f #f temp252_1 #t temp251_0 #t init-ctx_0 s_17))))"
"(let-values(((initial-require_0)(syntax->datum$1 initial-require232_0)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_357) keep-enclosing-scope-at-phase_0))"
"(if or-part_357"
" or-part_357"
"(1/module-path? initial-require_0)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                         \"not a module path\""
" s_17"
" initial-require232_0)))"
"(values))))"
"(let-values(((phase_148) 0))"
"(let-values(((module-name-sym_0)(syntax-e$1 id:module-name231_0)))"
"(let-values(((outside-scope_1)(new-scope 'module)))"
"(let-values(((inside-scope_0)(new-multi-scope module-name-sym_0)))"
"(let-values(((self_29)"
"(make-self-module-path-index"
"(if enclosing-self_1"
" module-name-sym_0"
"(string->uninterned-symbol"
"(symbol->string module-name-sym_0)))"
" enclosing-self_1)))"
"(let-values(((enclosing-mod_1)"
"(if enclosing-self_1"
"                                                                (1/module-path-index-join '(submod \"..\") self_29)"
" #f)))"
"(let-values((()"
"(begin"
"(if(if enclosing-mod_1 mpis-for-enclosing-reset_0 #f)"
"(let-values()"
"(set-box!"
" mpis-for-enclosing-reset_0"
"(cons"
" enclosing-mod_1"
"(unbox mpis-for-enclosing-reset_0))))"
"(void))"
"(values))))"
"(let-values(((apply-module-scopes_0)"
"(make-apply-module-scopes"
" outside-scope_1"
" inside-scope_0"
" init-ctx_0"
" keep-enclosing-scope-at-phase_0"
" self_29"
" enclosing-self_1"
" enclosing-mod_1)))"
"(let-values(((initial-require-s_0)"
"(apply-module-scopes_0 initial-require232_0)))"
"(let-values(((all-scopes-s_0)"
"(if enclosing-all-scopes-stx_0"
"(apply-module-scopes_0"
"(syntax-shift-phase-level$1"
" enclosing-all-scopes-stx_0"
" keep-enclosing-scope-at-phase_0))"
" initial-require-s_0)))"
"(let-values(((root-ctx_6)"
"(let-values(((temp253_2)"
"(if keep-enclosing-scope-at-phase_0"
"(root-expand-context-module-scopes"
" init-ctx_0)"
" null))"
"((outside-scope254_0)"
" outside-scope_1)"
"((inside-scope255_0)"
" inside-scope_0)"
"((all-scopes-s256_0)"
" all-scopes-s_0))"
"(make-root-expand-context11.1"
" all-scopes-s256_0"
" #t"
" temp253_2"
" #t"
" outside-scope254_0"
" #t"
" inside-scope255_0"
" #t))))"
"(let-values(((new-module-scopes_0)"
"(root-expand-context-module-scopes"
" root-ctx_6)))"
"(let-values(((frame-id_16)"
"(root-expand-context-frame-id root-ctx_6)))"
"(let-values(((make-m-ns246_0)"
"(lambda(for-submodule?243_0"
" for-submodule?244_0"
" ns245_0)"
"(let-values(((ns_8) ns245_0))"
"(let-values(((for-submodule?_1)"
"(if for-submodule?244_0"
" for-submodule?243_0"
"(if enclosing-self_1"
" #t"
" #f))))"
"(let-values()"
"(let-values(((self258_0) self_29)"
"((root-ctx259_0)"
" root-ctx_6)"
"((for-submodule?260_0)"
" for-submodule?_1))"
"(make-module-namespace48.1"
" for-submodule?260_0"
" self258_0"
" root-ctx259_0"
" ns_8))))))))"
"(let-values()"
"(let-values()"
"(let-values(((m-ns_19)"
"(let-values(((temp261_0)"
"(expand-context-namespace"
" init-ctx_0)))"
"(make-m-ns246_0"
" #f"
" #f"
" temp261_0))))"
"(let-values(((ctx_104)"
"(let-values(((v_144)"
"(copy-root-expand-context"
" init-ctx_0"
" root-ctx_6)))"
"(let-values(((the-struct_87)"
" v_144))"
"(if(expand-context/outer?"
" the-struct_87)"
"(let-values(((post-expansion-scope-action262_0)"
" add-scope)"
"((inner263_0)"
"(let-values(((the-struct_100)"
"(root-expand-context/outer-inner"
" v_144)))"
"(if(expand-context/inner?"
" the-struct_100)"
"(let-values(((allow-unbound?264_0)"
" #f)"
"((namespace265_0)"
" m-ns_19)"
"((phase266_0)"
" phase_148)"
"((just-once?267_0)"
" #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_100)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_100)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_100)"
"(root-expand-context/inner-defined-syms"
" the-struct_100)"
"(root-expand-context/inner-counter"
" the-struct_100)"
"(root-expand-context/inner-lift-key"
" the-struct_100)"
"(expand-context/inner-to-parsed?"
" the-struct_100)"
" phase266_0"
" namespace265_0"
"(expand-context/inner-user-env"
" the-struct_100)"
" just-once?267_0"
"(expand-context/inner-module-begin-k"
" the-struct_100)"
" allow-unbound?264_0"
"(expand-context/inner-in-local-expand?"
" the-struct_100)"
"(expand-context/inner-stops"
" the-struct_100)"
"(expand-context/inner-declared-submodule-names"
" the-struct_100)"
"(expand-context/inner-lifts"
" the-struct_100)"
"(expand-context/inner-lift-envs"
" the-struct_100)"
"(expand-context/inner-module-lifts"
" the-struct_100)"
"(expand-context/inner-require-lifts"
" the-struct_100)"
"(expand-context/inner-to-module-lifts"
" the-struct_100)"
"(expand-context/inner-requires+provides"
" the-struct_100)"
"(expand-context/inner-observer"
" the-struct_100)"
"(expand-context/inner-for-serializable?"
" the-struct_100)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                               \"expand-context/inner?\""
" the-struct_100)))))"
"(expand-context/outer1.1"
" inner263_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_87)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_87)"
"(root-expand-context/outer-frame-id"
" the-struct_87)"
"(expand-context/outer-context"
" the-struct_87)"
"(expand-context/outer-env"
" the-struct_87)"
" post-expansion-scope-action262_0"
"(expand-context/outer-scopes"
" the-struct_87)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_87)"
"(expand-context/outer-binding-layer"
" the-struct_87)"
"(expand-context/outer-reference-records"
" the-struct_87)"
"(expand-context/outer-only-immediate?"
" the-struct_87)"
"(expand-context/outer-need-eventually-defined"
" the-struct_87)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_87)"
"(expand-context/outer-name"
" the-struct_87)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                             \"expand-context/outer?\""
" the-struct_87))))))"
"(let-values(((bodys_4)"
"(let-values(((scoped-s_0)"
"(apply-module-scopes_0"
" disarmed-s_24)))"
"(let-values(((ok?_72"
" _268_0"
" _269_0"
" _270_0"
" body271_0)"
"(let-values(((s_719)"
" scoped-s_0))"
"(let-values(((orig-s_76)"
" s_719))"
"(let-values(((_268_1"
" _269_1"
" _270_1"
" body271_1)"
"(let-values(((s_298)"
"(if(syntax?$1"
" s_719)"
"(syntax-e$1"
" s_719)"
" s_719)))"
"(if(pair?"
" s_298)"
"(let-values(((_272_0)"
"(let-values(((s_90)"
"(car"
" s_298)))"
" s_90))"
"((_273_0"
" _274_0"
" body275_0)"
"(let-values(((s_150)"
"(cdr"
" s_298)))"
"(let-values(((s_720)"
"(if(syntax?$1"
" s_150)"
"(syntax-e$1"
" s_150)"
" s_150)))"
"(if(pair?"
" s_720)"
"(let-values(((_276_0)"
"(let-values(((s_721)"
"(car"
" s_720)))"
" s_721))"
"((_277_0"
" body278_0)"
"(let-values(((s_38)"
"(cdr"
" s_720)))"
"(let-values(((s_151)"
"(if(syntax?$1"
" s_38)"
"(syntax-e$1"
" s_38)"
" s_38)))"
"(if(pair?"
" s_151)"
"(let-values(((_279_0)"
"(let-values(((s_91)"
"(car"
" s_151)))"
" s_91))"
"((body280_0)"
"(let-values(((s_694)"
"(cdr"
" s_151)))"
"(let-values(((s_300)"
"(if(syntax?$1"
" s_694)"
"(syntax-e$1"
" s_694)"
" s_694)))"
"(let-values(((flat-s_51)"
"(to-syntax-list.1"
" s_300)))"
"(if(not"
" flat-s_51)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_76))"
"(let-values()"
" flat-s_51)))))))"
"(values"
" _279_0"
" body280_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_76))))))"
"(values"
" _276_0"
" _277_0"
" body278_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                   \"bad syntax\""
" orig-s_76))))))"
"(values"
" _272_0"
" _273_0"
" _274_0"
" body275_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_76)))))"
"(values"
" #t"
" _268_1"
" _269_1"
" _270_1"
" body271_1))))))"
" body271_0))))"
"(let-values(((requires+provides_6)"
"(make-requires+provides"
" self_29)))"
"(let-values(((defined-syms_10)"
"(root-expand-context-defined-syms"
" root-ctx_6)))"
"(let-values(((compiled-submodules_1)"
"(make-hasheq)))"
"(let-values(((compiled-module-box_0)"
"(box #f)))"
"(let-values(((mpis-to-reset_0)"
"(box null)))"
"(let-values(((initial-require!_0)"
"(lambda()"
"(if(not"
" keep-enclosing-scope-at-phase_0)"
"(let-values()"
"(let-values(((temp286_1)"
" 'module))"
"(perform-initial-require!40.1"
" temp286_1"
" initial-require_0"
" self_29"
" all-scopes-s_0"
" m-ns_19"
" requires+provides_6)))"
"(let-values()"
"(begin"
"(add-required-module!"
" requires+provides_6"
" enclosing-mod_1"
" keep-enclosing-scope-at-phase_0"
" enclosing-is-cross-phase-persistent?_0)"
"(let-values(((enclosing-r+p288_0)"
" enclosing-r+p_1)"
"((enclosing-mod289_0)"
" enclosing-mod_1)"
"((keep-enclosing-scope-at-phase290_0)"
" keep-enclosing-scope-at-phase_0))"
"(add-enclosing-module-defined-and-required!61.1"
" enclosing-r+p288_0"
" requires+provides_6"
" enclosing-mod289_0"
" keep-enclosing-scope-at-phase290_0))"
"(let-values(((m-ns291_0)"
" m-ns_19)"
"((enclosing-mod292_0)"
" enclosing-mod_1)"
"((keep-enclosing-scope-at-phase293_0)"
" keep-enclosing-scope-at-phase_0))"
"(namespace-module-visit!102.1"
" #f"
" #f"
" m-ns291_0"
" enclosing-mod292_0"
" keep-enclosing-scope-at-phase293_0))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_99)"
"(expand-context-observer"
" init-ctx_0)))"
"(if obs_99"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_99"
" 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(initial-require!_0)"
"(values))))"
"(let-values(((again?_0)"
" #f))"
"(letrec-values(((module-begin-k_1)"
"(lambda(mb-s_0"
" mb-init-ctx_0)"
"(let-values((()"
"(begin"
"(if again?_0"
"(let-values()"
"(begin"
"(requires+provides-reset!"
" requires+provides_6)"
"(initial-require!_0)"
"(hash-clear!"
" compiled-submodules_1)"
"(set-box!"
" compiled-module-box_0"
" #f)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(set! again?_0"
" #t)"
"(values))))"
"(let-values(((ctx_1)"
"(let-values(((v_250)"
" mb-init-ctx_0))"
"(let-values(((the-struct_101)"
" v_250))"
"(if(expand-context/outer?"
" the-struct_101)"
"(let-values(((inner298_0)"
"(let-values(((the-struct_102)"
"(root-expand-context/outer-inner"
" v_250)))"
"(if(expand-context/inner?"
" the-struct_102)"
"(let-values(((module-begin-k299_0)"
"(lambda(s_94"
" ctx_105)"
"(let-values(((requires+provides300_0)"
" requires+provides_6)"
"((compiled-submodules301_0)"
" compiled-submodules_1)"
"((compiled-module-box302_0)"
" compiled-module-box_0)"
"((requires+provides303_0)"
"(make-requires+provides"
" self_29))"
"((compiled-submodules304_0)"
"(make-hasheq))"
"((compiled-module-box305_0)"
"(box"
" #f)))"
"(dynamic-wind"
"(lambda()"
"(begin"
"(set! requires+provides_6"
" requires+provides303_0)"
"(set! compiled-submodules_1"
" compiled-submodules304_0)"
"(set! compiled-module-box_0"
" compiled-module-box305_0)))"
"(lambda()"
"(module-begin-k_1"
" s_94"
" ctx_105))"
"(lambda()"
"(begin"
"(set! requires+provides_6"
" requires+provides300_0)"
"(set! compiled-submodules_1"
" compiled-submodules301_0)"
"(set! compiled-module-box_0"
" compiled-module-box302_0))))))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_102)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_102)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_102)"
"(root-expand-context/inner-defined-syms"
" the-struct_102)"
"(root-expand-context/inner-counter"
" the-struct_102)"
"(root-expand-context/inner-lift-key"
" the-struct_102)"
"(expand-context/inner-to-parsed?"
" the-struct_102)"
"(expand-context/inner-phase"
" the-struct_102)"
"(expand-context/inner-namespace"
" the-struct_102)"
"(expand-context/inner-user-env"
" the-struct_102)"
"(expand-context/inner-just-once?"
" the-struct_102)"
" module-begin-k299_0"
"(expand-context/inner-allow-unbound?"
" the-struct_102)"
"(expand-context/inner-in-local-expand?"
" the-struct_102)"
"(expand-context/inner-stops"
" the-struct_102)"
"(expand-context/inner-declared-submodule-names"
" the-struct_102)"
"(expand-context/inner-lifts"
" the-struct_102)"
"(expand-context/inner-lift-envs"
" the-struct_102)"
"(expand-context/inner-module-lifts"
" the-struct_102)"
"(expand-context/inner-require-lifts"
" the-struct_102)"
"(expand-context/inner-to-module-lifts"
" the-struct_102)"
"(expand-context/inner-requires+provides"
" the-struct_102)"
"(expand-context/inner-observer"
" the-struct_102)"
"(expand-context/inner-for-serializable?"
" the-struct_102)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                            \"expand-context/inner?\""
" the-struct_102)))))"
"(expand-context/outer1.1"
" inner298_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_101)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_101)"
"(root-expand-context/outer-frame-id"
" the-struct_101)"
"(expand-context/outer-context"
" the-struct_101)"
"(expand-context/outer-env"
" the-struct_101)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_101)"
"(expand-context/outer-scopes"
" the-struct_101)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_101)"
"(expand-context/outer-binding-layer"
" the-struct_101)"
"(expand-context/outer-reference-records"
" the-struct_101)"
"(expand-context/outer-only-immediate?"
" the-struct_101)"
"(expand-context/outer-need-eventually-defined"
" the-struct_101)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_101)"
"(expand-context/outer-name"
" the-struct_101)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                          \"expand-context/outer?\""
" the-struct_101))))))"
"(let-values(((added-s_2)"
"(add-scope"
" mb-s_0"
" inside-scope_0)))"
"(let-values((()"
"(begin"
"(let-values(((obs_100)"
"(expand-context-observer"
" ctx_1)))"
"(if obs_100"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_100"
" 'rename-one"
" added-s_2)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-mb-s_0)"
"(syntax-disarm$1"
" added-s_2)))"
"(let-values(((ok?_73"
" #%module-begin294_0"
" body295_0)"
"(let-values(((s_154)"
" disarmed-mb-s_0))"
"(let-values(((orig-s_77)"
" s_154))"
"(let-values(((#%module-begin294_1"
" body295_1)"
"(let-values(((s_308)"
"(if(syntax?$1"
" s_154)"
"(syntax-e$1"
" s_154)"
" s_154)))"
"(if(pair?"
" s_308)"
"(let-values(((#%module-begin296_0)"
"(let-values(((s_101)"
"(car"
" s_308)))"
" s_101))"
"((body297_0)"
"(let-values(((s_102)"
"(cdr"
" s_308)))"
"(let-values(((s_309)"
"(if(syntax?$1"
" s_102)"
"(syntax-e$1"
" s_102)"
" s_102)))"
"(let-values(((flat-s_52)"
"(to-syntax-list.1"
" s_309)))"
"(if(not"
" flat-s_52)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                          \"bad syntax\""
" orig-s_77))"
"(let-values()"
" flat-s_52)))))))"
"(values"
" #%module-begin296_0"
" body297_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                  \"bad syntax\""
" orig-s_77)))))"
"(values"
" #t"
" #%module-begin294_1"
" body295_1))))))"
"(let-values(((bodys_13)"
" body295_0))"
"(let-values(((rebuild-mb-s_0)"
"(let-values(((ctx306_0)"
" ctx_1)"
"((mb-s307_0)"
" mb-s_0))"
"(keep-as-needed59.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ctx306_0"
" mb-s307_0))))"
"(let-values(((need-eventually-defined_1)"
"(make-hasheqv)))"
"(let-values(((module-ends_0)"
"(make-shared-module-ends)))"
"(let-values(((declared-keywords_0)"
"(make-hasheq)))"
"(let-values(((declared-submodule-names_3)"
"(make-hasheq)))"
"(let-values(((expression-expanded-bodys_0)"
"((letrec-values(((pass-1-and-2-loop_0)"
"(lambda(bodys_14"
" phase_149)"
"(let-values(((def-ctx-scopes_8)"
"(box"
" null)))"
"(let-values(((partial-body-ctx_0)"
"(let-values(((v_251)"
" ctx_1))"
"(let-values(((the-struct_103)"
" v_251))"
"(if(expand-context/outer?"
" the-struct_103)"
"(let-values(((context317_0)"
" 'module)"
"((only-immediate?318_0)"
" #t)"
"((def-ctx-scopes319_0)"
" def-ctx-scopes_8)"
"((need-eventually-defined320_0)"
" need-eventually-defined_1)"
"((inner321_0)"
"(let-values(((the-struct_104)"
"(root-expand-context/outer-inner"
" v_251)))"
"(if(expand-context/inner?"
" the-struct_104)"
"(let-values(((phase322_0)"
" phase_149)"
"((namespace323_0)"
"(namespace->namespace-at-phase"
" m-ns_19"
" phase_149))"
"((declared-submodule-names324_0)"
" declared-submodule-names_3)"
"((lifts325_0)"
"(let-values(((temp329_0)"
"(make-wrap-as-definition"
" self_29"
" frame-id_16"
" inside-scope_0"
" all-scopes-s_0"
" defined-syms_10"
" requires+provides_6)))"
"(make-lift-context6.1"
" #f"
" #f"
" temp329_0)))"
"((module-lifts326_0)"
"(make-module-lift-context"
" phase_149"
" #t))"
"((require-lifts327_0)"
"(make-require-lift-context"
" phase_149"
"(let-values(((declared-submodule-names333_0)"
" declared-submodule-names_3))"
"(make-parse-lifted-require222.1"
" declared-submodule-names333_0"
" m-ns_19"
" self_29"
" requires+provides_6))))"
"((to-module-lifts328_0)"
"(let-values(((module-ends335_0)"
" module-ends_0)"
"((temp336_0)"
" #f))"
"(make-to-module-lift-context25.1"
" temp336_0"
" module-ends335_0"
" phase_149))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_104)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_104)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_104)"
"(root-expand-context/inner-defined-syms"
" the-struct_104)"
"(root-expand-context/inner-counter"
" the-struct_104)"
"(root-expand-context/inner-lift-key"
" the-struct_104)"
"(expand-context/inner-to-parsed?"
" the-struct_104)"
" phase322_0"
" namespace323_0"
"(expand-context/inner-user-env"
" the-struct_104)"
"(expand-context/inner-just-once?"
" the-struct_104)"
"(expand-context/inner-module-begin-k"
" the-struct_104)"
"(expand-context/inner-allow-unbound?"
" the-struct_104)"
"(expand-context/inner-in-local-expand?"
" the-struct_104)"
"(expand-context/inner-stops"
" the-struct_104)"
" declared-submodule-names324_0"
" lifts325_0"
"(expand-context/inner-lift-envs"
" the-struct_104)"
" module-lifts326_0"
" require-lifts327_0"
" to-module-lifts328_0"
"(expand-context/inner-requires+provides"
" the-struct_104)"
"(expand-context/inner-observer"
" the-struct_104)"
"(expand-context/inner-for-serializable?"
" the-struct_104)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                      \"expand-context/inner?\""
" the-struct_104)))))"
"(expand-context/outer1.1"
" inner321_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_103)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_103)"
"(root-expand-context/outer-frame-id"
" the-struct_103)"
" context317_0"
"(expand-context/outer-env"
" the-struct_103)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_103)"
"(expand-context/outer-scopes"
" the-struct_103)"
" def-ctx-scopes319_0"
"(expand-context/outer-binding-layer"
" the-struct_103)"
"(expand-context/outer-reference-records"
" the-struct_103)"
" only-immediate?318_0"
" need-eventually-defined320_0"
"(expand-context/outer-current-introduction-scopes"
" the-struct_103)"
"(expand-context/outer-name"
" the-struct_103)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                    \"expand-context/outer?\""
" the-struct_103))))))"
"(let-values(((partially-expanded-bodys_0)"
"(let-values(((temp338_0)"
"(zero?"
" phase_149))"
"((phase339_0)"
" phase_149)"
"((partial-body-ctx340_0)"
" partial-body-ctx_0)"
"((m-ns341_0)"
" m-ns_19)"
"((self342_0)"
" self_29)"
"((frame-id343_0)"
" frame-id_16)"
"((requires+provides344_0)"
" requires+provides_6)"
"((need-eventually-defined345_0)"
" need-eventually-defined_1)"
"((all-scopes-s346_0)"
" all-scopes-s_0)"
"((defined-syms347_0)"
" defined-syms_10)"
"((declared-keywords348_0)"
" declared-keywords_0)"
"((declared-submodule-names349_0)"
" declared-submodule-names_3)"
"((compiled-submodules350_0)"
" compiled-submodules_1)"
"((modules-being-compiled351_0)"
" modules-being-compiled_3)"
"((mpis-to-reset352_0)"
" mpis-to-reset_0)"
"((pass-1-and-2-loop353_0)"
" pass-1-and-2-loop_0))"
"(partially-expand-bodys81.1"
" all-scopes-s346_0"
" compiled-submodules350_0"
" partial-body-ctx340_0"
" declared-keywords348_0"
" declared-submodule-names349_0"
" defined-syms347_0"
" frame-id343_0"
" pass-1-and-2-loop353_0"
" modules-being-compiled351_0"
" mpis-to-reset352_0"
" m-ns341_0"
" need-eventually-defined345_0"
" phase339_0"
" requires+provides344_0"
" self342_0"
" temp338_0"
" bodys_14))))"
"(let-values((()"
"(begin"
"(let-values(((obs_101)"
"(expand-context-observer"
" partial-body-ctx_0)))"
"(if obs_101"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_101"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_6)"
"(let-values(((v_252)"
"(accumulate-def-ctx-scopes"
" partial-body-ctx_0"
" def-ctx-scopes_8)))"
"(let-values(((the-struct_105)"
" v_252))"
"(if(expand-context/outer?"
" the-struct_105)"
"(let-values(((only-immediate?354_0)"
" #f)"
"((def-ctx-scopes355_0)"
" #f)"
"((post-expansion-scope356_0)"
" #f)"
"((inner357_0)"
"(let-values(((the-struct_77)"
"(root-expand-context/outer-inner"
" v_252)))"
"(if(expand-context/inner?"
" the-struct_77)"
"(let-values(((to-module-lifts358_0)"
"(let-values(((module-ends360_0)"
" module-ends_0)"
"((temp361_1)"
" #t))"
"(make-to-module-lift-context25.1"
" temp361_1"
" module-ends360_0"
" phase_149))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_77)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_77)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_77)"
"(root-expand-context/inner-defined-syms"
" the-struct_77)"
"(root-expand-context/inner-counter"
" the-struct_77)"
"(root-expand-context/inner-lift-key"
" the-struct_77)"
"(expand-context/inner-to-parsed?"
" the-struct_77)"
"(expand-context/inner-phase"
" the-struct_77)"
"(expand-context/inner-namespace"
" the-struct_77)"
"(expand-context/inner-user-env"
" the-struct_77)"
"(expand-context/inner-just-once?"
" the-struct_77)"
"(expand-context/inner-module-begin-k"
" the-struct_77)"
"(expand-context/inner-allow-unbound?"
" the-struct_77)"
"(expand-context/inner-in-local-expand?"
" the-struct_77)"
"(expand-context/inner-stops"
" the-struct_77)"
"(expand-context/inner-declared-submodule-names"
" the-struct_77)"
"(expand-context/inner-lifts"
" the-struct_77)"
"(expand-context/inner-lift-envs"
" the-struct_77)"
"(expand-context/inner-module-lifts"
" the-struct_77)"
"(expand-context/inner-require-lifts"
" the-struct_77)"
" to-module-lifts358_0"
"(expand-context/inner-requires+provides"
" the-struct_77)"
"(expand-context/inner-observer"
" the-struct_77)"
"(expand-context/inner-for-serializable?"
" the-struct_77)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                            \"expand-context/inner?\""
" the-struct_77)))))"
"(expand-context/outer1.1"
" inner357_0"
" post-expansion-scope356_0"
"(root-expand-context/outer-use-site-scopes"
" the-struct_105)"
"(root-expand-context/outer-frame-id"
" the-struct_105)"
"(expand-context/outer-context"
" the-struct_105)"
"(expand-context/outer-env"
" the-struct_105)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_105)"
"(expand-context/outer-scopes"
" the-struct_105)"
" def-ctx-scopes355_0"
"(expand-context/outer-binding-layer"
" the-struct_105)"
"(expand-context/outer-reference-records"
" the-struct_105)"
" only-immediate?354_0"
"(expand-context/outer-need-eventually-defined"
" the-struct_105)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_105)"
"(expand-context/outer-name"
" the-struct_105)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                          \"expand-context/outer?\""
" the-struct_105))))))"
"(let-values(((temp309_0)"
"(zero?"
" phase_149))"
"((phase310_0)"
" phase_149)"
"((body-ctx311_0)"
" body-ctx_6)"
"((self312_0)"
" self_29)"
"((declared-submodule-names313_0)"
" declared-submodule-names_3)"
"((compiled-submodules314_0)"
" compiled-submodules_1)"
"((modules-being-compiled315_0)"
" modules-being-compiled_3)"
"((mpis-to-reset316_0)"
" mpis-to-reset_0))"
"(finish-expanding-body-expressons101.1"
" compiled-submodules314_0"
" body-ctx311_0"
" declared-submodule-names313_0"
" modules-being-compiled315_0"
" mpis-to-reset316_0"
" phase310_0"
" self312_0"
" temp309_0"
" partially-expanded-bodys_0))))))))))"
" pass-1-and-2-loop_0)"
" bodys_13"
" phase_148)))"
"(let-values((()"
"(begin"
"(check-defined-by-now"
" need-eventually-defined_1"
" self_29)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_102)"
"(expand-context-observer"
" ctx_1)))"
"(if obs_102"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_102"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((fully-expanded-bodys-except-post-submodules_0)"
"(let-values(((requires+provides363_0)"
" requires+provides_6)"
"((declared-submodule-names364_0)"
" declared-submodule-names_3)"
"((m-ns365_0)"
" m-ns_19)"
"((phase366_0)"
" phase_148)"
"((self367_0)"
" self_29)"
"((ctx368_0)"
" ctx_1))"
"(resolve-provides117.1"
" ctx368_0"
" declared-submodule-names364_0"
" m-ns365_0"
" phase366_0"
" requires+provides363_0"
" self367_0"
" expression-expanded-bodys_0))))"
"(let-values(((is-cross-phase-persistent?_1)"
"(hash-ref"
" declared-keywords_0"
" '#:cross-phase-persistent"
" #f)))"
"(let-values((()"
"(begin"
"(if is-cross-phase-persistent?_1"
"(let-values()"
"(begin"
"(if(requires+provides-can-cross-phase-persistent?"
" requires+provides_6)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                \"cannot be cross-phase persistent due to required modules\""
" rebuild-s_14"
"(hash-ref"
" declared-keywords_0"
" '#:cross-phase-persistent))))"
"(check-cross-phase-persistent-form"
" fully-expanded-bodys-except-post-submodules_0)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_103)"
"(expand-context-observer"
" ctx_1)))"
"(if obs_103"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_103"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((submod-m-ns_0)"
"(let-values(((temp370_0)"
" #t))"
"(make-m-ns246_0"
" temp370_0"
" #t"
" m-ns_19))))"
"(let-values(((submod-ctx_0)"
"(let-values(((v_253)"
" ctx_1))"
"(let-values(((the-struct_106)"
" v_253))"
"(if(expand-context/outer?"
" the-struct_106)"
"(let-values(((frame-id371_0)"
" #f)"
"((post-expansion-scope372_0)"
" #f)"
"((inner373_0)"
"(let-values(((the-struct_72)"
"(root-expand-context/outer-inner"
" v_253)))"
"(if(expand-context/inner?"
" the-struct_72)"
"(let-values(((namespace374_0)"
" submod-m-ns_0))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_72)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_72)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_72)"
"(root-expand-context/inner-defined-syms"
" the-struct_72)"
"(root-expand-context/inner-counter"
" the-struct_72)"
"(root-expand-context/inner-lift-key"
" the-struct_72)"
"(expand-context/inner-to-parsed?"
" the-struct_72)"
"(expand-context/inner-phase"
" the-struct_72)"
" namespace374_0"
"(expand-context/inner-user-env"
" the-struct_72)"
"(expand-context/inner-just-once?"
" the-struct_72)"
"(expand-context/inner-module-begin-k"
" the-struct_72)"
"(expand-context/inner-allow-unbound?"
" the-struct_72)"
"(expand-context/inner-in-local-expand?"
" the-struct_72)"
"(expand-context/inner-stops"
" the-struct_72)"
"(expand-context/inner-declared-submodule-names"
" the-struct_72)"
"(expand-context/inner-lifts"
" the-struct_72)"
"(expand-context/inner-lift-envs"
" the-struct_72)"
"(expand-context/inner-module-lifts"
" the-struct_72)"
"(expand-context/inner-require-lifts"
" the-struct_72)"
"(expand-context/inner-to-module-lifts"
" the-struct_72)"
"(expand-context/inner-requires+provides"
" the-struct_72)"
"(expand-context/inner-observer"
" the-struct_72)"
"(expand-context/inner-for-serializable?"
" the-struct_72)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                  \"expand-context/inner?\""
" the-struct_72)))))"
"(expand-context/outer1.1"
" inner373_0"
" post-expansion-scope372_0"
"(root-expand-context/outer-use-site-scopes"
" the-struct_106)"
" frame-id371_0"
"(expand-context/outer-context"
" the-struct_106)"
"(expand-context/outer-env"
" the-struct_106)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_106)"
"(expand-context/outer-scopes"
" the-struct_106)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_106)"
"(expand-context/outer-binding-layer"
" the-struct_106)"
"(expand-context/outer-reference-records"
" the-struct_106)"
"(expand-context/outer-only-immediate?"
" the-struct_106)"
"(expand-context/outer-need-eventually-defined"
" the-struct_106)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_106)"
"(expand-context/outer-name"
" the-struct_106)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                \"expand-context/outer?\""
" the-struct_106))))))"
"(let-values(((declare-enclosing-module_0)"
"(delay"
"(lambda()"
"(let-values(((temp376_0)"
" id:module-name231_0)"
"((rebuild-s377_0)"
" rebuild-s_14)"
"((requires+provides378_0)"
" requires+provides_6)"
"((submod-m-ns379_0)"
" submod-m-ns_0)"
"((self380_0)"
" self_29)"
"((enclosing-self381_0)"
" enclosing-self_1)"
"((root-ctx382_0)"
" root-ctx_6)"
"((submod-ctx383_0)"
" submod-ctx_0)"
"((modules-being-compiled384_0)"
" modules-being-compiled_3)"
"((compiled-module-box385_0)"
" compiled-module-box_0))"
"(declare-module-for-expansion141.1"
" submod-ctx383_0"
" enclosing-self381_0"
" compiled-module-box385_0"
" temp376_0"
" modules-being-compiled384_0"
" submod-m-ns379_0"
" rebuild-s377_0"
" requires+provides378_0"
" root-ctx382_0"
" self380_0"
" fully-expanded-bodys-except-post-submodules_0))))))"
"(let-values(((fully-expanded-bodys_0)"
"(if(stop-at-module*?"
" submod-ctx_0)"
"(let-values()"
" fully-expanded-bodys-except-post-submodules_0)"
"(let-values()"
"(let-values(((declare-enclosing-module387_0)"
" declare-enclosing-module_0)"
"((phase388_0)"
" phase_148)"
"((self389_0)"
" self_29)"
"((requires+provides390_0)"
" requires+provides_6)"
"((is-cross-phase-persistent?391_0)"
" is-cross-phase-persistent?_1)"
"((all-scopes-s392_0)"
" all-scopes-s_0)"
"((mpis-to-reset393_0)"
" mpis-to-reset_0)"
"((declared-submodule-names394_0)"
" declared-submodule-names_3)"
"((compiled-submodules395_0)"
" compiled-submodules_1)"
"((modules-being-compiled396_0)"
" modules-being-compiled_3)"
"((submod-ctx397_0)"
" submod-ctx_0))"
"(expand-post-submodules167.1"
" all-scopes-s392_0"
" compiled-submodules395_0"
" submod-ctx397_0"
" declare-enclosing-module387_0"
" declared-submodule-names394_0"
" is-cross-phase-persistent?391_0"
" modules-being-compiled396_0"
" mpis-to-reset393_0"
" phase388_0"
" requires+provides390_0"
" self389_0"
" fully-expanded-bodys-except-post-submodules_0))))))"
"(if(expand-context-to-parsed?"
" submod-ctx_0)"
"(let-values()"
"(parsed-#%module-begin24.1"
" rebuild-mb-s_0"
"(parsed-only"
" fully-expanded-bodys_0)))"
"(let-values()"
"(let-values(((mb-result-s_0)"
"(let-values(((rebuild-mb-s398_0)"
" rebuild-mb-s_0)"
"((temp399_1)"
"(list*"
" #%module-begin294_0"
"(syntax-only"
" fully-expanded-bodys_0))))"
"(rebuild66.1"
" #f"
" #f"
" rebuild-mb-s398_0"
" temp399_1))))"
"(if(not"
"(expand-context-in-local-expand?"
" submod-ctx_0))"
"(let-values()"
"(expanded+parsed1.1"
" mb-result-s_0"
"(parsed-#%module-begin24.1"
" rebuild-mb-s_0"
"(parsed-only"
" fully-expanded-bodys_0))))"
"(let-values()"
" mb-result-s_0))))))))))))))))))))))))))))))))"
"(let-values(((mb-ctx_0)"
"(let-values(((v_254)"
" ctx_104))"
"(let-values(((the-struct_107)"
" v_254))"
"(if(expand-context/outer?"
" the-struct_107)"
"(let-values(((context400_0)"
" 'module-begin)"
"((inner401_0)"
"(let-values(((the-struct_108)"
"(root-expand-context/outer-inner"
" v_254)))"
"(if(expand-context/inner?"
" the-struct_108)"
"(let-values(((module-begin-k402_0)"
" module-begin-k_1)"
"((in-local-expand?403_0)"
" #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_108)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_108)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_108)"
"(root-expand-context/inner-defined-syms"
" the-struct_108)"
"(root-expand-context/inner-counter"
" the-struct_108)"
"(root-expand-context/inner-lift-key"
" the-struct_108)"
"(expand-context/inner-to-parsed?"
" the-struct_108)"
"(expand-context/inner-phase"
" the-struct_108)"
"(expand-context/inner-namespace"
" the-struct_108)"
"(expand-context/inner-user-env"
" the-struct_108)"
"(expand-context/inner-just-once?"
" the-struct_108)"
" module-begin-k402_0"
"(expand-context/inner-allow-unbound?"
" the-struct_108)"
" in-local-expand?403_0"
"(expand-context/inner-stops"
" the-struct_108)"
"(expand-context/inner-declared-submodule-names"
" the-struct_108)"
"(expand-context/inner-lifts"
" the-struct_108)"
"(expand-context/inner-lift-envs"
" the-struct_108)"
"(expand-context/inner-module-lifts"
" the-struct_108)"
"(expand-context/inner-require-lifts"
" the-struct_108)"
"(expand-context/inner-to-module-lifts"
" the-struct_108)"
"(expand-context/inner-requires+provides"
" the-struct_108)"
"(expand-context/inner-observer"
" the-struct_108)"
"(expand-context/inner-for-serializable?"
" the-struct_108)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                       \"expand-context/inner?\""
" the-struct_108)))))"
"(expand-context/outer1.1"
" inner401_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_107)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_107)"
"(root-expand-context/outer-frame-id"
" the-struct_107)"
" context400_0"
"(expand-context/outer-env"
" the-struct_107)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_107)"
"(expand-context/outer-scopes"
" the-struct_107)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_107)"
"(expand-context/outer-binding-layer"
" the-struct_107)"
"(expand-context/outer-reference-records"
" the-struct_107)"
"(expand-context/outer-only-immediate?"
" the-struct_107)"
"(expand-context/outer-need-eventually-defined"
" the-struct_107)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_107)"
"(expand-context/outer-name"
" the-struct_107)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                     \"expand-context/outer?\""
" the-struct_107))))))"
"(let-values(((mb-scopes-s_0)"
"(if keep-enclosing-scope-at-phase_0"
" disarmed-s_24"
" all-scopes-s_0)))"
"(let-values(((mb_0)"
"(let-values(((module-name-sym405_0)"
" module-name-sym_0)"
"((mb-scopes-s406_0)"
" mb-scopes-s_0)"
"((m-ns407_0)"
" m-ns_19)"
"((mb-ctx408_0)"
" mb-ctx_0)"
"((phase409_0)"
" phase_148)"
"((s410_0)"
" s_17))"
"(ensure-module-begin34.1"
" mb-ctx408_0"
" m-ns407_0"
" module-name-sym405_0"
" phase409_0"
" s410_0"
" mb-scopes-s406_0"
" bodys_4))))"
"(let-values(((expanded-mb_0)"
"(let-values()"
"(let-values(((mb411_0)"
" mb_0)"
"((mb-ctx412_0)"
" mb-ctx_0))"
"(expand5.1"
" #f"
" #f"
" mb411_0"
" mb-ctx412_0)))))"
"(let-values(((requires_6"
" provides_12)"
"(extract-requires-and-provides"
" requires+provides_6"
" self_29"
" self_29)))"
"(let-values(((result-form_0)"
"(if(let-values(((or-part_358)"
"(expand-context-to-parsed?"
" init-ctx_0)))"
"(if or-part_358"
" or-part_358"
" always-produce-compiled?_0))"
"(parsed-module25.1"
" rebuild-s_14"
" #f"
" id:module-name231_0"
" self_29"
" requires_6"
" provides_12"
"(requires+provides-all-bindings-simple?"
" requires+provides_6)"
"(root-expand-context-encode-for-module"
" root-ctx_6"
" self_29"
" self_29)"
"(parsed-#%module-begin-body"
"(if(expanded+parsed?"
" expanded-mb_0)"
"(expanded+parsed-parsed"
" expanded-mb_0)"
" expanded-mb_0))"
"(unbox"
" compiled-module-box_0)"
" compiled-submodules_1)"
" #f)))"
"(let-values(((result-s_12)"
"(if(not"
"(expand-context-to-parsed?"
" init-ctx_0))"
"(let-values()"
"(let-values(((generic-self_0)"
"(make-generic-self-module-path-index"
" self_29)))"
"(begin"
"(imitate-generic-module-path-index!"
" self_29)"
"(let-values(((lst_395)"
"(unbox"
" mpis-to-reset_0)))"
"(begin"
"(check-list"
" lst_395)"
"((letrec-values(((for-loop_302)"
"(lambda(lst_396)"
"(if(pair?"
" lst_396)"
"(let-values(((mpi_51)"
"(unsafe-car"
" lst_396))"
"((rest_233)"
"(unsafe-cdr"
" lst_396)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(imitate-generic-module-path-index!"
" mpi_51))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_302"
" rest_233)"
"(values))))"
"(values)))))"
" for-loop_302)"
" lst_395)))"
"(void)"
"(let-values(((result-s_13)"
"(let-values(((rebuild-s413_1)"
" rebuild-s_14)"
"((temp414_1)"
"(list"
" module230_0"
" id:module-name231_0"
" initial-require-s_0"
"(expanded+parsed-s"
" expanded-mb_0))))"
"(rebuild66.1"
" #f"
" #f"
" rebuild-s413_1"
" temp414_1))))"
"(let-values(((result-s_14)"
"(let-values(((result-s415_0)"
" result-s_13)"
"((self416_0)"
" self_29)"
"((generic-self417_0)"
" generic-self_0))"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" result-s415_0"
" self416_0"
" generic-self417_0"
" #f"
" #f))))"
"(let-values(((result-s_15)"
"(attach-root-expand-context-properties"
" result-s_14"
" root-ctx_6"
" self_29"
" generic-self_0)))"
"(let-values(((result-s_16)"
"(if(requires+provides-all-bindings-simple?"
" requires+provides_6)"
"(syntax-property$1"
" result-s_15"
" 'module-body-context-simple?"
" #t)"
" result-s_15)))"
"(begin"
"(let-values(((obs_104)"
"(expand-context-observer"
" init-ctx_0)))"
"(if obs_104"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_104"
" 'rename-one"
" result-s_16)))"
"(void)))"
" result-s_16))))))))"
"(void))))"
"(if(expand-context-to-parsed?"
" init-ctx_0)"
"(let-values()"
" result-form_0)"
"(if always-produce-compiled?_0"
"(let-values()"
"(expanded+parsed1.1"
" result-s_12"
" result-form_0))"
"(let-values()"
" result-s_12))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(ensure-module-begin34.1)"
"(lambda(ctx24_0 m-ns23_0 module-name-sym21_0 phase25_3 s26_1 scopes-s22_0 bodys33_0)"
"(let-values(((bodys_15) bodys33_0))"
"(let-values(((module-name-sym_1) module-name-sym21_0))"
"(let-values(((scopes-s_0) scopes-s22_0))"
"(let-values()"
"(let-values(((ctx_106) ctx24_0))"
"(let-values(((phase_150) phase25_3))"
"(let-values(((s_722) s26_1))"
"(let-values()"
"(let-values(((make-mb-ctx_0)"
"(lambda()"
"(let-values(((v_255) ctx_106))"
"(let-values(((the-struct_109) v_255))"
"(if(expand-context/outer? the-struct_109)"
"(let-values(((context418_0) 'module-begin)"
"((only-immediate?419_0) #t)"
"((inner420_0)(root-expand-context/outer-inner v_255)))"
"(expand-context/outer1.1"
" inner420_0"
"(root-expand-context/outer-post-expansion-scope the-struct_109)"
"(root-expand-context/outer-use-site-scopes the-struct_109)"
"(root-expand-context/outer-frame-id the-struct_109)"
" context418_0"
"(expand-context/outer-env the-struct_109)"
"(expand-context/outer-post-expansion-scope-action the-struct_109)"
"(expand-context/outer-scopes the-struct_109)"
"(expand-context/outer-def-ctx-scopes the-struct_109)"
"(expand-context/outer-binding-layer the-struct_109)"
"(expand-context/outer-reference-records the-struct_109)"
" only-immediate?419_0"
"(expand-context/outer-need-eventually-defined the-struct_109)"
"(expand-context/outer-current-introduction-scopes the-struct_109)"
"(expand-context/outer-name the-struct_109)))"
"(raise-argument-error"
" 'struct-copy"
"                                           \"expand-context/outer?\""
" the-struct_109)))))))"
"(let-values(((mb_1)"
"(if(= 1(length bodys_15))"
"(let-values()"
"(begin"
"(let-values(((obs_105)(expand-context-observer ctx_106)))"
"(if obs_105"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_105 'rename-one(car bodys_15))))"
"(void)))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1(car bodys_15)) phase_150))"
"(let-values()(car bodys_15))"
"(let-values()"
"(let-values(((partly-expanded-body_0)"
"(let-values()"
"(let-values(((temp421_0)"
"(add-enclosing-name-property"
"(car bodys_15)"
" module-name-sym_1))"
"((temp422_0)(make-mb-ctx_0)))"
"(expand5.1 #f #f temp421_0 temp422_0)))))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1 partly-expanded-body_0) phase_150))"
"(let-values() partly-expanded-body_0)"
"(let-values()"
"(let-values(((temp423_0)(list partly-expanded-body_0))"
"((s424_0) s_722)"
"((scopes-s425_0) scopes-s_0)"
"((phase426_0) phase_150)"
"((module-name-sym427_0) module-name-sym_1)"
"((temp428_0)(make-mb-ctx_0))"
"((temp429_0) #f))"
"(add-module-begin45.1"
" temp429_0"
" #t"
" temp423_0"
" s424_0"
" scopes-s425_0"
" phase426_0"
" module-name-sym427_0"
" temp428_0)))))))))"
"(let-values()"
"(let-values(((bodys430_0) bodys_15)"
"((s431_0) s_722)"
"((scopes-s432_0) scopes-s_0)"
"((phase433_0) phase_150)"
"((module-name-sym434_0) module-name-sym_1)"
"((temp435_0)(make-mb-ctx_0)))"
"(add-module-begin45.1"
" #f"
" #f"
" bodys430_0"
" s431_0"
" scopes-s432_0"
" phase433_0"
" module-name-sym434_0"
" temp435_0))))))"
"(add-enclosing-name-property mb_1 module-name-sym_1)))))))))))))"
"(define-values"
"(add-module-begin45.1)"
"(lambda(log-rename-one?37_0"
" log-rename-one?38_0"
" bodys39_0"
" s40_0"
" scopes-s41_0"
" phase42_0"
" module-name-sym43_0"
" mb-ctx44_0)"
"(let-values(((bodys_16) bodys39_0))"
"(let-values(((s_127) s40_0))"
"(let-values(((scopes-s_1) scopes-s41_0))"
"(let-values(((phase_151) phase42_0))"
"(let-values(((module-name-sym_2) module-name-sym43_0))"
"(let-values(((mb-ctx_1) mb-ctx44_0))"
"(let-values(((log-rename-one?_0)(if log-rename-one?38_0 log-rename-one?37_0 #t)))"
"(let-values()"
"(let-values(((disarmed-scopes-s_0)(syntax-disarm$1 scopes-s_1)))"
"(let-values(((mb-id_0)(datum->syntax$1 disarmed-scopes-s_0 '#%module-begin)))"
"(let-values((()"
"(begin"
"(if(let-values(((mb-id436_0) mb-id_0)((phase437_0) phase_151))"
"(resolve29.1 #f #f #f #f #f #f #f #f mb-id436_0 phase437_0))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                             \"no #%module-begin binding in the module's language\""
" s_127)))"
"(values))))"
"(let-values(((mb_2)(datum->syntax$1 disarmed-scopes-s_0(list* mb-id_0 bodys_16) s_127)))"
"(let-values((()"
"(begin"
"(let-values(((obs_106)(expand-context-observer mb-ctx_1)))"
"(if obs_106"
"(let-values()(let-values()(call-expand-observe obs_106 'tag mb_2)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if log-rename-one?_0"
"(let-values()"
"(let-values(((obs_107)(expand-context-observer mb-ctx_1)))"
"(if obs_107"
"(let-values()"
"(let-values()(call-expand-observe obs_107 'rename-one mb_2)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((partly-expanded-mb_0)"
"(let-values()"
"(let-values(((temp438_0)"
"(add-enclosing-name-property mb_2 module-name-sym_2))"
"((mb-ctx439_0) mb-ctx_1))"
"(expand5.1 #f #f temp438_0 mb-ctx439_0)))))"
"(begin"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1 partly-expanded-mb_0) phase_151))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                         \"expansion of #%module-begin is not a #%plain-module-begin form\""
" s_127"
" partly-expanded-mb_0)))"
" partly-expanded-mb_0))))))))))))))))))"
"(define-values"
"(add-enclosing-name-property)"
"(lambda(stx_17 module-name-sym_3)(syntax-property$1 stx_17 'enclosing-module-name module-name-sym_3)))"
"(define-values"
"(make-apply-module-scopes)"
"(lambda(inside-scope_1"
" outside-scope_2"
" init-ctx_1"
" keep-enclosing-scope-at-phase_1"
" self_30"
" enclosing-self_2"
" enclosing-mod_2)"
"(lambda(s_723)"
"(let-values()"
"(let-values(((s-without-enclosing_0)"
"(if keep-enclosing-scope-at-phase_1"
" s_723"
"(remove-use-site-scopes"
"(remove-scopes s_723(root-expand-context-module-scopes init-ctx_1))"
" init-ctx_1))))"
"(let-values(((s-with-edges_0)(add-scope(add-scope s-without-enclosing_0 outside-scope_2) inside-scope_1)))"
"(let-values(((s-with-suitable-enclosing_0)"
"(if keep-enclosing-scope-at-phase_1"
"(let-values()"
"(let-values(((s-with-edges444_0) s-with-edges_0)"
"((enclosing-self445_0) enclosing-self_2)"
"((enclosing-mod446_0) enclosing-mod_2))"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" s-with-edges444_0"
" enclosing-self445_0"
" enclosing-mod446_0"
" #f"
" #f)))"
"(let-values() s-with-edges_0))))"
"(let-values(((s-with-suitable-enclosing440_0) s-with-suitable-enclosing_0)"
"((temp441_0)(make-generic-self-module-path-index self_30))"
"((self442_0) self_30)"
"((temp443_0)(current-code-inspector)))"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" s-with-suitable-enclosing440_0"
" temp441_0"
" self442_0"
" temp443_0"
" #t)))))))))"
"(define-values"
"(partially-expand-bodys81.1)"
"(lambda(all-scopes-stx56_0"
" compiled-submodules60_0"
" ctx50_0"
" declared-keywords58_0"
" declared-submodule-names59_0"
" defined-syms57_0"
" frame-id53_0"
" loop63_0"
" modules-being-compiled61_0"
" mpis-to-reset62_0"
" namespace51_0"
" need-eventually-defined55_0"
" phase49_2"
" requires-and-provides54_0"
" self52_0"
" tail?48_0"
" bodys80_0)"
"(let-values(((bodys_17) bodys80_0))"
"(let-values(((tail?_52) tail?48_0))"
"(let-values(((phase_152) phase49_2))"
"(let-values(((partial-body-ctx_1) ctx50_0))"
"(let-values(((m-ns_20) namespace51_0))"
"(let-values(((self_31) self52_0))"
"(let-values(((frame-id_17) frame-id53_0))"
"(let-values(((requires+provides_7) requires-and-provides54_0))"
"(let-values(((need-eventually-defined_2) need-eventually-defined55_0))"
"(let-values(((all-scopes-stx_5) all-scopes-stx56_0))"
"(let-values(((defined-syms_11) defined-syms57_0))"
"(let-values(((declared-keywords_1) declared-keywords58_0))"
"(let-values(((declared-submodule-names_4) declared-submodule-names59_0))"
"(let-values(((compiled-submodules_2) compiled-submodules60_0))"
"(let-values(((modules-being-compiled_4) modules-being-compiled61_0))"
"(let-values(((mpis-to-reset_1) mpis-to-reset62_0))"
"(let-values(((pass-1-and-2-loop_1) loop63_0))"
"(let-values()"
"(begin"
"(namespace-visit-available-modules! m-ns_20 phase_152)"
"((letrec-values(((loop_175)"
"(lambda(tail?_53 bodys_18)"
"(if(null? bodys_18)"
"(let-values()"
"(if tail?_53"
"(let-values()"
"(let-values(((bodys_19)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_1))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_1)))))"
"(if(null? bodys_19)"
" null"
"(loop_175"
" #t"
"(add-post-expansion-scope"
" bodys_19"
" partial-body-ctx_1)))))"
"(let-values() null)))"
"(let-values()"
"(let-values(((rest-bodys_1)(cdr bodys_18)))"
"(let-values((()"
"(begin"
"(let-values(((obs_108)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_108"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_108"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_7)"
"(let-values()"
"(let-values(((temp447_0)"
"(car bodys_18))"
"((partial-body-ctx448_0)"
" partial-body-ctx_1))"
"(expand5.1"
" #f"
" #f"
" temp447_0"
" partial-body-ctx448_0)))))"
"(let-values(((disarmed-exp-body_1)"
"(syntax-disarm$1 exp-body_7)))"
"(let-values(((lifted-defns_0)"
"(get-and-clear-lifts!"
"(expand-context-lifts"
" partial-body-ctx_1))))"
"(begin"
"(if(null? lifted-defns_0)"
"(let-values()"
"(begin"
"(let-values(((obs_109)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_109"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_109"
" 'rename-list"
" lifted-defns_0)))"
"(void)))"
"(let-values(((obs_110)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_110"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_110"
" 'module-lift-loop"
"(append"
" lifted-defns_0"
"(cons"
" exp-body_7"
" rest-bodys_1)))))"
"(void)))))"
"(let-values()"
"(let-values(((obs_69)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_69"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_69"
" 'module-lift-end-loop"
"(cons"
" exp-body_7"
" rest-bodys_1))))"
"(void)))))"
"(let-values(((obs_70)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_70"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_70"
" 'rename-one"
" exp-body_7)))"
"(void)))"
"(let-values(((finish_2)"
"(lambda()"
"(let-values(((tmp_60)"
"(core-form-sym"
" disarmed-exp-body_1"
" phase_152)))"
"(if(equal?"
" tmp_60"
" 'begin)"
"(let-values()"
"(let-values(((ok?_74"
" begin449_0"
" e450_0)"
"(let-values(((s_724)"
" disarmed-exp-body_1))"
"(let-values(((orig-s_78)"
" s_724))"
"(let-values(((begin449_1"
" e450_1)"
"(let-values(((s_725)"
"(if(syntax?$1"
" s_724)"
"(syntax-e$1"
" s_724)"
" s_724)))"
"(if(pair?"
" s_725)"
"(let-values(((begin451_0)"
"(let-values(((s_726)"
"(car"
" s_725)))"
" s_726))"
"((e452_0)"
"(let-values(((s_727)"
"(cdr"
" s_725)))"
"(let-values(((s_728)"
"(if(syntax?$1"
" s_727)"
"(syntax-e$1"
" s_727)"
" s_727)))"
"(let-values(((flat-s_53)"
"(to-syntax-list.1"
" s_728)))"
"(if(not"
" flat-s_53)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_78))"
"(let-values()"
" flat-s_53)))))))"
"(values"
" begin451_0"
" e452_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_78)))))"
"(values"
" #t"
" begin449_1"
" e450_1))))))"
"(let-values(((track_1)"
"(lambda(e_92)"
"(syntax-track-origin$1"
" e_92"
" exp-body_7))))"
"(let-values(((spliced-bodys_0)"
"(append"
"(map2"
" track_1"
" e450_0)"
" rest-bodys_1)))"
"(begin"
"(let-values(((obs_111)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_111"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_111"
" 'splice"
" spliced-bodys_0)))"
"(void)))"
"(loop_175"
" tail?_53"
" spliced-bodys_0))))))"
"(if(equal?"
" tmp_60"
" 'begin-for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_112)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_112"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_112"
" 'enter-prim"
" exp-body_7)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_113)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_113"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_113"
" 'enter-prim-begin-for-syntax)))"
"(void)))"
"(values))))"
"(let-values(((ok?_75"
" begin-for-syntax453_0"
" e454_0)"
"(let-values(((s_729)"
" disarmed-exp-body_1))"
"(let-values(((orig-s_79)"
" s_729))"
"(let-values(((begin-for-syntax453_1"
" e454_1)"
"(let-values(((s_730)"
"(if(syntax?$1"
" s_729)"
"(syntax-e$1"
" s_729)"
" s_729)))"
"(if(pair?"
" s_730)"
"(let-values(((begin-for-syntax455_0)"
"(let-values(((s_142)"
"(car"
" s_730)))"
" s_142))"
"((e456_0)"
"(let-values(((s_731)"
"(cdr"
" s_730)))"
"(let-values(((s_732)"
"(if(syntax?$1"
" s_731)"
"(syntax-e$1"
" s_731)"
" s_731)))"
"(let-values(((flat-s_54)"
"(to-syntax-list.1"
" s_732)))"
"(if(not"
" flat-s_54)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_79))"
"(let-values()"
" flat-s_54)))))))"
"(values"
" begin-for-syntax455_0"
" e456_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                               \"bad syntax\""
" orig-s_79)))))"
"(values"
" #t"
" begin-for-syntax453_1"
" e454_1))))))"
"(let-values(((nested-bodys_1)"
"(pass-1-and-2-loop_1"
" e454_0"
"(add1"
" phase_152))))"
"(let-values(((ct-m-ns_0)"
"(namespace->namespace-at-phase"
" m-ns_20"
"(add1"
" phase_152))))"
"(begin"
"(namespace-run-available-modules!"
" m-ns_20"
"(add1"
" phase_152))"
"(eval-nested-bodys"
" nested-bodys_1"
"(add1"
" phase_152)"
" ct-m-ns_0"
" self_31"
" partial-body-ctx_1)"
"(namespace-visit-available-modules!"
" m-ns_20"
" phase_152)"
"(let-values(((obs_114)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_114"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_114"
" 'exit-prim)))"
"(void)))"
"(cons"
"(semi-parsed-begin-for-syntax3.1"
" exp-body_7"
" nested-bodys_1)"
"(loop_175"
" tail?_53"
" rest-bodys_1)))))))))"
"(if(equal?"
" tmp_60"
" 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_115)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_115"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_115"
" 'enter-prim"
" exp-body_7)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_116)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_116"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_116"
" 'enter-prim-define-values)))"
"(void)))"
"(values))))"
"(let-values(((ok?_76"
" define-values457_0"
" id458_0"
" rhs459_0)"
"(let-values(((s_733)"
" disarmed-exp-body_1))"
"(let-values(((orig-s_80)"
" s_733))"
"(let-values(((define-values457_1"
" id458_1"
" rhs459_1)"
"(let-values(((s_734)"
"(if(syntax?$1"
" s_733)"
"(syntax-e$1"
" s_733)"
" s_733)))"
"(if(pair?"
" s_734)"
"(let-values(((define-values460_0)"
"(let-values(((s_735)"
"(car"
" s_734)))"
" s_735))"
"((id461_0"
" rhs462_0)"
"(let-values(((s_736)"
"(cdr"
" s_734)))"
"(let-values(((s_737)"
"(if(syntax?$1"
" s_736)"
"(syntax-e$1"
" s_736)"
" s_736)))"
"(if(pair?"
" s_737)"
"(let-values(((id463_0)"
"(let-values(((s_738)"
"(car"
" s_737)))"
"(let-values(((s_739)"
"(if(syntax?$1"
" s_738)"
"(syntax-e$1"
" s_738)"
" s_738)))"
"(let-values(((flat-s_55)"
"(to-syntax-list.1"
" s_739)))"
"(if(not"
" flat-s_55)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_80))"
"(let-values()"
"(let-values(((id_141)"
"(let-values(((lst_46)"
" flat-s_55))"
"(begin"
"(check-list"
" lst_46)"
"((letrec-values(((for-loop_67)"
"(lambda(id_142"
" lst_47)"
"(if(pair?"
" lst_47)"
"(let-values(((s_740)"
"(unsafe-car"
" lst_47))"
"((rest_19)"
"(unsafe-cdr"
" lst_47)))"
"(let-values(((id_143)"
"(let-values(((id_144)"
" id_142))"
"(let-values(((id_145)"
"(let-values()"
"(let-values(((id473_0)"
"(let-values()"
"(if(let-values(((or-part_144)"
"(if(syntax?$1"
" s_740)"
"(symbol?"
"(syntax-e$1"
" s_740))"
" #f)))"
"(if or-part_144"
" or-part_144"
"(symbol?"
" s_740)))"
" s_740"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_80"
" s_740)))))"
"(cons"
" id473_0"
" id_144)))))"
"(values"
" id_145)))))"
"(if(not"
" #f)"
"(for-loop_67"
" id_143"
" rest_19)"
" id_143)))"
" id_142))))"
" for-loop_67)"
" null"
" lst_46)))))"
"(reverse$1"
" id_141))))))))"
"((rhs464_0)"
"(let-values(((s_741)"
"(cdr"
" s_737)))"
"(let-values(((s_742)"
"(if(syntax?$1"
" s_741)"
"(syntax-e$1"
" s_741)"
" s_741)))"
"(if(pair?"
" s_742)"
"(let-values(((rhs465_0)"
"(let-values(((s_743)"
"(car"
" s_742)))"
" s_743))"
"(()"
"(let-values(((s_744)"
"(cdr"
" s_742)))"
"(let-values(((s_745)"
"(if(syntax?$1"
" s_744)"
"(syntax-e$1"
" s_744)"
" s_744)))"
"(if(null?"
" s_745)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"bad syntax\""
" orig-s_80))))))"
"(values"
" rhs465_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                         \"bad syntax\""
" orig-s_80))))))"
"(values"
" id463_0"
" rhs464_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_80))))))"
"(values"
" define-values460_0"
" id461_0"
" rhs462_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                 \"bad syntax\""
" orig-s_80)))))"
"(values"
" #t"
" define-values457_1"
" id458_1"
" rhs459_1))))))"
"(let-values(((ids_42)"
"(remove-use-site-scopes"
" id458_0"
" partial-body-ctx_1)))"
"(let-values((()"
"(begin"
"(let-values(((ids466_0)"
" ids_42)"
"((phase467_0)"
" phase_152)"
"((exp-body468_0)"
" exp-body_7))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids466_0"
" phase467_0"
" exp-body468_0"
" #f"
" #f))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((exp-body472_0)"
" exp-body_7))"
"(check-ids-unbound175.1"
" exp-body472_0"
" ids_42"
" phase_152"
" requires+provides_7))"
"(values))))"
"(let-values(((syms_23)"
"(let-values(((frame-id479_0)"
" frame-id_17)"
"((requires+provides480_0)"
" requires+provides_7)"
"((exp-body481_0)"
" exp-body_7))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" frame-id479_0"
" exp-body481_0"
" #t"
" requires+provides480_0"
" #t"
" #f"
" #f"
" ids_42"
" defined-syms_11"
" self_31"
" phase_152"
" all-scopes-stx_5))))"
"(begin"
"(add-defined-syms!"
" requires+provides_7"
" syms_23"
" phase_152)"
"(let-values(((obs_117)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_117"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_117"
" 'exit-prim)))"
"(void)))"
"(cons"
"(semi-parsed-define-values2.1"
" exp-body_7"
" syms_23"
" ids_42"
" rhs459_0)"
"(loop_175"
" tail?_53"
" rest-bodys_1)))))))))))"
"(if(equal?"
" tmp_60"
" 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_118)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_118"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_118"
" 'enter-prim"
" exp-body_7)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_119)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_119"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_119"
" 'enter-prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values(((ok?_77"
" define-syntaxes482_0"
" id483_0"
" rhs484_0)"
"(let-values(((s_507)"
" disarmed-exp-body_1))"
"(let-values(((orig-s_81)"
" s_507))"
"(let-values(((define-syntaxes482_1"
" id483_1"
" rhs484_1)"
"(let-values(((s_183)"
"(if(syntax?$1"
" s_507)"
"(syntax-e$1"
" s_507)"
" s_507)))"
"(if(pair?"
" s_183)"
"(let-values(((define-syntaxes485_0)"
"(let-values(((s_746)"
"(car"
" s_183)))"
" s_746))"
"((id486_0"
" rhs487_0)"
"(let-values(((s_747)"
"(cdr"
" s_183)))"
"(let-values(((s_748)"
"(if(syntax?$1"
" s_747)"
"(syntax-e$1"
" s_747)"
" s_747)))"
"(if(pair?"
" s_748)"
"(let-values(((id488_0)"
"(let-values(((s_749)"
"(car"
" s_748)))"
"(let-values(((s_750)"
"(if(syntax?$1"
" s_749)"
"(syntax-e$1"
" s_749)"
" s_749)))"
"(let-values(((flat-s_56)"
"(to-syntax-list.1"
" s_750)))"
"(if(not"
" flat-s_56)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_81))"
"(let-values()"
"(let-values(((id_146)"
"(let-values(((lst_397)"
" flat-s_56))"
"(begin"
"(check-list"
" lst_397)"
"((letrec-values(((for-loop_303)"
"(lambda(id_147"
" lst_398)"
"(if(pair?"
" lst_398)"
"(let-values(((s_751)"
"(unsafe-car"
" lst_398))"
"((rest_234)"
"(unsafe-cdr"
" lst_398)))"
"(let-values(((id_148)"
"(let-values(((id_149)"
" id_147))"
"(let-values(((id_150)"
"(let-values()"
"(let-values(((id498_0)"
"(let-values()"
"(if(let-values(((or-part_359)"
"(if(syntax?$1"
" s_751)"
"(symbol?"
"(syntax-e$1"
" s_751))"
" #f)))"
"(if or-part_359"
" or-part_359"
"(symbol?"
" s_751)))"
" s_751"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_81"
" s_751)))))"
"(cons"
" id498_0"
" id_149)))))"
"(values"
" id_150)))))"
"(if(not"
" #f)"
"(for-loop_303"
" id_148"
" rest_234)"
" id_148)))"
" id_147))))"
" for-loop_303)"
" null"
" lst_397)))))"
"(reverse$1"
" id_146))))))))"
"((rhs489_0)"
"(let-values(((s_752)"
"(cdr"
" s_748)))"
"(let-values(((s_753)"
"(if(syntax?$1"
" s_752)"
"(syntax-e$1"
" s_752)"
" s_752)))"
"(if(pair?"
" s_753)"
"(let-values(((rhs490_0)"
"(let-values(((s_754)"
"(car"
" s_753)))"
" s_754))"
"(()"
"(let-values(((s_755)"
"(cdr"
" s_753)))"
"(let-values(((s_756)"
"(if(syntax?$1"
" s_755)"
"(syntax-e$1"
" s_755)"
" s_755)))"
"(if(null?"
" s_756)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_81))))))"
"(values"
" rhs490_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_81))))))"
"(values"
" id488_0"
" rhs489_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_81))))))"
"(values"
" define-syntaxes485_0"
" id486_0"
" rhs487_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                   \"bad syntax\""
" orig-s_81)))))"
"(values"
" #t"
" define-syntaxes482_1"
" id483_1"
" rhs484_1))))))"
"(let-values(((ids_43)"
"(remove-use-site-scopes"
" id483_0"
" partial-body-ctx_1)))"
"(let-values((()"
"(begin"
"(let-values(((ids491_0)"
" ids_43)"
"((phase492_0)"
" phase_152)"
"((exp-body493_0)"
" exp-body_7))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids491_0"
" phase492_0"
" exp-body493_0"
" #f"
" #f))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((exp-body497_0)"
" exp-body_7))"
"(check-ids-unbound175.1"
" exp-body497_0"
" ids_43"
" phase_152"
" requires+provides_7))"
"(values))))"
"(let-values(((syms_24)"
"(let-values(((frame-id504_0)"
" frame-id_17)"
"((requires+provides505_0)"
" requires+provides_7)"
"((exp-body506_0)"
" exp-body_7)"
"((temp507_0)"
" #t))"
"(select-defined-syms-and-bind!16.1"
" temp507_0"
" #t"
" frame-id504_0"
" exp-body506_0"
" #t"
" requires+provides505_0"
" #t"
" #f"
" #f"
" ids_43"
" defined-syms_11"
" self_31"
" phase_152"
" all-scopes-stx_5))))"
"(let-values((()"
"(begin"
"(add-defined-syms!"
" requires+provides_7"
" syms_24"
" phase_152)"
"(values))))"
"(let-values(((exp-rhs_6"
" parsed-rhs_2"
" vals_9)"
"(expand+eval-for-syntaxes-binding"
" rhs484_0"
" ids_43"
"(let-values(((v_256)"
" partial-body-ctx_1))"
"(let-values(((the-struct_110)"
" v_256))"
"(if(expand-context/outer?"
" the-struct_110)"
"(let-values(((need-eventually-defined508_0)"
" need-eventually-defined_2)"
"((inner509_0)"
"(root-expand-context/outer-inner"
" v_256)))"
"(expand-context/outer1.1"
" inner509_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_110)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_110)"
"(root-expand-context/outer-frame-id"
" the-struct_110)"
"(expand-context/outer-context"
" the-struct_110)"
"(expand-context/outer-env"
" the-struct_110)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_110)"
"(expand-context/outer-scopes"
" the-struct_110)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_110)"
"(expand-context/outer-binding-layer"
" the-struct_110)"
"(expand-context/outer-reference-records"
" the-struct_110)"
"(expand-context/outer-only-immediate?"
" the-struct_110)"
" need-eventually-defined508_0"
"(expand-context/outer-current-introduction-scopes"
" the-struct_110)"
"(expand-context/outer-name"
" the-struct_110)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                \"expand-context/outer?\""
" the-struct_110)))))))"
"(let-values((()"
"(begin"
"(let-values(((lst_399)"
" syms_24)"
"((lst_400)"
" vals_9)"
"((lst_401)"
" ids_43))"
"(begin"
"(check-list"
" lst_399)"
"(check-list"
" lst_400)"
"(check-list"
" lst_401)"
"((letrec-values(((for-loop_304)"
"(lambda(lst_402"
" lst_403"
" lst_404)"
"(if(if(pair?"
" lst_402)"
"(if(pair?"
" lst_403)"
"(pair?"
" lst_404)"
" #f)"
" #f)"
"(let-values(((sym_106)"
"(unsafe-car"
" lst_402))"
"((rest_235)"
"(unsafe-cdr"
" lst_402))"
"((val_76)"
"(unsafe-car"
" lst_403))"
"((rest_236)"
"(unsafe-cdr"
" lst_403))"
"((id_151)"
"(unsafe-car"
" lst_404))"
"((rest_237)"
"(unsafe-cdr"
" lst_404)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_76"
" id_151"
" phase_152)"
"(namespace-set-transformer!"
" m-ns_20"
" phase_152"
" sym_106"
" val_76)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_304"
" rest_235"
" rest_236"
" rest_237)"
"(values))))"
"(values)))))"
" for-loop_304)"
" lst_399"
" lst_400"
" lst_401)))"
"(values))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_120)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_120"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_120"
" 'exit-prim)))"
"(void)))"
"(values))))"
"(let-values(((parsed-body_0)"
"(parsed-define-syntaxes20.1"
"(keep-properties-only"
" exp-body_7)"
" ids_43"
" syms_24"
" parsed-rhs_2)))"
"(cons"
"(if(expand-context-to-parsed?"
" partial-body-ctx_1)"
" parsed-body_0"
"(expanded+parsed1.1"
"(let-values(((exp-body510_0)"
" exp-body_7)"
"((temp511_0)"
"(list"
" define-syntaxes482_0"
" ids_43"
" exp-rhs_6)))"
"(rebuild66.1"
" #f"
" #f"
" exp-body510_0"
" temp511_0))"
" parsed-body_0))"
"(loop_175"
" tail?_53"
" rest-bodys_1))))))))))))))))"
"(if(equal?"
" tmp_60"
" '#%require)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_121)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_121"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_121"
" 'enter-prim"
" exp-body_7)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_122)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_122"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_122"
" 'enter-prim-require)))"
"(void)))"
"(values))))"
"(let-values(((ready-body_0)"
"(remove-use-site-scopes"
" disarmed-exp-body_1"
" partial-body-ctx_1)))"
"(let-values(((ok?_78"
" #%require512_0"
" req513_0)"
"(let-values(((s_757)"
" ready-body_0))"
"(let-values(((orig-s_82)"
" s_757))"
"(let-values(((#%require512_1"
" req513_1)"
"(let-values(((s_758)"
"(if(syntax?$1"
" s_757)"
"(syntax-e$1"
" s_757)"
" s_757)))"
"(if(pair?"
" s_758)"
"(let-values(((#%require514_0)"
"(let-values(((s_759)"
"(car"
" s_758)))"
" s_759))"
"((req515_0)"
"(let-values(((s_760)"
"(cdr"
" s_758)))"
"(let-values(((s_761)"
"(if(syntax?$1"
" s_760)"
"(syntax-e$1"
" s_760)"
" s_760)))"
"(let-values(((flat-s_57)"
"(to-syntax-list.1"
" s_761)))"
"(if(not"
" flat-s_57)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_82))"
"(let-values()"
" flat-s_57)))))))"
"(values"
" #%require514_0"
" req515_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                       \"bad syntax\""
" orig-s_82)))))"
"(values"
" #t"
" #%require512_1"
" req513_1))))))"
"(begin"
"(let-values(((temp516_0)"
" req513_0)"
"((exp-body517_0)"
" exp-body_7)"
"((self518_0)"
" self_31)"
"((m-ns519_0)"
" m-ns_20)"
"((phase520_0)"
" phase_152)"
"((phase521_0)"
" phase_152)"
"((requires+provides522_0)"
" requires+provides_7)"
"((declared-submodule-names523_0)"
" declared-submodule-names_4)"
"((temp524_0)"
" 'module))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" declared-submodule-names523_0"
" #t"
" #f"
" #f"
" phase521_0"
" #t"
" #f"
" #f"
" self518_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp524_0"
" temp516_0"
" exp-body517_0"
" m-ns519_0"
" phase520_0"
" requires+provides522_0))"
"(let-values(((obs_123)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_123"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_123"
" 'exit-prim)))"
"(void)))"
"(cons"
" exp-body_7"
"(loop_175"
" tail?_53"
" rest-bodys_1))))))))"
"(if(equal?"
" tmp_60"
" '#%provide)"
"(let-values()"
"(cons"
" exp-body_7"
"(loop_175"
" tail?_53"
" rest-bodys_1)))"
"(if(equal?"
" tmp_60"
" 'module)"
"(let-values()"
"(let-values(((ready-body_1)"
"(remove-use-site-scopes"
" exp-body_7"
" partial-body-ctx_1)))"
"(let-values(((submod_2)"
"(let-values(((temp528_0)"
" #f)"
"((declared-submodule-names529_0)"
" declared-submodule-names_4)"
"((mpis-to-reset530_0)"
" mpis-to-reset_1)"
"((compiled-submodules531_0)"
" compiled-submodules_2)"
"((modules-being-compiled532_0)"
" modules-being-compiled_4))"
"(expand-submodule199.1"
" compiled-submodules531_0"
" declared-submodule-names529_0"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp528_0"
" #f"
" #f"
" modules-being-compiled532_0"
" mpis-to-reset530_0"
" ready-body_1"
" self_31"
" partial-body-ctx_1))))"
"(cons"
" submod_2"
"(loop_175"
" tail?_53"
" rest-bodys_1)))))"
"(if(equal?"
" tmp_60"
" 'module*)"
"(let-values()"
"(cons"
" exp-body_7"
"(loop_175"
" tail?_53"
" rest-bodys_1)))"
"(if(equal?"
" tmp_60"
" '#%declare)"
"(let-values()"
"(let-values(((ok?_79"
" #%declare533_0"
" kw534_0)"
"(let-values(((s_539)"
" disarmed-exp-body_1))"
"(let-values(((orig-s_83)"
" s_539))"
"(let-values(((#%declare533_1"
" kw534_1)"
"(let-values(((s_543)"
"(if(syntax?$1"
" s_539)"
"(syntax-e$1"
" s_539)"
" s_539)))"
"(if(pair?"
" s_543)"
"(let-values(((#%declare535_0)"
"(let-values(((s_762)"
"(car"
" s_543)))"
" s_762))"
"((kw536_0)"
"(let-values(((s_544)"
"(cdr"
" s_543)))"
"(let-values(((s_763)"
"(if(syntax?$1"
" s_544)"
"(syntax-e$1"
" s_544)"
" s_544)))"
"(let-values(((flat-s_58)"
"(to-syntax-list.1"
" s_763)))"
"(if(not"
" flat-s_58)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_83))"
"(let-values()"
" flat-s_58)))))))"
"(values"
" #%declare535_0"
" kw536_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_83)))))"
"(values"
" #t"
" #%declare533_1"
" kw534_1))))))"
"(let-values((()"
"(begin"
"(let-values(((lst_405)"
" kw534_0))"
"(begin"
"(check-list"
" lst_405)"
"((letrec-values(((for-loop_305)"
"(lambda(lst_406)"
"(if(pair?"
" lst_406)"
"(let-values(((kw_1)"
"(unsafe-car"
" lst_406))"
"((rest_238)"
"(unsafe-cdr"
" lst_406)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(keyword?"
"(syntax-e$1"
" kw_1))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"expected a keyword\""
" exp-body_7"
" kw_1)))"
"(if(memq"
"(syntax-e$1"
" kw_1)"
" '(#:cross-phase-persistent"
" #:empty-namespace))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"not an allowed declaration keyword\""
" exp-body_7"
" kw_1)))"
"(if(hash-ref"
" declared-keywords_1"
"(syntax-e$1"
" kw_1)"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"keyword declared multiple times\""
" exp-body_7"
" kw_1))"
"(void))"
"(hash-set!"
" declared-keywords_1"
"(syntax-e$1"
" kw_1)"
" kw_1)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_305"
" rest_238)"
"(values))))"
"(values)))))"
" for-loop_305)"
" lst_405)))"
"(values))))"
"(let-values()"
"(let-values(((parsed-body_1)"
"(parsed-#%declare22.1"
" exp-body_7)))"
"(cons"
"(if(expand-context-to-parsed?"
" partial-body-ctx_1)"
" parsed-body_1"
"(expanded+parsed1.1"
" exp-body_7"
" parsed-body_1))"
"(loop_175"
" tail?_53"
" rest-bodys_1)))))))"
"(let-values()"
"(cons"
" exp-body_7"
"(loop_175"
" tail?_53"
" rest-bodys_1))))))))))))))))"
"(let-values(((l_80)"
"(append"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts"
" partial-body-ctx_1))"
" lifted-defns_0"
"(loop_175"
" #f"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" partial-body-ctx_1))))))"
"(if(null? l_80)"
"(finish_2)"
"(append"
" l_80"
"(finish_2))))))))))))))))"
" loop_175)"
" tail?_52"
" bodys_17))))))))))))))))))))))"
"(define-values"
"(make-wrap-as-definition)"
"(lambda(self_32 frame-id_18 inside-scope_2 all-scopes-stx_6 defined-syms_12 requires+provides_8)"
"(lambda(ids_44 rhs_24 phase_153)"
"(let-values(((scoped-ids_0)"
"(let-values(((lst_407) ids_44))"
"(begin"
"(check-list lst_407)"
"((letrec-values(((for-loop_306)"
"(lambda(lst_408)"
"(if(pair? lst_408)"
"(let-values(((id_152)(unsafe-car lst_408))"
"((rest_239)(unsafe-cdr lst_408)))"
"(let-values(((post-guard-var_113)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_108)"
"(let-values()"
"(let-values()(add-scope id_152 inside-scope_2)))))"
"(let-values(((result_203)"
"(if(post-guard-var_113)"
"(for-loop_306 rest_239)"
" null)))"
"(cons elem_108 result_203))))))"
" null))))"
" for-loop_306)"
" lst_407)))))"
"(let-values(((syms_25)"
"(let-values(((frame-id542_0) frame-id_18)((requires+provides543_0) requires+provides_8))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" frame-id542_0"
" #f"
" #f"
" requires+provides543_0"
" #t"
" #f"
" #f"
" scoped-ids_0"
" defined-syms_12"
" self_32"
" phase_153"
" all-scopes-stx_6))))"
"(let-values(((s_360)"
"(add-scope"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_153) 'define-values)"
" scoped-ids_0"
" rhs_24))"
" inside-scope_2)))"
"(values scoped-ids_0(semi-parsed-define-values2.1 s_360 syms_25 scoped-ids_0 rhs_24))))))))"
"(define-values"
"(add-post-expansion-scope)"
"(lambda(bodys_20 ctx_107)"
"(let-values(((sc_32)(root-expand-context-post-expansion-scope ctx_107)))"
"(let-values(((lst_409) bodys_20))"
"(begin"
"(check-list lst_409)"
"((letrec-values(((for-loop_307)"
"(lambda(lst_410)"
"(if(pair? lst_410)"
"(let-values(((body_20)(unsafe-car lst_410))((rest_240)(unsafe-cdr lst_410)))"
"(let-values(((post-guard-var_114)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_109)"
"(let-values()(let-values()(add-scope body_20 sc_32)))))"
"(let-values(((result_204)"
"(if(post-guard-var_114)(for-loop_307 rest_240) null)))"
"(cons elem_109 result_204))))))"
" null))))"
" for-loop_307)"
" lst_409))))))"
"(define-values"
"(finish-expanding-body-expressons101.1)"
"(lambda(compiled-submodules89_0"
" ctx86_0"
" declared-submodule-names88_0"
" modules-being-compiled90_0"
" mpis-to-reset91_0"
" phase85_0"
" self87_0"
" tail?84_0"
" partially-expanded-bodys100_0)"
"(let-values(((partially-expanded-bodys_1) partially-expanded-bodys100_0))"
"(let-values(((tail?_54) tail?84_0))"
"(let-values(((phase_154) phase85_0))"
"(let-values(((body-ctx_7) ctx86_0))"
"(let-values(((self_33) self87_0))"
"(let-values(((declared-submodule-names_5) declared-submodule-names88_0))"
"(let-values(((compiled-submodules_3) compiled-submodules89_0))"
"(let-values(((modules-being-compiled_5) modules-being-compiled90_0))"
"(let-values(((mpis-to-reset_2) mpis-to-reset91_0))"
"(let-values()"
"((letrec-values(((loop_176)"
"(lambda(tail?_55 bodys_21)"
"(if(null? bodys_21)"
"(let-values()"
"(if tail?_55"
"(let-values()"
"(let-values(((bodys_22)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts body-ctx_7))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts body-ctx_7)))))"
"(if(null? bodys_22) null(loop_176 #t bodys_22))))"
"(let-values() bodys_21)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_124)"
"(expand-context-observer body-ctx_7)))"
"(if obs_124"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_124 'next)))"
"(void)))"
"(values))))"
"(let-values(((body_21)(car bodys_21)))"
"(let-values(((rest-bodys_2)(cdr bodys_21)))"
"(let-values(((exp-body_8)"
"(if(let-values(((or-part_360)(parsed? body_21)))"
"(if or-part_360"
" or-part_360"
"(let-values(((or-part_361)"
"(expanded+parsed? body_21)))"
"(if or-part_361"
" or-part_361"
"(semi-parsed-begin-for-syntax?"
" body_21)))))"
"(let-values() body_21)"
"(if(semi-parsed-define-values? body_21)"
"(let-values()"
"(let-values(((ids_45)"
"(semi-parsed-define-values-ids"
" body_21)))"
"(let-values(((rhs-ctx_2)"
"(as-named-context"
"(as-expression-context"
" body-ctx_7)"
" ids_45)))"
"(let-values(((syms_26)"
"(semi-parsed-define-values-syms"
" body_21)))"
"(let-values(((s_764)"
"(semi-parsed-define-values-s"
" body_21)))"
"(let-values(((ok?_80"
" define-values544_0"
" _545_0"
" _546_0)"
"(let-values(((s_584)"
"(syntax-disarm$1"
" s_764)))"
"(if(if(not"
"(expand-context-to-parsed?"
" rhs-ctx_2))"
" #t"
" #f)"
"(let-values(((orig-s_84)"
" s_584))"
"(let-values(((define-values544_1"
" _545_1"
" _546_1)"
"(let-values(((s_586)"
"(if(syntax?$1"
" s_584)"
"(syntax-e$1"
" s_584)"
" s_584)))"
"(if(pair?"
" s_586)"
"(let-values(((define-values547_0)"
"(let-values(((s_589)"
"(car"
" s_586)))"
" s_589))"
"((_548_0"
" _549_0)"
"(let-values(((s_590)"
"(cdr"
" s_586)))"
"(let-values(((s_765)"
"(if(syntax?$1"
" s_590)"
"(syntax-e$1"
" s_590)"
" s_590)))"
"(if(pair?"
" s_765)"
"(let-values(((_550_0)"
"(let-values(((s_766)"
"(car"
" s_765)))"
" s_766))"
"((_551_0)"
"(let-values(((s_767)"
"(cdr"
" s_765)))"
"(let-values(((s_768)"
"(if(syntax?$1"
" s_767)"
"(syntax-e$1"
" s_767)"
" s_767)))"
"(if(pair?"
" s_768)"
"(let-values(((_552_0)"
"(let-values(((s_769)"
"(car"
" s_768)))"
" s_769))"
"(()"
"(let-values(((s_770)"
"(cdr"
" s_768)))"
"(let-values(((s_771)"
"(if(syntax?$1"
" s_770)"
"(syntax-e$1"
" s_770)"
" s_770)))"
"(if(null?"
" s_771)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                     \"bad syntax\""
" orig-s_84))))))"
"(values"
" _552_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_84))))))"
"(values"
" _550_0"
" _551_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_84))))))"
"(values"
" define-values547_0"
" _548_0"
" _549_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_84)))))"
"(values"
" #t"
" define-values544_1"
" _545_1"
" _546_1)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((rebuild-s_15)"
"(let-values(((temp555_0)"
" #t))"
"(keep-as-needed59.1"
" #f"
" #f"
" #f"
" #f"
" temp555_0"
" #t"
" rhs-ctx_2"
" s_764))))"
"(let-values(((exp-rhs_7)"
"(let-values()"
"(let-values(((temp556_0)"
"(semi-parsed-define-values-rhs"
" body_21))"
"((rhs-ctx557_0)"
" rhs-ctx_2))"
"(expand5.1"
" #f"
" #f"
" temp556_0"
" rhs-ctx557_0)))))"
"(let-values(((comp-form_0)"
"(parsed-define-values19.1"
" rebuild-s_15"
" ids_45"
" syms_26"
"(if(expand-context-to-parsed?"
" rhs-ctx_2)"
" exp-rhs_7"
"(let-values(((exp-rhs558_0)"
" exp-rhs_7)"
"((temp559_0)"
"(as-to-parsed-context"
" rhs-ctx_2)))"
"(expand5.1"
" #f"
" #f"
" exp-rhs558_0"
" temp559_0))))))"
"(if(expand-context-to-parsed?"
" rhs-ctx_2)"
" comp-form_0"
"(expanded+parsed1.1"
"(let-values(((rebuild-s560_0)"
" rebuild-s_15)"
"((temp561_0)"
"(list"
" define-values544_0"
" ids_45"
" exp-rhs_7)))"
"(rebuild66.1"
" #f"
" #f"
" rebuild-s560_0"
" temp561_0))"
" comp-form_0)))))))))))"
"(let-values()"
"(let-values(((disarmed-body_0)"
"(syntax-disarm$1 body_21)))"
"(let-values(((tmp_61)"
"(core-form-sym"
" disarmed-body_0"
" phase_154)))"
"(if(if(equal? tmp_61 '#%require)"
" #t"
"(if(equal? tmp_61 '#%provide)"
" #t"
"(equal? tmp_61 'module*)))"
"(let-values() body_21)"
"(let-values()"
"(let-values()"
"(let-values(((exp-body_9)"
"(let-values(((body562_0)"
" body_21)"
"((temp563_0)"
"(as-expression-context"
" body-ctx_7)))"
"(expand5.1"
" #f"
" #f"
" body562_0"
" temp563_0))))"
"(if(expand-context-to-parsed?"
" body-ctx_7)"
" exp-body_9"
"(expanded+parsed1.1"
" exp-body_9"
"(let-values(((exp-body564_0)"
" exp-body_9)"
"((temp565_0)"
"(as-to-parsed-context"
" body-ctx_7)))"
"(expand5.1"
" #f"
" #f"
" exp-body564_0"
" temp565_0)))))))))))))))"
"(let-values(((lifted-defns_1)"
"(loop_176"
" #f"
"(get-and-clear-lifts!"
"(expand-context-lifts body-ctx_7)))))"
"(let-values(((lifted-requires_0)"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts body-ctx_7))))"
"(let-values(((lifted-modules_0)"
"(let-values(((temp566_0)"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" body-ctx_7)))"
"((phase567_0) phase_154)"
"((self568_0) self_33)"
"((body-ctx569_0) body-ctx_7)"
"((mpis-to-reset570_0)"
" mpis-to-reset_2)"
"((declared-submodule-names571_0)"
" declared-submodule-names_5)"
"((compiled-submodules572_0)"
" compiled-submodules_3)"
"((modules-being-compiled573_0)"
" modules-being-compiled_5))"
"(expand-non-module*-submodules214.1"
" compiled-submodules572_0"
" declared-submodule-names571_0"
" modules-being-compiled573_0"
" mpis-to-reset570_0"
" temp566_0"
" phase567_0"
" self568_0"
" body-ctx569_0))))"
"(begin"
"(if(null? lifted-defns_1)"
"(let-values()"
"(let-values(((obs_125)"
"(expand-context-observer body-ctx_7)))"
"(if obs_125"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_125"
" 'module-lift-loop"
" lifted-defns_1)))"
"(void))))"
"(let-values()"
"(let-values(((obs_126)"
"(expand-context-observer body-ctx_7)))"
"(if obs_126"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_126"
" 'module-lift-end-loop"
"(cons exp-body_8 rest-bodys_2))))"
"(void)))))"
"(append"
" lifted-requires_0"
" lifted-defns_1"
" lifted-modules_0"
"(cons"
" exp-body_8"
"(loop_176 tail?_55 rest-bodys_2))))))))))))))))"
" loop_176)"
" tail?_54"
" partially-expanded-bodys_1)))))))))))))"
"(define-values"
"(check-defined-by-now)"
"(lambda(need-eventually-defined_3 self_34)"
"(begin"
"(let-values(((ht_161) need-eventually-defined_3))"
"(begin"
"(check-in-hash ht_161)"
"((letrec-values(((for-loop_308)"
"(lambda(i_12)"
"(if i_12"
"(let-values(((phase_155 l_81)(hash-iterate-key+value ht_161 i_12)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(let-values(((lst_411) l_81))"
"(begin"
"(check-list lst_411)"
"((letrec-values(((for-loop_309)"
"(lambda(lst_412)"
"(if(pair? lst_412)"
"(let-values(((id_153)"
"(unsafe-car"
" lst_412))"
"((rest_241)"
"(unsafe-cdr"
" lst_412)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((b_94)"
"(let-values(((id574_0)"
" id_153)"
"((phase575_0)"
" phase_155))"
"(resolve+shift30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id574_0"
" phase575_0))))"
"(if(if b_94"
"(if(module-binding?"
" b_94)"
"(if(eq?"
"(module-binding-sym"
" b_94)"
"(syntax-e$1"
" id_153))"
"(eq?"
"(module-binding-module"
" b_94)"
" self_34)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                               \"reference to an unbound identifier\""
" id_153)))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_309"
" rest_241)"
"(values))))"
"(values)))))"
" for-loop_309)"
" lst_411)))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_308(hash-iterate-next ht_161 i_12))(values))))"
"(values)))))"
" for-loop_308)"
"(hash-iterate-first ht_161))))"
"(void))))"
"(define-values"
"(resolve-provides117.1)"
"(lambda(ctx109_0"
" declared-submodule-names105_0"
" namespace106_0"
" phase107_0"
" requires-and-provides104_0"
" self108_0"
" expression-expanded-bodys116_0)"
"(let-values(((expression-expanded-bodys_1) expression-expanded-bodys116_0))"
"(let-values(((requires+provides_9) requires-and-provides104_0))"
"(let-values(((declared-submodule-names_6) declared-submodule-names105_0))"
"(let-values(((m-ns_21) namespace106_0))"
"(let-values(((phase_156) phase107_0))"
"(let-values(((self_35) self108_0))"
"(let-values(((ctx_108) ctx109_0))"
"(let-values()"
"(let-values()"
"((letrec-values(((loop_177)"
"(lambda(bodys_23 phase_157)"
"(if(null? bodys_23)"
"(let-values() null)"
"(if(let-values(((or-part_362)(parsed?(car bodys_23))))"
"(if or-part_362 or-part_362(expanded+parsed?(car bodys_23))))"
"(let-values()(cons(car bodys_23)(loop_177(cdr bodys_23) phase_157)))"
"(if(semi-parsed-begin-for-syntax?(car bodys_23))"
"(let-values()"
"(let-values(((nested-bodys_2)"
"(loop_177"
"(semi-parsed-begin-for-syntax-body(car bodys_23))"
"(add1 phase_157))))"
"(cons"
"(let-values(((the-struct_111)(car bodys_23)))"
"(if(semi-parsed-begin-for-syntax? the-struct_111)"
"(let-values(((body576_0) nested-bodys_2))"
"(semi-parsed-begin-for-syntax3.1"
"(semi-parsed-begin-for-syntax-s the-struct_111)"
" body576_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                          \"semi-parsed-begin-for-syntax?\""
" the-struct_111)))"
"(loop_177(cdr bodys_23) phase_157))))"
"(let-values()"
"(let-values(((disarmed-body_1)(syntax-disarm$1(car bodys_23))))"
"(let-values(((tmp_62)(core-form-sym disarmed-body_1 phase_157)))"
"(if(equal? tmp_62 '#%provide)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_127)"
"(expand-context-observer"
" ctx_108)))"
"(if obs_127"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_127"
" 'enter-prim"
"(car bodys_23))))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_128)"
"(expand-context-observer"
" ctx_108)))"
"(if obs_128"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_128"
" 'enter-prim-provide)))"
"(void)))"
"(values))))"
"(let-values(((ok?_81 #%provide577_0 spec578_0)"
"(let-values(((s_772) disarmed-body_1))"
"(let-values(((orig-s_85) s_772))"
"(let-values(((#%provide577_1 spec578_1)"
"(let-values(((s_773)"
"(if(syntax?$1"
" s_772)"
"(syntax-e$1"
" s_772)"
" s_772)))"
"(if(pair? s_773)"
"(let-values(((#%provide579_0)"
"(let-values(((s_774)"
"(car"
" s_773)))"
" s_774))"
"((spec580_0)"
"(let-values(((s_775)"
"(cdr"
" s_773)))"
"(let-values(((s_776)"
"(if(syntax?$1"
" s_775)"
"(syntax-e$1"
" s_775)"
" s_775)))"
"(let-values(((flat-s_59)"
"(to-syntax-list.1"
" s_776)))"
"(if(not"
" flat-s_59)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_85))"
"(let-values()"
" flat-s_59)))))))"
"(values"
" #%provide579_0"
" spec580_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_85)))))"
"(values"
" #t"
" #%provide577_1"
" spec578_1))))))"
"(let-values(((track-stxes_10 specs_2)"
"(parse-and-expand-provides!"
" spec578_0"
"(car bodys_23)"
" requires+provides_9"
" self_35"
" phase_157"
"(let-values(((v_257) ctx_108))"
"(let-values(((the-struct_112) v_257))"
"(if(expand-context/outer?"
" the-struct_112)"
"(let-values(((context581_0)"
" 'top-level)"
"((inner582_0)"
"(let-values(((the-struct_113)"
"(root-expand-context/outer-inner"
" v_257)))"
"(if(expand-context/inner?"
" the-struct_113)"
"(let-values(((phase583_0)"
" phase_157)"
"((namespace584_0)"
"(namespace->namespace-at-phase"
" m-ns_21"
" phase_157))"
"((requires+provides585_0)"
" requires+provides_9)"
"((declared-submodule-names586_0)"
" declared-submodule-names_6))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_113)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_113)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_113)"
"(root-expand-context/inner-defined-syms"
" the-struct_113)"
"(root-expand-context/inner-counter"
" the-struct_113)"
"(root-expand-context/inner-lift-key"
" the-struct_113)"
"(expand-context/inner-to-parsed?"
" the-struct_113)"
" phase583_0"
" namespace584_0"
"(expand-context/inner-user-env"
" the-struct_113)"
"(expand-context/inner-just-once?"
" the-struct_113)"
"(expand-context/inner-module-begin-k"
" the-struct_113)"
"(expand-context/inner-allow-unbound?"
" the-struct_113)"
"(expand-context/inner-in-local-expand?"
" the-struct_113)"
"(expand-context/inner-stops"
" the-struct_113)"
" declared-submodule-names586_0"
"(expand-context/inner-lifts"
" the-struct_113)"
"(expand-context/inner-lift-envs"
" the-struct_113)"
"(expand-context/inner-module-lifts"
" the-struct_113)"
"(expand-context/inner-require-lifts"
" the-struct_113)"
"(expand-context/inner-to-module-lifts"
" the-struct_113)"
" requires+provides585_0"
"(expand-context/inner-observer"
" the-struct_113)"
"(expand-context/inner-for-serializable?"
" the-struct_113)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                        \"expand-context/inner?\""
" the-struct_113)))))"
"(expand-context/outer1.1"
" inner582_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_112)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_112)"
"(root-expand-context/outer-frame-id"
" the-struct_112)"
" context581_0"
"(expand-context/outer-env"
" the-struct_112)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_112)"
"(expand-context/outer-scopes"
" the-struct_112)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_112)"
"(expand-context/outer-binding-layer"
" the-struct_112)"
"(expand-context/outer-reference-records"
" the-struct_112)"
"(expand-context/outer-only-immediate?"
" the-struct_112)"
"(expand-context/outer-need-eventually-defined"
" the-struct_112)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_112)"
"(expand-context/outer-name"
" the-struct_112)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                      \"expand-context/outer?\""
" the-struct_112)))))))"
"(begin"
"(let-values(((obs_129)"
"(expand-context-observer ctx_108)))"
"(if obs_129"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_129 'exit-prim)))"
"(void)))"
"(if(expand-context-to-parsed? ctx_108)"
"(let-values()"
"(loop_177(cdr bodys_23) phase_157))"
"(let-values()"
"(cons"
"(syntax-track-origin*"
" track-stxes_10"
"(let-values(((temp587_0)(car bodys_23))"
"((temp588_0)"
"(list* #%provide577_0 specs_2)))"
"(rebuild66.1 #f #f temp587_0 temp588_0)))"
"(loop_177(cdr bodys_23) phase_157))))))))))"
"(let-values()"
"(cons"
"(car bodys_23)"
"(loop_177(cdr bodys_23) phase_157)))))))))))))"
" loop_177)"
" expression-expanded-bodys_1"
" phase_156))))))))))))"
"(define-values"
"(declare-module-for-expansion141.1)"
"(lambda(ctx127_0"
" enclosing125_0"
" fill129_0"
" module-name-id120_0"
" modules-being-compiled128_0"
" namespace123_0"
" rebuild-s121_0"
" requires-and-provides122_0"
" root-ctx126_0"
" self124_0"
" fully-expanded-bodys-except-post-submodules140_0)"
"(let-values(((fully-expanded-bodys-except-post-submodules_1) fully-expanded-bodys-except-post-submodules140_0))"
"(let-values(((module-name-id_0) module-name-id120_0))"
"(let-values(((rebuild-s_16) rebuild-s121_0))"
"(let-values(((requires+provides_10) requires-and-provides122_0))"
"(let-values(((m-ns_22) namespace123_0))"
"(let-values(((self_36) self124_0))"
"(let-values(((enclosing-self_3) enclosing125_0))"
"(let-values(((root-ctx_7) root-ctx126_0))"
"(let-values(((ctx_109) ctx127_0))"
"(let-values(((modules-being-compiled_6) modules-being-compiled128_0))"
"(let-values(((compiled-module-box_1) fill129_0))"
"(let-values()"
"(let-values(((requires_7 provides_13)"
"(extract-requires-and-provides requires+provides_10 self_36 self_36)))"
"(let-values(((parsed-mod_0)"
"(parsed-module25.1"
" rebuild-s_16"
" #f"
" module-name-id_0"
" self_36"
" requires_7"
" provides_13"
"(requires+provides-all-bindings-simple? requires+provides_10)"
"(root-expand-context-encode-for-module root-ctx_7 self_36 self_36)"
"(parsed-only fully-expanded-bodys-except-post-submodules_1)"
" #f"
"(hasheq))))"
"(let-values(((module-name_1)"
"(1/module-path-index-resolve"
"(let-values(((or-part_363) enclosing-self_3))"
"(if or-part_363 or-part_363 self_36)))))"
"(let-values(((compiled-module_0)"
"(let-values(((temp590_0)"
"(let-values(((m-ns594_0) m-ns_22)"
"((enclosing-self595_0) enclosing-self_3)"
"((temp596_0)"
"(if enclosing-self_3"
"(1/resolved-module-path-name"
" module-name_1)"
" #f)))"
"(make-compile-context14.1"
" temp596_0"
" #t"
" #f"
" #f"
" enclosing-self595_0"
" #t"
" m-ns594_0"
" #t"
" #f"
" #f"
" #f"
" #f)))"
"((temp591_0)(expand-context-for-serializable? ctx_109))"
"((modules-being-compiled592_0) modules-being-compiled_6)"
"((temp593_0) #f))"
"(compile-module13.1"
" #f"
" #f"
" modules-being-compiled592_0"
" #t"
" temp593_0"
" #t"
" temp591_0"
" #t"
" #f"
" #f"
" parsed-mod_0"
" temp590_0))))"
"(let-values((()"
"(begin(set-box! compiled-module-box_1 compiled-module_0)(values))))"
"(let-values(((root-module-name_0)"
"(resolved-module-path-root-name module-name_1)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" m-ns_22"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_0))"
"(let-values()"
"(let-values(((temp598_0) #f))"
"(eval-module8.1"
" #f"
" #f"
" #f"
" #f"
" temp598_0"
" #t"
" compiled-module_0))))))))))))))))))))))))"
"(define-values"
"(attach-root-expand-context-properties)"
"(lambda(s_777 root-ctx_8 orig-self_1 new-self_2)"
"(let-values(((s_778)"
"(syntax-property$1 s_777 'module-body-context(root-expand-context-all-scopes-stx root-ctx_8))))"
"(let-values(((s_779)"
"(syntax-property$1"
" s_778"
" 'module-body-inside-context"
"(add-scope empty-syntax(root-expand-context-post-expansion-scope root-ctx_8)))))"
" s_779))))"
"(define-values"
"(expand-post-submodules167.1)"
"(lambda(all-scopes-s149_0"
" compiled-submodules152_0"
" ctx154_0"
" declare-enclosing144_0"
" declared-submodule-names151_0"
" enclosing-is-cross-phase-persistent?148_0"
" modules-being-compiled153_0"
" mpis-to-reset150_0"
" phase145_0"
" requires-and-provides147_0"
" self146_0"
" fully-expanded-bodys-except-post-submodules166_0)"
"(let-values(((fully-expanded-bodys-except-post-submodules_2) fully-expanded-bodys-except-post-submodules166_0))"
"(let-values(((declare-enclosing-module_1) declare-enclosing144_0))"
"(let-values(((phase_158) phase145_0))"
"(let-values(((self_37) self146_0))"
"(let-values(((requires+provides_11) requires-and-provides147_0))"
"(let-values(((enclosing-is-cross-phase-persistent?_1) enclosing-is-cross-phase-persistent?148_0))"
"(let-values(((all-scopes-s_1) all-scopes-s149_0))"
"(let-values(((mpis-to-reset_3) mpis-to-reset150_0))"
"(let-values(((declared-submodule-names_7) declared-submodule-names151_0))"
"(let-values(((compiled-submodules_4) compiled-submodules152_0))"
"(let-values(((modules-being-compiled_7) modules-being-compiled153_0))"
"(let-values(((submod-ctx_1) ctx154_0))"
"(let-values()"
"((letrec-values(((loop_178)"
"(lambda(bodys_24 phase_159)"
"(if(null? bodys_24)"
"(let-values() null)"
"(let-values()"
"(let-values(((body_22)(car bodys_24)))"
"(let-values(((rest-bodys_3)(cdr bodys_24)))"
"(if(semi-parsed-begin-for-syntax? body_22)"
"(let-values()"
"(let-values(((body-s_0)"
"(semi-parsed-begin-for-syntax-s body_22)))"
"(let-values(((ok?_82 begin-for-syntax599_0 _600_0)"
"(let-values(((s_780)"
"(syntax-disarm$1 body-s_0)))"
"(let-values(((orig-s_86) s_780))"
"(let-values(((begin-for-syntax599_1"
" _600_1)"
"(let-values(((s_781)"
"(if(syntax?$1"
" s_780)"
"(syntax-e$1"
" s_780)"
" s_780)))"
"(if(pair? s_781)"
"(let-values(((begin-for-syntax601_0)"
"(let-values(((s_782)"
"(car"
" s_781)))"
" s_782))"
"((_602_0)"
"(let-values(((s_783)"
"(cdr"
" s_781)))"
"(let-values(((s_784)"
"(if(syntax?$1"
" s_783)"
"(syntax-e$1"
" s_783)"
" s_783)))"
"(let-values(((flat-s_60)"
"(to-syntax-list.1"
" s_784)))"
"(if(not"
" flat-s_60)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_86))"
"(let-values()"
" flat-s_60)))))))"
"(values"
" begin-for-syntax601_0"
" _602_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_86)))))"
"(values"
" #t"
" begin-for-syntax599_1"
" _600_1))))))"
"(let-values(((rebuild-body-s_0)"
"(let-values(((submod-ctx603_0)"
" submod-ctx_1)"
"((body-s604_0) body-s_0))"
"(keep-as-needed59.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" submod-ctx603_0"
" body-s604_0))))"
"(let-values(((nested-bodys_3)"
"(loop_178"
"(semi-parsed-begin-for-syntax-body"
" body_22)"
"(add1 phase_159))))"
"(let-values(((parsed-bfs_0)"
"(parsed-begin-for-syntax21.1"
" rebuild-body-s_0"
"(parsed-only nested-bodys_3))))"
"(cons"
"(if(expand-context-to-parsed? submod-ctx_1)"
" parsed-bfs_0"
"(expanded+parsed1.1"
"(let-values(((rebuild-body-s605_0)"
" rebuild-body-s_0)"
"((temp606_0)"
"(list*"
" begin-for-syntax599_0"
"(syntax-only"
" nested-bodys_3))))"
"(rebuild66.1"
" #f"
" #f"
" rebuild-body-s605_0"
" temp606_0))"
" parsed-bfs_0))"
"(loop_178 rest-bodys_3 phase_159))))))))"
"(if(let-values(((or-part_364)(parsed? body_22)))"
"(if or-part_364"
" or-part_364"
"(expanded+parsed? body_22)))"
"(let-values()"
"(cons body_22(loop_178 rest-bodys_3 phase_159)))"
"(let-values()"
"(let-values(((disarmed-body_2)"
"(syntax-disarm$1 body_22)))"
"(let-values(((tmp_63)"
"(core-form-sym"
" disarmed-body_2"
" phase_159)))"
"(if(equal? tmp_63 'module*)"
"(let-values()"
"(let-values((()"
"(begin"
"(force"
" declare-enclosing-module_1)"
"(values))))"
"(let-values(((ready-body_2)"
"(remove-use-site-scopes"
" body_22"
" submod-ctx_1)))"
"(let-values(((ok?_83"
" module*607_0"
" name608_0"
" _609_0)"
"(let-values(((s_785)"
" disarmed-body_2))"
"(if(let-values(((s_786)"
"(if(syntax?$1"
" s_785)"
"(syntax-e$1"
" s_785)"
" s_785)))"
"(if(pair? s_786)"
"(if(let-values(((s_642)"
"(car"
" s_786)))"
" #t)"
"(let-values(((s_787)"
"(cdr"
" s_786)))"
"(let-values(((s_788)"
"(if(syntax?$1"
" s_787)"
"(syntax-e$1"
" s_787)"
" s_787)))"
"(if(pair?"
" s_788)"
"(if(let-values(((s_643)"
"(car"
" s_788)))"
" #t)"
"(let-values(((s_644)"
"(cdr"
" s_788)))"
"(let-values(((s_645)"
"(if(syntax?$1"
" s_644)"
"(syntax-e$1"
" s_644)"
" s_644)))"
"(if(pair?"
" s_645)"
"(if(let-values(((s_789)"
"(car"
" s_645)))"
"(let-values(((s_646)"
"(if(syntax?$1"
" s_789)"
"(syntax-e$1"
" s_789)"
" s_789)))"
"(eq?"
" #f"
" s_646)))"
"(let-values(((s_647)"
"(cdr"
" s_645)))"
" #t)"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((module*607_1"
" name608_1"
" _609_1)"
"(let-values(((s_652)"
"(if(syntax?$1"
" s_785)"
"(syntax-e$1"
" s_785)"
" s_785)))"
"(let-values(((module*610_0)"
"(let-values(((s_656)"
"(car"
" s_652)))"
" s_656))"
"((name611_0"
" _612_0)"
"(let-values(((s_657)"
"(cdr"
" s_652)))"
"(let-values(((s_790)"
"(if(syntax?$1"
" s_657)"
"(syntax-e$1"
" s_657)"
" s_657)))"
"(let-values(((name613_0)"
"(let-values(((s_791)"
"(car"
" s_790)))"
" s_791))"
"((_614_0)"
"(let-values(((s_792)"
"(cdr"
" s_790)))"
"(let-values(((s_793)"
"(if(syntax?$1"
" s_792)"
"(syntax-e$1"
" s_792)"
" s_792)))"
"(let-values((()"
"(let-values(((s_660)"
"(car"
" s_793)))"
"(let-values(((s_794)"
"(if(syntax?$1"
" s_660)"
"(syntax-e$1"
" s_660)"
" s_660)))"
"(values))))"
"((_615_0)"
"(let-values(((s_795)"
"(cdr"
" s_793)))"
" s_795)))"
"(values"
" _615_0))))))"
"(values"
" name613_0"
" _614_0))))))"
"(values"
" module*610_0"
" name611_0"
" _612_0)))))"
"(values"
" #t"
" module*607_1"
" name608_1"
" _609_1)))"
"(values #f #f #f #f)))))"
"(let-values(((submod_3)"
"(if ok?_83"
"(let-values()"
"(let-values(((neg-phase_0)"
"(phase-"
" 0"
" phase_159)))"
"(let-values(((shifted-s_0)"
"(syntax-shift-phase-level$1"
" ready-body_2"
" neg-phase_0)))"
"(let-values(((submod_4)"
"(let-values(((temp619_0)"
" #t)"
"((neg-phase620_0)"
" neg-phase_0)"
"((all-scopes-s621_0)"
" all-scopes-s_1)"
"((requires+provides622_0)"
" requires+provides_11)"
"((enclosing-is-cross-phase-persistent?623_0)"
" enclosing-is-cross-phase-persistent?_1)"
"((mpis-to-reset624_0)"
" mpis-to-reset_3)"
"((declared-submodule-names625_0)"
" declared-submodule-names_7)"
"((compiled-submodules626_0)"
" compiled-submodules_4)"
"((modules-being-compiled627_0)"
" modules-being-compiled_7))"
"(expand-submodule199.1"
" compiled-submodules626_0"
" declared-submodule-names625_0"
" all-scopes-s621_0"
" #t"
" enclosing-is-cross-phase-persistent?623_0"
" #t"
" requires+provides622_0"
" #t"
" temp619_0"
" neg-phase620_0"
" #t"
" modules-being-compiled627_0"
" mpis-to-reset624_0"
" shifted-s_0"
" self_37"
" submod-ctx_1))))"
"(if(parsed?"
" submod_4)"
"(let-values()"
" submod_4)"
"(if(expanded+parsed?"
" submod_4)"
"(let-values()"
"(let-values(((the-struct_114)"
" submod_4))"
"(if(expanded+parsed?"
" the-struct_114)"
"(let-values(((s628_0)"
"(syntax-shift-phase-level$1"
"(expanded+parsed-s"
" submod_4)"
" phase_159)))"
"(expanded+parsed1.1"
" s628_0"
"(expanded+parsed-parsed"
" the-struct_114)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                 \"expanded+parsed?\""
" the-struct_114))))"
"(let-values()"
"(syntax-shift-phase-level$1"
" submod_4"
" phase_159))))))))"
"(let-values()"
"(let-values(((temp632_0)"
" #t)"
"((mpis-to-reset633_0)"
" mpis-to-reset_3)"
"((declared-submodule-names634_0)"
" declared-submodule-names_7)"
"((compiled-submodules635_0)"
" compiled-submodules_4)"
"((modules-being-compiled636_0)"
" modules-being-compiled_7))"
"(expand-submodule199.1"
" compiled-submodules635_0"
" declared-submodule-names634_0"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp632_0"
" #f"
" #f"
" modules-being-compiled636_0"
" mpis-to-reset633_0"
" ready-body_2"
" self_37"
" submod-ctx_1))))))"
"(cons"
" submod_3"
"(loop_178 rest-bodys_3 phase_159)))))))"
"(let-values()"
"(cons"
" body_22"
"(loop_178"
" rest-bodys_3"
" phase_159))))))))))))))))"
" loop_178)"
" fully-expanded-bodys-except-post-submodules_2"
" phase_158))))))))))))))))"
"(define-values"
"(stop-at-module*?)"
"(lambda(ctx_110)"
"(free-id-set-member?"
"(expand-context-stops ctx_110)"
"(expand-context-phase ctx_110)"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx 'module*)(expand-context-phase ctx_110)))))"
"(define-values"
"(check-ids-unbound175.1)"
"(lambda(in170_0 ids172_0 phase173_1 requires+provides174_0)"
"(let-values(((ids_46) ids172_0))"
"(let-values(((phase_160) phase173_1))"
"(let-values(((requires+provides_12) requires+provides174_0))"
"(let-values(((s_796) in170_0))"
"(let-values()"
"(begin"
"(let-values(((lst_413) ids_46))"
"(begin"
"(check-list lst_413)"
"((letrec-values(((for-loop_310)"
"(lambda(lst_414)"
"(if(pair? lst_414)"
"(let-values(((id_154)(unsafe-car lst_414))"
"((rest_242)(unsafe-cdr lst_414)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((s640_0) s_796)"
"((temp641_0) 'module))"
"(check-not-defined87.1"
" #f"
" #f"
" #f"
" #f"
" s640_0"
" #f"
" #f"
" #f"
" #f"
" temp641_0"
" requires+provides_12"
" id_154"
" phase_160)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_310 rest_242)(values))))"
"(values)))))"
" for-loop_310)"
" lst_413)))"
"(void)))))))))"
"(define-values"
"(eval-nested-bodys)"
"(lambda(bodys_25 phase_161 m-ns_23 self_38 ctx_111)"
"(begin"
"(let-values(((lst_415) bodys_25))"
"(begin"
"(check-list lst_415)"
"((letrec-values(((for-loop_311)"
"(lambda(lst_416)"
"(if(pair? lst_416)"
"(let-values(((body_23)(unsafe-car lst_416))((rest_243)(unsafe-cdr lst_416)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((p_69)"
"(if(expanded+parsed? body_23)"
"(expanded+parsed-parsed body_23)"
" body_23)))"
"(if(parsed-define-values? p_69)"
"(let-values()"
"(let-values(((ids_47)"
"(parsed-define-values-ids"
" p_69)))"
"(let-values(((vals_10)"
"(eval-for-bindings"
" ids_47"
"(parsed-define-values-rhs"
" p_69)"
" phase_161"
" m-ns_23"
" ctx_111)))"
"(begin"
"(let-values(((lst_417) ids_47)"
"((lst_418)"
"(parsed-define-values-syms"
" p_69))"
"((lst_419) vals_10))"
"(begin"
"(check-list lst_417)"
"(check-list lst_418)"
"(check-list lst_419)"
"((letrec-values(((for-loop_312)"
"(lambda(lst_420"
" lst_421"
" lst_422)"
"(if(if(pair?"
" lst_420)"
"(if(pair?"
" lst_421)"
"(pair?"
" lst_422)"
" #f)"
" #f)"
"(let-values(((id_155)"
"(unsafe-car"
" lst_420))"
"((rest_244)"
"(unsafe-cdr"
" lst_420))"
"((sym_107)"
"(unsafe-car"
" lst_421))"
"((rest_245)"
"(unsafe-cdr"
" lst_421))"
"((val_77)"
"(unsafe-car"
" lst_422))"
"((rest_246)"
"(unsafe-cdr"
" lst_422)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" m-ns_23"
" phase_161"
" sym_107"
" val_77))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_312"
" rest_244"
" rest_245"
" rest_246)"
"(values))))"
"(values)))))"
" for-loop_312)"
" lst_417"
" lst_418"
" lst_419)))"
"(void)))))"
"(if(let-values(((or-part_365)"
"(parsed-define-syntaxes?"
" p_69)))"
"(if or-part_365"
" or-part_365"
"(semi-parsed-begin-for-syntax? p_69)))"
"(let-values()(void))"
"(if(let-values(((or-part_366)"
"(parsed-#%declare? p_69)))"
"(if or-part_366"
" or-part_366"
"(syntax?$1 p_69)))"
"(let-values()(void))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
" ctx_111"
" 1/current-namespace"
" m-ns_23)"
"(let-values()"
"(eval-single-top"
"(compile-single"
" p_69"
"(let-values(((m-ns642_0) m-ns_23)"
"((phase643_0)"
" phase_161))"
"(make-compile-context14.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" m-ns642_0"
" #t"
" phase643_0"
" #t"
" #f"
" #f)))"
" m-ns_23)))))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_311 rest_243)(values))))"
"(values)))))"
" for-loop_311)"
" lst_415)))"
"(void))))"
"(define-values"
"(expand-submodule199.1)"
"(lambda(compiled-submodules185_0"
" declared-submodule-names184_0"
" enclosing-all-scopes-stx182_0"
" enclosing-all-scopes-stx191_0"
" enclosing-is-cross-phase-persistent?181_0"
" enclosing-is-cross-phase-persistent?190_0"
" enclosing-requires+provides180_0"
" enclosing-requires+provides189_0"
" is-star?178_0"
" keep-enclosing-scope-at-phase179_0"
" keep-enclosing-scope-at-phase188_0"
" modules-being-compiled186_0"
" mpis-to-reset183_0"
" s196_0"
" self197_0"
" ctx198_1)"
"(let-values(((s_797) s196_0))"
"(let-values(((self_39) self197_0))"
"(let-values(((ctx_112) ctx198_1))"
"(let-values(((is-star?_0) is-star?178_0))"
"(let-values(((keep-enclosing-scope-at-phase_2)"
"(if keep-enclosing-scope-at-phase188_0 keep-enclosing-scope-at-phase179_0 #f)))"
"(let-values(((enclosing-r+p_2)"
"(if enclosing-requires+provides189_0 enclosing-requires+provides180_0 #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_2)"
"(if enclosing-is-cross-phase-persistent?190_0"
" enclosing-is-cross-phase-persistent?181_0"
" #f)))"
"(let-values(((enclosing-all-scopes-stx_1)"
"(if enclosing-all-scopes-stx191_0 enclosing-all-scopes-stx182_0 #f)))"
"(let-values(((mpis-to-reset_4) mpis-to-reset183_0))"
"(let-values(((declared-submodule-names_8) declared-submodule-names184_0))"
"(let-values(((compiled-submodules_5) compiled-submodules185_0))"
"(let-values(((modules-being-compiled_8) modules-being-compiled186_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_130)(expand-context-observer ctx_112)))"
"(if obs_130"
"(let-values()"
"(let-values()(call-expand-observe obs_130 'enter-prim s_797)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_131)(expand-context-observer ctx_112)))"
"(if obs_131"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_131"
"(if is-star?_0 'enter-prim-submodule* 'enter-prim-submodule))))"
"(void)))"
"(values))))"
"(let-values(((ok?_84 module644_0 name645_0 _646_0)"
"(let-values(((s_798) s_797))"
"(let-values(((orig-s_87) s_798))"
"(let-values(((module644_1 name645_1 _646_1)"
"(let-values(((s_799)"
"(if(syntax?$1 s_798)"
"(syntax-e$1 s_798)"
" s_798)))"
"(if(pair? s_799)"
"(let-values(((module647_0)"
"(let-values(((s_800)(car s_799)))"
" s_800))"
"((name648_0 _649_0)"
"(let-values(((s_801)(cdr s_799)))"
"(let-values(((s_802)"
"(if(syntax?$1"
" s_801)"
"(syntax-e$1 s_801)"
" s_801)))"
"(if(pair? s_802)"
"(let-values(((name650_0)"
"(let-values(((s_803)"
"(car"
" s_802)))"
" s_803))"
"((_651_0)"
"(let-values(((s_804)"
"(cdr"
" s_802)))"
" s_804)))"
"(values name650_0 _651_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_87))))))"
"(values module647_0 name648_0 _649_0))"
"(raise-syntax-error$1"
" #f"
"                                                                       \"bad syntax\""
" orig-s_87)))))"
"(values #t module644_1 name645_1 _646_1))))))"
"(let-values(((name_79)(syntax-e$1 name645_0)))"
"(let-values((()"
"(begin"
"(if(hash-ref declared-submodule-names_8 name_79 #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                           \"submodule already declared with the same name\""
" s_797"
" name_79))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
" declared-submodule-names_8"
" name_79"
"(syntax-e$1 module644_0))"
"(values))))"
"(let-values(((submod_5)"
"(let-values(((temp653_0)"
"(let-values(((v_258) ctx_112))"
"(let-values(((the-struct_115) v_258))"
"(if(expand-context/outer? the-struct_115)"
"(let-values(((context662_0) 'module)"
"((only-immediate?663_0) #f)"
"((post-expansion-scope664_0)"
" #f)"
"((inner665_0)"
"(root-expand-context/outer-inner"
" v_258)))"
"(expand-context/outer1.1"
" inner665_0"
" post-expansion-scope664_0"
"(root-expand-context/outer-use-site-scopes"
" the-struct_115)"
"(root-expand-context/outer-frame-id"
" the-struct_115)"
" context662_0"
"(expand-context/outer-env the-struct_115)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_115)"
"(expand-context/outer-scopes"
" the-struct_115)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_115)"
"(expand-context/outer-binding-layer"
" the-struct_115)"
"(expand-context/outer-reference-records"
" the-struct_115)"
" only-immediate?663_0"
"(expand-context/outer-need-eventually-defined"
" the-struct_115)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_115)"
"(expand-context/outer-name"
" the-struct_115)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                             \"expand-context/outer?\""
" the-struct_115)))))"
"((self654_0) self_39)"
"((temp655_0) #t)"
"((keep-enclosing-scope-at-phase656_0)"
" keep-enclosing-scope-at-phase_2)"
"((enclosing-all-scopes-stx657_0)"
" enclosing-all-scopes-stx_1)"
"((enclosing-r+p658_0) enclosing-r+p_2)"
"((enclosing-is-cross-phase-persistent?659_0)"
" enclosing-is-cross-phase-persistent?_2)"
"((mpis-to-reset660_0) mpis-to-reset_4)"
"((modules-being-compiled661_0)"
" modules-being-compiled_8))"
"(expand-module18.1"
" temp655_0"
" #t"
" enclosing-all-scopes-stx657_0"
" #t"
" enclosing-is-cross-phase-persistent?659_0"
" #t"
" enclosing-r+p658_0"
" #t"
" keep-enclosing-scope-at-phase656_0"
" #t"
" modules-being-compiled661_0"
" #t"
" mpis-to-reset660_0"
" #t"
" s_797"
" temp653_0"
" self654_0))))"
"(let-values(((ns_122)(expand-context-namespace ctx_112)))"
"(let-values(((module-name_2)(1/module-path-index-resolve self_39)))"
"(let-values(((root-module-name_1)"
"(resolved-module-path-root-name module-name_2)))"
"(let-values(((compiled-submodule_0)"
"(let-values(((temp666_0)"
"(if(expanded+parsed? submod_5)"
"(expanded+parsed-parsed submod_5)"
" submod_5))"
"((temp667_0)"
"(let-values(((ns672_0) ns_122)"
"((self673_0) self_39)"
"((temp674_0)"
"(1/resolved-module-path-name"
" module-name_2)))"
"(make-compile-context14.1"
" temp674_0"
" #t"
" #f"
" #f"
" self673_0"
" #t"
" ns672_0"
" #t"
" #f"
" #f"
" #f"
" #f)))"
"((temp668_0) #t)"
"((temp669_0)"
"(expand-context-for-serializable?"
" ctx_112))"
"((modules-being-compiled670_0)"
" modules-being-compiled_8)"
"((temp671_0) #f))"
"(compile-module13.1"
" temp668_0"
" #t"
" modules-being-compiled670_0"
" #t"
" temp671_0"
" #t"
" temp669_0"
" #t"
" #f"
" #f"
" temp666_0"
" temp667_0))))"
"(begin"
"(hash-set!"
" compiled-submodules_5"
" name_79"
"(cons is-star?_0 compiled-submodule_0))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" ns_122"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1))"
"(let-values()"
"(let-values(((temp676_0) #f))"
"(eval-module8.1"
" #f"
" #f"
" #f"
" #f"
" temp676_0"
" #t"
" compiled-submodule_0))))"
"(let-values(((obs_132)(expand-context-observer ctx_112)))"
"(if obs_132"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_132 'exit-prim submod_5)))"
"(void)))"
"(if(not is-star?_0)"
"(let-values() submod_5)"
"(if(expanded+parsed? submod_5)"
"(let-values()"
"(let-values(((the-struct_116) submod_5))"
"(if(expanded+parsed? the-struct_116)"
"(let-values(((parsed677_0)"
"(let-values(((the-struct_117)"
"(expanded+parsed-parsed"
" submod_5)))"
"(if(parsed-module? the-struct_117)"
"(let-values(((star?678_0) #t))"
"(parsed-module25.1"
"(parsed-s the-struct_117)"
" star?678_0"
"(parsed-module-name-id"
" the-struct_117)"
"(parsed-module-self the-struct_117)"
"(parsed-module-requires"
" the-struct_117)"
"(parsed-module-provides"
" the-struct_117)"
"(parsed-module-root-ctx-simple?"
" the-struct_117)"
"(parsed-module-encoded-root-ctx"
" the-struct_117)"
"(parsed-module-body the-struct_117)"
"(parsed-module-compiled-module"
" the-struct_117)"
"(parsed-module-compiled-submodules"
" the-struct_117)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                   \"parsed-module?\""
" the-struct_117)))))"
"(expanded+parsed1.1"
"(expanded+parsed-s the-struct_116)"
" parsed677_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                 \"expanded+parsed?\""
" the-struct_116))))"
"(let-values()"
"(let-values(((the-struct_118) submod_5))"
"(if(parsed-module? the-struct_118)"
"(let-values(((star?679_0) #t))"
"(parsed-module25.1"
"(parsed-s the-struct_118)"
" star?679_0"
"(parsed-module-name-id the-struct_118)"
"(parsed-module-self the-struct_118)"
"(parsed-module-requires the-struct_118)"
"(parsed-module-provides the-struct_118)"
"(parsed-module-root-ctx-simple? the-struct_118)"
"(parsed-module-encoded-root-ctx the-struct_118)"
"(parsed-module-body the-struct_118)"
"(parsed-module-compiled-module the-struct_118)"
"(parsed-module-compiled-submodules the-struct_118)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                 \"parsed-module?\""
" the-struct_118)))))))))))))))))))))))))))))))))"
"(define-values"
"(expand-non-module*-submodules214.1)"
"(lambda(compiled-submodules204_0"
" declared-submodule-names203_0"
" modules-being-compiled205_0"
" mpis-to-reset202_0"
" bodys210_0"
" phase211_0"
" self212_0"
" ctx213_0)"
"(let-values(((bodys_26) bodys210_0))"
"(let-values(((phase_162) phase211_0))"
"(let-values(((self_40) self212_0))"
"(let-values(((ctx_113) ctx213_0))"
"(let-values(((mpis-to-reset_5) mpis-to-reset202_0))"
"(let-values(((declared-submodule-names_9) declared-submodule-names203_0))"
"(let-values(((compiled-submodules_6) compiled-submodules204_0))"
"(let-values(((modules-being-compiled_9) modules-being-compiled205_0))"
"(let-values()"
"(let-values(((lst_423) bodys_26))"
"(begin"
"(check-list lst_423)"
"((letrec-values(((for-loop_313)"
"(lambda(lst_424)"
"(if(pair? lst_424)"
"(let-values(((body_24)(unsafe-car lst_424))"
"((rest_247)(unsafe-cdr lst_424)))"
"(let-values(((post-guard-var_115)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_110)"
"(let-values()"
"(let-values()"
"(let-values(((tmp_64)"
"(core-form-sym"
"(syntax-disarm$1 body_24)"
" phase_162)))"
"(if(equal? tmp_64 'module)"
"(let-values()"
"(let-values(((temp683_0) #f)"
"((mpis-to-reset684_0)"
" mpis-to-reset_5)"
"((declared-submodule-names685_0)"
" declared-submodule-names_9)"
"((compiled-submodules686_0)"
" compiled-submodules_6)"
"((modules-being-compiled687_0)"
" modules-being-compiled_9))"
"(expand-submodule199.1"
" compiled-submodules686_0"
" declared-submodule-names685_0"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp683_0"
" #f"
" #f"
" modules-being-compiled687_0"
" mpis-to-reset684_0"
" body_24"
" self_40"
" ctx_113)))"
"(let-values() body_24)))))))"
"(let-values(((result_205)"
"(if(post-guard-var_115)"
"(for-loop_313 rest_247)"
" null)))"
"(cons elem_110 result_205))))))"
" null))))"
" for-loop_313)"
" lst_423))))))))))))))"
"(define-values"
"(make-parse-lifted-require222.1)"
"(lambda(declared-submodule-names217_0 m-ns219_0 self220_0 requires+provides221_0)"
"(let-values(((m-ns_24) m-ns219_0))"
"(let-values(((self_41) self220_0))"
"(let-values(((requires+provides_13) requires+provides221_0))"
"(let-values(((declared-submodule-names_10) declared-submodule-names217_0))"
"(let-values()"
"(lambda(s_805 phase_163)"
"(let-values(((ok?_85 #%require688_0 req689_0)"
"(let-values(((s_806)(syntax-disarm$1 s_805)))"
"(let-values(((orig-s_88) s_806))"
"(let-values(((#%require688_1 req689_1)"
"(let-values(((s_807)(if(syntax?$1 s_806)(syntax-e$1 s_806) s_806)))"
"(if(pair? s_807)"
"(let-values(((#%require690_0)"
"(let-values(((s_808)(car s_807))) s_808))"
"((req691_0)"
"(let-values(((s_809)(cdr s_807)))"
"(let-values(((s_810)"
"(if(syntax?$1 s_809)"
"(syntax-e$1 s_809)"
" s_809)))"
"(if(pair? s_810)"
"(let-values(((req692_0)"
"(let-values(((s_811)"
"(car s_810)))"
" s_811))"
"(()"
"(let-values(((s_812)"
"(cdr s_810)))"
"(let-values(((s_813)"
"(if(syntax?$1"
" s_812)"
"(syntax-e$1"
" s_812)"
" s_812)))"
"(if(null? s_813)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_88))))))"
"(values req692_0))"
"(raise-syntax-error$1"
" #f"
"                                                                         \"bad syntax\""
" orig-s_88))))))"
"(values #%require690_0 req691_0))"
"                                                    (raise-syntax-error$1 #f \"bad syntax\" orig-s_88)))))"
"(values #t #%require688_1 req689_1))))))"
"(let-values(((temp693_0)(list req689_0))"
"((s694_0) s_805)"
"((self695_0) self_41)"
"((m-ns696_0) m-ns_24)"
"((phase697_0) phase_163)"
"((phase698_0) phase_163)"
"((requires+provides699_0) requires+provides_13)"
"((declared-submodule-names700_0) declared-submodule-names_10)"
"((temp701_0) 'require))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" declared-submodule-names700_0"
" #t"
" #f"
" #f"
" phase698_0"
" #t"
" #f"
" #f"
" self695_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp701_0"
" temp693_0"
" s694_0"
" m-ns696_0"
" phase697_0"
" requires+provides699_0)))))))))))"
"(define-values"
"(as-expand-time-top-level-bindings)"
"(lambda(ids_48 s_10 ctx_114)"
"(let-values(((top-level-bind-scope_6)(root-expand-context-top-level-bind-scope ctx_114)))"
"(let-values(((tl-ids_2)"
"(let-values(((lst_6) ids_48))"
"(begin"
"(check-list lst_6)"
"((letrec-values(((for-loop_95)"
"(lambda(lst_425)"
"(if(pair? lst_425)"
"(let-values(((id_0)(unsafe-car lst_425))"
"((rest_248)(unsafe-cdr lst_425)))"
"(let-values(((post-guard-var_116)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_111)"
"(let-values()"
"(let-values()"
"(remove-use-site-scopes id_0 ctx_114)))))"
"(let-values(((result_206)"
"(if(post-guard-var_116)"
"(for-loop_95 rest_248)"
" null)))"
"(cons elem_111 result_206))))))"
" null))))"
" for-loop_95)"
" lst_6)))))"
"(let-values((()"
"(begin"
"(let-values(((tl-ids1_0) tl-ids_2)((temp2_7)(expand-context-phase ctx_114))((s3_4) s_10))"
"(check-no-duplicate-ids8.1 #f #f tl-ids1_0 temp2_7 s3_4 #f #f))"
"(values))))"
"(let-values(((tmp-bind-ids_0)"
"(let-values(((lst_236) tl-ids_2))"
"(begin"
"(check-list lst_236)"
"((letrec-values(((for-loop_314)"
"(lambda(lst_252)"
"(if(pair? lst_252)"
"(let-values(((id_156)(unsafe-car lst_252))"
"((rest_86)(unsafe-cdr lst_252)))"
"(let-values(((post-guard-var_117)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_112)"
"(let-values()"
"(let-values()"
"(add-scope id_156 top-level-bind-scope_6)))))"
"(let-values(((result_207)"
"(if(post-guard-var_117)"
"(for-loop_314 rest_86)"
" null)))"
"(cons elem_112 result_207))))))"
" null))))"
" for-loop_314)"
" lst_236)))))"
"(values tl-ids_2(select-defined-syms-and-bind!/ctx tmp-bind-ids_0 ctx_114))))))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'define-values"
"(lambda(s_0 ctx_7)"
"(let-values((()"
"(begin"
"(let-values(((obs_133)(expand-context-observer ctx_7)))"
"(if obs_133"
"(let-values()(let-values()(call-expand-observe obs_133 'prim-define-values)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_7) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_0)))"
"(values))))"
"(let-values(((disarmed-s_25)(syntax-disarm$1 s_0)))"
"(let-values(((ok?_25 define-values1_0 id2_1 rhs3_0)"
"(let-values(((s_167) s_0))"
"(let-values(((orig-s_89) s_167))"
"(let-values(((define-values1_1 id2_2 rhs3_1)"
"(let-values(((s_41)(if(syntax?$1 s_167)(syntax-e$1 s_167) s_167)))"
"(if(pair? s_41)"
"(let-values(((define-values4_0)"
"(let-values(((s_452)(car s_41))) s_452))"
"((id5_0 rhs6_0)"
"(let-values(((s_42)(cdr s_41)))"
"(let-values(((s_168)"
"(if(syntax?$1 s_42)"
"(syntax-e$1 s_42)"
" s_42)))"
"(if(pair? s_168)"
"(let-values(((id7_0)"
"(let-values(((s_160)(car s_168)))"
"(let-values(((s_814)"
"(if(syntax?$1 s_160)"
"(syntax-e$1 s_160)"
" s_160)))"
"(let-values(((flat-s_61)"
"(to-syntax-list.1"
" s_814)))"
"(if(not flat-s_61)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                              \"bad syntax\""
" orig-s_89))"
"(let-values()"
"(let-values(((id_157)"
"(let-values(((lst_84)"
" flat-s_61))"
"(begin"
"(check-list"
" lst_84)"
"((letrec-values(((for-loop_98)"
"(lambda(id_158"
" lst_85)"
"(if(pair?"
" lst_85)"
"(let-values(((s_84)"
"(unsafe-car"
" lst_85))"
"((rest_41)"
"(unsafe-cdr"
" lst_85)))"
"(let-values(((id_52)"
"(let-values(((id_159)"
" id_158))"
"(let-values(((id_57)"
"(let-values()"
"(let-values(((id10_1)"
"(let-values()"
"(if(let-values(((or-part_96)"
"(if(syntax?$1"
" s_84)"
"(symbol?"
"(syntax-e$1"
" s_84))"
" #f)))"
"(if or-part_96"
" or-part_96"
"(symbol?"
" s_84)))"
" s_84"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                          \"not an identifier\""
" orig-s_89"
" s_84)))))"
"(cons"
" id10_1"
" id_159)))))"
"(values"
" id_57)))))"
"(if(not"
" #f)"
"(for-loop_98"
" id_52"
" rest_41)"
" id_52)))"
" id_158))))"
" for-loop_98)"
" null"
" lst_84)))))"
"(reverse$1 id_157))))))))"
"((rhs8_0)"
"(let-values(((s_815)(cdr s_168)))"
"(let-values(((s_190)"
"(if(syntax?$1 s_815)"
"(syntax-e$1 s_815)"
" s_815)))"
"(if(pair? s_190)"
"(let-values(((rhs9_0)"
"(let-values(((s_46)"
"(car"
" s_190)))"
" s_46))"
"(()"
"(let-values(((s_191)"
"(cdr"
" s_190)))"
"(let-values(((s_192)"
"(if(syntax?$1"
" s_191)"
"(syntax-e$1"
" s_191)"
" s_191)))"
"(if(null?"
" s_192)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_89))))))"
"(values rhs9_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_89))))))"
"(values id7_0 rhs8_0))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_89))))))"
"(values define-values4_0 id5_0 rhs6_0))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_89)))))"
"(values #t define-values1_1 id2_2 rhs3_1))))))"
"(let-values(((ids_49 syms_27)(as-expand-time-top-level-bindings id2_1 s_0 ctx_7)))"
"(let-values(((exp-rhs_8)"
"(let-values(((temp11_4) rhs3_0)((temp12_6)(as-named-context ctx_7 ids_49)))"
"(expand5.1 #f #f temp11_4 temp12_6))))"
"(if(expand-context-to-parsed? ctx_7)"
"(parsed-define-values19.1 s_0 ids_49 syms_27 exp-rhs_8)"
"(let-values(((s13_0) s_0)((temp14_6)(list define-values1_0 ids_49 exp-rhs_8)))"
"(rebuild66.1 #f #f s13_0 temp14_6))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'define-syntaxes"
"(lambda(s_386 ctx_16)"
"(let-values((()"
"(begin"
"(let-values(((obs_6)(expand-context-observer ctx_16)))"
"(if obs_6"
"(let-values()(let-values()(call-expand-observe obs_6 'prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_134)(expand-context-observer ctx_16)))"
"(if obs_134"
"(let-values()(let-values()(call-expand-observe obs_134 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_16) 'top-level)"
"(void)"
"                             (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_386)))"
"(values))))"
"(let-values(((disarmed-s_26)(syntax-disarm$1 s_386)))"
"(let-values(((ok?_86 define-syntaxes15_0 id16_0 rhs17_0)"
"(let-values(((s_425) disarmed-s_26))"
"(let-values(((orig-s_90) s_425))"
"(let-values(((define-syntaxes15_1 id16_1 rhs17_1)"
"(let-values(((s_21)(if(syntax?$1 s_425)(syntax-e$1 s_425) s_425)))"
"(if(pair? s_21)"
"(let-values(((define-syntaxes18_0)"
"(let-values(((s_24)(car s_21))) s_24))"
"((id19_0 rhs20_0)"
"(let-values(((s_469)(cdr s_21)))"
"(let-values(((s_25)"
"(if(syntax?$1 s_469)"
"(syntax-e$1 s_469)"
" s_469)))"
"(if(pair? s_25)"
"(let-values(((id21_0)"
"(let-values(((s_387)(car s_25)))"
"(let-values(((s_162)"
"(if(syntax?$1"
" s_387)"
"(syntax-e$1"
" s_387)"
" s_387)))"
"(let-values(((flat-s_62)"
"(to-syntax-list.1"
" s_162)))"
"(if(not flat-s_62)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                \"bad syntax\""
" orig-s_90))"
"(let-values()"
"(let-values(((id_54)"
"(let-values(((lst_426)"
" flat-s_62))"
"(begin"
"(check-list"
" lst_426)"
"((letrec-values(((for-loop_315)"
"(lambda(id_160"
" lst_427)"
"(if(pair?"
" lst_427)"
"(let-values(((s_816)"
"(unsafe-car"
" lst_427))"
"((rest_249)"
"(unsafe-cdr"
" lst_427)))"
"(let-values(((id_74)"
"(let-values(((id_94)"
" id_160))"
"(let-values(((id_161)"
"(let-values()"
"(let-values(((id24_1)"
"(let-values()"
"(if(let-values(((or-part_304)"
"(if(syntax?$1"
" s_816)"
"(symbol?"
"(syntax-e$1"
" s_816))"
" #f)))"
"(if or-part_304"
" or-part_304"
"(symbol?"
" s_816)))"
" s_816"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                            \"not an identifier\""
" orig-s_90"
" s_816)))))"
"(cons"
" id24_1"
" id_94)))))"
"(values"
" id_161)))))"
"(if(not"
" #f)"
"(for-loop_315"
" id_74"
" rest_249)"
" id_74)))"
" id_160))))"
" for-loop_315)"
" null"
" lst_426)))))"
"(reverse$1"
" id_54))))))))"
"((rhs22_0)"
"(let-values(((s_817)(cdr s_25)))"
"(let-values(((s_472)"
"(if(syntax?$1"
" s_817)"
"(syntax-e$1"
" s_817)"
" s_817)))"
"(if(pair? s_472)"
"(let-values(((rhs23_2)"
"(let-values(((s_456)"
"(car"
" s_472)))"
" s_456))"
"(()"
"(let-values(((s_71)"
"(cdr"
" s_472)))"
"(let-values(((s_818)"
"(if(syntax?$1"
" s_71)"
"(syntax-e$1"
" s_71)"
" s_71)))"
"(if(null?"
" s_818)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                \"bad syntax\""
" orig-s_90))))))"
"(values rhs23_2))"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_90))))))"
"(values id21_0 rhs22_0))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_90))))))"
"(values define-syntaxes18_0 id19_0 rhs20_0))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_90)))))"
"(values #t define-syntaxes15_1 id16_1 rhs17_1))))))"
"(let-values(((ids_50 syms_28)(as-expand-time-top-level-bindings id16_0 s_386 ctx_16)))"
"(let-values(((exp-rhs_9)"
"(let-values(((temp25_6) rhs17_0)((temp26_5)(as-named-context ctx_16 ids_50)))"
"(expand-transformer43.1 #f #f #f #f #f #f #f #f #f #f temp25_6 temp26_5))))"
"(if(expand-context-to-parsed? ctx_16)"
"(parsed-define-syntaxes20.1 s_386 ids_50 syms_28 exp-rhs_9)"
"(let-values(((s27_2) s_386)((temp28_5)(list define-syntaxes15_0 ids_50 exp-rhs_9)))"
"(rebuild66.1 #f #f s27_2 temp28_5)))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin-for-syntax"
"     (lambda (s_193 ctx_115) (raise-syntax-error$1 #f \"not allowed in an expression position\" s_193))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%require"
"(lambda(s_687 ctx_116)"
"(let-values((()"
"(begin"
"(let-values(((obs_16)(expand-context-observer ctx_116)))"
"(if obs_16(let-values()(let-values()(call-expand-observe obs_16 'prim-require)))(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_116) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"allowed only in a module or the top level\" s_687)))"
"(values))))"
"(let-values(((disarmed-s_27)(syntax-disarm$1 s_687)))"
"(let-values(((ok?_87 #%require29_0 req30_0)"
"(let-values(((s_457) disarmed-s_27))"
"(let-values(((orig-s_36) s_457))"
"(let-values(((#%require29_1 req30_1)"
"(let-values(((s_819)(if(syntax?$1 s_457)(syntax-e$1 s_457) s_457)))"
"(if(pair? s_819)"
"(let-values(((#%require31_0)"
"(let-values(((s_197)(car s_819))) s_197))"
"((req32_0)"
"(let-values(((s_33)(cdr s_819)))"
"(let-values(((s_448)"
"(if(syntax?$1 s_33)"
"(syntax-e$1 s_33)"
" s_33)))"
"(let-values(((flat-s_63)(to-syntax-list.1 s_448)))"
"(if(not flat-s_63)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_36))"
"(let-values() flat-s_63)))))))"
"(values #%require31_0 req32_0))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_36)))))"
"(values #t #%require29_1 req30_1))))))"
"(let-values(((sc_33)(new-scope 'macro)))"
"(begin"
"(let-values(((temp33_4)"
"(let-values(((lst_273) req30_0))"
"(begin"
"(check-list lst_273)"
"((letrec-values(((for-loop_316)"
"(lambda(lst_48)"
"(if(pair? lst_48)"
"(let-values(((req_20)(unsafe-car lst_48))"
"((rest_169)(unsafe-cdr lst_48)))"
"(let-values(((post-guard-var_118)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_113)"
"(let-values()"
"(let-values()"
"(add-scope req_20 sc_33)))))"
"(let-values(((result_208)"
"(if(post-guard-var_118)"
"(for-loop_316 rest_169)"
" null)))"
"(cons elem_113 result_208))))))"
" null))))"
" for-loop_316)"
" lst_273))))"
"((s34_0) s_687)"
"((temp35_4) #f)"
"((temp36_7)(expand-context-namespace ctx_116))"
"((temp37_5)(expand-context-phase ctx_116))"
"((temp38_4)(make-requires+provides #f))"
"((temp39_7) 'require)"
"((temp40_3) #t))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp40_3"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp35_4"
" #t"
" temp39_7"
" temp33_4"
" s34_0"
" temp36_7"
" temp37_5"
" temp38_4))"
"(if(expand-context-to-parsed? ctx_116)(parsed-require23.1 s_687) s_687))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%provide"
"(lambda(s_718 ctx_117)"
"(begin"
"(let-values(((obs_135)(expand-context-observer ctx_117)))"
"(if obs_135(let-values()(let-values()(call-expand-observe obs_135 'prim-provide)))(void)))"
"         (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_718)))))"
" print-values)"
"(define-values(ns)(make-namespace))"
"(call-with-values(lambda()(declare-core-module! ns)) print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp1_3) '#%read)((read-primitives2_0) read-primitives)((ns3_1) ns))"
"(declare-hash-based-module!41.1 ns3_1 #f #f #f #f #f #f #f #f temp1_3 read-primitives2_0)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp4_9) '#%main)((main-primitives5_0) main-primitives)((ns6_1) ns))"
"(declare-hash-based-module!41.1 ns6_1 #f #f #f #f #f #f #f #f temp4_9 main-primitives5_0)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp7_4) '#%utils)((utils-primitives8_0) utils-primitives)((ns9_0) ns))"
"(declare-hash-based-module!41.1 ns9_0 #f #f #f #f #f #f #f #f temp7_4 utils-primitives8_0)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp10_6) '#%place-struct)"
"((place-struct-primitives11_0) place-struct-primitives)"
"((ns12_1) ns)"
"((temp13_3) '(dynamic-place)))"
"(declare-hash-based-module!41.1 ns12_1 #f #f temp13_3 #t #f #f #f #f temp10_6 place-struct-primitives11_0)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp14_7) '#%boot)((boot-primitives15_0) boot-primitives)((ns16_1) ns))"
"(declare-hash-based-module!41.1 ns16_1 #f #f #f #f #f #f #f #f temp14_7 boot-primitives15_0)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((linklet-primitives_0)"
"(hash-remove(hash-remove linklet-primitives 'variable-reference?) 'variable-reference-constant?)))"
"(let-values(((temp29_4) '#%linklet)"
"((linklet-primitives30_0) linklet-primitives_0)"
"((ns31_4) ns)"
"((temp32_6) #t)"
"((temp33_5) #t))"
"(declare-hash-based-module!41.1 ns31_4 temp32_6 #t #f #f #f #f temp33_5 #t temp29_4 linklet-primitives30_0))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp17_3) '#%expobs)((expobs-primitives18_0) expobs-primitives)((ns19_1) ns)((temp20_4) #t))"
"(declare-hash-based-module!41.1 ns19_1 #f #f #f #f temp20_4 #t #f #f temp17_3 expobs-primitives18_0)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((eval22_0) 1/eval)"
"((temp23_4)"
"(let-values(((ht_70) main-primitives))"
"(begin"
"(check-in-hash-keys ht_70)"
"((letrec-values(((for-loop_76)"
"(lambda(table_92 i_94)"
"(if i_94"
"(let-values(((name_80)(hash-iterate-key ht_70 i_94)))"
"(let-values(((table_166)"
"(let-values(((table_187) table_92))"
"(let-values(((table_188)"
"(let-values()"
"(let-values(((key_63 val_78)"
"(let-values()"
"(values"
"(let-values() name_80)"
" #t))))"
"(hash-set table_187 key_63 val_78)))))"
"(values table_188)))))"
"(if(not #f)"
"(for-loop_76 table_166(hash-iterate-next ht_70 i_94))"
" table_166)))"
" table_92))))"
" for-loop_76)"
" '#hash()"
"(hash-iterate-first ht_70)))))"
"((temp24_12)"
"(let-values(((ht_123) read-primitives))"
"(begin"
"(check-in-hash-keys ht_123)"
"((letrec-values(((for-loop_213)"
"(lambda(table_189 i_183)"
"(if i_183"
"(let-values(((name_81)(hash-iterate-key ht_123 i_183)))"
"(let-values(((table_190)"
"(let-values(((table_96) table_189))"
"(let-values(((table_97)"
"(let-values()"
"(let-values(((key_90 val_79)"
"(let-values()"
"(values"
"(let-values() name_81)"
" #t))))"
"(hash-set table_96 key_90 val_79)))))"
"(values table_97)))))"
"(if(not #f)"
"(for-loop_213 table_190(hash-iterate-next ht_123 i_183))"
" table_190)))"
" table_189))))"
" for-loop_213)"
" '#hash()"
"(hash-iterate-first ht_123))))))"
"(declare-kernel-module!8.1 eval22_0 temp23_4 temp24_12 ns)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((lst_251) runtime-instances))"
"(begin"
"(check-list lst_251)"
"((letrec-values(((for-loop_267)"
"(lambda(lst_23)"
"(if(pair? lst_23)"
"(let-values(((name_82)(unsafe-car lst_23))((rest_163)(unsafe-cdr lst_23)))"
"(let-values((()"
"(let-values()"
"(if(eq? name_82 '#%kernel)"
"(values)"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((ns35_1) ns)"
"((temp36_8)"
"(let-values(((or-part_63)"
"(eq?"
" name_82"
" '#%foreign)))"
"(if or-part_63"
" or-part_63"
"(let-values(((or-part_36)"
"(eq?"
" name_82"
" '#%futures)))"
"(if or-part_36"
" or-part_36"
"(eq?"
" name_82"
" '#%unsafe)))))))"
"(copy-runtime-module!26.1"
" #f"
" #f"
" #f"
" #f"
" ns35_1"
" #f"
" #f"
" temp36_8"
" #t"
" #f"
" #f"
" #f"
" #f"
" name_82)))"
"(values)))))"
"(values)))))))"
"(if(not #f)(for-loop_267 rest_163)(values))))"
"(values)))))"
" for-loop_267)"
" lst_251))))"
" print-values)"
"(call-with-values(lambda()(void)) print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp25_7) '#%builtin)"
"((temp26_6)(list* '#%place-struct '#%utils '#%boot '#%expobs '#%linklet runtime-instances))"
"((ns27_1) ns)"
"((temp28_6) #f))"
"(declare-reexporting-module!50.1 ns27_1 temp28_6 #t temp25_7 temp26_6)))"
" print-values)"
"(call-with-values(lambda()(1/current-namespace ns)) print-values)"
"(call-with-values(lambda()(1/dynamic-require ''#%kernel 0)) print-values)"
"(define-values(datum->kernel-syntax)(lambda(s_386)(1/datum->syntax core-stx s_386))))"
);
