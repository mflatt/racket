  EVAL_ONE_STR(
"(linklet"
"()"
"((1/module-path-index? module-path-index?)"
"(1/identifier-binding identifier-binding)"
"(1/module-declared? module-declared?)"
"(1/bound-identifier=? bound-identifier=?)"
"(1/module-path? module-path?)"
"(seal seal)"
"(1/syntax-shift-phase-level syntax-shift-phase-level)"
"(embedded-load embedded-load)"
"(1/syntax->datum syntax->datum)"
"(1/dynamic-require dynamic-require)"
"(1/namespace-attach-module-declaration namespace-attach-module-declaration)"
"(make-namespace make-namespace)"
"(1/resolved-module-path? resolved-module-path?)"
"(boot boot)"
"(1/current-namespace current-namespace)"
"(expand$1 expand)"
"(1/namespace-mapped-symbols namespace-mapped-symbols)"
"(1/namespace-attach-module namespace-attach-module)"
"(compile-to-linklets compile-to-linklets)"
"(1/module-compiled-indirect-exports module-compiled-indirect-exports)"
"(datum->kernel-syntax datum->kernel-syntax)"
"(identifier? identifier?)"
"(1/syntax-e syntax-e)"
"(1/syntax-debug-info syntax-debug-info)"
"(namespace->instance namespace->instance)"
"(1/namespace-module-identifier namespace-module-identifier)"
"(1/eval eval)"
"(1/namespace-require namespace-require)"
"(maybe-syntax->datum maybe-syntax->datum)"
"(maybe-raise-missing-module maybe-raise-missing-module)"
"(syntax?$1 syntax?)"
"(1/module-compiled-exports module-compiled-exports)"
"(1/module-path-index-join module-path-index-join)"
"(1/read-syntax read-syntax)"
"(syntax-property$1 syntax-property)"
"(1/module->language-info module->language-info)"
"(dynamic-require-reader dynamic-require-reader)"
"(1/namespace-syntax-introduce namespace-syntax-introduce)"
"(1/compile compile)"
"(1/datum->syntax datum->syntax))"
"(void)"
"(define-values"
"(qq-append)"
"  (lambda (a_106 b_107) (if (list? a_106) (append a_106 b_107) (raise-argument-error 'unquote-splicing \"list?\" a_106))))"
"(void)"
"(void)"
"(define-values(call/ec) call-with-escape-continuation)"
"(void)"
"(void)"
" (define-values (bad-list$1) (lambda (who_1 orig-l_2) (raise-mismatch-error who_1 \"not a proper list: \" orig-l_2)))"
"(define-values"
"(memq memv member)"
"(let-values()"
"(let-values()"
"(values"
"(let-values(((memq_12)"
"(lambda(v_13 orig-l_14)"
"((letrec-values(((loop_15)"
"(lambda(ls_16)"
"(if(null? ls_16)"
"(let-values() #f)"
"(if(not(pair? ls_16))"
"(let-values()(bad-list$1 'memq orig-l_14))"
"(if(eq? v_13(car ls_16))"
"(let-values() ls_16)"
"(let-values()(loop_15(cdr ls_16)))))))))"
" loop_15)"
" orig-l_14))))"
" memq_12)"
"(let-values(((memv_17)"
"(lambda(v_18 orig-l_19)"
"((letrec-values(((loop_20)"
"(lambda(ls_21)"
"(if(null? ls_21)"
"(let-values() #f)"
"(if(not(pair? ls_21))"
"(let-values()(bad-list$1 'memv orig-l_19))"
"(if(eqv? v_18(car ls_21))"
"(let-values() ls_21)"
"(let-values()(loop_20(cdr ls_21)))))))))"
" loop_20)"
" orig-l_19))))"
" memv_17)"
"(let-values(((default_22)"
"(let-values(((member_23)"
"(lambda(v_24 orig-l_25)"
"((letrec-values(((loop_26)"
"(lambda(ls_27)"
"(if(null? ls_27)"
"(let-values() #f)"
"(if(not(pair? ls_27))"
"(let-values()(bad-list$1 'member orig-l_25))"
"(if(equal? v_24(car ls_27))"
"(let-values() ls_27)"
"(let-values()(loop_26(cdr ls_27)))))))))"
" loop_26)"
" orig-l_25))))"
" member_23)))"
"(let-values(((member_28)"
"(case-lambda"
"((v_29 orig-l_30)(default_22 v_29 orig-l_30))"
"((v_31 orig-l_32 eq?_33)"
"(begin"
"(if(if(procedure? eq?_33)(procedure-arity-includes? eq?_33 2) #f)"
"(void)"
"                             (raise-argument-error 'member \"(procedure-arity-includes/c 2)\" eq?_33))"
"((let-values(((member_34)"
"(lambda(v_35 orig-l_36)"
"((letrec-values(((loop_37)"
"(lambda(ls_38)"
"(if(null? ls_38)"
"(let-values() #f)"
"(if(not(pair? ls_38))"
"(let-values()(bad-list$1 'member orig-l_36))"
"(if(eq?_33 v_35(car ls_38))"
"(let-values() ls_38)"
"(let-values()(loop_37(cdr ls_38)))))))))"
" loop_37)"
" orig-l_36))))"
" member_34)"
" v_31"
" orig-l_32))))))"
" member_28))))))"
"(void)"
"(void)"
"(define-values"
"(call-with-exception-handler)"
"(lambda(exnh_455 thunk_456)(begin0(with-continuation-mark exception-handler-key exnh_455(thunk_456))(void))))"
"(define-values"
"(hash-update hash-update! hash-has-key? hash-ref!)"
"(let-values(((not-there_457)(gensym)))"
"(let-values(((up_458)"
"(lambda(who_459 mut?_460 set_461 ht_462 key_463 xform_464 default_465)"
"(begin"
"(if(if(hash? ht_462)(if mut?_460(not(immutable? ht_462))(immutable? ht_462)) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_459"
"                           (if mut?_460 \"(and/c hash? (not/c immutable?))\" \"(and/c hash? immutable?)\")"
" ht_462)))"
"(if(if(procedure? xform_464)(procedure-arity-includes? xform_464 1) #f)"
"(void)"
"                        (let-values () (raise-argument-error who_459 \"(any/c . -> . any/c)\" xform_464)))"
"(let-values(((v_466)(hash-ref ht_462 key_463 default_465)))"
"(if(eq? v_466 not-there_457)"
"                          (raise-mismatch-error who_459 \"no value found for key: \" key_463)"
"(set_461 ht_462 key_463(xform_464 v_466))))))))"
"(let-values(((hash-update_467)"
"(case-lambda"
"((ht_471 key_472 xform_473 default_474)"
"(up_458 'hash-update #f hash-set ht_471 key_472 xform_473 default_474))"
"((ht_475 key_476 xform_477)(hash-update ht_475 key_476 xform_477 not-there_457))))"
"((hash-update!_468)"
"(case-lambda"
"((ht_478 key_479 xform_480 default_481)"
"(up_458 'hash-update! #t hash-set! ht_478 key_479 xform_480 default_481))"
"((ht_482 key_483 xform_484)(hash-update! ht_482 key_483 xform_484 not-there_457))))"
"((hash-has-key?_469)"
"(lambda(ht_485 key_486)"
"(begin"
"(if(hash? ht_485)"
"(void)"
"                          (let-values () (raise-argument-error 'hash-has-key? \"hash?\" 0 ht_485 key_486)))"
"(not(eq? not-there_457(hash-ref ht_485 key_486 not-there_457))))))"
"((hash-ref!_470)"
"(lambda(ht_487 key_488 new_489)"
"(begin"
"(if(if(hash? ht_487)(not(immutable? ht_487)) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'hash-ref!"
"                             \"(and/c hash? (not/c immutable?))\""
" 0"
" ht_487"
" key_488"
" new_489)))"
"(let-values(((v_490)(hash-ref ht_487 key_488 not-there_457)))"
"(if(eq? not-there_457 v_490)"
"(let-values(((n_491)(if(procedure? new_489)(new_489) new_489)))"
"(begin(hash-set! ht_487 key_488 n_491) n_491))"
" v_490))))))"
"(values hash-update_467 hash-update!_468 hash-has-key?_469 hash-ref!_470)))))"
"(void)"
"(void)"
"(define-values"
"(path-string?)"
"(lambda(s_1)"
"(let-values(((or-part_2)(path? s_1)))"
"(if or-part_2"
" or-part_2"
"(if(string? s_1)"
"(let-values(((or-part_3)(relative-path? s_1)))(if or-part_3 or-part_3(absolute-path? s_1)))"
" #f)))))"
"(define-values(bsbs)(string '#\\\\ '#\\\\))"
"(define-values"
"(normal-case-path)"
"(lambda(s_4)"
"(begin"
"(if(let-values(((or-part_5)(path-for-some-system? s_4)))(if or-part_5 or-part_5(path-string? s_4)))"
"(void)"
"        (let-values () (raise-argument-error 'normal-path-case \"(or/c path-for-some-system? path-string?)\" s_4)))"
"(if(if(path-for-some-system? s_4)(eq?(path-convention-type s_4) 'windows)(eq?(system-type) 'windows))"
"(let-values()"
"(let-values(((str_6)(if(string? s_4) s_4(bytes->string/locale(path->bytes s_4)))))"
"            (if (regexp-match? '#rx\"^[\\\\][\\\\][?][\\\\]\" str_6)"
"(if(string? s_4)(string->path s_4) s_4)"
"(let-values(((s_7)(string-locale-downcase str_6)))"
"(bytes->path"
"(string->bytes/locale"
"(regexp-replace*"
"                   '#rx\"/\""
"                   (if (regexp-match? '#rx\"[/\\\\][. ]+[/\\\\]*$\" s_7) s_7 (regexp-replace* '#rx\"[ .]+([/\\\\]*)$\" s_7 \"\\\\1\"))"
" bsbs))"
" 'windows)))))"
"(if(string? s_4)(let-values()(string->path s_4))(let-values() s_4))))))"
"(define-values"
"(check-extension-call)"
"(lambda(s_8 sfx_9 who_10)"
"(begin"
"(if(let-values(((or-part_11)(path-for-some-system? s_8)))(if or-part_11 or-part_11(path-string? s_8)))"
"(void)"
"        (let-values () (raise-argument-error who_10 \"(or/c path-for-some-system? path-string?)\" 0 s_8 sfx_9)))"
"(if(let-values(((or-part_12)(string? sfx_9)))(if or-part_12 or-part_12(bytes? sfx_9)))"
"(void)"
"        (let-values () (raise-argument-error who_10 \"(or/c string? bytes?)\" 1 s_8 sfx_9)))"
"(let-values(((base_13 name_14 dir?_15)(split-path s_8)))"
"(begin"
"(if(not base_13)"
"            (let-values () (raise-mismatch-error who_10 \"cannot add an extension to a root path: \" s_8))"
"(void))"
"(values base_13 name_14))))))"
"(define-values"
"(path-adjust-extension)"
"(lambda(name_16 sep_17 rest-bytes_18 s_19 sfx_20)"
"(let-values(((base_21 name_22)(check-extension-call s_19 sfx_20 name_16)))"
"(let-values(((bs_23)(path-element->bytes name_22)))"
"(let-values(((finish_24)"
"(lambda(i_25 sep_26 i2_27)"
"(bytes->path-element"
"(bytes-append"
"(subbytes bs_23 0 i_25)"
" sep_26"
"(rest-bytes_18 bs_23 i2_27)"
"(if(string? sfx_20)(string->bytes/locale sfx_20(char->integer '#\\?)) sfx_20))"
"(if(path-for-some-system? s_19)(path-convention-type s_19)(system-path-convention-type))))))"
"(let-values(((new-name_28)"
"(letrec-values(((loop_29)"
"(lambda(i_30)"
"(if(zero? i_30)"
"                                             (finish_24 (bytes-length bs_23) #\"\" (bytes-length bs_23))"
"(let-values(((i_31)(sub1 i_30)))"
"(if(if(not(zero? i_31))"
"(eq?(char->integer '#\\.)(bytes-ref bs_23 i_31))"
" #f)"
"(finish_24 i_31 sep_17(add1 i_31))"
"(loop_29 i_31)))))))"
"(loop_29(bytes-length bs_23)))))"
"(if(path-for-some-system? base_21)(build-path base_21 new-name_28) new-name_28)))))))"
"(define-values"
"(path-replace-extension)"
"  (lambda (s_32 sfx_33) (path-adjust-extension 'path-replace-extension #\"\" (lambda (bs_34 i_35) #\"\") s_32 sfx_33)))"
"(define-values"
"(path-add-extension)"
"  (lambda (s_36 sfx_37) (path-adjust-extension 'path-add-extension #\"_\" subbytes s_36 sfx_37)))"
"(define-values"
"(reroot-path)"
"(lambda(p_38 root_39)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_43)(path-string? p_38)))"
"(if or-part_43 or-part_43(path-for-some-system? p_38)))"
"(void)"
"(let-values()"
"                        (raise-argument-error 'reroot-path \"(or/c path-string? path-for-some-system?)\" 0 p_38 root_39)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_44)(path-string? root_39)))"
"(if or-part_44 or-part_44(path-for-some-system? root_39)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'reroot-path"
"                           \"(or/c path-string? path-for-some-system?)\""
" 1"
" p_38"
" root_39)))"
"(values))))"
"(let-values(((conv_40)"
"(if(path-for-some-system? p_38)(path-convention-type p_38)(system-path-convention-type))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_45)(complete-path? p_38)))"
"(if or-part_45 or-part_45(eq?(system-path-convention-type) conv_40)))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                               \"path is not complete and not the platform's convention\""
"                               \"path\""
" p_38"
"                               \"platform convention type\""
"(system-path-convention-type))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?"
"(if(path-for-some-system? root_39)"
"(path-convention-type root_39)"
"(system-path-convention-type))"
" conv_40)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                                 \"given paths use different conventions\""
"                                 \"path\""
" p_38"
"                                 \"root path\""
" root_39)))"
"(values))))"
"(let-values(((c-p_41)"
"(normal-case-path"
"(cleanse-path(if(complete-path? p_38) p_38(path->complete-path p_38))))))"
"(let-values(((bstr_42)(path->bytes c-p_41)))"
"(if(eq? conv_40 'unix)"
"(let-values()"
"                      (if (bytes=? bstr_42 #\"/\")"
"(if(path-for-some-system? root_39) root_39(string->path root_39))"
"(build-path root_39(bytes->path(subbytes(path->bytes c-p_41) 1) conv_40))))"
"(if(eq? conv_40 'windows)"
"(let-values()"
"(build-path"
" root_39"
"(bytes->path"
"                          (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\[a-z]:\" bstr_42)"
"(let-values()"
"                              (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4 5) #\"\\\\\" (subbytes bstr_42 6)))"
"                            (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_42)"
"                              (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4)))"
"                              (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_42)"
"                                (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4)))"
"                                (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\\" bstr_42)"
"                                  (let-values () (bytes-append #\"UNC\\\\\" (subbytes bstr_42 2)))"
"                                  (if (regexp-match? '#rx\"^[a-z]:\" bstr_42)"
"(let-values()(bytes-append(subbytes bstr_42 0 1)(subbytes bstr_42 2)))"
"(void))))))"
" conv_40)))"
"(void))))))))))))"
"(void)"
"(void)"
"(define-values"
"(path-list-string->path-list)"
"(let-values(((r_1)"
"(byte-regexp"
"(string->bytes/utf-8"
"                  (let-values (((sep_3) (if (eq? (system-type) 'windows) \";\" \":\")))"
"                    (format \"([^~a]*)~a(.*)\" sep_3 sep_3)))))"
"((cons-path_2)"
"(lambda(default_4 s_5 l_6)"
"                  (let-values (((s_7) (if (eq? (system-type) 'windows) (regexp-replace* '#rx#\"\\\"\" s_5 #\"\") s_5)))"
"                    (if (bytes=? s_7 #\"\") (append default_4 l_6) (cons (bytes->path s_7) l_6))))))"
"(lambda(s_8 default_9)"
"(begin"
"(if(let-values(((or-part_10)(bytes? s_8)))(if or-part_10 or-part_10(string? s_8)))"
"(void)"
"          (let-values () (raise-argument-error 'path-list-string->path-list \"(or/c bytes? string?)\" s_8)))"
"(if(if(list? default_9)(andmap path? default_9) #f)"
"(void)"
"          (let-values () (raise-argument-error 'path-list-string->path-list \"(listof path?)\" default_9)))"
"((letrec-values(((loop_11)"
"(lambda(s_12)"
"(let-values(((m_13)(regexp-match r_1 s_12)))"
"(if m_13"
"(cons-path_2 default_9(cadr m_13)(loop_11(caddr m_13)))"
"(cons-path_2 default_9 s_12 null))))))"
" loop_11)"
"(if(string? s_8)(string->bytes/utf-8 s_8) s_8))))))"
"(void)"
"(void)"
"(define-values"
"(find-executable-path)"
"(case-lambda"
"((program_1 libpath_2 reverse?_3)"
"(begin"
"(if(path-string? program_1)"
"(void)"
"        (let-values () (raise-argument-error 'find-executable-path \"path-string?\" program_1)))"
"(if(let-values(((or-part_4)(not libpath_2)))"
"(if or-part_4 or-part_4(if(path-string? libpath_2)(relative-path? libpath_2) #f)))"
"(void)"
"(let-values()"
"          (raise-argument-error 'find-executable-path \"(or/c #f (and/c path-string? relative-path?))\" libpath_2)))"
"(letrec-values(((found-exec_5)"
"(lambda(exec-name_6)"
"(if libpath_2"
"(let-values(((base_7 name_8 isdir?_9)(split-path exec-name_6)))"
"(let-values(((next_10)"
"(lambda()"
"(let-values(((resolved_11)(resolve-path exec-name_6)))"
"(if(equal? resolved_11 exec-name_6)"
"(let-values() #f)"
"(if(relative-path? resolved_11)"
"(let-values()(found-exec_5(build-path base_7 resolved_11)))"
"(let-values()(found-exec_5 resolved_11))))))))"
"(let-values(((or-part_12)(if reverse?_3(next_10) #f)))"
"(if or-part_12"
" or-part_12"
"(let-values(((or-part_13)"
"(if(path? base_7)"
"(let-values(((lib_14)(build-path base_7 libpath_2)))"
"(if(let-values(((or-part_15)(directory-exists? lib_14)))"
"(if or-part_15 or-part_15(file-exists? lib_14)))"
" lib_14"
" #f))"
" #f)))"
"(if or-part_13 or-part_13(if(not reverse?_3)(next_10) #f)))))))"
" exec-name_6))))"
"(if(if(relative-path? program_1)"
"(let-values(((base_16 name_17 dir?_18)(split-path program_1)))(eq? base_16 'relative))"
" #f)"
"          (let-values (((paths-str_19) (environment-variables-ref (current-environment-variables) #\"PATH\"))"
"((win-add_20)"
"                        (lambda (s_21) (if (eq? (system-type) 'windows) (cons (bytes->path #\".\") s_21) s_21))))"
"((letrec-values(((loop_22)"
"(lambda(paths_23)"
"(if(null? paths_23)"
" #f"
"(let-values(((base_24)(path->complete-path(car paths_23))))"
"(let-values(((name_25)(build-path base_24 program_1)))"
"(if(file-exists? name_25)(found-exec_5 name_25)(loop_22(cdr paths_23)))))))))"
" loop_22)"
"(win-add_20"
"(if paths-str_19(path-list-string->path-list(bytes->string/locale paths-str_19 '#\\?) null) null))))"
"(let-values(((p_26)(path->complete-path program_1)))(if(file-exists? p_26)(found-exec_5 p_26) #f))))))"
"((program_27 libpath_28)(find-executable-path program_27 libpath_28 #f))"
"((program_29)(find-executable-path program_29 #f #f))))"
"(void)"
"(void)"
"(define-values"
"(call-with-default-reading-parameterization)"
"(lambda(thunk_1)"
"(if(if(procedure? thunk_1)(procedure-arity-includes? thunk_1 0) #f)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-case-sensitive"
" #t"
" read-square-bracket-as-paren"
" #t"
" read-curly-brace-as-paren"
" #t"
" read-square-bracket-with-tag"
" #f"
" read-curly-brace-with-tag"
" #f"
" read-accept-box"
" #t"
" read-accept-compiled"
" #f"
" read-accept-bar-quote"
" #t"
" read-accept-graph"
" #t"
" read-decimal-as-inexact"
" #t"
" read-cdot"
" #f"
" read-accept-dot"
" #t"
" read-accept-infix-dot"
" #t"
" read-accept-quasiquote"
" #t"
" read-accept-reader"
" #f"
" read-accept-lang"
" #t"
" current-readtable"
" #f)"
"(let-values()(thunk_1)))"
"      (raise-argument-error 'call-with-default-reading-parameterization \"(procedure-arity-includes/c 0)\" thunk_1))))"
"(void)"
"(void)"
"(void)"
"(void)"
"(define-values(links-cache)(make-weak-hash))"
"(define-values(stamp-prompt-tag)(make-continuation-prompt-tag 'stamp))"
"(define-values"
"(file->stamp)"
"(lambda(path_35 old-stamp_36)"
"(if(if old-stamp_36(if(cdr old-stamp_36)(not(sync/timeout 0(cdr old-stamp_36))) #f) #f)"
"(let-values() old-stamp_36)"
"(let-values()"
"(call-with-continuation-prompt"
"(lambda()"
"(with-continuation-mark"
" exception-handler-key"
"(lambda(exn_37)"
"(abort-current-continuation"
" stamp-prompt-tag"
"(if(exn:fail:filesystem? exn_37)(lambda() #f)(lambda()(raise exn_37)))))"
"(let-values(((dir-evt_38)"
"(if(vector-ref(system-type 'fs-change) 2)"
"((letrec-values(((loop_39)"
"(lambda(path_40)"
"(let-values(((base_41 name_42 dir?_43)(split-path path_40)))"
"(if(path? base_41)"
"(if(directory-exists? base_41)"
"(filesystem-change-evt base_41(lambda() #f))"
"(loop_39 base_41))"
" #f)))))"
" loop_39)"
" path_35)"
" #f)))"
"(if(not(file-exists? path_35))"
"(cons #f dir-evt_38)"
"(let-values(((evt_44)"
"(if(vector-ref(system-type 'fs-change) 2)"
"(filesystem-change-evt path_35(lambda() #f))"
" #f)))"
"(begin"
"(if dir-evt_38(let-values()(filesystem-change-evt-cancel dir-evt_38))(void))"
"(cons"
"(let-values(((p_45)(open-input-file path_35)))"
"(dynamic-wind"
" void"
"(lambda()"
"(let-values(((bstr_46)(read-bytes 8192 p_45)))"
"(if(if(bytes? bstr_46)(>=(bytes-length bstr_46) 8192) #f)"
"(apply"
" bytes-append"
"(cons"
" bstr_46"
"((letrec-values(((loop_47)"
"(lambda()"
"(let-values(((bstr_48)(read-bytes 8192 p_45)))"
"(if(eof-object? bstr_48) null(cons bstr_48(loop_47)))))))"
" loop_47))))"
" bstr_46)))"
"(lambda()(close-input-port p_45))))"
" evt_44)))))))"
" stamp-prompt-tag)))))"
"(define-values"
"(no-file-stamp?)"
"(lambda(a_49)(let-values(((or-part_50)(not a_49)))(if or-part_50 or-part_50(not(car a_49))))))"
"(define-values"
"(get-linked-collections)"
"(lambda(links-path_51)"
"(call-with-escape-continuation"
"(lambda(esc_52)"
"(let-values(((make-handler_53)"
"(lambda(ts_54)"
"(lambda(exn_55)"
"(begin"
"(if(exn:fail? exn_55)"
"(let-values(((l_56)(current-logger)))"
"(if(log-level? l_56 'error)"
"(let-values()"
"(log-message"
" l_56"
" 'error"
"(format"
"                                     \"error reading collection links file ~s: ~a\""
" links-path_51"
"(exn-message exn_55))"
"(current-continuation-marks)))"
"(void)))"
"(void))"
"(if ts_54"
"(let-values()(hash-set! links-cache links-path_51(cons ts_54 '#hasheq())))"
"(void))"
"(if(exn:fail? exn_55)(esc_52(make-hasheq)) exn_55))))))"
"(with-continuation-mark"
" exception-handler-key"
"(make-handler_53 #f)"
"(let-values(((links-stamp+cache_57)(hash-ref links-cache links-path_51 '(#f . #hasheq()))))"
"(let-values(((a-links-stamp_58)(car links-stamp+cache_57)))"
"(let-values(((ts_59)(file->stamp links-path_51 a-links-stamp_58)))"
"(if(not(equal? ts_59 a-links-stamp_58))"
"(with-continuation-mark"
" exception-handler-key"
"(make-handler_53 ts_59)"
"(call-with-default-reading-parameterization"
"(lambda()"
"(let-values(((v_60)"
"(if(no-file-stamp? ts_59)"
" null"
"(let-values(((p_61)(open-input-file links-path_51 'binary)))"
"(dynamic-wind"
" void"
"(lambda()"
"(begin0"
"(read p_61)"
"(if(eof-object?(read p_61))"
"(void)"
"                                               (let-values () (error \"expected a single S-expression\")))))"
"(lambda()(close-input-port p_61)))))))"
"(begin"
"(if(if(list? v_60)"
"(andmap"
"(lambda(p_62)"
"(if(list? p_62)"
"(if(let-values(((or-part_63)(= 2(length p_62))))"
"(if or-part_63 or-part_63(= 3(length p_62))))"
"(if(let-values(((or-part_64)(string?(car p_62))))"
"(if or-part_64"
" or-part_64"
"(let-values(((or-part_65)(eq? 'root(car p_62))))"
"(if or-part_65 or-part_65(eq? 'static-root(car p_62))))))"
"(if(path-string?(cadr p_62))"
"(let-values(((or-part_66)(null?(cddr p_62))))"
"(if or-part_66 or-part_66(regexp?(caddr p_62))))"
" #f)"
" #f)"
" #f)"
" #f))"
" v_60)"
" #f)"
"(void)"
"                            (let-values () (error \"ill-formed content\")))"
"(let-values(((ht_67)(make-hasheq))"
"((dir_68)"
"(let-values(((base_69 name_70 dir?_71)(split-path links-path_51))) base_69)))"
"(begin"
"(for-each"
"(lambda(p_72)"
"(if(let-values(((or-part_73)(null?(cddr p_72))))"
"(if or-part_73 or-part_73(regexp-match?(caddr p_72)(version))))"
"(let-values()"
"(let-values(((dir_74)(simplify-path(path->complete-path(cadr p_72) dir_68))))"
"(if(eq?(car p_72) 'static-root)"
"(let-values()"
"(for-each"
"(lambda(sub_75)"
"(if(directory-exists?(build-path dir_74 sub_75))"
"(let-values()"
"(let-values(((k_76)(string->symbol(path->string sub_75))))"
"(hash-set! ht_67 k_76(cons dir_74(hash-ref ht_67 k_76 null)))))"
"(void)))"
"(directory-list dir_74)))"
"(if(eq?(car p_72) 'root)"
"(let-values()"
"(begin"
"(if(hash-ref ht_67 #f #f)"
"(void)"
"(let-values()(hash-set! ht_67 #f null)))"
"(hash-for-each"
" ht_67"
"(lambda(k_77 v_78)(hash-set! ht_67 k_77(cons dir_74 v_78))))))"
"(let-values()"
"(let-values(((s_79)(string->symbol(car p_72))))"
"(hash-set!"
" ht_67"
" s_79"
"(cons(box dir_74)(hash-ref ht_67 s_79 null)))))))))"
"(void)))"
" v_60)"
"(hash-for-each ht_67(lambda(k_80 v_81)(hash-set! ht_67 k_80(reverse v_81))))"
"(hash-set! links-cache links-path_51(cons ts_59 ht_67))"
" ht_67)))))))"
"(cdr links-stamp+cache_57)))))))))))"
"(define-values"
"(normalize-collection-reference)"
"(lambda(collection_82 collection-path_83)"
"(if(string? collection_82)"
"(let-values()"
"        (let-values (((m_84) (regexp-match-positions '#rx\"/+\" collection_82)))"
"(if m_84"
"(if(=(caar m_84)(sub1(string-length collection_82)))"
"(let-values()(values(substring collection_82 0(caar m_84)) collection-path_83))"
"(let-values()"
"(values"
"(substring collection_82 0(caar m_84))"
"(cons(substring collection_82(cdar m_84)) collection-path_83))))"
"(values collection_82 collection-path_83))))"
"(let-values()"
"(let-values(((base_85 name_86 dir?_87)(split-path collection_82)))"
"(if(eq? base_85 'relative)"
"(values name_86 collection-path_83)"
"(normalize-collection-reference base_85(cons name_86 collection-path_83))))))))"
"(define-values"
"(find-col-file)"
"(lambda(fail_88 collection_89 collection-path_90 file-name_91 check-compiled?_92)"
"(let-values(((collection_93 collection-path_94)(normalize-collection-reference collection_89 collection-path_90)))"
"(let-values(((all-paths_95)"
"(let-values(((sym_96)"
"(string->symbol"
"(if(path? collection_93)(path->string collection_93) collection_93))))"
"((letrec-values(((loop_97)"
"(lambda(l_98)"
"(if(null? l_98)"
"(let-values() null)"
"(if(not(car l_98))"
"(let-values()"
"(append(current-library-collection-paths)(loop_97(cdr l_98))))"
"(if(hash?(car l_98))"
"(let-values()"
"(append"
"(map box(hash-ref(car l_98) sym_96 null))"
"(hash-ref(car l_98) #f null)"
"(loop_97(cdr l_98))))"
"(let-values()"
"(let-values(((ht_99)(get-linked-collections(car l_98))))"
"(append"
"(hash-ref ht_99 sym_96 null)"
"(hash-ref ht_99 #f null)"
"(loop_97(cdr l_98)))))))))))"
" loop_97)"
"(current-library-collection-links)))))"
"(let-values(((done_100)(lambda(p_104)(if file-name_91(build-path p_104 file-name_91) p_104))))"
"(let-values(((*build-path-rep_101)"
"(lambda(p_105 c_106)(if(path? p_105)(build-path p_105 c_106)(unbox p_105)))))"
"(let-values(((*directory-exists?_102)"
"(lambda(orig_107 p_108)(if(path? orig_107)(directory-exists? p_108) #t))))"
"(let-values(((to-string_103)(lambda(p_109)(if(path? p_109)(path->string p_109) p_109))))"
"((letrec-values(((cloop_110)"
"(lambda(paths_111 found-col_112)"
"(if(null? paths_111)"
"(if found-col_112"
"(done_100 found-col_112)"
"(let-values(((rest-coll_113)"
"(if(null? collection-path_94)"
"                                                        \"\""
"(apply"
" string-append"
"((letrec-values(((loop_114)"
"(lambda(cp_115)"
"(if(null?(cdr cp_115))"
"(list(to-string_103(car cp_115)))"
"(list*"
"(to-string_103(car cp_115))"
"                                                                                \"/\""
"(loop_114(cdr cp_115)))))))"
" loop_114)"
" collection-path_94)))))"
"(letrec-values(((filter_116)"
"(lambda(f_117 l_118)"
"(if(null? l_118)"
" null"
"(if(f_117(car l_118))"
"(cons(car l_118)(filter_116 f_117(cdr l_118)))"
"(filter_116 f_117(cdr l_118)))))))"
"(fail_88"
"(format"
"                                              \"collection not found\\n  collection: ~s\\n  in collection directories:~a~a\""
"(if(null? collection-path_94)"
"(to-string_103 collection_93)"
"                                                (string-append (to-string_103 collection_93) \"/\" rest-coll_113))"
"(apply"
" string-append"
"(map"
"                                                (lambda (p_119) (format \"\\n ~a ~a\" \" \" p_119))"
"(let-values(((len_120)(length all-paths_95))"
"((clen_121)(length(current-library-collection-paths))))"
"(if(<(- len_120 clen_121) 5)"
" all-paths_95"
"(append"
"(current-library-collection-paths)"
"(list"
"(format"
"                                                       \"... [~a additional linked and package directories]\""
"(- len_120 clen_121))))))))"
"(if(ormap box? all-paths_95)"
"(format"
"                                                 \"\\n   sub-collection: ~s\\n  in parent directories:~a\""
" rest-coll_113"
"(apply"
" string-append"
"(map"
"                                                   (lambda (p_122) (format \"\\n   ~a\" (unbox p_122)))"
"(filter_116 box? all-paths_95))))"
"                                                \"\"))))))"
"(let-values(((dir_123)(*build-path-rep_101(car paths_111) collection_93)))"
"(if(*directory-exists?_102(car paths_111) dir_123)"
"(let-values(((cpath_124)(apply build-path dir_123 collection-path_94)))"
"(if(if(null? collection-path_94) #t(directory-exists? cpath_124))"
"(if file-name_91"
"(if(let-values(((or-part_125)"
"(file-exists?/maybe-compiled"
" cpath_124"
" file-name_91"
" check-compiled?_92)))"
"(if or-part_125"
" or-part_125"
"(let-values(((alt-file-name_126)"
"(let-values(((file-name_127)"
"(if(path? file-name_91)"
"(path->string file-name_91)"
" file-name_91)))"
"(let-values(((len_128)"
"(string-length file-name_127)))"
"(if(>= len_128 4)"
"(if(string=?"
"                                                                                 \".rkt\""
"(substring"
" file-name_127"
"(- len_128 4)))"
"(string-append"
"(substring file-name_127 0(- len_128 4))"
"                                                                               \".ss\")"
" #f)"
" #f)))))"
"(if alt-file-name_126"
"(file-exists?/maybe-compiled"
" cpath_124"
" alt-file-name_126"
" check-compiled?_92)"
" #f))))"
"(done_100 cpath_124)"
"(cloop_110"
"(cdr paths_111)"
"(let-values()(if or-part_129 or-part_129 cpath_124))))"
"(done_100 cpath_124))"
"(cloop_110(cdr paths_111) found-col_112)))"
"(cloop_110(cdr paths_111) found-col_112)))))))"
" cloop_110)"
" all-paths_95"
" #f)))))))))"
"(define-values"
"(file-exists?/maybe-compiled)"
"(lambda(dir_130 path_131 check-compiled?_132)"
"(let-values(((or-part_133)(file-exists?(build-path dir_130 path_131))))"
"(if or-part_133"
" or-part_133"
"(if check-compiled?_132"
"          (let-values (((try-path_134) (path-add-extension path_131 #\".zo\"))"
"((modes_135)(use-compiled-file-paths))"
"((roots_136)(current-compiled-file-roots)))"
"(ormap"
"(lambda(d_137)"
"(ormap"
"(lambda(mode_138)"
"(file-exists?"
"(let-values(((p_139)(build-path dir_130 mode_138 try-path_134)))"
"(if(eq? d_137 'same)"
"(let-values() p_139)"
"(if(relative-path? d_137)"
"(let-values()(build-path p_139 d_137))"
"(let-values()(reroot-path p_139 d_137)))))))"
" modes_135))"
" roots_136))"
" #f)))))"
"(void)"
"(void)"
"(define-values"
"(embedded-load)"
"(lambda(start_2 end_3 str_4)"
"(let-values(((s_5)"
"(if str_4"
" str_4"
"(let-values(((sp_6)(find-system-path 'exec-file)))"
"(let-values(((exe_7)(find-executable-path sp_6 #f)))"
"(let-values(((start_8)"
"(let-values(((or-part_9)(string->number start_2)))(if or-part_9 or-part_9 0))))"
"(let-values(((end_10)"
"(let-values(((or-part_11)(string->number end_3)))"
"(if or-part_11 or-part_11 0))))"
"(with-input-from-file"
" exe_7"
"(lambda()"
"(begin"
"(file-position(current-input-port) start_8)"
"(read-bytes(max 0(- end_10 start_8)))))))))))))"
"(let-values(((p_12)(open-input-bytes s_5)))"
"((letrec-values(((loop_13)"
"(lambda()"
"(let-values(((e_14)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-compiled"
" #t"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t"
" read-on-demand-source"
" #t)"
"(let-values()(read p_12)))))"
"(if(eof-object? e_14)(void)(let-values()(begin((current-eval) e_14)(loop_13))))))))"
" loop_13))))))"
"(void)"
"(void)"
"(define-values"
"(prop:keyword-impersonator keyword-impersonator? keyword-impersonator-ref)"
"(make-struct-type-property 'keyword-impersonator))"
"(define-values"
"(keyword-procedure-impersonator-of)"
"(lambda(v_1556)"
"(if(keyword-impersonator? v_1556)(let-values()((keyword-impersonator-ref v_1556) v_1556))(let-values() #f))))"
"(define-values"
"(struct:keyword-procedure mk-kw-proc keyword-procedure? keyword-procedure-ref keyword-procedure-set!)"
"(make-struct-type"
" 'keyword-procedure"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:checked-procedure #t)(cons prop:impersonator-of keyword-procedure-impersonator-of))"
"(current-inspector)"
" #f"
" '(0 1 2 3)))"
"(define-values(keyword-procedure-checker)(make-struct-field-accessor keyword-procedure-ref 0))"
"(define-values(keyword-procedure-proc)(make-struct-field-accessor keyword-procedure-ref 1))"
"(define-values(keyword-procedure-required)(make-struct-field-accessor keyword-procedure-ref 2))"
"(define-values(keyword-procedure-allowed)(make-struct-field-accessor keyword-procedure-ref 3))"
"(define-values"
"(struct:keyword-method make-km keyword-method? km-ref km-set!)"
"(make-struct-type 'procedure struct:keyword-procedure 0 0 #f(list(cons prop:method-arity-error #t))))"
"(define-values"
"(generate-arity-string)"
"(lambda(proc_1557)"
"(let-values(((req_1558 allowed_1559)(procedure-keywords proc_1557))"
"((a_1560)(procedure-arity proc_1557))"
"((keywords-desc_1561)"
"(lambda(opt_1563 req_1564)"
"(format"
"                     \"~a with keyword~a~a\""
"                     (if (null? (cdr req_1564)) (format \"an ~aargument\" opt_1563) (format \"~aarguments\" opt_1563))"
"                     (if (null? (cdr req_1564)) \"\" \"s\")"
"(let-values(((tmp_1565)(length req_1564)))"
"(if(equal? tmp_1565 1)"
"                         (let-values () (format \" ~a\" (car req_1564)))"
"(if(equal? tmp_1565 2)"
"                           (let-values () (format \" ~a and ~a\" (car req_1564) (cadr req_1564)))"
"(let-values()"
"((letrec-values(((loop_1566)"
"(lambda(req_1567)"
"(if(null?(cdr req_1567))"
"                                                   (format \" and ~a\" (car req_1567))"
"                                                   (format \" ~a,~a\" (car req_1567) (loop_1566 (cdr req_1567)))))))"
" loop_1566)"
" req_1564))))))))"
"((method-adjust_1562)"
"(lambda(a_1568)"
"(if(let-values(((or-part_1569)(okm? proc_1557)))"
"(if or-part_1569 or-part_1569(keyword-method? proc_1557)))"
"(if(zero? a_1568) 0(sub1 a_1568))"
" a_1568))))"
"(string-append"
"(if(number? a_1560)"
"         (let-values () (let-values (((a_1570) (method-adjust_1562 a_1560))) (format \"~a\" a_1570)))"
"(if(arity-at-least? a_1560)"
"(let-values()"
"             (let-values (((a_1571) (method-adjust_1562 (arity-at-least-value a_1560)))) (format \"at least ~a\" a_1571)))"
"           (let-values () \"a different number\")))"
"       (if (null? req_1558) \"\" (format \" plus ~a\" (keywords-desc_1561 \"\" req_1558)))"
"(if allowed_1559"
"(let-values(((others_1572)"
"((letrec-values(((loop_1573)"
"(lambda(req_1574 allowed_1575)"
"(if(null? req_1574)"
"(let-values() allowed_1575)"
"(if(eq?(car req_1574)(car allowed_1575))"
"(let-values()(loop_1573(cdr req_1574)(cdr allowed_1575)))"
"(let-values()"
"(cons(car allowed_1575)(loop_1573 req_1574(cdr allowed_1575)))))))))"
" loop_1573)"
" req_1558"
" allowed_1559)))"
"           (if (null? others_1572) \"\" (format \" plus ~a\" (keywords-desc_1561 \"optional \" others_1572))))"
"         \" plus arbitrary keyword arguments\")))))"
"(define-values"
"(struct:okp make-optional-keyword-procedure okp? okp-ref okp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-procedure"
" 1"
" 0"
" #f"
"(list(cons prop:arity-string generate-arity-string))"
"(current-inspector)"
" 0))"
"(define-values"
"(struct:okm make-optional-keyword-method okm? okm-ref okm-set!)"
"(make-struct-type 'procedure struct:okp 0 0 #f(list(cons prop:method-arity-error #t))))"
"(define-values"
"(prop:named-keyword-procedure named-keyword-procedure? keyword-procedure-name+fail)"
"(make-struct-type-property 'named-keyword-procedure))"
"(define-values"
"(prop:procedure-accessor procedure-accessor? procedure-accessor-ref)"
"(make-struct-type-property"
" 'procedure"
"(lambda(v_1576 info-l_1577)"
"(if(exact-integer? v_1576)(make-struct-field-accessor(list-ref info-l_1577 3) v_1576) #f))))"
"(define-values"
"(new-prop:procedure new-procedure? new-procedure-ref)"
"(make-struct-type-property 'procedure #f(list(cons prop:procedure values)(cons prop:procedure-accessor values))))"
"(define-values"
"(struct:keyword-procedure-impersonator make-kpp keyword-procedure-impersonator? kpp-ref kpp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-procedure"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1578)(kpp-ref v_1578 0))))))"
"(define-values"
"(struct:keyword-method-impersonator make-kmp keyword-method-impersonator? kmp-ref kmp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-method"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1579)(kmp-ref v_1579 0))))))"
"(define-values"
"(struct:okpp make-optional-keyword-procedure-impersonator okpp? okpp-ref okpp-set!)"
"(make-struct-type"
" 'procedure"
" struct:okp"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1580)(okpp-ref v_1580 0))))))"
"(define-values"
"(struct:okmp make-optional-keyword-method-impersonator okmp? okmp-ref okmp-set!)"
"(make-struct-type"
" 'procedure"
" struct:okp"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1581)(okmp-ref v_1581 0))))))"
"(define-values"
"(struct:keyword-procedure/arity-error make-kp/ae kp/ae? kp/ae-ref kp/ae-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-procedure"
" 0"
" 0"
" #f"
"(list(cons prop:arity-string generate-arity-string)(cons prop:incomplete-arity #t))))"
"(define-values"
"(procedure-keywords)"
"(lambda(p_1613)"
"(if(keyword-procedure? p_1613)"
"(let-values()(values(keyword-procedure-required p_1613)(keyword-procedure-allowed p_1613)))"
"(if(procedure? p_1613)"
"(let-values()"
"(if(new-procedure? p_1613)"
"(let-values(((v_1614)(new-procedure-ref p_1613)))"
"(if(procedure? v_1614)"
"(procedure-keywords v_1614)"
"(let-values(((a_1615)(procedure-accessor-ref p_1613)))"
"(if a_1615(procedure-keywords(a_1615 p_1613))(values null null)))))"
"(values null null)))"
"        (let-values () (raise-argument-error 'procedure-keywords \"procedure?\" p_1613))))))"
"(define-values"
"(missing-kw)"
"(lambda(proc_1616 . args_1617)(apply(keyword-procedure-extract/method null 0 proc_1616 0) null null args_1617)))"
"(define-values"
"(check-kw-args)"
"(lambda(p_1618 kws_1619)"
"((letrec-values(((loop_1620)"
"(lambda(kws_1621 required_1622 allowed_1623)"
"(if(null? kws_1621)"
"(let-values()(if(null? required_1622)(values #f #f)(values(car required_1622) #f)))"
"(if(if(pair? required_1622)(eq?(car required_1622)(car kws_1621)) #f)"
"(let-values()"
"(loop_1620(cdr kws_1621)(cdr required_1622)(if allowed_1623(cdr allowed_1623) #f)))"
"(if(not allowed_1623)"
"(let-values()(loop_1620(cdr kws_1621) required_1622 #f))"
"(if(pair? allowed_1623)"
"(let-values()"
"(if(eq?(car allowed_1623)(car kws_1621))"
"(loop_1620(cdr kws_1621) required_1622(cdr allowed_1623))"
"(loop_1620 kws_1621 required_1622(cdr allowed_1623))))"
"(let-values()(values #f(car kws_1621))))))))))"
" loop_1620)"
" kws_1619"
"(keyword-procedure-required p_1618)"
"(keyword-procedure-allowed p_1618))))"
"(define-values"
"(subset?$1)"
"(lambda(l1_1691 l2_1692)"
"(if(null? l1_1691)"
"(let-values() #t)"
"(if(null? l2_1692)"
"(let-values() #f)"
"(if(eq?(car l1_1691)(car l2_1692))"
"(let-values()(subset?$1(cdr l1_1691)(cdr l2_1692)))"
"(let-values()(subset?$1 l1_1691(cdr l2_1692))))))))"
"(define-values"
"(subsets?)"
"(lambda(l1_1693 l2_1694 l3_1695)"
"(if(null? l1_1693)"
"(let-values()(subset?$1 l2_1694 l3_1695))"
"(if(null? l2_1694)"
"(let-values() #f)"
"(if(null? l3_1695)"
"(let-values() #f)"
"(let-values()"
"(let-values(((v2_1696)(car l2_1694)))"
"(if(eq?(car l1_1693) v2_1696)"
"(let-values()(subsets?(cdr l1_1693)(cdr l2_1694)(cdr l3_1695)))"
"(if(eq? v2_1696(car l3_1695))"
"(let-values()(subsets? l1_1693(cdr l2_1694)(cdr l3_1695)))"
"(let-values()(subsets? l1_1693 l2_1694(cdr l3_1695))))))))))))"
"(define-values"
"(keyword-procedure-extract/method)"
"(lambda(kws_1697 n_1698 p_1699 method-n_1700)"
"(if(if(keyword-procedure? p_1699)((keyword-procedure-checker p_1699) kws_1697 n_1698) #f)"
"(keyword-procedure-proc p_1699)"
"(let-values(((p2_1701)"
"(if(not(keyword-procedure? p_1699))"
"(if(procedure? p_1699)"
"(let-values(((or-part_1702)"
"(if(new-procedure? p_1699)"
"(let-values(((a_1703)(procedure-accessor-ref p_1699)))"
"(if a_1703(a_1703 p_1699) #f))"
" #f)))"
"(if or-part_1702"
" or-part_1702"
"(let-values(((or-part_1704)(procedure-extract-target p_1699)))"
"(if or-part_1704 or-part_1704(if(new-procedure? p_1699) 'method #f)))))"
" #f)"
" #f)))"
"(if p2_1701"
"(if(eq? p2_1701 'method)"
"(let-values(((p3_1705)"
"(keyword-procedure-extract/method"
" kws_1697"
"(add1 n_1698)"
"(new-procedure-ref p_1699)"
"(add1 method-n_1700))))"
"(lambda(kws_1706 kw-args_1707 . args_1708)"
"(apply p3_1705 kws_1706 kw-args_1707(cons p_1699 args_1708))))"
"(keyword-procedure-extract/method kws_1697 n_1698 p2_1701 method-n_1700))"
"(lambda(kws_1709 kw-args_1710 . args_1711)"
"(let-values(((missing-kw_1712 extra-kw_1713)"
"(if(keyword-procedure? p_1699)(check-kw-args p_1699 kws_1709)(values #f(car kws_1709)))))"
"(let-values(((n_1714)"
"(let-values(((method-n_1717)"
"(+"
" method-n_1700"
"(if(let-values(((or-part_1718)(keyword-method? p_1699)))"
"(if or-part_1718 or-part_1718(okm? p_1699)))"
" 1"
" 0))))"
"(if(>= n_1698 method-n_1717)(- n_1698 method-n_1717) n_1698)))"
"((args-str_1715)"
"(if(if(null? args_1711)(null? kws_1709) #f)"
"                              \"\""
"(apply"
" string-append"
"                               \"\\n  arguments...:\""
"(append"
"                                (map (lambda (v_1719) (format \"\\n   ~e\" v_1719)) args_1711)"
"(map"
"                                 (lambda (kw_1720 kw-arg_1721) (format \"\\n   ~a ~e\" kw_1720 kw-arg_1721))"
" kws_1709"
" kw-args_1710)))))"
"((proc-name_1716)"
"(lambda(p_1722)"
"(let-values(((or-part_1723)"
"(if(named-keyword-procedure? p_1722)"
"(car(keyword-procedure-name+fail p_1722))"
" #f)))"
"(if or-part_1723"
" or-part_1723"
"(let-values(((or-part_1724)(object-name p_1722)))"
"(if or-part_1724 or-part_1724 p_1722)))))))"
"(raise"
"(exn:fail:contract"
"(if extra-kw_1713"
"(if(keyword-procedure? p_1699)"
"(format"
"(string-append"
"                        \"application: procedure does not expect an argument with given keyword\\n\""
"                        \"  procedure: ~a\\n\""
"                        \"  given keyword: ~a\""
"                        \"~a\")"
"(proc-name_1716 p_1699)"
" extra-kw_1713"
" args-str_1715)"
"(if(procedure? p_1699)"
"(format"
"(string-append"
"                          \"application: procedure does not accept keyword arguments\\n\""
"                          \"  procedure: ~a\""
"                          \"~a\")"
"(proc-name_1716 p_1699)"
" args-str_1715)"
"(format"
"(string-append"
"                          \"application: not a procedure;\\n\""
"                          \" expected a procedure that can be applied to arguments\\n\""
"                          \"  given: ~e\""
"                          \"~a\")"
" p_1699"
" args-str_1715)))"
"(if missing-kw_1712"
"(format"
"(string-append"
"                        \"application: required keyword argument not supplied\\n\""
"                        \"  procedure: ~a\\n\""
"                        \"  required keyword: ~a\""
"                        \"~a\")"
"(proc-name_1716 p_1699)"
" missing-kw_1712"
" args-str_1715)"
"(format"
"(string-append"
"                        \"application: no case matching ~a non-keyword argument~a\\n\""
"                        \"  procedure: ~a\""
"                        \"~a\")"
"(- n_1714 2)"
"                       (if (= 1 (- n_1714 2)) \"\" \"s\")"
"(proc-name_1716 p_1699)"
" args-str_1715)))"
"(current-continuation-marks)))))))))))"
"(void)"
"(void)"
"(define-values(print-values)(lambda vs_3(begin(for-each(current-print) vs_3)(apply values vs_3))))"
"(void)"
"(void)"
"(define-values"
"(alt-reverse)"
"(if(eval-jit-enabled)"
"(let-values(((reverse_1)"
"(lambda(l_2)"
"(begin"
"                      (if (list? l_2) (void) (raise-argument-error 'reverse \"list?\" l_2))"
"(letrec-values(((loop_3)"
"(lambda(a_4 l_5)(if(null? l_5) a_4(loop_3(cons(car l_5) a_4)(cdr l_5))))))"
"(loop_3 null l_2))))))"
" reverse_1)"
" reverse))"
"(void)"
"(void)"
"(define-values"
"(sort vector-sort vector-sort!)"
"(let-values()"
"(let-values(((precompiled-sorts_49)"
"(let-values(((sorts_119)(make-hasheq)))"
"(let-values()"
"(begin"
"(let-values(((sort-proc_135)"
"(lambda(A_136 n_137)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_177)(unsafe-fxrshift n_137 1)))"
"(let-values(((n/2+_178)(unsafe-fx- n_137 n/2-_177)))"
"(letrec-values(((copying-mergesort_214)"
"(lambda(Alo_215 Blo_216 n_217)"
"(if(unsafe-fx= n_217 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_136"
" Blo_216"
"(unsafe-vector-ref A_136 Alo_215)))"
"(if(unsafe-fx= n_217 2)"
"(let-values()"
"(let-values(((x_218)"
"(unsafe-vector-ref"
" A_136"
" Alo_215))"
"((y_219)"
"(unsafe-vector-ref"
" A_136"
"(unsafe-fx+ Alo_215 1))))"
"(if(unsafe-fl< y_219 x_218)"
"(begin"
"(unsafe-vector-set! A_136 Blo_216 y_219)"
"(unsafe-vector-set!"
" A_136"
"(unsafe-fx+ Blo_216 1)"
" x_218))"
"(begin"
"(unsafe-vector-set! A_136 Blo_216 x_218)"
"(unsafe-vector-set!"
" A_136"
"(unsafe-fx+ Blo_216 1)"
" y_219)))))"
"(if(unsafe-fx< n_217 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_136"
" Blo_216"
"(unsafe-vector-ref A_136 Alo_215))"
"((letrec-values(((iloop_220)"
"(lambda(i_221)"
"(if(unsafe-fx<"
" i_221"
" n_217)"
"(let-values()"
"(let-values(((ref-i_222)"
"(unsafe-vector-ref"
" A_136"
"(unsafe-fx+"
" Alo_215"
" i_221))))"
"((letrec-values(((jloop_223)"
"(lambda(j_224)"
"(let-values(((ref-j-1_225)"
"(unsafe-vector-ref"
" A_136"
"(unsafe-fx-"
" j_224"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_216"
" j_224)"
"(unsafe-fl<"
" ref-i_222"
" ref-j-1_225)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_136"
" j_224"
" ref-j-1_225)"
"(jloop_223"
"(unsafe-fx-"
" j_224"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_136"
" j_224"
" ref-i_222)"
"(iloop_220"
"(unsafe-fx+"
" i_221"
" 1))))))))"
" jloop_223)"
"(unsafe-fx+"
" Blo_216"
" i_221))))"
"(void)))))"
" iloop_220)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_226)"
"(unsafe-fxrshift n_217 1)))"
"(let-values(((n/2+_227)"
"(unsafe-fx- n_217 n/2-_226)))"
"(let-values(((Amid1_228)"
"(unsafe-fx+"
" Alo_215"
" n/2-_226))"
"((Amid2_229)"
"(unsafe-fx+"
" Alo_215"
" n/2+_227))"
"((Bmid1_230)"
"(unsafe-fx+"
" Blo_216"
" n/2-_226)))"
"(begin"
"(copying-mergesort_214"
" Amid1_228"
" Bmid1_230"
" n/2+_227)"
"(copying-mergesort_214"
" Alo_215"
" Amid2_229"
" n/2-_226)"
"(let-values(((b2_231)"
"(unsafe-fx+"
" Blo_216"
" n_217)))"
"((letrec-values(((loop_232)"
"(lambda(a1_233"
" b1_234"
" c1_235)"
"(let-values(((x_236)"
"(unsafe-vector-ref"
" A_136"
" a1_233))"
"((y_237)"
"(unsafe-vector-ref"
" A_136"
" b1_234)))"
"(if(not"
"(unsafe-fl<"
" y_237"
" x_236))"
"(begin"
"(unsafe-vector-set!"
" A_136"
" c1_235"
" x_236)"
"(let-values(((a1_238)"
"(unsafe-fx+"
" a1_233"
" 1))"
"((c1_239)"
"(unsafe-fx+"
" c1_235"
" 1)))"
"(if(unsafe-fx<"
" c1_239"
" b1_234)"
"(let-values()"
"(loop_232"
" a1_238"
" b1_234"
" c1_239))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_136"
" c1_235"
" y_237)"
"(let-values(((b1_240)"
"(unsafe-fx+"
" b1_234"
" 1))"
"((c1_241)"
"(unsafe-fx+"
" c1_235"
" 1)))"
"(if(unsafe-fx<="
" b2_231"
" b1_240)"
"((letrec-values(((loop_242)"
"(lambda(a1_243"
" c1_244)"
"(if(unsafe-fx<"
" c1_244"
" b1_240)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_136"
" c1_244"
"(unsafe-vector-ref"
" A_136"
" a1_243))"
"(loop_242"
"(unsafe-fx+"
" a1_243"
" 1)"
"(unsafe-fx+"
" c1_244"
" 1))))"
"(void)))))"
" loop_242)"
" a1_233"
" c1_241)"
"(loop_232"
" a1_233"
" b1_240"
" c1_241)))))))))"
" loop_232)"
" Amid2_229"
" Bmid1_230"
" Blo_216)))))))))))))"
"(let-values(((Alo_245) 0))"
"(begin"
"(copying-mergesort_214 Amid1_246 B1lo_249 n/2+_178)"
"(if(zero? n/2-_177)"
"(void)"
"(let-values()"
"(copying-mergesort_214 Alo_245 Amid2_247 n/2-_177)))"
"(let-values()"
"((letrec-values(((loop_251)"
"(lambda(a1_252 b1_253 c1_254)"
"(let-values(((x_255)"
"(unsafe-vector-ref"
" A_136"
" a1_252))"
"((y_256)"
"(unsafe-vector-ref"
" A_136"
" b1_253)))"
"(if(unsafe-fl< x_255 y_256)"
"(begin"
"(unsafe-vector-set!"
" A_136"
" c1_254"
" x_255)"
"(let-values(((a1_257)"
"(unsafe-fx+ a1_252 1))"
"((c1_258)"
"(unsafe-fx+ c1_254 1)))"
"(if(unsafe-fx< c1_258 b1_253)"
"(let-values()"
"(loop_251 a1_257 b1_253 c1_258))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_136"
" c1_254"
" y_256)"
"(let-values(((b1_259)"
"(unsafe-fx+ b1_253 1))"
"((c1_260)"
"(unsafe-fx+ c1_254 1)))"
"(if(unsafe-fx<= b2_250 b1_259)"
"((letrec-values(((loop_261)"
"(lambda(a1_262"
" c1_263)"
"(if(unsafe-fx<"
" c1_263"
" b1_259)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_136"
" c1_263"
"(unsafe-vector-ref"
" A_136"
" a1_262))"
"(loop_261"
"(unsafe-fx+"
" a1_262"
" 1)"
"(unsafe-fx+"
" c1_263"
" 1))))"
"(void)))))"
" loop_261)"
" a1_252"
" c1_260)"
"(loop_251"
" a1_252"
" b1_259"
" c1_260)))))))))"
" loop_251)"
" B1lo_249"
" Amid2_247"
" Alo_245))))))))))))"
"(begin"
"(hash-set! sorts_119 unsafe-fl< sort-proc_135)"
"(hash-set! sorts_119 unsafe-fl<= sort-proc_135)))"
"(let-values(((sort-proc_264)"
"(lambda(A_265 n_266)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_306)(unsafe-fxrshift n_266 1)))"
"(let-values(((n/2+_307)(unsafe-fx- n_266 n/2-_306)))"
"(letrec-values(((copying-mergesort_343)"
"(lambda(Alo_344 Blo_345 n_346)"
"(if(unsafe-fx= n_346 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_265"
" Blo_345"
"(unsafe-vector-ref A_265 Alo_344)))"
"(if(unsafe-fx= n_346 2)"
"(let-values()"
"(let-values(((x_347)"
"(unsafe-vector-ref"
" A_265"
" Alo_344))"
"((y_348)"
"(unsafe-vector-ref"
" A_265"
"(unsafe-fx+ Alo_344 1))))"
"(if(unsafe-fl> y_348 x_347)"
"(begin"
"(unsafe-vector-set! A_265 Blo_345 y_348)"
"(unsafe-vector-set!"
" A_265"
"(unsafe-fx+ Blo_345 1)"
" x_347))"
"(begin"
"(unsafe-vector-set! A_265 Blo_345 x_347)"
"(unsafe-vector-set!"
" A_265"
"(unsafe-fx+ Blo_345 1)"
" y_348)))))"
"(if(unsafe-fx< n_346 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_265"
" Blo_345"
"(unsafe-vector-ref A_265 Alo_344))"
"((letrec-values(((iloop_349)"
"(lambda(i_350)"
"(if(unsafe-fx<"
" i_350"
" n_346)"
"(let-values()"
"(let-values(((ref-i_351)"
"(unsafe-vector-ref"
" A_265"
"(unsafe-fx+"
" Alo_344"
" i_350))))"
"((letrec-values(((jloop_352)"
"(lambda(j_353)"
"(let-values(((ref-j-1_354)"
"(unsafe-vector-ref"
" A_265"
"(unsafe-fx-"
" j_353"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_345"
" j_353)"
"(unsafe-fl>"
" ref-i_351"
" ref-j-1_354)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_265"
" j_353"
" ref-j-1_354)"
"(jloop_352"
"(unsafe-fx-"
" j_353"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_265"
" j_353"
" ref-i_351)"
"(iloop_349"
"(unsafe-fx+"
" i_350"
" 1))))))))"
" jloop_352)"
"(unsafe-fx+"
" Blo_345"
" i_350))))"
"(void)))))"
" iloop_349)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_355)"
"(unsafe-fxrshift n_346 1)))"
"(let-values(((n/2+_356)"
"(unsafe-fx- n_346 n/2-_355)))"
"(let-values(((Amid1_357)"
"(unsafe-fx+"
" Alo_344"
" n/2-_355))"
"((Amid2_358)"
"(unsafe-fx+"
" Alo_344"
" n/2+_356))"
"((Bmid1_359)"
"(unsafe-fx+"
" Blo_345"
" n/2-_355)))"
"(begin"
"(copying-mergesort_343"
" Amid1_357"
" Bmid1_359"
" n/2+_356)"
"(copying-mergesort_343"
" Alo_344"
" Amid2_358"
" n/2-_355)"
"(let-values(((b2_360)"
"(unsafe-fx+"
" Blo_345"
" n_346)))"
"((letrec-values(((loop_361)"
"(lambda(a1_362"
" b1_363"
" c1_364)"
"(let-values(((x_365)"
"(unsafe-vector-ref"
" A_265"
" a1_362))"
"((y_366)"
"(unsafe-vector-ref"
" A_265"
" b1_363)))"
"(if(not"
"(unsafe-fl>"
" y_366"
" x_365))"
"(begin"
"(unsafe-vector-set!"
" A_265"
" c1_364"
" x_365)"
"(let-values(((a1_367)"
"(unsafe-fx+"
" a1_362"
" 1))"
"((c1_368)"
"(unsafe-fx+"
" c1_364"
" 1)))"
"(if(unsafe-fx<"
" c1_368"
" b1_363)"
"(let-values()"
"(loop_361"
" a1_367"
" b1_363"
" c1_368))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_265"
" c1_364"
" y_366)"
"(let-values(((b1_369)"
"(unsafe-fx+"
" b1_363"
" 1))"
"((c1_370)"
"(unsafe-fx+"
" c1_364"
" 1)))"
"(if(unsafe-fx<="
" b2_360"
" b1_369)"
"((letrec-values(((loop_371)"
"(lambda(a1_372"
" c1_373)"
"(if(unsafe-fx<"
" c1_373"
" b1_369)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_265"
" c1_373"
"(unsafe-vector-ref"
" A_265"
" a1_372))"
"(loop_371"
"(unsafe-fx+"
" a1_372"
" 1)"
"(unsafe-fx+"
" c1_373"
" 1))))"
"(void)))))"
" loop_371)"
" a1_362"
" c1_370)"
"(loop_361"
" a1_362"
" b1_369"
" c1_370)))))))))"
" loop_361)"
" Amid2_358"
" Bmid1_359"
" Blo_345)))))))))))))"
"(let-values(((Alo_374) 0))"
"(begin"
"(copying-mergesort_343 Amid1_375 B1lo_378 n/2+_307)"
"(if(zero? n/2-_306)"
"(void)"
"(let-values()"
"(copying-mergesort_343 Alo_374 Amid2_376 n/2-_306)))"
"(let-values()"
"((letrec-values(((loop_380)"
"(lambda(a1_381 b1_382 c1_383)"
"(let-values(((x_384)"
"(unsafe-vector-ref"
" A_265"
" a1_381))"
"((y_385)"
"(unsafe-vector-ref"
" A_265"
" b1_382)))"
"(if(unsafe-fl> x_384 y_385)"
"(begin"
"(unsafe-vector-set!"
" A_265"
" c1_383"
" x_384)"
"(let-values(((a1_386)"
"(unsafe-fx+ a1_381 1))"
"((c1_387)"
"(unsafe-fx+ c1_383 1)))"
"(if(unsafe-fx< c1_387 b1_382)"
"(let-values()"
"(loop_380 a1_386 b1_382 c1_387))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_265"
" c1_383"
" y_385)"
"(let-values(((b1_388)"
"(unsafe-fx+ b1_382 1))"
"((c1_389)"
"(unsafe-fx+ c1_383 1)))"
"(if(unsafe-fx<= b2_379 b1_388)"
"((letrec-values(((loop_390)"
"(lambda(a1_391"
" c1_392)"
"(if(unsafe-fx<"
" c1_392"
" b1_388)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_265"
" c1_392"
"(unsafe-vector-ref"
" A_265"
" a1_391))"
"(loop_390"
"(unsafe-fx+"
" a1_391"
" 1)"
"(unsafe-fx+"
" c1_392"
" 1))))"
"(void)))))"
" loop_390)"
" a1_381"
" c1_389)"
"(loop_380"
" a1_381"
" b1_388"
" c1_389)))))))))"
" loop_380)"
" B1lo_378"
" Amid2_376"
" Alo_374))))))))))))"
"(begin"
"(hash-set! sorts_119 unsafe-fl> sort-proc_264)"
"(hash-set! sorts_119 unsafe-fl>= sort-proc_264)))"
"(let-values(((sort-proc_393)"
"(lambda(A_394 n_395)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_435)(unsafe-fxrshift n_395 1)))"
"(let-values(((n/2+_436)(unsafe-fx- n_395 n/2-_435)))"
"(letrec-values(((copying-mergesort_472)"
"(lambda(Alo_473 Blo_474 n_475)"
"(if(unsafe-fx= n_475 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_394"
" Blo_474"
"(unsafe-vector-ref A_394 Alo_473)))"
"(if(unsafe-fx= n_475 2)"
"(let-values()"
"(let-values(((x_476)"
"(unsafe-vector-ref"
" A_394"
" Alo_473))"
"((y_477)"
"(unsafe-vector-ref"
" A_394"
"(unsafe-fx+ Alo_473 1))))"
"(if(unsafe-fx< y_477 x_476)"
"(begin"
"(unsafe-vector-set! A_394 Blo_474 y_477)"
"(unsafe-vector-set!"
" A_394"
"(unsafe-fx+ Blo_474 1)"
" x_476))"
"(begin"
"(unsafe-vector-set! A_394 Blo_474 x_476)"
"(unsafe-vector-set!"
" A_394"
"(unsafe-fx+ Blo_474 1)"
" y_477)))))"
"(if(unsafe-fx< n_475 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_394"
" Blo_474"
"(unsafe-vector-ref A_394 Alo_473))"
"((letrec-values(((iloop_478)"
"(lambda(i_479)"
"(if(unsafe-fx<"
" i_479"
" n_475)"
"(let-values()"
"(let-values(((ref-i_480)"
"(unsafe-vector-ref"
" A_394"
"(unsafe-fx+"
" Alo_473"
" i_479))))"
"((letrec-values(((jloop_481)"
"(lambda(j_482)"
"(let-values(((ref-j-1_483)"
"(unsafe-vector-ref"
" A_394"
"(unsafe-fx-"
" j_482"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_474"
" j_482)"
"(unsafe-fx<"
" ref-i_480"
" ref-j-1_483)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_394"
" j_482"
" ref-j-1_483)"
"(jloop_481"
"(unsafe-fx-"
" j_482"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_394"
" j_482"
" ref-i_480)"
"(iloop_478"
"(unsafe-fx+"
" i_479"
" 1))))))))"
" jloop_481)"
"(unsafe-fx+"
" Blo_474"
" i_479))))"
"(void)))))"
" iloop_478)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_484)"
"(unsafe-fxrshift n_475 1)))"
"(let-values(((n/2+_485)"
"(unsafe-fx- n_475 n/2-_484)))"
"(let-values(((Amid1_486)"
"(unsafe-fx+"
" Alo_473"
" n/2-_484))"
"((Amid2_487)"
"(unsafe-fx+"
" Alo_473"
" n/2+_485))"
"((Bmid1_488)"
"(unsafe-fx+"
" Blo_474"
" n/2-_484)))"
"(begin"
"(copying-mergesort_472"
" Amid1_486"
" Bmid1_488"
" n/2+_485)"
"(copying-mergesort_472"
" Alo_473"
" Amid2_487"
" n/2-_484)"
"(let-values(((b2_489)"
"(unsafe-fx+"
" Blo_474"
" n_475)))"
"((letrec-values(((loop_490)"
"(lambda(a1_491"
" b1_492"
" c1_493)"
"(let-values(((x_494)"
"(unsafe-vector-ref"
" A_394"
" a1_491))"
"((y_495)"
"(unsafe-vector-ref"
" A_394"
" b1_492)))"
"(if(not"
"(unsafe-fx<"
" y_495"
" x_494))"
"(begin"
"(unsafe-vector-set!"
" A_394"
" c1_493"
" x_494)"
"(let-values(((a1_496)"
"(unsafe-fx+"
" a1_491"
" 1))"
"((c1_497)"
"(unsafe-fx+"
" c1_493"
" 1)))"
"(if(unsafe-fx<"
" c1_497"
" b1_492)"
"(let-values()"
"(loop_490"
" a1_496"
" b1_492"
" c1_497))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_394"
" c1_493"
" y_495)"
"(let-values(((b1_498)"
"(unsafe-fx+"
" b1_492"
" 1))"
"((c1_499)"
"(unsafe-fx+"
" c1_493"
" 1)))"
"(if(unsafe-fx<="
" b2_489"
" b1_498)"
"((letrec-values(((loop_500)"
"(lambda(a1_501"
" c1_502)"
"(if(unsafe-fx<"
" c1_502"
" b1_498)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_394"
" c1_502"
"(unsafe-vector-ref"
" A_394"
" a1_501))"
"(loop_500"
"(unsafe-fx+"
" a1_501"
" 1)"
"(unsafe-fx+"
" c1_502"
" 1))))"
"(void)))))"
" loop_500)"
" a1_491"
" c1_499)"
"(loop_490"
" a1_491"
" b1_498"
" c1_499)))))))))"
" loop_490)"
" Amid2_487"
" Bmid1_488"
" Blo_474)))))))))))))"
"(let-values(((Alo_503) 0))"
"(begin"
"(copying-mergesort_472 Amid1_504 B1lo_507 n/2+_436)"
"(if(zero? n/2-_435)"
"(void)"
"(let-values()"
"(copying-mergesort_472 Alo_503 Amid2_505 n/2-_435)))"
"(let-values()"
"((letrec-values(((loop_509)"
"(lambda(a1_510 b1_511 c1_512)"
"(let-values(((x_513)"
"(unsafe-vector-ref"
" A_394"
" a1_510))"
"((y_514)"
"(unsafe-vector-ref"
" A_394"
" b1_511)))"
"(if(unsafe-fx< x_513 y_514)"
"(begin"
"(unsafe-vector-set!"
" A_394"
" c1_512"
" x_513)"
"(let-values(((a1_515)"
"(unsafe-fx+ a1_510 1))"
"((c1_516)"
"(unsafe-fx+ c1_512 1)))"
"(if(unsafe-fx< c1_516 b1_511)"
"(let-values()"
"(loop_509 a1_515 b1_511 c1_516))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_394"
" c1_512"
" y_514)"
"(let-values(((b1_517)"
"(unsafe-fx+ b1_511 1))"
"((c1_518)"
"(unsafe-fx+ c1_512 1)))"
"(if(unsafe-fx<= b2_508 b1_517)"
"((letrec-values(((loop_519)"
"(lambda(a1_520"
" c1_521)"
"(if(unsafe-fx<"
" c1_521"
" b1_517)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_394"
" c1_521"
"(unsafe-vector-ref"
" A_394"
" a1_520))"
"(loop_519"
"(unsafe-fx+"
" a1_520"
" 1)"
"(unsafe-fx+"
" c1_521"
" 1))))"
"(void)))))"
" loop_519)"
" a1_510"
" c1_518)"
"(loop_509"
" a1_510"
" b1_517"
" c1_518)))))))))"
" loop_509)"
" B1lo_507"
" Amid2_505"
" Alo_503))))))))))))"
"(begin"
"(hash-set! sorts_119 unsafe-fx< sort-proc_393)"
"(hash-set! sorts_119 unsafe-fx<= sort-proc_393)))"
"(let-values(((sort-proc_522)"
"(lambda(A_523 n_524)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_564)(unsafe-fxrshift n_524 1)))"
"(let-values(((n/2+_565)(unsafe-fx- n_524 n/2-_564)))"
"(letrec-values(((copying-mergesort_601)"
"(lambda(Alo_602 Blo_603 n_604)"
"(if(unsafe-fx= n_604 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_523"
" Blo_603"
"(unsafe-vector-ref A_523 Alo_602)))"
"(if(unsafe-fx= n_604 2)"
"(let-values()"
"(let-values(((x_605)"
"(unsafe-vector-ref"
" A_523"
" Alo_602))"
"((y_606)"
"(unsafe-vector-ref"
" A_523"
"(unsafe-fx+ Alo_602 1))))"
"(if(unsafe-fx> y_606 x_605)"
"(begin"
"(unsafe-vector-set! A_523 Blo_603 y_606)"
"(unsafe-vector-set!"
" A_523"
"(unsafe-fx+ Blo_603 1)"
" x_605))"
"(begin"
"(unsafe-vector-set! A_523 Blo_603 x_605)"
"(unsafe-vector-set!"
" A_523"
"(unsafe-fx+ Blo_603 1)"
" y_606)))))"
"(if(unsafe-fx< n_604 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_523"
" Blo_603"
"(unsafe-vector-ref A_523 Alo_602))"
"((letrec-values(((iloop_607)"
"(lambda(i_608)"
"(if(unsafe-fx<"
" i_608"
" n_604)"
"(let-values()"
"(let-values(((ref-i_609)"
"(unsafe-vector-ref"
" A_523"
"(unsafe-fx+"
" Alo_602"
" i_608))))"
"((letrec-values(((jloop_610)"
"(lambda(j_611)"
"(let-values(((ref-j-1_612)"
"(unsafe-vector-ref"
" A_523"
"(unsafe-fx-"
" j_611"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_603"
" j_611)"
"(unsafe-fx>"
" ref-i_609"
" ref-j-1_612)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_523"
" j_611"
" ref-j-1_612)"
"(jloop_610"
"(unsafe-fx-"
" j_611"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_523"
" j_611"
" ref-i_609)"
"(iloop_607"
"(unsafe-fx+"
" i_608"
" 1))))))))"
" jloop_610)"
"(unsafe-fx+"
" Blo_603"
" i_608))))"
"(void)))))"
" iloop_607)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_613)"
"(unsafe-fxrshift n_604 1)))"
"(let-values(((n/2+_614)"
"(unsafe-fx- n_604 n/2-_613)))"
"(let-values(((Amid1_615)"
"(unsafe-fx+"
" Alo_602"
" n/2-_613))"
"((Amid2_616)"
"(unsafe-fx+"
" Alo_602"
" n/2+_614))"
"((Bmid1_617)"
"(unsafe-fx+"
" Blo_603"
" n/2-_613)))"
"(begin"
"(copying-mergesort_601"
" Amid1_615"
" Bmid1_617"
" n/2+_614)"
"(copying-mergesort_601"
" Alo_602"
" Amid2_616"
" n/2-_613)"
"(let-values(((b2_618)"
"(unsafe-fx+"
" Blo_603"
" n_604)))"
"((letrec-values(((loop_619)"
"(lambda(a1_620"
" b1_621"
" c1_622)"
"(let-values(((x_623)"
"(unsafe-vector-ref"
" A_523"
" a1_620))"
"((y_624)"
"(unsafe-vector-ref"
" A_523"
" b1_621)))"
"(if(not"
"(unsafe-fx>"
" y_624"
" x_623))"
"(begin"
"(unsafe-vector-set!"
" A_523"
" c1_622"
" x_623)"
"(let-values(((a1_625)"
"(unsafe-fx+"
" a1_620"
" 1))"
"((c1_626)"
"(unsafe-fx+"
" c1_622"
" 1)))"
"(if(unsafe-fx<"
" c1_626"
" b1_621)"
"(let-values()"
"(loop_619"
" a1_625"
" b1_621"
" c1_626))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_523"
" c1_622"
" y_624)"
"(let-values(((b1_627)"
"(unsafe-fx+"
" b1_621"
" 1))"
"((c1_628)"
"(unsafe-fx+"
" c1_622"
" 1)))"
"(if(unsafe-fx<="
" b2_618"
" b1_627)"
"((letrec-values(((loop_629)"
"(lambda(a1_630"
" c1_631)"
"(if(unsafe-fx<"
" c1_631"
" b1_627)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_523"
" c1_631"
"(unsafe-vector-ref"
" A_523"
" a1_630))"
"(loop_629"
"(unsafe-fx+"
" a1_630"
" 1)"
"(unsafe-fx+"
" c1_631"
" 1))))"
"(void)))))"
" loop_629)"
" a1_620"
" c1_628)"
"(loop_619"
" a1_620"
" b1_627"
" c1_628)))))))))"
" loop_619)"
" Amid2_616"
" Bmid1_617"
" Blo_603)))))))))))))"
"(let-values(((Alo_632) 0))"
"(begin"
"(copying-mergesort_601 Amid1_633 B1lo_636 n/2+_565)"
"(if(zero? n/2-_564)"
"(void)"
"(let-values()"
"(copying-mergesort_601 Alo_632 Amid2_634 n/2-_564)))"
"(let-values()"
"((letrec-values(((loop_638)"
"(lambda(a1_639 b1_640 c1_641)"
"(let-values(((x_642)"
"(unsafe-vector-ref"
" A_523"
" a1_639))"
"((y_643)"
"(unsafe-vector-ref"
" A_523"
" b1_640)))"
"(if(unsafe-fx> x_642 y_643)"
"(begin"
"(unsafe-vector-set!"
" A_523"
" c1_641"
" x_642)"
"(let-values(((a1_644)"
"(unsafe-fx+ a1_639 1))"
"((c1_645)"
"(unsafe-fx+ c1_641 1)))"
"(if(unsafe-fx< c1_645 b1_640)"
"(let-values()"
"(loop_638 a1_644 b1_640 c1_645))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_523"
" c1_641"
" y_643)"
"(let-values(((b1_646)"
"(unsafe-fx+ b1_640 1))"
"((c1_647)"
"(unsafe-fx+ c1_641 1)))"
"(if(unsafe-fx<= b2_637 b1_646)"
"((letrec-values(((loop_648)"
"(lambda(a1_649"
" c1_650)"
"(if(unsafe-fx<"
" c1_650"
" b1_646)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_523"
" c1_650"
"(unsafe-vector-ref"
" A_523"
" a1_649))"
"(loop_648"
"(unsafe-fx+"
" a1_649"
" 1)"
"(unsafe-fx+"
" c1_650"
" 1))))"
"(void)))))"
" loop_648)"
" a1_639"
" c1_647)"
"(loop_638"
" a1_639"
" b1_646"
" c1_647)))))))))"
" loop_638)"
" B1lo_636"
" Amid2_634"
" Alo_632))))))))))))"
"(begin"
"(hash-set! sorts_119 unsafe-fx> sort-proc_522)"
"(hash-set! sorts_119 unsafe-fx>= sort-proc_522)))"
"(let-values(((sort-proc_651)"
"(lambda(A_652 n_653)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_693)(unsafe-fxrshift n_653 1)))"
"(let-values(((n/2+_694)(unsafe-fx- n_653 n/2-_693)))"
"(letrec-values(((copying-mergesort_730)"
"(lambda(Alo_731 Blo_732 n_733)"
"(if(unsafe-fx= n_733 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_652"
" Blo_732"
"(unsafe-vector-ref A_652 Alo_731)))"
"(if(unsafe-fx= n_733 2)"
"(let-values()"
"(let-values(((x_734)"
"(unsafe-vector-ref"
" A_652"
" Alo_731))"
"((y_735)"
"(unsafe-vector-ref"
" A_652"
"(unsafe-fx+ Alo_731 1))))"
"(if(< y_735 x_734)"
"(begin"
"(unsafe-vector-set! A_652 Blo_732 y_735)"
"(unsafe-vector-set!"
" A_652"
"(unsafe-fx+ Blo_732 1)"
" x_734))"
"(begin"
"(unsafe-vector-set! A_652 Blo_732 x_734)"
"(unsafe-vector-set!"
" A_652"
"(unsafe-fx+ Blo_732 1)"
" y_735)))))"
"(if(unsafe-fx< n_733 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_652"
" Blo_732"
"(unsafe-vector-ref A_652 Alo_731))"
"((letrec-values(((iloop_736)"
"(lambda(i_737)"
"(if(unsafe-fx<"
" i_737"
" n_733)"
"(let-values()"
"(let-values(((ref-i_738)"
"(unsafe-vector-ref"
" A_652"
"(unsafe-fx+"
" Alo_731"
" i_737))))"
"((letrec-values(((jloop_739)"
"(lambda(j_740)"
"(let-values(((ref-j-1_741)"
"(unsafe-vector-ref"
" A_652"
"(unsafe-fx-"
" j_740"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_732"
" j_740)"
"(<"
" ref-i_738"
" ref-j-1_741)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_652"
" j_740"
" ref-j-1_741)"
"(jloop_739"
"(unsafe-fx-"
" j_740"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_652"
" j_740"
" ref-i_738)"
"(iloop_736"
"(unsafe-fx+"
" i_737"
" 1))))))))"
" jloop_739)"
"(unsafe-fx+"
" Blo_732"
" i_737))))"
"(void)))))"
" iloop_736)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_742)"
"(unsafe-fxrshift n_733 1)))"
"(let-values(((n/2+_743)"
"(unsafe-fx- n_733 n/2-_742)))"
"(let-values(((Amid1_744)"
"(unsafe-fx+"
" Alo_731"
" n/2-_742))"
"((Amid2_745)"
"(unsafe-fx+"
" Alo_731"
" n/2+_743))"
"((Bmid1_746)"
"(unsafe-fx+"
" Blo_732"
" n/2-_742)))"
"(begin"
"(copying-mergesort_730"
" Amid1_744"
" Bmid1_746"
" n/2+_743)"
"(copying-mergesort_730"
" Alo_731"
" Amid2_745"
" n/2-_742)"
"(let-values(((b2_747)"
"(unsafe-fx+"
" Blo_732"
" n_733)))"
"((letrec-values(((loop_748)"
"(lambda(a1_749"
" b1_750"
" c1_751)"
"(let-values(((x_752)"
"(unsafe-vector-ref"
" A_652"
" a1_749))"
"((y_753)"
"(unsafe-vector-ref"
" A_652"
" b1_750)))"
"(if(not"
"(<"
" y_753"
" x_752))"
"(begin"
"(unsafe-vector-set!"
" A_652"
" c1_751"
" x_752)"
"(let-values(((a1_754)"
"(unsafe-fx+"
" a1_749"
" 1))"
"((c1_755)"
"(unsafe-fx+"
" c1_751"
" 1)))"
"(if(unsafe-fx<"
" c1_755"
" b1_750)"
"(let-values()"
"(loop_748"
" a1_754"
" b1_750"
" c1_755))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_652"
" c1_751"
" y_753)"
"(let-values(((b1_756)"
"(unsafe-fx+"
" b1_750"
" 1))"
"((c1_757)"
"(unsafe-fx+"
" c1_751"
" 1)))"
"(if(unsafe-fx<="
" b2_747"
" b1_756)"
"((letrec-values(((loop_758)"
"(lambda(a1_759"
" c1_760)"
"(if(unsafe-fx<"
" c1_760"
" b1_756)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_652"
" c1_760"
"(unsafe-vector-ref"
" A_652"
" a1_759))"
"(loop_758"
"(unsafe-fx+"
" a1_759"
" 1)"
"(unsafe-fx+"
" c1_760"
" 1))))"
"(void)))))"
" loop_758)"
" a1_749"
" c1_757)"
"(loop_748"
" a1_749"
" b1_756"
" c1_757)))))))))"
" loop_748)"
" Amid2_745"
" Bmid1_746"
" Blo_732)))))))))))))"
"(let-values(((Alo_761) 0))"
"(begin"
"(copying-mergesort_730 Amid1_762 B1lo_765 n/2+_694)"
"(if(zero? n/2-_693)"
"(void)"
"(let-values()"
"(copying-mergesort_730 Alo_761 Amid2_763 n/2-_693)))"
"(let-values()"
"((letrec-values(((loop_767)"
"(lambda(a1_768 b1_769 c1_770)"
"(let-values(((x_771)"
"(unsafe-vector-ref"
" A_652"
" a1_768))"
"((y_772)"
"(unsafe-vector-ref"
" A_652"
" b1_769)))"
"(if(< x_771 y_772)"
"(begin"
"(unsafe-vector-set!"
" A_652"
" c1_770"
" x_771)"
"(let-values(((a1_773)"
"(unsafe-fx+ a1_768 1))"
"((c1_774)"
"(unsafe-fx+ c1_770 1)))"
"(if(unsafe-fx< c1_774 b1_769)"
"(let-values()"
"(loop_767 a1_773 b1_769 c1_774))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_652"
" c1_770"
" y_772)"
"(let-values(((b1_775)"
"(unsafe-fx+ b1_769 1))"
"((c1_776)"
"(unsafe-fx+ c1_770 1)))"
"(if(unsafe-fx<= b2_766 b1_775)"
"((letrec-values(((loop_777)"
"(lambda(a1_778"
" c1_779)"
"(if(unsafe-fx<"
" c1_779"
" b1_775)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_652"
" c1_779"
"(unsafe-vector-ref"
" A_652"
" a1_778))"
"(loop_777"
"(unsafe-fx+"
" a1_778"
" 1)"
"(unsafe-fx+"
" c1_779"
" 1))))"
"(void)))))"
" loop_777)"
" a1_768"
" c1_776)"
"(loop_767"
" a1_768"
" b1_775"
" c1_776)))))))))"
" loop_767)"
" B1lo_765"
" Amid2_763"
" Alo_761))))))))))))"
"(begin(hash-set! sorts_119 < sort-proc_651)(hash-set! sorts_119 <= sort-proc_651)))"
"(let-values(((sort-proc_780)"
"(lambda(A_781 n_782)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_822)(unsafe-fxrshift n_782 1)))"
"(let-values(((n/2+_823)(unsafe-fx- n_782 n/2-_822)))"
"(letrec-values(((copying-mergesort_859)"
"(lambda(Alo_860 Blo_861 n_862)"
"(if(unsafe-fx= n_862 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_781"
" Blo_861"
"(unsafe-vector-ref A_781 Alo_860)))"
"(if(unsafe-fx= n_862 2)"
"(let-values()"
"(let-values(((x_863)"
"(unsafe-vector-ref"
" A_781"
" Alo_860))"
"((y_864)"
"(unsafe-vector-ref"
" A_781"
"(unsafe-fx+ Alo_860 1))))"
"(if(> y_864 x_863)"
"(begin"
"(unsafe-vector-set! A_781 Blo_861 y_864)"
"(unsafe-vector-set!"
" A_781"
"(unsafe-fx+ Blo_861 1)"
" x_863))"
"(begin"
"(unsafe-vector-set! A_781 Blo_861 x_863)"
"(unsafe-vector-set!"
" A_781"
"(unsafe-fx+ Blo_861 1)"
" y_864)))))"
"(if(unsafe-fx< n_862 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_781"
" Blo_861"
"(unsafe-vector-ref A_781 Alo_860))"
"((letrec-values(((iloop_865)"
"(lambda(i_866)"
"(if(unsafe-fx<"
" i_866"
" n_862)"
"(let-values()"
"(let-values(((ref-i_867)"
"(unsafe-vector-ref"
" A_781"
"(unsafe-fx+"
" Alo_860"
" i_866))))"
"((letrec-values(((jloop_868)"
"(lambda(j_869)"
"(let-values(((ref-j-1_870)"
"(unsafe-vector-ref"
" A_781"
"(unsafe-fx-"
" j_869"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_861"
" j_869)"
"(>"
" ref-i_867"
" ref-j-1_870)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_781"
" j_869"
" ref-j-1_870)"
"(jloop_868"
"(unsafe-fx-"
" j_869"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_781"
" j_869"
" ref-i_867)"
"(iloop_865"
"(unsafe-fx+"
" i_866"
" 1))))))))"
" jloop_868)"
"(unsafe-fx+"
" Blo_861"
" i_866))))"
"(void)))))"
" iloop_865)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_871)"
"(unsafe-fxrshift n_862 1)))"
"(let-values(((n/2+_872)"
"(unsafe-fx- n_862 n/2-_871)))"
"(let-values(((Amid1_873)"
"(unsafe-fx+"
" Alo_860"
" n/2-_871))"
"((Amid2_874)"
"(unsafe-fx+"
" Alo_860"
" n/2+_872))"
"((Bmid1_875)"
"(unsafe-fx+"
" Blo_861"
" n/2-_871)))"
"(begin"
"(copying-mergesort_859"
" Amid1_873"
" Bmid1_875"
" n/2+_872)"
"(copying-mergesort_859"
" Alo_860"
" Amid2_874"
" n/2-_871)"
"(let-values(((b2_876)"
"(unsafe-fx+"
" Blo_861"
" n_862)))"
"((letrec-values(((loop_877)"
"(lambda(a1_878"
" b1_879"
" c1_880)"
"(let-values(((x_881)"
"(unsafe-vector-ref"
" A_781"
" a1_878))"
"((y_882)"
"(unsafe-vector-ref"
" A_781"
" b1_879)))"
"(if(not"
"(>"
" y_882"
" x_881))"
"(begin"
"(unsafe-vector-set!"
" A_781"
" c1_880"
" x_881)"
"(let-values(((a1_883)"
"(unsafe-fx+"
" a1_878"
" 1))"
"((c1_884)"
"(unsafe-fx+"
" c1_880"
" 1)))"
"(if(unsafe-fx<"
" c1_884"
" b1_879)"
"(let-values()"
"(loop_877"
" a1_883"
" b1_879"
" c1_884))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_781"
" c1_880"
" y_882)"
"(let-values(((b1_885)"
"(unsafe-fx+"
" b1_879"
" 1))"
"((c1_886)"
"(unsafe-fx+"
" c1_880"
" 1)))"
"(if(unsafe-fx<="
" b2_876"
" b1_885)"
"((letrec-values(((loop_887)"
"(lambda(a1_888"
" c1_889)"
"(if(unsafe-fx<"
" c1_889"
" b1_885)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_781"
" c1_889"
"(unsafe-vector-ref"
" A_781"
" a1_888))"
"(loop_887"
"(unsafe-fx+"
" a1_888"
" 1)"
"(unsafe-fx+"
" c1_889"
" 1))))"
"(void)))))"
" loop_887)"
" a1_878"
" c1_886)"
"(loop_877"
" a1_878"
" b1_885"
" c1_886)))))))))"
" loop_877)"
" Amid2_874"
" Bmid1_875"
" Blo_861)))))))))))))"
"(let-values(((Alo_890) 0))"
"(begin"
"(copying-mergesort_859 Amid1_891 B1lo_894 n/2+_823)"
"(if(zero? n/2-_822)"
"(void)"
"(let-values()"
"(copying-mergesort_859 Alo_890 Amid2_892 n/2-_822)))"
"(let-values()"
"((letrec-values(((loop_896)"
"(lambda(a1_897 b1_898 c1_899)"
"(let-values(((x_900)"
"(unsafe-vector-ref"
" A_781"
" a1_897))"
"((y_901)"
"(unsafe-vector-ref"
" A_781"
" b1_898)))"
"(if(> x_900 y_901)"
"(begin"
"(unsafe-vector-set!"
" A_781"
" c1_899"
" x_900)"
"(let-values(((a1_902)"
"(unsafe-fx+ a1_897 1))"
"((c1_903)"
"(unsafe-fx+ c1_899 1)))"
"(if(unsafe-fx< c1_903 b1_898)"
"(let-values()"
"(loop_896 a1_902 b1_898 c1_903))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_781"
" c1_899"
" y_901)"
"(let-values(((b1_904)"
"(unsafe-fx+ b1_898 1))"
"((c1_905)"
"(unsafe-fx+ c1_899 1)))"
"(if(unsafe-fx<= b2_895 b1_904)"
"((letrec-values(((loop_906)"
"(lambda(a1_907"
" c1_908)"
"(if(unsafe-fx<"
" c1_908"
" b1_904)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_781"
" c1_908"
"(unsafe-vector-ref"
" A_781"
" a1_907))"
"(loop_906"
"(unsafe-fx+"
" a1_907"
" 1)"
"(unsafe-fx+"
" c1_908"
" 1))))"
"(void)))))"
" loop_906)"
" a1_897"
" c1_905)"
"(loop_896"
" a1_897"
" b1_904"
" c1_905)))))))))"
" loop_896)"
" B1lo_894"
" Amid2_892"
" Alo_890))))))))))))"
"(begin(hash-set! sorts_119 > sort-proc_780)(hash-set! sorts_119 >= sort-proc_780)))"
"(let-values(((sort-proc_909)"
"(lambda(A_910 n_911)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_951)(unsafe-fxrshift n_911 1)))"
"(let-values(((n/2+_952)(unsafe-fx- n_911 n/2-_951)))"
"(letrec-values(((copying-mergesort_988)"
"(lambda(Alo_989 Blo_990 n_991)"
"(if(unsafe-fx= n_991 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_910"
" Blo_990"
"(unsafe-vector-ref A_910 Alo_989)))"
"(if(unsafe-fx= n_991 2)"
"(let-values()"
"(let-values(((x_992)"
"(unsafe-vector-ref"
" A_910"
" Alo_989))"
"((y_993)"
"(unsafe-vector-ref"
" A_910"
"(unsafe-fx+ Alo_989 1))))"
"(if(string<? y_993 x_992)"
"(begin"
"(unsafe-vector-set! A_910 Blo_990 y_993)"
"(unsafe-vector-set!"
" A_910"
"(unsafe-fx+ Blo_990 1)"
" x_992))"
"(begin"
"(unsafe-vector-set! A_910 Blo_990 x_992)"
"(unsafe-vector-set!"
" A_910"
"(unsafe-fx+ Blo_990 1)"
" y_993)))))"
"(if(unsafe-fx< n_991 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_910"
" Blo_990"
"(unsafe-vector-ref A_910 Alo_989))"
"((letrec-values(((iloop_994)"
"(lambda(i_995)"
"(if(unsafe-fx<"
" i_995"
" n_991)"
"(let-values()"
"(let-values(((ref-i_996)"
"(unsafe-vector-ref"
" A_910"
"(unsafe-fx+"
" Alo_989"
" i_995))))"
"((letrec-values(((jloop_997)"
"(lambda(j_998)"
"(let-values(((ref-j-1_999)"
"(unsafe-vector-ref"
" A_910"
"(unsafe-fx-"
" j_998"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_990"
" j_998)"
"(string<?"
" ref-i_996"
" ref-j-1_999)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_910"
" j_998"
" ref-j-1_999)"
"(jloop_997"
"(unsafe-fx-"
" j_998"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_910"
" j_998"
" ref-i_996)"
"(iloop_994"
"(unsafe-fx+"
" i_995"
" 1))))))))"
" jloop_997)"
"(unsafe-fx+"
" Blo_990"
" i_995))))"
"(void)))))"
" iloop_994)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1000)"
"(unsafe-fxrshift n_991 1)))"
"(let-values(((n/2+_1001)"
"(unsafe-fx-"
" n_991"
" n/2-_1000)))"
"(let-values(((Amid1_1002)"
"(unsafe-fx+"
" Alo_989"
" n/2-_1000))"
"((Amid2_1003)"
"(unsafe-fx+"
" Alo_989"
" n/2+_1001))"
"((Bmid1_1004)"
"(unsafe-fx+"
" Blo_990"
" n/2-_1000)))"
"(begin"
"(copying-mergesort_988"
" Amid1_1002"
" Bmid1_1004"
" n/2+_1001)"
"(copying-mergesort_988"
" Alo_989"
" Amid2_1003"
" n/2-_1000)"
"(let-values(((b2_1005)"
"(unsafe-fx+"
" Blo_990"
" n_991)))"
"((letrec-values(((loop_1006)"
"(lambda(a1_1007"
" b1_1008"
" c1_1009)"
"(let-values(((x_1010)"
"(unsafe-vector-ref"
" A_910"
" a1_1007))"
"((y_1011)"
"(unsafe-vector-ref"
" A_910"
" b1_1008)))"
"(if(not"
"(string<?"
" y_1011"
" x_1010))"
"(begin"
"(unsafe-vector-set!"
" A_910"
" c1_1009"
" x_1010)"
"(let-values(((a1_1012)"
"(unsafe-fx+"
" a1_1007"
" 1))"
"((c1_1013)"
"(unsafe-fx+"
" c1_1009"
" 1)))"
"(if(unsafe-fx<"
" c1_1013"
" b1_1008)"
"(let-values()"
"(loop_1006"
" a1_1012"
" b1_1008"
" c1_1013))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_910"
" c1_1009"
" y_1011)"
"(let-values(((b1_1014)"
"(unsafe-fx+"
" b1_1008"
" 1))"
"((c1_1015)"
"(unsafe-fx+"
" c1_1009"
" 1)))"
"(if(unsafe-fx<="
" b2_1005"
" b1_1014)"
"((letrec-values(((loop_1016)"
"(lambda(a1_1017"
" c1_1018)"
"(if(unsafe-fx<"
" c1_1018"
" b1_1014)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_910"
" c1_1018"
"(unsafe-vector-ref"
" A_910"
" a1_1017))"
"(loop_1016"
"(unsafe-fx+"
" a1_1017"
" 1)"
"(unsafe-fx+"
" c1_1018"
" 1))))"
"(void)))))"
" loop_1016)"
" a1_1007"
" c1_1015)"
"(loop_1006"
" a1_1007"
" b1_1014"
" c1_1015)))))))))"
" loop_1006)"
" Amid2_1003"
" Bmid1_1004"
" Blo_990)))))))))))))"
"(let-values(((Alo_1019) 0))"
"(begin"
"(copying-mergesort_988 Amid1_1020 B1lo_1023 n/2+_952)"
"(if(zero? n/2-_951)"
"(void)"
"(let-values()"
"(copying-mergesort_988 Alo_1019 Amid2_1021 n/2-_951)))"
"(let-values()"
"((letrec-values(((loop_1025)"
"(lambda(a1_1026 b1_1027 c1_1028)"
"(let-values(((x_1029)"
"(unsafe-vector-ref"
" A_910"
" a1_1026))"
"((y_1030)"
"(unsafe-vector-ref"
" A_910"
" b1_1027)))"
"(if(string<? x_1029 y_1030)"
"(begin"
"(unsafe-vector-set!"
" A_910"
" c1_1028"
" x_1029)"
"(let-values(((a1_1031)"
"(unsafe-fx+ a1_1026 1))"
"((c1_1032)"
"(unsafe-fx+ c1_1028 1)))"
"(if(unsafe-fx< c1_1032 b1_1027)"
"(let-values()"
"(loop_1025"
" a1_1031"
" b1_1027"
" c1_1032))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_910"
" c1_1028"
" y_1030)"
"(let-values(((b1_1033)"
"(unsafe-fx+ b1_1027 1))"
"((c1_1034)"
"(unsafe-fx+ c1_1028 1)))"
"(if(unsafe-fx<= b2_1024 b1_1033)"
"((letrec-values(((loop_1035)"
"(lambda(a1_1036"
" c1_1037)"
"(if(unsafe-fx<"
" c1_1037"
" b1_1033)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_910"
" c1_1037"
"(unsafe-vector-ref"
" A_910"
" a1_1036))"
"(loop_1035"
"(unsafe-fx+"
" a1_1036"
" 1)"
"(unsafe-fx+"
" c1_1037"
" 1))))"
"(void)))))"
" loop_1035)"
" a1_1026"
" c1_1034)"
"(loop_1025"
" a1_1026"
" b1_1033"
" c1_1034)))))))))"
" loop_1025)"
" B1lo_1023"
" Amid2_1021"
" Alo_1019))))))))))))"
"(begin"
"(hash-set! sorts_119 string<? sort-proc_909)"
"(hash-set! sorts_119 string<=? sort-proc_909)))"
"(let-values(((sort-proc_1038)"
"(lambda(A_1039 n_1040)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1080)(unsafe-fxrshift n_1040 1)))"
"(let-values(((n/2+_1081)(unsafe-fx- n_1040 n/2-_1080)))"
"(letrec-values(((copying-mergesort_1117)"
"(lambda(Alo_1118 Blo_1119 n_1120)"
"(if(unsafe-fx= n_1120 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1039"
" Blo_1119"
"(unsafe-vector-ref A_1039 Alo_1118)))"
"(if(unsafe-fx= n_1120 2)"
"(let-values()"
"(let-values(((x_1121)"
"(unsafe-vector-ref"
" A_1039"
" Alo_1118))"
"((y_1122)"
"(unsafe-vector-ref"
" A_1039"
"(unsafe-fx+ Alo_1118 1))))"
"(if(string>? y_1122 x_1121)"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" Blo_1119"
" y_1122)"
"(unsafe-vector-set!"
" A_1039"
"(unsafe-fx+ Blo_1119 1)"
" x_1121))"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" Blo_1119"
" x_1121)"
"(unsafe-vector-set!"
" A_1039"
"(unsafe-fx+ Blo_1119 1)"
" y_1122)))))"
"(if(unsafe-fx< n_1120 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" Blo_1119"
"(unsafe-vector-ref A_1039 Alo_1118))"
"((letrec-values(((iloop_1123)"
"(lambda(i_1124)"
"(if(unsafe-fx<"
" i_1124"
" n_1120)"
"(let-values()"
"(let-values(((ref-i_1125)"
"(unsafe-vector-ref"
" A_1039"
"(unsafe-fx+"
" Alo_1118"
" i_1124))))"
"((letrec-values(((jloop_1126)"
"(lambda(j_1127)"
"(let-values(((ref-j-1_1128)"
"(unsafe-vector-ref"
" A_1039"
"(unsafe-fx-"
" j_1127"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1119"
" j_1127)"
"(string>?"
" ref-i_1125"
" ref-j-1_1128)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" j_1127"
" ref-j-1_1128)"
"(jloop_1126"
"(unsafe-fx-"
" j_1127"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" j_1127"
" ref-i_1125)"
"(iloop_1123"
"(unsafe-fx+"
" i_1124"
" 1))))))))"
" jloop_1126)"
"(unsafe-fx+"
" Blo_1119"
" i_1124))))"
"(void)))))"
" iloop_1123)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1129)"
"(unsafe-fxrshift n_1120 1)))"
"(let-values(((n/2+_1130)"
"(unsafe-fx-"
" n_1120"
" n/2-_1129)))"
"(let-values(((Amid1_1131)"
"(unsafe-fx+"
" Alo_1118"
" n/2-_1129))"
"((Amid2_1132)"
"(unsafe-fx+"
" Alo_1118"
" n/2+_1130))"
"((Bmid1_1133)"
"(unsafe-fx+"
" Blo_1119"
" n/2-_1129)))"
"(begin"
"(copying-mergesort_1117"
" Amid1_1131"
" Bmid1_1133"
" n/2+_1130)"
"(copying-mergesort_1117"
" Alo_1118"
" Amid2_1132"
" n/2-_1129)"
"(let-values(((b2_1134)"
"(unsafe-fx+"
" Blo_1119"
" n_1120)))"
"((letrec-values(((loop_1135)"
"(lambda(a1_1136"
" b1_1137"
" c1_1138)"
"(let-values(((x_1139)"
"(unsafe-vector-ref"
" A_1039"
" a1_1136))"
"((y_1140)"
"(unsafe-vector-ref"
" A_1039"
" b1_1137)))"
"(if(not"
"(string>?"
" y_1140"
" x_1139))"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" c1_1138"
" x_1139)"
"(let-values(((a1_1141)"
"(unsafe-fx+"
" a1_1136"
" 1))"
"((c1_1142)"
"(unsafe-fx+"
" c1_1138"
" 1)))"
"(if(unsafe-fx<"
" c1_1142"
" b1_1137)"
"(let-values()"
"(loop_1135"
" a1_1141"
" b1_1137"
" c1_1142))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" c1_1138"
" y_1140)"
"(let-values(((b1_1143)"
"(unsafe-fx+"
" b1_1137"
" 1))"
"((c1_1144)"
"(unsafe-fx+"
" c1_1138"
" 1)))"
"(if(unsafe-fx<="
" b2_1134"
" b1_1143)"
"((letrec-values(((loop_1145)"
"(lambda(a1_1146"
" c1_1147)"
"(if(unsafe-fx<"
" c1_1147"
" b1_1143)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" c1_1147"
"(unsafe-vector-ref"
" A_1039"
" a1_1146))"
"(loop_1145"
"(unsafe-fx+"
" a1_1146"
" 1)"
"(unsafe-fx+"
" c1_1147"
" 1))))"
"(void)))))"
" loop_1145)"
" a1_1136"
" c1_1144)"
"(loop_1135"
" a1_1136"
" b1_1143"
" c1_1144)))))))))"
" loop_1135)"
" Amid2_1132"
" Bmid1_1133"
" Blo_1119)))))))))))))"
"(let-values(((Alo_1148) 0))"
"(begin"
"(copying-mergesort_1117 Amid1_1149 B1lo_1152 n/2+_1081)"
"(if(zero? n/2-_1080)"
"(void)"
"(let-values()"
"(copying-mergesort_1117 Alo_1148 Amid2_1150 n/2-_1080)))"
"(let-values()"
"((letrec-values(((loop_1154)"
"(lambda(a1_1155 b1_1156 c1_1157)"
"(let-values(((x_1158)"
"(unsafe-vector-ref"
" A_1039"
" a1_1155))"
"((y_1159)"
"(unsafe-vector-ref"
" A_1039"
" b1_1156)))"
"(if(string>? x_1158 y_1159)"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" c1_1157"
" x_1158)"
"(let-values(((a1_1160)"
"(unsafe-fx+ a1_1155 1))"
"((c1_1161)"
"(unsafe-fx+ c1_1157 1)))"
"(if(unsafe-fx< c1_1161 b1_1156)"
"(let-values()"
"(loop_1154"
" a1_1160"
" b1_1156"
" c1_1161))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" c1_1157"
" y_1159)"
"(let-values(((b1_1162)"
"(unsafe-fx+ b1_1156 1))"
"((c1_1163)"
"(unsafe-fx+ c1_1157 1)))"
"(if(unsafe-fx<= b2_1153 b1_1162)"
"((letrec-values(((loop_1164)"
"(lambda(a1_1165"
" c1_1166)"
"(if(unsafe-fx<"
" c1_1166"
" b1_1162)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" c1_1166"
"(unsafe-vector-ref"
" A_1039"
" a1_1165))"
"(loop_1164"
"(unsafe-fx+"
" a1_1165"
" 1)"
"(unsafe-fx+"
" c1_1166"
" 1))))"
"(void)))))"
" loop_1164)"
" a1_1155"
" c1_1163)"
"(loop_1154"
" a1_1155"
" b1_1162"
" c1_1163)))))))))"
" loop_1154)"
" B1lo_1152"
" Amid2_1150"
" Alo_1148))))))))))))"
"(begin"
"(hash-set! sorts_119 string>? sort-proc_1038)"
"(hash-set! sorts_119 string>=? sort-proc_1038)))"
"(let-values(((sort-proc_1167)"
"(lambda(A_1168 n_1169)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1209)(unsafe-fxrshift n_1169 1)))"
"(let-values(((n/2+_1210)(unsafe-fx- n_1169 n/2-_1209)))"
"(letrec-values(((copying-mergesort_1246)"
"(lambda(Alo_1247 Blo_1248 n_1249)"
"(if(unsafe-fx= n_1249 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1168"
" Blo_1248"
"(unsafe-vector-ref A_1168 Alo_1247)))"
"(if(unsafe-fx= n_1249 2)"
"(let-values()"
"(let-values(((x_1250)"
"(unsafe-vector-ref"
" A_1168"
" Alo_1247))"
"((y_1251)"
"(unsafe-vector-ref"
" A_1168"
"(unsafe-fx+ Alo_1247 1))))"
"(if(string-ci<? y_1251 x_1250)"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" Blo_1248"
" y_1251)"
"(unsafe-vector-set!"
" A_1168"
"(unsafe-fx+ Blo_1248 1)"
" x_1250))"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" Blo_1248"
" x_1250)"
"(unsafe-vector-set!"
" A_1168"
"(unsafe-fx+ Blo_1248 1)"
" y_1251)))))"
"(if(unsafe-fx< n_1249 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" Blo_1248"
"(unsafe-vector-ref A_1168 Alo_1247))"
"((letrec-values(((iloop_1252)"
"(lambda(i_1253)"
"(if(unsafe-fx<"
" i_1253"
" n_1249)"
"(let-values()"
"(let-values(((ref-i_1254)"
"(unsafe-vector-ref"
" A_1168"
"(unsafe-fx+"
" Alo_1247"
" i_1253))))"
"((letrec-values(((jloop_1255)"
"(lambda(j_1256)"
"(let-values(((ref-j-1_1257)"
"(unsafe-vector-ref"
" A_1168"
"(unsafe-fx-"
" j_1256"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1248"
" j_1256)"
"(string-ci<?"
" ref-i_1254"
" ref-j-1_1257)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" j_1256"
" ref-j-1_1257)"
"(jloop_1255"
"(unsafe-fx-"
" j_1256"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" j_1256"
" ref-i_1254)"
"(iloop_1252"
"(unsafe-fx+"
" i_1253"
" 1))))))))"
" jloop_1255)"
"(unsafe-fx+"
" Blo_1248"
" i_1253))))"
"(void)))))"
" iloop_1252)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1258)"
"(unsafe-fxrshift n_1249 1)))"
"(let-values(((n/2+_1259)"
"(unsafe-fx-"
" n_1249"
" n/2-_1258)))"
"(let-values(((Amid1_1260)"
"(unsafe-fx+"
" Alo_1247"
" n/2-_1258))"
"((Amid2_1261)"
"(unsafe-fx+"
" Alo_1247"
" n/2+_1259))"
"((Bmid1_1262)"
"(unsafe-fx+"
" Blo_1248"
" n/2-_1258)))"
"(begin"
"(copying-mergesort_1246"
" Amid1_1260"
" Bmid1_1262"
" n/2+_1259)"
"(copying-mergesort_1246"
" Alo_1247"
" Amid2_1261"
" n/2-_1258)"
"(let-values(((b2_1263)"
"(unsafe-fx+"
" Blo_1248"
" n_1249)))"
"((letrec-values(((loop_1264)"
"(lambda(a1_1265"
" b1_1266"
" c1_1267)"
"(let-values(((x_1268)"
"(unsafe-vector-ref"
" A_1168"
" a1_1265))"
"((y_1269)"
"(unsafe-vector-ref"
" A_1168"
" b1_1266)))"
"(if(not"
"(string-ci<?"
" y_1269"
" x_1268))"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" c1_1267"
" x_1268)"
"(let-values(((a1_1270)"
"(unsafe-fx+"
" a1_1265"
" 1))"
"((c1_1271)"
"(unsafe-fx+"
" c1_1267"
" 1)))"
"(if(unsafe-fx<"
" c1_1271"
" b1_1266)"
"(let-values()"
"(loop_1264"
" a1_1270"
" b1_1266"
" c1_1271))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" c1_1267"
" y_1269)"
"(let-values(((b1_1272)"
"(unsafe-fx+"
" b1_1266"
" 1))"
"((c1_1273)"
"(unsafe-fx+"
" c1_1267"
" 1)))"
"(if(unsafe-fx<="
" b2_1263"
" b1_1272)"
"((letrec-values(((loop_1274)"
"(lambda(a1_1275"
" c1_1276)"
"(if(unsafe-fx<"
" c1_1276"
" b1_1272)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" c1_1276"
"(unsafe-vector-ref"
" A_1168"
" a1_1275))"
"(loop_1274"
"(unsafe-fx+"
" a1_1275"
" 1)"
"(unsafe-fx+"
" c1_1276"
" 1))))"
"(void)))))"
" loop_1274)"
" a1_1265"
" c1_1273)"
"(loop_1264"
" a1_1265"
" b1_1272"
" c1_1273)))))))))"
" loop_1264)"
" Amid2_1261"
" Bmid1_1262"
" Blo_1248)))))))))))))"
"(let-values(((Alo_1277) 0))"
"(begin"
"(copying-mergesort_1246 Amid1_1278 B1lo_1281 n/2+_1210)"
"(if(zero? n/2-_1209)"
"(void)"
"(let-values()"
"(copying-mergesort_1246 Alo_1277 Amid2_1279 n/2-_1209)))"
"(let-values()"
"((letrec-values(((loop_1283)"
"(lambda(a1_1284 b1_1285 c1_1286)"
"(let-values(((x_1287)"
"(unsafe-vector-ref"
" A_1168"
" a1_1284))"
"((y_1288)"
"(unsafe-vector-ref"
" A_1168"
" b1_1285)))"
"(if(string-ci<? x_1287 y_1288)"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" c1_1286"
" x_1287)"
"(let-values(((a1_1289)"
"(unsafe-fx+ a1_1284 1))"
"((c1_1290)"
"(unsafe-fx+ c1_1286 1)))"
"(if(unsafe-fx< c1_1290 b1_1285)"
"(let-values()"
"(loop_1283"
" a1_1289"
" b1_1285"
" c1_1290))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" c1_1286"
" y_1288)"
"(let-values(((b1_1291)"
"(unsafe-fx+ b1_1285 1))"
"((c1_1292)"
"(unsafe-fx+ c1_1286 1)))"
"(if(unsafe-fx<= b2_1282 b1_1291)"
"((letrec-values(((loop_1293)"
"(lambda(a1_1294"
" c1_1295)"
"(if(unsafe-fx<"
" c1_1295"
" b1_1291)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" c1_1295"
"(unsafe-vector-ref"
" A_1168"
" a1_1294))"
"(loop_1293"
"(unsafe-fx+"
" a1_1294"
" 1)"
"(unsafe-fx+"
" c1_1295"
" 1))))"
"(void)))))"
" loop_1293)"
" a1_1284"
" c1_1292)"
"(loop_1283"
" a1_1284"
" b1_1291"
" c1_1292)))))))))"
" loop_1283)"
" B1lo_1281"
" Amid2_1279"
" Alo_1277))))))))))))"
"(begin"
"(hash-set! sorts_119 string-ci<? sort-proc_1167)"
"(hash-set! sorts_119 string-ci<=? sort-proc_1167)))"
"(let-values(((sort-proc_1296)"
"(lambda(A_1297 n_1298)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1338)(unsafe-fxrshift n_1298 1)))"
"(let-values(((n/2+_1339)(unsafe-fx- n_1298 n/2-_1338)))"
"(letrec-values(((copying-mergesort_1375)"
"(lambda(Alo_1376 Blo_1377 n_1378)"
"(if(unsafe-fx= n_1378 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1297"
" Blo_1377"
"(unsafe-vector-ref A_1297 Alo_1376)))"
"(if(unsafe-fx= n_1378 2)"
"(let-values()"
"(let-values(((x_1379)"
"(unsafe-vector-ref"
" A_1297"
" Alo_1376))"
"((y_1380)"
"(unsafe-vector-ref"
" A_1297"
"(unsafe-fx+ Alo_1376 1))))"
"(if(string-ci>? y_1380 x_1379)"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" Blo_1377"
" y_1380)"
"(unsafe-vector-set!"
" A_1297"
"(unsafe-fx+ Blo_1377 1)"
" x_1379))"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" Blo_1377"
" x_1379)"
"(unsafe-vector-set!"
" A_1297"
"(unsafe-fx+ Blo_1377 1)"
" y_1380)))))"
"(if(unsafe-fx< n_1378 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" Blo_1377"
"(unsafe-vector-ref A_1297 Alo_1376))"
"((letrec-values(((iloop_1381)"
"(lambda(i_1382)"
"(if(unsafe-fx<"
" i_1382"
" n_1378)"
"(let-values()"
"(let-values(((ref-i_1383)"
"(unsafe-vector-ref"
" A_1297"
"(unsafe-fx+"
" Alo_1376"
" i_1382))))"
"((letrec-values(((jloop_1384)"
"(lambda(j_1385)"
"(let-values(((ref-j-1_1386)"
"(unsafe-vector-ref"
" A_1297"
"(unsafe-fx-"
" j_1385"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1377"
" j_1385)"
"(string-ci>?"
" ref-i_1383"
" ref-j-1_1386)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" j_1385"
" ref-j-1_1386)"
"(jloop_1384"
"(unsafe-fx-"
" j_1385"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" j_1385"
" ref-i_1383)"
"(iloop_1381"
"(unsafe-fx+"
" i_1382"
" 1))))))))"
" jloop_1384)"
"(unsafe-fx+"
" Blo_1377"
" i_1382))))"
"(void)))))"
" iloop_1381)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1387)"
"(unsafe-fxrshift n_1378 1)))"
"(let-values(((n/2+_1388)"
"(unsafe-fx-"
" n_1378"
" n/2-_1387)))"
"(let-values(((Amid1_1389)"
"(unsafe-fx+"
" Alo_1376"
" n/2-_1387))"
"((Amid2_1390)"
"(unsafe-fx+"
" Alo_1376"
" n/2+_1388))"
"((Bmid1_1391)"
"(unsafe-fx+"
" Blo_1377"
" n/2-_1387)))"
"(begin"
"(copying-mergesort_1375"
" Amid1_1389"
" Bmid1_1391"
" n/2+_1388)"
"(copying-mergesort_1375"
" Alo_1376"
" Amid2_1390"
" n/2-_1387)"
"(let-values(((b2_1392)"
"(unsafe-fx+"
" Blo_1377"
" n_1378)))"
"((letrec-values(((loop_1393)"
"(lambda(a1_1394"
" b1_1395"
" c1_1396)"
"(let-values(((x_1397)"
"(unsafe-vector-ref"
" A_1297"
" a1_1394))"
"((y_1398)"
"(unsafe-vector-ref"
" A_1297"
" b1_1395)))"
"(if(not"
"(string-ci>?"
" y_1398"
" x_1397))"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" c1_1396"
" x_1397)"
"(let-values(((a1_1399)"
"(unsafe-fx+"
" a1_1394"
" 1))"
"((c1_1400)"
"(unsafe-fx+"
" c1_1396"
" 1)))"
"(if(unsafe-fx<"
" c1_1400"
" b1_1395)"
"(let-values()"
"(loop_1393"
" a1_1399"
" b1_1395"
" c1_1400))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" c1_1396"
" y_1398)"
"(let-values(((b1_1401)"
"(unsafe-fx+"
" b1_1395"
" 1))"
"((c1_1402)"
"(unsafe-fx+"
" c1_1396"
" 1)))"
"(if(unsafe-fx<="
" b2_1392"
" b1_1401)"
"((letrec-values(((loop_1403)"
"(lambda(a1_1404"
" c1_1405)"
"(if(unsafe-fx<"
" c1_1405"
" b1_1401)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" c1_1405"
"(unsafe-vector-ref"
" A_1297"
" a1_1404))"
"(loop_1403"
"(unsafe-fx+"
" a1_1404"
" 1)"
"(unsafe-fx+"
" c1_1405"
" 1))))"
"(void)))))"
" loop_1403)"
" a1_1394"
" c1_1402)"
"(loop_1393"
" a1_1394"
" b1_1401"
" c1_1402)))))))))"
" loop_1393)"
" Amid2_1390"
" Bmid1_1391"
" Blo_1377)))))))))))))"
"(let-values(((Alo_1406) 0))"
"(begin"
"(copying-mergesort_1375 Amid1_1407 B1lo_1410 n/2+_1339)"
"(if(zero? n/2-_1338)"
"(void)"
"(let-values()"
"(copying-mergesort_1375 Alo_1406 Amid2_1408 n/2-_1338)))"
"(let-values()"
"((letrec-values(((loop_1412)"
"(lambda(a1_1413 b1_1414 c1_1415)"
"(let-values(((x_1416)"
"(unsafe-vector-ref"
" A_1297"
" a1_1413))"
"((y_1417)"
"(unsafe-vector-ref"
" A_1297"
" b1_1414)))"
"(if(string-ci>? x_1416 y_1417)"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" c1_1415"
" x_1416)"
"(let-values(((a1_1418)"
"(unsafe-fx+ a1_1413 1))"
"((c1_1419)"
"(unsafe-fx+ c1_1415 1)))"
"(if(unsafe-fx< c1_1419 b1_1414)"
"(let-values()"
"(loop_1412"
" a1_1418"
" b1_1414"
" c1_1419))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" c1_1415"
" y_1417)"
"(let-values(((b1_1420)"
"(unsafe-fx+ b1_1414 1))"
"((c1_1421)"
"(unsafe-fx+ c1_1415 1)))"
"(if(unsafe-fx<= b2_1411 b1_1420)"
"((letrec-values(((loop_1422)"
"(lambda(a1_1423"
" c1_1424)"
"(if(unsafe-fx<"
" c1_1424"
" b1_1420)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" c1_1424"
"(unsafe-vector-ref"
" A_1297"
" a1_1423))"
"(loop_1422"
"(unsafe-fx+"
" a1_1423"
" 1)"
"(unsafe-fx+"
" c1_1424"
" 1))))"
"(void)))))"
" loop_1422)"
" a1_1413"
" c1_1421)"
"(loop_1412"
" a1_1413"
" b1_1420"
" c1_1421)))))))))"
" loop_1412)"
" B1lo_1410"
" Amid2_1408"
" Alo_1406))))))))))))"
"(begin"
"(hash-set! sorts_119 string-ci>? sort-proc_1296)"
"(hash-set! sorts_119 string-ci>=? sort-proc_1296)))"
"(let-values(((sort-proc_1425)"
"(lambda(A_1426 n_1427)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1467)(unsafe-fxrshift n_1427 1)))"
"(let-values(((n/2+_1468)(unsafe-fx- n_1427 n/2-_1467)))"
"(letrec-values(((copying-mergesort_1504)"
"(lambda(Alo_1505 Blo_1506 n_1507)"
"(if(unsafe-fx= n_1507 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1426"
" Blo_1506"
"(unsafe-vector-ref A_1426 Alo_1505)))"
"(if(unsafe-fx= n_1507 2)"
"(let-values()"
"(let-values(((x_1508)"
"(unsafe-vector-ref"
" A_1426"
" Alo_1505))"
"((y_1509)"
"(unsafe-vector-ref"
" A_1426"
"(unsafe-fx+ Alo_1505 1))))"
"(if(char<? y_1509 x_1508)"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" Blo_1506"
" y_1509)"
"(unsafe-vector-set!"
" A_1426"
"(unsafe-fx+ Blo_1506 1)"
" x_1508))"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" Blo_1506"
" x_1508)"
"(unsafe-vector-set!"
" A_1426"
"(unsafe-fx+ Blo_1506 1)"
" y_1509)))))"
"(if(unsafe-fx< n_1507 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" Blo_1506"
"(unsafe-vector-ref A_1426 Alo_1505))"
"((letrec-values(((iloop_1510)"
"(lambda(i_1511)"
"(if(unsafe-fx<"
" i_1511"
" n_1507)"
"(let-values()"
"(let-values(((ref-i_1512)"
"(unsafe-vector-ref"
" A_1426"
"(unsafe-fx+"
" Alo_1505"
" i_1511))))"
"((letrec-values(((jloop_1513)"
"(lambda(j_1514)"
"(let-values(((ref-j-1_1515)"
"(unsafe-vector-ref"
" A_1426"
"(unsafe-fx-"
" j_1514"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1506"
" j_1514)"
"(char<?"
" ref-i_1512"
" ref-j-1_1515)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" j_1514"
" ref-j-1_1515)"
"(jloop_1513"
"(unsafe-fx-"
" j_1514"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" j_1514"
" ref-i_1512)"
"(iloop_1510"
"(unsafe-fx+"
" i_1511"
" 1))))))))"
" jloop_1513)"
"(unsafe-fx+"
" Blo_1506"
" i_1511))))"
"(void)))))"
" iloop_1510)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1516)"
"(unsafe-fxrshift n_1507 1)))"
"(let-values(((n/2+_1517)"
"(unsafe-fx-"
" n_1507"
" n/2-_1516)))"
"(let-values(((Amid1_1518)"
"(unsafe-fx+"
" Alo_1505"
" n/2-_1516))"
"((Amid2_1519)"
"(unsafe-fx+"
" Alo_1505"
" n/2+_1517))"
"((Bmid1_1520)"
"(unsafe-fx+"
" Blo_1506"
" n/2-_1516)))"
"(begin"
"(copying-mergesort_1504"
" Amid1_1518"
" Bmid1_1520"
" n/2+_1517)"
"(copying-mergesort_1504"
" Alo_1505"
" Amid2_1519"
" n/2-_1516)"
"(let-values(((b2_1521)"
"(unsafe-fx+"
" Blo_1506"
" n_1507)))"
"((letrec-values(((loop_1522)"
"(lambda(a1_1523"
" b1_1524"
" c1_1525)"
"(let-values(((x_1526)"
"(unsafe-vector-ref"
" A_1426"
" a1_1523))"
"((y_1527)"
"(unsafe-vector-ref"
" A_1426"
" b1_1524)))"
"(if(not"
"(char<?"
" y_1527"
" x_1526))"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" c1_1525"
" x_1526)"
"(let-values(((a1_1528)"
"(unsafe-fx+"
" a1_1523"
" 1))"
"((c1_1529)"
"(unsafe-fx+"
" c1_1525"
" 1)))"
"(if(unsafe-fx<"
" c1_1529"
" b1_1524)"
"(let-values()"
"(loop_1522"
" a1_1528"
" b1_1524"
" c1_1529))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" c1_1525"
" y_1527)"
"(let-values(((b1_1530)"
"(unsafe-fx+"
" b1_1524"
" 1))"
"((c1_1531)"
"(unsafe-fx+"
" c1_1525"
" 1)))"
"(if(unsafe-fx<="
" b2_1521"
" b1_1530)"
"((letrec-values(((loop_1532)"
"(lambda(a1_1533"
" c1_1534)"
"(if(unsafe-fx<"
" c1_1534"
" b1_1530)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" c1_1534"
"(unsafe-vector-ref"
" A_1426"
" a1_1533))"
"(loop_1532"
"(unsafe-fx+"
" a1_1533"
" 1)"
"(unsafe-fx+"
" c1_1534"
" 1))))"
"(void)))))"
" loop_1532)"
" a1_1523"
" c1_1531)"
"(loop_1522"
" a1_1523"
" b1_1530"
" c1_1531)))))))))"
" loop_1522)"
" Amid2_1519"
" Bmid1_1520"
" Blo_1506)))))))))))))"
"(let-values(((Alo_1535) 0))"
"(begin"
"(copying-mergesort_1504 Amid1_1536 B1lo_1539 n/2+_1468)"
"(if(zero? n/2-_1467)"
"(void)"
"(let-values()"
"(copying-mergesort_1504 Alo_1535 Amid2_1537 n/2-_1467)))"
"(let-values()"
"((letrec-values(((loop_1541)"
"(lambda(a1_1542 b1_1543 c1_1544)"
"(let-values(((x_1545)"
"(unsafe-vector-ref"
" A_1426"
" a1_1542))"
"((y_1546)"
"(unsafe-vector-ref"
" A_1426"
" b1_1543)))"
"(if(char<? x_1545 y_1546)"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" c1_1544"
" x_1545)"
"(let-values(((a1_1547)"
"(unsafe-fx+ a1_1542 1))"
"((c1_1548)"
"(unsafe-fx+ c1_1544 1)))"
"(if(unsafe-fx< c1_1548 b1_1543)"
"(let-values()"
"(loop_1541"
" a1_1547"
" b1_1543"
" c1_1548))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" c1_1544"
" y_1546)"
"(let-values(((b1_1549)"
"(unsafe-fx+ b1_1543 1))"
"((c1_1550)"
"(unsafe-fx+ c1_1544 1)))"
"(if(unsafe-fx<= b2_1540 b1_1549)"
"((letrec-values(((loop_1551)"
"(lambda(a1_1552"
" c1_1553)"
"(if(unsafe-fx<"
" c1_1553"
" b1_1549)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" c1_1553"
"(unsafe-vector-ref"
" A_1426"
" a1_1552))"
"(loop_1551"
"(unsafe-fx+"
" a1_1552"
" 1)"
"(unsafe-fx+"
" c1_1553"
" 1))))"
"(void)))))"
" loop_1551)"
" a1_1542"
" c1_1550)"
"(loop_1541"
" a1_1542"
" b1_1549"
" c1_1550)))))))))"
" loop_1541)"
" B1lo_1539"
" Amid2_1537"
" Alo_1535))))))))))))"
"(begin"
"(hash-set! sorts_119 char<? sort-proc_1425)"
"(hash-set! sorts_119 char<=? sort-proc_1425)))"
"(let-values(((sort-proc_1554)"
"(lambda(A_1555 n_1556)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1596)(unsafe-fxrshift n_1556 1)))"
"(let-values(((n/2+_1597)(unsafe-fx- n_1556 n/2-_1596)))"
"(letrec-values(((copying-mergesort_1633)"
"(lambda(Alo_1634 Blo_1635 n_1636)"
"(if(unsafe-fx= n_1636 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1555"
" Blo_1635"
"(unsafe-vector-ref A_1555 Alo_1634)))"
"(if(unsafe-fx= n_1636 2)"
"(let-values()"
"(let-values(((x_1637)"
"(unsafe-vector-ref"
" A_1555"
" Alo_1634))"
"((y_1638)"
"(unsafe-vector-ref"
" A_1555"
"(unsafe-fx+ Alo_1634 1))))"
"(if(char>? y_1638 x_1637)"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" Blo_1635"
" y_1638)"
"(unsafe-vector-set!"
" A_1555"
"(unsafe-fx+ Blo_1635 1)"
" x_1637))"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" Blo_1635"
" x_1637)"
"(unsafe-vector-set!"
" A_1555"
"(unsafe-fx+ Blo_1635 1)"
" y_1638)))))"
"(if(unsafe-fx< n_1636 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" Blo_1635"
"(unsafe-vector-ref A_1555 Alo_1634))"
"((letrec-values(((iloop_1639)"
"(lambda(i_1640)"
"(if(unsafe-fx<"
" i_1640"
" n_1636)"
"(let-values()"
"(let-values(((ref-i_1641)"
"(unsafe-vector-ref"
" A_1555"
"(unsafe-fx+"
" Alo_1634"
" i_1640))))"
"((letrec-values(((jloop_1642)"
"(lambda(j_1643)"
"(let-values(((ref-j-1_1644)"
"(unsafe-vector-ref"
" A_1555"
"(unsafe-fx-"
" j_1643"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1635"
" j_1643)"
"(char>?"
" ref-i_1641"
" ref-j-1_1644)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" j_1643"
" ref-j-1_1644)"
"(jloop_1642"
"(unsafe-fx-"
" j_1643"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" j_1643"
" ref-i_1641)"
"(iloop_1639"
"(unsafe-fx+"
" i_1640"
" 1))))))))"
" jloop_1642)"
"(unsafe-fx+"
" Blo_1635"
" i_1640))))"
"(void)))))"
" iloop_1639)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1645)"
"(unsafe-fxrshift n_1636 1)))"
"(let-values(((n/2+_1646)"
"(unsafe-fx-"
" n_1636"
" n/2-_1645)))"
"(let-values(((Amid1_1647)"
"(unsafe-fx+"
" Alo_1634"
" n/2-_1645))"
"((Amid2_1648)"
"(unsafe-fx+"
" Alo_1634"
" n/2+_1646))"
"((Bmid1_1649)"
"(unsafe-fx+"
" Blo_1635"
" n/2-_1645)))"
"(begin"
"(copying-mergesort_1633"
" Amid1_1647"
" Bmid1_1649"
" n/2+_1646)"
"(copying-mergesort_1633"
" Alo_1634"
" Amid2_1648"
" n/2-_1645)"
"(let-values(((b2_1650)"
"(unsafe-fx+"
" Blo_1635"
" n_1636)))"
"((letrec-values(((loop_1651)"
"(lambda(a1_1652"
" b1_1653"
" c1_1654)"
"(let-values(((x_1655)"
"(unsafe-vector-ref"
" A_1555"
" a1_1652))"
"((y_1656)"
"(unsafe-vector-ref"
" A_1555"
" b1_1653)))"
"(if(not"
"(char>?"
" y_1656"
" x_1655))"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" c1_1654"
" x_1655)"
"(let-values(((a1_1657)"
"(unsafe-fx+"
" a1_1652"
" 1))"
"((c1_1658)"
"(unsafe-fx+"
" c1_1654"
" 1)))"
"(if(unsafe-fx<"
" c1_1658"
" b1_1653)"
"(let-values()"
"(loop_1651"
" a1_1657"
" b1_1653"
" c1_1658))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" c1_1654"
" y_1656)"
"(let-values(((b1_1659)"
"(unsafe-fx+"
" b1_1653"
" 1))"
"((c1_1660)"
"(unsafe-fx+"
" c1_1654"
" 1)))"
"(if(unsafe-fx<="
" b2_1650"
" b1_1659)"
"((letrec-values(((loop_1661)"
"(lambda(a1_1662"
" c1_1663)"
"(if(unsafe-fx<"
" c1_1663"
" b1_1659)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" c1_1663"
"(unsafe-vector-ref"
" A_1555"
" a1_1662))"
"(loop_1661"
"(unsafe-fx+"
" a1_1662"
" 1)"
"(unsafe-fx+"
" c1_1663"
" 1))))"
"(void)))))"
" loop_1661)"
" a1_1652"
" c1_1660)"
"(loop_1651"
" a1_1652"
" b1_1659"
" c1_1660)))))))))"
" loop_1651)"
" Amid2_1648"
" Bmid1_1649"
" Blo_1635)))))))))))))"
"(let-values(((Alo_1664) 0))"
"(begin"
"(copying-mergesort_1633 Amid1_1665 B1lo_1668 n/2+_1597)"
"(if(zero? n/2-_1596)"
"(void)"
"(let-values()"
"(copying-mergesort_1633 Alo_1664 Amid2_1666 n/2-_1596)))"
"(let-values()"
"((letrec-values(((loop_1670)"
"(lambda(a1_1671 b1_1672 c1_1673)"
"(let-values(((x_1674)"
"(unsafe-vector-ref"
" A_1555"
" a1_1671))"
"((y_1675)"
"(unsafe-vector-ref"
" A_1555"
" b1_1672)))"
"(if(char>? x_1674 y_1675)"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" c1_1673"
" x_1674)"
"(let-values(((a1_1676)"
"(unsafe-fx+ a1_1671 1))"
"((c1_1677)"
"(unsafe-fx+ c1_1673 1)))"
"(if(unsafe-fx< c1_1677 b1_1672)"
"(let-values()"
"(loop_1670"
" a1_1676"
" b1_1672"
" c1_1677))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" c1_1673"
" y_1675)"
"(let-values(((b1_1678)"
"(unsafe-fx+ b1_1672 1))"
"((c1_1679)"
"(unsafe-fx+ c1_1673 1)))"
"(if(unsafe-fx<= b2_1669 b1_1678)"
"((letrec-values(((loop_1680)"
"(lambda(a1_1681"
" c1_1682)"
"(if(unsafe-fx<"
" c1_1682"
" b1_1678)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" c1_1682"
"(unsafe-vector-ref"
" A_1555"
" a1_1681))"
"(loop_1680"
"(unsafe-fx+"
" a1_1681"
" 1)"
"(unsafe-fx+"
" c1_1682"
" 1))))"
"(void)))))"
" loop_1680)"
" a1_1671"
" c1_1679)"
"(loop_1670"
" a1_1671"
" b1_1678"
" c1_1679)))))))))"
" loop_1670)"
" B1lo_1668"
" Amid2_1666"
" Alo_1664))))))))))))"
"(begin"
"(hash-set! sorts_119 char>? sort-proc_1554)"
"(hash-set! sorts_119 char>=? sort-proc_1554)))"
"(let-values(((sort-proc_1683)"
"(lambda(A_1684 n_1685)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1725)(unsafe-fxrshift n_1685 1)))"
"(let-values(((n/2+_1726)(unsafe-fx- n_1685 n/2-_1725)))"
"(letrec-values(((copying-mergesort_1762)"
"(lambda(Alo_1763 Blo_1764 n_1765)"
"(if(unsafe-fx= n_1765 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1684"
" Blo_1764"
"(unsafe-vector-ref A_1684 Alo_1763)))"
"(if(unsafe-fx= n_1765 2)"
"(let-values()"
"(let-values(((x_1766)"
"(unsafe-vector-ref"
" A_1684"
" Alo_1763))"
"((y_1767)"
"(unsafe-vector-ref"
" A_1684"
"(unsafe-fx+ Alo_1763 1))))"
"(if(keyword<? y_1767 x_1766)"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" Blo_1764"
" y_1767)"
"(unsafe-vector-set!"
" A_1684"
"(unsafe-fx+ Blo_1764 1)"
" x_1766))"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" Blo_1764"
" x_1766)"
"(unsafe-vector-set!"
" A_1684"
"(unsafe-fx+ Blo_1764 1)"
" y_1767)))))"
"(if(unsafe-fx< n_1765 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" Blo_1764"
"(unsafe-vector-ref A_1684 Alo_1763))"
"((letrec-values(((iloop_1768)"
"(lambda(i_1769)"
"(if(unsafe-fx<"
" i_1769"
" n_1765)"
"(let-values()"
"(let-values(((ref-i_1770)"
"(unsafe-vector-ref"
" A_1684"
"(unsafe-fx+"
" Alo_1763"
" i_1769))))"
"((letrec-values(((jloop_1771)"
"(lambda(j_1772)"
"(let-values(((ref-j-1_1773)"
"(unsafe-vector-ref"
" A_1684"
"(unsafe-fx-"
" j_1772"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1764"
" j_1772)"
"(keyword<?"
" ref-i_1770"
" ref-j-1_1773)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" j_1772"
" ref-j-1_1773)"
"(jloop_1771"
"(unsafe-fx-"
" j_1772"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" j_1772"
" ref-i_1770)"
"(iloop_1768"
"(unsafe-fx+"
" i_1769"
" 1))))))))"
" jloop_1771)"
"(unsafe-fx+"
" Blo_1764"
" i_1769))))"
"(void)))))"
" iloop_1768)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1774)"
"(unsafe-fxrshift n_1765 1)))"
"(let-values(((n/2+_1775)"
"(unsafe-fx-"
" n_1765"
" n/2-_1774)))"
"(let-values(((Amid1_1776)"
"(unsafe-fx+"
" Alo_1763"
" n/2-_1774))"
"((Amid2_1777)"
"(unsafe-fx+"
" Alo_1763"
" n/2+_1775))"
"((Bmid1_1778)"
"(unsafe-fx+"
" Blo_1764"
" n/2-_1774)))"
"(begin"
"(copying-mergesort_1762"
" Amid1_1776"
" Bmid1_1778"
" n/2+_1775)"
"(copying-mergesort_1762"
" Alo_1763"
" Amid2_1777"
" n/2-_1774)"
"(let-values(((b2_1779)"
"(unsafe-fx+"
" Blo_1764"
" n_1765)))"
"((letrec-values(((loop_1780)"
"(lambda(a1_1781"
" b1_1782"
" c1_1783)"
"(let-values(((x_1784)"
"(unsafe-vector-ref"
" A_1684"
" a1_1781))"
"((y_1785)"
"(unsafe-vector-ref"
" A_1684"
" b1_1782)))"
"(if(not"
"(keyword<?"
" y_1785"
" x_1784))"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" c1_1783"
" x_1784)"
"(let-values(((a1_1786)"
"(unsafe-fx+"
" a1_1781"
" 1))"
"((c1_1787)"
"(unsafe-fx+"
" c1_1783"
" 1)))"
"(if(unsafe-fx<"
" c1_1787"
" b1_1782)"
"(let-values()"
"(loop_1780"
" a1_1786"
" b1_1782"
" c1_1787))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" c1_1783"
" y_1785)"
"(let-values(((b1_1788)"
"(unsafe-fx+"
" b1_1782"
" 1))"
"((c1_1789)"
"(unsafe-fx+"
" c1_1783"
" 1)))"
"(if(unsafe-fx<="
" b2_1779"
" b1_1788)"
"((letrec-values(((loop_1790)"
"(lambda(a1_1791"
" c1_1792)"
"(if(unsafe-fx<"
" c1_1792"
" b1_1788)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" c1_1792"
"(unsafe-vector-ref"
" A_1684"
" a1_1791))"
"(loop_1790"
"(unsafe-fx+"
" a1_1791"
" 1)"
"(unsafe-fx+"
" c1_1792"
" 1))))"
"(void)))))"
" loop_1790)"
" a1_1781"
" c1_1789)"
"(loop_1780"
" a1_1781"
" b1_1788"
" c1_1789)))))))))"
" loop_1780)"
" Amid2_1777"
" Bmid1_1778"
" Blo_1764)))))))))))))"
"(let-values(((Alo_1793) 0))"
"(begin"
"(copying-mergesort_1762 Amid1_1794 B1lo_1797 n/2+_1726)"
"(if(zero? n/2-_1725)"
"(void)"
"(let-values()"
"(copying-mergesort_1762 Alo_1793 Amid2_1795 n/2-_1725)))"
"(let-values()"
"((letrec-values(((loop_1799)"
"(lambda(a1_1800 b1_1801 c1_1802)"
"(let-values(((x_1803)"
"(unsafe-vector-ref"
" A_1684"
" a1_1800))"
"((y_1804)"
"(unsafe-vector-ref"
" A_1684"
" b1_1801)))"
"(if(keyword<? x_1803 y_1804)"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" c1_1802"
" x_1803)"
"(let-values(((a1_1805)"
"(unsafe-fx+ a1_1800 1))"
"((c1_1806)"
"(unsafe-fx+ c1_1802 1)))"
"(if(unsafe-fx< c1_1806 b1_1801)"
"(let-values()"
"(loop_1799"
" a1_1805"
" b1_1801"
" c1_1806))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" c1_1802"
" y_1804)"
"(let-values(((b1_1807)"
"(unsafe-fx+ b1_1801 1))"
"((c1_1808)"
"(unsafe-fx+ c1_1802 1)))"
"(if(unsafe-fx<= b2_1798 b1_1807)"
"((letrec-values(((loop_1809)"
"(lambda(a1_1810"
" c1_1811)"
"(if(unsafe-fx<"
" c1_1811"
" b1_1807)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" c1_1811"
"(unsafe-vector-ref"
" A_1684"
" a1_1810))"
"(loop_1809"
"(unsafe-fx+"
" a1_1810"
" 1)"
"(unsafe-fx+"
" c1_1811"
" 1))))"
"(void)))))"
" loop_1809)"
" a1_1800"
" c1_1808)"
"(loop_1799"
" a1_1800"
" b1_1807"
" c1_1808)))))))))"
" loop_1799)"
" B1lo_1797"
" Amid2_1795"
" Alo_1793))))))))))))"
"(hash-set! sorts_119 keyword<? sort-proc_1683))"
"(make-immutable-hasheq(hash-map sorts_119 cons)))))))"
"(let-values(((generic-sort_50)"
"(lambda(A_1812 less-than?_1813 n_1814)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1854)(unsafe-fxrshift n_1814 1)))"
"(let-values(((n/2+_1855)(unsafe-fx- n_1814 n/2-_1854)))"
"(letrec-values(((copying-mergesort_1891)"
"(lambda(Alo_1892 Blo_1893 n_1894)"
"(if(unsafe-fx= n_1894 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1812"
" Blo_1893"
"(unsafe-vector-ref A_1812 Alo_1892)))"
"(if(unsafe-fx= n_1894 2)"
"(let-values()"
"(let-values(((x_1895)(unsafe-vector-ref A_1812 Alo_1892))"
"((y_1896)"
"(unsafe-vector-ref"
" A_1812"
"(unsafe-fx+ Alo_1892 1))))"
"(if(less-than?_1813 y_1896 x_1895)"
"(begin"
"(unsafe-vector-set! A_1812 Blo_1893 y_1896)"
"(unsafe-vector-set! A_1812(unsafe-fx+ Blo_1893 1) x_1895))"
"(begin"
"(unsafe-vector-set! A_1812 Blo_1893 x_1895)"
"(unsafe-vector-set!"
" A_1812"
"(unsafe-fx+ Blo_1893 1)"
" y_1896)))))"
"(if(unsafe-fx< n_1894 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" Blo_1893"
"(unsafe-vector-ref A_1812 Alo_1892))"
"((letrec-values(((iloop_1897)"
"(lambda(i_1898)"
"(if(unsafe-fx< i_1898 n_1894)"
"(let-values()"
"(let-values(((ref-i_1899)"
"(unsafe-vector-ref"
" A_1812"
"(unsafe-fx+"
" Alo_1892"
" i_1898))))"
"((letrec-values(((jloop_1900)"
"(lambda(j_1901)"
"(let-values(((ref-j-1_1902)"
"(unsafe-vector-ref"
" A_1812"
"(unsafe-fx-"
" j_1901"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1893"
" j_1901)"
"(less-than?_1813"
" ref-i_1899"
" ref-j-1_1902)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" j_1901"
" ref-j-1_1902)"
"(jloop_1900"
"(unsafe-fx-"
" j_1901"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" j_1901"
" ref-i_1899)"
"(iloop_1897"
"(unsafe-fx+"
" i_1898"
" 1))))))))"
" jloop_1900)"
"(unsafe-fx+ Blo_1893 i_1898))))"
"(void)))))"
" iloop_1897)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1903)(unsafe-fxrshift n_1894 1)))"
"(let-values(((n/2+_1904)(unsafe-fx- n_1894 n/2-_1903)))"
"(let-values(((Amid1_1905)(unsafe-fx+ Alo_1892 n/2-_1903))"
"((Amid2_1906)(unsafe-fx+ Alo_1892 n/2+_1904))"
"((Bmid1_1907)"
"(unsafe-fx+ Blo_1893 n/2-_1903)))"
"(begin"
"(copying-mergesort_1891"
" Amid1_1905"
" Bmid1_1907"
" n/2+_1904)"
"(copying-mergesort_1891 Alo_1892 Amid2_1906 n/2-_1903)"
"(let-values(((b2_1908)(unsafe-fx+ Blo_1893 n_1894)))"
"((letrec-values(((loop_1909)"
"(lambda(a1_1910 b1_1911 c1_1912)"
"(let-values(((x_1913)"
"(unsafe-vector-ref"
" A_1812"
" a1_1910))"
"((y_1914)"
"(unsafe-vector-ref"
" A_1812"
" b1_1911)))"
"(if(not"
"(less-than?_1813"
" y_1914"
" x_1913))"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" c1_1912"
" x_1913)"
"(let-values(((a1_1915)"
"(unsafe-fx+"
" a1_1910"
" 1))"
"((c1_1916)"
"(unsafe-fx+"
" c1_1912"
" 1)))"
"(if(unsafe-fx<"
" c1_1916"
" b1_1911)"
"(let-values()"
"(loop_1909"
" a1_1915"
" b1_1911"
" c1_1916))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" c1_1912"
" y_1914)"
"(let-values(((b1_1917)"
"(unsafe-fx+"
" b1_1911"
" 1))"
"((c1_1918)"
"(unsafe-fx+"
" c1_1912"
" 1)))"
"(if(unsafe-fx<="
" b2_1908"
" b1_1917)"
"((letrec-values(((loop_1919)"
"(lambda(a1_1920"
" c1_1921)"
"(if(unsafe-fx<"
" c1_1921"
" b1_1917)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" c1_1921"
"(unsafe-vector-ref"
" A_1812"
" a1_1920))"
"(loop_1919"
"(unsafe-fx+"
" a1_1920"
" 1)"
"(unsafe-fx+"
" c1_1921"
" 1))))"
"(void)))))"
" loop_1919)"
" a1_1910"
" c1_1918)"
"(loop_1909"
" a1_1910"
" b1_1917"
" c1_1918)))))))))"
" loop_1909)"
" Amid2_1906"
" Bmid1_1907"
" Blo_1893)))))))))))))"
"(let-values(((Alo_1922) 0))"
"(begin"
"(copying-mergesort_1891 Amid1_1923 B1lo_1926 n/2+_1855)"
"(if(zero? n/2-_1854)"
"(void)"
"(let-values()(copying-mergesort_1891 Alo_1922 Amid2_1924 n/2-_1854)))"
"(let-values()"
"((letrec-values(((loop_1928)"
"(lambda(a1_1929 b1_1930 c1_1931)"
"(let-values(((x_1932)(unsafe-vector-ref A_1812 a1_1929))"
"((y_1933)(unsafe-vector-ref A_1812 b1_1930)))"
"(if(less-than?_1813 x_1932 y_1933)"
"(begin"
"(unsafe-vector-set! A_1812 c1_1931 x_1932)"
"(let-values(((a1_1934)(unsafe-fx+ a1_1929 1))"
"((c1_1935)(unsafe-fx+ c1_1931 1)))"
"(if(unsafe-fx< c1_1935 b1_1930)"
"(let-values()(loop_1928 a1_1934 b1_1930 c1_1935))"
"(void))))"
"(begin"
"(unsafe-vector-set! A_1812 c1_1931 y_1933)"
"(let-values(((b1_1936)(unsafe-fx+ b1_1930 1))"
"((c1_1937)(unsafe-fx+ c1_1931 1)))"
"(if(unsafe-fx<= b2_1927 b1_1936)"
"((letrec-values(((loop_1938)"
"(lambda(a1_1939 c1_1940)"
"(if(unsafe-fx< c1_1940 b1_1936)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" c1_1940"
"(unsafe-vector-ref"
" A_1812"
" a1_1939))"
"(loop_1938"
"(unsafe-fx+ a1_1939 1)"
"(unsafe-fx+ c1_1940 1))))"
"(void)))))"
" loop_1938)"
" a1_1929"
" c1_1937)"
"(loop_1928 a1_1929 b1_1936 c1_1937)))))))))"
" loop_1928)"
" B1lo_1926"
" Amid2_1924"
" Alo_1922))))))))))))"
"(let-values(((generic-sort/key_51)"
"(lambda(A_1941 less-than?_1942 n_1943 key_1944)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1984)(unsafe-fxrshift n_1943 1)))"
"(let-values(((n/2+_1985)(unsafe-fx- n_1943 n/2-_1984)))"
"(letrec-values(((copying-mergesort_2021)"
"(lambda(Alo_2022 Blo_2023 n_2024)"
"(if(unsafe-fx= n_2024 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1941"
" Blo_2023"
"(unsafe-vector-ref A_1941 Alo_2022)))"
"(if(unsafe-fx= n_2024 2)"
"(let-values()"
"(let-values(((x_2025)(unsafe-vector-ref A_1941 Alo_2022))"
"((y_2026)"
"(unsafe-vector-ref"
" A_1941"
"(unsafe-fx+ Alo_2022 1))))"
"(if(if key_1944"
"(less-than?_1942(key_1944 y_2026)(key_1944 x_2025))"
"(less-than?_1942 y_2026 x_2025))"
"(begin"
"(unsafe-vector-set! A_1941 Blo_2023 y_2026)"
"(unsafe-vector-set!"
" A_1941"
"(unsafe-fx+ Blo_2023 1)"
" x_2025))"
"(begin"
"(unsafe-vector-set! A_1941 Blo_2023 x_2025)"
"(unsafe-vector-set!"
" A_1941"
"(unsafe-fx+ Blo_2023 1)"
" y_2026)))))"
"(if(unsafe-fx< n_2024 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" Blo_2023"
"(unsafe-vector-ref A_1941 Alo_2022))"
"((letrec-values(((iloop_2027)"
"(lambda(i_2028)"
"(if(unsafe-fx< i_2028 n_2024)"
"(let-values()"
"(let-values(((ref-i_2029)"
"(unsafe-vector-ref"
" A_1941"
"(unsafe-fx+"
" Alo_2022"
" i_2028))))"
"((letrec-values(((jloop_2030)"
"(lambda(j_2031)"
"(let-values(((ref-j-1_2032)"
"(unsafe-vector-ref"
" A_1941"
"(unsafe-fx-"
" j_2031"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_2023"
" j_2031)"
"(if key_1944"
"(less-than?_1942"
"(key_1944"
" ref-i_2029)"
"(key_1944"
" ref-j-1_2032))"
"(less-than?_1942"
" ref-i_2029"
" ref-j-1_2032))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" j_2031"
" ref-j-1_2032)"
"(jloop_2030"
"(unsafe-fx-"
" j_2031"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" j_2031"
" ref-i_2029)"
"(iloop_2027"
"(unsafe-fx+"
" i_2028"
" 1))))))))"
" jloop_2030)"
"(unsafe-fx+ Blo_2023 i_2028))))"
"(void)))))"
" iloop_2027)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_2033)(unsafe-fxrshift n_2024 1)))"
"(let-values(((n/2+_2034)(unsafe-fx- n_2024 n/2-_2033)))"
"(let-values(((Amid1_2035)"
"(unsafe-fx+ Alo_2022 n/2-_2033))"
"((Amid2_2036)"
"(unsafe-fx+ Alo_2022 n/2+_2034))"
"((Bmid1_2037)"
"(unsafe-fx+ Blo_2023 n/2-_2033)))"
"(begin"
"(copying-mergesort_2021"
" Amid1_2035"
" Bmid1_2037"
" n/2+_2034)"
"(copying-mergesort_2021"
" Alo_2022"
" Amid2_2036"
" n/2-_2033)"
"(let-values(((b2_2038)"
"(unsafe-fx+ Blo_2023 n_2024)))"
"((letrec-values(((loop_2039)"
"(lambda(a1_2040 b1_2041 c1_2042)"
"(let-values(((x_2043)"
"(unsafe-vector-ref"
" A_1941"
" a1_2040))"
"((y_2044)"
"(unsafe-vector-ref"
" A_1941"
" b1_2041)))"
"(if(not"
"(if key_1944"
"(less-than?_1942"
"(key_1944 y_2044)"
"(key_1944 x_2043))"
"(less-than?_1942"
" y_2044"
" x_2043)))"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" c1_2042"
" x_2043)"
"(let-values(((a1_2045)"
"(unsafe-fx+"
" a1_2040"
" 1))"
"((c1_2046)"
"(unsafe-fx+"
" c1_2042"
" 1)))"
"(if(unsafe-fx<"
" c1_2046"
" b1_2041)"
"(let-values()"
"(loop_2039"
" a1_2045"
" b1_2041"
" c1_2046))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" c1_2042"
" y_2044)"
"(let-values(((b1_2047)"
"(unsafe-fx+"
" b1_2041"
" 1))"
"((c1_2048)"
"(unsafe-fx+"
" c1_2042"
" 1)))"
"(if(unsafe-fx<="
" b2_2038"
" b1_2047)"
"((letrec-values(((loop_2049)"
"(lambda(a1_2050"
" c1_2051)"
"(if(unsafe-fx<"
" c1_2051"
" b1_2047)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" c1_2051"
"(unsafe-vector-ref"
" A_1941"
" a1_2050))"
"(loop_2049"
"(unsafe-fx+"
" a1_2050"
" 1)"
"(unsafe-fx+"
" c1_2051"
" 1))))"
"(void)))))"
" loop_2049)"
" a1_2040"
" c1_2048)"
"(loop_2039"
" a1_2040"
" b1_2047"
" c1_2048)))))))))"
" loop_2039)"
" Amid2_2036"
" Bmid1_2037"
" Blo_2023)))))))))))))"
"(let-values(((Alo_2052) 0))"
"(begin"
"(copying-mergesort_2021 Amid1_2053 B1lo_2056 n/2+_1985)"
"(if(zero? n/2-_1984)"
"(void)"
"(let-values()(copying-mergesort_2021 Alo_2052 Amid2_2054 n/2-_1984)))"
"(let-values()"
"((letrec-values(((loop_2058)"
"(lambda(a1_2059 b1_2060 c1_2061)"
"(let-values(((x_2062)(unsafe-vector-ref A_1941 a1_2059))"
"((y_2063)(unsafe-vector-ref A_1941 b1_2060)))"
"(if(if key_1944"
"(less-than?_1942"
"(key_1944 x_2062)"
"(key_1944 y_2063))"
"(less-than?_1942 x_2062 y_2063))"
"(begin"
"(unsafe-vector-set! A_1941 c1_2061 x_2062)"
"(let-values(((a1_2064)(unsafe-fx+ a1_2059 1))"
"((c1_2065)(unsafe-fx+ c1_2061 1)))"
"(if(unsafe-fx< c1_2065 b1_2060)"
"(let-values()"
"(loop_2058 a1_2064 b1_2060 c1_2065))"
"(void))))"
"(begin"
"(unsafe-vector-set! A_1941 c1_2061 y_2063)"
"(let-values(((b1_2066)(unsafe-fx+ b1_2060 1))"
"((c1_2067)(unsafe-fx+ c1_2061 1)))"
"(if(unsafe-fx<= b2_2057 b1_2066)"
"((letrec-values(((loop_2068)"
"(lambda(a1_2069 c1_2070)"
"(if(unsafe-fx<"
" c1_2070"
" b1_2066)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" c1_2070"
"(unsafe-vector-ref"
" A_1941"
" a1_2069))"
"(loop_2068"
"(unsafe-fx+ a1_2069 1)"
"(unsafe-fx+"
" c1_2070"
" 1))))"
"(void)))))"
" loop_2068)"
" a1_2059"
" c1_2067)"
"(loop_2058 a1_2059 b1_2066 c1_2067)))))))))"
" loop_2058)"
" B1lo_2056"
" Amid2_2054"
" Alo_2052))))))))))))"
"(values"
"(case-lambda"
"((lst_2071 less-than?_2072)"
"(let-values(((n_2073)(length lst_2071)))"
"(let-values()"
"(if(unsafe-fx= n_2073 0)"
"(let-values() lst_2071)"
"(if((letrec-values(((loop_2097)"
"(lambda(last_2098 next_2099)"
"(let-values(((or-part_2100)(null? next_2099)))"
"(if or-part_2100"
" or-part_2100"
"(if(not(less-than?_2072(unsafe-car next_2099) last_2098))"
"(loop_2097(unsafe-car next_2099)(unsafe-cdr next_2099))"
" #f))))))"
" loop_2097)"
"(car lst_2071)"
"(cdr lst_2071))"
"(let-values() lst_2071)"
"(if(unsafe-fx<= n_2073 3)"
"(let-values()"
"(if(unsafe-fx= n_2073 1)"
"(let-values() lst_2071)"
"(if(unsafe-fx= n_2073 2)"
"(let-values()(list(cadr lst_2071)(car lst_2071)))"
"(let-values()"
"(let-values(((a_2101)(car lst_2071))"
"((b_2102)(cadr lst_2071))"
"((c_2103)(caddr lst_2071)))"
"(if(less-than?_2072 b_2102 a_2101)"
"(if(less-than?_2072 c_2103 b_2102)"
"(list c_2103 b_2102 a_2101)"
"(if(less-than?_2072 c_2103 a_2101)"
"(list b_2102 c_2103 a_2101)"
"(list b_2102 a_2101 c_2103)))"
"(if(less-than?_2072 c_2103 a_2101)"
"(list c_2103 a_2101 b_2102)"
"(list a_2101 c_2103 b_2102))))))))"
"(let-values()"
"(let-values(((vec_2104)(make-vector(+ n_2073(ceiling(/ n_2073 2))))))"
"(begin"
"((letrec-values(((loop_2105)"
"(lambda(i_2106 lst_2107)"
"(if(pair? lst_2107)"
"(let-values()"
"(begin"
"(vector-set! vec_2104 i_2106(car lst_2107))"
"(loop_2105(add1 i_2106)(cdr lst_2107))))"
"(void)))))"
" loop_2105)"
" 0"
" lst_2071)"
"(let-values(((precomp_2108)(hash-ref precompiled-sorts_49 less-than?_2072 #f)))"
"(if precomp_2108"
"(precomp_2108 vec_2104 n_2073)"
"(generic-sort_50 vec_2104 less-than?_2072 n_2073)))"
"((letrec-values(((loop_2109)"
"(lambda(i_2110 r_2111)"
"(let-values(((i_2112)(sub1 i_2110)))"
"(if(< i_2112 0)"
" r_2111"
"(loop_2109 i_2112(cons(vector-ref vec_2104 i_2112) r_2111)))))))"
" loop_2109)"
" n_2073"
" '()))))))))))"
"((lst_2113 less-than?_2114 getkey_2115)"
"(if(if getkey_2115(not(eq? values getkey_2115)) #f)"
"(sort lst_2113 less-than?_2114 getkey_2115 #f)"
"(sort lst_2113 less-than?_2114)))"
"((lst_2116 less-than?_2117 getkey_2118 cache-keys?_2119)"
"(if(if getkey_2118(not(eq? values getkey_2118)) #f)"
"(let-values(((n_2120)(length lst_2116)))"
"(let-values()"
"(if(unsafe-fx= n_2120 0)"
"(let-values() lst_2116)"
"(if cache-keys?_2119"
"(let-values()"
"(let-values(((vec_2135)(make-vector(+ n_2120(ceiling(/ n_2120 2))))))"
"(begin"
"((letrec-values(((loop_2136)"
"(lambda(i_2137 lst_2138)"
"(if(pair? lst_2138)"
"(let-values()"
"(let-values(((x_2139)(car lst_2138)))"
"(begin"
"(unsafe-vector-set!"
" vec_2135"
" i_2137"
"(cons(getkey_2118 x_2139) x_2139))"
"(loop_2136(unsafe-fx+ i_2137 1)(cdr lst_2138)))))"
"(void)))))"
" loop_2136)"
" 0"
" lst_2116)"
"(generic-sort/key_51 vec_2135 less-than?_2117 n_2120 unsafe-car)"
"((letrec-values(((loop_2140)"
"(lambda(i_2141 r_2142)"
"(let-values(((i_2143)(unsafe-fx- i_2141 1)))"
"(if(unsafe-fx< i_2143 0)"
" r_2142"
"(loop_2140"
" i_2143"
"(cons"
"(unsafe-cdr(unsafe-vector-ref vec_2135 i_2143))"
" r_2142)))))))"
" loop_2140)"
" n_2120"
" '()))))"
"(if((letrec-values(((loop_2144)"
"(lambda(last_2145 next_2146)"
"(let-values(((or-part_2147)(null? next_2146)))"
"(if or-part_2147"
" or-part_2147"
"(if(not"
"(if getkey_2118"
"(less-than?_2117"
"(getkey_2118(unsafe-car next_2146))"
"(getkey_2118 last_2145))"
"(less-than?_2117(unsafe-car next_2146) last_2145)))"
"(loop_2144(unsafe-car next_2146)(unsafe-cdr next_2146))"
" #f))))))"
" loop_2144)"
"(car lst_2116)"
"(cdr lst_2116))"
"(let-values() lst_2116)"
"(if(unsafe-fx<= n_2120 3)"
"(let-values()"
"(if(unsafe-fx= n_2120 1)"
"(let-values() lst_2116)"
"(if(unsafe-fx= n_2120 2)"
"(let-values()(list(cadr lst_2116)(car lst_2116)))"
"(let-values()"
"(let-values(((a_2148)(car lst_2116))"
"((b_2149)(cadr lst_2116))"
"((c_2150)(caddr lst_2116)))"
"(if(if getkey_2118"
"(less-than?_2117(getkey_2118 b_2149)(getkey_2118 a_2148))"
"(less-than?_2117 b_2149 a_2148))"
"(if(if getkey_2118"
"(less-than?_2117(getkey_2118 c_2150)(getkey_2118 b_2149))"
"(less-than?_2117 c_2150 b_2149))"
"(list c_2150 b_2149 a_2148)"
"(if(if getkey_2118"
"(less-than?_2117(getkey_2118 c_2150)(getkey_2118 a_2148))"
"(less-than?_2117 c_2150 a_2148))"
"(list b_2149 c_2150 a_2148)"
"(list b_2149 a_2148 c_2150)))"
"(if(if getkey_2118"
"(less-than?_2117(getkey_2118 c_2150)(getkey_2118 a_2148))"
"(less-than?_2117 c_2150 a_2148))"
"(list c_2150 a_2148 b_2149)"
"(list a_2148 c_2150 b_2149))))))))"
"(let-values()"
"(let-values(((vec_2151)(make-vector(+ n_2120(ceiling(/ n_2120 2))))))"
"(begin"
"((letrec-values(((loop_2152)"
"(lambda(i_2153 lst_2154)"
"(if(pair? lst_2154)"
"(let-values()"
"(begin"
"(vector-set! vec_2151 i_2153(car lst_2154))"
"(loop_2152(add1 i_2153)(cdr lst_2154))))"
"(void)))))"
" loop_2152)"
" 0"
" lst_2116)"
"(generic-sort/key_51 vec_2151 less-than?_2117 n_2120 getkey_2118)"
"((letrec-values(((loop_2155)"
"(lambda(i_2156 r_2157)"
"(let-values(((i_2158)(sub1 i_2156)))"
"(if(< i_2158 0)"
" r_2157"
"(loop_2155"
" i_2158"
"(cons(vector-ref vec_2151 i_2158) r_2157)))))))"
" loop_2155)"
" n_2120"
" '()))))))))))"
"(sort lst_2116 less-than?_2117))))"
"(case-lambda"
"((vec_2159 less-than?_2160 start_2161 end_2162)"
"(let-values(((n_2163)(- end_2162 start_2161)))"
"(let-values(((dst-vec_2195)(make-vector n_2163)))"
"(let-values(((dst-start_2196) 0))"
"(begin"
"(if(unsafe-fx= n_2163 0)"
"(let-values()(void))"
"(if((letrec-values(((loop_2203)"
"(lambda(prev-val_2204 next-index_2205)"
"(let-values(((or-part_2206)(unsafe-fx= next-index_2205 end_2162)))"
"(if or-part_2206"
" or-part_2206"
"(let-values(((next-val_2207)"
"(unsafe-vector-ref vec_2159 next-index_2205)))"
"(if(not(less-than?_2160 next-val_2207 prev-val_2204))"
"(loop_2203 next-val_2207(unsafe-fx+ next-index_2205 1))"
" #f)))))))"
" loop_2203)"
"(unsafe-vector-ref vec_2159 start_2161)"
"(unsafe-fx+ start_2161 1))"
"(let-values()"
"(let-values()(vector-copy! dst-vec_2195 dst-start_2196 vec_2159 start_2161 end_2162)))"
"(if(unsafe-fx<= n_2163 3)"
"(let-values()"
"(begin"
"(let-values()(vector-copy! dst-vec_2195 dst-start_2196 vec_2159 start_2161 end_2162))"
"(if(unsafe-fx= n_2163 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_2163 2)"
"(let-values()"
"(let-values(((tmp_2208)"
"(unsafe-vector-ref dst-vec_2195(unsafe-fx+ dst-start_2196 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 0)"
"(unsafe-vector-ref dst-vec_2195(unsafe-fx+ dst-start_2196 1)))"
"(unsafe-vector-set! dst-vec_2195(unsafe-fx+ dst-start_2196 1) tmp_2208))))"
"(let-values()"
"(let-values(((a_2209)"
"(unsafe-vector-ref dst-vec_2195(unsafe-fx+ dst-start_2196 0)))"
"((b_2210)"
"(unsafe-vector-ref dst-vec_2195(unsafe-fx+ dst-start_2196 1)))"
"((c_2211)"
"(unsafe-vector-ref dst-vec_2195(unsafe-fx+ dst-start_2196 2))))"
"(if(less-than?_2160 b_2210 a_2209)"
"(let-values()"
"(if(less-than?_2160 c_2211 b_2210)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2195(unsafe-fx+ dst-start_2196 0) c_2211)"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 2)"
" a_2209)))"
"(if(less-than?_2160 c_2211 a_2209)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 0)"
" b_2210)"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 1)"
" c_2211)"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 2)"
" a_2209)))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 0)"
" b_2210)"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 1)"
" a_2209))))))"
"(if(less-than?_2160 c_2211 a_2209)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2195(unsafe-fx+ dst-start_2196 0) c_2211)"
"(unsafe-vector-set! dst-vec_2195(unsafe-fx+ dst-start_2196 1) a_2209)"
"(unsafe-vector-set! dst-vec_2195(unsafe-fx+ dst-start_2196 2) b_2210)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2195(unsafe-fx+ dst-start_2196 1) c_2211)"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 2)"
" b_2210)))))))))))"
"(let-values()"
"(let-values(((work-vec_2212)(make-vector(+ n_2163(ceiling(/ n_2163 2))) #f)))"
"(begin"
"(vector-copy! work-vec_2212 0 vec_2159 start_2161 end_2162)"
"(let-values(((precomp_2213)(hash-ref precompiled-sorts_49 less-than?_2160 #f)))"
"(if precomp_2213"
"(precomp_2213 work-vec_2212 n_2163)"
"(generic-sort_50 work-vec_2212 less-than?_2160 n_2163)))"
"(vector-copy! dst-vec_2195 dst-start_2196 work-vec_2212 0 n_2163)))))))"
" dst-vec_2195)))))"
"((vec_2214 less-than?_2215 start_2216 end_2217 getkey_2218 cache-keys?_2219)"
"(if(if getkey_2218(not(eq? values getkey_2218)) #f)"
"(let-values(((n_2220)(- end_2217 start_2216)))"
"(let-values(((dst-vec_2252)(make-vector n_2220)))"
"(let-values(((dst-start_2253) 0))"
"(begin"
"(if(unsafe-fx= n_2220 0)"
"(let-values()(void))"
"(if cache-keys?_2219"
"(let-values()"
"(let-values(((work-vec_2254)(make-vector(+ n_2220(ceiling(/ n_2220 2))) #t)))"
"(begin"
"((letrec-values(((loop_2255)"
"(lambda(i_2256)"
"(if(unsafe-fx< i_2256 n_2220)"
"(let-values()"
"(begin"
"(let-values(((x_2257)"
"(unsafe-vector-ref"
" vec_2214"
"(unsafe-fx+ i_2256 start_2216))))"
"(unsafe-vector-set!"
" work-vec_2254"
" i_2256"
"(cons(getkey_2218 x_2257) x_2257)))"
"(loop_2255(unsafe-fx+ i_2256 1))))"
"(void)))))"
" loop_2255)"
" 0)"
"(generic-sort/key_51 work-vec_2254 less-than?_2215 n_2220 unsafe-car)"
"((letrec-values(((loop_2258)"
"(lambda(i_2259)"
"(if(unsafe-fx< i_2259 n_2220)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ i_2259 dst-start_2253)"
"(unsafe-cdr(unsafe-vector-ref work-vec_2254 i_2259)))"
"(loop_2258(unsafe-fx+ i_2259 1))))"
"(void)))))"
" loop_2258)"
" 0))))"
"(if((letrec-values(((loop_2260)"
"(lambda(prev-val_2261 next-index_2262)"
"(let-values(((or-part_2263)(unsafe-fx= next-index_2262 end_2217)))"
"(if or-part_2263"
" or-part_2263"
"(let-values(((next-val_2264)"
"(unsafe-vector-ref vec_2214 next-index_2262)))"
"(if(not"
"(if getkey_2218"
"(less-than?_2215"
"(getkey_2218 next-val_2264)"
"(getkey_2218 prev-val_2261))"
"(less-than?_2215 next-val_2264 prev-val_2261)))"
"(loop_2260 next-val_2264(unsafe-fx+ next-index_2262 1))"
" #f)))))))"
" loop_2260)"
"(unsafe-vector-ref vec_2214 start_2216)"
"(unsafe-fx+ start_2216 1))"
"(let-values()"
"(let-values()(vector-copy! dst-vec_2252 dst-start_2253 vec_2214 start_2216 end_2217)))"
"(if(unsafe-fx<= n_2220 3)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-copy! dst-vec_2252 dst-start_2253 vec_2214 start_2216 end_2217))"
"(if(unsafe-fx= n_2220 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_2220 2)"
"(let-values()"
"(let-values(((tmp_2265)"
"(unsafe-vector-ref dst-vec_2252(unsafe-fx+ dst-start_2253 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 0)"
"(unsafe-vector-ref dst-vec_2252(unsafe-fx+ dst-start_2253 1)))"
"(unsafe-vector-set! dst-vec_2252(unsafe-fx+ dst-start_2253 1) tmp_2265))))"
"(let-values()"
"(let-values(((a_2266)"
"(unsafe-vector-ref dst-vec_2252(unsafe-fx+ dst-start_2253 0)))"
"((b_2267)"
"(unsafe-vector-ref dst-vec_2252(unsafe-fx+ dst-start_2253 1)))"
"((c_2268)"
"(unsafe-vector-ref dst-vec_2252(unsafe-fx+ dst-start_2253 2))))"
"(if(if getkey_2218"
"(less-than?_2215(getkey_2218 b_2267)(getkey_2218 a_2266))"
"(less-than?_2215 b_2267 a_2266))"
"(let-values()"
"(if(if getkey_2218"
"(less-than?_2215(getkey_2218 c_2268)(getkey_2218 b_2267))"
"(less-than?_2215 c_2268 b_2267))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 0)"
" c_2268)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 2)"
" a_2266)))"
"(if(if getkey_2218"
"(less-than?_2215(getkey_2218 c_2268)(getkey_2218 a_2266))"
"(less-than?_2215 c_2268 a_2266))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 0)"
" b_2267)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 1)"
" c_2268)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 2)"
" a_2266)))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 0)"
" b_2267)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 1)"
" a_2266))))))"
"(if(if getkey_2218"
"(less-than?_2215(getkey_2218 c_2268)(getkey_2218 a_2266))"
"(less-than?_2215 c_2268 a_2266))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 0)"
" c_2268)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 1)"
" a_2266)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 2)"
" b_2267)))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 1)"
" c_2268)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 2)"
" b_2267)))))))))))"
"(let-values()"
"(let-values(((work-vec_2269)(make-vector(+ n_2220(ceiling(/ n_2220 2))) #f)))"
"(begin"
"(vector-copy! work-vec_2269 0 vec_2214 start_2216 end_2217)"
"(generic-sort/key_51 work-vec_2269 less-than?_2215 n_2220 getkey_2218)"
"(vector-copy! dst-vec_2252 dst-start_2253 work-vec_2269 0 n_2220))))))))"
" dst-vec_2252))))"
"(vector-sort vec_2214 less-than?_2215 start_2216 end_2217))))"
"(case-lambda"
"((vec_2270 less-than?_2271 start_2272 end_2273)"
"(let-values(((n_2274)(- end_2273 start_2272)))"
"(let-values(((dst-vec_2306) vec_2270))"
"(let-values(((dst-start_2307) start_2272))"
"(begin"
"(if(unsafe-fx= n_2274 0)"
"(let-values()(void))"
"(if((letrec-values(((loop_2314)"
"(lambda(prev-val_2315 next-index_2316)"
"(let-values(((or-part_2317)(unsafe-fx= next-index_2316 end_2273)))"
"(if or-part_2317"
" or-part_2317"
"(let-values(((next-val_2318)"
"(unsafe-vector-ref vec_2270 next-index_2316)))"
"(if(not(less-than?_2271 next-val_2318 prev-val_2315))"
"(loop_2314 next-val_2318(unsafe-fx+ next-index_2316 1))"
" #f)))))))"
" loop_2314)"
"(unsafe-vector-ref vec_2270 start_2272)"
"(unsafe-fx+ start_2272 1))"
"(let-values()(void))"
"(if(unsafe-fx<= n_2274 3)"
"(let-values()"
"(begin"
"(void)"
"(if(unsafe-fx= n_2274 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_2274 2)"
"(let-values()"
"(let-values(((tmp_2319)"
"(unsafe-vector-ref dst-vec_2306(unsafe-fx+ dst-start_2307 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 0)"
"(unsafe-vector-ref dst-vec_2306(unsafe-fx+ dst-start_2307 1)))"
"(unsafe-vector-set! dst-vec_2306(unsafe-fx+ dst-start_2307 1) tmp_2319))))"
"(let-values()"
"(let-values(((a_2320)"
"(unsafe-vector-ref dst-vec_2306(unsafe-fx+ dst-start_2307 0)))"
"((b_2321)"
"(unsafe-vector-ref dst-vec_2306(unsafe-fx+ dst-start_2307 1)))"
"((c_2322)"
"(unsafe-vector-ref dst-vec_2306(unsafe-fx+ dst-start_2307 2))))"
"(if(less-than?_2271 b_2321 a_2320)"
"(let-values()"
"(if(less-than?_2271 c_2322 b_2321)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2306(unsafe-fx+ dst-start_2307 0) c_2322)"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 2)"
" a_2320)))"
"(if(less-than?_2271 c_2322 a_2320)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 0)"
" b_2321)"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 1)"
" c_2322)"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 2)"
" a_2320)))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 0)"
" b_2321)"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 1)"
" a_2320))))))"
"(if(less-than?_2271 c_2322 a_2320)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2306(unsafe-fx+ dst-start_2307 0) c_2322)"
"(unsafe-vector-set! dst-vec_2306(unsafe-fx+ dst-start_2307 1) a_2320)"
"(unsafe-vector-set! dst-vec_2306(unsafe-fx+ dst-start_2307 2) b_2321)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2306(unsafe-fx+ dst-start_2307 1) c_2322)"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 2)"
" b_2321)))))))))))"
"(let-values()"
"(let-values(((work-vec_2323)(make-vector(+ n_2274(ceiling(/ n_2274 2))) #f)))"
"(begin"
"(vector-copy! work-vec_2323 0 vec_2270 start_2272 end_2273)"
"(let-values(((precomp_2324)(hash-ref precompiled-sorts_49 less-than?_2271 #f)))"
"(if precomp_2324"
"(precomp_2324 work-vec_2323 n_2274)"
"(generic-sort_50 work-vec_2323 less-than?_2271 n_2274)))"
"(vector-copy! dst-vec_2306 dst-start_2307 work-vec_2323 0 n_2274)))))))"
"(void))))))"
"((vec_2325 less-than?_2326 start_2327 end_2328 getkey_2329 cache-keys?_2330)"
"(if(if getkey_2329(not(eq? values getkey_2329)) #f)"
"(let-values(((n_2331)(- end_2328 start_2327)))"
"(let-values(((dst-vec_2363) vec_2325))"
"(let-values(((dst-start_2364) start_2327))"
"(begin"
"(if(unsafe-fx= n_2331 0)"
"(let-values()(void))"
"(if cache-keys?_2330"
"(let-values()"
"(let-values(((work-vec_2365)(make-vector(+ n_2331(ceiling(/ n_2331 2))) #t)))"
"(begin"
"((letrec-values(((loop_2366)"
"(lambda(i_2367)"
"(if(unsafe-fx< i_2367 n_2331)"
"(let-values()"
"(begin"
"(let-values(((x_2368)"
"(unsafe-vector-ref"
" vec_2325"
"(unsafe-fx+ i_2367 start_2327))))"
"(unsafe-vector-set!"
" work-vec_2365"
" i_2367"
"(cons(getkey_2329 x_2368) x_2368)))"
"(loop_2366(unsafe-fx+ i_2367 1))))"
"(void)))))"
" loop_2366)"
" 0)"
"(generic-sort/key_51 work-vec_2365 less-than?_2326 n_2331 unsafe-car)"
"((letrec-values(((loop_2369)"
"(lambda(i_2370)"
"(if(unsafe-fx< i_2370 n_2331)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ i_2370 dst-start_2364)"
"(unsafe-cdr(unsafe-vector-ref work-vec_2365 i_2370)))"
"(loop_2369(unsafe-fx+ i_2370 1))))"
"(void)))))"
" loop_2369)"
" 0))))"
"(if((letrec-values(((loop_2371)"
"(lambda(prev-val_2372 next-index_2373)"
"(let-values(((or-part_2374)(unsafe-fx= next-index_2373 end_2328)))"
"(if or-part_2374"
" or-part_2374"
"(let-values(((next-val_2375)"
"(unsafe-vector-ref vec_2325 next-index_2373)))"
"(if(not"
"(if getkey_2329"
"(less-than?_2326"
"(getkey_2329 next-val_2375)"
"(getkey_2329 prev-val_2372))"
"(less-than?_2326 next-val_2375 prev-val_2372)))"
"(loop_2371 next-val_2375(unsafe-fx+ next-index_2373 1))"
" #f)))))))"
" loop_2371)"
"(unsafe-vector-ref vec_2325 start_2327)"
"(unsafe-fx+ start_2327 1))"
"(let-values()(void))"
"(if(unsafe-fx<= n_2331 3)"
"(let-values()"
"(begin"
"(void)"
"(if(unsafe-fx= n_2331 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_2331 2)"
"(let-values()"
"(let-values(((tmp_2376)"
"(unsafe-vector-ref dst-vec_2363(unsafe-fx+ dst-start_2364 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 0)"
"(unsafe-vector-ref dst-vec_2363(unsafe-fx+ dst-start_2364 1)))"
"(unsafe-vector-set! dst-vec_2363(unsafe-fx+ dst-start_2364 1) tmp_2376))))"
"(let-values()"
"(let-values(((a_2377)"
"(unsafe-vector-ref dst-vec_2363(unsafe-fx+ dst-start_2364 0)))"
"((b_2378)"
"(unsafe-vector-ref dst-vec_2363(unsafe-fx+ dst-start_2364 1)))"
"((c_2379)"
"(unsafe-vector-ref dst-vec_2363(unsafe-fx+ dst-start_2364 2))))"
"(if(if getkey_2329"
"(less-than?_2326(getkey_2329 b_2378)(getkey_2329 a_2377))"
"(less-than?_2326 b_2378 a_2377))"
"(let-values()"
"(if(if getkey_2329"
"(less-than?_2326(getkey_2329 c_2379)(getkey_2329 b_2378))"
"(less-than?_2326 c_2379 b_2378))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 0)"
" c_2379)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 2)"
" a_2377)))"
"(if(if getkey_2329"
"(less-than?_2326(getkey_2329 c_2379)(getkey_2329 a_2377))"
"(less-than?_2326 c_2379 a_2377))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 0)"
" b_2378)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 1)"
" c_2379)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 2)"
" a_2377)))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 0)"
" b_2378)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 1)"
" a_2377))))))"
"(if(if getkey_2329"
"(less-than?_2326(getkey_2329 c_2379)(getkey_2329 a_2377))"
"(less-than?_2326 c_2379 a_2377))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 0)"
" c_2379)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 1)"
" a_2377)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 2)"
" b_2378)))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 1)"
" c_2379)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 2)"
" b_2378)))))))))))"
"(let-values()"
"(let-values(((work-vec_2380)(make-vector(+ n_2331(ceiling(/ n_2331 2))) #f)))"
"(begin"
"(vector-copy! work-vec_2380 0 vec_2325 start_2327 end_2328)"
"(generic-sort/key_51 work-vec_2380 less-than?_2326 n_2331 getkey_2329)"
"(vector-copy! dst-vec_2363 dst-start_2364 work-vec_2380 0 n_2331))))))))"
"(void)))))"
"(vector-sort! vec_2325 less-than?_2326 start_2327 end_2328))))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:do-sequence make-do-sequence do-sequence? do-sequence-ref do-sequence-set!)"
"(make-struct-type 'sequence #f 1 0 #f))"
"(define-values"
"(prop:stream stream-via-prop? stream-ref)"
"(make-struct-type-property"
" 'stream"
"(lambda(v_2558 si_2559)"
"(begin"
"(if(if(vector? v_2558)"
"(if(= 3(vector-length v_2558))"
"(if(procedure?(vector-ref v_2558 0))"
"(if(procedure-arity-includes?(vector-ref v_2558 0) 1)"
"(if(procedure?(vector-ref v_2558 1))"
"(if(procedure-arity-includes?(vector-ref v_2558 1) 1)"
"(if(procedure?(vector-ref v_2558 2))(procedure-arity-includes?(vector-ref v_2558 2) 1) #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:stream"
"(string-append"
"             \"(vector/c (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1))\")"
" v_2558)))"
"(vector->immutable-vector v_2558)))))"
"(define-values"
"(prop:gen-sequence sequence-via-prop? sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_2560 si_2561)"
"(begin"
"(if(if(procedure? v_2560)(procedure-arity-includes? v_2560 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:sequence \"(procedure-arity-includes/c 1)\" v_2560)))"
" v_2560))))"
"(define-values"
"(prop:sequence :sequence? :sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_2562 sinfo_2563)"
"(begin"
"(if(if(procedure? v_2562)(procedure-arity-includes? v_2562 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'sequence-property-guard \"(procedure-arity-includes/c 1)\" v_2562)))"
"(lambda(self_2564)"
"(let-values(((s_2565)(v_2562 self_2564)))"
"(begin"
"(if(sequence? s_2565)"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'sequence-generate"
"                  \"procedure (value of prop:sequence) produced a non-sequence: \""
" s_2565)))"
" s_2565)))))))"
"(define-values"
"(stream?)"
"(lambda(v_2566)"
"(let-values(((or-part_2567)(list? v_2566)))(if or-part_2567 or-part_2567(stream-via-prop? v_2566)))))"
"(define-values"
"(unsafe-stream-not-empty?)"
"(lambda(v_2568)"
"(if(null? v_2568)"
" #f"
"(let-values(((or-part_2569)(pair? v_2568)))"
"(if or-part_2569 or-part_2569(not((unsafe-vector-ref(stream-ref v_2568) 0) v_2568)))))))"
"(define-values"
"(unsafe-stream-first)"
"(lambda(v_2572)"
"(if(pair? v_2572)"
"(let-values()(car v_2572))"
"(let-values()((unsafe-vector-ref(stream-ref v_2572) 1) v_2572)))))"
"(define-values"
"(unsafe-stream-rest)"
"(lambda(v_2574)"
"(if(pair? v_2574)"
"(let-values()(cdr v_2574))"
"(let-values()"
"(let-values(((r_2575)((unsafe-vector-ref(stream-ref v_2574) 2) v_2574)))"
"(begin"
"(if(stream? r_2575)"
"(void)"
"              (let-values () (raise-mismatch-error 'stream-rest-guard \"result is not a stream: \" r_2575)))"
" r_2575))))))"
"(define-values"
"(sequence?)"
"(lambda(v_2577)"
"(let-values(((or-part_2578)(exact-nonnegative-integer? v_2577)))"
"(if or-part_2578"
" or-part_2578"
"(let-values(((or-part_2579)(do-sequence? v_2577)))"
"(if or-part_2579"
" or-part_2579"
"(let-values(((or-part_2580)(sequence-via-prop? v_2577)))"
"(if or-part_2580"
" or-part_2580"
"(let-values(((or-part_2581)(stream? v_2577)))"
"(if or-part_2581"
" or-part_2581"
"(let-values(((or-part_2582)(mpair? v_2577)))"
"(if or-part_2582"
" or-part_2582"
"(let-values(((or-part_2583)(vector? v_2577)))"
"(if or-part_2583"
" or-part_2583"
"(let-values(((or-part_2584)(flvector? v_2577)))"
"(if or-part_2584"
" or-part_2584"
"(let-values(((or-part_2585)(fxvector? v_2577)))"
"(if or-part_2585"
" or-part_2585"
"(let-values(((or-part_2586)(string? v_2577)))"
"(if or-part_2586"
" or-part_2586"
"(let-values(((or-part_2587)(bytes? v_2577)))"
"(if or-part_2587"
" or-part_2587"
"(let-values(((or-part_2588)(input-port? v_2577)))"
"(if or-part_2588"
" or-part_2588"
"(let-values(((or-part_2589)(hash? v_2577)))"
"(if or-part_2589"
" or-part_2589"
"(if(:sequence? v_2577)"
"(not(struct-type? v_2577))"
" #f)))))))))))))))))))))))))))"
"(define-values"
"(make-sequence)"
"(lambda(who_2590 v_2591)"
"(if(exact-nonnegative-integer? v_2591)"
"(let-values()(:integer-gen v_2591))"
"(if(do-sequence? v_2591)"
"(let-values()((do-sequence-ref v_2591 0)))"
"(if(mpair? v_2591)"
"(let-values()(:mlist-gen v_2591))"
"(if(list? v_2591)"
"(let-values()(:list-gen v_2591))"
"(if(vector? v_2591)"
"(let-values()(:vector-gen v_2591 0(vector-length v_2591) 1))"
"(if(flvector? v_2591)"
"(let-values()(:flvector-gen v_2591 0(flvector-length v_2591) 1))"
"(if(fxvector? v_2591)"
"(let-values()(:fxvector-gen v_2591 0(fxvector-length v_2591) 1))"
"(if(string? v_2591)"
"(let-values()(:string-gen v_2591 0(string-length v_2591) 1))"
"(if(bytes? v_2591)"
"(let-values()(:bytes-gen v_2591 0(bytes-length v_2591) 1))"
"(if(input-port? v_2591)"
"(let-values()(:input-port-gen v_2591))"
"(if(hash? v_2591)"
"(let-values()(:hash-gen v_2591 hash-iterate-key+value hash-iterate-first hash-iterate-next))"
"(if(sequence-via-prop? v_2591)"
"(let-values()((sequence-ref v_2591) v_2591))"
"(if(:sequence? v_2591)"
"(let-values()(make-sequence who_2590((:sequence-ref v_2591) v_2591)))"
"(if(stream? v_2591)"
"(let-values()(:stream-gen v_2591))"
"(let-values()"
"(raise"
"(exn:fail:contract"
"(format"
"                                     \"for: expected a sequence for ~a, got something else: ~v\""
"(if(= 1(length who_2590))(car who_2590) who_2590)"
" v_2591)"
"(current-continuation-marks))))))))))))))))))))"
"(define-values"
"(struct:range make-range range? range-ref range-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2592)"
"(let-values(((cont?_2593)(range-ref v_2592 2)))(if cont?_2593(not(cont?_2593(range-ref v_2592 0))) #f)))"
"(lambda(v_2594)(range-ref v_2594 0))"
"(lambda(v_2595)"
"(make-range((range-ref v_2595 1)(range-ref v_2595 0))(range-ref v_2595 1)(range-ref v_2595 2)))))"
"(cons"
" prop:gen-sequence"
"(lambda(v_2596)(values values(range-ref v_2596 1)(range-ref v_2596 0)(range-ref v_2596 2) #f #f))))))"
"(define-values"
"(in-range)"
"(case-lambda"
"((b_2597)(in-range 0 b_2597 1))"
"((a_2598 b_2599)(in-range a_2598 b_2599 1))"
"((a_2600 b_2601 step_2602)"
"(begin"
"      (if (real? a_2600) (void) (let-values () (raise-argument-error 'in-range \"real?\" a_2600)))"
"      (if (real? b_2601) (void) (let-values () (raise-argument-error 'in-range \"real?\" b_2601)))"
"      (if (real? step_2602) (void) (let-values () (raise-argument-error 'in-range \"real?\" step_2602)))"
"(let-values(((cont?_2603)"
"(if(>= step_2602 0)(lambda(x_2604)(< x_2604 b_2601))(lambda(x_2605)(> x_2605 b_2601)))))"
"(let-values(((inc_2606)(lambda(x_2607)(+ x_2607 step_2602))))(make-range a_2600 inc_2606 cont?_2603)))))))"
"(define-values(:integer-gen)(lambda(v_2608)(values values add1 0(lambda(i_2609)(< i_2609 v_2608)) #f #f)))"
"(define-values"
"(in-naturals)"
"(case-lambda"
"(()(in-naturals 0))"
"((n_2610)"
"(begin"
"(if(if(integer? n_2610)(if(exact? n_2610)(>= n_2610 0) #f) #f)"
"(void)"
"        (let-values () (raise-argument-error 'in-naturals \"exact-nonnegative-integer?\" n_2610)))"
"(make-range n_2610 add1 #f)))))"
"(define-values"
"(struct:list-stream make-list-stream list-stream? list-stream-ref list-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2611)(not(pair?(list-stream-ref v_2611 0))))"
"(lambda(v_2612)(car(list-stream-ref v_2612 0)))"
"(lambda(v_2613)(make-list-stream(cdr(list-stream-ref v_2613 0))))))"
"(cons prop:gen-sequence(lambda(v_2614)(values car cdr(list-stream-ref v_2614 0) pair? #f #f))))))"
"(define-values"
"(in-list)"
"(lambda(l_2615)"
"(begin"
"      (if (list? l_2615) (void) (let-values () (raise-argument-error 'in-list \"list?\" l_2615)))"
"(make-list-stream l_2615))))"
"(define-values(:list-gen)(lambda(l_2616)(values car cdr l_2616 pair? #f #f)))"
"(define-values(:mlist-gen)(lambda(l_2618)(values mcar mcdr l_2618 mpair? #f #f)))"
"(define-values"
"(:input-port-gen)"
"(lambda(p_2620)(values read-byte values p_2620 #f(lambda(x_2621)(not(eof-object? x_2621))) #f)))"
"(define-values"
"(:stream-gen)"
"(lambda(l_2639)(values unsafe-stream-first unsafe-stream-rest l_2639 unsafe-stream-not-empty? #f #f)))"
"(define-values"
"(:hash-gen)"
"(lambda(ht_2640 -get_2641 -first_2642 -next_2643)"
"(values"
"(lambda(pos_2644)(-get_2641 ht_2640 pos_2644))"
"(lambda(pos_2645)(-next_2643 ht_2640 pos_2645))"
"(-first_2642 ht_2640)"
"(lambda(pos_2646) pos_2646)"
" #f"
" #f)))"
"(define-values"
"(default-in-hash)"
"(lambda(ht_2649)"
"(begin"
"(if((lambda(ht_2650)(hash? ht_2650)) ht_2649)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash \"hash?\" ht_2649)))"
"(make-do-sequence(lambda()(:hash-gen ht_2649 hash-iterate-key+value hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash)"
"(lambda(ht_2653)"
"(begin"
"(if((lambda(ht_2654)(if(hash? ht_2654)(immutable? ht_2654) #f)) ht_2653)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash \"(and/c hash? immutable?)\" ht_2653)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2653"
" unsafe-immutable-hash-iterate-key+value"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-hash-keys)"
"(lambda(ht_2657)"
"(begin"
"(if((lambda(ht_2658)(hash? ht_2658)) ht_2657)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-keys \"hash?\" ht_2657)))"
"(make-do-sequence(lambda()(:hash-gen ht_2657 hash-iterate-key hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash-keys)"
"(lambda(ht_2661)"
"(begin"
"(if((lambda(ht_2662)(if(hash? ht_2662)(immutable? ht_2662) #f)) ht_2661)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash-keys \"(and/c hash? immutable?)\" ht_2661)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2661"
" unsafe-immutable-hash-iterate-key"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-hash-values)"
"(lambda(ht_2665)"
"(begin"
"(if((lambda(ht_2666)(hash? ht_2666)) ht_2665)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-values \"hash?\" ht_2665)))"
"(make-do-sequence(lambda()(:hash-gen ht_2665 hash-iterate-value hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(check-ranges)"
"(lambda(who_2681 vec_2682 start_2683 stop_2684 step_2685 len_2686)"
"(begin"
"(if(if(exact-nonnegative-integer? start_2683)"
"(let-values(((or-part_2687)(< start_2683 len_2686)))"
"(if or-part_2687 or-part_2687(= len_2686 start_2683 stop_2684)))"
" #f)"
"(void)"
"        (let-values () (raise-range-error who_2681 \"vector\" \"starting \" start_2683 vec_2682 0 (sub1 len_2686))))"
"(if(if(exact-integer? stop_2684)(if(<= -1 stop_2684)(<= stop_2684 len_2686) #f) #f)"
"(void)"
"        (let-values () (raise-range-error who_2681 \"vector\" \"stopping \" stop_2684 vec_2682 -1 len_2686)))"
"(if(if(exact-integer? step_2685)(not(zero? step_2685)) #f)"
"(void)"
"        (let-values () (raise-argument-error who_2681 \"(and/c exact-integer? (not/c zero?))\" step_2685)))"
"(if(if(< start_2683 stop_2684)(< step_2685 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_2681"
"           \"starting index less than stopping index, but given a negative step\""
"           \"starting index\""
" start_2683"
"           \"stopping index\""
" stop_2684"
"           \"step\""
" step_2685))"
"(void))"
"(if(if(< stop_2684 start_2683)(> step_2685 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_2681"
"           \"starting index more than stopping index, but given a positive step\""
"           \"starting index\""
" start_2683"
"           \"stopping index\""
" stop_2684"
"           \"step\""
" step_2685))"
"(void)))))"
"(define-values"
"(normalise-inputs)"
"(lambda(who_2688 type-name_2689 vector?_2690 unsafe-vector-length_2691 vec_2692 start_2693 stop_2694 step_2695)"
"(begin"
"(if(vector?_2690 vec_2692)(void)(let-values()(raise-argument-error who_2688 type-name_2689 vec_2692)))"
"(let-values(((len_2696)(unsafe-vector-length_2691 vec_2692)))"
"(let-values(((stop*_2697)(if stop_2694 stop_2694 len_2696)))"
"(begin"
"(check-ranges who_2688 vec_2692 start_2693 stop*_2697 step_2695 len_2696)"
"(values vec_2692 start_2693 stop*_2697 step_2695)))))))"
"(define-values"
"(:vector-gen)"
"(lambda(v_2698 start_2699 stop_2700 step_2701)"
"(values"
"(lambda(i_2702)(unsafe-vector-ref v_2698 i_2702))"
"(if(= step_2701 1) add1(lambda(i_2703)(+ i_2703 step_2701)))"
" start_2699"
"(if(> step_2701 0)(lambda(i_2704)(< i_2704 stop_2700))(lambda(i_2705)(> i_2705 stop_2700)))"
" #f"
" #f)))"
"(define-values"
"(in-vector)"
"(case-lambda"
"((v_2706)(in-vector v_2706 0 #f 1))"
"((v_2707 start_2708)(in-vector v_2707 start_2708 #f 1))"
"((v_2709 start_2710 stop_2711)(in-vector v_2709 start_2710 stop_2711 1))"
"((v_2712 start_2713 stop_2714 step_2715)"
"(let-values(((v_2716 start_2717 stop_2718 step_2719)"
"                  (normalise-inputs 'in-vector \"vector\" vector? vector-length v_2712 start_2713 stop_2714 step_2715)))"
"(make-do-sequence(lambda()(:vector-gen v_2716 start_2717 stop_2718 step_2719)))))))"
"(define-values"
"(:string-gen)"
"(lambda(v_2720 start_2721 stop_2722 step_2723)"
"(values"
"(lambda(i_2724)(string-ref v_2720 i_2724))"
"(if(= step_2723 1) add1(lambda(i_2725)(+ i_2725 step_2723)))"
" start_2721"
"(if(> step_2723 0)(lambda(i_2726)(< i_2726 stop_2722))(lambda(i_2727)(> i_2727 stop_2722)))"
" #f"
" #f)))"
"(define-values"
"(in-string)"
"(case-lambda"
"((v_2728)(in-string v_2728 0 #f 1))"
"((v_2729 start_2730)(in-string v_2729 start_2730 #f 1))"
"((v_2731 start_2732 stop_2733)(in-string v_2731 start_2732 stop_2733 1))"
"((v_2734 start_2735 stop_2736 step_2737)"
"(let-values(((v_2738 start_2739 stop_2740 step_2741)"
"                  (normalise-inputs 'in-string \"string\" string? string-length v_2734 start_2735 stop_2736 step_2737)))"
"(make-do-sequence(lambda()(:string-gen v_2738 start_2739 stop_2740 step_2741)))))))"
"(define-values"
"(:bytes-gen)"
"(lambda(v_2742 start_2743 stop_2744 step_2745)"
"(values"
"(lambda(i_2746)(unsafe-bytes-ref v_2742 i_2746))"
"(if(= step_2745 1) add1(lambda(i_2747)(+ i_2747 step_2745)))"
" start_2743"
"(if(> step_2745 0)(lambda(i_2748)(< i_2748 stop_2744))(lambda(i_2749)(> i_2749 stop_2744)))"
" #f"
" #f)))"
"(define-values"
"(in-bytes)"
"(case-lambda"
"((v_2750)(in-bytes v_2750 0 #f 1))"
"((v_2751 start_2752)(in-bytes v_2751 start_2752 #f 1))"
"((v_2753 start_2754 stop_2755)(in-bytes v_2753 start_2754 stop_2755 1))"
"((v_2756 start_2757 stop_2758 step_2759)"
"(let-values(((v_2760 start_2761 stop_2762 step_2763)"
"                  (normalise-inputs 'in-bytes \"bytes\" bytes? bytes-length v_2756 start_2757 stop_2758 step_2759)))"
"(make-do-sequence(lambda()(:bytes-gen v_2760 start_2761 stop_2762 step_2763)))))))"
"(define-values"
"(:flvector-gen)"
"(lambda(v_2764 start_2765 stop_2766 step_2767)"
"(values"
"(lambda(i_2768)(unsafe-flvector-ref v_2764 i_2768))"
"(if(= step_2767 1) add1(lambda(i_2769)(+ i_2769 step_2767)))"
" start_2765"
"(if(> step_2767 0)(lambda(i_2770)(< i_2770 stop_2766))(lambda(i_2771)(> i_2771 stop_2766)))"
" #f"
" #f)))"
"(define-values"
"(:fxvector-gen)"
"(lambda(v_2772 start_2773 stop_2774 step_2775)"
"(values"
"(lambda(i_2776)(unsafe-fxvector-ref v_2772 i_2776))"
"(if(= step_2775 1) add1(lambda(i_2777)(+ i_2777 step_2775)))"
" start_2773"
"(if(> step_2775 0)(lambda(i_2778)(< i_2778 stop_2774))(lambda(i_2779)(> i_2779 stop_2774)))"
" #f"
" #f)))"
"(define-values"
"(in-value)"
"(lambda(v_2817)"
"(make-do-sequence"
"(lambda()(values(lambda(pos_2818) v_2817)(lambda(pos_2819) #f) #t(lambda(pos_2820) pos_2820) void void)))))"
"(define-values"
"(struct:do-stream make-do-stream do-stream? do-stream-ref do-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2940)((do-stream-ref v_2940 0)))"
"(lambda(v_2941)((do-stream-ref v_2941 1)))"
"(lambda(v_2942)((do-stream-ref v_2942 2))))))))"
"(define-values"
"(grow-vector)"
"(lambda(vec_2985)"
"(let-values(((n_2986)(vector-length vec_2985)))"
"(let-values(((new-vec_2987)(make-vector(* 2 n_2986))))"
"(begin(vector-copy! new-vec_2987 0 vec_2985 0 n_2986) new-vec_2987)))))"
"(define-values"
"(shrink-vector)"
"(lambda(vec_2988 i_2989)"
"(let-values(((new-vec_2990)(make-vector i_2989)))"
"(begin(vector-copy! new-vec_2990 0 vec_2988 0 i_2989) new-vec_2990))))"
"(void)"
"(void)"
"(define-values"
"(map2)"
"(let-values(((map_1)"
"(case-lambda"
"((f_2 l_3)"
"(if(if(procedure? f_2)(if(procedure-arity-includes? f_2 1)(list? l_3) #f) #f)"
"((letrec-values(((loop_4)"
"(lambda(l_5)"
"(if(null? l_5)"
"(let-values() null)"
"(let-values()(cons(f_2(car l_5))(loop_4(cdr l_5))))))))"
" loop_4)"
" l_3)"
"(map f_2 l_3)))"
"((f_6 l1_7 l2_8)"
"(if(if(procedure? f_6)"
"(if(procedure-arity-includes? f_6 2)"
"(if(list? l1_7)(if(list? l2_8)(=(length l1_7)(length l2_8)) #f) #f)"
" #f)"
" #f)"
"((letrec-values(((loop_9)"
"(lambda(l1_10 l2_11)"
"(if(null? l1_10)"
"(let-values() null)"
"(let-values()"
"(cons(f_6(car l1_10)(car l2_11))(loop_9(cdr l1_10)(cdr l2_11))))))))"
" loop_9)"
" l1_7"
" l2_8)"
"(map f_6 l1_7 l2_8)))"
"((f_12 l_13 . args_14)(apply map f_12 l_13 args_14)))))"
" map_1))"
"(define-values"
"(for-each2)"
"(let-values(((for-each_15)"
"(case-lambda"
"((f_16 l_17)"
"(if(if(procedure? f_16)(if(procedure-arity-includes? f_16 1)(list? l_17) #f) #f)"
"((letrec-values(((loop_18)"
"(lambda(l_19)"
"(if(null? l_19)"
"(let-values()(void))"
"(let-values()(begin(f_16(car l_19))(loop_18(cdr l_19))))))))"
" loop_18)"
" l_17)"
"(for-each f_16 l_17)))"
"((f_20 l1_21 l2_22)"
"(if(if(procedure? f_20)"
"(if(procedure-arity-includes? f_20 2)"
"(if(list? l1_21)(if(list? l2_22)(=(length l1_21)(length l2_22)) #f) #f)"
" #f)"
" #f)"
"((letrec-values(((loop_23)"
"(lambda(l1_24 l2_25)"
"(if(null? l1_24)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(f_20(car l1_24)(car l2_25))"
"(loop_23(cdr l1_24)(cdr l2_25))))))))"
" loop_23)"
" l1_21"
" l2_22)"
"(for-each f_20 l1_21 l2_22)))"
"((f_26 l_27 . args_28)(apply for-each f_26 l_27 args_28)))))"
" for-each_15))"
"(define-values"
"(andmap2)"
"(let-values(((andmap_29)"
"(case-lambda"
"((f_30 l_31)"
"(if(if(procedure? f_30)(if(procedure-arity-includes? f_30 1)(list? l_31) #f) #f)"
"(if(null? l_31)"
" #t"
"((letrec-values(((loop_32)"
"(lambda(l_33)"
"(if(null?(cdr l_33))"
"(let-values()(f_30(car l_33)))"
"(let-values()(if(f_30(car l_33))(loop_32(cdr l_33)) #f))))))"
" loop_32)"
" l_31))"
"(andmap f_30 l_31)))"
"((f_34 l1_35 l2_36)"
"(if(if(procedure? f_34)"
"(if(procedure-arity-includes? f_34 2)"
"(if(list? l1_35)(if(list? l2_36)(=(length l1_35)(length l2_36)) #f) #f)"
" #f)"
" #f)"
"(if(null? l1_35)"
" #t"
"((letrec-values(((loop_37)"
"(lambda(l1_38 l2_39)"
"(if(null?(cdr l1_38))"
"(let-values()(f_34(car l1_38)(car l2_39)))"
"(let-values()"
"(if(f_34(car l1_38)(car l2_39))"
"(loop_37(cdr l1_38)(cdr l2_39))"
" #f))))))"
" loop_37)"
" l1_35"
" l2_36))"
"(andmap f_34 l1_35 l2_36)))"
"((f_40 l_41 . args_42)(apply andmap f_40 l_41 args_42)))))"
" andmap_29))"
"(define-values"
"(ormap2)"
"(let-values(((ormap_43)"
"(case-lambda"
"((f_44 l_45)"
"(if(if(procedure? f_44)(if(procedure-arity-includes? f_44 1)(list? l_45) #f) #f)"
"(if(null? l_45)"
" #f"
"((letrec-values(((loop_46)"
"(lambda(l_47)"
"(if(null?(cdr l_47))"
"(let-values()(f_44(car l_47)))"
"(let-values()"
"(let-values(((or-part_48)(f_44(car l_47))))"
"(if or-part_48 or-part_48(loop_46(cdr l_47)))))))))"
" loop_46)"
" l_45))"
"(ormap f_44 l_45)))"
"((f_49 l1_50 l2_51)"
"(if(if(procedure? f_49)"
"(if(procedure-arity-includes? f_49 2)"
"(if(list? l1_50)(if(list? l2_51)(=(length l1_50)(length l2_51)) #f) #f)"
" #f)"
" #f)"
"(if(null? l1_50)"
" #f"
"((letrec-values(((loop_52)"
"(lambda(l1_53 l2_54)"
"(if(null?(cdr l1_53))"
"(let-values()(f_49(car l1_53)(car l2_54)))"
"(let-values()"
"(let-values(((or-part_55)(f_49(car l1_53)(car l2_54))))"
"(if or-part_55 or-part_55(loop_52(cdr l1_53)(cdr l2_54)))))))))"
" loop_52)"
" l1_50"
" l2_51))"
"(ormap f_49 l1_50 l2_51)))"
"((f_56 l_57 . args_58)(apply ormap f_56 l_57 args_58)))))"
" ormap_43))"
"(void)"
"(void)"
"(void)"
"(void)"
"(void)"
"(void)"
"(define-values"
"(hash-keys)"
"(lambda(h_1)"
"((letrec-values(((loop_2)"
"(lambda(pos_3)"
"(if pos_3(cons(hash-iterate-key h_1 pos_3)(loop_2(hash-iterate-next h_1 pos_3))) null))))"
" loop_2)"
"(hash-iterate-first h_1))))"
"(void)"
"(void)"
"(define-values"
"(sort7.1)"
"(lambda(cache-keys?2_1 cache-keys?4_2 key1_3 key3_4 lst5_5 less?6_6)"
"(let-values()"
"(let-values()"
"(let-values(((getkey_9)(if key3_4 key1_3 #f)))"
"(let-values(((cache-keys?_10)(if cache-keys?4_2 cache-keys?2_1 #f)))"
"(let-values()"
"(begin"
"                (if (list? lst_7) (void) (let-values () (raise-argument-error 'sort \"list?\" lst_7)))"
"(if(if(procedure? less?_8)(procedure-arity-includes? less?_8 2) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'sort \"(any/c any/c . -> . any/c)\" less?_8)))"
"(if(if getkey_9(not(if(procedure? getkey_9)(procedure-arity-includes? getkey_9 1) #f)) #f)"
"                  (let-values () (raise-argument-error 'sort \"(any/c . -> . any/c)\" getkey_9))"
"(void))"
"(if getkey_9(sort lst_7 less?_8 getkey_9 cache-keys?_10)(sort lst_7 less?_8))))))))))"
" (define-values (bad-list) (lambda (who_76 orig-l_77) (raise-mismatch-error who_76 \"not a proper list: \" orig-l_77)))"
"(define-values"
"(bad-item)"
"  (lambda (who_78 a_79 orig-l_80) (raise-mismatch-error who_78 \"non-pair found in list: \" a_79 \" in \" orig-l_80)))"
"(define-values"
"(1/assq 1/assv 1/assoc assf)"
"(let-values()"
"(let-values()"
"(let-values(((assq_97)"
"(lambda(x_101 l_102)"
"((letrec-values(((loop_103)"
"(lambda(l_104 t_105)"
"(if(pair? l_104)"
"(let-values()"
"(let-values(((a_106)(unsafe-car l_104)))"
"(if(pair? a_106)"
"(if(eq? x_101(unsafe-car a_106))"
" a_106"
"(let-values(((l_107)(unsafe-cdr l_104)))"
"(if(pair? l_107)"
"(let-values()"
"(let-values(((a_108)(unsafe-car l_107)))"
"(if(pair? a_108)"
"(if(eq? x_101(unsafe-car a_108))"
" a_108"
"(let-values(((t_109)(unsafe-cdr t_105))"
"((l_110)(unsafe-cdr l_107)))"
"(if(eq? l_110 t_109)"
"(bad-list 'assq l_102)"
"(loop_103 l_110 t_109))))"
"(bad-item 'assq a_108 l_102))))"
"(if(null? l_107)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_102))))))"
"(bad-item 'assq a_106 l_102))))"
"(if(null? l_104)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_102)))))))"
" loop_103)"
" l_102"
" l_102)))"
"((assv_98)"
"(lambda(x_111 l_112)"
"((letrec-values(((loop_113)"
"(lambda(l_114 t_115)"
"(if(pair? l_114)"
"(let-values()"
"(let-values(((a_116)(unsafe-car l_114)))"
"(if(pair? a_116)"
"(if(eqv? x_111(unsafe-car a_116))"
" a_116"
"(let-values(((l_117)(unsafe-cdr l_114)))"
"(if(pair? l_117)"
"(let-values()"
"(let-values(((a_118)(unsafe-car l_117)))"
"(if(pair? a_118)"
"(if(eqv? x_111(unsafe-car a_118))"
" a_118"
"(let-values(((t_119)(unsafe-cdr t_115))"
"((l_120)(unsafe-cdr l_117)))"
"(if(eq? l_120 t_119)"
"(bad-list 'assv l_112)"
"(loop_113 l_120 t_119))))"
"(bad-item 'assv a_118 l_112))))"
"(if(null? l_117)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_112))))))"
"(bad-item 'assv a_116 l_112))))"
"(if(null? l_114)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_112)))))))"
" loop_113)"
" l_112"
" l_112)))"
"((assoc_99)"
"(case-lambda"
"((x_121 l_122)"
"((letrec-values(((loop_123)"
"(lambda(l_124 t_125)"
"(if(pair? l_124)"
"(let-values()"
"(let-values(((a_126)(unsafe-car l_124)))"
"(if(pair? a_126)"
"(if(equal? x_121(unsafe-car a_126))"
" a_126"
"(let-values(((l_127)(unsafe-cdr l_124)))"
"(if(pair? l_127)"
"(let-values()"
"(let-values(((a_128)(unsafe-car l_127)))"
"(if(pair? a_128)"
"(if(equal? x_121(unsafe-car a_128))"
" a_128"
"(let-values(((t_129)(unsafe-cdr t_125))"
"((l_130)(unsafe-cdr l_127)))"
"(if(eq? l_130 t_129)"
"(bad-list 'assoc l_122)"
"(loop_123 l_130 t_129))))"
"(bad-item 'assoc a_128 l_122))))"
"(if(null? l_127)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_122))))))"
"(bad-item 'assoc a_126 l_122))))"
"(if(null? l_124)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_122)))))))"
" loop_123)"
" l_122"
" l_122))"
"((x_131 l_132 is-equal?_133)"
"(begin"
"(if(if(procedure? is-equal?_133)(procedure-arity-includes? is-equal?_133 2) #f)"
"(void)"
"                          (let-values () (raise-argument-error 'assoc \"(any/c any/c . -> . any/c)\" is-equal?_133)))"
"((letrec-values(((loop_134)"
"(lambda(l_135 t_136)"
"(if(pair? l_135)"
"(let-values()"
"(let-values(((a_137)(unsafe-car l_135)))"
"(if(pair? a_137)"
"(if(is-equal?_133 x_131(unsafe-car a_137))"
" a_137"
"(let-values(((l_138)(unsafe-cdr l_135)))"
"(if(pair? l_138)"
"(let-values()"
"(let-values(((a_139)(unsafe-car l_138)))"
"(if(pair? a_139)"
"(if(is-equal?_133 x_131(unsafe-car a_139))"
" a_139"
"(let-values(((t_140)(unsafe-cdr t_136))"
"((l_141)(unsafe-cdr l_138)))"
"(if(eq? l_141 t_140)"
"(bad-list 'assoc l_132)"
"(loop_134 l_141 t_140))))"
"(bad-item 'assoc a_139 l_132))))"
"(if(null? l_138)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_132))))))"
"(bad-item 'assoc a_137 l_132))))"
"(if(null? l_135)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_132)))))))"
" loop_134)"
" l_132"
" l_132)))))"
"((assf_100)"
"(lambda(f_142 l_143)"
"(begin"
"(if(if(procedure? f_142)(procedure-arity-includes? f_142 1) #f)"
"(void)"
"                          (let-values () (raise-argument-error 'assf \"(any/c any/c . -> . any/c)\" f_142)))"
"((letrec-values(((loop_144)"
"(lambda(l_145 t_146)"
"(if(pair? l_145)"
"(let-values()"
"(let-values(((a_147)(unsafe-car l_145)))"
"(if(pair? a_147)"
"(if((lambda(__148 a_149)(f_142 a_149)) #f(unsafe-car a_147))"
" a_147"
"(let-values(((l_150)(unsafe-cdr l_145)))"
"(if(pair? l_150)"
"(let-values()"
"(let-values(((a_151)(unsafe-car l_150)))"
"(if(pair? a_151)"
"(if((lambda(__152 a_153)(f_142 a_153))"
" #f"
"(unsafe-car a_151))"
" a_151"
"(let-values(((t_154)(unsafe-cdr t_146))"
"((l_155)(unsafe-cdr l_150)))"
"(if(eq? l_155 t_154)"
"(bad-list 'assf l_143)"
"(loop_144 l_155 t_154))))"
"(bad-item 'assf a_151 l_143))))"
"(if(null? l_150)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_143))))))"
"(bad-item 'assf a_147 l_143))))"
"(if(null? l_145)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_143)))))))"
" loop_144)"
" l_143"
" l_143)))))"
"(values assq_97 assv_98 assoc_99 assf_100)))))"
"(define-values"
"(filter)"
"(lambda(f_195 list_196)"
"(begin"
"(if(if(procedure? f_195)(procedure-arity-includes? f_195 1) #f)"
"(void)"
"        (let-values () (raise-argument-error 'filter \"(any/c . -> . any/c)\" f_195)))"
"      (if (list? list_196) (void) (let-values () (raise-argument-error 'filter \"list?\" list_196)))"
"((letrec-values(((loop_197)"
"(lambda(l_198 result_199)"
"(if(null? l_198)"
"(alt-reverse result_199)"
"(loop_197(cdr l_198)(if(f_195(car l_198))(cons(car l_198) result_199) result_199))))))"
" loop_197)"
" list_196"
" null))))"
"(void)"
"(void)"
"(void)"
"(void)"
" (define-values (binary-or-text-desc) \"(or/c 'binary 'text)\")"
"(define-values"
"(open-input-file6.1)"
"(lambda(for-module?2_1 for-module?4_2 mode1_3 mode3_4 path5_5)"
"(let-values()"
"(let-values(((mode_7)(if mode3_4 mode1_3 'binary)))"
"(let-values(((for-module?_8)(if for-module?4_2 for-module?2_1 #f)))"
"(let-values()"
"(begin"
"(if(path-string? path_6)"
"(void)"
"                (let-values () (raise-argument-error 'open-input-file \"path-string?\" path_6)))"
"(if(memq mode_7 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-input-file binary-or-text-desc mode_7)))"
"(open-input-file path_6 mode_7(if for-module?_8 'module 'none)))))))))"
"(define-values"
"(call-with-input-file*61.1)"
"(lambda(mode57_199 mode58_200 path59_201 proc60_202)"
"(let-values()"
"(let-values()"
"(let-values(((mode_205)(if mode58_200 mode57_199 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_203)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file* \"path-string?\" path_203)))"
"(if(if(procedure? proc_204)(procedure-arity-includes? proc_204 1) #f)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file* \"(input-port? . -> . any)\" proc_204)))"
"(if(memq mode_205 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-input-file* binary-or-text-desc mode_205)))"
"(let-values(((p_206)(open-input-file path_203 mode_205)))"
"(dynamic-wind void(lambda()(proc_204 p_206))(lambda()(close-input-port p_206)))))))))))"
"(void)"
"(void)"
"(void)"
"(void)"
"(define-values(the-empty-hash) '#hash())"
"(define-values(the-empty-hasheq) '#hasheq())"
"(define-values(the-empty-hasheqv) '#hasheqv())"
"(define-values"
"(set)"
"(case-lambda"
"(() the-empty-hash)"
"(l_71"
"(let-values(((lst_72) l_71))"
"(begin"
"(if(list? lst_72)(void)(let-values()(in-list lst_72)))"
"((letrec-values(((for-loop_73)"
"(lambda(s_74 lst_75)"
"(if(pair? lst_75)"
"(let-values(((e_76)(unsafe-car lst_75)))"
"(let-values(((s_77)"
"(let-values()"
"(let-values(((s_79)(let-values()(hash-set s_78 e_76 #t))))"
"(values s_79)))))"
"(for-loop_73 s_77(unsafe-cdr lst_75))))"
" s_74))))"
" for-loop_73)"
" the-empty-hash"
" lst_72))))))"
"(define-values"
"(seteq)"
"(case-lambda"
"(() the-empty-hasheq)"
"(l_80"
"(let-values(((lst_81) l_80))"
"(begin"
"(if(list? lst_81)(void)(let-values()(in-list lst_81)))"
"((letrec-values(((for-loop_82)"
"(lambda(s_83 lst_84)"
"(if(pair? lst_84)"
"(let-values(((e_85)(unsafe-car lst_84)))"
"(let-values(((s_86)"
"(let-values()"
"(let-values(((s_88)(let-values()(hash-set s_87 e_85 #t))))"
"(values s_88)))))"
"(for-loop_82 s_86(unsafe-cdr lst_84))))"
" s_83))))"
" for-loop_82)"
" the-empty-hasheq"
" lst_81))))))"
"(define-values(seteqv)(lambda() the-empty-hasheqv))"
"(define-values(set?)(lambda(s_89)(hash? s_89)))"
"(define-values(set-empty?)(lambda(s_90)(zero?(hash-count s_90))))"
"(define-values(set-member?)(lambda(s_91 e_92)(hash-ref s_91 e_92 #f)))"
"(define-values(set-count)(lambda(s_93)(hash-count s_93)))"
"(define-values(set-add)(lambda(s_94 e_95)(hash-set s_94 e_95 #t)))"
"(define-values(set-remove)(lambda(s_96 e_97)(hash-remove s_96 e_97)))"
"(define-values(set-first)(lambda(s_98)(hash-iterate-key s_98(hash-iterate-first s_98))))"
"(define-values(subset?)(lambda(s1_99 s2_100)(hash-keys-subset? s1_99 s2_100)))"
"(define-values"
"(set=?)"
"(lambda(s1_101 s2_102)"
"(let-values(((or-part_103)(eq? s1_101 s2_102)))"
"(if or-part_103"
" or-part_103"
"(if(=(hash-count s1_101)(hash-count s2_102))(hash-keys-subset? s1_101 s2_102) #f)))))"
"(define-values"
"(set-subtract)"
"(lambda(s1_104 s2_105)"
"(let-values()"
"(begin"
"(if((lambda(ht_107)(if(hash? ht_107)(immutable? ht_107) #f)) ht_106)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_106)))"
"((letrec-values(((for-loop_108)"
"(lambda(s1_109 i_110)"
"(if i_110"
"(let-values(((k_111)(unsafe-immutable-hash-iterate-key ht_106 i_110)))"
"(let-values(((s1_112)"
"(let-values()"
"(let-values(((s1_114)(let-values()(hash-remove s1_113 k_111))))"
"(values s1_114)))))"
"(for-loop_108 s1_112(unsafe-immutable-hash-iterate-next ht_106 i_110))))"
" s1_109))))"
" for-loop_108)"
" s1_104"
"(unsafe-immutable-hash-iterate-first ht_106))))))"
"(define-values"
"(set-union)"
"(lambda(s1_115 s2_116)"
"(if(<(set-count s1_115)(set-count s2_116))"
"(set-union s2_116 s1_115)"
"(let-values()"
"(begin"
"(if((lambda(ht_118)(if(hash? ht_118)(immutable? ht_118) #f)) ht_117)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_117)))"
"((letrec-values(((for-loop_119)"
"(lambda(s1_120 i_121)"
"(if i_121"
"(let-values(((k_122)(unsafe-immutable-hash-iterate-key ht_117 i_121)))"
"(let-values(((s1_123)"
"(let-values()"
"(let-values(((s1_125)(let-values()(hash-set s1_124 k_122 #t))))"
"(values s1_125)))))"
"(for-loop_119 s1_123(unsafe-immutable-hash-iterate-next ht_117 i_121))))"
" s1_120))))"
" for-loop_119)"
" s1_115"
"(unsafe-immutable-hash-iterate-first ht_117)))))))"
"(define-values"
"(set-intersect)"
"(lambda(s1_126 s2_127)"
"(if(<(set-count s1_126)(set-count s2_127))"
"(set-intersect s2_127 s1_126)"
"(let-values()"
"(begin"
"(if((lambda(ht_129)(if(hash? ht_129)(immutable? ht_129) #f)) ht_128)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_128)))"
"((letrec-values(((for-loop_130)"
"(lambda(s_131 i_132)"
"(if i_132"
"(let-values(((k_133)(unsafe-immutable-hash-iterate-key ht_128 i_132)))"
"(let-values(((s_134)"
"(let-values()"
"(let-values(((s_136)"
"(let-values()"
"(if(hash-ref s1_126 k_133 #f)"
" s_135"
"(hash-remove s_135 k_133)))))"
"(values s_136)))))"
"(for-loop_130 s_134(unsafe-immutable-hash-iterate-next ht_128 i_132))))"
" s_131))))"
" for-loop_130)"
" s2_127"
"(unsafe-immutable-hash-iterate-first ht_128)))))))"
"(define-values"
"(set-partition)"
"(lambda(s_137 pred_138 empty-y-set_139 empty-n-set_140)"
"(let-values()"
"(begin"
"(if((lambda(ht_142)(if(hash? ht_142)(immutable? ht_142) #f)) ht_141)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_141)))"
"((letrec-values(((for-loop_143)"
"(lambda(y_144 n_145 i_146)"
"(if i_146"
"(let-values(((v_147)(unsafe-immutable-hash-iterate-key ht_141 i_146)))"
"(let-values(((y_148 n_149)"
"(let-values()"
"(let-values(((y_152 n_153)"
"(let-values()"
"(if(pred_138 v_147)"
"(values(set-add y_150 v_147) n_151)"
"(values y_150(set-add n_151 v_147))))))"
"(values y_152 n_153)))))"
"(for-loop_143 y_148 n_149(unsafe-immutable-hash-iterate-next ht_141 i_146))))"
"(values y_144 n_145)))))"
" for-loop_143)"
" empty-y-set_139"
" empty-n-set_140"
"(unsafe-immutable-hash-iterate-first ht_141))))))"
"(define-values"
"(set->list)"
"(lambda(s_154)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if((lambda(ht_156)(if(hash? ht_156)(immutable? ht_156) #f)) ht_155)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_155)))"
"((letrec-values(((for-loop_157)"
"(lambda(fold-var_158 i_159)"
"(if i_159"
"(let-values(((k_160)(unsafe-immutable-hash-iterate-key ht_155 i_159)))"
"(let-values(((fold-var_161)"
"(let-values()"
"(let-values(((fold-var_163)"
"(let-values()"
"(cons(let-values() k_160) fold-var_162))))"
"(values fold-var_163)))))"
"(for-loop_157 fold-var_161(unsafe-immutable-hash-iterate-next ht_155 i_159))))"
" fold-var_158))))"
" for-loop_157)"
" null"
"(unsafe-immutable-hash-iterate-first ht_155)))))))"
"(define-values"
"(list->set)"
"(lambda(l_164)"
"(let-values()"
"(begin"
"(if(list? lst_165)(void)(let-values()(in-list lst_165)))"
"((letrec-values(((for-loop_166)"
"(lambda(table_167 lst_168)"
"(if(pair? lst_168)"
"(let-values(((k_169)(unsafe-car lst_168)))"
"(let-values(((table_170)"
"(let-values()"
"(let-values(((table_172)"
"(let-values()"
"(let-values(((key_173 val_174)"
"(let-values()"
"(values(let-values() k_169) #t))))"
"(hash-set table_171 key_173 val_174)))))"
"(values table_172)))))"
"(for-loop_166 table_170(unsafe-cdr lst_168))))"
" table_167))))"
" for-loop_166)"
" '#hash()"
" lst_165)))))"
"(define-values"
"(list->seteq)"
"(lambda(l_175)"
"(let-values()"
"(begin"
"(if(list? lst_176)(void)(let-values()(in-list lst_176)))"
"((letrec-values(((for-loop_177)"
"(lambda(table_178 lst_179)"
"(if(pair? lst_179)"
"(let-values(((k_180)(unsafe-car lst_179)))"
"(let-values(((table_181)"
"(let-values()"
"(let-values(((table_183)"
"(let-values()"
"(let-values(((key_184 val_185)"
"(let-values()"
"(values(let-values() k_180) #t))))"
"(hash-set table_182 key_184 val_185)))))"
"(values table_183)))))"
"(for-loop_177 table_181(unsafe-cdr lst_179))))"
" table_178))))"
" for-loop_177)"
" '#hasheq()"
" lst_176)))))"
"(void)"
"(void)"
"(define-values(prop:serialize serialize? serialize-ref)(make-struct-type-property 'serialize))"
"(define-values"
"(prop:serialize-fill! serialize-fill!? serialize-fill!-ref)"
"(make-struct-type-property 'serialize-fill!))"
"(define-values(prop:reach-scopes reach-scopes? reach-scopes-ref)(make-struct-type-property 'reach-scopes))"
"(define-values"
"(prop:scope-with-bindings scope-with-bindings? scope-with-bindings-ref)"
"(make-struct-type-property 'scope-with-bindings))"
"(define-values"
"(prop:binding-reach-scopes binding-reach-scopes? binding-reach-scopes-ref)"
"(make-struct-type-property 'binding-reach-scopes))"
"(void)"
"(void)"
"(define-values"
"(1/module-path?)"
"(lambda(v_1)"
"(let-values(((or-part_2)(if(pair? v_1)(if(eq?(car v_1) 'submod)(submodule-module-path? v_1) #f) #f)))"
"(if or-part_2 or-part_2(root-module-path? v_1)))))"
"(define-values"
"(root-module-path?)"
"(lambda(v_3)"
"(let-values(((or-part_4)(path? v_3)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(if(string? v_3)(string-module-path? v_3) #f)))"
"(if or-part_5"
" or-part_5"
"(let-values(((or-part_6)(if(symbol? v_3)(symbol-module-path? v_3) #f)))"
"(if or-part_6"
" or-part_6"
"(if(pair? v_3)"
"(let-values(((tmp_7)(car v_3)))"
"(if(equal? tmp_7 'quote)"
"(let-values()(if(pair?(cdr v_3))(if(symbol?(cadr v_3))(null?(cddr v_3)) #f) #f))"
"(if(equal? tmp_7 'lib)"
"(let-values()(lib-module-path? v_3))"
"(if(equal? tmp_7 'file)"
"(let-values()"
"(if(pair?(cdr v_3))"
"(if(string?(cadr v_3))(if(path-string?(cadr v_3))(null?(cddr v_3)) #f) #f)"
" #f))"
"(if(equal? tmp_7 'planet)(let-values()(planet-module-path? v_3))(let-values() #f))))))"
" #f)))))))))"
"(define-values"
"(submodule-module-path?)"
"(lambda(v_8)"
"(if(pair?(cdr v_8))"
"(if(list? v_8)"
"        (if (let-values (((or-part_9) (equal? (cadr v_8) \"..\")))"
"(if or-part_9"
" or-part_9"
"                (let-values (((or-part_10) (equal? (cadr v_8) \".\")))"
"(if or-part_10 or-part_10(root-module-path?(cadr v_8))))))"
"(let-values(((lst_11)(cddr v_8)))"
"(begin"
"(if(list? lst_11)(void)(let-values()(in-list lst_11)))"
"((letrec-values(((for-loop_12)"
"(lambda(result_13 lst_14)"
"(if(pair? lst_14)"
"(let-values(((e_15)(unsafe-car lst_14)))"
"(let-values(((result_16)"
"(let-values()"
"(let-values(((result_18)"
"(let-values()"
"(let-values()"
"                                                                        (let-values (((or-part_19) (equal? e_15 \"..\")))"
"(if or-part_19 or-part_19(symbol? e_15)))))))"
"(values result_18)))))"
"(if(not((lambda x_20(not result_16)) e_15))"
"(for-loop_12 result_16(unsafe-cdr lst_14))"
" result_16)))"
" result_13))))"
" for-loop_12)"
" #t"
" lst_11)))"
" #f)"
" #f)"
" #f)))"
"(define-values"
"(string-module-path?)"
"(lambda(v_21)"
"(let-values(((...arse-module-path.rkt:44:2_22) module-path-string?12.1)"
"((temp14_24) #t)"
"((temp15_25) #t)"
"((temp16_26) #t))"
"(module-path-string?10.1 temp14_24 #t temp16_26 #t #f #f temp15_25 #t v13_23))))"
"(define-values"
"(symbol-module-path?)"
"(lambda(v_27)"
"(let-values(((temp17_28)(symbol->string v_27)))(module-path-string?10.1 #f #f #f #f #f #f #f #f temp17_28))))"
"(define-values"
"(lib-module-path?)"
"(lambda(v_29)"
"(if(list? v_29)"
"(if(pair?(cdr v_29))"
"((letrec-values(((loop_30)"
"(lambda(v_31 first?_32)"
"(let-values(((or-part_33)(null? v_31)))"
"(if or-part_33"
" or-part_33"
"(if(string?(car v_31))"
"(if(let-values(((...arse-module-path.rkt:55:18_34) module-path-string?12.1)"
"((temp18_35)(car v_31)))"
"(module-path-string?10.1 #f #f first?20_37 #t #f #f first?19_36 #t temp18_35))"
"(loop_30(cdr v_31) #f)"
" #f)"
" #f))))))"
" loop_30)"
"(cdr v_29)"
" #t)"
" #f)"
" #f)))"
"(define-values"
"(planet-module-path?)"
"(lambda(v_38)"
"(if(list? v_38)"
"(let-values(((tmp_39)(length v_38)))"
"(if(equal? tmp_39 1)"
"(let-values() #f)"
"(if(equal? tmp_39 2)"
"(let-values()"
"(let-values(((e_40)(cadr v_38)))"
"(if(string? e_40)"
"(let-values()"
"(let-values(((...arse-module-path.rkt:68:12_41) module-path-string?12.1)"
"((temp22_43) #t)"
"((temp23_44) #t))"
"(module-path-string?10.1 #f #f temp23_44 #t temp22_43 #t #f #f e21_42)))"
"(if(symbol? e_40)"
"(let-values()"
"(let-values(((...arse-module-path.rkt:72:12_45) module-path-string?12.1)"
"((temp24_46)(symbol->string e_40))"
"((temp25_47) #t))"
"(module-path-string?10.1 #f #f #f #f temp25_47 #t #f #f temp24_46)))"
"(let-values() #f)))))"
"(let-values()"
"(let-values(((file_48)(cadr v_38)))"
"(let-values(((pkg_49)(caddr v_38)))"
"(let-values(((subs_50)(cdddr v_38)))"
"(if file_48"
"(if(let-values(((...arse-module-path.rkt:80:15_51) module-path-string?12.1)"
"((temp27_53) #t)"
"((temp28_54) #t))"
"(module-path-string?10.1 #f #f temp28_54 #t #f #f temp27_53 #t file26_52))"
"(if(if(list? pkg_49)"
"(if(<= 2(length pkg_49) 4)"
"(if(planet-user/pkg-string?(car pkg_49))"
"(if(planet-user/pkg-string?(cadr pkg_49))"
"(let-values(((or-part_55)(null?(cddr pkg_49))))"
"(if or-part_55"
" or-part_55"
"(let-values(((or-part_56)(planet-version-number?(caddr pkg_49))))"
"(if or-part_56"
" or-part_56"
"(let-values(((or-part_57)(null?(cddr pkg_49))))"
"(if or-part_57"
" or-part_57"
"(planet-version-minor-spec?(cadddr pkg_49))))))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(if(list? lst_58)(void)(let-values()(in-list lst_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(result_60 lst_61)"
"(if(pair? lst_61)"
"(let-values(((sub_62)(unsafe-car lst_61)))"
"(let-values(((result_63)"
"(let-values()"
"(let-values(((result_65)"
"(let-values()"
"(let-values()"
"(let-values()"
"(module-path-string?10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" sub29_66))))))"
"(values result_65)))))"
"(if(not((lambda x_67(not result_63)) sub_62))"
"(for-loop_59 result_63(unsafe-cdr lst_61))"
" result_63)))"
" result_60))))"
" for-loop_59)"
" #t"
" lst_58)))"
" #f)"
" #f)"
" #f))))))))"
" #f)))"
"(define-values(planet-version-number?)(lambda(v_68)(exact-nonnegative-integer? v_68)))"
"(define-values"
"(planet-version-minor-spec?)"
"(lambda(v_69)"
"(let-values(((or-part_70)(planet-version-number? v_69)))"
"(if or-part_70"
" or-part_70"
"(if(pair? v_69)"
"(if(list? v_69)"
"(if(= 2(length v_69))"
"(let-values(((tmp_71)(car v_69)))"
"(if(if(equal? tmp_71 '=) #t(if(equal? tmp_71 '+) #t(equal? tmp_71 '-)))"
"(let-values()(planet-version-number?(cadr v_69)))"
"(let-values()(if(planet-version-number?(car v_69))(planet-version-number?(cadr v_69)) #f))))"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(module-path-string?10.1)"
"(lambda(dots-dir-ok?2_72"
" dots-dir-ok?6_73"
" file-end-ok?4_74"
" file-end-ok?8_75"
" for-planet?1_76"
" for-planet?5_77"
" just-file-ok?3_78"
" just-file-ok?7_79"
" v9_80)"
"(let-values()"
"(let-values(((for-planet?_82)(if for-planet?5_77 for-planet?1_76 #f)))"
"(let-values(((dots-dir-ok?_83)(if dots-dir-ok?6_73 dots-dir-ok?2_72 #f)))"
"(let-values(((just-file-ok?_84)(if just-file-ok?7_79 just-file-ok?3_78 #f)))"
"(let-values(((file-end-ok?_85)(if file-end-ok?8_75 file-end-ok?4_74 #f)))"
"(let-values()"
"(let-values(((len_86)(string-length v_81)))"
"(if(positive? len_86)"
"(if(not(char=? '#\\/(string-ref v_81 0)))"
"(if(not(char=? '#\\/(string-ref v_81(sub1 len_86))))"
"(let-values(((start-package-version-pos_87 end-package-version-pos_88)"
"(if for-planet?_82(check-planet-part v_81 len_86)(values 0 0))))"
"(if start-package-version-pos_87"
"((letrec-values(((loop_89)"
"(lambda(i_90 prev-was-slash?_91 saw-slash?_92 saw-dot?_93)"
"(if(not(zero? i_90))"
"(let-values()"
"(let-values(((c_94)(string-ref v_81 i_90)))"
"(if(char=? c_94 '#\\/)"
"(let-values()"
"(if(not prev-was-slash?_91)"
"(loop_89(sub1 i_90) #t #t saw-dot?_93)"
" #f))"
"(if(char=? c_94 '#\\.)"
"(let-values()"
"(if(if(<(add1 i_90) len_86)"
"(if(not(char=?(string-ref v_81(add1 i_90)) '#\\/))"
"(not(char=?(string-ref v_81(add1 i_90)) '#\\.))"
" #f)"
" #f)"
"(if(not saw-slash?_92)"
"(loop_89(sub1 i_90) #f saw-slash?_92 #t)"
" #f)"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93)))"
"(if(let-values(((or-part_95)(plain-char? c_94)))"
"(if or-part_95"
" or-part_95"
"(if(char=? c_94 '#\\%)"
"(if(<(+ i_90 2) len_86)"
"(hex-sequence? v_81(add1 i_90))"
" #f)"
" #f)))"
"(let-values()"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93))"
"(if(if(>= i_90 start-package-version-pos_87)"
"(< i_90 end-package-version-pos_88)"
" #f)"
"(let-values()"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93))"
"(let-values() #f)))))))"
"(let-values()"
"(if(not"
"(if(not just-file-ok?_84)"
"(if saw-dot?_93(not saw-slash?_92) #f)"
" #f))"
"(let-values()"
"(if or-part_96"
" or-part_96"
"((letrec-values(((loop_97)"
"(lambda(i_98)"
"(if(= i_98 len_86)"
"(let-values() #t)"
"(if(char=?(string-ref v_81 i_98) '#\\.)"
"(let-values()"
"(if(not"
"(let-values(((or-part_99)"
"(="
" len_86"
"(add1 i_98))))"
"(if or-part_99"
" or-part_99"
"(char=?"
"(string-ref"
" v_81"
"(add1 i_98))"
" '#\\/))))"
"(if(not"
"(if(char=?"
"(string-ref"
" v_81"
"(add1 i_98))"
" '#\\.)"
"(let-values(((or-part_100)"
"(="
" len_86"
"(+"
" i_98"
" 2))))"
"(if or-part_100"
" or-part_100"
"(char=?"
"(string-ref"
" v_81"
"(+ i_98 2))"
" '#\\/)))"
" #f))"
"(loop_97"
"((letrec-values(((loop_101)"
"(lambda(i_102)"
"(if(char=?"
" '#\\."
"(string-ref"
" v_81"
" i_102))"
"(loop_101"
"(add1"
" i_102))"
" i_102))))"
" loop_101)"
" i_98))"
" #f)"
" #f))"
"(let-values()"
"(loop_97(add1 i_98))))))))"
" loop_97)"
" 0)))"
" #f))))))"
" loop_89)"
"(sub1 len_86)"
" #f"
"(not file-end-ok?_85)"
" #f)"
" #f))"
" #f)"
" #f)"
" #f))))))))))"
"(define-values"
"(unpack11.1$1)"
"(lambda(given-kws_103 given-args_104 v9_105)"
"(let-values(((dots-dir-ok?6_106)(if(pair? given-kws_103)(eq? '#:dots-dir-ok?(car given-kws_103)) #f)))"
"(let-values(((dots-dir-ok?2_107)(if dots-dir-ok?6_106(car given-args_104)(void)))"
"((given-kws_108)(if dots-dir-ok?6_106(cdr given-kws_103) given-kws_103))"
"((given-args_109)(if dots-dir-ok?6_106(cdr given-args_104) given-args_104)))"
"(let-values(((file-end-ok?8_110)(if(pair? given-kws_108)(eq? '#:file-end-ok?(car given-kws_108)) #f)))"
"(let-values(((file-end-ok?4_111)(if file-end-ok?8_110(car given-args_109)(void)))"
"((given-kws_112)(if file-end-ok?8_110(cdr given-kws_108) given-kws_108))"
"((given-args_113)(if file-end-ok?8_110(cdr given-args_109) given-args_109)))"
"(let-values(((for-planet?5_114)(if(pair? given-kws_112)(eq? '#:for-planet?(car given-kws_112)) #f)))"
"(let-values(((for-planet?1_115)(if for-planet?5_114(car given-args_113)(void)))"
"((given-kws_116)(if for-planet?5_114(cdr given-kws_112) given-kws_112))"
"((given-args_117)(if for-planet?5_114(cdr given-args_113) given-args_113)))"
"(let-values(((just-file-ok?7_118)(pair? given-kws_116)))"
"(let-values(((just-file-ok?3_119)(if just-file-ok?7_118(car given-args_117)(void))))"
"(module-path-string?10.1"
" dots-dir-ok?2_107"
" dots-dir-ok?6_106"
" file-end-ok?4_111"
" file-end-ok?8_110"
" for-planet?1_115"
" for-planet?5_114"
" just-file-ok?3_119"
" just-file-ok?7_118"
" v9_105)))))))))))"
"(define-values"
"(module-path-string?12.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_120 given-argc_121)"
"(if(= given-argc_121 3)"
"(let-values()"
"(let-values(((l1_123)(if(null? l1_122) l1_122(if(eq?(car l1_122) '#:dots-dir-ok?)(cdr l1_122) l1_122))))"
"(let-values()"
"(let-values(((l1_125)"
"(if(null? l1_124) l1_124(if(eq?(car l1_124) '#:file-end-ok?)(cdr l1_124) l1_124))))"
"(let-values()"
"(let-values(((l1_127)"
"(if(null? l1_126) l1_126(if(eq?(car l1_126) '#:for-planet?)(cdr l1_126) l1_126))))"
"(let-values()"
"(let-values(((l1_129)"
"(if(null? l1_128)"
" l1_128"
"(if(eq?(car l1_128) '#:just-file-ok?)(cdr l1_128) l1_128))))"
"(null? l1_129)))))))))"
" #f))"
"(case-lambda((given-kws_130 given-args_131 v_132)(unpack11.1$1 given-kws_130 given-args_131 v_132)))"
" null"
" '(#:dots-dir-ok? #:file-end-ok? #:for-planet? #:just-file-ok?)"
"(let-values(((module-path-string?_133)(case-lambda((v_134)(unpack11.1$1 null null v_134)))))"
" module-path-string?_133)))"
"(define-values"
"(planet-user/pkg-string?)"
"(lambda(v_135)"
"(if(string? v_135)"
"(let-values(((len_136)(string-length v_135)))"
"(if(positive? len_136)"
"(let-values(((vec_137 len_138)"
"(let-values()"
"(begin"
"(if(string? vec_140)(void)(let-values()(in-string vec_140)))"
"(values vec_140(string-length vec_140)))))"
"((start_139) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_139)(void)(let-values()(in-naturals start_139)))"
"((letrec-values(((for-loop_141)"
"(lambda(result_142 pos_143 pos_144)"
"(if(if(unsafe-fx< pos_143 len_138) #t #f)"
"(let-values(((c_145)(string-ref vec_137 pos_143)))"
"(let-values(((result_147)"
"(let-values()"
"(let-values(((result_149)"
"(let-values()"
"(let-values()"
"(let-values(((or-part_150)"
"(plain-char? c_145)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_151)"
"(char=? '#\\. c_145)))"
"(if or-part_151"
" or-part_151"
"(if(char=? '#\\% c_145)"
"(if(< i_146(- len_136 2))"
"(hex-sequence? v_135(add1 i_146))"
" #f)"
" #f)))))))))"
"(values result_149)))))"
"(if(if(not((lambda x_152(not result_147)) c_145))"
"(not((lambda x_153(not result_147)) i_146))"
" #f)"
"(for-loop_141 result_147(unsafe-fx+ 1 pos_143)(+ pos_144 1))"
" result_147)))"
" result_142))))"
" for-loop_141)"
" #t"
" 0"
" start_139)))"
" #f))"
" #f)))"
"(define-values"
"(plain-char?)"
"(lambda(c_154)"
"(let-values(((or-part_155)(char<=? '#\\a c_154 '#\\z)))"
"(if or-part_155"
" or-part_155"
"(let-values(((or-part_156)(char<=? '#\\A c_154 '#\\Z)))"
"(if or-part_156"
" or-part_156"
"(let-values(((or-part_157)(char<=? '#\\0 c_154 '#\\9)))"
"(if or-part_157"
" or-part_157"
"(let-values(((or-part_158)(char=? '#\\- c_154)))"
"(if or-part_158"
" or-part_158"
"(let-values(((or-part_159)(char=? '#\\_ c_154)))"
"(if or-part_159 or-part_159(char=? '#\\+ c_154)))))))))))))"
"(define-values"
"(hex-sequence?)"
"(lambda(s_160 i_161)"
"(let-values(((c1_162)(string-ref s_160 i_161)))"
"(let-values(((c2_163)(string-ref s_160(add1 i_161))))"
"(if(hex-char? c1_162)"
"(if(hex-char? c2_163)"
"(let-values(((c_164)(integer->char(+(*(hex-char->integer c1_162) 16)(hex-char->integer c2_163)))))"
"(not(plain-char? c_164)))"
" #f)"
" #f)))))"
"(define-values"
"(hex-char?)"
"(lambda(c_165)"
"(let-values(((or-part_166)(char<=? '#\\a c_165 '#\\f)))(if or-part_166 or-part_166(char<=? '#\\0 c_165 '#\\9)))))"
"(define-values"
"(hex-char->integer)"
"(lambda(c_167)"
"(if(char<=? '#\\a c_167 '#\\f)"
"(let-values()(-(char->integer c_167)(+ 10(char->integer '#\\a))))"
"(if(char<=? '#\\A c_167 '#\\F)"
"(let-values()(-(char->integer c_167)(+ 10(char->integer '#\\A))))"
"(let-values()(-(char->integer c_167)(char->integer '#\\0)))))))"
"(define-values"
"(check-planet-part)"
"(lambda(v_168 len_169)"
"(let-values(((start-package-version-pos_170 end-package-version-pos_171 colon1-pos_172 colon2-pos_173)"
"((letrec-values(((loop_174)"
"(lambda(j_175"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" colon2-pos_179)"
"(if(= j_175 len_169)"
"(let-values()"
"(values"
" start-package-version-pos_176"
"(let-values()(if or-part_180 or-part_180 j_175))"
" colon1-pos_178"
" colon2-pos_179))"
"(let-values()"
"(let-values(((tmp_181)(string-ref v_168 j_175)))"
"(if(equal? tmp_181 '#\\/)"
"(let-values()"
"(loop_174"
"(add1 j_175)"
"(let-values()(if or-part_182 or-part_182(add1 j_175)))"
"(if start-package-version-pos_176"
"(let-values()(if or-part_183 or-part_183 j_175))"
" #f)"
" colon1-pos_178"
" colon2-pos_179))"
"(if(equal? tmp_181 '#\\:)"
"(let-values()"
"(if colon2-pos_179"
"(let-values()(values #f #f #f #f))"
"(if colon1-pos_178"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" j_175))"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" j_175"
" #f)))))"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" colon2-pos_179))))))))))"
" loop_174)"
" 0"
" #f"
" #f"
" #f"
" #f)))"
"(if(if start-package-version-pos_170"
"(if(> end-package-version-pos_171 start-package-version-pos_170)"
"(let-values(((or-part_184)(not colon2-pos_173)))"
"(if or-part_184 or-part_184(<(add1 colon2-pos_173) end-package-version-pos_171)))"
" #f)"
" #f)"
"(let-values()"
"(if colon1-pos_172"
"(let-values()"
"(let-values(((colon1-end_185)(let-values()(if or-part_186 or-part_186 end-package-version-pos_171))))"
"(if(if(integer-sequence? v_168(add1 colon1-pos_172) colon1-end_185)"
"(let-values(((or-part_187)(not colon2-pos_173)))"
"(if or-part_187"
" or-part_187"
"(let-values(((tmp_188)(string-ref v_168(add1 colon2-pos_173))))"
"(if(equal? tmp_188 '#\\=)"
"(let-values()(integer-sequence? v_168(+ 2 colon2-pos_173) end-package-version-pos_171))"
"(if(if(equal? tmp_188 '#\\>) #t(equal? tmp_188 '#\\<))"
"(let-values()"
"(if(if(<(+ 2 colon2-pos_173) end-package-version-pos_171)"
"(char=? '#\\=(string-ref v_168(+ colon2-pos_173 2)))"
" #f)"
"(let-values()"
"(integer-sequence? v_168(+ 3 colon2-pos_173) end-package-version-pos_171))"
"(let-values()"
"(integer-sequence? v_168(+ 2 colon2-pos_173) end-package-version-pos_171))))"
"(let-values()"
"(integer-range-sequence?"
" v_168"
"(add1 colon2-pos_173)"
" end-package-version-pos_171)))))))"
" #f)"
"(let-values()(values colon1-pos_172 end-package-version-pos_171))"
"(let-values()(values #f #f)))))"
"(let-values()(values 0 0))))"
"(let-values()(values #f #f))))))"
"(define-values"
"(integer-sequence?)"
"(lambda(s_189 start_190 end_191)"
"(if(< start_190 end_191)"
"(let-values(((inc_194) 1))"
"(begin"
"(if(if(real? start_192)(if(real? end_193)(real? inc_194) #f) #f)"
"(void)"
"(let-values()(in-range start_192 end_193 inc_194)))"
"((letrec-values(((for-loop_195)"
"(lambda(result_196 pos_197)"
"(if(< pos_197 end_193)"
"(let-values()"
"(let-values(((result_199)"
"(let-values()"
"(let-values(((result_201)"
"(let-values()"
"(let-values()"
"(char<=? '#\\0(string-ref s_189 i_198) '#\\9)))))"
"(values result_201)))))"
"(if(not((lambda x_202(not result_199)) i_198))"
"(for-loop_195 result_199(+ pos_197 inc_194))"
" result_199)))"
" result_196))))"
" for-loop_195)"
" #t"
" start_192)))"
" #f)))"
"(define-values"
"(integer-range-sequence?)"
"(lambda(s_203 start_204 end_205)"
"(if(< start_204 end_205)"
"(if(let-values(((inc_208) 1))"
"(begin"
"(if(if(real? start_206)(if(real? end_207)(real? inc_208) #f) #f)"
"(void)"
"(let-values()(in-range start_206 end_207 inc_208)))"
"((letrec-values(((for-loop_209)"
"(lambda(result_210 pos_211)"
"(if(< pos_211 end_207)"
"(let-values()"
"(let-values(((result_213)"
"(let-values()"
"(let-values(((result_215)"
"(let-values()"
"(let-values()"
"(let-values(((c_216)(string-ref s_203 i_212)))"
"(let-values(((or-part_217)"
"(char=? c_216 '#\\-)))"
"(if or-part_217"
" or-part_217"
"(char<=? '#\\0 c_216 '#\\9))))))))"
"(values result_215)))))"
"(if(not((lambda x_218(not result_213)) i_212))"
"(for-loop_209 result_213(+ pos_211 inc_208))"
" result_213)))"
" result_210))))"
" for-loop_209)"
" #t"
" start_206)))"
"(>="
" 1"
"(let-values(((inc_221) 1))"
"(begin"
"(if(if(real? start_219)(if(real? end_220)(real? inc_221) #f) #f)"
"(void)"
"(let-values()(in-range start_219 end_220 inc_221)))"
"((letrec-values(((for-loop_222)"
"(lambda(result_223 pos_224)"
"(if(< pos_224 end_220)"
"(let-values()"
"(let-values(((result_226)"
"(let-values()"
"(let-values(((result_228)"
"(let-values()"
"(+"
" result_227"
"(let-values()"
"(if(char=?(string-ref s_203 i_225) '#\\-)"
" 1"
" 0))))))"
"(values result_228)))))"
"(for-loop_222 result_226(+ pos_224 inc_221))))"
" result_223))))"
" for-loop_222)"
" 0"
" start_219))))"
" #f)"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(struct:weak-intern-table weak-intern-table1.1 weak-intern-table? weak-intern-table-box)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'weak-intern-table"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'weak-intern-table)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'box))))"
"(define-values"
"(struct:table table2.1 table? table-ht table-count table-prune-at)"
"(let-values(((struct:_21 make-_22 ?_23 -ref_24 -set!_25)"
"(let-values()"
"(let-values()(make-struct-type 'table #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'table)))))"
"(values"
" struct:_21"
" make-_22"
" ?_23"
"(make-struct-field-accessor -ref_24 0 'ht)"
"(make-struct-field-accessor -ref_24 1 'count)"
"(make-struct-field-accessor -ref_24 2 'prune-at))))"
"(define-values(make-weak-intern-table)(lambda()(weak-intern-table1.1(box(table2.1(hasheqv) 0 128)))))"
"(define-values"
"(weak-intern!)"
"(lambda(tt_51 v_52)"
"(let-values(((b_53)(weak-intern-table-box tt_51)))"
"(let-values(((t_54)(unbox b_53)))"
"(let-values(((code_55)(equal-hash-code v_52)))"
"(let-values(((vals_56)(hash-ref(table-ht t_54) code_55 null)))"
"(let-values(((or-part_57)"
"(let-values()"
"(begin"
"(if(list? lst_58)(void)(let-values()(in-list lst_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(result_60 lst_61)"
"(if(pair? lst_61)"
"(let-values(((b_62)(unsafe-car lst_61)))"
"(let-values(((result_63)"
"(let-values()"
"(let-values(((result_65)"
"(let-values()"
"(let-values()"
"(let-values(((bv_66)"
"(weak-box-value"
" b_62)))"
"(if(equal? bv_66 v_52)"
" bv_66"
" #f))))))"
"(values result_65)))))"
"(if(not((lambda x_67 result_63) b_62))"
"(for-loop_59 result_63(unsafe-cdr lst_61))"
" result_63)))"
" result_60))))"
" for-loop_59)"
" #f"
" lst_58)))))"
"(if or-part_57"
" or-part_57"
"(let-values(((pruned-t_68)(if(=(table-count t_54)(table-prune-at t_54))(prune-table t_54) t_54)))"
"(let-values(((ht_69)(table-ht pruned-t_68)))"
"(let-values(((new-t_70)"
"(table2.1"
"(hash-set ht_69 code_55(cons(make-weak-box v_52)(hash-ref ht_69 code_55 null)))"
"(add1(table-count pruned-t_68))"
"(table-prune-at pruned-t_68))))"
"(let-values(((or-part_71)(if(box-cas! b_53 t_54 new-t_70) v_52 #f)))"
"(if or-part_71 or-part_71(weak-intern! tt_51 v_52))))))))))))))"
"(define-values"
"(prune-table)"
"(lambda(t_72)"
"(let-values(((new-ht_73)"
"(let-values(((ht_75)(table-ht t_72)))"
"(begin"
"(if((lambda(ht_76)(hash? ht_76)) ht_75)(void)(let-values()(default-in-hash ht_75)))"
"((letrec-values(((for-loop_77)"
"(lambda(table_78 i_79)"
"(if i_79"
"(let-values(((k_80 vals_81)(hash-iterate-key+value ht_75 i_79)))"
"(let-values(((table_82)"
"(let-values(((new-vals_83)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_84)"
"(void)"
"(let-values()(in-list lst_84)))"
"((letrec-values(((for-loop_85)"
"(lambda(fold-var_86"
" lst_87)"
"(if(pair? lst_87)"
"(let-values(((b_88)"
"(unsafe-car"
" lst_87)))"
"(let-values(((fold-var_89)"
"(let-values()"
"(if(weak-box-value"
" b_88)"
"(let-values()"
"(let-values(((fold-var_92)"
"(let-values()"
"(cons"
"(let-values()"
" b_88)"
" fold-var_91))))"
"(values"
" fold-var_92)))"
" fold-var_90))))"
"(for-loop_85"
" fold-var_89"
"(unsafe-cdr"
" lst_87))))"
" fold-var_86))))"
" for-loop_85)"
" null"
" lst_84))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_93)"
"(lambda(table_94)"
"(let-values()"
"(let-values(((table_95)"
"(let-values()"
"(if(pair?"
" new-vals_83)"
"(let-values()"
"(let-values(((table_98)"
"(let-values()"
"(let-values(((key_99"
" val_100)"
"(let-values()"
"(values"
" k_80"
" new-vals_83))))"
"(hash-set"
" table_97"
" key_99"
" val_100)))))"
"(values"
" table_98)))"
" table_96))))"
" table_95)))))"
" for-loop_93)"
" table_78)))))"
"(for-loop_77 table_82(hash-iterate-next ht_75 i_79))))"
" table_78))))"
" for-loop_77)"
" '#hash()"
"(hash-iterate-first ht_75))))))"
"(let-values(((count_74)"
"(let-values()"
"(begin"
"(if((lambda(ht_102)(hash? ht_102)) ht_101)(void)(let-values()(default-in-hash ht_101)))"
"((letrec-values(((for-loop_103)"
"(lambda(result_104 i_105)"
"(if i_105"
"(let-values(((k_106 vals_107)(hash-iterate-key+value ht_101 i_105)))"
"(let-values(((result_108)"
"(let-values()"
"(let-values(((result_110)"
"(let-values()"
"(+"
" result_109"
"(let-values()(length vals_107))))))"
"(values result_110)))))"
"(for-loop_103 result_108(hash-iterate-next ht_101 i_105))))"
" result_104))))"
" for-loop_103)"
" 0"
"(hash-iterate-first ht_101))))))"
"(table2.1 new-ht_73 count_74(max 128(* 2 count_74)))))))"
"(void)"
"(void)"
"(define-values"
"(struct:resolved-module-path resolved-module-path1.1 1/resolved-module-path? 1/resolved-module-path-name)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'resolved-module-path"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(r_34 ser-push!_35 state_36)"
"(begin"
"(ser-push!_35 'tag '#:resolved-module-path)"
"(ser-push!_35(1/resolved-module-path-name r_34)))))"
"(cons"
" prop:custom-write"
"(lambda(r_37 port_38 mode_39)"
"(begin"
"                           (if mode_39 (let-values () (write-string \"#<resolved-module-path:\" port_38)) (void))"
"                           (fprintf port_38 \"~a\" (format-resolved-module-path-name (1/resolved-module-path-name r_37)))"
"                           (if mode_39 (let-values () (write-string \">\" port_38)) (void)))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_40 b_41 eql?_42)"
"(eql?_42(1/resolved-module-path-name a_40)(1/resolved-module-path-name b_41)))"
"(lambda(a_43 hash-code_44)(hash-code_44(1/resolved-module-path-name a_43)))"
"(lambda(a_45 hash-code_46)(hash-code_46(1/resolved-module-path-name a_45))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'resolved-module-path)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'name))))"
"(define-values"
"(format-resolved-module-path-name)"
"(lambda(p_48)"
"(if(path? p_48)"
"      (let-values () (string-append \"\\\"\" (path->string p_48) \"\\\"\"))"
"(if(symbol? p_48)"
"        (let-values () (format \"'~s\" p_48))"
"(let-values()"
"(format"
"           \"(submod ~a~a)\""
"(format-resolved-module-path-name(car p_48))"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((lst_49)(cdr p_48)))"
"(begin"
"(if(list? lst_49)(void)(let-values()(in-list lst_49)))"
"((letrec-values(((for-loop_50)"
"(lambda(fold-var_51 lst_52)"
"(if(pair? lst_52)"
"(let-values(((i_53)(unsafe-car lst_52)))"
"(let-values(((fold-var_54)"
"(let-values()"
"(let-values(((fold-var_56)"
"(let-values()"
"(cons"
"                                                                          (let-values () (format \" ~s\" i_53))"
" fold-var_55))))"
"(values fold-var_56)))))"
"(for-loop_50 fold-var_54(unsafe-cdr lst_52))))"
" fold-var_51))))"
" for-loop_50)"
" null"
" lst_49)))))))))))"
"(define-values"
"(resolved-module-path-root-name)"
"(lambda(r_57)"
"(let-values(((name_58)(1/resolved-module-path-name r_57)))(if(pair? name_58)(car name_58) name_58))))"
"(define-values(resolved-module-paths)(make-weak-intern-table))"
"(define-values"
"(1/make-resolved-module-path)"
"(lambda(p_59)"
"(begin"
"(if(let-values(((or-part_60)(symbol? p_59)))"
"(if or-part_60"
" or-part_60"
"(let-values(((or-part_61)(if(path? p_59)(complete-path? p_59) #f)))"
"(if or-part_61"
" or-part_61"
"(if(pair? p_59)"
"(if(pair?(cdr p_59))"
"(if(list? p_59)"
"(if(let-values(((or-part_62)(symbol?(car p_59))))"
"(if or-part_62 or-part_62(if(path?(car p_59))(complete-path?(car p_59)) #f)))"
"(let-values(((lst_63)(cdr p_59)))"
"(begin"
"(if(list? lst_63)(void)(let-values()(in-list lst_63)))"
"((letrec-values(((for-loop_64)"
"(lambda(result_65 lst_66)"
"(if(pair? lst_66)"
"(let-values(((s_67)(unsafe-car lst_66)))"
"(let-values(((result_68)"
"(let-values()"
"(let-values(((result_70)"
"(let-values()"
"(let-values()(symbol? s_67)))))"
"(values result_70)))))"
"(if(not((lambda x_71(not result_68)) s_67))"
"(for-loop_64 result_68(unsafe-cdr lst_66))"
" result_68)))"
" result_65))))"
" for-loop_64)"
" #t"
" lst_63)))"
" #f)"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-resolved-module-path"
"(string-append"
"            \"(or/c symbol?\\n\""
"            \"      (and/c path? complete-path?)\\n\""
"            \"      (cons/c (or/c symbol?\\n\""
"            \"                    (and/c path? complete-path?))\\n\""
"            \"              (non-empty-listof symbol?)))\")"
" p_59)))"
"(weak-intern! resolved-module-paths(resolved-module-path1.1 p_59)))))"
"(define-values"
"(resolved-module-path->module-path)"
"(lambda(r_72)"
"(let-values(((name_73)(1/resolved-module-path-name r_72)))"
"(let-values(((root-name_74)(if(pair? name_73)(car name_73) name_73)))"
"(let-values(((root-mod-path_75)(if(path? root-name_74) root-name_74(list 'quote root-name_74))))"
"(if(pair? name_73)(list* 'submod root-mod-path_75(cdr name_73)) root-mod-path_75))))))"
"(define-values"
"(struct:module-path-index"
" module-path-index2.1"
" 1/module-path-index?"
" module-path-index-path"
" module-path-index-base"
" module-path-index-resolved"
" module-path-index-shift-cache"
" set-module-path-index-resolved!"
" set-module-path-index-shift-cache!)"
"(let-values(((struct:_76 make-_77 ?_78 -ref_79 -set!_80)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-path-index"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(r_132 port_133 mode_134)"
"(begin"
"                           (write-string \"#<module-path-index\" port_133)"
"(if(top-level-module-path-index? r_132)"
"                             (let-values () (fprintf port_133 \":top-level\"))"
"(if(module-path-index-path r_132)"
"(let-values()"
"(let-values(((l_135)"
"((letrec-values(((loop_136)"
"(lambda(r_137)"
"(if(not r_137)"
"(let-values() null)"
"(if(1/resolved-module-path? r_137)"
"                                                                       (let-values () (list \"+\" (format \"~a\" r_137)))"
"(if(module-path-index-path r_137)"
"(let-values()"
"(cons"
"(format"
"                                                                             \"~.s\""
"(module-path-index-path r_137))"
"(loop_136(module-path-index-base r_137))))"
"(if(module-path-index-resolved r_137)"
"(let-values()"
"(list"
"                                                                              \"+\""
"(format"
"                                                                               \"~a\""
"(module-path-index-resolved r_137))))"
"(let-values() null))))))))"
" loop_136)"
" r_132)))"
"(fprintf"
" port_133"
"                                    \":~.a\""
"(apply"
" string-append"
"(car l_135)"
"(alt-reverse"
"(let-values(((lst_138)(cdr l_135)))"
"(begin"
"(if(list? lst_138)(void)(let-values()(in-list lst_138)))"
"((letrec-values(((for-loop_139)"
"(lambda(fold-var_140 lst_141)"
"(if(pair? lst_141)"
"(let-values(((i_142)(unsafe-car lst_141)))"
"(let-values(((fold-var_143)"
"(let-values()"
"(let-values(((fold-var_145)"
"(let-values()"
"(cons"
"(let-values()"
"(format"
"                                                                                                      \" ~a\""
" i_142))"
" fold-var_144))))"
"(values fold-var_145)))))"
"(for-loop_139 fold-var_143(unsafe-cdr lst_141))))"
" fold-var_140))))"
" for-loop_139)"
" null"
" lst_138))))))))"
"(if(module-path-index-resolved r_132)"
"                                 (let-values () (fprintf port_133 \"=~a\" (module-path-index-resolved r_132)))"
"(void))))"
"                           (write-string \">\" port_133))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_146 b_147 eql?_148)"
"(if(eql?_148(module-path-index-path a_146)(module-path-index-path b_147))"
"(eql?_148(module-path-index-base a_146)(module-path-index-base b_147))"
" #f))"
"(lambda(a_149 hash-code_150)"
"(+"
"(hash-code_150(module-path-index-path a_149))"
"(hash-code_150(module-path-index-base a_149))))"
"(lambda(a_151 hash-code_152)"
"(+"
"(hash-code_152(module-path-index-path a_151))"
"(hash-code_152(module-path-index-base a_151)))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-path-index)))))"
"(values"
" struct:_76"
" make-_77"
" ?_78"
"(make-struct-field-accessor -ref_79 0 'path)"
"(make-struct-field-accessor -ref_79 1 'base)"
"(make-struct-field-accessor -ref_79 2 'resolved)"
"(make-struct-field-accessor -ref_79 3 'shift-cache)"
"(make-struct-field-mutator -set!_80 2 'resolved)"
"(make-struct-field-mutator -set!_80 3 'shift-cache))))"
"(define-values"
"(deserialize-module-path-index)"
"(case-lambda"
"((path_153 base_154)(1/module-path-index-join path_153 base_154))"
"((name_155)(make-self-module-path-index(1/make-resolved-module-path name_155)))"
"(() top-level-module-path-index)))"
"(define-values"
"(1/module-path-index-resolve)"
"(let-values(((module-path-index-resolve6_156)"
"(lambda(mpi5_157 load?3_158 load?4_159)"
"(let-values()"
"(let-values(((load?_161)(if load?4_159 load?3_158 #f)))"
"(let-values()"
"(begin"
"(if(1/module-path-index? mpi_160)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'module-path-index-resolve \"module-path-index?\" mpi_160)))"
"(let-values(((or-part_162)(module-path-index-resolved mpi_160)))"
"(if or-part_162"
" or-part_162"
"(let-values(((mod-name_163)"
"((1/current-module-name-resolver)"
"(module-path-index-path mpi_160)"
"(module-path-index-resolve/maybe"
"(module-path-index-base mpi_160)"
" load?_161)"
" #f"
" load?_161)))"
"(begin"
"(if(1/resolved-module-path? mod-name_163)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-resolve"
"                                       \"current module name resolver's result is not a resolved module path\""
"                                       \"result\""
" mod-name_163)))"
"(set-module-path-index-resolved! mpi_160 mod-name_163)"
" mod-name_163)))))))))))"
"(case-lambda"
"((mpi_164)(module-path-index-resolve6_156 mpi_164 #f #f))"
"((mpi_165 load?3_166)(module-path-index-resolve6_156 mpi_165 load?3_166 #t)))))"
"(define-values"
"(module-path-index-unresolve)"
"(lambda(mpi_167)"
"(if(module-path-index-resolved mpi_167)"
"(let-values()"
"(let-values(((path_168 base_169)(1/module-path-index-split mpi_167)))"
"(1/module-path-index-join path_168 base_169)))"
"(let-values() mpi_167))))"
"(define-values"
"(1/module-path-index-join)"
"(let-values(((module-path-index-join12_170)"
"(lambda(mod-path10_171 base11_172 submod8_173 submod9_174)"
"(let-values()"
"(let-values()"
"(let-values(((submod_177)(if submod9_174 submod8_173 #f)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_178)(not mod-path_175)))"
"(if or-part_178 or-part_178(1/module-path? mod-path_175)))"
"(void)"
"(let-values()"
"                                (raise-argument-error 'module-path-index-join \"(or/c #f module-path?)\" mod-path_175)))"
"(if(let-values(((or-part_179)(not base_176)))"
"(if or-part_179"
" or-part_179"
"(let-values(((or-part_180)(1/resolved-module-path? base_176)))"
"(if or-part_180 or-part_180(1/module-path-index? base_176)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                 \"(or/c #f resolved-module-path? module-path-index?)\""
" base_176)))"
"(if(let-values(((or-part_181)(not submod_177)))"
"(if or-part_181"
" or-part_181"
"(if(pair? submod_177)(if(list? submod_177)(andmap2 symbol? submod_177) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                 \"(or/c #f (non-empty-listof symbol?))\""
" submod_177)))"
"(if(if(not mod-path_175) base_176 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                 \"cannot combine #f path with non-#f base\""
"                                 \"given base\""
" base_176))"
"(void))"
"(if(if submod_177 mod-path_175 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                 \"cannot combine #f submodule list with non-#f module path\""
"                                 \"given module path\""
" mod-path_175"
"                                 \"given submodule list\""
" submod_177))"
"(void))"
"(if submod_177"
"(let-values()"
"(make-self-module-path-index"
"(1/make-resolved-module-path(cons generic-module-name submod_177))))"
"(let-values()"
"(let-values(((keep-base_182)"
"((letrec-values(((loop_183)"
"(lambda(mod-path_184)"
"(if(path? mod-path_184)"
"(let-values() #f)"
"(if(if(pair? mod-path_184)"
"(eq? 'quote(car mod-path_184))"
" #f)"
"(let-values() #f)"
"(if(symbol? mod-path_184)"
"(let-values() #f)"
"(if(if(pair? mod-path_184)"
"(eq? 'submod(car mod-path_184))"
" #f)"
"(let-values()(loop_183(cadr mod-path_184)))"
"(let-values() base_176))))))))"
" loop_183)"
" mod-path_175)))"
"(module-path-index2.1 mod-path_175 keep-base_182 #f #f))))))))))))"
"(case-lambda"
"((mod-path_185 base_186)(module-path-index-join12_170 mod-path_185 base_186 #f #f))"
"((mod-path_187 base_188 submod8_189)(module-path-index-join12_170 mod-path_187 base_188 submod8_189 #t)))))"
"(define-values"
"(module-path-index-resolve/maybe)"
"(lambda(base_190 load?_191)"
"(if(1/module-path-index? base_190)(1/module-path-index-resolve base_190 load?_191) base_190)))"
"(define-values"
"(1/module-path-index-split)"
"(lambda(mpi_192)"
"(begin"
"(if(1/module-path-index? mpi_192)"
"(void)"
"        (let-values () (raise-argument-error 'module-path-index-split \"module-path-index?\" mpi_192)))"
"(values(module-path-index-path mpi_192)(module-path-index-base mpi_192)))))"
"(define-values"
"(1/module-path-index-submodule)"
"(lambda(mpi_193)"
"(begin"
"(if(1/module-path-index? mpi_193)"
"(void)"
"        (let-values () (raise-argument-error 'module-path-index-submodule \"module-path-index?\" mpi_193)))"
"(if(not(module-path-index-path mpi_193))"
"(let-values(((r_194)(module-path-index-resolved mpi_193)))"
"(if r_194(let-values(((p_195)(1/resolved-module-path-name r_194)))(if(pair? p_195)(cdr p_195) #f)) #f))"
" #f))))"
"(define-values"
"(make-self-module-path-index)"
"(case-lambda"
"((name_196)(module-path-index2.1 #f #f name_196 #f))"
"((name_197 enclosing_198)"
"(make-self-module-path-index"
"(let-values(((name23_199) name_197)"
"((temp24_200)(if enclosing_198(1/module-path-index-resolve enclosing_198) #f)))"
"(build-module-name18.1 #f #f name23_199 temp24_200))))))"
"(define-values(generic-self-mpis)(make-weak-hash))"
"(define-values(generic-module-name) '|expanded module|)"
"(define-values"
"(make-generic-self-module-path-index)"
"(lambda(self_201)"
"(let-values(((r_202)(resolved-module-path-to-generic-resolved-module-path(module-path-index-resolved self_201))))"
"(let-values(((or-part_203)"
"(let-values(((e_204)(hash-ref generic-self-mpis r_202 #f)))"
"(if e_204(ephemeron-value e_204) #f))))"
"(if or-part_203"
" or-part_203"
"(let-values(((mpi_205)(module-path-index2.1 #f #f r_202 #f)))"
"(begin(hash-set! generic-self-mpis r_202(make-ephemeron r_202 mpi_205)) mpi_205)))))))"
"(define-values"
"(resolved-module-path-to-generic-resolved-module-path)"
"(lambda(r_206)"
"(let-values(((name_207)(1/resolved-module-path-name r_206)))"
"(1/make-resolved-module-path"
"(if(symbol? name_207) generic-module-name(cons generic-module-name(cdr name_207)))))))"
"(define-values"
"(imitate-generic-module-path-index!)"
"(lambda(mpi_208)"
"(let-values(((r_209)(module-path-index-resolved mpi_208)))"
"(if r_209"
"(let-values()"
"(set-module-path-index-resolved! mpi_208(resolved-module-path-to-generic-resolved-module-path r_209)))"
"(void)))))"
"(define-values"
"(module-path-index-shift)"
"(lambda(mpi_210 from-mpi_211 to-mpi_212)"
"(if(eq? mpi_210 from-mpi_211)"
"(let-values() to-mpi_212)"
"(let-values()"
"(let-values(((base_213)(module-path-index-base mpi_210)))"
"(if(not base_213)"
"(let-values() mpi_210)"
"(let-values()"
"(let-values(((shifted-base_214)(module-path-index-shift base_213 from-mpi_211 to-mpi_212)))"
"(if(eq? shifted-base_214 base_213)"
"(let-values() mpi_210)"
"(let-values(((c1_215)(shift-cache-ref(module-path-index-shift-cache shifted-base_214) mpi_210)))"
"(if c1_215"
" c1_215"
"(let-values()"
"(let-values(((shifted-mpi_216)"
"(module-path-index2.1(module-path-index-path mpi_210) shifted-base_214 #f #f)))"
"(begin"
"(shift-cache-set!(module-path-index-shift-cache! shifted-base_214) mpi_210 shifted-mpi_216)"
" shifted-mpi_216))))))))))))))"
"(define-values"
"(module-path-index-shift-cache!)"
"(lambda(mpi_217)"
"(let-values(((or-part_218)"
"(let-values(((cache_219)(module-path-index-shift-cache mpi_217)))"
"(if cache_219(if(weak-box-value cache_219) cache_219 #f) #f))))"
"(if or-part_218"
" or-part_218"
"(let-values(((cache_220)(make-weak-box(box '#hasheq()))))"
"(begin(set-module-path-index-shift-cache! mpi_217 cache_220) cache_220))))))"
"(define-values"
"(shift-cache-ref)"
"(lambda(cache_221 v_222)"
"(if cache_221"
"(let-values(((b_223)(weak-box-value cache_221)))(if b_223(hash-ref(unbox b_223) v_222 #f) #f))"
" #f)))"
"(define-values"
"(shift-cache-set!)"
"(lambda(cache_224 v_225 r_226)"
"(let-values(((b_227)(weak-box-value cache_224)))"
"(if b_227(let-values()(set-box! b_227(hash-set(unbox b_227) v_225 r_226)))(void)))))"
"(define-values(top-level-module-path-index)(make-self-module-path-index(1/make-resolved-module-path 'top-level)))"
"(define-values(top-level-module-path-index?)(lambda(mpi_228)(eq? top-level-module-path-index mpi_228)))"
"(define-values"
"(core-module-name-resolver)"
"(case-lambda"
"((name_231 from-namespace_232)(void))"
"((p_233 enclosing_234 source-stx-stx_235 load?_236)"
"(begin"
"(if(1/module-path? p_233)"
"(void)"
"        (let-values () (raise-argument-error 'core-module-name-resolver \"module-path?\" p_233)))"
"(if(let-values(((or-part_237)(not enclosing_234)))"
"(if or-part_237 or-part_237(1/resolved-module-path? enclosing_234)))"
"(void)"
"        (let-values () (raise-argument-error 'core-module-name-resolver \"resolved-module-path?\" enclosing_234)))"
"(if(if(list? p_233)(if(=(length p_233) 2)(if(eq? 'quote(car p_233))(symbol?(cadr p_233)) #f) #f) #f)"
"(let-values()(1/make-resolved-module-path(cadr p_233)))"
"        (if (if (list? p_233) (if (eq? 'submod (car p_233)) (equal? \"..\" (cadr p_233)) #f) #f)"
"(let-values()"
"(let-values(((lst_238)(cdr p_233)))"
"(begin"
"(if(list? lst_238)(void)(let-values()(in-list lst_238)))"
"((letrec-values(((for-loop_239)"
"(lambda(enclosing_240 lst_241)"
"(if(pair? lst_241)"
"(let-values(((s_242)(unsafe-car lst_241)))"
"(let-values(((enclosing_243)"
"(let-values()"
"(let-values(((enclosing_245)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:370:9_246)"
" build-module-name20.1)"
"((p27_249) p_233))"
"(build-module-name18.1"
" p27_249"
" #t"
" s25_247"
" enclosing26_248)))))"
"(values enclosing_245)))))"
"(for-loop_239 enclosing_243(unsafe-cdr lst_241))))"
" enclosing_240))))"
" for-loop_239)"
" enclosing_234"
" lst_238))))"
"          (if (if (list? p_233) (if (eq? 'submod (car p_233)) (equal? \".\" (cadr p_233)) #f) #f)"
"(let-values()"
"(let-values(((lst_250)(cddr p_233)))"
"(begin"
"(if(list? lst_250)(void)(let-values()(in-list lst_250)))"
"((letrec-values(((for-loop_251)"
"(lambda(enclosing_252 lst_253)"
"(if(pair? lst_253)"
"(let-values(((s_254)(unsafe-car lst_253)))"
"(let-values(((enclosing_255)"
"(let-values()"
"(let-values(((enclosing_257)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:375:9_258)"
" build-module-name20.1)"
"((p30_261) p_233))"
"(build-module-name18.1"
" p30_261"
" #t"
" s28_259"
" enclosing29_260)))))"
"(values enclosing_257)))))"
"(for-loop_251 enclosing_255(unsafe-cdr lst_253))))"
" enclosing_252))))"
" for-loop_251)"
" enclosing_234"
" lst_250))))"
"(if(if(list? p_233)(eq? 'submod(car p_233)) #f)"
"(let-values()"
"(let-values(((base_262)((1/current-module-name-resolver)(cadr p_233) enclosing_234 #f #f)))"
"(let-values(((lst_263)(cddr p_233)))"
"(begin"
"(if(list? lst_263)(void)(let-values()(in-list lst_263)))"
"((letrec-values(((for-loop_264)"
"(lambda(enclosing_265 lst_266)"
"(if(pair? lst_266)"
"(let-values(((s_267)(unsafe-car lst_266)))"
"(let-values(((enclosing_268)"
"(let-values()"
"(let-values(((enclosing_270)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:380:11_271)"
" build-module-name20.1)"
"((p33_274) p_233))"
"(build-module-name18.1"
" p33_274"
" #t"
" s31_272"
" enclosing32_273)))))"
"(values enclosing_270)))))"
"(for-loop_264 enclosing_268(unsafe-cdr lst_266))))"
" enclosing_265))))"
" for-loop_264)"
" base_262"
" lst_263)))))"
"              (let-values () (error 'core-module-name-resolver \"not a supported module path: ~v\" p_233))))))))))"
"(define-values"
"(build-module-name18.1)"
"(lambda(original14_275 original15_276 name16_277 enclosing17_278)"
"(let-values()"
"(let-values()"
"(let-values(((orig-name_281)(if original15_276 original14_275 name_279)))"
"(let-values()"
"(let-values(((enclosing-module-name_282)"
"(if enclosing_280(1/resolved-module-path-name enclosing_280) #f)))"
"(1/make-resolved-module-path"
"(if(not enclosing-module-name_282)"
"(let-values() name_279)"
"(if(symbol? enclosing-module-name_282)"
"(let-values()(list enclosing-module-name_282 name_279))"
"                   (if (equal? name_279 \"..\")"
"(let-values()"
"(if(symbol? enclosing-module-name_282)"
"                         (let-values () (error \"too many \\\"..\\\"s:\" orig-name_281))"
"(if(= 2(length enclosing-module-name_282))"
"(let-values()(car enclosing-module-name_282))"
"(let-values()(alt-reverse(cdr(alt-reverse enclosing-module-name_282)))))))"
"(let-values()(append enclosing-module-name_282(list name_279))))))))))))))"
"(define-values"
"(unpack19.1$2)"
"(lambda(given-kws_283 given-args_284 name16_285 enclosing17_286)"
"(let-values(((original15_287)(pair? given-kws_283)))"
"(let-values(((original14_288)(if original15_287(car given-args_284)(void))))"
"(build-module-name18.1 original14_288 original15_287 name16_285 enclosing17_286)))))"
"(define-values"
"(build-module-name20.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_289 given-argc_290)"
"(if(= given-argc_290 4)"
"(let-values()"
"(let-values(((l1_292)(if(null? l1_291) l1_291(if(eq?(car l1_291) '#:original)(cdr l1_291) l1_291))))"
"(null? l1_292)))"
" #f))"
"(case-lambda"
"((given-kws_293 given-args_294 name_295 enclosing_296)"
"(unpack19.1$2 given-kws_293 given-args_294 name_295 enclosing_296)))"
" null"
" '(#:original)"
"(let-values(((build-module-name_297)"
"(case-lambda((name_298 enclosing_299)(unpack19.1$2 null null name_298 enclosing_299)))))"
" build-module-name_297)))"
"(define-values"
"(1/current-module-name-resolver)"
"(make-parameter"
" core-module-name-resolver"
"(lambda(v_300)"
"(begin"
"(if(if(procedure? v_300)(if(procedure-arity-includes? v_300 2)(procedure-arity-includes? v_300 4) #f) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-name-resolver"
"            \"(and/c (procedure-arity-includes/c 2) (procedure-arity-includes/c 4))\""
" v_300)))"
" v_300))))"
"(define-values"
"(1/current-module-declare-name)"
"(make-parameter"
" #f"
"(lambda(r_301)"
"(begin"
"(if(let-values(((or-part_302)(not r_301)))(if or-part_302 or-part_302(1/resolved-module-path? r_301)))"
"(void)"
"         (let-values () (raise-argument-error 'current-module-declare-name \"(or/c #f resolved-module-path?)\" r_301)))"
" r_301))))"
"(define-values"
"(1/current-module-declare-source)"
"(make-parameter"
" #f"
"(lambda(s_303)"
"(begin"
"(if(let-values(((or-part_304)(not s_303)))"
"(if or-part_304"
" or-part_304"
"(let-values(((or-part_305)(symbol? s_303)))"
"(if or-part_305 or-part_305(if(path? s_303)(complete-path? s_303) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-declare-source"
"            \"(or/c #f symbol? (and/c path? complete-path?))\""
" s_303)))"
" s_303))))"
"(define-values"
"(substitute-module-declare-name)"
"(lambda(default-name_306)"
"(let-values(((current-name_307)(1/current-module-declare-name)))"
"(let-values(((root-name_308)"
"(if current-name_307"
"(resolved-module-path-root-name current-name_307)"
"(if(pair? default-name_306)(car default-name_306) default-name_306))))"
"(1/make-resolved-module-path"
"(if(pair? default-name_306)(cons root-name_308(cdr default-name_306)) root-name_308))))))"
"(void)"
"(void)"
"(define-values"
"(force/composable)"
"(lambda(root_98)"
"(let-values(((v_99)(unsafe-struct-ref root_98 0)))"
"(if(procedure? v_99)"
"(let-values()"
"(begin"
"(unsafe-struct-set! root_98 0(make-running(object-name v_99)))"
"(call-with-exception-handler"
"(lambda(e_100)(begin(unsafe-struct-set! root_98 0(make-reraise e_100)) e_100))"
"(lambda()"
"((letrec-values(((loop_101)"
"(lambda(v_102)"
"(if(composable-promise? v_102)"
"(let-values()"
"(let-values(((v*_103)(unsafe-struct-ref v_102 0)))"
"(begin"
"(unsafe-struct-set! v_102 0 root_98)"
"(if(procedure? v*_103)"
"(let-values()(loop_101(v*_103)))"
"(if(pair? v*_103)"
"(let-values()"
"(begin(unsafe-struct-set! root_98 0 v*_103)(unsafe-car v*_103)))"
"(let-values()(loop_101 v*_103)))))))"
"(if(promise? v_102)"
"(let-values()(begin(unsafe-struct-set! root_98 0 v_102)(force v_102)))"
"(let-values()(begin(unsafe-struct-set! root_98 0(list v_102)) v_102)))))))"
" loop_101)"
"(v_99))))))"
"(if(pair? v_99)"
"(let-values()(if(null?(unsafe-cdr v_99))(unsafe-car v_99)(apply values v_99)))"
"(if(composable-promise? v_99)"
"(let-values()(force/composable v_99))"
"(if(null? v_99)"
"(let-values()(values))"
"(if(promise? v_99)"
"(let-values()(force v_99))"
"                (let-values () (error 'force \"composable promise with invalid contents: ~e\" v_99))))))))))"
"(define-values"
"(reify-result)"
"(lambda(v_104)"
"(if(pair? v_104)"
"(let-values()(if(null?(unsafe-cdr v_104))(unsafe-car v_104)(apply values v_104)))"
"(if(null? v_104)"
"(let-values()(values))"
"(if(reraise? v_104)"
"(let-values()(v_104))"
"          (let-values () (error 'force \"promise with invalid contents: ~e\" v_104)))))))"
"(define-values"
"(force/generic)"
"(lambda(promise_105)"
"(reify-result"
"(let-values(((v_106)(unsafe-struct-ref promise_105 0)))"
"(if(procedure? v_106)"
"(begin"
"(unsafe-struct-set! promise_105 0(make-running(object-name v_106)))"
"(call-with-exception-handler"
"(lambda(e_107)(begin(unsafe-struct-set! promise_105 0(make-reraise e_107)) e_107))"
"(lambda()"
"(let-values(((vs_108)(call-with-values v_106 list)))"
"(begin(unsafe-struct-set! promise_105 0 vs_108) vs_108)))))"
" v_106)))))"
"(define-values"
"(force)"
"(lambda(promise_109)(if(promise? promise_109)((promise-forcer promise_109) promise_109) promise_109)))"
"(define-values"
"(promise-printer)"
"(lambda(promise_110 port_111 write?_112)"
"((letrec-values(((loop_113)"
"(lambda(v_114)"
"(if(reraise? v_114)"
"(let-values()"
"(let-values(((r_115)(reraise-val v_114)))"
"(if(exn? r_115)"
"(fprintf"
" port_111"
"                                 (if write?_112 \"#<promise!exn!~s>\" \"#<promise!exn!~a>\")"
"(exn-message r_115))"
"                                (fprintf port_111 (if write?_112 \"#<promise!raise!~s>\" \"#<promise!raise!~a>\") r_115))))"
"(if(running? v_114)"
"(let-values()"
"(let-values(((r_116)(running-name v_114)))"
"(if r_116"
"                                  (fprintf port_111 \"#<promise:!running!~a>\" r_116)"
"                                  (fprintf port_111 \"#<promise:!running>\"))))"
"(if(procedure? v_114)"
"(let-values()"
"(let-values(((c1_117)(object-name v_114)))"
"(if c1_117"
"                                    ((lambda (n_118) (fprintf port_111 \"#<promise:~a>\" n_118)) c1_117)"
"                                    (let-values () (display \"#<promise>\" port_111)))))"
"(if(promise? v_114)"
"(let-values()(loop_113(unsafe-struct-ref v_114 0)))"
"(if(null? v_114)"
"                                  (let-values () (fprintf port_111 \"#<promise!(values)>\"))"
"(if(null?(cdr v_114))"
"(let-values()"
"                                      (fprintf port_111 (if write?_112 \"#<promise!~s>\" \"#<promise!~a>\") (car v_114)))"
"(let-values()"
"(begin"
"                                        (display \"#<promise!(values\" port_111)"
"                                        (let-values (((fmt_119) (if write?_112 \" ~s\" \" ~a\")))"
"(for-each(lambda(x_120)(fprintf port_111 fmt_119 x_120)) v_114))"
"                                        (display \")>\" port_111))))))))))))"
" loop_113)"
"(unsafe-struct-ref promise_110 0))))"
"(define-values"
"(prop:force promise-forcer)"
"(let-values(((prop_121 pred?_122 get_123)"
"(make-struct-type-property"
" 'forcer"
"(lambda(v_124 info_125)"
"(begin"
"(if(if(procedure? v_124)(procedure-arity-includes? v_124 1) #f)"
"(void)"
"                       (let-values () (raise-argument-error 'prop:force \"(any/c . -> . any)\" v_124)))"
" v_124))"
" null"
" #t)))"
"(values prop_121 get_123)))"
"(define-values"
"(struct:promise make-promise promise? promise-val set-promise-val!)"
"(let-values(((struct:_126 make-_127 ?_128 -ref_129 -set!_130)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:force force/generic)(cons prop:custom-write promise-printer))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise)))))"
"(values"
" struct:_126"
" make-_127"
" ?_128"
"(make-struct-field-accessor -ref_129 0 'val)"
"(make-struct-field-mutator -set!_130 0 'val))))"
"(define-values"
"(struct:composable-promise make-composable-promise composable-promise?)"
"(let-values(((struct:_146 make-_147 ?_148 -ref_149 -set!_150)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'composable-promise"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force force/composable))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'composable-promise)))))"
"(values struct:_146 make-_147 ?_148)))"
"(define-values(delay) make-promise)"
"(define-values"
"(struct:reraise make-reraise reraise? reraise-val)"
"(let-values(((struct:_161 make-_162 ?_163 -ref_164 -set!_165)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'reraise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:procedure(lambda(this_182)(raise(reraise-val this_182)))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'reraise)))))"
"(values struct:_161 make-_162 ?_163(make-struct-field-accessor -ref_164 0 'val))))"
"(define-values"
"(struct:running make-running running? running-name)"
"(let-values(((struct:_183 make-_184 ?_185 -ref_186 -set!_187)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'running"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(this_208 port_209 write?_210)"
"                         (fprintf port_209 (if write?_210 \"#<running:~s>\" \"#<running:~a>\") (running-name this_208))))"
"(cons"
" prop:procedure"
"(lambda(this_211)"
"(let-values(((name_212)(running-name this_211)))"
"(if name_212"
"                             (error 'force \"reentrant promise `~.s'\" name_212)"
"                             (error 'force \"reentrant promise\"))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running)))))"
"(values struct:_183 make-_184 ?_185(make-struct-field-accessor -ref_186 0 'name))))"
"(void)"
"(void)"
"(void)"
"(void)"
"(define-values"
"(phase?)"
"(lambda(v_1)(let-values(((or-part_2)(not v_1)))(if or-part_2 or-part_2(exact-integer? v_1)))))"
"(define-values(phase+)(lambda(a_3 b_4)(if a_3(if b_4(+ a_3 b_4) #f) #f)))"
"(define-values(phase-)(lambda(a_5 b_6)(if a_5(if b_6(- a_5 b_6) #f) #f)))"
"(define-values(zero-phase?)(lambda(a_9)(eq? a_9 0)))"
"(define-values(label-phase?)(lambda(a_10)(not a_10)))"
" (define-values (phase?-string) \"(or/c exact-integer? #f)\")"
"(void)"
"(void)"
"(define-values"
"(struct:serialize-state"
" serialize-state1.1"
" serialize-state?"
" serialize-state-reachable-scopes"
" serialize-state-bindings-intern"
" serialize-state-bulk-bindings-intern"
" serialize-state-scopes"
" serialize-state-shifted-multi-scopes"
" serialize-state-mpi-shifts"
" serialize-state-context-triples"
" serialize-state-props"
" serialize-state-interned-props"
" serialize-state-syntax-context"
" serialize-state-sharing-syntaxes)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'serialize-state"
" #f"
" 11"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10)"
" #f"
" 'serialize-state)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'reachable-scopes)"
"(make-struct-field-accessor -ref_4 1 'bindings-intern)"
"(make-struct-field-accessor -ref_4 2 'bulk-bindings-intern)"
"(make-struct-field-accessor -ref_4 3 'scopes)"
"(make-struct-field-accessor -ref_4 4 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_4 5 'mpi-shifts)"
"(make-struct-field-accessor -ref_4 6 'context-triples)"
"(make-struct-field-accessor -ref_4 7 'props)"
"(make-struct-field-accessor -ref_4 8 'interned-props)"
"(make-struct-field-accessor -ref_4 9 'syntax-context)"
"(make-struct-field-accessor -ref_4 10 'sharing-syntaxes))))"
"(define-values"
"(make-serialize-state)"
"(lambda(reachable-scopes_71)"
"(serialize-state1.1"
" reachable-scopes_71"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(make-hash)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(box null)"
"(make-hasheq))))"
"(define-values"
"(intern-scopes)"
"(lambda(scs_72 state_73)"
"(let-values(((or-part_74)(hash-ref(serialize-state-scopes state_73) scs_72 #f)))"
"(if or-part_74 or-part_74(begin(hash-set!(serialize-state-scopes state_73) scs_72 scs_72) scs_72)))))"
"(define-values"
"(intern-shifted-multi-scopes)"
"(lambda(sms_75 state_76)"
"(let-values(((or-part_77)(hash-ref(serialize-state-shifted-multi-scopes state_76) sms_75 #f)))"
"(if or-part_77"
" or-part_77"
"(begin(hash-set!(serialize-state-shifted-multi-scopes state_76) sms_75 sms_75) sms_75)))))"
"(define-values"
"(intern-mpi-shifts)"
"(lambda(mpi-shifts_78 state_79)"
"(if(null? mpi-shifts_78)"
"(let-values() null)"
"(let-values()"
"(let-values(((tail_80)(intern-mpi-shifts(cdr mpi-shifts_78) state_79)))"
"(let-values(((tail-table_81)"
"(let-values(((or-part_82)(hash-ref(serialize-state-mpi-shifts state_79) tail_80 #f)))"
"(if or-part_82"
" or-part_82"
"(let-values(((ht_83)(make-hasheq)))"
"(begin(hash-set!(serialize-state-mpi-shifts state_79) tail_80 ht_83) ht_83))))))"
"(let-values(((or-part_84)(hash-ref tail-table_81(car mpi-shifts_78) #f)))"
"(if or-part_84"
" or-part_84"
"(let-values(((v_85)(cons(car mpi-shifts_78) tail_80)))"
"(begin(hash-set! tail-table_81(car mpi-shifts_78) v_85) v_85))))))))))"
"(define-values"
"(intern-context-triple)"
"(lambda(scs_86 sms_87 mpi-shifts_88 state_89)"
"(let-values(((scs-ht_90)"
"(let-values(((or-part_92)(hash-ref(serialize-state-context-triples state_89) scs_86 #f)))"
"(if or-part_92"
" or-part_92"
"(let-values(((ht_93)(make-hasheq)))"
"(begin(hash-set!(serialize-state-context-triples state_89) scs_86 ht_93) ht_93))))))"
"(let-values(((sms-ht_91)"
"(let-values(((or-part_94)(hash-ref scs-ht_90 sms_87 #f)))"
"(if or-part_94"
" or-part_94"
"(let-values(((ht_95)(make-hasheq)))(begin(hash-set! scs-ht_90 sms_87 ht_95) ht_95))))))"
"(let-values(((or-part_96)(hash-ref sms-ht_91 mpi-shifts_88 #f)))"
"(if or-part_96"
" or-part_96"
"(let-values(((vec_97)(vector-immutable scs_86 sms_87 mpi-shifts_88)))"
"(begin(hash-set! sms-ht_91 mpi-shifts_88 vec_97) vec_97))))))))"
"(define-values"
"(intern-properties)"
"(lambda(all-props_98 get-preserved-props_99 state_100)"
"(let-values(((v_101)(hash-ref(serialize-state-props state_100) all-props_98 'no)))"
"(if(eq? v_101 'no)"
"(let-values()"
"(let-values(((preserved-props_102)(get-preserved-props_99)))"
"(let-values(((p_103)"
"(if(zero?(hash-count preserved-props_102))"
"(let-values() #f)"
"(let-values(((c1_104)"
"(hash-ref(serialize-state-interned-props state_100) preserved-props_102 #f)))"
"(if c1_104"
"((lambda(p_105) p_105) c1_104)"
"(let-values()"
"(begin"
"(hash-set!"
"(serialize-state-interned-props state_100)"
" preserved-props_102"
" preserved-props_102)"
" preserved-props_102)))))))"
"(begin(hash-set!(serialize-state-props state_100) all-props_98 p_103) p_103))))"
"(let-values() v_101)))))"
"(define-values"
"(push-syntax-context!)"
"(lambda(state_106 v_107)"
"(let-values(((b_108)(serialize-state-syntax-context state_106)))(set-box! b_108(cons v_107(unbox b_108))))))"
"(define-values"
"(get-syntax-context)"
"(lambda(state_109)"
"(let-values(((b_110)(serialize-state-syntax-context state_109)))"
"(if(null?(unbox b_110)) #f(car(unbox b_110))))))"
"(define-values"
"(pop-syntax-context!)"
"(lambda(state_111)"
"(let-values(((b_112)(serialize-state-syntax-context state_111)))(set-box! b_112(cdr(unbox b_112))))))"
"(void)"
"(void)"
"(define-values"
"(immutable-prefab-struct-key)"
"(lambda(v_1)(let-values(((k_2)(prefab-struct-key v_1)))(if k_2(if(all-fields-immutable? k_2) k_2 #f) #f))))"
"(define-values"
"(all-fields-immutable?)"
"(lambda(k_3)"
"(let-values(((or-part_4)(symbol? k_3)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(null? k_3)))"
"(if or-part_5"
" or-part_5"
"(let-values(((rk_6)(cdr k_3)))"
"(let-values(((rk_7)(if(if(pair? rk_6)(exact-integer?(car rk_6)) #f)(cdr rk_6) rk_6)))"
"(let-values(((rk_8)"
"(if(if(pair? rk_7)(pair?(car rk_7)) #f)"
"(if(zero?(caar rk_7))(cdr rk_7)(cons '#(1)(cdr rk_7)))"
" rk_7)))"
"(if(if(pair? rk_8)(vector?(car rk_8)) #f)"
"(if(zero?(vector-length(car rk_8)))(all-fields-immutable?(cdr rk_8)) #f)"
"(all-fields-immutable? rk_8)))))))))))"
"(void)"
"(void)"
"(define-values"
"(datum-map-slow)"
"(lambda(tail?_28 s_29 f_30 seen_31)"
"((letrec-values(((loop_32)"
"(lambda(tail?_33 s_34 prev-seen_35)"
"(let-values(((seen_36)"
"(if(if prev-seen_35(datum-has-elements? s_34) #f)"
"(let-values()"
"(if(hash-ref prev-seen_35 s_34 #f)"
"(let-values()((hash-ref prev-seen_35 'cycle-fail) s_34))"
"(let-values()(hash-set prev-seen_35 s_34 #t))))"
"(let-values() prev-seen_35))))"
"(if(null? s_34)"
"(let-values()(f_30 tail?_33 s_34))"
"(if(pair? s_34)"
"(let-values()"
"(f_30 tail?_33(cons(loop_32 #f(car s_34) seen_36)(loop_32 #t(cdr s_34) seen_36))))"
"(if(let-values(((or-part_37)(symbol? s_34)))"
"(if or-part_37"
" or-part_37"
"(let-values(((or-part_38)(boolean? s_34)))"
"(if or-part_38 or-part_38(number? s_34)))))"
"(let-values()(f_30 #f s_34))"
"(if(vector? s_34)"
"(let-values()"
"(f_30"
" #f"
"(vector->immutable-vector"
"(let-values(((len_39)(vector-length s_34)))"
"(begin"
"(if(exact-nonnegative-integer? len_39)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_39)))"
"(let-values(((v_40)(make-vector len_39 0)))"
"(begin"
"(if(zero? len_39)"
"(void)"
"(let-values()"
"(let-values(((vec_41 len_42)"
"(let-values()"
"(begin"
"(if(vector? vec_43)"
"(void)"
"(let-values()(in-vector vec_43)))"
"(values vec_43(unsafe-vector-length vec_43))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_44)"
"(lambda(i_45 pos_46)"
"(if(unsafe-fx< pos_46 len_42)"
"(let-values(((e_47)"
"(unsafe-vector-ref"
" vec_41"
" pos_46)))"
"(let-values(((i_48)"
"(let-values()"
"(let-values(((i_50)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_40"
" i_49"
"(let-values()"
"(loop_32"
" #f"
" e_47"
" seen_36)))"
"(unsafe-fx+"
" 1"
" i_49)))))"
"(values i_50)))))"
"(if(not"
"((lambda x_51"
"(unsafe-fx= i_48 len_39))"
" e_47))"
"(for-loop_44"
" i_48"
"(unsafe-fx+ 1 pos_46))"
" i_48)))"
" i_45))))"
" for-loop_44)"
" 0"
" 0)))))"
" v_40)))))))"
"(if(box? s_34)"
"(let-values()(f_30 #f(box-immutable(loop_32 #f(unbox s_34) seen_36))))"
"(let-values(((c1_52)(immutable-prefab-struct-key s_34)))"
"(if c1_52"
"((lambda(key_53)"
"(f_30"
" #f"
"(apply"
" make-prefab-struct"
" key_53"
"(alt-reverse"
"(let-values(((v*_54 start*_55 stop*_56 step*_57)"
"(normalise-inputs"
" 'in-vector"
"                                                             \"vector\""
"(lambda(x_58)(vector? x_58))"
"(lambda(x_59)(unsafe-vector-length x_59))"
"(struct->vector s_34)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_60)"
"(lambda(fold-var_61 idx_62)"
"(if(unsafe-fx< idx_62 stop*_56)"
"(let-values(((e_63)"
"(unsafe-vector-ref v*_54 idx_62)))"
"(let-values(((fold-var_64)"
"(let-values()"
"(let-values(((fold-var_66)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_32"
" #f"
" e_63"
" seen_36))"
" fold-var_65))))"
"(values fold-var_66)))))"
"(for-loop_60"
" fold-var_64"
"(unsafe-fx+ idx_62 1))))"
" fold-var_61))))"
" for-loop_60)"
" null"
" start*_55)))))))"
" c1_52)"
"(if(if(hash? s_34)(immutable? s_34) #f)"
"(let-values()"
"(if(hash-eq? s_34)"
"(let-values()"
"(f_30"
" #f"
"(let-values()"
"(begin"
"(if((lambda(ht_68)(hash? ht_68)) ht_67)"
"(void)"
"(let-values()(default-in-hash ht_67)))"
"((letrec-values(((for-loop_69)"
"(lambda(table_70 i_71)"
"(if i_71"
"(let-values(((k_72 v_73)"
"(hash-iterate-key+value"
" ht_67"
" i_71)))"
"(let-values(((table_74)"
"(let-values()"
"(let-values(((table_76)"
"(let-values()"
"(let-values(((key_77"
" val_78)"
"(let-values()"
"(values"
" k_72"
"(loop_32"
" #f"
" v_73"
" seen_36)))))"
"(hash-set"
" table_75"
" key_77"
" val_78)))))"
"(values table_76)))))"
"(for-loop_69"
" table_74"
"(hash-iterate-next ht_67 i_71))))"
" table_70))))"
" for-loop_69)"
" '#hasheq()"
"(hash-iterate-first ht_67))))))"
"(if(hash-eqv? s_34)"
"(let-values()"
"(f_30"
" #f"
"(let-values()"
"(begin"
"(if((lambda(ht_80)(hash? ht_80)) ht_79)"
"(void)"
"(let-values()(default-in-hash ht_79)))"
"((letrec-values(((for-loop_81)"
"(lambda(table_82 i_83)"
"(if i_83"
"(let-values(((k_84 v_85)"
"(hash-iterate-key+value"
" ht_79"
" i_83)))"
"(let-values(((table_86)"
"(let-values()"
"(let-values(((table_88)"
"(let-values()"
"(let-values(((key_89"
" val_90)"
"(let-values()"
"(values"
" k_84"
"(loop_32"
" #f"
" v_85"
" seen_36)))))"
"(hash-set"
" table_87"
" key_89"
" val_90)))))"
"(values table_88)))))"
"(for-loop_81"
" table_86"
"(hash-iterate-next ht_79 i_83))))"
" table_82))))"
" for-loop_81)"
" '#hasheqv()"
"(hash-iterate-first ht_79))))))"
"(let-values()"
"(f_30"
" #f"
"(let-values()"
"(begin"
"(if((lambda(ht_92)(hash? ht_92)) ht_91)"
"(void)"
"(let-values()(default-in-hash ht_91)))"
"((letrec-values(((for-loop_93)"
"(lambda(table_94 i_95)"
"(if i_95"
"(let-values(((k_96 v_97)"
"(hash-iterate-key+value"
" ht_91"
" i_95)))"
"(let-values(((table_98)"
"(let-values()"
"(let-values(((table_100)"
"(let-values()"
"(let-values(((key_101"
" val_102)"
"(let-values()"
"(values"
" k_96"
"(loop_32"
" #f"
" v_97"
" seen_36)))))"
"(hash-set"
" table_99"
" key_101"
" val_102)))))"
"(values table_100)))))"
"(for-loop_93"
" table_98"
"(hash-iterate-next ht_91 i_95))))"
" table_94))))"
" for-loop_93)"
" '#hash()"
"(hash-iterate-first ht_91)))))))))"
"(let-values()(f_30 #f s_34))))))))))))))"
" loop_32)"
" tail?_28"
" s_29"
" seen_31)))"
"(define-values"
"(datum-has-elements?)"
"(lambda(d_103)"
"(let-values(((or-part_104)(pair? d_103)))"
"(if or-part_104"
" or-part_104"
"(let-values(((or-part_105)(vector? d_103)))"
"(if or-part_105"
" or-part_105"
"(let-values(((or-part_106)(box? d_103)))"
"(if or-part_106"
" or-part_106"
"(let-values(((or-part_107)(immutable-prefab-struct-key d_103)))"
"(if or-part_107"
" or-part_107"
"(if(hash? d_103)(if(immutable? d_103)(positive?(hash-count d_103)) #f) #f)))))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:preserved-property-value"
" preserved-property-value1.1"
" preserved-property-value?"
" preserved-property-value-content)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'preserved-property-value"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'preserved-property-value)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'content))))"
"(define-values"
"(plain-property-value)"
"(lambda(v_21)(if(preserved-property-value? v_21)(preserved-property-value-content v_21) v_21)))"
"(define-values"
"(check-value-to-preserve)"
"(lambda(v_23 syntax?_24)"
"(let-values(((f_26)"
"(lambda(tail?_28 v_29)"
"(begin"
"(if(let-values(((or-part_30)(null? v_29)))"
"(if or-part_30"
" or-part_30"
"(let-values(((or-part_31)(boolean? v_29)))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32)(symbol? v_29)))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_33)(number? v_29)))"
"(if or-part_33"
" or-part_33"
"(let-values(((or-part_34)(char? v_29)))"
"(if or-part_34"
" or-part_34"
"(let-values(((or-part_35)(string? v_29)))"
"(if or-part_35"
" or-part_35"
"(let-values(((or-part_36)(bytes? v_29)))"
"(if or-part_36"
" or-part_36"
"(let-values(((or-part_37)(regexp? v_29)))"
"(if or-part_37"
" or-part_37"
"(let-values(((or-part_38)(syntax?_24 v_29)))"
"(if or-part_38"
" or-part_38"
"(let-values(((or-part_39)(pair? v_29)))"
"(if or-part_39"
" or-part_39"
"(let-values(((or-part_40)(vector? v_29)))"
"(if or-part_40"
" or-part_40"
"(let-values(((or-part_41)(box? v_29)))"
"(if or-part_41"
" or-part_41"
"(let-values(((or-part_42)(hash? v_29)))"
"(if or-part_42"
" or-part_42"
"(immutable-prefab-struct-key"
" v_29)))))))))))))))))))))))))))"
"(void)"
"(let-values()"
"                          (raise-arguments-error 'write \"disallowed value in preserved syntax property\" \"value\" v_29)))"
" v_29)))"
"((seen_27) disallow-cycles$1))"
"((letrec-values(((loop_43)"
"(lambda(tail?_44 s_45 prev-depth_46)"
"(let-values(((depth_47)(add1 prev-depth_46)))"
"(if(if seen_27(> depth_47 32) #f)"
"(let-values()"
"(datum-map-slow tail?_44 s_45(lambda(tail?_48 s_49)(f_26 tail?_48 s_49)) seen_27))"
"(if(null? s_45)"
"(let-values()(f_26 tail?_44 s_45))"
"(if(pair? s_45)"
"(let-values()"
"(f_26"
" tail?_44"
"(cons(loop_43 #f(car s_45) depth_47)(loop_43 #t(cdr s_45) depth_47))))"
"(if(let-values(((or-part_50)(symbol? s_45)))"
"(if or-part_50"
" or-part_50"
"(let-values(((or-part_51)(boolean? s_45)))"
"(if or-part_51 or-part_51(number? s_45)))))"
"(let-values()(f_26 #f s_45))"
"(if(let-values(((or-part_52)(vector? s_45)))"
"(if or-part_52"
" or-part_52"
"(let-values(((or-part_53)(box? s_45)))"
"(if or-part_53"
" or-part_53"
"(let-values(((or-part_54)(prefab-struct-key s_45)))"
"(if or-part_54 or-part_54(hash? s_45)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_44"
" s_45"
"(lambda(tail?_55 s_56)(f_26 tail?_55 s_56))"
" seen_27))"
"(let-values()(f_26 #f s_45)))))))))))"
" loop_43)"
" #f"
" s_25"
" 0))))"
"(define-values"
"(disallow-cycles$1)"
"(hash"
" 'cycle-fail"
"   (lambda (v_57) (raise-arguments-error 'write \"disallowed cycle in preserved syntax property\" \"at\" v_57))))"
"(void)"
"(void)"
"(define-values(tamper-tainted?)(lambda(v_1)(symbol? v_1)))"
"(define-values(tamper-armed?)(lambda(v_2)(set? v_2)))"
"(define-values(tamper-clean?)(lambda(v_3)(not v_3)))"
"(define-values"
"(tamper-tainted-for-content)"
"(lambda(v_4)(if(datum-has-elements? v_4) 'tainted/need-propagate 'tainted)))"
"(define-values(serialize-tamper)(lambda(t_5)(if(tamper-armed? t_5) 'armed t_5)))"
"(define-values(current-arm-inspectors)(make-parameter(seteq)))"
"(define-values(deserialize-tamper)(lambda(t_6)(if(eq? t_6 'armed)(current-arm-inspectors) t_6)))"
"(void)"
"(void)"
"(define-values"
"(struct:syntax"
" syntax1.1"
" syntax?$1"
" syntax-content"
" syntax-scopes"
" syntax-shifted-multi-scopes"
" syntax-scope-propagations"
" syntax-mpi-shifts"
" syntax-srcloc"
" syntax-props"
" syntax-inspector"
" syntax-tamper"
" set-syntax-content!"
" set-syntax-scope-propagations!"
" set-syntax-tamper!)"
"(let-values(((struct:_65 make-_66 ?_67 -ref_68 -set!_69)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'syntax"
" #f"
" 9"
" 0"
" #f"
"(list"
"(cons"
" prop:reach-scopes"
"(lambda(s_170 reach_171)"
"(let-values(((prop_172)(syntax-scope-propagations s_170)))"
"(begin"
"(reach_171(if prop_172((propagation-ref prop_172) s_170)(syntax-content s_170)))"
"(reach_171(syntax-scopes s_170))"
"(reach_171(syntax-shifted-multi-scopes s_170))"
"(let-values(((ht_173)(syntax-props s_170)))"
"(begin"
"(if((lambda(ht_174)(if(hash? ht_174)(immutable? ht_174) #f)) ht_173)"
"(void)"
"(let-values()(default-in-immutable-hash ht_173)))"
"((letrec-values(((for-loop_175)"
"(lambda(fold-var_176 i_177)"
"(if i_177"
"(let-values(((k_178 v_179)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_173"
" i_177)))"
"(let-values(((fold-var_180)"
"(let-values()"
"(if(preserved-property-value? v_179)"
"(let-values()"
"(let-values(((fold-var_183)"
"(let-values()"
"(begin"
"(let-values()"
"(reach_171"
"(plain-property-value"
" v_179)))"
"(void)))))"
"(values fold-var_183)))"
" fold-var_181))))"
"(for-loop_175"
" fold-var_180"
"(unsafe-immutable-hash-iterate-next ht_173 i_177))))"
" fold-var_176))))"
" for-loop_175)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_173))))))))"
"(cons"
" prop:serialize"
"(lambda(s_184 ser-push!_185 state_186)"
"(let-values(((prop_187)(syntax-scope-propagations s_184)))"
"(let-values(((content_188)"
"(if prop_187((propagation-ref prop_187) s_184)(syntax-content s_184))))"
"(let-values(((properties_189)"
"(intern-properties"
"(syntax-props s_184)"
"(lambda()"
"(let-values(((ht_190)(syntax-props s_184)))"
"(begin"
"(if((lambda(ht_191)(hash? ht_191)) ht_190)"
"(void)"
"(let-values()(default-in-hash ht_190)))"
"((letrec-values(((for-loop_192)"
"(lambda(table_193 i_194)"
"(if i_194"
"(let-values(((k_195 v_196)"
"(hash-iterate-key+value"
" ht_190"
" i_194)))"
"(let-values(((table_197)"
"(let-values()"
"(if(preserved-property-value?"
" v_196)"
"(let-values()"
"(let-values(((table_200)"
"(let-values()"
"(let-values(((key_201"
" val_202)"
"(let-values()"
"(values"
" k_195"
"(check-value-to-preserve"
"(plain-property-value"
" v_196)"
" syntax?$1)))))"
"(hash-set"
" table_199"
" key_201"
" val_202)))))"
"(values table_200)))"
" table_198))))"
"(for-loop_192"
" table_197"
"(hash-iterate-next ht_190 i_194))))"
" table_193))))"
" for-loop_192)"
" '#hasheq()"
"(hash-iterate-first ht_190)))))"
" state_186)))"
"(let-values(((tamper_203)(serialize-tamper(syntax-tamper s_184))))"
"(let-values(((context-triple_204)"
"(intern-context-triple"
"(intern-scopes(syntax-scopes s_184) state_186)"
"(intern-shifted-multi-scopes"
"(syntax-shifted-multi-scopes s_184)"
" state_186)"
"(intern-mpi-shifts(syntax-mpi-shifts s_184) state_186)"
" state_186)))"
"(let-values(((stx-state_205)(get-syntax-context state_186)))"
"(if(let-values()(if or-part_206 or-part_206 tamper_203))"
"(let-values()"
"(begin"
"(ser-push!_185 'tag '#:syntax+props)"
"(push-syntax-context! state_186 #f)"
"(ser-push!_185 content_188)"
"(pop-syntax-context! state_186)"
"(ser-push!_185 'reference context-triple_204)"
"(ser-push!_185 'reference(syntax-srcloc s_184))"
"(ser-push!_185 properties_189)"
"(ser-push!_185 tamper_203)"
"(if stx-state_205"
"(let-values()(set-syntax-state-all-sharing?! stx-state_205 #f))"
"(void))))"
"(let-values()"
"(let-values(((sharing-mode_207)"
"(hash-ref"
"(serialize-state-sharing-syntaxes state_186)"
" s_184"
" 'unknown)))"
"(begin"
"(if(eq? sharing-mode_207 'share)"
"(let-values()"
"(begin"
"(ser-push!_185 'tag '#:datum->syntax)"
"(ser-push!_185(syntax->datum$1 s_184))))"
"(if(eq? sharing-mode_207 'unknown)"
"(let-values()"
"(let-values((()(begin(ser-push!_185 'tag '#:syntax)(values))))"
"(let-values(((this-state_208)"
"(if(no-pair-syntax-in-cdr? content_188)"
"(syntax-state19.1"
" #t"
" context-triple_204"
"(syntax-srcloc s_184))"
" #f)))"
"(let-values((()"
"(begin"
"(push-syntax-context! state_186 this-state_208)"
"(values))))"
"(let-values((()(begin(ser-push!_185 content_188)(values))))"
"(let-values((()"
"(begin"
"(pop-syntax-context! state_186)"
"(values))))"
"(let-values(((new-sharing-mode_209)"
"(if(if this-state_208"
"(syntax-state-all-sharing?"
" this-state_208)"
" #f)"
" 'share"
" 'none)))"
"(begin"
"(hash-set!"
"(serialize-state-sharing-syntaxes state_186)"
" s_184"
"(if(datum-has-elements? content_188)"
" new-sharing-mode_209"
" 'none))"
"(if(if stx-state_205"
"(eq? new-sharing-mode_209 'none)"
" #f)"
"(let-values()"
"(set-syntax-state-all-sharing?! stx-state_205 #f))"
"(void))))))))))"
"(let-values()"
"(begin"
"(ser-push!_185 'tag '#:syntax)"
"(push-syntax-context! state_186 #f)"
"(ser-push!_185 content_188)"
"(pop-syntax-context! state_186)))))"
"(ser-push!_185 'reference context-triple_204)"
"(ser-push!_185 'reference(syntax-srcloc s_184))"
"(if stx-state_205"
"(let-values()"
"(if(if(eq?"
" context-triple_204"
"(syntax-state-context-triple stx-state_205))"
"(equal?"
"(syntax-srcloc s_184)"
"(syntax-state-srcloc stx-state_205))"
" #f)"
"(void)"
"(let-values()(set-syntax-state-all-sharing?! stx-state_205 #f))))"
"(void))))))))))))))"
"(cons"
" prop:custom-write"
"(lambda(s_210 port_211 mode_212)"
"                         (let-values ((() (begin (write-string \"#<syntax\" port_211) (values))))"
"(let-values(((srcloc_213)(syntax-srcloc s_210)))"
"(begin"
"(if srcloc_213"
"(let-values()"
"(let-values(((srcloc-str_214)(srcloc->string srcloc_213)))"
"(if srcloc-str_214"
"                                       (let-values () (fprintf port_211 \":~a\" srcloc-str_214))"
"(void))))"
"(void))"
"                               (fprintf port_211 \" ~.s\" (syntax->datum$1 s_210))"
"                               (write-string \">\" port_211)))))))"
"(current-inspector)"
" #f"
" '(1 2 4 5 6 7)"
" #f"
" 'syntax)))))"
"(values"
" struct:_65"
" make-_66"
" ?_67"
"(make-struct-field-accessor -ref_68 0 'content)"
"(make-struct-field-accessor -ref_68 1 'scopes)"
"(make-struct-field-accessor -ref_68 2 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_68 3 'scope-propagations)"
"(make-struct-field-accessor -ref_68 4 'mpi-shifts)"
"(make-struct-field-accessor -ref_68 5 'srcloc)"
"(make-struct-field-accessor -ref_68 6 'props)"
"(make-struct-field-accessor -ref_68 7 'inspector)"
"(make-struct-field-accessor -ref_68 8 'tamper)"
"(make-struct-field-mutator -set!_69 0 'content)"
"(make-struct-field-mutator -set!_69 3 'scope-propagations)"
"(make-struct-field-mutator -set!_69 8 'tamper))))"
"(define-values(prop:propagation propagation?$1 propagation-ref)(make-struct-type-property 'propagation))"
"(define-values(empty-scopes)(seteq))"
"(define-values(empty-shifted-multi-scopes)(seteq))"
"(define-values(empty-mpi-shifts) null)"
"(define-values(empty-props) '#hasheq())"
"(define-values"
"(empty-syntax)"
"(syntax1.1 #f empty-scopes empty-shifted-multi-scopes #f empty-mpi-shifts #f empty-props #f #f))"
"(define-values(identifier?)(lambda(s_215)(if(syntax?$1 s_215)(symbol?(syntax-content s_215)) #f)))"
"(define-values"
"(syntax->datum$1)"
"(lambda(s_216)"
"(let-values(((f_218)(lambda(tail?_222 x_223) x_223))((d->s_219)(lambda(s_224 d_225) d_225))((seen_221) #f))"
"((letrec-values(((loop_226)"
"(lambda(s_227)"
"(let-values(((f_229)"
"(lambda(tail?_231 v_232)"
"(if(syntax?$1 v_232)"
"(let-values()(d->s_219 v_232(loop_226(s-e_220 v_232))))"
"(let-values()(f_218 tail?_231 v_232))))))"
"((letrec-values(((loop_233)"
"(lambda(tail?_234 s_235 prev-depth_236)"
"(let-values(((depth_237)(add1 prev-depth_236)))"
"(if(if seen_230(> depth_237 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_234"
" s_235"
"(lambda(tail?_238 s_239)(f_229 tail?_238 s_239))"
" seen_230))"
"(if(null? s_235)"
"(let-values()(f_229 tail?_234 s_235))"
"(if(pair? s_235)"
"(let-values()"
"(f_229"
" tail?_234"
"(cons"
"(loop_233 #f(car s_235) depth_237)"
"(loop_233 #t(cdr s_235) depth_237))))"
"(if(let-values(((or-part_240)(symbol? s_235)))"
"(if or-part_240"
" or-part_240"
"(let-values(((or-part_241)(boolean? s_235)))"
"(if or-part_241 or-part_241(number? s_235)))))"
"(let-values()(f_229 #f s_235))"
"(if(let-values(((or-part_242)(vector? s_235)))"
"(if or-part_242"
" or-part_242"
"(let-values(((or-part_243)(box? s_235)))"
"(if or-part_243"
" or-part_243"
"(let-values(((or-part_244)"
"(prefab-struct-key s_235)))"
"(if or-part_244 or-part_244(hash? s_235)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_234"
" s_235"
"(lambda(tail?_245 s_246)(f_229 tail?_245 s_246))"
" seen_230))"
"(let-values()(f_229 #f s_235)))))))))))"
" loop_233)"
" #f"
" s_228"
" 0)))))"
" loop_226)"
" s_217))))"
"(define-values"
"(datum->syntax$1)"
"(let-values(((datum->syntax8_247)"
"(lambda(stx-c6_248 s7_249 stx-l2_250 stx-p3_251 stx-l4_252 stx-p5_253)"
"(let-values()"
"(let-values()"
"(let-values(((stx-l_256)(if stx-l4_252 stx-l2_250 #f)))"
"(let-values(((stx-p_257)(if stx-p5_253 stx-p3_251 #f)))"
"(let-values()"
"(let-values(((wrap_258)"
"(lambda(content_259)"
"(syntax1.1"
" content_259"
"(if stx-c_254(syntax-scopes stx-c_254) empty-scopes)"
"(if stx-c_254"
"(syntax-shifted-multi-scopes stx-c_254)"
" empty-shifted-multi-scopes)"
" #f"
"(if stx-c_254(syntax-mpi-shifts stx-c_254) empty-mpi-shifts)"
"(if stx-l_256(syntax-srcloc stx-l_256) #f)"
"(if stx-p_257(syntax-props stx-p_257) empty-props)"
"(if stx-c_254(syntax-inspector stx-c_254) #f)"
"(if stx-c_254"
"(if(syntax-tamper stx-c_254)"
"(tamper-tainted-for-content content_259)"
" #f)"
" #f)))))"
"(let-values(((f_261)(lambda(tail?_264 x_265)(if tail?_264 x_265(wrap_258 x_265))))"
"((s->_262)(lambda(s_266) s_266))"
"((seen_263) disallow-cycles))"
"(let-values(((f_268)"
"(lambda(tail?_270 v_271)"
"(if(syntax?$1 v_271)"
"(let-values()(s->_262 v_271))"
"(let-values()(f_261 tail?_270 v_271))))))"
"((letrec-values(((loop_272)"
"(lambda(tail?_273 s_274 prev-depth_275)"
"(let-values(((depth_276)(add1 prev-depth_275)))"
"(if(if seen_269(> depth_276 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_273"
" s_274"
"(lambda(tail?_277 s_278)(f_268 tail?_277 s_278))"
" seen_269))"
"(if(null? s_274)"
"(let-values()(f_268 tail?_273 s_274))"
"(if(pair? s_274)"
"(let-values()"
"(f_268"
" tail?_273"
"(cons"
"(loop_272 #f(car s_274) depth_276)"
"(loop_272 #t(cdr s_274) depth_276))))"
"(if(let-values(((or-part_279)(symbol? s_274)))"
"(if or-part_279"
" or-part_279"
"(let-values(((or-part_280)(boolean? s_274)))"
"(if or-part_280 or-part_280(number? s_274)))))"
"(let-values()(f_268 #f s_274))"
"(if(let-values(((or-part_281)(vector? s_274)))"
"(if or-part_281"
" or-part_281"
"(let-values(((or-part_282)(box? s_274)))"
"(if or-part_282"
" or-part_282"
"(let-values(((or-part_283)"
"(prefab-struct-key s_274)))"
"(if or-part_283"
" or-part_283"
"(hash? s_274)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_273"
" s_274"
"(lambda(tail?_284 s_285)(f_268 tail?_284 s_285))"
" seen_269))"
"(let-values()(f_268 #f s_274)))))))))))"
" loop_272)"
" #f"
" s_267"
" 0))))))))))))"
"(case-lambda"
"((stx-c_286 s_287)(datum->syntax8_247 stx-c_286 s_287 #f #f #f #f))"
"((stx-c_288 s_289 stx-l_290 stx-p3_291)(datum->syntax8_247 stx-c_288 s_289 stx-l_290 stx-p3_291 #t #t))"
"((stx-c_292 s_293 stx-l2_294)(datum->syntax8_247 stx-c_292 s_293 stx-l2_294 #f #t #f)))))"
"(define-values"
"(disallow-cycles)"
"(hasheq"
" 'cycle-fail"
"   (lambda (s_295) (raise-arguments-error 'datum->syntax \"cannot create syntax from cyclic datum\" s_295))))"
"(define-values"
"(struct:syntax-state"
" syntax-state19.1"
" syntax-state?"
" syntax-state-all-sharing?"
" syntax-state-context-triple"
" syntax-state-srcloc"
" set-syntax-state-all-sharing?!)"
"(let-values(((struct:_296 make-_297 ?_298 -ref_299 -set!_300)"
"(let-values()"
"(let-values()"
"(make-struct-type 'syntax-state #f 3 0 #f null(current-inspector) #f '(1 2) #f 'syntax-state)))))"
"(values"
" struct:_296"
" make-_297"
" ?_298"
"(make-struct-field-accessor -ref_299 0 'all-sharing?)"
"(make-struct-field-accessor -ref_299 1 'context-triple)"
"(make-struct-field-accessor -ref_299 2 'srcloc)"
"(make-struct-field-mutator -set!_300 0 'all-sharing?))))"
"(define-values"
"(no-pair-syntax-in-cdr?)"
"(lambda(content_326)"
"(if(pair? content_326)"
"(let-values()"
"((letrec-values(((loop_327)"
"(lambda(content_328)"
"(if(if(syntax?$1 content_328)(pair?(syntax-content content_328)) #f)"
"(let-values() #f)"
"(if(pair? content_328)"
"(let-values()(loop_327(cdr content_328)))"
"(let-values() #t))))))"
" loop_327)"
"(cdr content_326)))"
"(let-values() #t))))"
"(define-values"
"(deserialize-syntax)"
"(lambda(content_329 context-triple_330 srcloc_331 props_332 tamper_333 inspector_334)"
"(syntax1.1"
" content_329"
"(vector-ref context-triple_330 0)"
"(vector-ref context-triple_330 1)"
" #f"
"(vector-ref context-triple_330 2)"
" srcloc_331"
"(if props_332"
"(let-values()"
"(begin"
"(if((lambda(ht_336)(if(hash? ht_336)(immutable? ht_336) #f)) ht_335)"
"(void)"
"(let-values()(default-in-immutable-hash ht_335)))"
"((letrec-values(((for-loop_337)"
"(lambda(table_338 i_339)"
"(if i_339"
"(let-values(((k_340 v_341)(unsafe-immutable-hash-iterate-key+value ht_335 i_339)))"
"(let-values(((table_342)"
"(let-values()"
"(let-values(((table_344)"
"(let-values()"
"(let-values(((key_345 val_346)"
"(let-values()"
"(values"
" k_340"
"(preserved-property-value1.1"
" v_341)))))"
"(hash-set table_343 key_345 val_346)))))"
"(values table_344)))))"
"(for-loop_337 table_342(unsafe-immutable-hash-iterate-next ht_335 i_339))))"
" table_338))))"
" for-loop_337)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_335))))"
" empty-props)"
" inspector_334"
"(deserialize-tamper tamper_333))))"
"(define-values"
"(deserialize-datum->syntax)"
"(lambda(content_347 context-triple_348 srcloc_349 inspector_350)"
"(let-values(((s_351)(deserialize-syntax #f context-triple_348 srcloc_349 #f #f inspector_350)))"
"(datum->syntax$1 s_351 content_347 s_351 s_351))))"
"(void)"
"(void)"
"(define-values(empty-binding-table) '#hasheq())"
"(define-values"
"(struct:table-with-bulk-bindings"
" table-with-bulk-bindings1.1"
" table-with-bulk-bindings?"
" table-with-bulk-bindings-syms"
" table-with-bulk-bindings-syms/serialize"
" table-with-bulk-bindings-bulk-bindings)"
"(let-values(((struct:_19 make-_20 ?_21 -ref_22 -set!_23)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'table-with-bulk-bindings"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(twbb_52 ser-push!_53 state_54)"
"(begin"
"(ser-push!_53 'tag '#:table-with-bulk-bindings)"
"(ser-push!_53(table-with-bulk-bindings-syms/serialize twbb_52))"
"(ser-push!_53(table-with-bulk-bindings-bulk-bindings twbb_52))))))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'table-with-bulk-bindings)))))"
"(values"
" struct:_19"
" make-_20"
" ?_21"
"(make-struct-field-accessor -ref_22 0 'syms)"
"(make-struct-field-accessor -ref_22 1 'syms/serialize)"
"(make-struct-field-accessor -ref_22 2 'bulk-bindings))))"
"(define-values"
"(deserialize-table-with-bulk-bindings)"
"(lambda(syms_55 bulk-bindings_56)(table-with-bulk-bindings1.1 syms_55 syms_55 bulk-bindings_56)))"
"(define-values"
"(struct:bulk-binding-at bulk-binding-at2.1 bulk-binding-at? bulk-binding-at-scopes bulk-binding-at-bulk)"
"(let-values(((struct:_57 make-_58 ?_59 -ref_60 -set!_61)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-at"
" #f"
" 2"
" 0"
" #f"
"(list"
"                      (cons prop:reach-scopes (lambda (sms_87 reach_88) (error \"shouldn't get here\")))"
"(cons"
" prop:serialize"
"(lambda(bba_89 ser-push!_90 state_91)"
"(begin"
"(ser-push!_90 'tag '#:bulk-binding-at)"
"(ser-push!_90(bulk-binding-at-scopes bba_89))"
"(ser-push!_90(bulk-binding-at-bulk bba_89))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-at)))))"
"(values"
" struct:_57"
" make-_58"
" ?_59"
"(make-struct-field-accessor -ref_60 0 'scopes)"
"(make-struct-field-accessor -ref_60 1 'bulk))))"
"(define-values(deserialize-bulk-binding-at)(lambda(scopes_92 bulk_93)(bulk-binding-at2.1 scopes_92 bulk_93)))"
"(define-values(prop:bulk-binding bulk-binding?$1 bulk-binding-ref)(make-struct-type-property 'bulk-binding))"
"(define-values"
"(struct:bulk-binding-class"
" bulk-binding-class3.1"
" bulk-binding-class?"
" bulk-binding-class-get-symbols"
" bulk-binding-class-create)"
"(let-values(((struct:_94 make-_95 ?_96 -ref_97 -set!_98)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-class"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-class)))))"
"(values"
" struct:_94"
" make-_95"
" ?_96"
"(make-struct-field-accessor -ref_97 0 'get-symbols)"
"(make-struct-field-accessor -ref_97 1 'create))))"
"(define-values"
"(bulk-binding-symbols)"
"(lambda(b_119 s_120 extra-shifts_121)"
"((bulk-binding-class-get-symbols(bulk-binding-ref b_119))"
" b_119"
"(append extra-shifts_121(if s_120(syntax-mpi-shifts s_120) null)))))"
"(define-values(bulk-binding-create)(lambda(b_122)(bulk-binding-class-create(bulk-binding-ref b_122))))"
"(define-values(binding-table-empty?)(lambda(bt_123)(if(hash? bt_123)(zero?(hash-count bt_123)) #f)))"
"(define-values"
"(binding-table-add)"
"(lambda(bt_124 scopes_125 sym_126 binding_127 just-for-nominal?_128)"
"(if(hash? bt_124)"
"(let-values()(hash-set bt_124 sym_126(hash-set(hash-ref bt_124 sym_126 '#hash()) scopes_125 binding_127)))"
"(let-values()"
"(let-values(((new-syms_129)"
"(binding-table-add"
"(table-with-bulk-bindings-syms bt_124)"
" scopes_125"
" sym_126"
" binding_127"
" just-for-nominal?_128)))"
"(let-values(((new-syms/serialize_130)"
"(if just-for-nominal?_128"
"(let-values()(table-with-bulk-bindings-syms/serialize bt_124))"
"(if(eq?"
"(table-with-bulk-bindings-syms bt_124)"
"(table-with-bulk-bindings-syms/serialize bt_124))"
"(let-values() new-syms_129)"
"(let-values()"
"(binding-table-add"
"(table-with-bulk-bindings-syms/serialize bt_124)"
" scopes_125"
" sym_126"
" binding_127"
" #f))))))"
"(let-values()"
"(if(table-with-bulk-bindings? the-struct_131)"
"(let-values()"
"(table-with-bulk-bindings1.1"
" syms7_132"
" syms/serialize8_133"
"(table-with-bulk-bindings-bulk-bindings the-struct_131)))"
"                (raise-argument-error 'struct-copy \"table-with-bulk-bindings?\" the-struct_131)))))))))"
"(define-values"
"(binding-table-add-bulk)"
"(lambda(bt_134 scopes_135 bulk_136)"
"(if(table-with-bulk-bindings? bt_134)"
"(let-values()"
"(let-values(((new-syms_137)"
"(remove-matching-bindings(table-with-bulk-bindings-syms bt_134) scopes_135 bulk_136)))"
"(let-values(((new-syms/serialize_138)"
"(if(eq?"
"(table-with-bulk-bindings-syms bt_134)"
"(table-with-bulk-bindings-syms/serialize bt_134))"
" new-syms_137"
"(remove-matching-bindings"
"(table-with-bulk-bindings-syms/serialize bt_134)"
" scopes_135"
" bulk_136))))"
"(table-with-bulk-bindings1.1"
" new-syms_137"
" new-syms/serialize_138"
"(cons(bulk-binding-at2.1 scopes_135 bulk_136)(table-with-bulk-bindings-bulk-bindings bt_134))))))"
"(let-values()(binding-table-add-bulk(table-with-bulk-bindings1.1 bt_134 bt_134 null) scopes_135 bulk_136)))))"
"(define-values"
"(remove-matching-bindings)"
"(lambda(syms_139 scopes_140 bulk_141)"
"(let-values(((bulk-symbols_142)(bulk-binding-symbols bulk_141 #f null)))"
"(if(<(hash-count syms_139)(hash-count bulk-symbols_142))"
"(let-values()"
"(let-values()"
"(begin"
"(if((lambda(ht_144)(if(hash? ht_144)(immutable? ht_144) #f)) ht_143)"
"(void)"
"(let-values()(default-in-immutable-hash ht_143)))"
"((letrec-values(((for-loop_145)"
"(lambda(syms_146 i_147)"
"(if i_147"
"(let-values(((sym_148 sym-bindings_149)"
"(unsafe-immutable-hash-iterate-key+value ht_143 i_147)))"
"(let-values(((syms_150)"
"(let-values()"
"(let-values(((syms_152)"
"(let-values()"
"(if(hash-ref bulk-symbols_142 sym_148 #f)"
"(remove-matching-binding"
" syms_151"
" sym_148"
" sym-bindings_149"
" scopes_140)"
" syms_151))))"
"(values syms_152)))))"
"(for-loop_145 syms_150(unsafe-immutable-hash-iterate-next ht_143 i_147))))"
" syms_146))))"
" for-loop_145)"
" syms_139"
"(unsafe-immutable-hash-iterate-first ht_143)))))"
"(let-values()"
"(let-values()"
"(begin"
"(if((lambda(ht_154)(if(hash? ht_154)(immutable? ht_154) #f)) ht_153)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_153)))"
"((letrec-values(((for-loop_155)"
"(lambda(syms_156 i_157)"
"(if i_157"
"(let-values(((sym_158)(unsafe-immutable-hash-iterate-key ht_153 i_157)))"
"(let-values(((syms_159)"
"(let-values()"
"(let-values(((syms_161)"
"(let-values()"
"(let-values(((sym-bindings_162)"
"(hash-ref syms_160 sym_158 #f)))"
"(if sym-bindings_162"
"(remove-matching-binding"
" syms_160"
" sym_158"
" sym-bindings_162"
" scopes_140)"
" syms_160)))))"
"(values syms_161)))))"
"(for-loop_155 syms_159(unsafe-immutable-hash-iterate-next ht_153 i_157))))"
" syms_156))))"
" for-loop_155)"
" syms_139"
"(unsafe-immutable-hash-iterate-first ht_153)))))))))"
"(define-values"
"(remove-matching-binding)"
"(lambda(syms_163 sym_164 sym-bindings_165 scopes_166)"
"(hash-set syms_163 sym_164(hash-remove sym-bindings_165 scopes_166))))"
"(define-values"
"(binding-table-symbols)"
"(lambda(table_167 scs_168 s_169 extra-shifts_170)"
"(let-values(((ht_171 bulk-bindings_172)"
"(if(hash? table_167)"
"(values table_167 null)"
"(values"
"(table-with-bulk-bindings-syms table_167)"
"(table-with-bulk-bindings-bulk-bindings table_167)))))"
"(set-union"
"(let-values()"
"(begin"
"(if((lambda(ht_174)(hash? ht_174)) ht_173)(void)(let-values()(default-in-hash ht_173)))"
"((letrec-values(((for-loop_175)"
"(lambda(table_176 i_177)"
"(if i_177"
"(let-values(((sym_178 at-sym_179)(hash-iterate-key+value ht_173 i_177)))"
"(let-values(((table_180)"
"(let-values()"
"(if(let-values()"
"(begin"
"(if((lambda(ht_183)(hash? ht_183)) ht_182)"
"(void)"
"(let-values()(default-in-hash-keys ht_182)))"
"((letrec-values(((for-loop_184)"
"(lambda(result_185 i_186)"
"(if i_186"
"(let-values(((an-scs_187)"
"(hash-iterate-key"
" ht_182"
" i_186)))"
"(let-values(((result_188)"
"(let-values()"
"(let-values(((result_190)"
"(let-values()"
"(let-values()"
"(subset?"
" an-scs_187"
" scs_168)))))"
"(values"
" result_190)))))"
"(if(not"
"((lambda x_191 result_188)"
" an-scs_187))"
"(for-loop_184"
" result_188"
"(hash-iterate-next"
" ht_182"
" i_186))"
" result_188)))"
" result_185))))"
" for-loop_184)"
" #f"
"(hash-iterate-first ht_182))))"
"(let-values()"
"(let-values(((table_193)"
"(let-values()"
"(let-values(((key_194 val_195)"
"(let-values()"
"(values"
"(let-values() sym_178)"
" #t))))"
"(hash-set table_192 key_194 val_195)))))"
"(values table_193)))"
" table_181))))"
"(for-loop_175 table_180(hash-iterate-next ht_173 i_177))))"
" table_176))))"
" for-loop_175)"
" '#hasheq()"
"(hash-iterate-first ht_173))))"
"(let-values()"
"(begin"
"(if(list? lst_196)(void)(let-values()(in-list lst_196)))"
"((letrec-values(((for-loop_197)"
"(lambda(table_198 lst_199)"
"(if(pair? lst_199)"
"(let-values(((bba_200)(unsafe-car lst_199)))"
"(let-values(((table_201)"
"(let-values()"
"(if(subset?(bulk-binding-at-scopes bba_200) scs_168)"
"(let-values(((ht_203)"
"(bulk-binding-symbols"
"(bulk-binding-at-bulk bba_200)"
" s_169"
" extra-shifts_170)))"
"(begin"
"(if((lambda(ht_204)(hash? ht_204)) ht_203)"
"(void)"
"(let-values()(default-in-hash-keys ht_203)))"
"((letrec-values(((for-loop_205)"
"(lambda(table_206 i_207)"
"(if i_207"
"(let-values(((sym_208)"
"(hash-iterate-key"
" ht_203"
" i_207)))"
"(let-values(((table_209)"
"(let-values()"
"(let-values(((table_211)"
"(let-values()"
"(let-values(((key_212"
" val_213)"
"(let-values()"
"(values"
"(let-values()"
" sym_208)"
" #t))))"
"(hash-set"
" table_210"
" key_212"
" val_213)))))"
"(values"
" table_211)))))"
"(for-loop_205"
" table_209"
"(hash-iterate-next ht_203 i_207))))"
" table_206))))"
" for-loop_205)"
" table_202"
"(hash-iterate-first ht_203))))"
" table_202))))"
"(for-loop_197 table_201(unsafe-cdr lst_199))))"
" table_198))))"
" for-loop_197)"
" '#hasheq()"
" lst_196)))))))"
"(define-values"
"(binding-table-prune-to-reachable)"
"(lambda(bt_214 state_215)"
"(let-values(((or-part_216)(hash-ref(serialize-state-bindings-intern state_215) bt_214 #f)))"
"(if or-part_216"
" or-part_216"
"(let-values(((reachable-scopes_217)(serialize-state-reachable-scopes state_215)))"
"(let-values(((new-syms_218)"
"(let-values(((ht_221)"
"(if(hash? bt_214) bt_214(table-with-bulk-bindings-syms/serialize bt_214))))"
"(begin"
"(if((lambda(ht_222)(if(hash? ht_222)(immutable? ht_222) #f)) ht_221)"
"(void)"
"(let-values()(default-in-immutable-hash ht_221)))"
"((letrec-values(((for-loop_223)"
"(lambda(table_224 i_225)"
"(if i_225"
"(let-values(((sym_226 bindings-for-sym_227)"
"(unsafe-immutable-hash-iterate-key+value ht_221 i_225)))"
"(let-values(((table_228)"
"(let-values(((new-bindings-for-sym_229)"
"(let-values()"
"(begin"
"(if((lambda(ht_231)"
"(if(hash? ht_231)"
"(immutable? ht_231)"
" #f))"
" ht_230)"
"(void)"
"(let-values()"
"(default-in-immutable-hash"
" ht_230)))"
"((letrec-values(((for-loop_232)"
"(lambda(table_233"
" i_234)"
"(if i_234"
"(let-values(((scopes_235"
" binding_236)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_230"
" i_234)))"
"(let-values(((table_237)"
"(let-values()"
"(if(subset?"
" scopes_235"
" reachable-scopes_217)"
"(let-values()"
"(let-values(((table_240)"
"(let-values()"
"(let-values(((key_241"
" val_242)"
"(let-values()"
"(values"
"(intern-scopes"
" scopes_235"
" state_215)"
" binding_236))))"
"(hash-set"
" table_239"
" key_241"
" val_242)))))"
"(values"
" table_240)))"
" table_238))))"
"(for-loop_232"
" table_237"
"(unsafe-immutable-hash-iterate-next"
" ht_230"
" i_234))))"
" table_233))))"
" for-loop_232)"
" '#hash()"
"(unsafe-immutable-hash-iterate-first"
" ht_230))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_243)"
"(lambda(table_244)"
"(let-values()"
"(let-values(((table_245)"
"(let-values()"
"(if(positive?"
"(hash-count"
" new-bindings-for-sym_229))"
"(let-values()"
"(let-values(((table_248)"
"(let-values()"
"(let-values(((key_249"
" val_250)"
"(let-values()"
"(values"
" sym_226"
" new-bindings-for-sym_229))))"
"(hash-set"
" table_247"
" key_249"
" val_250)))))"
"(values"
" table_248)))"
" table_246))))"
" table_245)))))"
" for-loop_243)"
" table_224)))))"
"(for-loop_223"
" table_228"
"(unsafe-immutable-hash-iterate-next ht_221 i_225))))"
" table_224))))"
" for-loop_223)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_221))))))"
"(let-values(((new-bulk-bindings_219)"
"(if(hash? bt_214)"
" null"
"(alt-reverse"
"(let-values(((lst_251)(table-with-bulk-bindings-bulk-bindings bt_214)))"
"(begin"
"(if(list? lst_251)(void)(let-values()(in-list lst_251)))"
"((letrec-values(((for-loop_252)"
"(lambda(fold-var_253 lst_254)"
"(if(pair? lst_254)"
"(let-values(((bba_255)(unsafe-car lst_254)))"
"(let-values(((fold-var_256)"
"(let-values()"
"(if(subset?"
"(bulk-binding-at-scopes bba_255)"
" reachable-scopes_217)"
"(let-values()"
"(let-values(((fold-var_259)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values()"
"(if(bulk-binding-at?"
" the-struct_260)"
"(let-values(((scopes9_261)"
"(intern-scopes"
"(bulk-binding-at-scopes"
" bba_255)"
" state_215)))"
"(bulk-binding-at2.1"
" scopes9_261"
"(bulk-binding-at-bulk"
" the-struct_260)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                     \"bulk-binding-at?\""
" the-struct_260))))"
" fold-var_258))))"
"(values fold-var_259)))"
" fold-var_257))))"
"(for-loop_252 fold-var_256(unsafe-cdr lst_254))))"
" fold-var_253))))"
" for-loop_252)"
" null"
" lst_251)))))))"
"(let-values(((new-bt_220)"
"(if(pair? new-bulk-bindings_219)"
"(table-with-bulk-bindings1.1 new-syms_218 new-syms_218 new-bulk-bindings_219)"
" new-syms_218)))"
"(begin"
"(hash-set!(serialize-state-bulk-bindings-intern state_215) bt_214 new-bt_220)"
" new-bt_220)))))))))"
"(define-values"
"(binding-table-register-reachable)"
"(lambda(bt_262 reachable-scopes_263 reach_264 register-trigger_265)"
"(let-values(((ht_266)(if(hash? bt_262) bt_262(table-with-bulk-bindings-syms/serialize bt_262))))"
"(begin"
"(if((lambda(ht_267)(if(hash? ht_267)(immutable? ht_267) #f)) ht_266)"
"(void)"
"(let-values()(default-in-immutable-hash ht_266)))"
"((letrec-values(((for-loop_268)"
"(lambda(fold-var_269 i_270)"
"(if i_270"
"(let-values(((sym_271 bindings-for-sym_272)"
"(unsafe-immutable-hash-iterate-key+value ht_266 i_270)))"
"(let-values(((fold-var_273)"
"(let-values()"
"(begin"
"(if((lambda(ht_275)(if(hash? ht_275)(immutable? ht_275) #f))"
" ht_274)"
"(void)"
"(let-values()(default-in-immutable-hash ht_274)))"
"((letrec-values(((for-loop_276)"
"(lambda(fold-var_277 i_278)"
"(if i_278"
"(let-values(((scopes_279 binding_280)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_274"
" i_278)))"
"(let-values(((fold-var_281)"
"(let-values()"
"(let-values(((fold-var_283)"
"(let-values()"
"(begin"
"(let-values()"
"(scopes-register-reachable"
" scopes_279"
" binding_280"
" reachable-scopes_263"
" reach_264"
" register-trigger_265))"
"(void)))))"
"(values fold-var_283)))))"
"(for-loop_276"
" fold-var_281"
"(unsafe-immutable-hash-iterate-next"
" ht_274"
" i_278))))"
" fold-var_277))))"
" for-loop_276)"
" fold-var_269"
"(unsafe-immutable-hash-iterate-first ht_274))))))"
"(for-loop_268 fold-var_273(unsafe-immutable-hash-iterate-next ht_266 i_270))))"
" fold-var_269))))"
" for-loop_268)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_266))))))"
"(define-values"
"(scopes-register-reachable)"
"(lambda(scopes_284 binding_285 reachable-scopes_286 reach_287 register-trigger_288)"
"(let-values(((v_289)"
"(if(binding-reach-scopes? binding_285)((binding-reach-scopes-ref binding_285) binding_285) #f)))"
"(if v_289"
"(let-values()"
"(if(subset? scopes_284 reachable-scopes_286)"
"(let-values()(reach_287 v_289))"
"(let-values()"
"(let-values()"
"(begin"
"(if((lambda(ht_291)(if(hash? ht_291)(immutable? ht_291) #f)) ht_290)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_290)))"
"((letrec-values(((for-loop_292)"
"(lambda(fold-var_293 i_294)"
"(if i_294"
"(let-values(((sc_295)(unsafe-immutable-hash-iterate-key ht_290 i_294)))"
"(let-values(((fold-var_296)"
"(let-values()"
"(if(set-member? reachable-scopes_286 sc_295)"
" fold-var_297"
"(let-values()"
"(let-values(((fold-var_299)"
"(let-values()"
"(begin"
"(let-values()"
"(register-trigger_288 sc_295 v_289))"
"(void)))))"
"(values fold-var_299)))))))"
"(for-loop_292"
" fold-var_296"
"(unsafe-immutable-hash-iterate-next ht_290 i_294))))"
" fold-var_293))))"
" for-loop_292)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_290)))))))"
"(void)))))"
"(void)"
"(void)"
"(define-values"
"(propagate-taint!)"
"(lambda(s_1)"
"(if(eq?(syntax-tamper s_1) 'tainted/need-propagate)"
"(let-values()"
"(begin(set-syntax-content! s_1(taint-content(syntax-content s_1)))(set-syntax-tamper! s_1 'tainted)))"
"(void))))"
"(define-values"
"(taint-content)"
"(lambda(d_2)"
"(let-values(((f_4)(lambda(tail?_7 x_8) x_8))"
"((s->_5)"
"(lambda(sub-s_9)"
"(if(tamper-tainted?(syntax-tamper sub-s_9))"
"(let-values() sub-s_9)"
"(let-values()"
"(let-values()"
"(if(syntax?$1 the-struct_10)"
"(let-values(((tamper6_11)(tamper-tainted-for-content(syntax-content sub-s_9))))"
"(syntax1.1"
"(syntax-content the-struct_10)"
"(syntax-scopes the-struct_10)"
"(syntax-shifted-multi-scopes the-struct_10)"
"(syntax-scope-propagations the-struct_10)"
"(syntax-mpi-shifts the-struct_10)"
"(syntax-srcloc the-struct_10)"
"(syntax-props the-struct_10)"
"(syntax-inspector the-struct_10)"
" tamper6_11))"
"                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_10)))))))"
"((seen_6) #f))"
"(let-values(((f_13)"
"(lambda(tail?_15 v_16)"
"(if(syntax?$1 v_16)(let-values()(s->_5 v_16))(let-values()(f_4 tail?_15 v_16))))))"
"((letrec-values(((loop_17)"
"(lambda(tail?_18 s_19 prev-depth_20)"
"(let-values(((depth_21)(add1 prev-depth_20)))"
"(if(if seen_14(> depth_21 32) #f)"
"(let-values()"
"(datum-map-slow tail?_18 s_19(lambda(tail?_22 s_23)(f_13 tail?_22 s_23)) seen_14))"
"(if(null? s_19)"
"(let-values()(f_13 tail?_18 s_19))"
"(if(pair? s_19)"
"(let-values()"
"(f_13"
" tail?_18"
"(cons(loop_17 #f(car s_19) depth_21)(loop_17 #t(cdr s_19) depth_21))))"
"(if(let-values(((or-part_24)(symbol? s_19)))"
"(if or-part_24"
" or-part_24"
"(let-values(((or-part_25)(boolean? s_19)))"
"(if or-part_25 or-part_25(number? s_19)))))"
"(let-values()(f_13 #f s_19))"
"(if(let-values(((or-part_26)(vector? s_19)))"
"(if or-part_26"
" or-part_26"
"(let-values(((or-part_27)(box? s_19)))"
"(if or-part_27"
" or-part_27"
"(let-values(((or-part_28)(prefab-struct-key s_19)))"
"(if or-part_28 or-part_28(hash? s_19)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_18"
" s_19"
"(lambda(tail?_29 s_30)(f_13 tail?_29 s_30))"
" seen_14))"
"(let-values()(f_13 #f s_19)))))))))))"
" loop_17)"
" #f"
" s_12"
" 0)))))"
"(define-values(syntax-tainted?$1)(lambda(s_31)(tamper-tainted?(syntax-tamper s_31))))"
"(define-values(syntax-clean?)(lambda(s_32)(tamper-clean?(syntax-tamper s_32))))"
"(define-values"
"(syntax-arm$1)"
"(lambda(s_33 insp_34)"
"(let-values(((t_35)(syntax-tamper s_33)))"
"(if(tamper-tainted? t_35)"
"(let-values() s_33)"
"(if(if t_35"
"(let-values(((or-part_36)(set-member? t_35 insp_34)))"
"(if or-part_36"
" or-part_36"
"(let-values()"
"(begin"
"(if((lambda(ht_38)(if(hash? ht_38)(immutable? ht_38) #f)) ht_37)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_37)))"
"((letrec-values(((for-loop_39)"
"(lambda(result_40 i_41)"
"(if i_41"
"(let-values(((already-insp_42)"
"(unsafe-immutable-hash-iterate-key ht_37 i_41)))"
"(let-values(((result_43)"
"(let-values()"
"(let-values(((result_45)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same?"
" already-insp_42"
" insp_34)))))"
"(values result_45)))))"
"(if(not((lambda x_46 result_43) already-insp_42))"
"(for-loop_39"
" result_43"
"(unsafe-immutable-hash-iterate-next ht_37 i_41))"
" result_43)))"
" result_40))))"
" for-loop_39)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_37))))))"
" #f)"
"(let-values() s_33)"
"(let-values()"
"(let-values()"
"(if(syntax?$1 the-struct_47)"
"(let-values(((tamper7_48)(set-add(if t_35(remove-inferior t_35 insp_34)(seteq)) insp_34)))"
"(syntax1.1"
"(syntax-content the-struct_47)"
"(syntax-scopes the-struct_47)"
"(syntax-shifted-multi-scopes the-struct_47)"
"(syntax-scope-propagations the-struct_47)"
"(syntax-mpi-shifts the-struct_47)"
"(syntax-srcloc the-struct_47)"
"(syntax-props the-struct_47)"
"(syntax-inspector the-struct_47)"
" tamper7_48))"
"                (raise-argument-error 'struct-copy \"syntax?\" the-struct_47)))))))))"
"(define-values"
"(remove-inferior)"
"(lambda(t_49 insp_50)"
"(let-values()"
"(begin"
"(if((lambda(ht_52)(if(hash? ht_52)(immutable? ht_52) #f)) ht_51)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_51)))"
"((letrec-values(((for-loop_53)"
"(lambda(table_54 i_55)"
"(if i_55"
"(let-values(((already-insp_56)(unsafe-immutable-hash-iterate-key ht_51 i_55)))"
"(let-values(((table_57)"
"(let-values()"
"(if(inspector-superior-or-same? insp_50 already-insp_56)"
" table_58"
"(let-values()"
"(let-values(((table_60)"
"(let-values()"
"(let-values(((key_61 val_62)"
"(let-values()"
"(values"
"(let-values() already-insp_56)"
" #t))))"
"(hash-set table_59 key_61 val_62)))))"
"(values table_60)))))))"
"(for-loop_53 table_57(unsafe-immutable-hash-iterate-next ht_51 i_55))))"
" table_54))))"
" for-loop_53)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_51))))))"
"(define-values"
"(syntax-disarm$1)"
"(let-values(((syntax-disarm4_63)"
"(lambda(s3_64 insp1_65 insp2_66)"
"(let-values()"
"(let-values(((insp_68)(if insp2_66 insp1_65 #f)))"
"(let-values()"
"(let-values(((t_69)(syntax-tamper s_67)))"
"(if(not(tamper-armed? t_69))"
"(let-values() s_67)"
"(if(not insp_68)"
"(let-values()"
"(let-values()"
"(if(syntax?$1 the-struct_70)"
"(let-values(((tamper8_71) #f))"
"(syntax1.1"
"(syntax-content the-struct_70)"
"(syntax-scopes the-struct_70)"
"(syntax-shifted-multi-scopes the-struct_70)"
"(syntax-scope-propagations the-struct_70)"
"(syntax-mpi-shifts the-struct_70)"
"(syntax-srcloc the-struct_70)"
"(syntax-props the-struct_70)"
"(syntax-inspector the-struct_70)"
" tamper8_71))"
"                                    (raise-argument-error 'struct-copy \"syntax?\" the-struct_70))))"
"(let-values()"
"(let-values(((new-t_72)(remove-inferior t_69 insp_68)))"
"(let-values()"
"(if(syntax?$1 the-struct_73)"
"(let-values(((tamper9_74)(if(not(set-empty? new-t_72)) new-t_72 #f)))"
"(syntax1.1"
"(syntax-content the-struct_73)"
"(syntax-scopes the-struct_73)"
"(syntax-shifted-multi-scopes the-struct_73)"
"(syntax-scope-propagations the-struct_73)"
"(syntax-mpi-shifts the-struct_73)"
"(syntax-srcloc the-struct_73)"
"(syntax-props the-struct_73)"
"(syntax-inspector the-struct_73)"
" tamper9_74))"
"                                      (raise-argument-error 'struct-copy \"syntax?\" the-struct_73))))))))))))))"
"(case-lambda((s_75)(syntax-disarm4_63 s_75 #f #f))((s_76 insp1_77)(syntax-disarm4_63 s_76 insp1_77 #t)))))"
"(define-values"
"(syntax-rearm$1)"
"(lambda(s_78 from-s_79)"
"(let-values(((t_80)(syntax-tamper s_78)))"
"(if(tamper-tainted? t_80)"
"(let-values() s_78)"
"(let-values()"
"(let-values(((from-t_81)(syntax-tamper from-s_79)))"
"(if(tamper-clean? from-t_81)"
"(let-values() s_78)"
"(if(tamper-tainted? from-t_81)"
"(let-values()"
"(let-values()"
"(if(syntax?$1 the-struct_82)"
"(let-values(((tamper10_83)(tamper-tainted-for-content(syntax-content s_78))))"
"(syntax1.1"
"(syntax-content the-struct_82)"
"(syntax-scopes the-struct_82)"
"(syntax-shifted-multi-scopes the-struct_82)"
"(syntax-scope-propagations the-struct_82)"
"(syntax-mpi-shifts the-struct_82)"
"(syntax-srcloc the-struct_82)"
"(syntax-props the-struct_82)"
"(syntax-inspector the-struct_82)"
" tamper10_83))"
"                      (raise-argument-error 'struct-copy \"syntax?\" the-struct_82))))"
"(if(tamper-clean? t_80)"
"(let-values()"
"(let-values()"
"(if(syntax?$1 the-struct_84)"
"(let-values()"
"(syntax1.1"
"(syntax-content the-struct_84)"
"(syntax-scopes the-struct_84)"
"(syntax-shifted-multi-scopes the-struct_84)"
"(syntax-scope-propagations the-struct_84)"
"(syntax-mpi-shifts the-struct_84)"
"(syntax-srcloc the-struct_84)"
"(syntax-props the-struct_84)"
"(syntax-inspector the-struct_84)"
" tamper11_85))"
"                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_84))))"
"(let-values()"
"(let-values()"
"(if(syntax?$1 the-struct_86)"
"(let-values(((tamper12_87)"
"(let-values()"
"(begin"
"(if((lambda(ht_89)(if(hash? ht_89)(immutable? ht_89) #f)) ht_88)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_88)))"
"((letrec-values(((for-loop_90)"
"(lambda(t_91 i_92)"
"(if i_92"
"(let-values(((from-i_93)"
"(unsafe-immutable-hash-iterate-key"
" ht_88"
" i_92)))"
"(let-values(((t_94)"
"(let-values()"
"(let-values(((t_96)"
"(let-values()"
"(if(set-member?"
" t_95"
" from-i_93)"
"(let-values() t_95)"
"(if(any-superior?"
" t_95"
" from-i_93)"
"(let-values()"
" t_95)"
"(let-values()"
"(set-add"
"(set-add"
"(remove-inferior"
" t_95"
" from-i_93)"
" from-i_93))))))))"
"(values t_96)))))"
"(for-loop_90"
" t_94"
"(unsafe-immutable-hash-iterate-next ht_88 i_92))))"
" t_91))))"
" for-loop_90)"
" t_80"
"(unsafe-immutable-hash-iterate-first ht_88))))))"
"(syntax1.1"
"(syntax-content the-struct_86)"
"(syntax-scopes the-struct_86)"
"(syntax-shifted-multi-scopes the-struct_86)"
"(syntax-scope-propagations the-struct_86)"
"(syntax-mpi-shifts the-struct_86)"
"(syntax-srcloc the-struct_86)"
"(syntax-props the-struct_86)"
"(syntax-inspector the-struct_86)"
" tamper12_87))"
"                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_86)))))))))))))"
"(define-values"
"(syntax-taint$1)"
"(lambda(s_97)"
"(if(tamper-tainted?(syntax-tamper s_97))"
" s_97"
"(let-values()"
"(if(syntax?$1 the-struct_98)"
"(let-values(((tamper13_99)(tamper-tainted-for-content(syntax-content s_97))))"
"(syntax1.1"
"(syntax-content the-struct_98)"
"(syntax-scopes the-struct_98)"
"(syntax-shifted-multi-scopes the-struct_98)"
"(syntax-scope-propagations the-struct_98)"
"(syntax-mpi-shifts the-struct_98)"
"(syntax-srcloc the-struct_98)"
"(syntax-props the-struct_98)"
"(syntax-inspector the-struct_98)"
" tamper13_99))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_98))))))"
"(define-values"
"(any-superior?)"
"(lambda(t_100 from-i_101)"
"(let-values()"
"(begin"
"(if((lambda(ht_103)(if(hash? ht_103)(immutable? ht_103) #f)) ht_102)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_102)))"
"((letrec-values(((for-loop_104)"
"(lambda(result_105 i_106)"
"(if i_106"
"(let-values(((i_107)(unsafe-immutable-hash-iterate-key ht_102 i_106)))"
"(let-values(((result_108)"
"(let-values()"
"(let-values(((result_110)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same? i_107 from-i_101)))))"
"(values result_110)))))"
"(if(not((lambda x_111 result_108) i_107))"
"(for-loop_104 result_108(unsafe-immutable-hash-iterate-next ht_102 i_106))"
" result_108)))"
" result_105))))"
" for-loop_104)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_102))))))"
"(define-values"
"(inspector-superior-or-same?)"
"(lambda(sup-i_112 i_113)"
"(let-values(((or-part_114)(eq? sup-i_112 i_113)))"
"(if or-part_114 or-part_114(inspector-superior? sup-i_112 i_113)))))"
"(void)"
"(void)"
"(define-values"
"(struct:fallback fallback1.1 fallback? fallback-search-list)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()(make-struct-type 'fallback #f 1 0 #f null 'prefab #f '(0) #f 'fallback)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'search-list))))"
"(define-values"
"(fallback-first)"
"(lambda(smss_21)(if(fallback? smss_21)(car(fallback-search-list smss_21)) smss_21)))"
"(define-values"
"(fallback-rest)"
"(lambda(smss_22)"
"(let-values(((l_23)(cdr(fallback-search-list smss_22))))(if(null?(cdr l_23))(car l_23)(fallback1.1 l_23)))))"
"(define-values"
"(fallback-push)"
"(lambda(smss_24 smss/maybe-fallback_25)"
"(fallback1.1"
"(cons"
" smss_24"
"(if(fallback? smss/maybe-fallback_25)"
"(fallback-search-list smss/maybe-fallback_25)"
"(list smss/maybe-fallback_25))))))"
"(define-values"
"(fallback-update-first)"
"(lambda(smss_26 f_27)"
"(if(fallback? smss_26)"
"(let-values(((l_28)(fallback-search-list smss_26)))(fallback1.1(cons(f_27(car l_28))(cdr l_28))))"
"(f_27 smss_26))))"
"(define-values"
"(fallback-map)"
"(lambda(smss_29 f_30)"
"(if(fallback? smss_29)"
"(fallback1.1"
"(alt-reverse"
"(let-values(((lst_31)(fallback-search-list smss_29)))"
"(begin"
"(if(list? lst_31)(void)(let-values()(in-list lst_31)))"
"((letrec-values(((for-loop_32)"
"(lambda(fold-var_33 lst_34)"
"(if(pair? lst_34)"
"(let-values(((smss_35)(unsafe-car lst_34)))"
"(let-values(((fold-var_36)"
"(let-values()"
"(let-values(((fold-var_38)"
"(let-values()"
"(cons(let-values()(f_30 smss_35)) fold-var_37))))"
"(values fold-var_38)))))"
"(for-loop_32 fold-var_36(unsafe-cdr lst_34))))"
" fold-var_33))))"
" for-loop_32)"
" null"
" lst_31)))))"
"(f_30 smss_29))))"
"(define-values"
"(fallback->list)"
"(lambda(smss_39)(if(fallback? smss_39)(fallback-search-list smss_39)(list smss_39))))"
"(void)"
"(void)"
"(define-values(cache)(box(make-weak-box #f)))"
"(define-values"
"(clear-resolve-cache!)"
"(case-lambda"
"((sym_16)"
"(let-values(((c_17)(weak-box-value(unbox cache))))(if c_17(let-values()(hash-remove! c_17 sym_16))(void))))"
"(()(let-values(((c_18)(weak-box-value(unbox cache))))(if c_18(let-values()(hash-clear! c_18))(void))))))"
"(define-values"
"(struct:entry entry1.1 entry? entry-scs entry-smss entry-phase entry-binding)"
"(let-values(((struct:_19 make-_20 ?_21 -ref_22 -set!_23)"
"(let-values()"
"(let-values()"
"(make-struct-type 'entry #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'entry)))))"
"(values"
" struct:_19"
" make-_20"
" ?_21"
"(make-struct-field-accessor -ref_22 0 'scs)"
"(make-struct-field-accessor -ref_22 1 'smss)"
"(make-struct-field-accessor -ref_22 2 'phase)"
"(make-struct-field-accessor -ref_22 3 'binding))))"
"(define-values"
"(resolve-cache-get)"
"(lambda(sym_54 phase_55 scs_56 smss_57)"
"(let-values(((c_58)(weak-box-value(unbox cache))))"
"(if c_58"
"(let-values(((v_59)(hash-ref c_58 sym_54 #f)))"
"(if v_59"
"(if(eqv? phase_55(entry-phase v_59))"
"(if(set=? scs_56(entry-scs v_59))(if(set=? smss_57(entry-smss v_59))(entry-binding v_59) #f) #f)"
" #f)"
" #f))"
" #f))))"
"(define-values"
"(resolve-cache-set!)"
"(lambda(sym_60 phase_61 scs_62 smss_63 b_64)"
"(let-values(((wb_65)(unbox cache)))"
"(let-values(((c_66)(weak-box-value wb_65)))"
"(if(not c_66)"
"(let-values()"
"(begin"
"(box-cas! cache wb_65(make-weak-box(make-hasheq)))"
"(resolve-cache-set! sym_60 phase_61 scs_62 smss_63 b_64)))"
"(let-values()(hash-set! c_66 sym_60(entry1.1 scs_62 smss_63 phase_61 b_64))))))))"
"(define-values(NUM-CACHE-SLOTS) 8)"
"(define-values(cached-sets)(make-weak-box(make-vector NUM-CACHE-SLOTS #f)))"
"(define-values(cached-sets-pos) 0)"
"(define-values(cached-hashes)(make-weak-box(make-vector NUM-CACHE-SLOTS #f)))"
"(define-values(cached-hashes-pos) 0)"
"(define-values"
"(cache-or-reuse-set)"
"(lambda(s_67)"
"(let-values(((vec_68)"
"(let-values(((or-part_69)(weak-box-value cached-sets)))"
"(if or-part_69"
" or-part_69"
"(let-values(((vec_70)(make-vector NUM-CACHE-SLOTS #f)))"
"(begin(set! cached-sets(make-weak-box vec_70)) vec_70))))))"
"(let-values(((or-part_71)"
"(let-values(((vec_72 len_73)"
"(let-values()"
"(begin"
"(if(vector? vec_74)(void)(let-values()(in-vector vec_74)))"
"(values vec_74(unsafe-vector-length vec_74))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_75)"
"(lambda(result_76 pos_77)"
"(if(unsafe-fx< pos_77 len_73)"
"(let-values(((s2_78)(unsafe-vector-ref vec_72 pos_77)))"
"(let-values(((result_79)"
"(let-values()"
"(let-values(((result_81)"
"(let-values()"
"(let-values()"
"(if s2_78"
"(if(set=? s_67 s2_78) s2_78 #f)"
" #f)))))"
"(values result_81)))))"
"(if(not((lambda x_82 result_79) s2_78))"
"(for-loop_75 result_79(unsafe-fx+ 1 pos_77))"
" result_79)))"
" result_76))))"
" for-loop_75)"
" #f"
" 0)))))"
"(if or-part_71"
" or-part_71"
"(begin"
"(vector-set! vec_68 cached-sets-pos s_67)"
"(set! cached-sets-pos(modulo(add1 cached-sets-pos) NUM-CACHE-SLOTS))"
" s_67))))))"
"(define-values"
"(cache-or-reuse-hash)"
"(lambda(s_83)"
"(let-values(((vec_84)"
"(let-values(((or-part_85)(weak-box-value cached-hashes)))"
"(if or-part_85"
" or-part_85"
"(let-values(((vec_86)(make-vector NUM-CACHE-SLOTS #f)))"
"(begin(set! cached-hashes(make-weak-box vec_86)) vec_86))))))"
"(let-values(((or-part_87)"
"(let-values(((vec_88 len_89)"
"(let-values()"
"(begin"
"(if(vector? vec_90)(void)(let-values()(in-vector vec_90)))"
"(values vec_90(unsafe-vector-length vec_90))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_91)"
"(lambda(result_92 pos_93)"
"(if(unsafe-fx< pos_93 len_89)"
"(let-values(((s2_94)(unsafe-vector-ref vec_88 pos_93)))"
"(let-values(((result_95)"
"(let-values()"
"(let-values(((result_97)"
"(let-values()"
"(let-values()"
"(if s2_94"
"(if(equal? s_83 s2_94) s2_94 #f)"
" #f)))))"
"(values result_97)))))"
"(if(not((lambda x_98 result_95) s2_94))"
"(for-loop_91 result_95(unsafe-fx+ 1 pos_93))"
" result_95)))"
" result_92))))"
" for-loop_91)"
" #f"
" 0)))))"
"(if or-part_87"
" or-part_87"
"(begin"
"(vector-set! vec_84 cached-hashes-pos s_83)"
"(set! cached-hashes-pos(modulo(add1 cached-hashes-pos) NUM-CACHE-SLOTS))"
" s_83))))))"
"(void)"
"(void)"
"(define-values"
"(struct:scope scope1.1 scope? scope-id scope-kind scope-binding-table set-scope-binding-table!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'scope"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:scope-with-bindings"
"(lambda(s_46 reachable-scopes_47 reach_48 register-trigger_49)"
"(binding-table-register-reachable"
"(scope-binding-table s_46)"
" reachable-scopes_47"
" reach_48"
" register-trigger_49)))"
"(cons prop:reach-scopes(lambda(s_50 reach_51)(void)))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_52 ser-push!_53 state_54)"
"(if(binding-table-empty?(scope-binding-table s_52))"
"(let-values()(ser-push!_53 'tag #f))"
"(let-values()"
"(begin"
"(ser-push!_53 'tag '#:scope-fill!)"
"(ser-push!_53"
"(binding-table-prune-to-reachable(scope-binding-table s_52) state_54)))))))"
"(cons"
" prop:serialize"
"(lambda(s_55 ser-push!_56 state_57)"
"(begin"
"(if(set-member?(serialize-state-reachable-scopes state_57) s_55)"
"(void)"
"                             (let-values () (error \"internal error: found supposedly unreachable scope\")))"
"(if(eq? s_55 top-level-common-scope)"
"(let-values()(ser-push!_56 'tag '#:scope))"
"(let-values()"
"(begin(ser-push!_56 'tag '#:scope+kind)(ser-push!_56(scope-kind s_55))))))))"
"(cons"
" prop:custom-write"
"(lambda(sc_58 port_59 mode_60)"
"(begin"
"                           (write-string \"#<scope:\" port_59)"
"(display(scope-id sc_58) port_59)"
"                           (write-string \":\" port_59)"
"(display(scope-kind sc_58) port_59)"
"                           (write-string \">\" port_59)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'scope)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'id)"
"(make-struct-field-accessor -ref_4 1 'kind)"
"(make-struct-field-accessor -ref_4 2 'binding-table)"
"(make-struct-field-mutator -set!_5 2 'binding-table))))"
"(define-values"
"(deserialize-scope)"
"(case-lambda"
"(() top-level-common-scope)"
"((kind_61)(scope1.1(new-deserialize-scope-id!) kind_61 empty-binding-table))))"
"(define-values(deserialize-scope-fill!)(lambda(s_62 bt_63)(set-scope-binding-table! s_62 bt_63)))"
"(define-values"
"(struct:multi-scope"
" multi-scope2.1"
" multi-scope?"
" multi-scope-id"
" multi-scope-name"
" multi-scope-scopes"
" multi-scope-shifted"
" multi-scope-label-shifted)"
"(let-values(((struct:_64 make-_65 ?_66 -ref_67 -set!_68)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'multi-scope"
" #f"
" 5"
" 0"
" #f"
"(list"
"(cons prop:reach-scopes(lambda(ms_109 reach_110)(reach_110(multi-scope-scopes ms_109))))"
"(cons"
" prop:serialize"
"(lambda(ms_111 ser-push!_112 state_113)"
"(begin"
"(ser-push!_112 'tag '#:multi-scope)"
"(ser-push!_112(multi-scope-name ms_111))"
"(ser-push!_112(multi-scope-scopes ms_111))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'multi-scope)))))"
"(values"
" struct:_64"
" make-_65"
" ?_66"
"(make-struct-field-accessor -ref_67 0 'id)"
"(make-struct-field-accessor -ref_67 1 'name)"
"(make-struct-field-accessor -ref_67 2 'scopes)"
"(make-struct-field-accessor -ref_67 3 'shifted)"
"(make-struct-field-accessor -ref_67 4 'label-shifted))))"
"(define-values"
"(deserialize-multi-scope)"
"(lambda(name_114 scopes_115)"
"(multi-scope2.1(new-deserialize-scope-id!) name_114 scopes_115(box(hasheqv))(box(hash)))))"
"(define-values"
"(struct:representative-scope"
" representative-scope3.1"
" representative-scope?"
" representative-scope-owner"
" representative-scope-phase"
" set-representative-scope-owner!"
" set-representative-scope-phase!)"
"(let-values(((struct:_116 make-_117 ?_118 -ref_119 -set!_120)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'representative-scope"
" struct:scope"
" 2"
" 0"
" #f"
"(list"
"(cons prop:reach-scopes(lambda(s_152 reach_153)(reach_153(representative-scope-owner s_152))))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_154 ser-push!_155 state_156)"
"(begin"
"(ser-push!_155 'tag '#:representative-scope-fill!)"
"(ser-push!_155(binding-table-prune-to-reachable(scope-binding-table s_154) state_156))"
"(ser-push!_155(representative-scope-owner s_154)))))"
"(cons"
" prop:serialize"
"(lambda(s_157 ser-push!_158 state_159)"
"(begin"
"(ser-push!_158 'tag '#:representative-scope)"
"(ser-push!_158(scope-kind s_157))"
"(ser-push!_158(representative-scope-phase s_157)))))"
"(cons"
" prop:custom-write"
"(lambda(sc_160 port_161 mode_162)"
"(begin"
"                           (write-string \"#<scope:\" port_161)"
"(display(scope-id sc_160) port_161)"
"(if(representative-scope-owner sc_160)"
"(let-values()"
"(begin"
"                                 (write-string \"=\" port_161)"
"(display(multi-scope-id(representative-scope-owner sc_160)) port_161)))"
"(void))"
"                           (write-string \"@\" port_161)"
"(display(representative-scope-phase sc_160) port_161)"
"                           (write-string \">\" port_161)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'representative-scope)))))"
"(values"
" struct:_116"
" make-_117"
" ?_118"
"(make-struct-field-accessor -ref_119 0 'owner)"
"(make-struct-field-accessor -ref_119 1 'phase)"
"(make-struct-field-mutator -set!_120 0 'owner)"
"(make-struct-field-mutator -set!_120 1 'phase))))"
"(define-values"
"(deserialize-representative-scope)"
"(lambda(kind_163 phase_164)"
"(let-values(((v_165)(representative-scope3.1(new-deserialize-scope-id!) kind_163 #f #f phase_164))) v_165)))"
"(define-values"
"(deserialize-representative-scope-fill!)"
"(lambda(s_166 bt_167 owner_168)"
"(begin(deserialize-scope-fill! s_166 bt_167)(set-representative-scope-owner! s_166 owner_168))))"
"(define-values"
"(struct:shifted-multi-scope"
" shifted-multi-scope4.1"
" shifted-multi-scope?"
" shifted-multi-scope-phase"
" shifted-multi-scope-multi-scope)"
"(let-values(((struct:_169 make-_170 ?_171 -ref_172 -set!_173)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'shifted-multi-scope"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons"
" prop:reach-scopes"
"(lambda(sms_202 reach_203)(reach_203(shifted-multi-scope-multi-scope sms_202))))"
"(cons"
" prop:serialize"
"(lambda(sms_204 ser-push!_205 state_206)"
"(begin"
"(ser-push!_205 'tag '#:shifted-multi-scope)"
"(ser-push!_205(shifted-multi-scope-phase sms_204))"
"(ser-push!_205(shifted-multi-scope-multi-scope sms_204)))))"
"(cons"
" prop:custom-write"
"(lambda(sms_207 port_208 mode_209)"
"(begin"
"                           (write-string \"#<scope:\" port_208)"
"(display(multi-scope-id(shifted-multi-scope-multi-scope sms_207)) port_208)"
"                           (write-string \"@\" port_208)"
"(display(shifted-multi-scope-phase sms_207) port_208)"
"                           (write-string \">\" port_208)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'shifted-multi-scope)))))"
"(values"
" struct:_169"
" make-_170"
" ?_171"
"(make-struct-field-accessor -ref_172 0 'phase)"
"(make-struct-field-accessor -ref_172 1 'multi-scope))))"
"(define-values"
"(deserialize-shifted-multi-scope)"
"(lambda(phase_210 multi-scope_211)(intern-shifted-multi-scope phase_210 multi-scope_211)))"
"(define-values"
"(intern-shifted-multi-scope)"
"(lambda(phase_212 multi-scope_213)"
"(letrec-values(((transaction-loop_214)"
"(lambda(boxed-table_215 key_216 make_217)"
"(let-values(((or-part_218)(hash-ref(unbox boxed-table_215) phase_212 #f)))"
"(if or-part_218"
" or-part_218"
"(let-values(((val_219)(make_217)))"
"(let-values(((current_220)(unbox boxed-table_215)))"
"(let-values(((next_221)(hash-set current_220 key_216 val_219)))"
"(if(box-cas! boxed-table_215 current_220 next_221)"
" val_219"
"(transaction-loop_214 boxed-table_215 key_216 make_217))))))))))"
"(if(phase? phase_212)"
"(let-values()"
"(let-values(((or-part_222)(hash-ref(unbox(multi-scope-shifted multi-scope_213)) phase_212 #f)))"
"(if or-part_222"
" or-part_222"
"(transaction-loop_214"
"(multi-scope-shifted multi-scope_213)"
" phase_212"
"(lambda()(shifted-multi-scope4.1 phase_212 multi-scope_213))))))"
"(let-values()"
"(let-values(((or-part_223)(hash-ref(unbox(multi-scope-label-shifted multi-scope_213)) phase_212 #f)))"
"(if or-part_223"
" or-part_223"
"(transaction-loop_214"
"(multi-scope-label-shifted multi-scope_213)"
" phase_212"
"(lambda()(shifted-multi-scope4.1 phase_212 multi-scope_213))))))))))"
"(define-values"
"(struct:shifted-to-label-phase shifted-to-label-phase5.1 shifted-to-label-phase? shifted-to-label-phase-from)"
"(let-values(((struct:_224 make-_225 ?_226 -ref_227 -set!_228)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'shifted-to-label-phase"
" #f"
" 1"
" 0"
" #f"
" null"
" 'prefab"
" #f"
" '(0)"
" #f"
" 'shifted-to-label-phase)))))"
"(values struct:_224 make-_225 ?_226(make-struct-field-accessor -ref_227 0 'from))))"
"(define-values(id-counter) 0)"
"(define-values(new-scope-id!)(lambda()(begin(set! id-counter(add1 id-counter)) id-counter)))"
"(define-values(new-deserialize-scope-id!)(lambda()(-(new-scope-id!))))"
"(define-values(top-level-common-scope)(scope1.1 0 'module empty-binding-table))"
"(define-values(new-scope)(lambda(kind_244)(scope1.1(new-scope-id!) kind_244 empty-binding-table)))"
"(define-values"
"(new-multi-scope)"
"(let-values(((new-multi-scope8_245)"
"(lambda(name6_246 name7_247)"
"(let-values(((name_248)(if name7_247 name6_246 #f)))"
"(let-values()"
"(intern-shifted-multi-scope"
" 0"
"(multi-scope2.1(new-scope-id!) name_248(make-hasheqv)(box(hasheqv))(box(hash)))))))))"
"(case-lambda(()(new-multi-scope8_245 #f #f))((name6_249)(new-multi-scope8_245 name6_249 #t)))))"
"(define-values"
"(multi-scope-to-scope-at-phase)"
"(lambda(ms_250 phase_251)"
"(let-values(((or-part_252)(hash-ref(multi-scope-scopes ms_250) phase_251 #f)))"
"(if or-part_252"
" or-part_252"
"(let-values(((s_253)(representative-scope3.1(new-scope-id!) 'module empty-binding-table ms_250 phase_251)))"
"(begin(hash-set!(multi-scope-scopes ms_250) phase_251 s_253) s_253))))))"
"(define-values(scope>?)(lambda(sc1_254 sc2_255)(>(scope-id sc1_254)(scope-id sc2_255))))"
"(define-values"
"(apply-scope)"
"(lambda(s_264 sc_265 op_266 prop-op_267)"
"(if(shifted-multi-scope? sc_265)"
"(let-values()"
"(if(syntax?$1 the-struct_268)"
"(let-values(((shifted-multi-scopes37_269)"
"(fallback-update-first"
"(syntax-shifted-multi-scopes s_264)"
"(lambda(smss_271)(op_266(fallback-first smss_271) sc_265))))"
"((scope-propagations38_270)"
"(if(datum-has-elements?(syntax-content s_264))"
"(prop-op_267"
"(syntax-scope-propagations s_264)"
" sc_265"
"(syntax-scopes s_264)"
"(syntax-shifted-multi-scopes s_264))"
" #f)))"
"(syntax1.1"
"(syntax-content the-struct_268)"
"(syntax-scopes the-struct_268)"
" shifted-multi-scopes37_269"
" scope-propagations38_270"
"(syntax-mpi-shifts the-struct_268)"
"(syntax-srcloc the-struct_268)"
"(syntax-props the-struct_268)"
"(syntax-inspector the-struct_268)"
"(syntax-tamper the-struct_268)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_268)))"
"(let-values()"
"(if(syntax?$1 the-struct_272)"
"(let-values(((scopes39_273)(op_266(syntax-scopes s_264) sc_265))"
"((scope-propagations40_274)"
"(if(datum-has-elements?(syntax-content s_264))"
"(prop-op_267"
"(syntax-scope-propagations s_264)"
" sc_265"
"(syntax-scopes s_264)"
"(syntax-shifted-multi-scopes s_264))"
" #f)))"
"(syntax1.1"
"(syntax-content the-struct_272)"
" scopes39_273"
"(syntax-shifted-multi-scopes the-struct_272)"
" scope-propagations40_274"
"(syntax-mpi-shifts the-struct_272)"
"(syntax-srcloc the-struct_272)"
"(syntax-props the-struct_272)"
"(syntax-inspector the-struct_272)"
"(syntax-tamper the-struct_272)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_272))))))"
"(define-values"
"(syntax-e/no-taint)"
"(lambda(s_275)"
"(let-values((()(begin(propagate-taint! s_275)(values))))"
"(let-values(((prop_276)(syntax-scope-propagations s_275)))"
"(if prop_276"
"(let-values(((new-content_277)"
"(let-values(((s_278)(syntax-content s_275))"
"((f_279)(lambda(tail?_282 x_283) x_283))"
"((s->_280)"
"(lambda(sub-s_284)"
"(let-values()"
"(if(syntax?$1 the-struct_285)"
"(let-values(((scopes41_286)"
"(propagation-apply prop_276(syntax-scopes sub-s_284) s_275))"
"((shifted-multi-scopes42_287)"
"(propagation-apply-shifted"
" prop_276"
"(syntax-shifted-multi-scopes sub-s_284)"
" s_275))"
"((scope-propagations43_288)"
"(propagation-merge"
" prop_276"
"(syntax-scope-propagations sub-s_284)"
"(syntax-scopes sub-s_284)"
"(syntax-shifted-multi-scopes sub-s_284))))"
"(syntax1.1"
"(syntax-content the-struct_285)"
" scopes41_286"
" shifted-multi-scopes42_287"
" scope-propagations43_288"
"(syntax-mpi-shifts the-struct_285)"
"(syntax-srcloc the-struct_285)"
"(syntax-props the-struct_285)"
"(syntax-inspector the-struct_285)"
"(syntax-tamper the-struct_285)))"
"                                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_285)))))"
"((seen_281) #f))"
"(let-values(((f_290)"
"(lambda(tail?_292 v_293)"
"(if(syntax?$1 v_293)"
"(let-values()(s->_280 v_293))"
"(let-values()(f_279 tail?_292 v_293))))))"
"((letrec-values(((loop_294)"
"(lambda(tail?_295 s_296 prev-depth_297)"
"(let-values(((depth_298)(add1 prev-depth_297)))"
"(if(if seen_291(> depth_298 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_295"
" s_296"
"(lambda(tail?_299 s_300)(f_290 tail?_299 s_300))"
" seen_291))"
"(if(null? s_296)"
"(let-values()(f_290 tail?_295 s_296))"
"(if(pair? s_296)"
"(let-values()"
"(f_290"
" tail?_295"
"(cons"
"(loop_294 #f(car s_296) depth_298)"
"(loop_294 #t(cdr s_296) depth_298))))"
"(if(let-values(((or-part_301)(symbol? s_296)))"
"(if or-part_301"
" or-part_301"
"(let-values(((or-part_302)(boolean? s_296)))"
"(if or-part_302 or-part_302(number? s_296)))))"
"(let-values()(f_290 #f s_296))"
"(if(let-values(((or-part_303)(vector? s_296)))"
"(if or-part_303"
" or-part_303"
"(let-values(((or-part_304)(box? s_296)))"
"(if or-part_304"
" or-part_304"
"(let-values(((or-part_305)"
"(prefab-struct-key s_296)))"
"(if or-part_305 or-part_305(hash? s_296)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_295"
" s_296"
"(lambda(tail?_306 s_307)(f_290 tail?_306 s_307))"
" seen_291))"
"(let-values()(f_290 #f s_296)))))))))))"
" loop_294)"
" #f"
" s_289"
" 0)))))"
"(begin"
"(set-syntax-content! s_275 new-content_277)"
"(set-syntax-scope-propagations! s_275 #f)"
" new-content_277))"
"(syntax-content s_275))))))"
"(define-values"
"(syntax-e$1)"
"(lambda(s_308)"
"(let-values(((content_309)(syntax-e/no-taint s_308)))"
"(if(not(tamper-armed?(syntax-tamper s_308)))"
"(let-values() content_309)"
"(if(datum-has-elements? content_309)"
"(let-values()(taint-content content_309))"
"(let-values() content_309))))))"
"(define-values"
"(generalize-scope)"
"(lambda(sc_310)"
"(if(representative-scope? sc_310)"
"(intern-shifted-multi-scope(representative-scope-phase sc_310)(representative-scope-owner sc_310))"
" sc_310)))"
"(define-values"
"(add-scope)"
"(lambda(s_311 sc_312)(apply-scope s_311(generalize-scope sc_312) set-add propagation-add)))"
"(define-values"
"(add-scopes)"
"(lambda(s_313 scs_314)"
"(let-values()"
"(begin"
"(if(list? lst_315)(void)(let-values()(in-list lst_315)))"
"((letrec-values(((for-loop_316)"
"(lambda(s_317 lst_318)"
"(if(pair? lst_318)"
"(let-values(((sc_319)(unsafe-car lst_318)))"
"(let-values(((s_320)"
"(let-values()"
"(let-values(((s_322)(let-values()(add-scope s_321 sc_319))))"
"(values s_322)))))"
"(for-loop_316 s_320(unsafe-cdr lst_318))))"
" s_317))))"
" for-loop_316)"
" s_313"
" lst_315)))))"
"(define-values"
"(remove-scope)"
"(lambda(s_323 sc_324)(apply-scope s_323(generalize-scope sc_324) set-remove propagation-remove)))"
"(define-values"
"(remove-scopes)"
"(lambda(s_325 scs_326)"
"(let-values()"
"(begin"
"(if(list? lst_327)(void)(let-values()(in-list lst_327)))"
"((letrec-values(((for-loop_328)"
"(lambda(s_329 lst_330)"
"(if(pair? lst_330)"
"(let-values(((sc_331)(unsafe-car lst_330)))"
"(let-values(((s_332)"
"(let-values()"
"(let-values(((s_334)(let-values()(remove-scope s_333 sc_331))))"
"(values s_334)))))"
"(for-loop_328 s_332(unsafe-cdr lst_330))))"
" s_329))))"
" for-loop_328)"
" s_325"
" lst_327)))))"
"(define-values"
"(set-flip)"
"(lambda(s_335 e_336)(if(set-member? s_335 e_336)(set-remove s_335 e_336)(set-add s_335 e_336))))"
"(define-values"
"(flip-scope)"
"(lambda(s_337 sc_338)(apply-scope s_337(generalize-scope sc_338) set-flip propagation-flip)))"
"(define-values"
"(flip-scopes)"
"(lambda(s_339 scs_340)"
"(let-values()"
"(begin"
"(if(list? lst_341)(void)(let-values()(in-list lst_341)))"
"((letrec-values(((for-loop_342)"
"(lambda(s_343 lst_344)"
"(if(pair? lst_344)"
"(let-values(((sc_345)(unsafe-car lst_344)))"
"(let-values(((s_346)"
"(let-values()"
"(let-values(((s_348)(let-values()(flip-scope s_347 sc_345))))"
"(values s_348)))))"
"(for-loop_342 s_346(unsafe-cdr lst_344))))"
" s_343))))"
" for-loop_342)"
" s_339"
" lst_341)))))"
"(define-values"
"(push-scope)"
"(lambda(s_349 sms_350)"
"(let-values(((smss/maybe-fallbacks44_351) #f))"
"(let-values(((prev-result_352) #f))"
"(let-values(((push_353)"
"(lambda(smss/maybe-fallbacks_354)"
"(if(eq? smss/maybe-fallbacks44_351 smss/maybe-fallbacks_354)"
"(let-values() prev-result_352)"
"(let-values()"
"(let-values(((r_355)"
"(let-values()"
"(let-values(((smss_356)(fallback-first smss/maybe-fallbacks_354)))"
"(if(set-empty? smss_356)"
"(let-values()(set-add smss_356 sms_350))"
"(if(set-member? smss_356 sms_350)"
"(let-values() smss/maybe-fallbacks_354)"
"(let-values()"
"(fallback-push"
"(set-add smss_356 sms_350)"
" smss/maybe-fallbacks_354))))))))"
"(begin"
"(set! smss/maybe-fallbacks44_351 smss/maybe-fallbacks_354)"
"(set! prev-result_352 r_355)"
" r_355)))))))"
"(let-values(((f_358)(lambda(tail?_362 x_363) x_363))"
"((d->s_359)"
"(lambda(s_364 d_365)"
"(let-values()"
"(if(syntax?$1 the-struct_366)"
"(let-values(((shifted-multi-scopes46_368)"
"(push_353(syntax-shifted-multi-scopes s_364))))"
"(syntax1.1"
" content45_367"
"(syntax-scopes the-struct_366)"
" shifted-multi-scopes46_368"
"(syntax-scope-propagations the-struct_366)"
"(syntax-mpi-shifts the-struct_366)"
"(syntax-srcloc the-struct_366)"
"(syntax-props the-struct_366)"
"(syntax-inspector the-struct_366)"
"(syntax-tamper the-struct_366)))"
"                              (raise-argument-error 'struct-copy \"syntax?\" the-struct_366)))))"
"((seen_361) #f))"
"((letrec-values(((loop_369)"
"(lambda(s_370)"
"(let-values(((f_372)"
"(lambda(tail?_374 v_375)"
"(if(syntax?$1 v_375)"
"(let-values()(d->s_359 v_375(loop_369(s-e_360 v_375))))"
"(let-values()(f_358 tail?_374 v_375))))))"
"((letrec-values(((loop_376)"
"(lambda(tail?_377 s_378 prev-depth_379)"
"(let-values(((depth_380)(add1 prev-depth_379)))"
"(if(if seen_373(> depth_380 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_377"
" s_378"
"(lambda(tail?_381 s_382)(f_372 tail?_381 s_382))"
" seen_373))"
"(if(null? s_378)"
"(let-values()(f_372 tail?_377 s_378))"
"(if(pair? s_378)"
"(let-values()"
"(f_372"
" tail?_377"
"(cons"
"(loop_376 #f(car s_378) depth_380)"
"(loop_376 #t(cdr s_378) depth_380))))"
"(if(let-values(((or-part_383)(symbol? s_378)))"
"(if or-part_383"
" or-part_383"
"(let-values(((or-part_384)(boolean? s_378)))"
"(if or-part_384 or-part_384(number? s_378)))))"
"(let-values()(f_372 #f s_378))"
"(if(let-values(((or-part_385)(vector? s_378)))"
"(if or-part_385"
" or-part_385"
"(let-values(((or-part_386)(box? s_378)))"
"(if or-part_386"
" or-part_386"
"(let-values(((or-part_387)"
"(prefab-struct-key s_378)))"
"(if or-part_387"
" or-part_387"
"(hash? s_378)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_377"
" s_378"
"(lambda(tail?_388 s_389)(f_372 tail?_388 s_389))"
" seen_373))"
"(let-values()(f_372 #f s_378)))))))))))"
" loop_376)"
" #f"
" s_371"
" 0)))))"
" loop_369)"
" s_357)))))))"
"(define-values"
"(struct:propagation propagation10.1 propagation? propagation-prev-scs propagation-prev-smss propagation-scope-ops)"
"(let-values(((struct:_390 make-_391 ?_392 -ref_393 -set!_394)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'propagation"
" #f"
" 3"
" 0"
" #f"
"(list(cons prop:propagation syntax-e$1))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'propagation)))))"
"(values"
" struct:_390"
" make-_391"
" ?_392"
"(make-struct-field-accessor -ref_393 0 'prev-scs)"
"(make-struct-field-accessor -ref_393 1 'prev-smss)"
"(make-struct-field-accessor -ref_393 2 'scope-ops))))"
"(define-values"
"(propagation-add)"
"(lambda(prop_420 sc_421 prev-scs_422 prev-smss_423)"
"(if prop_420"
"(let-values()"
"(if(propagation? the-struct_424)"
"(let-values(((scope-ops48_425)(hash-set(propagation-scope-ops prop_420) sc_421 'add)))"
"(propagation10.1"
"(propagation-prev-scs the-struct_424)"
"(propagation-prev-smss the-struct_424)"
" scope-ops48_425))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_424)))"
"(propagation10.1 prev-scs_422 prev-smss_423(hasheq sc_421 'add)))))"
"(define-values"
"(propagation-remove)"
"(lambda(prop_426 sc_427 prev-scs_428 prev-smss_429)"
"(if prop_426"
"(let-values()"
"(if(propagation? the-struct_430)"
"(let-values(((scope-ops49_431)(hash-set(propagation-scope-ops prop_426) sc_427 'remove)))"
"(propagation10.1"
"(propagation-prev-scs the-struct_430)"
"(propagation-prev-smss the-struct_430)"
" scope-ops49_431))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_430)))"
"(propagation10.1 prev-scs_428 prev-smss_429(hasheq sc_427 'remove)))))"
"(define-values"
"(propagation-flip)"
"(lambda(prop_432 sc_433 prev-scs_434 prev-smss_435)"
"(if prop_432"
"(let-values(((ops_436)(propagation-scope-ops prop_432)))"
"(let-values(((current-op_437)(hash-ref ops_436 sc_433 #f)))"
"(if(if(eq? current-op_437 'flip)(= 1(hash-count ops_436)) #f)"
"(let-values() #f)"
"(let-values()"
"(let-values()"
"(if(propagation? the-struct_438)"
"(let-values(((scope-ops50_439)"
"(if(eq? current-op_437 'flip)"
"(hash-remove ops_436 sc_433)"
"(hash-set"
" ops_436"
" sc_433"
"(let-values()"
"(if(equal? tmp_440 'add)"
"(let-values() 'remove)"
"(if(equal? tmp_440 'remove)(let-values() 'add)(let-values() 'flip))))))))"
"(propagation10.1"
"(propagation-prev-scs the-struct_438)"
"(propagation-prev-smss the-struct_438)"
" scope-ops50_439))"
"                  (raise-argument-error 'struct-copy \"propagation?\" the-struct_438)))))))"
"(propagation10.1 prev-scs_434 prev-smss_435(hasheq sc_433 'flip)))))"
"(define-values"
"(propagation-apply)"
"(lambda(prop_441 scs_442 parent-s_443)"
"(if(eq?(propagation-prev-scs prop_441) scs_442)"
"(let-values()(syntax-scopes parent-s_443))"
"(let-values()"
"(let-values(((new-scs_444)"
"(let-values(((ht_445)(propagation-scope-ops prop_441)))"
"(begin"
"(if((lambda(ht_446)(if(hash? ht_446)(immutable? ht_446) #f)) ht_445)"
"(void)"
"(let-values()(default-in-immutable-hash ht_445)))"
"((letrec-values(((for-loop_447)"
"(lambda(scs_448 i_449)"
"(if i_449"
"(let-values(((sc_450 op_451)"
"(unsafe-immutable-hash-iterate-key+value ht_445 i_449)))"
"(let-values(((scs_452)"
"(let-values()"
"(if(not(shifted-multi-scope? sc_450))"
"(let-values()"
"(let-values(((scs_455)"
"(let-values()"
"(let-values()"
"(if(equal? tmp_456 'add)"
"(let-values()"
"(set-add scs_454 sc_450))"
"(if(equal? tmp_456 'remove)"
"(let-values()"
"(set-remove"
" scs_454"
" sc_450))"
"(let-values()"
"(set-flip"
" scs_454"
" sc_450))))))))"
"(values scs_455)))"
" scs_453))))"
"(for-loop_447"
" scs_452"
"(unsafe-immutable-hash-iterate-next ht_445 i_449))))"
" scs_448))))"
" for-loop_447)"
" scs_442"
"(unsafe-immutable-hash-iterate-first ht_445))))))"
"(if(set=? new-scs_444(syntax-scopes parent-s_443))"
"(syntax-scopes parent-s_443)"
"(cache-or-reuse-set new-scs_444)))))))"
"(define-values"
"(propagation-apply-shifted)"
"(lambda(prop_457 smss_458 parent-s_459)"
"(if(eq?(propagation-prev-smss prop_457) smss_458)"
"(let-values()(syntax-shifted-multi-scopes parent-s_459))"
"(let-values()"
"(let-values(((new-smss_460)"
"(let-values(((ht_462)(propagation-scope-ops prop_457)))"
"(begin"
"(if((lambda(ht_463)(if(hash? ht_463)(immutable? ht_463) #f)) ht_462)"
"(void)"
"(let-values()(default-in-immutable-hash ht_462)))"
"((letrec-values(((for-loop_464)"
"(lambda(smss_465 i_466)"
"(if i_466"
"(let-values(((sms_467 op_468)"
"(unsafe-immutable-hash-iterate-key+value ht_462 i_466)))"
"(let-values(((smss_469)"
"(let-values()"
"(if(shifted-multi-scope? sms_467)"
"(let-values()"
"(let-values(((smss_472)"
"(let-values()"
"(fallback-update-first"
" smss_471"
"(lambda(smss_473)"
"(let-values()"
"(if(equal? tmp_474 'add)"
"(let-values()"
"(set-add"
" smss_473"
" sms_467))"
"(if(equal?"
" tmp_474"
" 'remove)"
"(let-values()"
"(set-remove"
" smss_473"
" sms_467))"
"(let-values()"
"(set-flip"
" smss_473"
" sms_467))))))))))"
"(values smss_472)))"
" smss_470))))"
"(for-loop_464"
" smss_469"
"(unsafe-immutable-hash-iterate-next ht_462 i_466))))"
" smss_465))))"
" for-loop_464)"
" smss_458"
"(unsafe-immutable-hash-iterate-first ht_462))))))"
"(let-values(((parent-smss_461)(syntax-shifted-multi-scopes parent-s_459)))"
"(if(if(set? new-smss_460)(if(set? parent-smss_461)(set=? new-smss_460 parent-smss_461) #f) #f)"
" parent-smss_461"
"(cache-or-reuse-hash new-smss_460))))))))"
"(define-values"
"(propagation-merge)"
"(lambda(prop_475 base-prop_476 prev-scs_477 prev-smss_478)"
"(if(not base-prop_476)"
"(let-values()"
"(if(if(eq?(propagation-prev-scs prop_475) prev-scs_477)"
"(eq?(propagation-prev-smss prop_475) prev-smss_478)"
" #f)"
"(let-values() prop_475)"
"(let-values()(propagation10.1 prev-scs_477 prev-smss_478(propagation-scope-ops prop_475)))))"
"(let-values()"
"(let-values(((new-ops_479)"
"(let-values(((ht_480)(propagation-scope-ops prop_475)))"
"(begin"
"(if((lambda(ht_481)(if(hash? ht_481)(immutable? ht_481) #f)) ht_480)"
"(void)"
"(let-values()(default-in-immutable-hash ht_480)))"
"((letrec-values(((for-loop_482)"
"(lambda(ops_483 i_484)"
"(if i_484"
"(let-values(((sc_485 op_486)"
"(unsafe-immutable-hash-iterate-key+value ht_480 i_484)))"
"(let-values(((ops_487)"
"(let-values()"
"(let-values(((ops_489)"
"(let-values()"
"(let-values()"
"(if(equal? tmp_490 'add)"
"(let-values()"
"(hash-set ops_488 sc_485 'add))"
"(if(equal? tmp_490 'remove)"
"(let-values()"
"(hash-set"
" ops_488"
" sc_485"
" 'remove))"
"(let-values()"
"(let-values(((current-op_491)"
"(hash-ref"
" ops_488"
" sc_485"
" #f)))"
"(let-values()"
"(if(equal? tmp_492 'add)"
"(let-values()"
"(hash-set"
" ops_488"
" sc_485"
" 'remove))"
"(if(equal?"
" tmp_492"
" 'remove)"
"(let-values()"
"(hash-set"
" ops_488"
" sc_485"
" 'add))"
"(if(equal?"
" tmp_492"
" 'flip)"
"(let-values()"
"(hash-remove"
" ops_488"
" sc_485))"
"(let-values()"
"(hash-set"
" ops_488"
" sc_485"
" 'flip))))))))))))))"
"(values ops_489)))))"
"(for-loop_482"
" ops_487"
"(unsafe-immutable-hash-iterate-next ht_480 i_484))))"
" ops_483))))"
" for-loop_482)"
"(propagation-scope-ops base-prop_476)"
"(unsafe-immutable-hash-iterate-first ht_480))))))"
"(if(zero?(hash-count new-ops_479))"
" #f"
"(let-values()"
"(if(propagation? the-struct_493)"
"(let-values()"
"(propagation10.1"
"(propagation-prev-scs the-struct_493)"
"(propagation-prev-smss the-struct_493)"
" scope-ops51_494))"
"                (raise-argument-error 'struct-copy \"propagation?\" the-struct_493)))))))))"
"(define-values"
"(shift-multi-scope)"
"(lambda(sms_495 delta_496)"
"(if(zero-phase? delta_496)"
"(let-values() sms_495)"
"(if(label-phase? delta_496)"
"(let-values()"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_495))"
"(let-values() #f)"
"(let-values()"
"(intern-shifted-multi-scope"
"(shifted-to-label-phase5.1(phase- 0(shifted-multi-scope-phase sms_495)))"
"(shifted-multi-scope-multi-scope sms_495)))))"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_495))"
"(let-values() sms_495)"
"(let-values()"
"(intern-shifted-multi-scope"
"(phase+ delta_496(shifted-multi-scope-phase sms_495))"
"(shifted-multi-scope-multi-scope sms_495))))))))"
"(define-values"
"(syntax-shift-phase-level$1)"
"(lambda(s_497 phase_498)"
"(if(eqv? phase_498 0)"
" s_497"
"(let-values()"
"(let-values(((smss52_499) #f))"
"(let-values(((prev-result_500) #f))"
"(let-values(((shift-all_501)"
"(lambda(smss_502)"
"(if(eq? smss52_499 smss_502)"
"(let-values() prev-result_500)"
"(let-values()"
"(let-values(((r_503)"
"(let-values()"
"(fallback-map"
" smss_502"
"(lambda(smss_504)"
"(let-values()"
"(begin"
"(if((lambda(ht_506)(if(hash? ht_506)(immutable? ht_506) #f))"
" ht_505)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_505)))"
"((letrec-values(((for-loop_507)"
"(lambda(table_508 i_509)"
"(if i_509"
"(let-values(((sms_510)"
"(unsafe-immutable-hash-iterate-key"
" ht_505"
" i_509)))"
"(let-values(((table_511)"
"(let-values(((new-sms_512)"
"(shift-multi-scope"
" sms_510"
" phase_498)))"
"(begin"
" #t"
"((letrec-values(((for-loop_513)"
"(lambda(table_514)"
"(let-values()"
"(let-values(((table_515)"
"(let-values()"
"(if new-sms_512"
"(let-values()"
"(let-values(((table_518)"
"(let-values()"
"(let-values(((key_519"
" val_520)"
"(let-values()"
"(values"
"(let-values()"
" new-sms_512)"
" #t))))"
"(hash-set"
" table_517"
" key_519"
" val_520)))))"
"(values"
" table_518)))"
" table_516))))"
" table_515)))))"
" for-loop_513)"
" table_508)))))"
"(for-loop_507"
" table_511"
"(unsafe-immutable-hash-iterate-next"
" ht_505"
" i_509))))"
" table_508))))"
" for-loop_507)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_505)))))))))"
"(begin(set! smss52_499 smss_502)(set! prev-result_500 r_503) r_503)))))))"
"(let-values(((f_522)(lambda(tail?_526 d_527) d_527))"
"((d->s_523)"
"(lambda(s_528 d_529)"
"(let-values()"
"(if(syntax?$1 the-struct_530)"
"(let-values(((shifted-multi-scopes54_532)"
"(shift-all_501(syntax-shifted-multi-scopes s_528))))"
"(syntax1.1"
" content53_531"
"(syntax-scopes the-struct_530)"
" shifted-multi-scopes54_532"
"(syntax-scope-propagations the-struct_530)"
"(syntax-mpi-shifts the-struct_530)"
"(syntax-srcloc the-struct_530)"
"(syntax-props the-struct_530)"
"(syntax-inspector the-struct_530)"
"(syntax-tamper the-struct_530)))"
"                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_530)))))"
"((seen_525) #f))"
"((letrec-values(((loop_533)"
"(lambda(s_534)"
"(let-values(((f_536)"
"(lambda(tail?_538 v_539)"
"(if(syntax?$1 v_539)"
"(let-values()(d->s_523 v_539(loop_533(s-e_524 v_539))))"
"(let-values()(f_522 tail?_538 v_539))))))"
"((letrec-values(((loop_540)"
"(lambda(tail?_541 s_542 prev-depth_543)"
"(let-values(((depth_544)(add1 prev-depth_543)))"
"(if(if seen_537(> depth_544 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_541"
" s_542"
"(lambda(tail?_545 s_546)(f_536 tail?_545 s_546))"
" seen_537))"
"(if(null? s_542)"
"(let-values()(f_536 tail?_541 s_542))"
"(if(pair? s_542)"
"(let-values()"
"(f_536"
" tail?_541"
"(cons"
"(loop_540 #f(car s_542) depth_544)"
"(loop_540 #t(cdr s_542) depth_544))))"
"(if(let-values(((or-part_547)(symbol? s_542)))"
"(if or-part_547"
" or-part_547"
"(let-values(((or-part_548)(boolean? s_542)))"
"(if or-part_548"
" or-part_548"
"(number? s_542)))))"
"(let-values()(f_536 #f s_542))"
"(if(let-values(((or-part_549)(vector? s_542)))"
"(if or-part_549"
" or-part_549"
"(let-values(((or-part_550)(box? s_542)))"
"(if or-part_550"
" or-part_550"
"(let-values(((or-part_551)"
"(prefab-struct-key"
" s_542)))"
"(if or-part_551"
" or-part_551"
"(hash? s_542)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_541"
" s_542"
"(lambda(tail?_552 s_553)"
"(f_536 tail?_552 s_553))"
" seen_537))"
"(let-values()(f_536 #f s_542)))))))))))"
" loop_540)"
" #f"
" s_535"
" 0)))))"
" loop_533)"
" s_521)))))))))"
"(define-values"
"(syntax-swap-scopes)"
"(lambda(s_554 src-scopes_555 dest-scopes_556)"
"(if(equal? src-scopes_555 dest-scopes_556)"
" s_554"
"(let-values(((src-smss_557 src-scs_558)"
"(set-partition"
"(let-values()"
"(begin"
"(if((lambda(ht_562)(if(hash? ht_562)(immutable? ht_562) #f)) ht_561)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_561)))"
"((letrec-values(((for-loop_563)"
"(lambda(table_564 i_565)"
"(if i_565"
"(let-values(((sc_566)(unsafe-immutable-hash-iterate-key ht_561 i_565)))"
"(let-values(((table_567)"
"(let-values()"
"(let-values(((table_569)"
"(let-values()"
"(let-values(((key_570 val_571)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_566))"
" #t))))"
"(hash-set"
" table_568"
" key_570"
" val_571)))))"
"(values table_569)))))"
"(for-loop_563"
" table_567"
"(unsafe-immutable-hash-iterate-next ht_561 i_565))))"
" table_564))))"
" for-loop_563)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_561))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq)))"
"((dest-smss_559 dest-scs_560)"
"(set-partition"
"(let-values()"
"(begin"
"(if((lambda(ht_573)(if(hash? ht_573)(immutable? ht_573) #f)) ht_572)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_572)))"
"((letrec-values(((for-loop_574)"
"(lambda(table_575 i_576)"
"(if i_576"
"(let-values(((sc_577)(unsafe-immutable-hash-iterate-key ht_572 i_576)))"
"(let-values(((table_578)"
"(let-values()"
"(let-values(((table_580)"
"(let-values()"
"(let-values(((key_581 val_582)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_577))"
" #t))))"
"(hash-set"
" table_579"
" key_581"
" val_582)))))"
"(values table_580)))))"
"(for-loop_574"
" table_578"
"(unsafe-immutable-hash-iterate-next ht_572 i_576))))"
" table_575))))"
" for-loop_574)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_572))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq))))"
"(let-values(((scs55_583) #f))"
"(let-values(((prev-result_584) #f))"
"(let-values(((swap-scs_585)"
"(lambda(scs_589)"
"(if(eq? scs55_583 scs_589)"
"(let-values() prev-result_584)"
"(let-values()"
"(let-values(((r_590)"
"(let-values()"
"(if(subset? src-scs_558 scs_589)"
"(set-union(set-subtract scs_589 src-scs_558) dest-scs_560)"
" scs_589))))"
"(begin(set! scs55_583 scs_589)(set! prev-result_584 r_590) r_590)))))))"
"(let-values(((smss56_586) #f))"
"(let-values(((prev-result_587) #f))"
"(let-values(((swap-smss_588)"
"(lambda(smss_591)"
"(if(eq? smss56_586 smss_591)"
"(let-values() prev-result_587)"
"(let-values()"
"(let-values(((r_592)"
"(let-values()"
"(fallback-update-first"
" smss_591"
"(lambda(smss_593)"
"(if(subset? src-smss_557 smss_593)"
"(set-union"
"(set-subtract smss_593 src-smss_557)"
" dest-smss_559)"
" smss_593))))))"
"(begin(set! smss56_586 smss_591)(set! prev-result_587 r_592) r_592)))))))"
"(let-values(((f_595)(lambda(tail?_599 d_600) d_600))"
"((d->s_596)"
"(lambda(s_601 d_602)"
"(let-values()"
"(if(syntax?$1 the-struct_603)"
"(let-values(((scopes58_605)(swap-scs_585(syntax-scopes s_601)))"
"((shifted-multi-scopes59_606)"
"(swap-smss_588(syntax-shifted-multi-scopes s_601))))"
"(syntax1.1"
" content57_604"
" scopes58_605"
" shifted-multi-scopes59_606"
"(syntax-scope-propagations the-struct_603)"
"(syntax-mpi-shifts the-struct_603)"
"(syntax-srcloc the-struct_603)"
"(syntax-props the-struct_603)"
"(syntax-inspector the-struct_603)"
"(syntax-tamper the-struct_603)))"
"                                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_603)))))"
"((seen_598) #f))"
"((letrec-values(((loop_607)"
"(lambda(s_608)"
"(let-values(((f_610)"
"(lambda(tail?_612 v_613)"
"(if(syntax?$1 v_613)"
"(let-values()(d->s_596 v_613(loop_607(s-e_597 v_613))))"
"(let-values()(f_595 tail?_612 v_613))))))"
"((letrec-values(((loop_614)"
"(lambda(tail?_615 s_616 prev-depth_617)"
"(let-values(((depth_618)(add1 prev-depth_617)))"
"(if(if seen_611(> depth_618 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_615"
" s_616"
"(lambda(tail?_619 s_620)"
"(f_610 tail?_619 s_620))"
" seen_611))"
"(if(null? s_616)"
"(let-values()(f_610 tail?_615 s_616))"
"(if(pair? s_616)"
"(let-values()"
"(f_610"
" tail?_615"
"(cons"
"(loop_614 #f(car s_616) depth_618)"
"(loop_614 #t(cdr s_616) depth_618))))"
"(if(let-values(((or-part_621)"
"(symbol? s_616)))"
"(if or-part_621"
" or-part_621"
"(let-values(((or-part_622)"
"(boolean? s_616)))"
"(if or-part_622"
" or-part_622"
"(number? s_616)))))"
"(let-values()(f_610 #f s_616))"
"(if(let-values(((or-part_623)"
"(vector? s_616)))"
"(if or-part_623"
" or-part_623"
"(let-values(((or-part_624)"
"(box? s_616)))"
"(if or-part_624"
" or-part_624"
"(let-values(((or-part_625)"
"(prefab-struct-key"
" s_616)))"
"(if or-part_625"
" or-part_625"
"(hash? s_616)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_615"
" s_616"
"(lambda(tail?_626 s_627)"
"(f_610 tail?_626 s_627))"
" seen_611))"
"(let-values()(f_610 #f s_616)))))))))))"
" loop_614)"
" #f"
" s_609"
" 0)))))"
" loop_607)"
" s_594))))))))))))"
"(define-values"
"(syntax-scope-set)"
"(lambda(s_628 phase_629)"
"(scope-set-at-fallback s_628(fallback-first(syntax-shifted-multi-scopes s_628)) phase_629)))"
"(define-values"
"(scope-set-at-fallback)"
"(lambda(s_630 smss_631 phase_632)"
"(let-values()"
"(begin"
"(if((lambda(ht_634)(if(hash? ht_634)(immutable? ht_634) #f)) ht_633)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_633)))"
"((letrec-values(((for-loop_635)"
"(lambda(scopes_636 i_637)"
"(if i_637"
"(let-values(((sms_638)(unsafe-immutable-hash-iterate-key ht_633 i_637)))"
"(let-values(((scopes_639)"
"(let-values()"
"(if(let-values(((or-part_641)(label-phase? phase_632)))"
"(if or-part_641"
" or-part_641"
"(not"
"(shifted-to-label-phase?"
"(shifted-multi-scope-phase sms_638)))))"
"(let-values()"
"(let-values(((scopes_643)"
"(let-values()"
"(set-add"
" scopes_642"
"(multi-scope-to-scope-at-phase"
"(shifted-multi-scope-multi-scope sms_638)"
"(let-values(((ph_644)"
"(shifted-multi-scope-phase"
" sms_638)))"
"(if(shifted-to-label-phase? ph_644)"
"(shifted-to-label-phase-from ph_644)"
"(phase- ph_644 phase_632))))))))"
"(values scopes_643)))"
" scopes_640))))"
"(for-loop_635 scopes_639(unsafe-immutable-hash-iterate-next ht_633 i_637))))"
" scopes_636))))"
" for-loop_635)"
"(syntax-scopes s_630)"
"(unsafe-immutable-hash-iterate-first ht_633))))))"
"(define-values"
"(find-max-scope)"
"(lambda(scopes_645)"
"(begin"
"      (if (set-empty? scopes_645) (let-values () (error \"cannot bind in empty scope set\")) (void))"
"(let-values()"
"(begin"
"(if((lambda(ht_647)(if(hash? ht_647)(immutable? ht_647) #f)) ht_646)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_646)))"
"((letrec-values(((for-loop_648)"
"(lambda(max-sc_649 i_650)"
"(if i_650"
"(let-values(((sc_651)(unsafe-immutable-hash-iterate-key ht_646 i_650)))"
"(let-values(((max-sc_652)"
"(let-values()"
"(let-values(((max-sc_654)"
"(let-values()"
"(if(scope>? sc_651 max-sc_653) sc_651 max-sc_653))))"
"(values max-sc_654)))))"
"(for-loop_648 max-sc_652(unsafe-immutable-hash-iterate-next ht_646 i_650))))"
" max-sc_649))))"
" for-loop_648)"
"(set-first scopes_645)"
"(unsafe-immutable-hash-iterate-first ht_646)))))))"
"(define-values"
"(add-binding-in-scopes!16.1)"
"(lambda(just-for-nominal?11_655 just-for-nominal?12_656 scopes13_657 sym14_658 binding15_659)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((just-for-nominal?_663)(if just-for-nominal?12_656 just-for-nominal?11_655 #f)))"
"(let-values()"
"(let-values(((max-sc_664)(find-max-scope scopes_660)))"
"(let-values(((bt_665)"
"(binding-table-add"
"(scope-binding-table max-sc_664)"
" scopes_660"
" sym_661"
" binding_662"
" just-for-nominal?_663)))"
"(begin(set-scope-binding-table! max-sc_664 bt_665)(clear-resolve-cache! sym_661)))))))))))"
"(define-values"
"(add-bulk-binding-in-scopes!)"
"(lambda(scopes_686 bulk-binding_687)"
"(let-values(((max-sc_688)(find-max-scope scopes_686)))"
"(let-values(((bt_689)(binding-table-add-bulk(scope-binding-table max-sc_688) scopes_686 bulk-binding_687)))"
"(begin(set-scope-binding-table! max-sc_688 bt_689)(clear-resolve-cache!))))))"
"(define-values"
"(syntax-any-macro-scopes?)"
"(lambda(s_691)"
"(let-values(((ht_692)(syntax-scopes s_691)))"
"(begin"
"(if((lambda(ht_693)(if(hash? ht_693)(immutable? ht_693) #f)) ht_692)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_692)))"
"((letrec-values(((for-loop_694)"
"(lambda(result_695 i_696)"
"(if i_696"
"(let-values(((sc_697)(unsafe-immutable-hash-iterate-key ht_692 i_696)))"
"(let-values(((result_698)"
"(let-values()"
"(let-values(((result_700)"
"(let-values()"
"(let-values()(eq?(scope-kind sc_697) 'macro)))))"
"(values result_700)))))"
"(if(not((lambda x_701 result_698) sc_697))"
"(for-loop_694 result_698(unsafe-immutable-hash-iterate-next ht_692 i_696))"
" result_698)))"
" result_695))))"
" for-loop_694)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_692))))))"
"(define-values"
"(resolve29.1)"
"(lambda(ambiguous-value19_702"
" ambiguous-value23_703"
" exactly?20_704"
" exactly?24_705"
" extra-shifts22_706"
" extra-shifts26_707"
" get-scopes?21_708"
" get-scopes?25_709"
" s27_710"
" phase28_711)"
"(let-values()"
"(let-values()"
"(let-values(((ambiguous-value_714)(if ambiguous-value23_703 ambiguous-value19_702 #f)))"
"(let-values(((exactly?_715)(if exactly?24_705 exactly?20_704 #f)))"
"(let-values(((get-scopes?_716)(if get-scopes?25_709 get-scopes?21_708 #f)))"
"(let-values(((extra-shifts_717)(if extra-shifts26_707 extra-shifts22_706 null)))"
"(let-values()"
"(let-values(((sym_718)(syntax-content s_712)))"
"((letrec-values(((fallback-loop_719)"
"(lambda(smss_720)"
"(let-values(((c1_721)"
"(if(not exactly?_715)"
"(if(not get-scopes?_716)"
"(resolve-cache-get"
" sym_718"
" phase_713"
"(syntax-scopes s_712)"
"(fallback-first smss_720))"
" #f)"
" #f)))"
"(if c1_721"
"((lambda(b_722) b_722) c1_721)"
"(let-values()"
"(let-values(((scopes_723)"
"(scope-set-at-fallback"
" s_712"
"(fallback-first smss_720)"
" phase_713)))"
"(let-values(((best-scopes_724 best-binding_725)"
"(let-values()"
"(begin"
"(if((lambda(ht_727)"
"(if(hash? ht_727)(immutable? ht_727) #f))"
" ht_726)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys ht_726)))"
"((letrec-values(((for-loop_728)"
"(lambda(best-scopes_729"
" best-binding_730"
" i_731)"
"(if i_731"
"(let-values(((sc_732)"
"(unsafe-immutable-hash-iterate-key"
" ht_726"
" i_731)))"
"(let-values(((best-scopes_733"
" best-binding_734)"
"(let-values(((ht_735"
" bulk-bindings_736)"
"(let-values(((table_739)"
"(scope-binding-table"
" sc_732)))"
"(if(hash?"
" table_739)"
"(values"
"(hash-ref"
" table_739"
" sym_718"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_739)"
" sym_718"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_739))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_740)"
"(lambda(best-scopes_741"
" best-binding_742"
" i_743)"
"(if(not"
"(null?"
" i_743))"
"(let-values(((b-scopes_744)"
"(if(pair?"
" i_743)"
"(let-values()"
"(bulk-binding-at-scopes"
"(car"
" i_743)))"
"(let-values()"
"(hash-iterate-key"
" ht_735"
" i_743))))"
"((binding_745)"
"(if(pair?"
" i_743)"
"(let-values()"
"(let-values(((bulk_746)"
"(bulk-binding-at-bulk"
"(car"
" i_743))))"
"(let-values(((b-info_747)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_746"
" s_737"
" extra-shifts_738)"
" sym_718"
" #f)))"
"(if b-info_747"
"((bulk-binding-create"
" bulk_746)"
" bulk_746"
" b-info_747"
" sym_718)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_735"
" i_743)))))"
"(let-values(((best-scopes_748"
" best-binding_749)"
"(let-values()"
"(if(if b-scopes_744"
"(if binding_745"
"(subset?"
" b-scopes_744"
" scopes_723)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((best-scopes_754"
" best-binding_755)"
"(let-values()"
"(if(pair?"
" best-scopes_752)"
"(let-values()"
"(if(let-values()"
"(begin"
"(if(list?"
" lst_756)"
"(void)"
"(let-values()"
"(in-list"
" lst_756)))"
"((letrec-values(((for-loop_757)"
"(lambda(result_758"
" lst_759)"
"(if(pair?"
" lst_759)"
"(let-values(((amb-scopes_760)"
"(unsafe-car"
" lst_759)))"
"(let-values(((result_761)"
"(let-values()"
"(let-values(((result_763)"
"(let-values()"
"(let-values()"
"(subset?"
" amb-scopes_760"
" b-scopes_744)))))"
"(values"
" result_763)))))"
"(if(not"
"((lambda x_764"
"(not"
" result_761))"
" amb-scopes_760))"
"(for-loop_757"
" result_761"
"(unsafe-cdr"
" lst_759))"
" result_761)))"
" result_758))))"
" for-loop_757)"
" #t"
" lst_756)))"
"(let-values()"
"(values"
" b-scopes_744"
" binding_745))"
"(let-values()"
"(values"
"(cons"
" b-scopes_744"
" best-scopes_752)"
" #f))))"
"(if(not"
" best-scopes_752)"
"(let-values()"
"(values"
" b-scopes_744"
" binding_745))"
"(if(subset?"
" b-scopes_744"
" best-scopes_752)"
"(let-values()"
"(values"
" best-scopes_752"
" best-binding_753))"
"(if(subset?"
" best-scopes_752"
" b-scopes_744)"
"(let-values()"
"(values"
" b-scopes_744"
" binding_745))"
"(let-values()"
"(values"
"(list"
" best-scopes_752"
" b-scopes_744)"
" #f)))))))))"
"(values"
" best-scopes_754"
" best-binding_755)))"
"(values"
" best-scopes_750"
" best-binding_751)))))"
"(for-loop_740"
" best-scopes_748"
" best-binding_749"
"(if(pair?"
" i_743)"
"(let-values()"
"(cdr"
" i_743))"
"(let-values()"
"(let-values(((or-part_765)"
"(hash-iterate-next"
" ht_735"
" i_743)))"
"(if or-part_765"
" or-part_765"
" bulk-bindings_736)))))))"
"(values"
" best-scopes_741"
" best-binding_742)))))"
" for-loop_740)"
" best-scopes_729"
" best-binding_730"
"(let-values(((or-part_766)"
"(hash-iterate-first"
" ht_735)))"
"(if or-part_766"
" or-part_766"
" bulk-bindings_736)))))))"
"(for-loop_728"
" best-scopes_733"
" best-binding_734"
"(unsafe-immutable-hash-iterate-next"
" ht_726"
" i_731))))"
"(values"
" best-scopes_729"
" best-binding_730)))))"
" for-loop_728)"
" #f"
" #f"
"(unsafe-immutable-hash-iterate-first ht_726))))))"
"(if(pair? best-scopes_724)"
"(let-values()"
"(if(fallback? smss_720)"
"(fallback-loop_719(fallback-rest smss_720))"
" ambiguous-value_714))"
"(if best-scopes_724"
"(let-values()"
"(begin"
"(resolve-cache-set!"
" sym_718"
" phase_713"
"(syntax-scopes s_712)"
"(fallback-first smss_720)"
" best-binding_725)"
"(if(let-values(((or-part_767)(not exactly?_715)))"
"(if or-part_767"
" or-part_767"
"(eqv?"
"(set-count scopes_723)"
"(set-count best-scopes_724))))"
"(if get-scopes?_716 best-scopes_724 best-binding_725)"
" #f)))"
"(let-values()"
"(if(fallback? smss_720)"
"(fallback-loop_719(fallback-rest smss_720))"
" #f))))))))))))"
" fallback-loop_719)"
"(syntax-shifted-multi-scopes s_712))))))))))))"
"(define-values"
"(bound-identifier=?$1)"
"(lambda(a_803 b_804 phase_805)"
"(if(eq?(syntax-e$1 a_803)(syntax-e$1 b_804))"
"(equal?(syntax-scope-set a_803 phase_805)(syntax-scope-set b_804 phase_805))"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(syntax-property$1)"
"(case-lambda"
"((s_1 key_2)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_1)))"
"(values))))"
"(let-values(((v_3)(hash-ref(syntax-props s_1) key_2 #f)))(plain-property-value v_3))))"
"((s_4 key_5 val_6)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_4) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_4)))"
"(values))))"
"(let-values(((pval_7)(if(eq? key_5 'paren-shape)(preserved-property-value1.1 val_6) val_6)))"
"(let-values(((the-struct_8) s_4))"
"(if(syntax?$1 the-struct_8)"
"(let-values(((props1_9)(hash-set(syntax-props s_4) key_5 pval_7)))"
"(syntax1.1"
"(syntax-content the-struct_8)"
"(syntax-scopes the-struct_8)"
"(syntax-shifted-multi-scopes the-struct_8)"
"(syntax-scope-propagations the-struct_8)"
"(syntax-mpi-shifts the-struct_8)"
"(syntax-srcloc the-struct_8)"
" props1_9"
"(syntax-inspector the-struct_8)"
"(syntax-tamper the-struct_8)))"
"            (raise-argument-error 'struct-copy \"syntax?\" the-struct_8))))))"
"((s_10 key_11 val_12 preserved?_13)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_10) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_10)))"
"(values))))"
"(let-values((()"
"(begin"
"(if preserved?_13"
"(let-values()"
"(if(if(symbol? key_11)(symbol-interned? key_11) #f)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-property"
"                               \"key for a perserved property must be an interned symbol\""
"                               \"given key\""
" key_11"
"                               \"given value\""
" val_12))))"
"(void))"
"(values))))"
"(let-values(((pval_14)(if preserved?_13(preserved-property-value1.1 val_12) val_12)))"
"(let-values(((the-struct_15) s_10))"
"(if(syntax?$1 the-struct_15)"
"(let-values(((props2_16)(hash-set(syntax-props s_10) key_11 pval_14)))"
"(syntax1.1"
"(syntax-content the-struct_15)"
"(syntax-scopes the-struct_15)"
"(syntax-shifted-multi-scopes the-struct_15)"
"(syntax-scope-propagations the-struct_15)"
"(syntax-mpi-shifts the-struct_15)"
"(syntax-srcloc the-struct_15)"
" props2_16"
"(syntax-inspector the-struct_15)"
"(syntax-tamper the-struct_15)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_15)))))))))"
"(define-values"
"(1/syntax-property-preserved?)"
"(lambda(s_17 key_18)"
"(begin"
"      (if (syntax?$1 s_17) (void) (let-values () (raise-argument-error 'syntax-property-preserved \"syntax?\" s_17)))"
"(if(if(symbol? key_18)(symbol-interned? key_18) #f)"
"(void)"
"        (let-values () (raise-argument-error 'syntax-property \"(and/c symbol? symbol-interned?)\" key_18)))"
"(preserved-property-value?(hash-ref(syntax-props s_17) key_18 #f)))))"
"(define-values"
"(1/syntax-property-symbol-keys)"
"(lambda(s_19)"
"(begin"
"      (if (syntax?$1 s_19) (void) (let-values () (raise-argument-error 'syntax-property-symbol-keys \"syntax\" s_19)))"
"(alt-reverse"
"(let-values(((ht_20)(syntax-props s_19)))"
"(begin"
"(if((lambda(ht_21)(if(hash? ht_21)(immutable? ht_21) #f)) ht_20)"
"(void)"
"(let-values()(default-in-immutable-hash ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23 i_24)"
"(if i_24"
"(let-values(((k_25 v_26)(unsafe-immutable-hash-iterate-key+value ht_20 i_24)))"
"(let-values(((fold-var_27)"
"(let-values()"
"(if(if(symbol? k_25)(symbol-interned? k_25) #f)"
"(let-values()"
"(let-values(((fold-var_30)"
"(let-values()"
"(cons(let-values() k_25) fold-var_29))))"
"(values fold-var_30)))"
" fold-var_28))))"
"(for-loop_22 fold-var_27(unsafe-immutable-hash-iterate-next ht_20 i_24))))"
" fold-var_23))))"
" for-loop_22)"
" null"
"(unsafe-immutable-hash-iterate-first ht_20))))))))"
"(define-values"
"(syntax-property-remove)"
"(lambda(s_31 key_32)"
"(if(hash-ref(syntax-props s_31) key_32 #f)"
"(let-values()"
"(if(syntax?$1 the-struct_33)"
"(let-values(((props3_34)(hash-remove(syntax-props s_31) key_32)))"
"(syntax1.1"
"(syntax-content the-struct_33)"
"(syntax-scopes the-struct_33)"
"(syntax-shifted-multi-scopes the-struct_33)"
"(syntax-scope-propagations the-struct_33)"
"(syntax-mpi-shifts the-struct_33)"
"(syntax-srcloc the-struct_33)"
" props3_34"
"(syntax-inspector the-struct_33)"
"(syntax-tamper the-struct_33)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_33)))"
" s_31)))"
"(void)"
"(void)"
"(define-values"
"(struct:full-binding full-binding1.1 full-binding? full-binding-frame-id full-binding-free=id)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-binding"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:binding-reach-scopes(lambda(b_27)(binding-free=id b_27))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'full-binding)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'frame-id)"
"(make-struct-field-accessor -ref_4 1 'free=id))))"
"(define-values(binding-frame-id)(lambda(b_28)(if(full-binding? b_28)(full-binding-frame-id b_28) #f)))"
"(define-values(binding-free=id)(lambda(b_29)(if(full-binding? b_29)(full-binding-free=id b_29) #f)))"
"(void)"
"(void)"
"(define-values"
"(make-module-binding22.1)"
"(lambda(extra-inspector8_1"
" extra-inspector17_2"
" extra-nominal-bindings9_3"
" extra-nominal-bindings18_4"
" frame-id6_5"
" frame-id15_6"
" free=id7_7"
" free=id16_8"
" nominal-module2_9"
" nominal-module11_10"
" nominal-phase3_11"
" nominal-phase12_12"
" nominal-require-phase5_13"
" nominal-require-phase14_14"
" nominal-sym4_15"
" nominal-sym13_16"
" wrt1_17"
" wrt10_18"
" module19_19"
" phase20_20"
" sym21_21)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((wrt-sym_25)(if wrt10_18 wrt1_17 sym_24)))"
"(let-values(((nominal-module_26)(if nominal-module11_10 nominal-module2_9 module_22)))"
"(let-values(((nominal-phase_27)(if nominal-phase12_12 nominal-phase3_11 phase_23)))"
"(let-values(((nominal-sym_28)(if nominal-sym13_16 nominal-sym4_15 sym_24)))"
"(let-values(((nominal-require-phase_29)(if nominal-require-phase14_14 nominal-require-phase5_13 0)))"
"(let-values(((frame-id_30)(if frame-id15_6 frame-id6_5 #f)))"
"(let-values(((free=id_31)(if free=id16_8 free=id7_7 #f)))"
"(let-values(((extra-inspector_32)(if extra-inspector17_2 extra-inspector8_1 #f)))"
"(let-values(((extra-nominal-bindings_33)"
"(if extra-nominal-bindings18_4 extra-nominal-bindings9_3 null)))"
"(let-values()"
"(if(let-values()"
"(if or-part_34"
" or-part_34"
"(let-values()"
"(if or-part_35"
" or-part_35"
"(let-values()"
"(if or-part_36"
" or-part_36"
"(not"
"(if(eqv? nominal-phase_27 phase_23)"
"(if(eq? nominal-sym_28 sym_24)"
"(if(eqv? nominal-require-phase_29 0)"
"(null? extra-nominal-bindings_33)"
" #f)"
" #f)"
" #f))))))))"
"(let-values()"
"(full-module-binding51.1"
" frame-id_30"
" free=id_31"
" module_22"
" phase_23"
" sym_24"
" nominal-module_26"
" nominal-phase_27"
" nominal-sym_28"
" nominal-require-phase_29"
" extra-inspector_32"
" extra-nominal-bindings_33))"
"(let-values()"
"(simple-module-binding52.1"
" module_22"
" phase_23"
" sym_24"
" nominal-module_26))))))))))))))))))"
"(define-values"
"(module-binding-update48.1)"
"(lambda(extra-inspector34_105"
" extra-inspector45_106"
" extra-nominal-bindings35_107"
" extra-nominal-bindings46_108"
" frame-id32_109"
" frame-id43_110"
" free=id33_111"
" free=id44_112"
" module25_113"
" module36_114"
" nominal-module28_115"
" nominal-module39_116"
" nominal-phase29_117"
" nominal-phase40_118"
" nominal-require-phase31_119"
" nominal-require-phase42_120"
" nominal-sym30_121"
" nominal-sym41_122"
" phase26_123"
" phase37_124"
" sym27_125"
" sym38_126"
" b47_127)"
"(let-values()"
"(let-values(((module_129)(if module36_114 module25_113(module-binding-module b_128))))"
"(let-values(((phase_130)(if phase37_124 phase26_123(module-binding-phase b_128))))"
"(let-values(((sym_131)(if sym38_126 sym27_125(module-binding-sym b_128))))"
"(let-values(((nominal-module_132)"
"(if nominal-module39_116 nominal-module28_115(module-binding-nominal-module b_128))))"
"(let-values(((nominal-phase_133)"
"(if nominal-phase40_118 nominal-phase29_117(module-binding-nominal-phase b_128))))"
"(let-values(((nominal-sym_134)"
"(if nominal-sym41_122 nominal-sym30_121(module-binding-nominal-sym b_128))))"
"(let-values(((nominal-require-phase_135)"
"(if nominal-require-phase42_120"
" nominal-require-phase31_119"
"(module-binding-nominal-require-phase b_128))))"
"(let-values(((frame-id_136)(if frame-id43_110 frame-id32_109(binding-frame-id b_128))))"
"(let-values(((free=id_137)(if free=id44_112 free=id33_111(binding-free=id b_128))))"
"(let-values(((extra-inspector_138)"
"(if extra-inspector45_106"
" extra-inspector34_105"
"(module-binding-extra-inspector b_128))))"
"(let-values(((extra-nominal-bindings_139)"
"(if extra-nominal-bindings46_108"
" extra-nominal-bindings35_107"
"(module-binding-extra-nominal-bindings b_128))))"
"(let-values()"
"(let-values()"
"(make-module-binding22.1"
" extra-inspector62_150"
" #t"
" extra-nominal-bindings63_151"
" #t"
" frame-id60_148"
" #t"
" free=id61_149"
" #t"
" nominal-module56_144"
" #t"
" nominal-phase57_145"
" #t"
" nominal-require-phase59_147"
" #t"
" nominal-sym58_146"
" #t"
" #f"
" #f"
" module53_141"
" phase54_142"
" sym55_143)))))))))))))))))"
"(define-values"
"(module-binding?)"
"(lambda(b_226)"
"(let-values(((or-part_227)(simple-module-binding? b_226)))"
"(if or-part_227 or-part_227(full-module-binding? b_226)))))"
"(define-values"
"(struct:full-module-binding"
" full-module-binding51.1"
" full-module-binding?"
" full-module-binding-module"
" full-module-binding-phase"
" full-module-binding-sym"
" full-module-binding-nominal-module"
" full-module-binding-nominal-phase"
" full-module-binding-nominal-sym"
" full-module-binding-nominal-require-phase"
" full-module-binding-extra-inspector"
" full-module-binding-extra-nominal-bindings)"
"(let-values(((struct:_228 make-_229 ?_230 -ref_231 -set!_232)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-module-binding"
" struct:full-binding"
" 9"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_295 ser-push!_296 state_297)"
"(let-values(((simplified-b_298)"
"(if(full-binding-frame-id b_295)"
"(let-values(((temp66_301) #f))"
"(module-binding-update48.1"
" #f"
" #f"
" #f"
" #f"
" temp66_301"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b65_300))"
" b_295)))"
"(if(full-module-binding? simplified-b_298)"
"(let-values()"
"(begin"
"(ser-push!_296 'tag '#:module-binding)"
"(ser-push!_296(full-module-binding-module b_295))"
"(ser-push!_296(full-module-binding-sym b_295))"
"(ser-push!_296(full-module-binding-phase b_295))"
"(ser-push!_296(full-module-binding-nominal-module b_295))"
"(ser-push!_296(full-module-binding-nominal-phase b_295))"
"(ser-push!_296(full-module-binding-nominal-sym b_295))"
"(ser-push!_296(full-module-binding-nominal-require-phase b_295))"
"(ser-push!_296(full-binding-free=id b_295))"
"(if(full-module-binding-extra-inspector b_295)"
"(ser-push!_296 'tag '#:inspector)"
"(ser-push!_296 #f))"
"(ser-push!_296(full-module-binding-extra-nominal-bindings b_295))))"
"(let-values()(ser-push!_296 simplified-b_298)))))))"
" #f"
" #f"
" '(0 1 2 3 4 5 6 7 8)"
" #f"
" 'full-module-binding)))))"
"(values"
" struct:_228"
" make-_229"
" ?_230"
"(make-struct-field-accessor -ref_231 0 'module)"
"(make-struct-field-accessor -ref_231 1 'phase)"
"(make-struct-field-accessor -ref_231 2 'sym)"
"(make-struct-field-accessor -ref_231 3 'nominal-module)"
"(make-struct-field-accessor -ref_231 4 'nominal-phase)"
"(make-struct-field-accessor -ref_231 5 'nominal-sym)"
"(make-struct-field-accessor -ref_231 6 'nominal-require-phase)"
"(make-struct-field-accessor -ref_231 7 'extra-inspector)"
"(make-struct-field-accessor -ref_231 8 'extra-nominal-bindings))))"
"(define-values"
"(struct:simple-module-binding"
" simple-module-binding52.1"
" simple-module-binding?"
" simple-module-binding-module"
" simple-module-binding-phase"
" simple-module-binding-sym"
" simple-module-binding-nominal-module)"
"(let-values(((struct:_302 make-_303 ?_304 -ref_305 -set!_306)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'simple-module-binding"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_340 ser-push!_341 state_342)"
"(begin"
"(ser-push!_341 'tag '#:simple-module-binding)"
"(ser-push!_341(simple-module-binding-module b_340))"
"(ser-push!_341(simple-module-binding-sym b_340))"
"(ser-push!_341(simple-module-binding-phase b_340))"
"(ser-push!_341(simple-module-binding-nominal-module b_340))))))"
" #f"
" #f"
" '(0 1 2 3)"
" #f"
" 'simple-module-binding)))))"
"(values"
" struct:_302"
" make-_303"
" ?_304"
"(make-struct-field-accessor -ref_305 0 'module)"
"(make-struct-field-accessor -ref_305 1 'phase)"
"(make-struct-field-accessor -ref_305 2 'sym)"
"(make-struct-field-accessor -ref_305 3 'nominal-module))))"
"(define-values"
"(deserialize-full-module-binding)"
"(lambda(module_343"
" sym_344"
" phase_345"
" nominal-module_346"
" nominal-phase_347"
" nominal-sym_348"
" nominal-require-phase_349"
" free=id_350"
" extra-inspector_351"
" extra-nominal-bindings_352)"
"(let-values()"
"(make-module-binding22.1"
" extra-inspector76_362"
" #t"
" extra-nominal-bindings77_363"
" #t"
" #f"
" #f"
" free=id75_361"
" #t"
" nominal-module71_357"
" #t"
" nominal-phase72_358"
" #t"
" nominal-require-phase74_360"
" #t"
" nominal-sym73_359"
" #t"
" #f"
" #f"
" module68_354"
" phase69_355"
" sym70_356))))"
"(define-values"
"(deserialize-simple-module-binding)"
"(lambda(module_364 sym_365 phase_366 nominal-module_367)"
"(simple-module-binding52.1 module_364 phase_366 sym_365 nominal-module_367)))"
"(define-values"
"(module-binding-module)"
"(lambda(b_368)"
"(if(simple-module-binding? b_368)(simple-module-binding-module b_368)(full-module-binding-module b_368))))"
"(define-values"
"(module-binding-phase)"
"(lambda(b_369)"
"(if(simple-module-binding? b_369)(simple-module-binding-phase b_369)(full-module-binding-phase b_369))))"
"(define-values"
"(module-binding-sym)"
"(lambda(b_370)"
"(if(simple-module-binding? b_370)(simple-module-binding-sym b_370)(full-module-binding-sym b_370))))"
"(define-values"
"(module-binding-nominal-module)"
"(lambda(b_371)"
"(if(simple-module-binding? b_371)"
"(simple-module-binding-nominal-module b_371)"
"(full-module-binding-nominal-module b_371))))"
"(define-values"
"(module-binding-nominal-phase)"
"(lambda(b_372)"
"(if(simple-module-binding? b_372)(simple-module-binding-phase b_372)(full-module-binding-nominal-phase b_372))))"
"(define-values"
"(module-binding-nominal-sym)"
"(lambda(b_373)"
"(if(simple-module-binding? b_373)(simple-module-binding-sym b_373)(full-module-binding-nominal-sym b_373))))"
"(define-values"
"(module-binding-nominal-require-phase)"
"(lambda(b_374)(if(simple-module-binding? b_374) 0(full-module-binding-nominal-require-phase b_374))))"
"(define-values"
"(module-binding-extra-inspector)"
"(lambda(b_375)(if(simple-module-binding? b_375) #f(full-module-binding-extra-inspector b_375))))"
"(define-values"
"(module-binding-extra-nominal-bindings)"
"(lambda(b_376)(if(simple-module-binding? b_376) null(full-module-binding-extra-nominal-bindings b_376))))"
"(void)"
"(void)"
"(define-values"
"(local-binding?)"
"(lambda(b_1)(let-values(((or-part_2)(full-local-binding? b_1)))(if or-part_2 or-part_2(symbol? b_1)))))"
"(define-values"
"(struct:full-local-binding full-local-binding1.1 full-local-binding? full-local-binding-key)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-local-binding"
" struct:full-binding"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_26 ser-push!_27 state_28)"
"(begin"
"(ser-push!_27 'tag '#:local-binding)"
"(ser-push!_27(full-local-binding-key b_26))"
"(ser-push!_27(full-binding-free=id b_26))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'full-local-binding)))))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'key))))"
"(define-values"
"(deserialize-full-local-binding)"
"(lambda(key_29 free=id_30)(full-local-binding1.1 #f free=id_30 key_29)))"
"(define-values"
"(make-local-binding7.1)"
"(lambda(frame-id2_31 frame-id4_32 free=id3_33 free=id5_34 key6_35)"
"(let-values()"
"(let-values(((frame-id_37)(if frame-id4_32 frame-id2_31 #f)))"
"(let-values(((free=id_38)(if free=id5_34 free=id3_33 #f)))"
"(let-values()"
"(if(if(not frame-id_37)(not free=id_38) #f)"
"(let-values() key_36)"
"(let-values()(full-local-binding1.1 frame-id_37 free=id_38 key_36)))))))))"
"(define-values"
"(local-binding-update17.1)"
"(lambda(frame-id11_59 frame-id14_60 free=id12_61 free=id15_62 key10_63 key13_64 b16_65)"
"(let-values()"
"(let-values(((key_67)(if key13_64 key10_63(local-binding-key b_66))))"
"(let-values(((frame-id_68)(if frame-id14_60 frame-id11_59(binding-frame-id b_66))))"
"(let-values(((free=id_69)(if free=id15_62 free=id12_61(binding-free=id b_66))))"
"(let-values()(let-values()(make-local-binding7.1 frame-id22_72 #t free=id23_73 #t key21_71)))))))))"
"(define-values"
"(local-binding-key)"
"(lambda(b_100)(if(full-local-binding? b_100)(full-local-binding-key b_100) b_100)))"
"(void)"
"(void)"
"(define-values"
"(1/prop:rename-transformer 1/rename-transformer? rename-transformer-value)"
"(make-struct-type-property"
" 'rename-transformer"
"(lambda(v_1 info_2)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)(exact-nonnegative-integer? v_1)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(identifier? v_1)))"
"(if or-part_5 or-part_5(if(procedure? v_1)(procedure-arity-includes? v_1 1) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:rename-transformer"
"(string-append"
"                           \"(or/c exact-nonnegative-integer?\\n\""
"                           \"      identifier?\\n\""
"                           \"      (procedure-arity-includes? proc 1))\")"
" v_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_1)"
"(let-values()"
"(begin"
"(if(<= v_1(list-ref info_2 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_1"
"                                  \"initialized-field count\""
"(list-ref info_2 1))))"
"(if(member v_1(list-ref info_2 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_1)))))"
"(void))"
"(values))))"
"(let-values(((ref_3)(list-ref info_2 3)))"
"(if(identifier? v_1)"
"(let-values()(lambda(t_6) v_1))"
"(if(integer? v_1)"
"(let-values()"
"(lambda(t_7)"
"(let-values(((val_8)(ref_3 t_7 v_1)))(if(identifier? val_8) val_8(datum->syntax$1 #f '?)))))"
"(let-values()"
"(lambda(t_9)"
"(let-values(((id_10)(v_1 t_9)))"
"(begin"
"(if(identifier? id_10)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'prop:rename-transformer"
"                            \"contract violation for given value; expected an identifier\""
"                            \"given\""
" id_10)))"
" id_10))))))))))))"
"(define-values"
"(1/make-rename-transformer)"
"(let-values()"
"(let-values(((struct:rename-transformer_11 rename-transformer1_12 rename-transformer?_13 rename-transformer-id_14)"
"(let-values(((struct:_16 make-_17 ?_18 -ref_19 -set!_20)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'rename-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:rename-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'rename-transformer)))))"
"(values struct:_16 make-_17 ?_18(make-struct-field-accessor -ref_19 0 'id)))))"
"(lambda(id_36)"
"(begin"
"(if(identifier? id_36)"
"(void)"
"            (let-values () (raise-argument-error 'make-rename-transformer \"identifier?\" id_36)))"
"(rename-transformer1_12 id_36))))))"
"(define-values(1/rename-transformer-target)(lambda(t_37)((rename-transformer-value t_37) t_37)))"
"(void)"
"(void)"
"(define-values"
"(free-identifier=?$1)"
"(lambda(a_1 b_2 a-phase_3 b-phase_4)"
"(let-values(((ab_5)"
"(let-values(((...r/syntax/binding.rkt:45:13_7) resolve+shift32.1)((temp49_10) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f temp49_10 #t a47_8 a-phase48_9))))"
"(let-values(((bb_6)"
"(let-values(((...r/syntax/binding.rkt:46:13_11) resolve+shift32.1)((temp52_14) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f temp52_14 #t b50_12 b-phase51_13))))"
"(if(let-values(((or-part_15)(symbol? ab_5)))(if or-part_15 or-part_15(symbol? bb_6)))"
"(let-values()(eq? ab_5 bb_6))"
"(let-values()(same-binding? ab_5 bb_6)))))))"
"(define-values"
"(same-binding?)"
"(lambda(ab_16 bb_17)"
"(if(module-binding? ab_16)"
"(let-values()"
"(if(module-binding? bb_17)"
"(if(eq?(module-binding-sym ab_16)(module-binding-sym bb_17))"
"(if(eqv?(module-binding-phase ab_16)(module-binding-phase bb_17))"
"(eq?"
"(1/module-path-index-resolve(module-binding-module ab_16))"
"(1/module-path-index-resolve(module-binding-module bb_17)))"
" #f)"
" #f)"
" #f))"
"(if(local-binding? ab_16)"
"(let-values()(if(local-binding? bb_17)(eq?(local-binding-key ab_16)(local-binding-key bb_17)) #f))"
"        (let-values () (error \"bad binding\" ab_16))))))"
"(define-values"
"(same-binding-nominals?)"
"(lambda(ab_18 bb_19)"
"(if(eq?"
"(1/module-path-index-resolve(module-binding-nominal-module ab_18))"
"(1/module-path-index-resolve(module-binding-nominal-module bb_19)))"
"(if(eqv?(module-binding-nominal-require-phase ab_18)(module-binding-nominal-require-phase bb_19))"
"(eqv?(module-binding-nominal-sym ab_18)(module-binding-nominal-sym bb_19))"
" #f)"
" #f)))"
"(define-values"
"(identifier-binding-symbol$1)"
"(lambda(id_20 phase_21)"
"(let-values(((b_22)"
"(let-values(((...r/syntax/binding.rkt:81:12_23) resolve+shift32.1)((temp55_26) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f temp55_26 #t id53_24 phase54_25))))"
"(if(symbol? b_22)"
"(let-values() b_22)"
"(if(module-binding? b_22)"
"(let-values()(module-binding-sym b_22))"
"(if(local-binding? b_22)(let-values()(local-binding-key b_22))(let-values()(syntax-e$1 id_20))))))))"
"(define-values"
"(identifier-binding$1)"
"(let-values(((identifier-binding5_27)"
"(lambda(id3_28 phase4_29 top-level-symbol?1_30 top-level-symbol?2_31)"
"(let-values()"
"(let-values()"
"(let-values(((top-level-symbol?_34)(if top-level-symbol?2_31 top-level-symbol?1_30 #f)))"
"(let-values()"
"(let-values(((b_35)"
"(let-values()"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f #f #f id56_36 phase57_37))))"
"(if(module-binding? b_35)"
"(let-values()"
"(if(top-level-module-path-index?(module-binding-module b_35))"
"(if top-level-symbol?_34(list(module-binding-nominal-sym b_35)) #f)"
"(list"
"(module-binding-module b_35)"
"(module-binding-sym b_35)"
"(module-binding-nominal-module b_35)"
"(module-binding-nominal-sym b_35)"
"(module-binding-phase b_35)"
"(module-binding-nominal-require-phase b_35)"
"(module-binding-nominal-phase b_35))))"
"(if(local-binding? b_35)(let-values() 'lexical)(let-values() #f)))))))))))"
"(case-lambda"
"((id_38 phase_39)(identifier-binding5_27 id_38 phase_39 #f #f))"
"((id_40 phase_41 top-level-symbol?1_42)(identifier-binding5_27 id_40 phase_41 top-level-symbol?1_42 #t)))))"
"(define-values"
"(maybe-install-free=id!)"
"(lambda(val_43 id_44 phase_45)"
"(if(1/rename-transformer? val_43)"
"(let-values()"
"(let-values(((free=id_46)(1/rename-transformer-target val_43)))"
"(if(syntax-property$1 free=id_46 'not-free-identifier=?)"
"(void)"
"(let-values()"
"(let-values(((b_47)"
"(let-values(((...r/syntax/binding.rkt:115:16_48) resolve+shift32.1)"
"((temp63_51) #t)"
"((temp64_52) #t))"
"(resolve+shift30.1 #f #f temp63_51 #t #f #f temp64_52 #t #f #f id61_49 phase62_50))))"
"(let-values(((temp58_53)(syntax-scope-set id_44 phase_45))"
"((temp59_54)(syntax-e$1 id_44))"
"((temp60_55)(binding-set-free=id b_47 free=id_46)))"
"(add-binding-in-scopes!16.1 #f #f temp58_53 temp59_54 temp60_55)))))))"
"(void))))"
"(define-values"
"(binding-set-free=id)"
"(lambda(b_56 free=id_57)"
"(if(module-binding? b_56)"
"(let-values()"
"(let-values()"
"(module-binding-update48.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" free=id66_60"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b65_59)))"
"(if(local-binding? b_56)"
"(let-values()(let-values()(local-binding-update17.1 #f #f free=id68_63 #t #f #f b67_62)))"
"        (let-values () (error \"bad binding for free=id:\" b_56))))))"
"(define-values"
"(struct:non-source-shift non-source-shift7.1 non-source-shift? non-source-shift-from non-source-shift-to)"
"(let-values(((struct:_64 make-_65 ?_66 -ref_67 -set!_68)"
"(let-values()"
"(let-values()"
"(make-struct-type 'non-source-shift #f 2 0 #f null 'prefab #f '(0 1) #f 'non-source-shift)))))"
"(values"
" struct:_64"
" make-_65"
" ?_66"
"(make-struct-field-accessor -ref_67 0 'from)"
"(make-struct-field-accessor -ref_67 1 'to))))"
"(define-values(shift-from)(lambda(s_89)(if(pair? s_89)(car s_89)(non-source-shift-from s_89))))"
"(define-values(shift-to)(lambda(s_90)(if(pair? s_90)(cdr s_90)(non-source-shift-to s_90))))"
"(define-values"
"(syntax-module-path-index-shift15.1)"
"(lambda(non-source?8_91 non-source?9_92 s12_93 from-mpi13_94 to-mpi14_95 inspector10_96 inspector11_97)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((inspector_101)(if inspector11_97 inspector10_96 #f)))"
"(let-values(((non-source?_102)(if non-source?9_92 non-source?8_91 #f)))"
"(let-values()"
"(if(eq? from-mpi_99 to-mpi_100)"
"(let-values()(if inspector_101(syntax-set-inspector s_98 inspector_101) s_98))"
"(let-values()"
"(let-values(((shift_103)"
"(if non-source?_102"
"(non-source-shift7.1 from-mpi_99 to-mpi_100)"
"(cons from-mpi_99 to-mpi_100))))"
"(let-values(((shifts70_104) #f))"
"(let-values(((prev-result_105) #f))"
"(let-values(((add-shift_106)"
"(lambda(shifts_107)"
"(if(eq? shifts70_104 shifts_107)"
"(let-values() prev-result_105)"
"(let-values()"
"(let-values(((r_108)(let-values()(cons shift_103 shifts_107))))"
"(begin"
"(set! shifts70_104 shifts_107)"
"(set! prev-result_105 r_108)"
" r_108)))))))"
"(let-values(((f_110)(lambda(tail?_114 d_115) d_115))"
"((d->s_111)"
"(lambda(s_116 d_117)"
"(let-values()"
"(if(syntax?$1 the-struct_118)"
"(let-values(((mpi-shifts72_120)"
"(add-shift_106(syntax-mpi-shifts s_116)))"
"((inspector73_121)"
"(let-values(((or-part_122)(syntax-inspector s_116)))"
"(if or-part_122 or-part_122 inspector_101))))"
"(syntax1.1"
" content71_119"
"(syntax-scopes the-struct_118)"
"(syntax-shifted-multi-scopes the-struct_118)"
"(syntax-scope-propagations the-struct_118)"
" mpi-shifts72_120"
"(syntax-srcloc the-struct_118)"
"(syntax-props the-struct_118)"
" inspector73_121"
"(syntax-tamper the-struct_118)))"
"                                                (raise-argument-error 'struct-copy \"syntax?\" the-struct_118)))))"
"((seen_113) #f))"
"((letrec-values(((loop_123)"
"(lambda(s_124)"
"(let-values(((f_126)"
"(lambda(tail?_128 v_129)"
"(if(syntax?$1 v_129)"
"(let-values()"
"(d->s_111 v_129(loop_123(s-e_112 v_129))))"
"(let-values()(f_110 tail?_128 v_129))))))"
"((letrec-values(((loop_130)"
"(lambda(tail?_131 s_132 prev-depth_133)"
"(let-values(((depth_134)"
"(add1 prev-depth_133)))"
"(if(if seen_127(> depth_134 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_131"
" s_132"
"(lambda(tail?_135 s_136)"
"(f_126 tail?_135 s_136))"
" seen_127))"
"(if(null? s_132)"
"(let-values()(f_126 tail?_131 s_132))"
"(if(pair? s_132)"
"(let-values()"
"(f_126"
" tail?_131"
"(cons"
"(loop_130 #f(car s_132) depth_134)"
"(loop_130"
" #t"
"(cdr s_132)"
" depth_134))))"
"(if(let-values(((or-part_137)"
"(symbol? s_132)))"
"(if or-part_137"
" or-part_137"
"(let-values(((or-part_138)"
"(boolean? s_132)))"
"(if or-part_138"
" or-part_138"
"(number? s_132)))))"
"(let-values()(f_126 #f s_132))"
"(if(let-values(((or-part_139)"
"(vector? s_132)))"
"(if or-part_139"
" or-part_139"
"(let-values(((or-part_140)"
"(box? s_132)))"
"(if or-part_140"
" or-part_140"
"(let-values(((or-part_141)"
"(prefab-struct-key"
" s_132)))"
"(if or-part_141"
" or-part_141"
"(hash? s_132)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_131"
" s_132"
"(lambda(tail?_142 s_143)"
"(f_126 tail?_142 s_143))"
" seen_127))"
"(let-values()"
"(f_126 #f s_132)))))))))))"
" loop_130)"
" #f"
" s_125"
" 0)))))"
" loop_123)"
" s_109))))))))))))))))"
"(define-values"
"(unpack16.1$4)"
"(lambda(given-kws_144 given-args_145 s12_146 from-mpi13_147 to-mpi14_148 inspector10_149 inspector11_150)"
"(let-values(((non-source?9_151)(pair? given-kws_144)))"
"(let-values(((non-source?8_152)(if non-source?9_151(car given-args_145)(void))))"
"(syntax-module-path-index-shift15.1"
" non-source?8_152"
" non-source?9_151"
" s12_146"
" from-mpi13_147"
" to-mpi14_148"
" inspector10_149"
" inspector11_150)))))"
"(define-values"
"(syntax-module-path-index-shift17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_153 given-argc_154)"
"(if(if(>= given-argc_154 5)(<= given-argc_154 6) #f)"
"(let-values()"
"(let-values(((l1_156)(if(null? l1_155) l1_155(if(eq?(car l1_155) '#:non-source?)(cdr l1_155) l1_155))))"
"(null? l1_156)))"
" #f))"
"(case-lambda"
"((given-kws_157 given-args_158 s_159 from-mpi_160 to-mpi_161)"
"(unpack16.1$4 given-kws_157 given-args_158 s_159 from-mpi_160 to-mpi_161 #f #f))"
"((given-kws_162 given-args_163 s_164 from-mpi_165 to-mpi_166 inspector10_167)"
"(unpack16.1$4 given-kws_162 given-args_163 s_164 from-mpi_165 to-mpi_166 inspector10_167 #t)))"
" null"
" '(#:non-source?)"
"(let-values(((syntax-module-path-index-shift_168)"
"(case-lambda"
"((s_169 from-mpi_170 to-mpi_171)(unpack16.1$4 null null s_169 from-mpi_170 to-mpi_171 #f #f))"
"((s_172 from-mpi_173 to-mpi_174 inspector10_175)"
"(unpack16.1$4 null null s_172 from-mpi_173 to-mpi_174 inspector10_175 #t)))))"
" syntax-module-path-index-shift_168)))"
"(define-values"
"(resolve+shift30.1)"
"(lambda(ambiguous-value18_176"
" ambiguous-value23_177"
" exactly?19_178"
" exactly?24_179"
" extra-shifts22_180"
" extra-shifts27_181"
" immediate?20_182"
" immediate?25_183"
" unbound-sym?21_184"
" unbound-sym?26_185"
" s28_186"
" phase29_187)"
"(let-values()"
"(let-values()"
"(let-values(((ambiguous-value_190)(if ambiguous-value23_177 ambiguous-value18_176 #f)))"
"(let-values(((exactly?_191)(if exactly?24_179 exactly?19_178 #f)))"
"(let-values(((immediate?_192)(if immediate?25_183 immediate?20_182 exactly?_191)))"
"(let-values(((unbound-sym?_193)(if unbound-sym?26_185 unbound-sym?21_184 #f)))"
"(let-values(((extra-shifts_194)(if extra-shifts27_181 extra-shifts22_180 null)))"
"(let-values()"
"(let-values(((immediate-b_195)"
"(let-values()"
"(resolve29.1"
" ambiguous-value76_200"
" #t"
" exactly?77_201"
" #t"
" extra-shifts78_202"
" #t"
" #f"
" #f"
" s74_198"
" phase75_199))))"
"(let-values(((b_196)"
"(if(if immediate-b_195"
"(if(not immediate?_192)(binding-free=id immediate-b_195) #f)"
" #f)"
"(let-values(((...r/syntax/binding.rkt:182:16_203) resolve+shift32.1)"
"((temp79_204)(binding-free=id immediate-b_195))"
"((temp81_206)(append extra-shifts_194(syntax-mpi-shifts s_188))))"
"(resolve+shift30.1"
" ambiguous-value82_207"
" #t"
" exactly?83_208"
" #t"
" temp81_206"
" #t"
" #f"
" #f"
" unbound-sym?84_209"
" #t"
" temp79_204"
" phase80_205))"
" immediate-b_195)))"
"(if(module-binding? b_196)"
"(let-values()"
"(let-values(((mpi-shifts_210)(syntax-mpi-shifts s_188)))"
"(if(null? mpi-shifts_210)"
"(let-values() b_196)"
"(let-values()"
"(let-values(((mod_211)(module-binding-module b_196)))"
"(let-values(((shifted-mod_212)(apply-syntax-shifts mod_211 mpi-shifts_210)))"
"(let-values(((nominal-mod_213)(module-binding-nominal-module b_196)))"
"(let-values(((shifted-nominal-mod_214)"
"(if(eq? mod_211 nominal-mod_213)"
" shifted-mod_212"
"(apply-syntax-shifts nominal-mod_213 mpi-shifts_210))))"
"(if(if(eq? mod_211 shifted-mod_212)"
"(if(eq? nominal-mod_213 shifted-nominal-mod_214)"
"(if(not(binding-free=id b_196))"
"(null?(module-binding-extra-nominal-bindings b_196))"
" #f)"
" #f)"
" #f)"
" b_196"
"(let-values(((temp88_219)"
"(if(binding-free=id b_196)"
"(let-values(((temp90_221)(binding-free=id b_196)))"
"(syntax-transfer-shifts39.1"
" #f"
" #f"
" temp90_221"
" s91_222"
" #f"
" #f))"
" #f))"
"((temp89_220)"
"(alt-reverse"
"(let-values(((lst_223)"
"(module-binding-extra-nominal-bindings b_196)))"
"(begin"
"(if(list? lst_223)"
"(void)"
"(let-values()(in-list lst_223)))"
"((letrec-values(((for-loop_224)"
"(lambda(fold-var_225 lst_226)"
"(if(pair? lst_226)"
"(let-values(((b_227)"
"(unsafe-car"
" lst_226)))"
"(let-values(((fold-var_228)"
"(let-values()"
"(let-values(((fold-var_230)"
"(let-values()"
"(cons"
"(let-values()"
"(apply-syntax-shifts-to-binding"
" b_227"
" mpi-shifts_210))"
" fold-var_229))))"
"(values"
" fold-var_230)))))"
"(for-loop_224"
" fold-var_228"
"(unsafe-cdr lst_226))))"
" fold-var_225))))"
" for-loop_224)"
" null"
" lst_223))))))"
"(module-binding-update48.1"
" #f"
" #f"
" temp89_220"
" #t"
" #f"
" #f"
" temp88_219"
" #t"
" shifted-mod86_217"
" #t"
" shifted-nominal-mod87_218"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b85_216)))))))))))"
"(if(if(not b_196) unbound-sym?_193 #f)"
"(let-values()(syntax-e$1 s_188))"
"(let-values() b_196)))))))))))))))"
"(define-values"
"(unpack31.1$1)"
"(lambda(given-kws_231 given-args_232 s28_233 phase29_234)"
"(let-values(((ambiguous-value23_235)(if(pair? given-kws_231)(eq? '#:ambiguous-value(car given-kws_231)) #f)))"
"(let-values(((ambiguous-value18_236)(if ambiguous-value23_235(car given-args_232)(void)))"
"((given-kws_237)(if ambiguous-value23_235(cdr given-kws_231) given-kws_231))"
"((given-args_238)(if ambiguous-value23_235(cdr given-args_232) given-args_232)))"
"(let-values(((exactly?24_239)(if(pair? given-kws_237)(eq? '#:exactly?(car given-kws_237)) #f)))"
"(let-values(((exactly?19_240)(if exactly?24_239(car given-args_238)(void)))"
"((given-kws_241)(if exactly?24_239(cdr given-kws_237) given-kws_237))"
"((given-args_242)(if exactly?24_239(cdr given-args_238) given-args_238)))"
"(let-values(((extra-shifts27_243)(if(pair? given-kws_241)(eq? '#:extra-shifts(car given-kws_241)) #f)))"
"(let-values(((extra-shifts22_244)(if extra-shifts27_243(car given-args_242)(void)))"
"((given-kws_245)(if extra-shifts27_243(cdr given-kws_241) given-kws_241))"
"((given-args_246)(if extra-shifts27_243(cdr given-args_242) given-args_242)))"
"(let-values(((immediate?25_247)(if(pair? given-kws_245)(eq? '#:immediate?(car given-kws_245)) #f)))"
"(let-values(((immediate?20_248)(if immediate?25_247(car given-args_246)(void)))"
"((given-kws_249)(if immediate?25_247(cdr given-kws_245) given-kws_245))"
"((given-args_250)(if immediate?25_247(cdr given-args_246) given-args_246)))"
"(let-values(((unbound-sym?26_251)(pair? given-kws_249)))"
"(let-values(((unbound-sym?21_252)(if unbound-sym?26_251(car given-args_250)(void))))"
"(resolve+shift30.1"
" ambiguous-value18_236"
" ambiguous-value23_235"
" exactly?19_240"
" exactly?24_239"
" extra-shifts22_244"
" extra-shifts27_243"
" immediate?20_248"
" immediate?25_247"
" unbound-sym?21_252"
" unbound-sym?26_251"
" s28_233"
" phase29_234)))))))))))))"
"(define-values"
"(resolve+shift32.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_253 given-argc_254)"
"(if(= given-argc_254 4)"
"(let-values()"
"(let-values(((l1_256)"
"(if(null? l1_255) l1_255(if(eq?(car l1_255) '#:ambiguous-value)(cdr l1_255) l1_255))))"
"(let-values()"
"(let-values(((l1_258)(if(null? l1_257) l1_257(if(eq?(car l1_257) '#:exactly?)(cdr l1_257) l1_257))))"
"(let-values()"
"(let-values(((l1_260)"
"(if(null? l1_259) l1_259(if(eq?(car l1_259) '#:extra-shifts)(cdr l1_259) l1_259))))"
"(let-values()"
"(let-values(((l1_262)"
"(if(null? l1_261)"
" l1_261"
"(if(eq?(car l1_261) '#:immediate?)(cdr l1_261) l1_261))))"
"(let-values()"
"(let-values(((l1_264)"
"(if(null? l1_263)"
" l1_263"
"(if(eq?(car l1_263) '#:unbound-sym?)(cdr l1_263) l1_263))))"
"(null? l1_264)))))))))))"
" #f))"
"(case-lambda"
"((given-kws_265 given-args_266 s_267 phase_268)(unpack31.1$1 given-kws_265 given-args_266 s_267 phase_268)))"
" null"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:immediate? #:unbound-sym?)"
"(let-values(((resolve+shift_269)(case-lambda((s_270 phase_271)(unpack31.1$1 null null s_270 phase_271)))))"
" resolve+shift_269)))"
"(define-values"
"(apply-syntax-shifts)"
"(lambda(mpi_272 shifts_273)"
"(if(null? shifts_273)"
"(let-values() mpi_272)"
"(let-values()"
"(let-values(((shifted-mpi_274)(apply-syntax-shifts mpi_272(cdr shifts_273))))"
"(let-values(((shift_275)(car shifts_273)))"
"(module-path-index-shift shifted-mpi_274(shift-from shift_275)(shift-to shift_275))))))))"
"(define-values"
"(apply-syntax-shifts-to-binding)"
"(lambda(b_276 shifts_277)"
"(if(null? shifts_277)"
"(let-values() b_276)"
"(let-values()"
"(let-values(((shifted-b_278)(apply-syntax-shifts-to-binding b_276(cdr shifts_277))))"
"(let-values(((shift_279)(car shifts_277)))"
"(binding-module-path-index-shift shifted-b_278(shift-from shift_279)(shift-to shift_279))))))))"
"(define-values"
"(binding-module-path-index-shift)"
"(lambda(b_282 from-mpi_283 to-mpi_284)"
"(if(module-binding? b_282)"
"(let-values()"
"(let-values(((temp93_287)(module-path-index-shift(module-binding-module b_282) from-mpi_283 to-mpi_284))"
"((temp94_288)"
"(module-path-index-shift(module-binding-nominal-module b_282) from-mpi_283 to-mpi_284))"
"((temp95_289)"
"(alt-reverse"
"(let-values(((lst_290)(module-binding-extra-nominal-bindings b_282)))"
"(begin"
"(if(list? lst_290)(void)(let-values()(in-list lst_290)))"
"((letrec-values(((for-loop_291)"
"(lambda(fold-var_292 lst_293)"
"(if(pair? lst_293)"
"(let-values(((b_294)(unsafe-car lst_293)))"
"(let-values(((fold-var_295)"
"(let-values()"
"(let-values(((fold-var_297)"
"(let-values()"
"(cons"
"(let-values()"
"(binding-module-path-index-shift"
" b_294"
" from-mpi_283"
" to-mpi_284))"
" fold-var_296))))"
"(values fold-var_297)))))"
"(for-loop_291 fold-var_295(unsafe-cdr lst_293))))"
" fold-var_292))))"
" for-loop_291)"
" null"
" lst_290))))))"
"(module-binding-update48.1"
" #f"
" #f"
" temp95_289"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp93_287"
" #t"
" temp94_288"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b92_286)))"
"(let-values() b_282))))"
"(define-values"
"(syntax-transfer-shifts39.1)"
"(lambda(non-source?33_298 non-source?34_299 to-s37_300 from-s38_301 inspector35_302 inspector36_303)"
"(let-values()"
"(let-values()"
"(let-values(((inspector_306)(if inspector36_303 inspector35_302 #f)))"
"(let-values(((non-source?_307)(if non-source?34_299 non-source?33_298 #f)))"
"(let-values()"
"(let-values(((shifts_308)(syntax-mpi-shifts from-s_305)))"
"(if(if(null? shifts_308) inspector_306 #f)"
"(let-values()(syntax-set-inspector to-s_304 inspector_306))"
"(let-values()"
"(let-values(((lst_309)(alt-reverse shifts_308))((start_310) 0))"
"(begin"
"(if(list? lst_309)(void)(let-values()(in-list lst_309)))"
"(if(exact-nonnegative-integer? start_310)(void)(let-values()(in-naturals start_310)))"
"((letrec-values(((for-loop_311)"
"(lambda(s_312 lst_313 pos_314)"
"(if(if(pair? lst_313) #t #f)"
"(let-values(((shift_315)(unsafe-car lst_313)))"
"(let-values(((s_317)"
"(let-values()"
"(let-values(((s_319)"
"(let-values()"
"(let-values(((temp97_322)"
"(shift-from shift_315))"
"((temp98_323)"
"(shift-to shift_315))"
"((temp99_324)"
"(if(zero? i_316)"
" inspector_306"
" #f)))"
"(syntax-module-path-index-shift15.1"
" non-source?100_325"
" #t"
" s96_321"
" temp97_322"
" temp98_323"
" temp99_324"
" #t)))))"
"(values s_319)))))"
"(for-loop_311 s_317(unsafe-cdr lst_313)(+ pos_314 1))))"
" s_312))))"
" for-loop_311)"
" to-s_304"
" lst_309"
" start_310)))))))))))))"
"(define-values"
"(syntax-set-inspector)"
"(lambda(s_353 insp_354)"
"(let-values(((f_356)(lambda(tail?_360 d_361) d_361))"
"((d->s_357)"
"(lambda(s_362 d_363)"
"(let-values()"
"(if(syntax?$1 the-struct_364)"
"(let-values(((inspector102_366)"
"(let-values(((or-part_367)(syntax-inspector s_362)))"
"(if or-part_367 or-part_367 insp_354))))"
"(syntax1.1"
" content101_365"
"(syntax-scopes the-struct_364)"
"(syntax-shifted-multi-scopes the-struct_364)"
"(syntax-scope-propagations the-struct_364)"
"(syntax-mpi-shifts the-struct_364)"
"(syntax-srcloc the-struct_364)"
"(syntax-props the-struct_364)"
" inspector102_366"
"(syntax-tamper the-struct_364)))"
"                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_364)))))"
"((seen_359) #f))"
"((letrec-values(((loop_368)"
"(lambda(s_369)"
"(let-values(((f_371)"
"(lambda(tail?_373 v_374)"
"(if(syntax?$1 v_374)"
"(let-values()(d->s_357 v_374(loop_368(s-e_358 v_374))))"
"(let-values()(f_356 tail?_373 v_374))))))"
"((letrec-values(((loop_375)"
"(lambda(tail?_376 s_377 prev-depth_378)"
"(let-values(((depth_379)(add1 prev-depth_378)))"
"(if(if seen_372(> depth_379 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_376"
" s_377"
"(lambda(tail?_380 s_381)(f_371 tail?_380 s_381))"
" seen_372))"
"(if(null? s_377)"
"(let-values()(f_371 tail?_376 s_377))"
"(if(pair? s_377)"
"(let-values()"
"(f_371"
" tail?_376"
"(cons"
"(loop_375 #f(car s_377) depth_379)"
"(loop_375 #t(cdr s_377) depth_379))))"
"(if(let-values(((or-part_382)(symbol? s_377)))"
"(if or-part_382"
" or-part_382"
"(let-values(((or-part_383)(boolean? s_377)))"
"(if or-part_383 or-part_383(number? s_377)))))"
"(let-values()(f_371 #f s_377))"
"(if(let-values(((or-part_384)(vector? s_377)))"
"(if or-part_384"
" or-part_384"
"(let-values(((or-part_385)(box? s_377)))"
"(if or-part_385"
" or-part_385"
"(let-values(((or-part_386)"
"(prefab-struct-key s_377)))"
"(if or-part_386 or-part_386(hash? s_377)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_376"
" s_377"
"(lambda(tail?_387 s_388)(f_371 tail?_387 s_388))"
" seen_372))"
"(let-values()(f_371 #f s_377)))))))))))"
" loop_375)"
" #f"
" s_370"
" 0)))))"
" loop_368)"
" s_355))))"
"(define-values"
"(1/syntax-source-module)"
"(let-values(((syntax-source-module45_389)"
"(lambda(s44_390 source?42_391 source?43_392)"
"(let-values()"
"(let-values(((source?_394)(if source?43_392 source?42_391 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_393)"
"(void)"
"                            (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" s_393)))"
"(let-values(((lst_395)(alt-reverse(syntax-mpi-shifts s_393))))"
"(begin"
"(if(list? lst_395)(void)(let-values()(in-list lst_395)))"
"((letrec-values(((for-loop_396)"
"(lambda(result_397 lst_398)"
"(if(pair? lst_398)"
"(let-values(((shift_399)(unsafe-car lst_398)))"
"(let-values(((result_400)"
"(let-values()"
"(if(non-source-shift? shift_399)"
" result_401"
"(let-values()"
"(let-values(((result_403)"
"(let-values()"
"(let-values()"
"(let-values(((from-mpi_404)"
"(car"
" shift_399)))"
"(let-values(((path_405"
" base_406)"
"(1/module-path-index-split"
" from-mpi_404)))"
"(if(not path_405)"
"(if(module-path-index-resolved"
" from-mpi_404)"
"(apply-syntax-shifts"
" from-mpi_404"
"(syntax-mpi-shifts"
" s_393))"
" #f)"
" #f)))))))"
"(values result_403)))))))"
"(if(not((lambda x_407 result_400) shift_399))"
"(for-loop_396 result_400(unsafe-cdr lst_398))"
" result_400)))"
" result_397))))"
" for-loop_396)"
" #f"
" lst_395))))))))))"
"(case-lambda"
"((s_408)(syntax-source-module45_389 s_408 #f #f))"
"((s_409 source?42_410)(syntax-source-module45_389 s_409 source?42_410 #t)))))"
"(define-values"
"(1/identifier-prune-to-source-module)"
"(lambda(id_411)"
"(begin"
"(if(identifier? id_411)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-prune-to-source-module \"identifier?\" id_411)))"
"(let-values(((the-struct_412)(datum->syntax$1 #f(syntax-e$1 id_411) id_411 id_411)))"
"(if(syntax?$1 the-struct_412)"
"(let-values(((mpi-shifts103_413)(syntax-mpi-shifts id_411)))"
"(syntax1.1"
"(syntax-content the-struct_412)"
"(syntax-scopes the-struct_412)"
"(syntax-shifted-multi-scopes the-struct_412)"
"(syntax-scope-propagations the-struct_412)"
" mpi-shifts103_413"
"(syntax-srcloc the-struct_412)"
"(syntax-props the-struct_412)"
"(syntax-inspector the-struct_412)"
"(syntax-tamper the-struct_412)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_412))))))"
"(void)"
"(void)"
"(define-values(built-in-symbols)(make-hasheq))"
"(define-values(register-built-in-symbol!)(lambda(s_1)(hash-set! built-in-symbols s_1 #t)))"
"(define-values(built-in-symbol?)(lambda(s_2)(hash-ref built-in-symbols s_2 #f)))"
"(define-values"
"(make-built-in-symbol!)"
"(lambda(s_3)"
"    (let-values (((built-in-s_4) (string->symbol (format \".~s\" s_3))))"
"(begin(register-built-in-symbol! built-in-s_4) built-in-s_4))))"
"(call-with-values"
"(lambda()"
"(for-each2"
" register-built-in-symbol!"
" '(lambda case-lambda"
" if"
" begin"
" begin0"
" let-values"
" letrec-values"
" set!"
" quote"
" with-continuation-mark"
" #%variable-reference)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(for-each2"
" register-built-in-symbol!"
" '(check-not-undefined"
" instance-variable-box"
" variable-reference"
" variable-reference?"
" variable-reference->instance"
" variable-reference-constant?)))"
" print-values)"
"(void)"
"(void)"
"(define-values(phase-shift-id)(make-built-in-symbol! 'phase))"
"(define-values(dest-phase-id)(make-built-in-symbol! 'dest-phase))"
"(define-values(ns-id)(make-built-in-symbol! 'namespace))"
"(define-values(self-id)(make-built-in-symbol! 'self))"
"(define-values(syntax-literals-id)(make-built-in-symbol! 'syntax-literals))"
"(define-values(get-syntax-literal!-id)(make-built-in-symbol! 'get-syntax-literal!))"
"(define-values(bulk-binding-registry-id)(make-built-in-symbol! 'bulk-binding-registry))"
"(define-values(inspector-id)(make-built-in-symbol! 'inspector))"
"(define-values(deserialize-syntax-id)(make-built-in-symbol! 'deserialize-syntax))"
"(define-values(deserialized-syntax-vector-id)(make-built-in-symbol! 'deserialized-syntax-vector))"
"(define-values(set-transformer!-id)(make-built-in-symbol! 'set-transformer!))"
"(define-values(top-level-bind!-id)(make-built-in-symbol! 'top-level-bind!))"
"(define-values(top-level-require!-id)(make-built-in-symbol! 'top-level-require!))"
"(void)"
"(void)"
"(define-values"
"(struct:provided provided1.1 provided? provided-binding provided-protected? provided-syntax?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'provided"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(p_34 ser-push!_35 state_36)"
"(begin"
"(ser-push!_35 'tag '#:provided)"
"(ser-push!_35(provided-binding p_34))"
"(ser-push!_35(provided-protected? p_34))"
"(ser-push!_35(provided-syntax? p_34))))))"
" #f"
" #f"
" '(0 1 2)"
" #f"
" 'provided)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'binding)"
"(make-struct-field-accessor -ref_4 1 'protected?)"
"(make-struct-field-accessor -ref_4 2 'syntax?))))"
"(define-values(provided-as-binding)(lambda(v_37)(if(provided? v_37)(provided-binding v_37) v_37)))"
"(define-values(provided-as-protected?)(lambda(v_38)(if(provided? v_38)(provided-protected? v_38) #f)))"
"(define-values(provided-as-transformer?)(lambda(v_39)(if(provided? v_39)(provided-syntax? v_39) #f)))"
"(define-values"
"(deserialize-provided)"
"(lambda(binding_40 protected?_41 syntax?_42)(provided1.1 binding_40 protected?_41 syntax?_42)))"
"(void)"
"(void)"
"(define-values"
"(provide-binding-to-require-binding11.1)"
"(lambda(mpi2_12 phase-shift4_13 provide-phase-level3_14 self1_15 binding/p9_16 sym10_17)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((binding_24)(provided-as-binding binding/p_18)))"
"(let-values(((from-mod_25)(module-binding-module binding_24)))"
"(let-values(((temp18_28)(module-path-index-shift from-mod_25 self_20 mpi_21))"
"((temp23_33) #f)"
"((temp24_34)"
"(if(not(provided-as-protected? binding/p_18))"
"(module-binding-extra-inspector binding_24)"
" #f))"
"((null25_35) null))"
"(module-binding-update48.1"
" temp24_34"
" #t"
" null25_35"
" #t"
" temp23_33"
" #t"
" #f"
" #f"
" temp18_28"
" #t"
" mpi19_29"
" #t"
" provide-phase-level20_30"
" #t"
" phase-shift22_32"
" #t"
" sym21_31"
" #t"
" #f"
" #f"
" #f"
" #f"
" binding17_27)))))))))))))"
"(define-values"
"(struct:bulk-binding"
" bulk-binding14.1"
" bulk-binding?"
" bulk-binding-provides"
" bulk-binding-prefix"
" bulk-binding-excepts"
" bulk-binding-self"
" bulk-binding-mpi"
" bulk-binding-provide-phase-level"
" bulk-binding-phase-shift"
" bulk-binding-bulk-binding-registry"
" set-bulk-binding-provides!"
" set-bulk-binding-self!)"
"(let-values(((struct:_60 make-_61 ?_62 -ref_63 -set!_64)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding"
" #f"
" 8"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_152 ser-push!_153 reachable-scopes_154)"
"(begin"
"(ser-push!_153 'tag '#:bulk-binding)"
"(ser-push!_153(bulk-binding-prefix b_152))"
"(ser-push!_153(bulk-binding-excepts b_152))"
"(ser-push!_153(bulk-binding-mpi b_152))"
"(ser-push!_153(bulk-binding-provide-phase-level b_152))"
"(ser-push!_153(bulk-binding-phase-shift b_152))"
"(ser-push!_153 'tag '#:bulk-binding-registry))))"
"(cons"
" prop:bulk-binding"
"(bulk-binding-class3.1"
"(lambda(b_155 mpi-shifts_156)"
"(let-values(((or-part_157)(bulk-binding-provides b_155)))"
"(if or-part_157"
" or-part_157"
"(let-values(((mod-name_158)"
"(1/module-path-index-resolve"
"(apply-syntax-shifts(bulk-binding-mpi b_155) mpi-shifts_156))))"
"(let-values((()"
"(begin"
"(if(bulk-binding-bulk-binding-registry b_155)"
"(void)"
"(let-values()"
"(error"
"                                                     \"namespace mismatch: no bulk-binding registry available:\""
" mod-name_158)))"
"(values))))"
"(let-values(((table_159)"
"(bulk-binding-registry-table"
"(bulk-binding-bulk-binding-registry b_155))))"
"(let-values(((bulk-provide_160)(hash-ref table_159 mod-name_158 #f)))"
"(let-values((()"
"(begin"
"(if bulk-provide_160"
"(void)"
"(let-values()"
"(error"
"                                                           \"namespace mismatch: bulk bindings not found in registry for module:\""
" mod-name_158)))"
"(values))))"
"(let-values((()"
"(begin"
"(set-bulk-binding-self!"
" b_155"
"(bulk-provide-self bulk-provide_160))"
"(values))))"
"(let-values(((provides_161)"
"(hash-ref"
"(bulk-provide-provides bulk-provide_160)"
"(bulk-binding-provide-phase-level b_155))))"
"(let-values(((excepts_162)(bulk-binding-excepts b_155)))"
"(let-values(((prefix_163)(bulk-binding-prefix b_155)))"
"(let-values(((adjusted-provides_164)"
"(if(let-values()"
"(if or-part_165"
" or-part_165"
"(positive?(hash-count excepts_162))))"
"(let-values()"
"(let-values()"
"(begin"
"(if((lambda(ht_167)(hash? ht_167)) ht_166)"
"(void)"
"(let-values()(default-in-hash ht_166)))"
"((letrec-values(((for-loop_168)"
"(lambda(table_169 i_170)"
"(if i_170"
"(let-values(((sym_171"
" val_172)"
"(hash-iterate-key+value"
" ht_166"
" i_170)))"
"(let-values(((table_173)"
"(let-values()"
"(if(hash-ref"
" excepts_162"
" sym_171"
" #f)"
" table_174"
"(let-values()"
"(let-values(((table_176)"
"(let-values()"
"(let-values(((key_177"
" val_178)"
"(let-values()"
"(values"
"(if prefix_163"
"(string->symbol"
"(format"
"                                                                                                                                                       \"~a~a\""
" prefix_163"
" sym_171))"
" sym_171)"
" val_172))))"
"(hash-set"
" table_175"
" key_177"
" val_178)))))"
"(values"
" table_176)))))))"
"(for-loop_168"
" table_173"
"(hash-iterate-next"
" ht_166"
" i_170))))"
" table_169))))"
" for-loop_168)"
" '#hash()"
"(hash-iterate-first ht_166)))))"
"(let-values() provides_161))))"
"(begin"
"(set-bulk-binding-provides! b_155 adjusted-provides_164)"
" adjusted-provides_164))))))))))))))"
"(lambda(b_179 binding_180 sym_181)"
"(let-values(((temp28_184)"
"(if(bulk-binding-prefix b_179)"
"(string->symbol"
"(substring"
"(symbol->string sym_181)"
"(string-length(symbol->string(bulk-binding-prefix b_179)))))"
" sym_181))"
"((temp29_185)(bulk-binding-self b_179))"
"((temp30_186)(bulk-binding-mpi b_179))"
"((temp31_187)(bulk-binding-provide-phase-level b_179))"
"((temp32_188)(bulk-binding-phase-shift b_179)))"
"(provide-binding-to-require-binding11.1"
" temp30_186"
" temp32_188"
" temp31_187"
" temp29_185"
" binding27_183"
" temp28_184))))))"
"(current-inspector)"
" #f"
" '(1 2 4 5 6 7)"
" #f"
" 'bulk-binding)))))"
"(values"
" struct:_60"
" make-_61"
" ?_62"
"(make-struct-field-accessor -ref_63 0 'provides)"
"(make-struct-field-accessor -ref_63 1 'prefix)"
"(make-struct-field-accessor -ref_63 2 'excepts)"
"(make-struct-field-accessor -ref_63 3 'self)"
"(make-struct-field-accessor -ref_63 4 'mpi)"
"(make-struct-field-accessor -ref_63 5 'provide-phase-level)"
"(make-struct-field-accessor -ref_63 6 'phase-shift)"
"(make-struct-field-accessor -ref_63 7 'bulk-binding-registry)"
"(make-struct-field-mutator -set!_64 0 'provides)"
"(make-struct-field-mutator -set!_64 3 'self))))"
"(define-values"
"(deserialize-bulk-binding)"
"(lambda(prefix_189 excepts_190 mpi_191 provide-phase-level_192 phase-shift_193 bulk-binding-registry_194)"
"(bulk-binding14.1"
" #f"
" prefix_189"
" excepts_190"
" #f"
" mpi_191"
" provide-phase-level_192"
" phase-shift_193"
" bulk-binding-registry_194)))"
"(define-values"
"(struct:bulk-provide bulk-provide15.1 bulk-provide? bulk-provide-self bulk-provide-provides)"
"(let-values(((struct:_195 make-_196 ?_197 -ref_198 -set!_199)"
"(let-values()"
"(let-values()"
"(make-struct-type 'bulk-provide #f 2 0 #f null(current-inspector) #f '(0 1) #f 'bulk-provide)))))"
"(values"
" struct:_195"
" make-_196"
" ?_197"
"(make-struct-field-accessor -ref_198 0 'self)"
"(make-struct-field-accessor -ref_198 1 'provides))))"
"(define-values"
"(struct:bulk-binding-registry bulk-binding-registry16.1 bulk-binding-registry? bulk-binding-registry-table)"
"(let-values(((struct:_220 make-_221 ?_222 -ref_223 -set!_224)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-registry"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'bulk-binding-registry)))))"
"(values struct:_220 make-_221 ?_222(make-struct-field-accessor -ref_223 0 'table))))"
"(define-values(make-bulk-binding-registry)(lambda()(bulk-binding-registry16.1(make-hasheq))))"
"(define-values"
"(register-bulk-provide!)"
"(lambda(bulk-binding-registry_240 mod-name_241 self_242 provides_243)"
"(hash-set!"
"(bulk-binding-registry-table bulk-binding-registry_240)"
" mod-name_241"
"(bulk-provide15.1 self_242 provides_243))))"
"(void)"
"(void)"
"(define-values(generate-lift-key)(lambda()(gensym 'lift)))"
"(void)"
"(void)"
"(define-values"
"(struct:root-expand-context"
" root-expand-context1.1"
" root-expand-context?"
" root-expand-context-module-scopes"
" root-expand-context-post-expansion-scope"
" root-expand-context-top-level-bind-scope"
" root-expand-context-all-scopes-stx"
" root-expand-context-use-site-scopes"
" root-expand-context-defined-syms"
" root-expand-context-frame-id"
" root-expand-context-counter"
" root-expand-context-lift-key)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'root-expand-context"
" #f"
" 9"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8)"
" #f"
" 'root-expand-context)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'module-scopes)"
"(make-struct-field-accessor -ref_4 1 'post-expansion-scope)"
"(make-struct-field-accessor -ref_4 2 'top-level-bind-scope)"
"(make-struct-field-accessor -ref_4 3 'all-scopes-stx)"
"(make-struct-field-accessor -ref_4 4 'use-site-scopes)"
"(make-struct-field-accessor -ref_4 5 'defined-syms)"
"(make-struct-field-accessor -ref_4 6 'frame-id)"
"(make-struct-field-accessor -ref_4 7 'counter)"
"(make-struct-field-accessor -ref_4 8 'lift-key))))"
"(define-values"
"(make-root-expand-context10.1)"
"(lambda(all-scopes-stx5_61"
" all-scopes-stx9_62"
" initial-scopes2_63"
" initial-scopes6_64"
" outside-scope3_65"
" outside-scope7_66"
" post-expansion-scope4_67"
" post-expansion-scope8_68)"
"(let-values(((initial-scopes_69)(if initial-scopes6_64 initial-scopes2_63 null)))"
"(let-values(((outside-scope_70)(if outside-scope7_66 outside-scope3_65 top-level-common-scope)))"
"(let-values(((post-expansion-scope_71)"
"(if post-expansion-scope8_68 post-expansion-scope4_67(new-multi-scope 'top-level))))"
"(let-values(((all-scopes-stx_72)(if all-scopes-stx9_62 all-scopes-stx5_61 #f)))"
"(let-values()"
"(let-values(((module-scopes_73)(list* post-expansion-scope_71 outside-scope_70 initial-scopes_69)))"
"(root-expand-context1.1"
" module-scopes_73"
" post-expansion-scope_71"
"(new-scope 'module)"
"(let-values()(if or-part_74 or-part_74(add-scopes empty-syntax module-scopes_73)))"
"(box null)"
"(make-hasheqv)"
"                 (string->uninterned-symbol \"root-frame\")"
"(box 0)"
"(generate-lift-key))))))))))"
"(define-values"
"(root-expand-context-encode-for-module)"
"(lambda(ctx_104 orig-self_105 new-self_106)"
"(datum->syntax$1"
" #f"
"(vector"
"(add-scopes empty-syntax(root-expand-context-module-scopes ctx_104))"
"(add-scope empty-syntax(root-expand-context-post-expansion-scope ctx_104))"
"(let-values(((temp14_107)(root-expand-context-all-scopes-stx ctx_104)))"
"(syntax-module-path-index-shift15.1 #f #f temp14_107 orig-self15_108 new-self16_109 #f #f))"
"(add-scopes empty-syntax(unbox(root-expand-context-use-site-scopes ctx_104)))"
"(let-values(((ht_110)(root-expand-context-defined-syms ctx_104)))"
"(begin"
"(if((lambda(ht_111)(hash? ht_111)) ht_110)(void)(let-values()(default-in-hash ht_110)))"
"((letrec-values(((for-loop_112)"
"(lambda(table_113 i_114)"
"(if i_114"
"(let-values(((phase_115 ht_116)(hash-iterate-key+value ht_110 i_114)))"
"(let-values(((table_117)"
"(let-values()"
"(let-values(((table_119)"
"(let-values()"
"(let-values(((key_120 val_121)"
"(let-values()"
"(values phase_115 ht_116))))"
"(hash-set table_118 key_120 val_121)))))"
"(values table_119)))))"
"(for-loop_112 table_117(hash-iterate-next ht_110 i_114))))"
" table_113))))"
" for-loop_112)"
" '#hasheqv()"
"(hash-iterate-first ht_110))))"
"(root-expand-context-frame-id ctx_104)"
"(unbox(root-expand-context-counter ctx_104))))))"
"(define-values"
"(root-expand-context-decode-for-module)"
"(lambda(vec-s_122)"
"(let-values(((vec_123)(if(syntax?$1 vec-s_122)(syntax-e$1 vec-s_122) #f)))"
"(begin"
"(if(if(vector? vec_123)"
"(if(=(vector-length vec_123) 7)"
"(if(syntax?$1(vector-ref vec_123 0))"
"(if(syntax-with-one-scope?(vector-ref vec_123 1))"
"(if(syntax?$1(vector-ref vec_123 2))"
"(if(syntax?$1(vector-ref vec_123 3))"
"(if(defined-syms-hash?(syntax-e$1(vector-ref vec_123 4)))"
"(if(symbol?(syntax-e$1(vector-ref vec_123 5)))"
"(exact-nonnegative-integer?(syntax-e$1(vector-ref vec_123 6)))"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"          (let-values () (error 'root-expand-context-decode-for-module \"bad encoding: ~s\" vec-s_122)))"
"(root-expand-context1.1"
"(extract-scope-list(vector-ref vec_123 0))"
"(extract-scope(vector-ref vec_123 1))"
"(new-scope 'module)"
"(vector-ref vec_123 2)"
"(box(extract-scope-list(vector-ref vec_123 3)))"
"(unpack-defined-syms(vector-ref vec_123 4))"
"(syntax-e$1(vector-ref vec_123 5))"
"(box(syntax-e$1(vector-ref vec_123 6)))"
"(generate-lift-key))))))"
"(define-values"
"(defined-syms-hash?)"
"(lambda(v_124)"
"(let-values()"
"(begin"
"(if((lambda(ht_126)(hash? ht_126)) ht_125)(void)(let-values()(default-in-hash ht_125)))"
"((letrec-values(((for-loop_127)"
"(lambda(result_128 i_129)"
"(if i_129"
"(let-values(((phase_130 ht-s_131)(hash-iterate-key+value ht_125 i_129)))"
"(let-values(((result_132)"
"(let-values()"
"(let-values(((result_134)"
"(let-values()"
"(let-values()"
"(if(phase? phase_130)"
"(if(hash?(syntax-e$1 ht-s_131))"
"(let-values(((ht_135)(syntax-e$1 ht-s_131)))"
"(begin"
"(if((lambda(ht_136)(hash? ht_136)) ht_135)"
"(void)"
"(let-values()(default-in-hash ht_135)))"
"((letrec-values(((for-loop_137)"
"(lambda(result_138 i_139)"
"(if i_139"
"(let-values(((sym_140"
" id_141)"
"(hash-iterate-key+value"
" ht_135"
" i_139)))"
"(let-values(((result_142)"
"(let-values()"
"(let-values(((result_144)"
"(let-values()"
"(let-values()"
"(if(symbol?"
" sym_140)"
"(identifier?"
" id_141)"
" #f)))))"
"(values"
" result_144)))))"
"(if(not"
"((lambda x_145"
"(not"
" result_142))"
" sym_140"
" id_141))"
"(for-loop_137"
" result_142"
"(hash-iterate-next"
" ht_135"
" i_139))"
" result_142)))"
" result_138))))"
" for-loop_137)"
" #t"
"(hash-iterate-first ht_135))))"
" #f)"
" #f)))))"
"(values result_134)))))"
"(if(not((lambda x_146(not result_132)) phase_130 ht-s_131))"
"(for-loop_127 result_132(hash-iterate-next ht_125 i_129))"
" result_132)))"
" result_128))))"
" for-loop_127)"
" #t"
"(hash-iterate-first ht_125))))))"
"(define-values"
"(extract-scope-list)"
"(lambda(stx_147)(map2 generalize-scope(set->list(syntax-scope-set stx_147 0)))))"
"(define-values"
"(syntax-with-one-scope?)"
"(lambda(stx_148)(if(syntax?$1 stx_148)(= 1(set-count(syntax-scope-set stx_148 0))) #f)))"
"(define-values"
"(extract-scope)"
"(lambda(stx_149)(let-values(((s_150)(syntax-scope-set stx_149 0)))(generalize-scope(set-first s_150)))))"
"(define-values"
"(unpack-defined-syms)"
"(lambda(v_151)"
"(hash-copy"
"(let-values(((ht_152)(syntax-e$1 v_151)))"
"(begin"
"(if((lambda(ht_153)(hash? ht_153)) ht_152)(void)(let-values()(default-in-hash ht_152)))"
"((letrec-values(((for-loop_154)"
"(lambda(table_155 i_156)"
"(if i_156"
"(let-values(((phase_157 ht-s_158)(hash-iterate-key+value ht_152 i_156)))"
"(let-values(((table_159)"
"(let-values()"
"(let-values(((table_161)"
"(let-values()"
"(let-values(((key_162 val_163)"
"(let-values()"
"(values"
" phase_157"
"(hash-copy"
"(let-values(((ht_164)"
"(syntax-e$1 ht-s_158)))"
"(begin"
"(if((lambda(ht_165)"
"(hash? ht_165))"
" ht_164)"
"(void)"
"(let-values()"
"(default-in-hash ht_164)))"
"((letrec-values(((for-loop_166)"
"(lambda(table_167"
" i_168)"
"(if i_168"
"(let-values(((sym_169"
" id_170)"
"(hash-iterate-key+value"
" ht_164"
" i_168)))"
"(let-values(((table_171)"
"(let-values()"
"(let-values(((table_173)"
"(let-values()"
"(let-values(((key_174"
" val_175)"
"(let-values()"
"(values"
" sym_169"
" id_170))))"
"(hash-set"
" table_172"
" key_174"
" val_175)))))"
"(values"
" table_173)))))"
"(for-loop_166"
" table_171"
"(hash-iterate-next"
" ht_164"
" i_168))))"
" table_167))))"
" for-loop_166)"
" '#hash()"
"(hash-iterate-first"
" ht_164)))))))))"
"(hash-set table_160 key_162 val_163)))))"
"(values table_161)))))"
"(for-loop_154 table_159(hash-iterate-next ht_152 i_156))))"
" table_155))))"
" for-loop_154)"
" '#hasheqv()"
"(hash-iterate-first ht_152)))))))"
"(void)"
"(void)"
"(define-values"
"(linklet-primitive-table)"
"(let-values(((or-part_14)(primitive-table '#%bootstrap-linklet)))"
"(if or-part_14 or-part_14(primitive-table '#%linklet))))"
"(define-values(1/primitive-table)(hash-ref linklet-primitive-table 'primitive-table #f))"
"(define-values(1/primitive->compiled-position)(hash-ref linklet-primitive-table 'primitive->compiled-position #f))"
"(define-values(1/compiled-position->primitive)(hash-ref linklet-primitive-table 'compiled-position->primitive #f))"
"(define-values(1/linklet?)(hash-ref linklet-primitive-table 'linklet? #f))"
"(define-values(1/compile-linklet)(hash-ref linklet-primitive-table 'compile-linklet #f))"
"(define-values(1/recompile-linklet)(hash-ref linklet-primitive-table 'recompile-linklet #f))"
"(define-values(1/eval-linklet)(hash-ref linklet-primitive-table 'eval-linklet #f))"
"(define-values(1/instantiate-linklet)(hash-ref linklet-primitive-table 'instantiate-linklet #f))"
"(define-values(1/linklet-import-variables)(hash-ref linklet-primitive-table 'linklet-import-variables #f))"
"(define-values(1/linklet-export-variables)(hash-ref linklet-primitive-table 'linklet-export-variables #f))"
"(define-values(1/instance?)(hash-ref linklet-primitive-table 'instance? #f))"
"(define-values(1/make-instance)(hash-ref linklet-primitive-table 'make-instance #f))"
"(define-values(1/instance-name)(hash-ref linklet-primitive-table 'instance-name #f))"
"(define-values(1/instance-data)(hash-ref linklet-primitive-table 'instance-data #f))"
"(define-values(1/instance-variable-names)(hash-ref linklet-primitive-table 'instance-variable-names #f))"
"(define-values(1/instance-variable-value)(hash-ref linklet-primitive-table 'instance-variable-value #f))"
"(define-values(1/instance-set-variable-value!)(hash-ref linklet-primitive-table 'instance-set-variable-value! #f))"
"(define-values(1/instance-unset-variable!)(hash-ref linklet-primitive-table 'instance-unset-variable! #f))"
"(define-values(1/linklet-directory?)(hash-ref linklet-primitive-table 'linklet-directory? #f))"
"(define-values(1/hash->linklet-directory)(hash-ref linklet-primitive-table 'hash->linklet-directory #f))"
"(define-values(1/linklet-directory->hash)(hash-ref linklet-primitive-table 'linklet-directory->hash #f))"
"(define-values(1/linklet-bundle?)(hash-ref linklet-primitive-table 'linklet-bundle? #f))"
"(define-values(1/hash->linklet-bundle)(hash-ref linklet-primitive-table 'hash->linklet-bundle #f))"
"(define-values(1/linklet-bundle->hash)(hash-ref linklet-primitive-table 'linklet-bundle->hash #f))"
"(define-values(1/variable-reference?)(hash-ref linklet-primitive-table 'variable-reference? #f))"
"(define-values(1/variable-reference->instance)(hash-ref linklet-primitive-table 'variable-reference->instance #f))"
"(define-values(1/variable-reference-constant?)(hash-ref linklet-primitive-table 'variable-reference-constant? #f))"
"(call-with-values"
"(lambda()"
"(if 1/variable-reference-constant?"
"(void)"
"      (let-values () (error \"broken '#%linklet primitive table; maybe you need to use \\\"bootstrap-run.rkt\\\"\"))))"
" print-values)"
"(void)"
"(void)"
"(define-values"
"(struct:module-registry module-registry1.1 module-registry? module-registry-declarations module-registry-lock-box)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-registry"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-registry)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'declarations)"
"(make-struct-field-accessor -ref_4 1 'lock-box))))"
"(define-values(make-module-registry)(lambda()(module-registry1.1(make-hasheq)(box #f))))"
"(define-values"
"(registry-call-with-lock)"
"(lambda(r_26 proc_27)"
"(let-values(((lock-box_28)(module-registry-lock-box r_26)))"
"((letrec-values(((loop_29)"
"(lambda()"
"(let-values(((v_30)(unbox lock-box_28)))"
"(if(let-values(((or-part_31)(not v_30)))"
"(if or-part_31 or-part_31(sync/timeout 0(car v_30)(cdr v_30))))"
"(let-values()"
"(let-values(((sema_32)(make-semaphore)))"
"(let-values(((lock_33)(cons(semaphore-peek-evt sema_32)(current-thread))))"
"((dynamic-wind"
" void"
"(lambda()"
"(if(box-cas! lock-box_28 v_30 lock_33)"
"(let-values()(begin(proc_27) void))"
"(let-values() loop_29)))"
"(lambda()(semaphore-post sema_32)))))))"
"(if(eq?(current-thread)(cdr v_30))"
"(let-values()(proc_27))"
"(let-values()(begin(sync(car v_30)(cdr v_30))(loop_29)))))))))"
" loop_29)))))"
"(void)"
"(void)"
"(define-values"
"(struct:namespace"
" namespace1.1"
" 1/namespace?"
" namespace-mpi"
" namespace-source-name"
" namespace-root-expand-ctx"
" namespace-phase"
" namespace-0-phase"
" namespace-phase-to-namespace"
" namespace-phase-level-to-definitions"
" 1/namespace-module-registry"
" namespace-bulk-binding-registry"
" namespace-submodule-declarations"
" namespace-root-namespace"
" namespace-declaration-inspector"
" namespace-inspector"
" namespace-available-module-instances"
" namespace-module-instances"
" set-namespace-inspector!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'namespace"
" #f"
" 15"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(ns_97 port_98 mode_99)"
"                         (let-values ((() (begin (write-string \"#<namespace\" port_98) (values))))"
"(let-values(((n_100)(namespace-source-name ns_97)))"
"(let-values((()"
"(begin"
"(if n_100"
"                                               (let-values () (fprintf port_98 \":~a\" (namespace->name ns_97)))"
"(void))"
"(values))))"
"(let-values(((0-phase_101)(namespace-0-phase ns_97)))"
"(let-values(((phase-level_102)(phase-(namespace-phase ns_97) 0-phase_101)))"
"(begin"
"(if(zero-phase? phase-level_102)"
"(void)"
"                                       (let-values () (fprintf port_98 \":~s\" phase-level_102)))"
"(if(zero-phase? 0-phase_101)"
"(void)"
"(let-values()"
"                                         (fprintf port_98 \"~a~s\" (if (positive? 0-phase_101) \"+\" \"\") 0-phase_101)))"
"                                     (write-string \">\" port_98))))))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 13 14)"
" #f"
" 'namespace)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'mpi)"
"(make-struct-field-accessor -ref_4 1 'source-name)"
"(make-struct-field-accessor -ref_4 2 'root-expand-ctx)"
"(make-struct-field-accessor -ref_4 3 'phase)"
"(make-struct-field-accessor -ref_4 4 '0-phase)"
"(make-struct-field-accessor -ref_4 5 'phase-to-namespace)"
"(make-struct-field-accessor -ref_4 6 'phase-level-to-definitions)"
"(make-struct-field-accessor -ref_4 7 'module-registry)"
"(make-struct-field-accessor -ref_4 8 'bulk-binding-registry)"
"(make-struct-field-accessor -ref_4 9 'submodule-declarations)"
"(make-struct-field-accessor -ref_4 10 'root-namespace)"
"(make-struct-field-accessor -ref_4 11 'declaration-inspector)"
"(make-struct-field-accessor -ref_4 12 'inspector)"
"(make-struct-field-accessor -ref_4 13 'available-module-instances)"
"(make-struct-field-accessor -ref_4 14 'module-instances)"
"(make-struct-field-mutator -set!_5 12 'inspector))))"
"(define-values"
"(struct:definitions definitions2.1 definitions? definitions-variables definitions-transformers)"
"(let-values(((struct:_103 make-_104 ?_105 -ref_106 -set!_107)"
"(let-values()"
"(let-values()"
"(make-struct-type 'definitions #f 2 0 #f null(current-inspector) #f '(0 1) #f 'definitions)))))"
"(values"
" struct:_103"
" make-_104"
" ?_105"
"(make-struct-field-accessor -ref_106 0 'variables)"
"(make-struct-field-accessor -ref_106 1 'transformers))))"
"(define-values(make-namespace)(lambda()(let-values()(new-namespace9.1 #f #f #f #f #f #f))))"
"(define-values"
"(new-namespace9.1)"
"(lambda(register?4_128"
" register?6_129"
" root-expand-ctx3_130"
" root-expand-ctx5_131"
" share-from-ns7_132"
" share-from-ns8_133)"
"(let-values(((share-from-ns_134)(if share-from-ns8_133 share-from-ns7_132 #f)))"
"(let-values(((root-expand-ctx_135)"
"(if root-expand-ctx5_131"
" root-expand-ctx3_130"
"(let-values()(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)))))"
"(let-values(((register?_136)(if register?6_129 register?4_128 #t)))"
"(let-values()"
"(let-values(((phase_137)(if share-from-ns_134(namespace-phase share-from-ns_134) 0)))"
"(let-values(((ns_138)"
"(namespace1.1"
" top-level-module-path-index"
" #f"
"(box root-expand-ctx_135)"
" phase_137"
" phase_137"
"(make-hasheqv)"
"(make-hasheqv)"
"(if share-from-ns_134"
"(1/namespace-module-registry share-from-ns_134)"
"(make-module-registry))"
"(if share-from-ns_134"
"(namespace-bulk-binding-registry share-from-ns_134)"
"(make-bulk-binding-registry))"
"(make-hasheq)"
"(if share-from-ns_134"
"(let-values(((or-part_139)(namespace-root-namespace share-from-ns_134)))"
"(if or-part_139 or-part_139 share-from-ns_134))"
" #f)"
" #f"
"(make-inspector(current-code-inspector))"
"(if share-from-ns_134"
"(namespace-available-module-instances share-from-ns_134)"
"(make-hasheqv))"
"(if share-from-ns_134(namespace-module-instances share-from-ns_134)(make-hasheqv)))))"
"(begin"
"(if register?_136"
"(let-values()(hash-set!(namespace-phase-to-namespace ns_138) phase_137 ns_138))"
"(void))"
" ns_138)))))))))"
"(define-values"
"(1/current-namespace)"
"(make-parameter"
"(make-namespace)"
"(lambda(v_163)"
"(begin"
"       (if (1/namespace? v_163) (void) (let-values () (raise-argument-error 'current-namespace \"namespace?\" v_163)))"
" v_163))))"
"(define-values(namespace-get-root-expand-ctx)(lambda(ns_164)(force(unbox(namespace-root-expand-ctx ns_164)))))"
"(define-values"
"(namespace-set-root-expand-ctx!)"
"(lambda(ns_165 root-ctx_166)(set-box!(namespace-root-expand-ctx ns_165) root-ctx_166)))"
"(define-values"
"(namespace->module)"
"(lambda(ns_167 name_168)"
"(let-values(((or-part_169)(hash-ref(namespace-submodule-declarations ns_167) name_168 #f)))"
"(if or-part_169"
" or-part_169"
"(hash-ref(module-registry-declarations(1/namespace-module-registry ns_167)) name_168 #f)))))"
"(define-values"
"(namespace->namespace-at-phase)"
"(lambda(ns_170 phase_171)"
"(let-values(((or-part_172)(hash-ref(namespace-phase-to-namespace ns_170) phase_171 #f)))"
"(if or-part_172"
" or-part_172"
"(let-values(((p-ns_173)"
"(let-values()"
"(if(1/namespace? the-struct_174)"
"(let-values()"
"(namespace1.1"
"(namespace-mpi the-struct_174)"
"(namespace-source-name the-struct_174)"
"(namespace-root-expand-ctx the-struct_174)"
" phase22_175"
"(namespace-0-phase the-struct_174)"
"(namespace-phase-to-namespace the-struct_174)"
"(namespace-phase-level-to-definitions the-struct_174)"
"(1/namespace-module-registry the-struct_174)"
"(namespace-bulk-binding-registry the-struct_174)"
"(namespace-submodule-declarations the-struct_174)"
"(namespace-root-namespace the-struct_174)"
"(namespace-declaration-inspector the-struct_174)"
"(namespace-inspector the-struct_174)"
"(namespace-available-module-instances the-struct_174)"
"(namespace-module-instances the-struct_174)))"
"                          (raise-argument-error 'struct-copy \"namespace?\" the-struct_174)))))"
"(begin(hash-set!(namespace-phase-to-namespace ns_170) phase_171 p-ns_173) p-ns_173))))))"
"(define-values"
"(namespace->name)"
"(lambda(ns_176)"
"(let-values(((n_177)(namespace-source-name ns_176)))"
"(let-values(((s_178)"
"(if(not n_177)"
"(let-values() 'top-level)"
"(if(symbol? n_177)"
"                        (let-values () (format \"'~s\" n_177))"
"                        (let-values () (string-append \"\\\"\" (path->string n_177) \"\\\"\"))))))"
"(let-values(((r_179)(1/resolved-module-path-name(1/module-path-index-resolve(namespace-mpi ns_176)))))"
"          (if (pair? r_179) (string-append \"(submod \" s_178 \" \" (substring (format \"~s\" (cdr r_179)) 1)) s_178))))))"
"(define-values"
"(namespace->definitions)"
"(lambda(ns_180 phase-level_181)"
"(let-values(((d_182)(hash-ref(namespace-phase-level-to-definitions ns_180) phase-level_181 #f)))"
"(let-values()"
"(if or-part_183"
" or-part_183"
"(let-values()"
"(let-values(((p-ns_184)"
"(namespace->namespace-at-phase ns_180(phase+(namespace-0-phase ns_180) phase-level_181))))"
"(let-values(((d_185)"
"(definitions2.1(1/make-instance(namespace->name p-ns_184) p-ns_184)(make-hasheq))))"
"(begin(hash-set!(namespace-phase-level-to-definitions ns_180) phase-level_181 d_185) d_185)))))))))"
"(define-values"
"(namespace-set-variable!)"
"(let-values(((namespace-set-variable!18_186)"
"(lambda(ns14_187 phase-level15_188 name16_189 val17_190 as-constant?12_191 as-constant?13_192)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((as-constant?_197)(if as-constant?13_192 as-constant?12_191 #f)))"
"(let-values()"
"(let-values(((d_198)(namespace->definitions ns_193 phase-level_194)))"
"(1/instance-set-variable-value!"
"(definitions-variables d_198)"
" name_195"
" val_196"
"(if as-constant?_197 'constant #f))))))))))))"
"(case-lambda"
"((ns_199 phase-level_200 name_201 val_202)"
"(namespace-set-variable!18_186 ns_199 phase-level_200 name_201 val_202 #f #f))"
"((ns_203 phase-level_204 name_205 val_206 as-constant?12_207)"
"(namespace-set-variable!18_186 ns_203 phase-level_204 name_205 val_206 as-constant?12_207 #t)))))"
"(define-values"
"(namespace-set-consistent!)"
"(lambda(ns_208 phase-level_209 name_210 val_211)"
"(let-values(((d_212)(namespace->definitions ns_208 phase-level_209)))"
"(1/instance-set-variable-value!(definitions-variables d_212) name_210 val_211 'consistent))))"
"(define-values"
"(namespace-set-transformer!)"
"(lambda(ns_217 phase-level_218 name_219 val_220)"
"(let-values(((d_221)(namespace->definitions ns_217(add1 phase-level_218))))"
"(hash-set!(definitions-transformers d_221) name_219 val_220))))"
"(define-values"
"(namespace-unset-transformer!)"
"(lambda(ns_222 phase-level_223 name_224)"
"(let-values(((d_225)(namespace->definitions ns_222(add1 phase-level_223))))"
"(hash-remove!(definitions-transformers d_225) name_224))))"
"(define-values"
"(namespace-get-variable)"
"(lambda(ns_226 phase-level_227 name_228 fail-k_229)"
"(let-values(((d_230)(namespace->definitions ns_226 phase-level_227)))"
"(1/instance-variable-value(definitions-variables d_230) name_228 fail-k_229))))"
"(define-values"
"(namespace-get-transformer)"
"(lambda(ns_231 phase-level_232 name_233 fail-k_234)"
"(let-values(((d_235)(namespace->definitions ns_231(add1 phase-level_232))))"
"(hash-ref(definitions-transformers d_235) name_233 fail-k_234))))"
"(define-values"
"(namespace->instance)"
"(lambda(ns_236 phase-shift_237)(definitions-variables(namespace->definitions ns_236 phase-shift_237))))"
"(define-values"
"(namespace-same-instance?)"
"(lambda(a-ns_238 b-ns_239)"
"(eq?"
"(hash-ref(namespace-phase-level-to-definitions a-ns_238) 0 'no-a)"
"(hash-ref(namespace-phase-level-to-definitions b-ns_239) 0 'no-b))))"
"(void)"
"(void)"
"(define-values(original-property-sym)(gensym 'original))"
"(void)"
"(void)"
"(define-values"
"(syntax->list$1)"
"(lambda(s_1)"
"(let-values(((l_2)"
"((letrec-values(((loop_3)"
"(lambda(s_4)"
"(if(pair? s_4)"
"(let-values()(cons(car s_4)(loop_3(cdr s_4))))"
"(if(syntax?$1 s_4)"
"(let-values()(loop_3(syntax-e$1 s_4)))"
"(let-values() s_4))))))"
" loop_3)"
" s_1)))"
"(if(list? l_2) l_2 #f))))"
"(void)"
"(void)"
"(define-values(missing$1)(gensym))"
"(define-values"
"(syntax-track-origin$1)"
"(let-values(((syntax-track-origin5_1)"
"(lambda(new-stx3_2 old-stx4_3 id1_4 id2_5)"
"(let-values()"
"(let-values()"
"(let-values(((id_8)"
"(if id2_5"
" id1_4"
"(if(identifier? old-stx_7)"
" old-stx_7"
"(let-values(((v_9)(syntax-e/no-taint old-stx_7)))"
"(if(pair? v_9)(car v_9) #f))))))"
"(let-values()"
"(let-values(((old-props_10)(syntax-props old-stx_7)))"
"(if(zero?(hash-count old-props_10))"
"(let-values()"
"(if id_8"
"(syntax-property$1"
" new-stx_6"
" 'origin"
"(cons id_8(hash-ref(syntax-props new-stx_6) 'origin null)))"
" new-stx_6))"
"(let-values()"
"(let-values(((new-props_11)(syntax-props new-stx_6)))"
"(if(zero?(hash-count new-props_11))"
"(let-values()"
"(if id_8"
"(let-values()"
"(let-values(((old-origin_12)"
"(plain-property-value"
"(hash-ref old-props_10 'origin missing$1))))"
"(let-values(((origin_13)"
"(if(eq? old-origin_12 missing$1)"
"(list id_8)"
"(cons id_8 old-origin_12))))"
"(let-values()"
"(if(syntax?$1 the-struct_14)"
"(let-values(((props7_15)(hash-set old-props_10 'origin origin_13)))"
"(syntax1.1"
"(syntax-content the-struct_14)"
"(syntax-scopes the-struct_14)"
"(syntax-shifted-multi-scopes the-struct_14)"
"(syntax-scope-propagations the-struct_14)"
"(syntax-mpi-shifts the-struct_14)"
"(syntax-srcloc the-struct_14)"
" props7_15"
"(syntax-inspector the-struct_14)"
"(syntax-tamper the-struct_14)))"
"                                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_14))))))"
"(let-values()"
"(let-values()"
"(if(syntax?$1 the-struct_16)"
"(let-values()"
"(syntax1.1"
"(syntax-content the-struct_16)"
"(syntax-scopes the-struct_16)"
"(syntax-shifted-multi-scopes the-struct_16)"
"(syntax-scope-propagations the-struct_16)"
"(syntax-mpi-shifts the-struct_16)"
"(syntax-srcloc the-struct_16)"
" props8_17"
"(syntax-inspector the-struct_16)"
"(syntax-tamper the-struct_16)))"
"                                              (raise-argument-error 'struct-copy \"syntax?\" the-struct_16))))))"
"(let-values()"
"(let-values(((old-props-with-origin_18)"
"(if id_8"
"(hash-set"
" old-props_10"
" 'origin"
"(cons id_8(hash-ref old-props_10 'origin null)))"
" old-props_10)))"
"(let-values(((updated-props_19)"
"(if(<"
"(hash-count old-props-with-origin_18)"
"(hash-count new-props_11))"
"(let-values()"
"(let-values()"
"(begin"
"(if((lambda(ht_21)"
"(if(hash? ht_21)(immutable? ht_21) #f))"
" ht_20)"
"(void)"
"(let-values()(default-in-immutable-hash ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(new-props_23 i_24)"
"(if i_24"
"(let-values(((k_25 v_26)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_20"
" i_24)))"
"(let-values(((new-props_27)"
"(let-values()"
"(let-values(((new-props_29)"
"(let-values()"
"(let-values(((new-v_30)"
"(hash-ref"
" new-props_28"
" k_25"
" missing$1)))"
"(hash-set"
" new-props_28"
" k_25"
"(if(eq?"
" new-v_30"
" missing$1)"
" v_26"
"(cons/preserve"
" new-v_30"
" v_26)))))))"
"(values"
" new-props_29)))))"
"(for-loop_22"
" new-props_27"
"(unsafe-immutable-hash-iterate-next"
" ht_20"
" i_24))))"
" new-props_23))))"
" for-loop_22)"
" new-props_11"
"(unsafe-immutable-hash-iterate-first ht_20)))))"
"(let-values()"
"(let-values()"
"(begin"
"(if((lambda(ht_32)"
"(if(hash? ht_32)(immutable? ht_32) #f))"
" ht_31)"
"(void)"
"(let-values()(default-in-immutable-hash ht_31)))"
"((letrec-values(((for-loop_33)"
"(lambda(old-props_34 i_35)"
"(if i_35"
"(let-values(((k_36 v_37)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_31"
" i_35)))"
"(let-values(((old-props_38)"
"(let-values()"
"(let-values(((old-props_40)"
"(let-values()"
"(let-values(((old-v_41)"
"(hash-ref"
" old-props_39"
" k_36"
" missing$1)))"
"(hash-set"
" old-props_39"
" k_36"
"(if(eq?"
" old-v_41"
" missing$1)"
" v_37"
"(cons/preserve"
" v_37"
" old-v_41)))))))"
"(values"
" old-props_40)))))"
"(for-loop_33"
" old-props_38"
"(unsafe-immutable-hash-iterate-next"
" ht_31"
" i_35))))"
" old-props_34))))"
" for-loop_33)"
" old-props-with-origin_18"
"(unsafe-immutable-hash-iterate-first ht_31))))))))"
"(let-values()"
"(if(syntax?$1 the-struct_42)"
"(let-values()"
"(syntax1.1"
"(syntax-content the-struct_42)"
"(syntax-scopes the-struct_42)"
"(syntax-shifted-multi-scopes the-struct_42)"
"(syntax-scope-propagations the-struct_42)"
"(syntax-mpi-shifts the-struct_42)"
"(syntax-srcloc the-struct_42)"
" props9_43"
"(syntax-inspector the-struct_42)"
"(syntax-tamper the-struct_42)))"
"(raise-argument-error"
" 'struct-copy"
"                                               \"syntax?\""
" the-struct_42))))))))))))))))))"
"(case-lambda"
"((new-stx_44 old-stx_45)(syntax-track-origin5_1 new-stx_44 old-stx_45 #f #f))"
"((new-stx_46 old-stx_47 id1_48)(syntax-track-origin5_1 new-stx_46 old-stx_47 id1_48 #t)))))"
"(define-values"
"(cons/preserve)"
"(lambda(a_49 b_50)"
"(if(let-values(((or-part_51)(preserved-property-value? a_49)))"
"(if or-part_51 or-part_51(preserved-property-value? b_50)))"
"(preserved-property-value1.1(cons(plain-property-value a_49)(plain-property-value b_50)))"
"(cons a_49 b_50))))"
"(define-values"
"(syntax-track-origin*)"
"(lambda(old-stxes_52 new-stx_53)"
"(let-values()"
"(begin"
"(if(list? lst_54)(void)(let-values()(in-list lst_54)))"
"((letrec-values(((for-loop_55)"
"(lambda(new-stx_56 lst_57)"
"(if(pair? lst_57)"
"(let-values(((old-stx_58)(unsafe-car lst_57)))"
"(let-values(((new-stx_59)"
"(let-values()"
"(let-values(((new-stx_61)"
"(let-values()"
"(syntax-track-origin$1 new-stx_60 old-stx_58))))"
"(values new-stx_61)))))"
"(for-loop_55 new-stx_59(unsafe-cdr lst_57))))"
" new-stx_56))))"
" for-loop_55)"
" new-stx_53"
" lst_54)))))"
"(void)"
"(void)"
"(define-values"
"(1/struct:exn:fail:syntax make-exn:fail:syntax$1 1/exn:fail:syntax? 1/exn:fail:syntax-exprs)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax"
" struct:exn:fail"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:exn:srclocs"
"(lambda(e_28)(filter values(map2 syntax-srcloc(1/exn:fail:syntax-exprs e_28))))))"
" #f"
" #f"
" '(0)"
"(lambda(str_29 cm_30 exprs_31 info_32)"
"(begin"
"(if(if(list? exprs_31)(andmap2 syntax?$1 exprs_31) #f)"
"(void)"
"                           (let-values () (raise-argument-error 'exn:fail:syntax \"(listof syntax?)\" exprs_31)))"
"(values str_29 cm_30 exprs_31)))"
" 'exn:fail:syntax)))))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'exprs))))"
"(define-values"
"(1/struct:exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1 1/exn:fail:syntax:unbound?)"
"(let-values(((struct:_33 make-_34 ?_35 -ref_36 -set!_37)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax:unbound"
" 1/struct:exn:fail:syntax"
" 0"
" 0"
" #f"
" null"
" #f"
" #f"
" '()"
" #f"
" 'exn:fail:syntax:unbound)))))"
"(values struct:_33 make-_34 ?_35)))"
"(define-values"
"(raise-syntax-error$1)"
"(let-values(((raise-syntax-error11_48)"
"(lambda(given-name9_49"
" message10_50"
" expr1_51"
" sub-expr2_52"
" extra-sources3_53"
" message-suffix4_54"
" expr5_55"
" sub-expr6_56"
" extra-sources7_57"
" message-suffix8_58)"
"(let-values()"
"(let-values()"
"(let-values(((expr_61)(if expr5_55 expr1_51 #f)))"
"(let-values(((sub-expr_62)(if sub-expr6_56 sub-expr2_52 #f)))"
"(let-values(((extra-sources_63)(if extra-sources7_57 extra-sources3_53 null)))"
"                            (let-values (((message-suffix_64) (if message-suffix8_58 message-suffix4_54 \"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax$1"
" given-name_59"
" message_60"
" expr_61"
" sub-expr_62"
" extra-sources_63"
" message-suffix_64)))))))))))"
"(case-lambda"
"((given-name_65 message_66)(raise-syntax-error11_48 given-name_65 message_66 #f #f #f #f #f #f #f #f))"
"((given-name_67 message_68 expr_69 sub-expr_70 extra-sources_71 message-suffix4_72)"
"(raise-syntax-error11_48"
" given-name_67"
" message_68"
" expr_69"
" sub-expr_70"
" extra-sources_71"
" message-suffix4_72"
" #t"
" #t"
" #t"
" #t))"
"((given-name_73 message_74 expr_75 sub-expr_76 extra-sources3_77)"
"(raise-syntax-error11_48 given-name_73 message_74 expr_75 sub-expr_76 extra-sources3_77 #f #t #t #t #f))"
"((given-name_78 message_79 expr_80 sub-expr2_81)"
"(raise-syntax-error11_48 given-name_78 message_79 expr_80 sub-expr2_81 #f #f #t #t #f #f))"
"((given-name_82 message_83 expr1_84)"
"(raise-syntax-error11_48 given-name_82 message_83 expr1_84 #f #f #f #t #f #f #f)))))"
"(define-values"
"(raise-unbound-syntax-error)"
"(let-values(((raise-unbound-syntax-error23_85)"
"(lambda(given-name21_86"
" message22_87"
" expr13_88"
" sub-expr14_89"
" extra-sources15_90"
" message-suffix16_91"
" expr17_92"
" sub-expr18_93"
" extra-sources19_94"
" message-suffix20_95)"
"(let-values()"
"(let-values()"
"(let-values(((expr_98)(if expr17_92 expr13_88 #f)))"
"(let-values(((sub-expr_99)(if sub-expr18_93 sub-expr14_89 #f)))"
"(let-values(((extra-sources_100)(if extra-sources19_94 extra-sources15_90 null)))"
"                            (let-values (((message-suffix_101) (if message-suffix20_95 message-suffix16_91 \"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax:unbound$1"
" given-name_96"
" message_97"
" expr_98"
" sub-expr_99"
" extra-sources_100"
" message-suffix_101)))))))))))"
"(case-lambda"
"((given-name_102 message_103)(raise-unbound-syntax-error23_85 given-name_102 message_103 #f #f #f #f #f #f #f #f))"
"((given-name_104 message_105 expr_106 sub-expr_107 extra-sources_108 message-suffix16_109)"
"(raise-unbound-syntax-error23_85"
" given-name_104"
" message_105"
" expr_106"
" sub-expr_107"
" extra-sources_108"
" message-suffix16_109"
" #t"
" #t"
" #t"
" #t))"
"((given-name_110 message_111 expr_112 sub-expr_113 extra-sources15_114)"
"(raise-unbound-syntax-error23_85"
" given-name_110"
" message_111"
" expr_112"
" sub-expr_113"
" extra-sources15_114"
" #f"
" #t"
" #t"
" #t"
" #f))"
"((given-name_115 message_116 expr_117 sub-expr14_118)"
"(raise-unbound-syntax-error23_85 given-name_115 message_116 expr_117 sub-expr14_118 #f #f #t #t #f #f))"
"((given-name_119 message_120 expr13_121)"
"(raise-unbound-syntax-error23_85 given-name_119 message_120 expr13_121 #f #f #f #t #f #f #f)))))"
"(define-values"
"(do-raise-syntax-error)"
"(lambda(exn:fail:syntax_122 given-name_123 message_124 expr_125 sub-expr_126 extra-sources_127 message-suffix_128)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_133)(not given-name_123)))"
"(if or-part_133 or-part_133(symbol? given-name_123)))"
"(void)"
"                      (let-values () (raise-argument-error 'raise-syntax-error \"(or/c symbol? #f)\" given-name_123)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message_124)"
"(void)"
"                        (let-values () (raise-argument-error 'raise-syntax-error \"string?\" message_124)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(list? extra-sources_127)(andmap2 syntax?$1 extra-sources_127) #f)"
"(void)"
"(let-values()"
"                            (raise-argument-error 'raise-syntax-error \"(listof syntax?)\" extra-sources_127)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message-suffix_128)"
"(void)"
"                            (let-values () (raise-argument-error 'raise-syntax-error \"string?\" message-suffix_128)))"
"(values))))"
"(let-values(((name_129)"
"(format"
"                           \"~a\""
"(let-values()"
"(if or-part_134"
" or-part_134"
"(let-values(((or-part_135)(extract-form-name expr_125)))"
"(if or-part_135 or-part_135 '?)))))))"
"(let-values(((at-message_130)"
"(let-values(((or-part_136)"
"(if sub-expr_126"
"(if(error-print-source-location)"
"                                              (format \"\\n  at: ~.s\" (syntax->datum$1 (datum->syntax$1 #f sub-expr_126)))"
" #f)"
" #f)))"
"                              (if or-part_136 or-part_136 \"\"))))"
"(let-values(((in-message_131)"
"(let-values(((or-part_137)"
"(if expr_125"
"(if(error-print-source-location)"
"                                                (format \"\\n  in: ~.s\" (syntax->datum$1 (datum->syntax$1 #f expr_125)))"
" #f)"
" #f)))"
"                                (if or-part_137 or-part_137 \"\"))))"
"(let-values(((src-loc-str_132)"
"(let-values(((or-part_138)(extract-source-location sub-expr_126)))"
"(if or-part_138"
" or-part_138"
"(let-values(((or-part_139)(extract-source-location expr_125)))"
"                                      (if or-part_139 or-part_139 \"\"))))))"
"(raise"
"(exn:fail:syntax_122"
"(string-append"
" src-loc-str_132"
" name_129"
"                       \": \""
" message_124"
" at-message_130"
" in-message_131"
" message-suffix_128)"
"(current-continuation-marks)"
"(map2"
" syntax-taint$1"
"(if(let-values()(if or-part_140 or-part_140 expr_125))"
"(cons"
"(datum->syntax$1 #f(let-values()(if or-part_141 or-part_141 expr_125)))"
" extra-sources_127)"
" extra-sources_127))))))))))))))"
"(define-values"
"(extract-form-name)"
"(lambda(s_142)"
"(if(syntax?$1 s_142)"
"(let-values()"
"(let-values(((e_143)(syntax-e$1 s_142)))"
"(if(symbol? e_143)"
"(let-values() e_143)"
"(if(if(pair? e_143)(identifier?(car e_143)) #f)"
"(let-values()(syntax-e$1(car e_143)))"
"(let-values() #f)))))"
"(let-values() #f))))"
"(define-values"
"(extract-source-location)"
"(lambda(s_144)"
"(if(syntax?$1 s_144)"
"(if(syntax-srcloc s_144)"
"        (let-values (((str_145) (srcloc->string (syntax-srcloc s_144)))) (if str_145 (string-append str_145 \": \") #f))"
" #f)"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(struct:module-use module-use1.1 module-use? module-use-module module-use-phase)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()(make-struct-type 'module-use #f 2 0 #f null #f #f '(0 1) #f 'module-use)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'module)"
"(make-struct-field-accessor -ref_4 1 'phase))))"
"(void)"
"(void)"
"(define-values"
"(struct:module"
" module1.1"
" module?"
" module-source-name"
" module-self"
" module-requires"
" module-provides"
" module-access"
" module-language-info"
" module-min-phase-level"
" module-max-phase-level"
" module-phase-level-linklet-info-callback"
" module-prepare-instance"
" module-instantiate-phase"
" module-primitive?"
" module-predefined?$1"
" module-cross-phase-persistent?"
" module-no-protected?"
" module-inspector"
" module-submodule-names"
" module-supermodule-name"
" module-get-all-variables"
" set-module-access!)"
"(let-values(((struct:_21 make-_22 ?_23 -ref_24 -set!_25)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module"
" #f"
" 19"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18)"
" #f"
" 'module)))))"
"(values"
" struct:_21"
" make-_22"
" ?_23"
"(make-struct-field-accessor -ref_24 0 'source-name)"
"(make-struct-field-accessor -ref_24 1 'self)"
"(make-struct-field-accessor -ref_24 2 'requires)"
"(make-struct-field-accessor -ref_24 3 'provides)"
"(make-struct-field-accessor -ref_24 4 'access)"
"(make-struct-field-accessor -ref_24 5 'language-info)"
"(make-struct-field-accessor -ref_24 6 'min-phase-level)"
"(make-struct-field-accessor -ref_24 7 'max-phase-level)"
"(make-struct-field-accessor -ref_24 8 'phase-level-linklet-info-callback)"
"(make-struct-field-accessor -ref_24 9 'prepare-instance)"
"(make-struct-field-accessor -ref_24 10 'instantiate-phase)"
"(make-struct-field-accessor -ref_24 11 'primitive?)"
"(make-struct-field-accessor -ref_24 12 'predefined?)"
"(make-struct-field-accessor -ref_24 13 'cross-phase-persistent?)"
"(make-struct-field-accessor -ref_24 14 'no-protected?)"
"(make-struct-field-accessor -ref_24 15 'inspector)"
"(make-struct-field-accessor -ref_24 16 'submodule-names)"
"(make-struct-field-accessor -ref_24 17 'supermodule-name)"
"(make-struct-field-accessor -ref_24 18 'get-all-variables)"
"(make-struct-field-mutator -set!_25 4 'access))))"
"(define-values"
"(struct:module-linklet-info"
" module-linklet-info2.1"
" module-linklet-info?"
" module-linklet-info-linklet-or-instance"
" module-linklet-info-module-uses"
" module-linklet-info-self)"
"(let-values(((struct:_131 make-_132 ?_133 -ref_134 -set!_135)"
"(let-values()"
"(let-values()"
"(make-struct-type 'module-linklet-info #f 3 0 #f null #f #f '(0 1 2) #f 'module-linklet-info)))))"
"(values"
" struct:_131"
" make-_132"
" ?_133"
"(make-struct-field-accessor -ref_134 0 'linklet-or-instance)"
"(make-struct-field-accessor -ref_134 1 'module-uses)"
"(make-struct-field-accessor -ref_134 2 'self))))"
"(define-values"
"(make-module37.1)"
"(lambda(cross-phase-persistent?15_163"
" cross-phase-persistent?32_164"
" get-all-variables19_165"
" get-all-variables36_166"
" instantiate-phase-callback9_167"
" language-info12_168"
" language-info29_169"
" max-phase-level8_170"
" max-phase-level25_171"
" min-phase-level7_172"
" min-phase-level24_173"
" no-protected?16_174"
" no-protected?33_175"
" phase-level-linklet-info-callback11_176"
" phase-level-linklet-info-callback28_177"
" predefined?14_178"
" predefined?31_179"
" prepare-instance-callback10_180"
" prepare-instance-callback27_181"
" primitive?13_182"
" primitive?30_183"
" provides6_184"
" requires5_185"
" requires22_186"
" self4_187"
" source-name3_188"
" source-name20_189"
" submodule-names17_190"
" submodule-names34_191"
" supermodule-name18_192"
" supermodule-name35_193)"
"(let-values(((source-name_194)(if source-name20_189 source-name3_188 #f)))"
"(let-values()"
"(let-values(((requires_196)(if requires22_186 requires5_185 null)))"
"(let-values()"
"(let-values(((min-phase-level_198)(if min-phase-level24_173 min-phase-level7_172 0)))"
"(let-values(((max-phase-level_199)(if max-phase-level25_171 max-phase-level8_170 0)))"
"(let-values()"
"(let-values(((prepare-instance_201)"
"(if prepare-instance-callback27_181 prepare-instance-callback10_180 void)))"
"(let-values(((phase-level-linklet-info-callback_202)"
"(if phase-level-linklet-info-callback28_177"
" phase-level-linklet-info-callback11_176"
"(lambda(phase-level_203 ns_204) #f))))"
"(let-values(((language-info_205)(if language-info29_169 language-info12_168 #f)))"
"(let-values(((primitive?_206)(if primitive?30_183 primitive?13_182 #f)))"
"(let-values(((predefined?_207)(if predefined?31_179 predefined?14_178 #f)))"
"(let-values(((cross-phase-persistent?_208)"
"(if cross-phase-persistent?32_164"
" cross-phase-persistent?15_163"
" primitive?_206)))"
"(let-values(((no-protected?_209)(if no-protected?33_175 no-protected?16_174 #f)))"
"(let-values(((submodule-names_210)"
"(if submodule-names34_191 submodule-names17_190 null)))"
"(let-values(((supermodule-name_211)"
"(if supermodule-name35_193 supermodule-name18_192 #f)))"
"(let-values(((get-all-variables_212)"
"(if get-all-variables36_166"
" get-all-variables19_165"
"(lambda() null))))"
"(let-values()"
"(module1.1"
" source-name_194"
" self_195"
" requires_196"
" provides_197"
" #f"
" language-info_205"
" min-phase-level_198"
" max-phase-level_199"
" phase-level-linklet-info-callback_202"
" prepare-instance_201"
" instantiate-phase_200"
" primitive?_206"
" predefined?_207"
" cross-phase-persistent?_208"
" no-protected?_209"
"(current-code-inspector)"
" submodule-names_210"
" supermodule-name_211"
" get-all-variables_212)))))))))))))))))))))"
"(define-values"
"(struct:module-instance"
" module-instance40.1"
" module-instance?"
" module-instance-namespace"
" module-instance-module"
" module-instance-shifted-requires"
" module-instance-phase-level-to-state"
" module-instance-made-available?"
" module-instance-attached?"
" module-instance-data-box"
" set-module-instance-shifted-requires!"
" set-module-instance-made-available?!"
" set-module-instance-attached?!)"
"(let-values(((struct:_282 make-_283 ?_284 -ref_285 -set!_286)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-instance"
" #f"
" 7"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 3 6)"
" #f"
" 'module-instance)))))"
"(values"
" struct:_282"
" make-_283"
" ?_284"
"(make-struct-field-accessor -ref_285 0 'namespace)"
"(make-struct-field-accessor -ref_285 1 'module)"
"(make-struct-field-accessor -ref_285 2 'shifted-requires)"
"(make-struct-field-accessor -ref_285 3 'phase-level-to-state)"
"(make-struct-field-accessor -ref_285 4 'made-available?)"
"(make-struct-field-accessor -ref_285 5 'attached?)"
"(make-struct-field-accessor -ref_285 6 'data-box)"
"(make-struct-field-mutator -set!_286 2 'shifted-requires)"
"(make-struct-field-mutator -set!_286 4 'made-available?)"
"(make-struct-field-mutator -set!_286 5 'attached?))))"
"(define-values"
"(make-module-instance)"
"(lambda(m-ns_332 m_333)(module-instance40.1 m-ns_332 m_333 #f(make-hasheqv) #f #f(box #f))))"
"(define-values"
"(make-module-namespace48.1)"
"(lambda(for-submodule?43_338 mpi41_339 root-expand-context42_340 ns47_341)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((phase_346) 0))"
"(let-values(((name_347)(1/module-path-index-resolve name-mpi_343)))"
"(let-values(((m-ns_348)"
"(let-values(((the-struct_350)"
"(let-values(((temp160_354) #f))"
"(new-namespace9.1"
" temp160_354"
" #t"
" root-expand-ctx159_353"
" #t"
" ns158_352"
" #t))))"
"(if(1/namespace? the-struct_350)"
"(let-values(((source-name151_356)(resolved-module-path-root-name name_347))"
"((submodule-declarations154_359)"
"(if for-submodule?_345"
"(namespace-submodule-declarations ns_342)"
"(make-hash)))"
"((available-module-instances155_360)(make-hasheqv))"
"((module-instances156_361)(make-hasheqv))"
"((declaration-inspector157_362)(current-code-inspector)))"
"(namespace1.1"
" mpi150_355"
" source-name151_356"
"(namespace-root-expand-ctx the-struct_350)"
" phase152_357"
" 0-phase153_358"
"(namespace-phase-to-namespace the-struct_350)"
"(namespace-phase-level-to-definitions the-struct_350)"
"(1/namespace-module-registry the-struct_350)"
"(namespace-bulk-binding-registry the-struct_350)"
" submodule-declarations154_359"
"(namespace-root-namespace the-struct_350)"
" declaration-inspector157_362"
"(namespace-inspector the-struct_350)"
" available-module-instances155_360"
" module-instances156_361))"
"                                    (raise-argument-error 'struct-copy \"namespace?\" the-struct_350)))))"
"(let-values((()"
"(begin"
"(hash-set!(namespace-phase-to-namespace m-ns_348) phase_346 m-ns_348)"
"(values))))"
"(let-values(((at-phase_349)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances m-ns_348) phase_346 at-phase_349)"
"(hash-set! at-phase_349 name_347(make-module-instance m-ns_348 #f))"
" m-ns_348)))))))))))))"
"(define-values"
"(declare-module!56.1)"
"(lambda(with-submodules?51_381 with-submodules?52_382 ns53_383 m54_384 mod-name55_385)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((with-submodules?_389)(if with-submodules?52_382 with-submodules?51_381 #t)))"
"(let-values()"
"(let-values(((prior-m_390)"
"(if with-submodules?_389"
"(hash-ref"
"(module-registry-declarations(1/namespace-module-registry ns_386))"
" mod-name_388"
" #f)"
" #f)))"
"(let-values(((prior-mi_391)"
"(if prior-m_390"
"(if(not(eq? m_387 prior-m_390))"
"(let-values(((temp163_394)(namespace-phase ns_386)))"
"(namespace->module-instance68.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns161_392"
" mod-name162_393"
" temp163_394))"
" #f)"
" #f)))"
"(begin"
"(if(if prior-m_390(not(eq? m_387 prior-m_390)) #f)"
"(let-values()(check-redeclaration-ok prior-m_390 prior-mi_391 mod-name_388))"
"(void))"
"(hash-set!"
"(if with-submodules?_389"
"(module-registry-declarations(1/namespace-module-registry ns_386))"
"(namespace-submodule-declarations ns_386))"
" mod-name_388"
" m_387)"
"(if with-submodules?_389"
"(let-values()"
"(register-bulk-provide!"
"(namespace-bulk-binding-registry ns_386)"
" mod-name_388"
"(module-self m_387)"
"(module-provides m_387)))"
"(void))"
"((1/current-module-name-resolver) mod-name_388 #f)"
"(if prior-mi_391"
"(let-values()"
"(let-values(((m-ns_395)(module-instance-namespace prior-mi_391)))"
"(let-values(((states_396)(module-instance-phase-level-to-state prior-mi_391)))"
"(let-values(((phase_397)(namespace-phase ns_386)))"
"(let-values(((visit?_398)(eq? 'started(hash-ref states_396(add1 phase_397) #f))))"
"(let-values(((run?_399)(eq? 'started(hash-ref states_396 phase_397 #f))))"
"(let-values(((at-phase_400)"
"(hash-ref(namespace-module-instances ns_386) phase_397)))"
"(begin"
"(hash-set! at-phase_400 mod-name_388(make-module-instance m-ns_395 m_387))"
"(if visit?_398"
"(let-values()"
"(let-values(((temp165_402)(namespace-mpi m-ns_395)))"
"(namespace-module-visit!102.1 #f #f ns164_401 temp165_402 phase166_403)))"
"(void))"
"(if run?_399"
"(let-values()"
"(let-values(((temp168_405)(namespace-mpi m-ns_395)))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns167_404"
" temp168_405"
" phase169_406)))"
"(void))))))))))"
"(void))))))))))))"
"(define-values"
"(check-redeclaration-ok)"
"(lambda(prior-m_427 prior-mi_428 mod-name_429)"
"(begin"
"(if(module-cross-phase-persistent? prior-m_427)"
"(let-values()"
"          (raise-arguments-error 'module \"cannot redeclare cross-phase persistent module\" \"module name\" mod-name_429))"
"(void))"
"(if(if prior-mi_428"
"(let-values(((or-part_430)(module-instance-attached? prior-mi_428)))"
"(if or-part_430"
" or-part_430"
"(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector(module-instance-namespace prior-mi_428))))))"
" #f)"
"(let-values()"
"          (raise-arguments-error 'module \"current code inspector cannot redeclare module\" \"module name\" mod-name_429))"
"(void)))))"
"(define-values"
"(raise-unknown-module-error)"
"  (lambda (who_431 mod-name_432) (raise-arguments-error who_431 \"unknown module\" \"module name\" mod-name_432)))"
"(define-values"
"(namespace->module-linklet-info)"
"(lambda(ns_433 name_434 phase-level_435)"
"(let-values(((m_436)(namespace->module ns_433 name_434)))"
"(if m_436((module-phase-level-linklet-info-callback m_436) phase-level_435 ns_433) #f))))"
"(define-values"
"(namespace->module-instance68.1)"
"(lambda(check-available-at-phase-level60_437"
" check-available-at-phase-level63_438"
" complain-on-failure?59_439"
" complain-on-failure?62_440"
" unavailable-callback61_441"
" unavailable-callback64_442"
" ns65_443"
" name66_444"
" 0-phase67_445)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((complain-on-failure?_449)(if complain-on-failure?62_440 complain-on-failure?59_439 #f)))"
"(let-values(((check-available-at-phase-level_450)"
"(if check-available-at-phase-level63_438 check-available-at-phase-level60_437 #f)))"
"(let-values(((unavailable-callback_451)(if unavailable-callback64_442 unavailable-callback61_441 void)))"
"(let-values()"
"(let-values(((mi_452)"
"(let-values(((or-part_453)"
"(hash-ref"
"(hash-ref(namespace-module-instances ns_446) 0-phase_448 '#hasheq())"
" name_447"
" #f)))"
"(if or-part_453"
" or-part_453"
"(let-values(((or-part_454)"
"(let-values(((c-ns_455)"
"(let-values(((or-part_456)"
"(namespace-root-namespace ns_446)))"
"(if or-part_456 or-part_456 ns_446))))"
"(hash-ref(namespace-module-instances c-ns_455) name_447 #f))))"
"(if or-part_454"
" or-part_454"
"(if complain-on-failure?_449"
"                                          (error \"no module instance found:\" name_447 0-phase_448)"
" #f)))))))"
"(if(if mi_452 check-available-at-phase-level_450 #f)"
"(check-availablilty mi_452 check-available-at-phase-level_450 unavailable-callback_451)"
" mi_452)))))))))))"
"(define-values"
"(namespace-install-module-namespace!)"
"(lambda(ns_489 name_490 0-phase_491 m_492 existing-m-ns_493)"
"(let-values(((m-ns_494)"
"(let-values()"
"(if(1/namespace? the-struct_496)"
"(let-values(((mpi170_497)(namespace-mpi existing-m-ns_493))"
"((source-name171_498)(namespace-source-name existing-m-ns_493))"
"((root-expand-ctx172_499)(namespace-root-expand-ctx existing-m-ns_493))"
"((phase173_500)(namespace-phase existing-m-ns_493))"
"((0-phase174_501)(namespace-0-phase existing-m-ns_493))"
"((phase-to-namespace175_502)(make-hasheqv))"
"((phase-level-to-definitions176_503)"
"(if(module-cross-phase-persistent? m_492)"
"(namespace-phase-level-to-definitions existing-m-ns_493)"
"(make-hasheqv)))"
"((declaration-inspector177_504)(module-inspector m_492))"
"((inspector178_505)(namespace-inspector existing-m-ns_493)))"
"(namespace1.1"
" mpi170_497"
" source-name171_498"
" root-expand-ctx172_499"
" phase173_500"
" 0-phase174_501"
" phase-to-namespace175_502"
" phase-level-to-definitions176_503"
"(1/namespace-module-registry the-struct_496)"
"(namespace-bulk-binding-registry the-struct_496)"
"(namespace-submodule-declarations the-struct_496)"
"(namespace-root-namespace the-struct_496)"
" declaration-inspector177_504"
" inspector178_505"
"(namespace-available-module-instances the-struct_496)"
"(namespace-module-instances the-struct_496)))"
"                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_496)))))"
"(let-values(((mi_495)(make-module-instance m-ns_494 m_492)))"
"(if(module-cross-phase-persistent? m_492)"
"(let-values()"
"(begin"
"(hash-set!(namespace-phase-to-namespace m-ns_494) 0 m-ns_494)"
"(hash-set!(namespace-phase-level-to-definitions m-ns_494) 0(namespace->definitions existing-m-ns_493 0))"
"(hash-set!(namespace-phase-to-namespace m-ns_494) 1(namespace->namespace-at-phase m-ns_494 1))"
"(hash-set!(namespace-phase-level-to-definitions m-ns_494) 1(namespace->definitions existing-m-ns_493 1))"
"(hash-set!"
"(namespace-module-instances"
"(let-values(((or-part_506)(namespace-root-namespace ns_489)))(if or-part_506 or-part_506 ns_489)))"
" name_490"
" mi_495)"
"(hash-set!(module-instance-phase-level-to-state mi_495) 0 'started)))"
"(let-values()"
"(let-values((()(begin(hash-set!(namespace-phase-to-namespace m-ns_494) 0-phase_491 m-ns_494)(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
"(namespace-phase-level-to-definitions m-ns_494)"
" 0"
"(namespace->definitions existing-m-ns_493 0))"
"(values))))"
"(let-values((()(begin(hash-set!(module-instance-phase-level-to-state mi_495) 0 'started)(values))))"
"(let-values(((at-phase_507)"
"(let-values(((or-part_508)"
"(hash-ref(namespace-module-instances ns_489) 0-phase_491 #f)))"
"(if or-part_508"
" or-part_508"
"(let-values(((at-phase_509)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_489) 0-phase_491 at-phase_509)"
" at-phase_509))))))"
"(hash-set! at-phase_507 name_490 mi_495)))))))))))"
"(define-values"
"(namespace-create-module-instance!)"
"(lambda(ns_510 name_511 0-phase_512 m_513 mpi_514)"
"(let-values(((m-ns_515)"
"(let-values()"
"(if(1/namespace? the-struct_517)"
"(let-values(((source-name180_519)"
"(let-values(((or-part_527)(module-source-name m_513)))"
"(if or-part_527"
" or-part_527"
"(resolved-module-path-root-name(1/module-path-index-resolve mpi_514)))))"
"((root-expand-ctx181_520)(box #f))"
"((phase-to-namespace184_523)(make-hasheqv))"
"((phase-level-to-definitions185_524)(make-hasheqv))"
"((declaration-inspector186_525)(module-inspector m_513))"
"((inspector187_526)(make-inspector(module-inspector m_513))))"
"(namespace1.1"
" mpi179_518"
" source-name180_519"
" root-expand-ctx181_520"
" phase182_521"
" 0-phase183_522"
" phase-to-namespace184_523"
" phase-level-to-definitions185_524"
"(1/namespace-module-registry the-struct_517)"
"(namespace-bulk-binding-registry the-struct_517)"
"(namespace-submodule-declarations the-struct_517)"
"(namespace-root-namespace the-struct_517)"
" declaration-inspector186_525"
" inspector187_526"
"(namespace-available-module-instances the-struct_517)"
"(namespace-module-instances the-struct_517)))"
"                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_517)))))"
"(let-values((()(begin(hash-set!(namespace-phase-to-namespace m-ns_515) 0-phase_512 m-ns_515)(values))))"
"(let-values(((mi_516)(make-module-instance m-ns_515 m_513)))"
"(begin"
"(if(module-cross-phase-persistent? m_513)"
"(hash-set!(namespace-module-instances ns_510) name_511 mi_516)"
"(let-values(((at-phase_528)"
"(let-values(((or-part_529)(hash-ref(namespace-module-instances ns_510) 0-phase_512 #f)))"
"(if or-part_529"
" or-part_529"
"(let-values(((at-phase_530)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_510) 0-phase_512 at-phase_530)"
" at-phase_530))))))"
"(hash-set! at-phase_528 name_511 mi_516)))"
" mi_516))))))"
"(define-values"
"(check-availablilty)"
"(lambda(mi_531 check-available-at-phase-level_532 unavailable-callback_533)"
"(let-values(((m_534)(module-instance-module mi_531)))"
"(if(if m_534"
"(if(<="
"(module-min-phase-level m_534)"
"(add1 check-available-at-phase-level_532)"
"(module-max-phase-level m_534))"
"(not"
"(hash-ref(module-instance-phase-level-to-state mi_531)(add1 check-available-at-phase-level_532) #f))"
" #f)"
" #f)"
"(unavailable-callback_533 mi_531)"
" mi_531))))"
"(define-values"
"(namespace->module-namespace80.1)"
"(lambda(check-available-at-phase-level72_535"
" check-available-at-phase-level75_536"
" complain-on-failure?71_537"
" complain-on-failure?74_538"
" unavailable-callback73_539"
" unavailable-callback76_540"
" ns77_541"
" name78_542"
" 0-phase79_543)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((complain-on-failure?_547)(if complain-on-failure?74_538 complain-on-failure?71_537 #f)))"
"(let-values(((check-available-at-phase-level_548)"
"(if check-available-at-phase-level75_536 check-available-at-phase-level72_535 #f)))"
"(let-values(((unavailable-callback_549)(if unavailable-callback76_540 unavailable-callback73_539 void)))"
"(let-values()"
"(let-values(((mi_550)"
"(let-values()"
"(namespace->module-instance68.1"
" check-available-at-phase-level192_556"
" #t"
" complain-on-failure?191_555"
" #t"
" unavailable-callback193_557"
" #t"
" ns188_552"
" name189_553"
" 0-phase190_554))))"
"(if mi_550(module-instance-namespace mi_550) #f)))))))))))"
"(define-values"
"(namespace-record-module-instance-attached!)"
"(lambda(ns_590 mod-name_591 phase_592)"
"(let-values(((mi_593)"
"(let-values()"
"(namespace->module-instance68.1 #f #f #f #f #f #f ns194_594 mod-name195_595 phase196_596))))"
"(set-module-instance-attached?! mi_593 #t))))"
"(define-values"
"(namespace-module-instantiate!94.1)"
"(lambda(otherwise-available?85_597"
" otherwise-available?89_598"
" run-phase83_599"
" run-phase87_600"
" seen86_601"
" seen90_602"
" skip-run?84_603"
" skip-run?88_604"
" ns91_605"
" mpi92_606"
" instance-phase93_607)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((run-phase_611)(if run-phase87_600 run-phase83_599(namespace-phase ns_608))))"
"(let-values(((skip-run?_612)(if skip-run?88_604 skip-run?84_603 #f)))"
"(let-values(((otherwise-available?_613)(if otherwise-available?89_598 otherwise-available?85_597 #t)))"
"(let-values(((seen_614)(if seen90_602 seen86_601 '#hasheq())))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/module-path-index? mpi_609)"
"(void)"
"                                      (let-values () (error \"not a module path index:\" mpi_609)))"
"(values))))"
"(let-values(((name_615)(1/module-path-index-resolve mpi_609 #t)))"
"(let-values(((m_616)(namespace->module ns_608 name_615)))"
"(let-values((()"
"(begin"
"(if m_616"
"(void)"
"(let-values()(raise-unknown-module-error 'instantiate name_615)))"
"(values))))"
"(let-values(((instantiate!_617)"
"(lambda(instance-phase_618 run-phase_619 ns_620)"
"(let-values(((mi_621)"
"(let-values(((or-part_622)"
"(let-values()"
"(namespace->module-instance68.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns203_623"
" name204_624"
" instance-phase205_625))))"
"(if or-part_622"
" or-part_622"
"(namespace-create-module-instance!"
" ns_620"
" name_615"
" instance-phase_618"
" m_616"
" mpi_609)))))"
"(let-values(((...namespace/module.rkt:356:4_626)"
" run-module-instance!125.1))"
"(run-module-instance!123.1"
" otherwise-available?201_631"
" run-phase199_629"
" seen202_632"
" #t"
" skip-run?200_630"
" mi197_627"
" ns198_628))))))"
"(if(module-cross-phase-persistent? m_616)"
"(let-values()"
"(instantiate!_617"
" 0"
" 0"
"(let-values(((or-part_633)(namespace-root-namespace ns_608)))"
"(if or-part_633 or-part_633 ns_608))))"
"(let-values()"
"(instantiate!_617 instance-phase_610 run-phase_611 ns_608))))))))))))))))))"
"(define-values"
"(namespace-module-visit!102.1)"
"(lambda(visit-phase97_672 visit-phase98_673 ns99_674 mpi100_675 instance-phase101_676)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((visit-phase_680)(if visit-phase98_673 visit-phase97_672(namespace-phase ns_677))))"
"(let-values()"
"(let-values(((temp209_685)(add1 visit-phase_680)))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" temp209_685"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns206_682"
" mpi207_683"
" instance-phase208_684)))))))))"
"(define-values"
"(namespace-module-make-available!110.1)"
"(lambda(visit-phase105_706 visit-phase106_707 ns107_708 mpi108_709 instance-phase109_710)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((visit-phase_714)(if visit-phase106_707 visit-phase105_706(namespace-phase ns_711))))"
"(let-values()"
"(let-values(((temp213_719)(add1 visit-phase_714))((temp214_720) #t))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" temp213_719"
" #t"
" #f"
" #f"
" temp214_720"
" #t"
" ns210_716"
" mpi211_717"
" instance-phase212_718)))))))))"
"(define-values"
"(lifted/11.1$5 lifted/12.1$5 lifted/13.1$5 lifted/14.1$5 lifted/15.1$5)"
"(make-struct-type"
" 'run-module-instance!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'run-module-instance!"
"(case-lambda((self_741 mi_742 ns_743)(apply missing-kw self_741 mi_742 ns_743 null))))))"
"(current-inspector)"
"(case-lambda((self_744 mi_745 ns_746)(apply missing-kw self_744 mi_745 ns_746 null)))))"
"(define-values"
"(run-module-instance!123.1)"
"(lambda(otherwise-available?115_747 run-phase113_748 seen116_749 seen120_750 skip-run?114_751 mi121_752 ns122_753)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((seen_759)(if seen120_750 seen116_749 '#hasheq())))"
"(let-values()"
"(let-values()"
"(let-values(((m-ns_760)(module-instance-namespace mi_754)))"
"(let-values(((instance-phase_761)(namespace-0-phase m-ns_760)))"
"(let-values(((run-phase-level_762)(phase- run-phase_756 instance-phase_761)))"
"(if(if(let-values()"
"(if or-part_763"
" or-part_763"
"(eq?"
" 'started"
"(hash-ref"
"(module-instance-phase-level-to-state mi_754)"
" run-phase-level_762"
" #f))))"
"(let-values(((or-part_764)(not otherwise-available?_758)))"
"(if or-part_764 or-part_764(module-instance-made-available? mi_754)))"
" #f)"
"(void)"
"(let-values()"
"(let-values(((m_765)(module-instance-module mi_754)))"
"(let-values(((mpi_766)(namespace-mpi m-ns_760)))"
"(let-values()"
"(let-values(((bulk-binding-registry_768)"
"(namespace-bulk-binding-registry m-ns_760)))"
"(begin"
"(if(hash-ref seen_759 mi_754 #f)"
"(let-values()"
"                                            (error 'require \"import cycle detected during module instantiation\"))"
"(void))"
"(if(module-instance-shifted-requires mi_754)"
"(void)"
"(let-values()"
"(set-module-instance-shifted-requires!"
" mi_754"
"(alt-reverse"
"(let-values(((lst_769)(module-requires m_765)))"
"(begin"
"(if(list? lst_769)(void)(let-values()(in-list lst_769)))"
"((letrec-values(((for-loop_770)"
"(lambda(fold-var_771 lst_772)"
"(if(pair? lst_772)"
"(let-values(((phase+mpis_773)"
"(unsafe-car lst_772)))"
"(let-values(((fold-var_774)"
"(let-values()"
"(let-values(((fold-var_776)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
"(car"
" phase+mpis_773)"
"(alt-reverse"
"(let-values(((lst_777)"
"(cdr"
" phase+mpis_773)))"
"(begin"
"(if(list?"
" lst_777)"
"(void)"
"(let-values()"
"(in-list"
" lst_777)))"
"((letrec-values(((for-loop_778)"
"(lambda(fold-var_779"
" lst_780)"
"(if(pair?"
" lst_780)"
"(let-values(((req-mpi_781)"
"(unsafe-car"
" lst_780)))"
"(let-values(((fold-var_782)"
"(let-values()"
"(let-values(((fold-var_784)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-unresolve"
"(module-path-index-shift"
" req-mpi_781"
"(module-self"
" m_765)"
" mpi_766)))"
" fold-var_783))))"
"(values"
" fold-var_784)))))"
"(for-loop_778"
" fold-var_782"
"(unsafe-cdr"
" lst_780))))"
" fold-var_779))))"
" for-loop_778)"
" null"
" lst_777))))))"
" fold-var_775))))"
"(values fold-var_776)))))"
"(for-loop_770"
" fold-var_774"
"(unsafe-cdr lst_772))))"
" fold-var_771))))"
" for-loop_770)"
" null"
" lst_769)))))))"
"(let-values(((lst_785)(module-instance-shifted-requires mi_754)))"
"(begin"
"(if(list? lst_785)(void)(let-values()(in-list lst_785)))"
"((letrec-values(((for-loop_786)"
"(lambda(fold-var_787 lst_788)"
"(if(pair? lst_788)"
"(let-values(((phase+mpis_789)(unsafe-car lst_788)))"
"(let-values(((fold-var_790)"
"(let-values()"
"(let-values(((fold-var_792)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((req-phase_793)"
"(car"
" phase+mpis_789)))"
"(let-values(((lst_794)"
"(cdr"
" phase+mpis_789)))"
"(begin"
"(if(list?"
" lst_794)"
"(void)"
"(let-values()"
"(in-list"
" lst_794)))"
"((letrec-values(((for-loop_795)"
"(lambda(fold-var_796"
" lst_797)"
"(if(pair?"
" lst_797)"
"(let-values(((req-mpi_798)"
"(unsafe-car"
" lst_797)))"
"(let-values(((fold-var_799)"
"(let-values()"
"(let-values(((fold-var_801)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((temp217_805)"
"(phase+"
" instance-phase_761"
" req-phase_793))"
"((temp221_809)"
"(hash-set"
" seen_759"
" mi_754"
" #t)))"
"(namespace-module-instantiate!94.1"
" otherwise-available?220_808"
" #t"
" run-phase218_806"
" #t"
" temp221_809"
" #t"
" skip-run?219_807"
" #t"
" ns215_803"
" req-mpi216_804"
" temp217_805)))"
"(void)))))"
"(values"
" fold-var_801)))))"
"(for-loop_795"
" fold-var_799"
"(unsafe-cdr"
" lst_797))))"
" fold-var_796))))"
" for-loop_795)"
"(void)"
" lst_794)))))"
"(void)))))"
"(values fold-var_792)))))"
"(for-loop_786 fold-var_790(unsafe-cdr lst_788))))"
" fold-var_787))))"
" for-loop_786)"
"(void)"
" lst_785)))"
"(if(label-phase? instance-phase_761)"
"(void)"
"(let-values()"
"(let-values(((start_810)(module-max-phase-level m_765))"
"((end_811)(sub1(module-min-phase-level m_765)))"
"((inc_812) -1))"
"(begin"
"(if(if(real? start_810)(if(real? end_811)(real? inc_812) #f) #f)"
"(void)"
"(let-values()(in-range start_810 end_811 inc_812)))"
"((letrec-values(((for-loop_813)"
"(lambda(fold-var_814 pos_815)"
"(if(> pos_815 end_811)"
"(let-values()"
"(let-values(((fold-var_817)"
"(let-values()"
"(let-values(((fold-var_819)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_820)"
"(phase+"
" phase-level_816"
" phase-shift_767)))"
"(if(if(not"
" skip-run?_757)"
"(eqv?"
" phase_820"
" run-phase_756)"
" #f)"
"(let-values()"
"(if(eq?"
" 'started"
"(hash-ref"
"(module-instance-phase-level-to-state"
" mi_754)"
" phase-level_816"
" #f))"
"(void)"
"(let-values()"
"(let-values((()"
"(begin"
"(hash-set!"
"(module-instance-phase-level-to-state"
" mi_754)"
" phase-level_816"
" 'started)"
"(values))))"
"(let-values((()"
"(begin"
"(void"
"(namespace->definitions"
" m-ns_760"
" phase-level_816))"
"(values))))"
"(let-values(((p-ns_821)"
"(namespace->namespace-at-phase"
" m-ns_760"
" phase_820)))"
"(let-values(((insp_822)"
"(module-inspector"
" m_765)))"
"(let-values(((data-box_823)"
"(module-instance-data-box"
" mi_754)))"
"(let-values(((prep_824)"
"(module-prepare-instance"
" m_765)))"
"(let-values(((go_825)"
"(module-instantiate-phase"
" m_765)))"
"(begin"
"(prep_824"
" data-box_823"
" p-ns_821"
" phase-shift_767"
" mpi_766"
" bulk-binding-registry_768"
" insp_822)"
"(go_825"
" data-box_823"
" p-ns_821"
" phase-shift_767"
" phase-level_816"
" mpi_766"
" bulk-binding-registry_768"
" insp_822))))))))))))"
"(if(if otherwise-available?_758"
"(if(not"
"(negative?"
" run-phase_756))"
"(not"
"(hash-ref"
"(module-instance-phase-level-to-state"
" mi_754)"
" phase-level_816"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(namespace-available-module-instances"
" ns_755)"
" phase_820"
"(lambda(l_826)"
"(cons"
" mi_754"
" l_826))"
" null)"
"(hash-set!"
"(module-instance-phase-level-to-state"
" mi_754)"
" phase-level_816"
" 'available)))"
"(void)))))"
"(void)))))"
"(values fold-var_819)))))"
"(for-loop_813"
" fold-var_817"
"(+ pos_815 inc_812))))"
" fold-var_814))))"
" for-loop_813)"
"(void)"
" start_810)))))"
"(if otherwise-available?_758"
"(let-values()(set-module-instance-made-available?! mi_754 #t))"
"(void))"
"(if skip-run?_757"
"(void)"
"(let-values()"
"(hash-set!"
"(module-instance-phase-level-to-state mi_754)"
" run-phase-level_762"
" 'started)))))))))))))))))))))))"
"(define-values"
"(unpack124.1)"
"(lambda(given-kws_827 given-args_828 mi121_829 ns122_830)"
"(let-values(((otherwise-available?115_831)(car given-args_828))"
"((given-kws_832)(cdr given-kws_827))"
"((given-args_833)(cdr given-args_828)))"
"(let-values(((run-phase113_834)(car given-args_833))"
"((given-kws_835)(cdr given-kws_832))"
"((given-args_836)(cdr given-args_833)))"
"(let-values(((seen120_837)(if(pair? given-kws_835)(eq? '#:seen(car given-kws_835)) #f)))"
"(let-values(((seen116_838)(if seen120_837(car given-args_836)(void)))"
"((given-kws_839)(if seen120_837(cdr given-kws_835) given-kws_835))"
"((given-args_840)(if seen120_837(cdr given-args_836) given-args_836)))"
"(let-values(((skip-run?114_841)(car given-args_840)))"
"(run-module-instance!123.1"
" otherwise-available?115_831"
" run-phase113_834"
" seen116_838"
" seen120_837"
" skip-run?114_841"
" mi121_829"
" ns122_830))))))))"
"(define-values"
"(run-module-instance!125.1)"
"(lifted/12.1$5"
"(lambda(given-kws_842 given-argc_843)"
"(if(= given-argc_843 4)"
"(subsets?"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" given-kws_842"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?))"
" #f))"
"(case-lambda((given-kws_844 given-args_845 mi_846 ns_847)(unpack124.1 given-kws_844 given-args_845 mi_846 ns_847)))"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)))"
"(define-values"
"(namespace-visit-available-modules!)"
"(let-values(((namespace-visit-available-modules!129_848)"
"(lambda(ns128_849 run-phase126_850 run-phase127_851)"
"(let-values()"
"(let-values(((run-phase_853)(if run-phase127_851 run-phase126_850(namespace-phase ns_852))))"
"(let-values()(namespace-run-available-modules! ns_852(add1 run-phase_853))))))))"
"(case-lambda"
"((ns_854)(namespace-visit-available-modules!129_848 ns_854 #f #f))"
"((ns_855 run-phase126_856)(namespace-visit-available-modules!129_848 ns_855 run-phase126_856 #t)))))"
"(define-values"
"(namespace-run-available-modules!)"
"(let-values(((namespace-run-available-modules!134_857)"
"(lambda(ns133_858 run-phase131_859 run-phase132_860)"
"(let-values()"
"(let-values(((run-phase_862)(if run-phase132_860 run-phase131_859(namespace-phase ns_861))))"
"(let-values()"
"(if(null?(hash-ref(namespace-available-module-instances ns_861) run-phase_862 null))"
"(void)"
"(let-values()"
"(registry-call-with-lock"
"(1/namespace-module-registry ns_861)"
"(lambda()"
"((letrec-values(((loop_863)"
"(lambda()"
"(let-values(((mis_864)"
"(hash-ref"
"(namespace-available-module-instances ns_861)"
" run-phase_862"
" null)))"
"(if(null? mis_864)"
"(void)"
"(let-values()"
"(begin"
"(hash-set!"
"(namespace-available-module-instances ns_861)"
" run-phase_862"
" null)"
"(let-values(((lst_865)(alt-reverse mis_864)))"
"(begin"
"(if(list? lst_865)"
"(void)"
"(let-values()(in-list lst_865)))"
"((letrec-values(((for-loop_866)"
"(lambda(fold-var_867 lst_868)"
"(if(pair? lst_868)"
"(let-values(((mi_869)"
"(unsafe-car"
" lst_868)))"
"(let-values(((fold-var_870)"
"(let-values()"
"(let-values(((fold-var_872)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((temp225_877)"
" #f)"
"((temp226_878)"
" #f))"
"(run-module-instance!123.1"
" temp226_878"
" run-phase224_876"
" #f"
" #f"
" temp225_877"
" mi222_874"
" ns223_875)))"
"(void)))))"
"(values"
" fold-var_872)))))"
"(for-loop_866"
" fold-var_870"
"(unsafe-cdr lst_868))))"
" fold-var_867))))"
" for-loop_866)"
"(void)"
" lst_865)))"
"(loop_863))))))))"
" loop_863))))))))))))"
"(case-lambda"
"((ns_879)(namespace-run-available-modules!134_857 ns_879 #f #f))"
"((ns_880 run-phase131_881)(namespace-run-available-modules!134_857 ns_880 run-phase131_881 #t)))))"
"(define-values"
"(namespace-module-use->module+linklet-instances144.1)"
"(lambda(phase-shift138_897 shift-from136_898 shift-from139_899 shift-to137_900 shift-to140_901 ns142_902 mu143_903)"
"(let-values()"
"(let-values()"
"(let-values(((shift-from_906)(if shift-from139_899 shift-from136_898 #f)))"
"(let-values(((shift-to_907)(if shift-to140_901 shift-to137_900 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((mod_909)(module-use-module mu_905)))"
"(let-values(((mi_910)"
"(let-values(((temp233_915)"
"(1/module-path-index-resolve"
"(if shift-from_906"
"(module-path-index-shift mod_909 shift-from_906 shift-to_907)"
" mod_909)))"
"((temp235_917) #t))"
"(namespace->module-instance68.1"
" #f"
" #f"
" temp235_917"
" #t"
" #f"
" #f"
" ns232_914"
" temp233_915"
" phase-shift234_916))))"
"(let-values(((m-ns_911)(module-instance-namespace mi_910)))"
"(let-values(((d_912)"
"(hash-ref"
"(namespace-phase-level-to-definitions m-ns_911)"
"(module-use-phase mu_905)"
" #f)))"
"(if d_912"
"(values mi_910(definitions-variables d_912))"
"                          (error \"namespace mismatch: phase level not found\" mu_905))))))))))))))"
"(define-values"
"(module-compute-access!)"
"(lambda(m_937)"
"(let-values(((access_938)"
"(let-values(((ht_939)(module-provides m_937)))"
"(begin"
"(if((lambda(ht_940)(hash? ht_940)) ht_939)(void)(let-values()(default-in-hash ht_939)))"
"((letrec-values(((for-loop_941)"
"(lambda(table_942 i_943)"
"(if i_943"
"(let-values(((phase_944 at-phase_945)"
"(hash-iterate-key+value ht_939 i_943)))"
"(let-values(((table_946)"
"(let-values()"
"(let-values(((table_948)"
"(let-values()"
"(let-values(((key_949 val_950)"
"(let-values()"
"(values"
" phase_944"
"(let-values()"
"(begin"
"(if((lambda(ht_952)"
"(hash?"
" ht_952))"
" ht_951)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_951)))"
"((letrec-values(((for-loop_953)"
"(lambda(table_954"
" i_955)"
"(if i_955"
"(let-values(((sym_956"
" binding/p_957)"
"(hash-iterate-key+value"
" ht_951"
" i_955)))"
"(let-values(((table_958)"
"(let-values()"
"(let-values(((table_960)"
"(let-values()"
"(let-values(((key_961"
" val_962)"
"(let-values()"
"(values"
"(module-binding-sym"
"(provided-as-binding"
" binding/p_957))"
"(if(provided-as-protected?"
" binding/p_957)"
" 'protected"
" 'provided)))))"
"(hash-set"
" table_959"
" key_961"
" val_962)))))"
"(values"
" table_960)))))"
"(for-loop_953"
" table_958"
"(hash-iterate-next"
" ht_951"
" i_955))))"
" table_954))))"
" for-loop_953)"
" '#hash()"
"(hash-iterate-first"
" ht_951))))))))"
"(hash-set table_947 key_949 val_950)))))"
"(values table_948)))))"
"(for-loop_941 table_946(hash-iterate-next ht_939 i_943))))"
" table_942))))"
" for-loop_941)"
" '#hasheqv()"
"(hash-iterate-first ht_939))))))"
"(begin(set-module-access! m_937 access_938) access_938))))"
"(void)"
"(void)"
"(define-values"
"(binding->module-instance)"
"(lambda(b_1 ns_2 phase_3 id_4)"
"(let-values(((at-phase_5)(phase- phase_3(module-binding-phase b_1))))"
"(let-values(((mi_6)"
"(let-values(((temp2_9)(1/module-path-index-resolve(module-binding-module b_1)))"
"((temp4_11)(module-binding-phase b_1))"
"((temp5_12)(lambda(mi_13) 'unavailable)))"
"(namespace->module-instance68.1 temp4_11 #t #f #f temp5_12 #t ns1_8 temp2_9 at-phase3_10))))"
"(begin"
"(if(eq? mi_6 'unavailable)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(format"
"(string-append"
"                 \"module mismatch;\\n\""
"                 \" attempted to use a module that is not available\\n\""
"                 \"  possible cause:\\n\""
"                 \"   using (dynamic-require .... #f)\\n\""
"                 \"   but need (dynamic-require .... 0)\\n\""
"                 \"  module: ~s\\n\""
"                 \"  phase: ~s\")"
"(module-binding-module b_1)"
"(phase+ at-phase_5(module-binding-phase b_1)))"
" id_4))"
"(void))"
"(if mi_6"
"(void)"
"(let-values()"
"(error"
" 'expand"
"(string-append"
"                \"namespace mismatch; cannot locate module instance\\n\""
"                \"  module: ~s\\n\""
"                \"  use phase: ~a\\n\""
"                \"  definition phase: ~a\\n\""
"                \"  for identifier: ~s\")"
"(module-binding-module b_1)"
" phase_3"
"(module-binding-phase b_1)"
" id_4)))"
" mi_6)))))"
"(void)"
"(void)"
"(define-values"
"(check-access)"
"(lambda(b_1 mi_2 id_3 in-s_4 what_5)"
"(let-values(((m_6)(module-instance-module mi_2)))"
"(if(if m_6(not(module-no-protected? m_6)) #f)"
"(let-values()"
"(let-values(((access_7)"
"(let-values(((or-part_9)(module-access m_6)))"
"(if or-part_9 or-part_9(module-compute-access! m_6)))))"
"(let-values(((a_8)"
"(hash-ref"
"(hash-ref access_7(module-binding-phase b_1) '#hasheq())"
"(module-binding-sym b_1)"
" 'unexported)))"
"(if(let-values(((or-part_10)(eq? a_8 'unexported)))(if or-part_10 or-part_10(eq? a_8 'protected)))"
"(let-values()"
"(if(let-values(((or-part_11)"
"(inspector-superior?"
"(let-values(((or-part_12)(syntax-inspector id_3)))"
"(if or-part_12 or-part_12(current-code-inspector)))"
"(namespace-inspector(module-instance-namespace mi_2)))))"
"(if or-part_11"
" or-part_11"
"(if(module-binding-extra-inspector b_1)"
"(inspector-superior?"
"(module-binding-extra-inspector b_1)"
"(namespace-inspector(module-instance-namespace mi_2)))"
" #f)))"
"(void)"
"(let-values()"
"(let-values(((complain-id_13)"
"(let-values(((c-id_14)"
"(let-values()(if or-part_15 or-part_15(module-binding-sym b_1)))))"
"(if(not"
"(eq?"
"(if(syntax?$1 c-id_14)(syntax-content c-id_14) c-id_14)"
"(syntax-content id_3)))"
" c-id_14"
" #f))))"
"(raise-syntax-error$1"
" #f"
"(format"
"                          \"access disallowed by code inspector to ~a ~a\\n  from module: ~a\""
" a_8"
" what_5"
"(1/module-path-index-resolve(namespace-mpi(module-instance-namespace mi_2))))"
" complain-id_13"
" id_3"
" null)))))"
"(void)))))"
"(void)))))"
"(define-values"
"(resolve+shift/extra-inspector)"
"(lambda(id_16 phase_17 ns_18)"
"((letrec-values(((loop_19)"
"(lambda(id_20 in-s_21)"
"(let-values(((b_22)"
"(let-values(((temp3_26) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f temp3_26 #t #f #f id1_24 phase2_25))))"
"(let-values(((c1_27)(binding-free=id b_22)))"
"(if c1_27"
"((lambda(next-id_28)"
"(let-values((()"
"(begin"
"(if(if(module-binding? b_22)"
"(not(top-level-module-path-index?(module-binding-module b_22)))"
" #f)"
"(let-values()"
"(let-values(((mi_30)"
"(binding->module-instance"
" b_22"
" ns_18"
" phase_17"
" id_20)))"
"                                                       (check-access b_22 mi_30 id_20 in-s_21 \"provided binding\")))"
"(void))"
"(values))))"
"(let-values(((next-b_29)"
"(loop_19 next-id_28(let-values()(if or-part_31 or-part_31 id_20)))))"
"(if(if(module-binding? next-b_29)"
"(if(not(module-binding-extra-inspector next-b_29))"
"(syntax-inspector id_20)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((temp5_34)(syntax-inspector id_20)))"
"(module-binding-update48.1"
" temp5_34"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" next-b4_33)))"
"(let-values() next-b_29)))))"
" c1_27)"
"(let-values() b_22)))))))"
" loop_19)"
" id_16"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(1/prop:set!-transformer 1/set!-transformer? set!-transformer-value)"
"(make-struct-type-property"
" 'set!-transformer"
"(lambda(v_1 info_2)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)"
"(if(procedure? v_1)"
"(let-values(((or-part_5)(procedure-arity-includes? v_1 1)))"
"(if or-part_5 or-part_5(procedure-arity-includes? v_1 2)))"
" #f)))"
"(if or-part_4 or-part_4(exact-nonnegative-integer? v_1)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:set!-transformer"
"(string-append"
"                           \"(or/c (procedure-arity-includes? proc 1)\\n\""
"                           \"      (procedure-arity-includes? proc 2)\\n\""
"                           \"      exact-nonnegative-integer?)\")"
" v_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_1)"
"(let-values()"
"(begin"
"(if(<= v_1(list-ref info_2 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_1"
"                                  \"initialized-field count\""
"(list-ref info_2 1))))"
"(if(member v_1(list-ref info_2 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_1)))))"
"(void))"
"(values))))"
"(let-values(((ref_3)(list-ref info_2 3)))"
"(if(integer? v_1)"
"(let-values()"
"(lambda(t_6)"
"(let-values(((p_7)(ref_3 t_6 v_1)))"
"(if(if(procedure? p_7)(procedure-arity-includes? p_7 1) #f)"
" p_7"
"                     (lambda (s_8) (error \"bad syntax:\" s_8))))))"
"(let-values()(lambda(t_9) v_1)))))))))"
"(define-values"
"(1/make-set!-transformer)"
"(let-values()"
"(let-values(((struct:set!-transformer_10 set!-transformer1_11 set!-transformer?_12 set!-transformer-proc_13)"
"(let-values(((struct:_15 make-_16 ?_17 -ref_18 -set!_19)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'set!-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:set!-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'set!-transformer)))))"
"(values struct:_15 make-_16 ?_17(make-struct-field-accessor -ref_18 0 'proc)))))"
"(lambda(proc_35)"
"(begin"
"(if(if(procedure? proc_35)(procedure-arity-includes? proc_35 1) #f)"
"(void)"
"            (let-values () (raise-argument-error 'make-set!-transformer \"(procedure-arity-includes/c 1)\" proc_35)))"
"(set!-transformer1_11 proc_35))))))"
"(define-values"
"(1/set!-transformer-procedure)"
"(lambda(t_36)"
"(let-values(((v_37)((set!-transformer-value t_36) t_36)))"
"(if(procedure-arity-includes? v_37 1) v_37(lambda(s_38)(v_37 t_36 s_38))))))"
"(void)"
"(void)"
"(define-values(empty-env) '#hasheq())"
"(define-values(env-extend)(lambda(env_6 key_7 val_8)(hash-set env_6 key_7 val_8)))"
"(define-values(variable)(gensym 'variable))"
"(define-values"
"(variable?)"
"(lambda(t_9)(let-values(((or-part_10)(eq? t_9 variable)))(if or-part_10 or-part_10(local-variable? t_9)))))"
"(define-values"
"(struct:local-variable local-variable1.1 local-variable? local-variable-id)"
"(let-values(((struct:_11 make-_12 ?_13 -ref_14 -set!_15)"
"(let-values()"
"(let-values()"
"(make-struct-type 'local-variable #f 1 0 #f null(current-inspector) #f '(0) #f 'local-variable)))))"
"(values struct:_11 make-_12 ?_13(make-struct-field-accessor -ref_14 0 'id))))"
"(define-values"
"(substitute-variable6.1)"
"(lambda(no-stops?2_37 id4_38 t5_39)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(if(if no-stops?_42(local-variable? t_41) #f)"
"(let-values(((bind-id_43)(local-variable-id t_41)))"
"(syntax-rearm$1"
"(datum->syntax$1(syntax-disarm$1 bind-id_43)(syntax-e$1 bind-id_43) id_40 id_40)"
" id_40))"
" id_40)))))))"
"(define-values(missing)(gensym 'missing))"
"(define-values"
"(transformer?)"
"(lambda(t_57)"
"(let-values(((or-part_58)(procedure? t_57)))"
"(if or-part_58"
" or-part_58"
"(let-values(((or-part_59)(1/set!-transformer? t_57)))"
"(if or-part_59 or-part_59(1/rename-transformer? t_57)))))))"
"(define-values"
"(transformer->procedure)"
"(lambda(t_60)"
"(if(1/set!-transformer? t_60)"
"(let-values()(1/set!-transformer-procedure t_60))"
"(if(1/rename-transformer? t_60)(let-values()(lambda(s_61) s_61))(let-values() t_60)))))"
"(define-values"
"(struct:core-form core-form9.1 core-form? core-form-expander core-form-name)"
"(let-values(((struct:_62 make-_63 ?_64 -ref_65 -set!_66)"
"(let-values()"
"(let-values()(make-struct-type 'core-form #f 2 0 #f null #f #f '(0 1) #f 'core-form)))))"
"(values"
" struct:_62"
" make-_63"
" ?_64"
"(make-struct-field-accessor -ref_65 0 'expander)"
"(make-struct-field-accessor -ref_65 1 'name))))"
"(define-values"
"(add-binding!17.1)"
"(lambda(in10_87 in12_88 just-for-nominal?11_89 just-for-nominal?13_90 id14_91 binding15_92 phase16_93)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((in-s_97)(if in12_88 in10_87 #f)))"
"(let-values(((just-for-nominal?_98)(if just-for-nominal?13_90 just-for-nominal?11_89 #f)))"
"(let-values()"
"(begin"
"(check-id-taint id_94 in-s_97)"
"(let-values(((temp53_100)(syntax-scope-set id_94 phase_96))((temp54_101)(syntax-e$1 id_94)))"
"(add-binding-in-scopes!16.1"
" just-for-nominal?56_103"
" #t"
" temp53_100"
" temp54_101"
" binding55_102)))))))))))"
"(define-values"
"(add-bulk-binding!25.1)"
"(lambda(in20_130 in21_131 s22_132 binding23_133 phase24_134)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((in-s_138)(if in21_131 in20_130 #f)))"
"(let-values()"
"(begin"
"(if(syntax-tainted?$1 s_135)"
"                  (let-values () (raise-syntax-error$1 #f \"cannot bind from tainted syntax\" in-s_138 s_135))"
"(void))"
"(add-bulk-binding-in-scopes!(syntax-scope-set s_135 phase_137) binding_136)))))))))"
"(define-values"
"(add-local-binding!35.1)"
"(lambda(frame-id28_159 frame-id30_160 in29_161 in31_162 id32_163 phase33_164 counter34_165)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((frame-id_169)(if frame-id30_160 frame-id28_159 #f)))"
"(let-values(((in-s_170)(if in31_162 in29_161 #f)))"
"(let-values()"
"(let-values((()(begin(check-id-taint id_166 in-s_170)(values))))"
"(let-values((()(begin(set-box! counter_168(add1(unbox counter_168)))(values))))"
"(let-values(((key_171)"
"                                  (string->uninterned-symbol (format \"~a_~a\" (syntax-e$1 id_166) (unbox counter_168)))))"
"(begin"
"(let-values(((temp57_172)(syntax-scope-set id_166 phase_167))"
"((temp58_173)(syntax-e$1 id_166))"
"((temp59_174)"
"(let-values()(make-local-binding7.1 frame-id61_177 #t #f #f key60_176))))"
"(add-binding-in-scopes!16.1 #f #f temp57_172 temp58_173 temp59_174))"
" key_171))))))))))))"
"(define-values"
"(check-id-taint)"
"(lambda(id_204 in-s_205)"
"(if(syntax-tainted?$1 id_204)"
"      (let-values () (raise-syntax-error$1 #f \"cannot bind tainted identifier\" in-s_205 id_204))"
"(void))))"
"(define-values"
"(binding-lookup48.1)"
"(lambda(in38_206"
" in40_207"
" out-of-context-as-variable?39_208"
" out-of-context-as-variable?41_209"
" b42_210"
" env43_211"
" lift-envs44_212"
" ns45_213"
" phase46_214"
" id47_215)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((in-s_222)(if in40_207 in38_206 #f)))"
"(let-values(((out-of-context-as-variable?_223)"
"(if out-of-context-as-variable?41_209 out-of-context-as-variable?39_208 #f)))"
"(let-values()"
"(if(module-binding? b_216)"
"(let-values()"
"(let-values(((top-level?_224)(top-level-module-path-index?(module-binding-module b_216))))"
"(let-values(((mi_225)"
"(if(not top-level?_224)"
"(binding->module-instance b_216 ns_219 phase_220 id_221)"
" #f)))"
"(let-values(((m_226)(if mi_225(module-instance-module mi_225) #f)))"
"(let-values(((primitive?_227)(if m_226(module-primitive? m_226) #f)))"
"(let-values(((m-ns_228)"
"(if top-level?_224"
" ns_219"
"(if mi_225(module-instance-namespace mi_225) #f))))"
"(let-values((()(begin(check-taint id_221)(values))))"
"(let-values(((t_229)"
"(namespace-get-transformer"
" m-ns_228"
"(module-binding-phase b_216)"
"(module-binding-sym b_216)"
" variable)))"
"(let-values((()"
"(begin"
"(if mi_225"
"(let-values()"
"(check-access"
" b_216"
" mi_225"
" id_221"
" in-s_222"
"                                                             (if t_229 \"transformer\" \"variable\")))"
"(void))"
"(values))))"
"(let-values(((insp_230)"
"(if mi_225"
"(if(module-instance-module mi_225)"
"(module-inspector(module-instance-module mi_225))"
" #f)"
" #f)))"
"(values t_229 primitive?_227 insp_230)))))))))))"
"(if(local-binding? b_216)"
"(let-values()"
"(let-values(((t_231)(hash-ref env_217(local-binding-key b_216) missing)))"
"(if(eq? t_231 missing)"
"(let-values()"
"(values"
"(let-values(((or-part_232)"
"(let-values()"
"(begin"
"(if(list? lst_233)(void)(let-values()(in-list lst_233)))"
"((letrec-values(((for-loop_234)"
"(lambda(result_235 lst_236)"
"(if(pair? lst_236)"
"(let-values(((lift-env_237)"
"(unsafe-car lst_236)))"
"(let-values(((result_238)"
"(let-values()"
"(let-values(((result_240)"
"(let-values()"
"(let-values()"
"(hash-ref"
"(unbox"
" lift-env_237)"
"(local-binding-key"
" b_216)"
" #f)))))"
"(values result_240)))))"
"(if(not"
"((lambda x_241 result_238)"
" lift-env_237))"
"(for-loop_234"
" result_238"
"(unsafe-cdr lst_236))"
" result_238)))"
" result_235))))"
" for-loop_234)"
" #f"
" lst_233)))))"
"(if or-part_232"
" or-part_232"
"(if out-of-context-as-variable?_223"
" variable"
"                                         (error \"identifier used out of context:\" id_221))))"
" #f"
" #f))"
"(let-values()(begin(check-taint id_221)(values t_231 #f #f))))))"
"                          (let-values () (error \"internal error: unknown binding for lookup:\" b_216)))))))))))))))"
"(define-values"
"(check-taint)"
"(lambda(id_277)"
"(if(syntax-tainted?$1 id_277)"
"      (let-values () (raise-syntax-error$1 #f \"cannot use identifier tainted by macro transformation\" id_277))"
"(void))))"
"(void)"
"(void)"
"(define-values"
"(free-id-set)"
"(lambda(phase_1 ids_2)"
"(let-values()"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(ht_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((id_7)(unsafe-car lst_6)))"
"(let-values(((ht_8)"
"(let-values()"
"(let-values(((ht_10)"
"(let-values()"
"(hash-update"
" ht_9"
"(identifier-binding-symbol$1 id_7 phase_1)"
"(lambda(l_11)(cons id_7 l_11))"
" null))))"
"(values ht_10)))))"
"(for-loop_4 ht_8(unsafe-cdr lst_6))))"
" ht_5))))"
" for-loop_4)"
" '#hasheq()"
" lst_3)))))"
"(define-values(empty-free-id-set)(free-id-set 0 null))"
"(define-values"
"(free-id-set-member?)"
"(lambda(fs_12 phase_13 given-id_14)"
"(if(zero?(hash-count fs_12))"
" #f"
"(let-values(((lst_15)(hash-ref fs_12(identifier-binding-symbol$1 given-id_14 phase_13) null)))"
"(begin"
"(if(list? lst_15)(void)(let-values()(in-list lst_15)))"
"((letrec-values(((for-loop_16)"
"(lambda(result_17 lst_18)"
"(if(pair? lst_18)"
"(let-values(((id_19)(unsafe-car lst_18)))"
"(let-values(((result_20)"
"(let-values()"
"(let-values(((result_22)"
"(let-values()"
"(let-values()"
"(free-identifier=?$1"
" id_19"
" given-id_14"
" phase_13"
" phase_13)))))"
"(values result_22)))))"
"(if(not((lambda x_23 result_20) id_19))"
"(for-loop_16 result_20(unsafe-cdr lst_18))"
" result_20)))"
" result_17))))"
" for-loop_16)"
" #f"
" lst_15))))))"
"(define-values"
"(free-id-set-empty-or-just-module*?)"
"(lambda(fs_24)(let-values(((c_25)(hash-count fs_24)))(<= c_25 1))))"
"(void)"
"(void)"
"(define-values"
"(struct:expand-context"
" expand-context1.1"
" expand-context?"
" expand-context-to-parsed?"
" expand-context-context"
" expand-context-phase"
" expand-context-namespace"
" expand-context-env"
" expand-context-user-env"
" expand-context-post-expansion-scope-action"
" expand-context-scopes"
" expand-context-def-ctx-scopes"
" expand-context-binding-layer"
" expand-context-reference-records"
" expand-context-only-immediate?"
" expand-context-just-once?"
" expand-context-module-begin-k"
" expand-context-need-eventually-defined"
" expand-context-allow-unbound?"
" expand-context-in-local-expand?"
" expand-context-stops"
" expand-context-current-introduction-scopes"
" expand-context-declared-submodule-names"
" expand-context-lifts"
" expand-context-lift-envs"
" expand-context-module-lifts"
" expand-context-require-lifts"
" expand-context-to-module-lifts"
" expand-context-requires+provides"
" expand-context-name"
" expand-context-observer)"
"(let-values(((struct:_6 make-_7 ?_8 -ref_9 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expand-context"
" struct:root-expand-context"
" 28"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27)"
" #f"
" 'expand-context)))))"
"(values"
" struct:_6"
" make-_7"
" ?_8"
"(make-struct-field-accessor -ref_9 0 'to-parsed?)"
"(make-struct-field-accessor -ref_9 1 'context)"
"(make-struct-field-accessor -ref_9 2 'phase)"
"(make-struct-field-accessor -ref_9 3 'namespace)"
"(make-struct-field-accessor -ref_9 4 'env)"
"(make-struct-field-accessor -ref_9 5 'user-env)"
"(make-struct-field-accessor -ref_9 6 'post-expansion-scope-action)"
"(make-struct-field-accessor -ref_9 7 'scopes)"
"(make-struct-field-accessor -ref_9 8 'def-ctx-scopes)"
"(make-struct-field-accessor -ref_9 9 'binding-layer)"
"(make-struct-field-accessor -ref_9 10 'reference-records)"
"(make-struct-field-accessor -ref_9 11 'only-immediate?)"
"(make-struct-field-accessor -ref_9 12 'just-once?)"
"(make-struct-field-accessor -ref_9 13 'module-begin-k)"
"(make-struct-field-accessor -ref_9 14 'need-eventually-defined)"
"(make-struct-field-accessor -ref_9 15 'allow-unbound?)"
"(make-struct-field-accessor -ref_9 16 'in-local-expand?)"
"(make-struct-field-accessor -ref_9 17 'stops)"
"(make-struct-field-accessor -ref_9 18 'current-introduction-scopes)"
"(make-struct-field-accessor -ref_9 19 'declared-submodule-names)"
"(make-struct-field-accessor -ref_9 20 'lifts)"
"(make-struct-field-accessor -ref_9 21 'lift-envs)"
"(make-struct-field-accessor -ref_9 22 'module-lifts)"
"(make-struct-field-accessor -ref_9 23 'require-lifts)"
"(make-struct-field-accessor -ref_9 24 'to-module-lifts)"
"(make-struct-field-accessor -ref_9 25 'requires+provides)"
"(make-struct-field-accessor -ref_9 26 'name)"
"(make-struct-field-accessor -ref_9 27 'observer))))"
"(define-values"
"(make-expand-context5.1)"
"(lambda(to-parsed?2_161 to-parsed?3_162 ns4_163)"
"(let-values()"
"(let-values(((to-parsed?_165)(if to-parsed?3_162 to-parsed?2_161 #f)))"
"(let-values()"
"(let-values(((root-ctx_166)(namespace-get-root-expand-ctx ns_164)))"
"(expand-context1.1"
"(root-expand-context-module-scopes root-ctx_166)"
"(root-expand-context-post-expansion-scope root-ctx_166)"
"(root-expand-context-top-level-bind-scope root-ctx_166)"
"(root-expand-context-all-scopes-stx root-ctx_166)"
"(root-expand-context-use-site-scopes root-ctx_166)"
"(root-expand-context-defined-syms root-ctx_166)"
"(root-expand-context-frame-id root-ctx_166)"
"(root-expand-context-counter root-ctx_166)"
"(root-expand-context-lift-key root-ctx_166)"
" to-parsed?_165"
" 'top-level"
"(namespace-phase ns_164)"
" ns_164"
" empty-env"
" '#hasheq()"
" push-scope"
" null"
" #f"
"(root-expand-context-frame-id root-ctx_166)"
" null"
" #f"
" #f"
" #f"
" #f"
" #t"
" #f"
" empty-free-id-set"
" null"
" '#hasheq()"
" #f"
" '()"
" #f"
" #f"
" #f"
" #f"
" #f"
"(current-expand-observe))))))))"
"(define-values"
"(copy-root-expand-context)"
"(lambda(ctx_181 root-ctx_182)"
"(let-values()"
"(if(expand-context? the-struct_183)"
"(let-values(((module-scopes22_184)(root-expand-context-module-scopes root-ctx_182))"
"((post-expansion-scope23_185)(root-expand-context-post-expansion-scope root-ctx_182))"
"((top-level-bind-scope24_186)(root-expand-context-top-level-bind-scope root-ctx_182))"
"((all-scopes-stx25_187)(root-expand-context-all-scopes-stx root-ctx_182))"
"((use-site-scopes26_188)(root-expand-context-use-site-scopes root-ctx_182))"
"((defined-syms27_189)(root-expand-context-defined-syms root-ctx_182))"
"((frame-id28_190)(root-expand-context-frame-id root-ctx_182))"
"((counter29_191)(root-expand-context-counter root-ctx_182))"
"((lift-key30_192)(root-expand-context-lift-key root-ctx_182))"
"((binding-layer31_193)(root-expand-context-frame-id root-ctx_182)))"
"(expand-context1.1"
" module-scopes22_184"
" post-expansion-scope23_185"
" top-level-bind-scope24_186"
" all-scopes-stx25_187"
" use-site-scopes26_188"
" defined-syms27_189"
" frame-id28_190"
" counter29_191"
" lift-key30_192"
"(expand-context-to-parsed? the-struct_183)"
"(expand-context-context the-struct_183)"
"(expand-context-phase the-struct_183)"
"(expand-context-namespace the-struct_183)"
"(expand-context-env the-struct_183)"
"(expand-context-user-env the-struct_183)"
"(expand-context-post-expansion-scope-action the-struct_183)"
"(expand-context-scopes the-struct_183)"
"(expand-context-def-ctx-scopes the-struct_183)"
" binding-layer31_193"
"(expand-context-reference-records the-struct_183)"
"(expand-context-only-immediate? the-struct_183)"
"(expand-context-just-once? the-struct_183)"
"(expand-context-module-begin-k the-struct_183)"
"(expand-context-need-eventually-defined the-struct_183)"
"(expand-context-allow-unbound? the-struct_183)"
"(expand-context-in-local-expand? the-struct_183)"
"(expand-context-stops the-struct_183)"
"(expand-context-current-introduction-scopes the-struct_183)"
"(expand-context-declared-submodule-names the-struct_183)"
"(expand-context-lifts the-struct_183)"
"(expand-context-lift-envs the-struct_183)"
"(expand-context-module-lifts the-struct_183)"
"(expand-context-require-lifts the-struct_183)"
"(expand-context-to-module-lifts the-struct_183)"
"(expand-context-requires+provides the-struct_183)"
"(expand-context-name the-struct_183)"
"(expand-context-observer the-struct_183)))"
"        (raise-argument-error 'struct-copy \"expand-context?\" the-struct_183)))))"
"(define-values(current-expand-context)(make-parameter #f))"
"(define-values"
"(get-current-expand-context12.1)"
"(lambda(fail-ok?8_194 fail-ok?9_195 who10_196 who11_197)"
"(let-values(((who_198)(if who11_197 who10_196 'unexpected)))"
"(let-values(((fail-ok?_199)(if fail-ok?9_195 fail-ok?8_194 #f)))"
"(let-values()"
"(let-values(((or-part_200)(force(current-expand-context))))"
"(if or-part_200"
" or-part_200"
"              (if fail-ok?_199 #f (raise-arguments-error who_198 \"not currently expanding\")))))))))"
"(define-values"
"(current-expand-observe)"
"(make-parameter"
" #f"
"(lambda(v_218)"
"(begin"
"(if(let-values(((or-part_219)(not v_218)))"
"(if or-part_219 or-part_219(if(procedure? v_218)(procedure-arity-includes? v_218 2) #f)))"
"(void)"
"(let-values()"
"           (raise-argument-error 'current-expand-observe \"(or/c (procedure-arity-includes/c 2) #f)\" v_218)))"
" v_218))))"
"(define-values"
"(as-expression-context)"
"(lambda(ctx_220)"
"(if(if(eq? 'expression(expand-context-context ctx_220))(not(expand-context-name ctx_220)) #f)"
"(let-values() ctx_220)"
"(let-values()"
"(let-values()"
"(if(expand-context? the-struct_221)"
"(let-values(((context32_222) 'expression)((name33_223) #f)((post-expansion-scope34_224) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_221)"
" post-expansion-scope34_224"
"(root-expand-context-top-level-bind-scope the-struct_221)"
"(root-expand-context-all-scopes-stx the-struct_221)"
"(root-expand-context-use-site-scopes the-struct_221)"
"(root-expand-context-defined-syms the-struct_221)"
"(root-expand-context-frame-id the-struct_221)"
"(root-expand-context-counter the-struct_221)"
"(root-expand-context-lift-key the-struct_221)"
"(expand-context-to-parsed? the-struct_221)"
" context32_222"
"(expand-context-phase the-struct_221)"
"(expand-context-namespace the-struct_221)"
"(expand-context-env the-struct_221)"
"(expand-context-user-env the-struct_221)"
"(expand-context-post-expansion-scope-action the-struct_221)"
"(expand-context-scopes the-struct_221)"
"(expand-context-def-ctx-scopes the-struct_221)"
"(expand-context-binding-layer the-struct_221)"
"(expand-context-reference-records the-struct_221)"
"(expand-context-only-immediate? the-struct_221)"
"(expand-context-just-once? the-struct_221)"
"(expand-context-module-begin-k the-struct_221)"
"(expand-context-need-eventually-defined the-struct_221)"
"(expand-context-allow-unbound? the-struct_221)"
"(expand-context-in-local-expand? the-struct_221)"
"(expand-context-stops the-struct_221)"
"(expand-context-current-introduction-scopes the-struct_221)"
"(expand-context-declared-submodule-names the-struct_221)"
"(expand-context-lifts the-struct_221)"
"(expand-context-lift-envs the-struct_221)"
"(expand-context-module-lifts the-struct_221)"
"(expand-context-require-lifts the-struct_221)"
"(expand-context-to-module-lifts the-struct_221)"
"(expand-context-requires+provides the-struct_221)"
" name33_223"
"(expand-context-observer the-struct_221)))"
"            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_221)))))))"
"(define-values"
"(as-begin-expression-context)"
"(lambda(ctx_225)"
"(if(not(expand-context-name ctx_225))"
"(let-values() ctx_225)"
"(let-values()"
"(let-values()"
"(if(expand-context? the-struct_226)"
"(let-values(((name35_227) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_226)"
"(root-expand-context-post-expansion-scope the-struct_226)"
"(root-expand-context-top-level-bind-scope the-struct_226)"
"(root-expand-context-all-scopes-stx the-struct_226)"
"(root-expand-context-use-site-scopes the-struct_226)"
"(root-expand-context-defined-syms the-struct_226)"
"(root-expand-context-frame-id the-struct_226)"
"(root-expand-context-counter the-struct_226)"
"(root-expand-context-lift-key the-struct_226)"
"(expand-context-to-parsed? the-struct_226)"
"(expand-context-context the-struct_226)"
"(expand-context-phase the-struct_226)"
"(expand-context-namespace the-struct_226)"
"(expand-context-env the-struct_226)"
"(expand-context-user-env the-struct_226)"
"(expand-context-post-expansion-scope-action the-struct_226)"
"(expand-context-scopes the-struct_226)"
"(expand-context-def-ctx-scopes the-struct_226)"
"(expand-context-binding-layer the-struct_226)"
"(expand-context-reference-records the-struct_226)"
"(expand-context-only-immediate? the-struct_226)"
"(expand-context-just-once? the-struct_226)"
"(expand-context-module-begin-k the-struct_226)"
"(expand-context-need-eventually-defined the-struct_226)"
"(expand-context-allow-unbound? the-struct_226)"
"(expand-context-in-local-expand? the-struct_226)"
"(expand-context-stops the-struct_226)"
"(expand-context-current-introduction-scopes the-struct_226)"
"(expand-context-declared-submodule-names the-struct_226)"
"(expand-context-lifts the-struct_226)"
"(expand-context-lift-envs the-struct_226)"
"(expand-context-module-lifts the-struct_226)"
"(expand-context-require-lifts the-struct_226)"
"(expand-context-to-module-lifts the-struct_226)"
"(expand-context-requires+provides the-struct_226)"
" name35_227"
"(expand-context-observer the-struct_226)))"
"            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_226)))))))"
"(define-values"
"(as-tail-context18.1)"
"(lambda(wrt15_232 ctx17_233)"
"(let-values()"
"(let-values()"
"(let-values()"
"(if(expand-context-name wrt-ctx_235)"
"(let-values()"
"(let-values()"
"(if(expand-context? the-struct_236)"
"(let-values(((name36_237)(expand-context-name wrt-ctx_235)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_236)"
"(root-expand-context-post-expansion-scope the-struct_236)"
"(root-expand-context-top-level-bind-scope the-struct_236)"
"(root-expand-context-all-scopes-stx the-struct_236)"
"(root-expand-context-use-site-scopes the-struct_236)"
"(root-expand-context-defined-syms the-struct_236)"
"(root-expand-context-frame-id the-struct_236)"
"(root-expand-context-counter the-struct_236)"
"(root-expand-context-lift-key the-struct_236)"
"(expand-context-to-parsed? the-struct_236)"
"(expand-context-context the-struct_236)"
"(expand-context-phase the-struct_236)"
"(expand-context-namespace the-struct_236)"
"(expand-context-env the-struct_236)"
"(expand-context-user-env the-struct_236)"
"(expand-context-post-expansion-scope-action the-struct_236)"
"(expand-context-scopes the-struct_236)"
"(expand-context-def-ctx-scopes the-struct_236)"
"(expand-context-binding-layer the-struct_236)"
"(expand-context-reference-records the-struct_236)"
"(expand-context-only-immediate? the-struct_236)"
"(expand-context-just-once? the-struct_236)"
"(expand-context-module-begin-k the-struct_236)"
"(expand-context-need-eventually-defined the-struct_236)"
"(expand-context-allow-unbound? the-struct_236)"
"(expand-context-in-local-expand? the-struct_236)"
"(expand-context-stops the-struct_236)"
"(expand-context-current-introduction-scopes the-struct_236)"
"(expand-context-declared-submodule-names the-struct_236)"
"(expand-context-lifts the-struct_236)"
"(expand-context-lift-envs the-struct_236)"
"(expand-context-module-lifts the-struct_236)"
"(expand-context-require-lifts the-struct_236)"
"(expand-context-to-module-lifts the-struct_236)"
"(expand-context-requires+provides the-struct_236)"
" name36_237"
"(expand-context-observer the-struct_236)))"
"                  (raise-argument-error 'struct-copy \"expand-context?\" the-struct_236))))"
"(let-values() ctx_234)))))))"
"(define-values"
"(as-named-context)"
"(lambda(ctx_248 ids_249)"
"(if(if(pair? ids_249)(null?(cdr ids_249)) #f)"
"(let-values()"
"(let-values()"
"(if(expand-context? the-struct_250)"
"(let-values(((name37_251)(car ids_249)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_250)"
"(root-expand-context-post-expansion-scope the-struct_250)"
"(root-expand-context-top-level-bind-scope the-struct_250)"
"(root-expand-context-all-scopes-stx the-struct_250)"
"(root-expand-context-use-site-scopes the-struct_250)"
"(root-expand-context-defined-syms the-struct_250)"
"(root-expand-context-frame-id the-struct_250)"
"(root-expand-context-counter the-struct_250)"
"(root-expand-context-lift-key the-struct_250)"
"(expand-context-to-parsed? the-struct_250)"
"(expand-context-context the-struct_250)"
"(expand-context-phase the-struct_250)"
"(expand-context-namespace the-struct_250)"
"(expand-context-env the-struct_250)"
"(expand-context-user-env the-struct_250)"
"(expand-context-post-expansion-scope-action the-struct_250)"
"(expand-context-scopes the-struct_250)"
"(expand-context-def-ctx-scopes the-struct_250)"
"(expand-context-binding-layer the-struct_250)"
"(expand-context-reference-records the-struct_250)"
"(expand-context-only-immediate? the-struct_250)"
"(expand-context-just-once? the-struct_250)"
"(expand-context-module-begin-k the-struct_250)"
"(expand-context-need-eventually-defined the-struct_250)"
"(expand-context-allow-unbound? the-struct_250)"
"(expand-context-in-local-expand? the-struct_250)"
"(expand-context-stops the-struct_250)"
"(expand-context-current-introduction-scopes the-struct_250)"
"(expand-context-declared-submodule-names the-struct_250)"
"(expand-context-lifts the-struct_250)"
"(expand-context-lift-envs the-struct_250)"
"(expand-context-module-lifts the-struct_250)"
"(expand-context-require-lifts the-struct_250)"
"(expand-context-to-module-lifts the-struct_250)"
"(expand-context-requires+provides the-struct_250)"
" name37_251"
"(expand-context-observer the-struct_250)))"
"            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_250))))"
"(let-values() ctx_248))))"
"(define-values"
"(as-to-parsed-context)"
"(lambda(ctx_252)"
"(let-values()"
"(if(expand-context? the-struct_253)"
"(let-values(((to-parsed?38_254) #t))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_253)"
"(root-expand-context-post-expansion-scope the-struct_253)"
"(root-expand-context-top-level-bind-scope the-struct_253)"
"(root-expand-context-all-scopes-stx the-struct_253)"
"(root-expand-context-use-site-scopes the-struct_253)"
"(root-expand-context-defined-syms the-struct_253)"
"(root-expand-context-frame-id the-struct_253)"
"(root-expand-context-counter the-struct_253)"
"(root-expand-context-lift-key the-struct_253)"
" to-parsed?38_254"
"(expand-context-context the-struct_253)"
"(expand-context-phase the-struct_253)"
"(expand-context-namespace the-struct_253)"
"(expand-context-env the-struct_253)"
"(expand-context-user-env the-struct_253)"
"(expand-context-post-expansion-scope-action the-struct_253)"
"(expand-context-scopes the-struct_253)"
"(expand-context-def-ctx-scopes the-struct_253)"
"(expand-context-binding-layer the-struct_253)"
"(expand-context-reference-records the-struct_253)"
"(expand-context-only-immediate? the-struct_253)"
"(expand-context-just-once? the-struct_253)"
"(expand-context-module-begin-k the-struct_253)"
"(expand-context-need-eventually-defined the-struct_253)"
"(expand-context-allow-unbound? the-struct_253)"
"(expand-context-in-local-expand? the-struct_253)"
"(expand-context-stops the-struct_253)"
"(expand-context-current-introduction-scopes the-struct_253)"
"(expand-context-declared-submodule-names the-struct_253)"
"(expand-context-lifts the-struct_253)"
"(expand-context-lift-envs the-struct_253)"
"(expand-context-module-lifts the-struct_253)"
"(expand-context-require-lifts the-struct_253)"
"(expand-context-to-module-lifts the-struct_253)"
"(expand-context-requires+provides the-struct_253)"
"(expand-context-name the-struct_253)"
"(expand-context-observer the-struct_253)))"
"        (raise-argument-error 'struct-copy \"expand-context?\" the-struct_253)))))"
"(void)"
"(void)"
"(define-values"
"(to-syntax-list.1)"
"(lambda(s_289)"
"(if(list? s_289)"
"(let-values() s_289)"
"(if(pair? s_289)"
"(let-values()(let-values(((r_290)(to-syntax-list.1(cdr s_289))))(if r_290(cons(car s_289) r_290) #f)))"
"(if(syntax?$1 s_289)(let-values()(to-syntax-list.1(syntax-e$1 s_289)))(let-values() #f))))))"
"(void)"
"(void)"
"(define-values(core-scope)(new-multi-scope))"
"(define-values(core-stx)(add-scope empty-syntax core-scope))"
"(define-values(core-module-name)(1/make-resolved-module-path '#%core))"
"(define-values(core-mpi)(1/module-path-index-join ''#%core #f))"
"(define-values(id-cache-0)(make-hasheq))"
"(define-values(id-cache-1)(make-hasheq))"
"(define-values"
"(core-id)"
"(lambda(sym_1 phase_2)"
"(if(eqv? phase_2 0)"
"(let-values()"
"(let-values(((or-part_3)(hash-ref id-cache-0 sym_1 #f)))"
"(if or-part_3"
" or-part_3"
"(let-values(((s_4)(datum->syntax$1 core-stx sym_1)))(begin(hash-set! id-cache-0 sym_1 s_4) s_4)))))"
"(if(eq? phase_2 1)"
"(let-values()"
"(let-values(((or-part_5)(hash-ref id-cache-1 sym_1 #f)))"
"(if or-part_5"
" or-part_5"
"(let-values(((s_6)(datum->syntax$1(syntax-shift-phase-level$1 core-stx 1) sym_1)))"
"(begin(hash-set! id-cache-1 sym_1 s_6) s_6)))))"
"(let-values()(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_2) sym_1))))))"
"(define-values(core-forms) '#hasheq())"
"(define-values(core-primitives) '#hasheq())"
"(define-values"
"(add-core-form!)"
"(lambda(sym_7 proc_8)(begin(add-core-binding! sym_7)(set! core-forms(hash-set core-forms sym_7 proc_8)))))"
"(define-values"
"(add-core-primitive!)"
"(lambda(sym_9 val_10)"
"(begin(add-core-binding! sym_9)(set! core-primitives(hash-set core-primitives sym_9 val_10)))))"
"(define-values"
"(add-core-binding!)"
"(lambda(sym_11)"
"(let-values(((temp1_12)(datum->syntax$1 core-stx sym_11))"
"((temp2_13)"
"(let-values(((temp5_16) 0))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" core-mpi4_15"
" temp5_16"
" sym6_17)))"
"((temp3_14) 0))"
"(add-binding!17.1 #f #f #f #f temp1_12 temp2_13 temp3_14))))"
"(define-values"
"(declare-core-module!)"
"(lambda(ns_18)"
"(let-values(((temp8_20)"
"(let-values(((temp10_23) #t)"
"((temp11_24) #t)"
"((temp12_25) #t)"
"((temp14_27)"
"(hasheqv"
" 0"
"(let-values(((lst_30)(list core-primitives core-forms))((lst_31) '(#f #t)))"
"(begin"
"(if(list? lst_30)(void)(let-values()(in-list lst_30)))"
"(if(list? lst_31)(void)(let-values()(in-list lst_31)))"
"((letrec-values(((for-loop_32)"
"(lambda(table_33 lst_34 lst_35)"
"(if(if(pair? lst_34)(pair? lst_35) #f)"
"(let-values(((syms_36)(unsafe-car lst_34))"
"((syntax?_37)(unsafe-car lst_35)))"
"(let-values(((table_38)"
"(let-values()"
"(let-values()"
"(begin"
"(if((lambda(ht_41)(hash? ht_41))"
" ht_40)"
"(void)"
"(let-values()"
"(default-in-hash-keys ht_40)))"
"((letrec-values(((for-loop_42)"
"(lambda(table_43"
" i_44)"
"(if i_44"
"(let-values(((sym_45)"
"(hash-iterate-key"
" ht_40"
" i_44)))"
"(let-values(((table_46)"
"(let-values()"
"(let-values(((table_48)"
"(let-values()"
"(let-values(((key_49"
" val_50)"
"(let-values()"
"(let-values(((b_51)"
"(let-values(((temp18_53)"
" 0))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" core-mpi17_52"
" temp18_53"
" sym19_54))))"
"(values"
" sym_45"
"(if syntax?_37"
"(provided1.1"
" b_51"
" #f"
" #t)"
" b_51))))))"
"(hash-set"
" table_47"
" key_49"
" val_50)))))"
"(values"
" table_48)))))"
"(for-loop_42"
" table_46"
"(hash-iterate-next"
" ht_40"
" i_44))))"
" table_43))))"
" for-loop_42)"
" table_39"
"(hash-iterate-first ht_40)))))))"
"(for-loop_32"
" table_38"
"(unsafe-cdr lst_34)"
"(unsafe-cdr lst_35))))"
" table_33))))"
" for-loop_32)"
" '#hasheq()"
" lst_30"
" lst_31)))))"
"((temp15_28)"
"(lambda(phase-level_55 ns_56)"
"(if(zero? phase-level_55)"
"(let-values(((ns_57)"
"(let-values(((temp22_60) 0))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns20_58"
" core-module-name21_59"
" temp22_60))))"
"(if ns_57(module-linklet-info2.1(namespace->instance ns_57 0) #f core-mpi) #f))"
" #f)))"
"((temp16_29)"
"(lambda(data-box_61"
" ns_62"
" phase_63"
" phase-level_64"
" self_65"
" bulk-binding-registry_66"
" insp_67)"
"(let-values()"
"(if(equal? tmp_68 0)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if((lambda(ht_70)(hash? ht_70)) ht_69)"
"(void)"
"(let-values()(default-in-hash ht_69)))"
"((letrec-values(((for-loop_71)"
"(lambda(fold-var_72 i_73)"
"(if i_73"
"(let-values(((sym_74 val_75)"
"(hash-iterate-key+value ht_69 i_73)))"
"(let-values(((fold-var_76)"
"(let-values()"
"(let-values(((fold-var_78)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-consistent!"
" ns_62"
" 0"
" sym_74"
" val_75))"
"(void)))))"
"(values fold-var_78)))))"
"(for-loop_71"
" fold-var_76"
"(hash-iterate-next ht_69 i_73))))"
" fold-var_72))))"
" for-loop_71)"
"(void)"
"(hash-iterate-first ht_69))))"
"(let-values()"
"(begin"
"(if((lambda(ht_80)(hash? ht_80)) ht_79)"
"(void)"
"(let-values()(default-in-hash ht_79)))"
"((letrec-values(((for-loop_81)"
"(lambda(fold-var_82 i_83)"
"(if i_83"
"(let-values(((sym_84 proc_85)"
"(hash-iterate-key+value ht_79 i_83)))"
"(let-values(((fold-var_86)"
"(let-values()"
"(let-values(((fold-var_88)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-transformer!"
" ns_62"
" 0"
" sym_84"
"(core-form9.1"
" proc_85"
" sym_84)))"
"(void)))))"
"(values fold-var_88)))))"
"(for-loop_81"
" fold-var_86"
"(hash-iterate-next ht_79 i_83))))"
" fold-var_82))))"
" for-loop_81)"
"(void)"
"(hash-iterate-first ht_79))))))"
"(let-values()(void)))))))"
"(make-module37.1"
" temp10_23"
" #t"
" #f"
" #f"
" temp16_29"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp11_24"
" #t"
" temp15_28"
" #t"
" temp12_25"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp14_27"
" #f"
" #f"
" core-mpi13_26"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f))))"
"(declare-module!56.1 #f #f ns7_19 temp8_20 core-module-name9_21))))"
"(define-values"
"(core-form-sym)"
"(lambda(s_89 phase_90)"
"(let-values(((ok?_91 id23_92 _24_93)"
"(let-values()"
"(if(let-values(((s_105)(if(syntax?$1 s_104)(syntax-e$1 s_104) s_104)))"
"(if(pair? s_105)"
"(if(let-values(((s_106)(car s_105)))"
"(if(syntax?$1 s_106)(symbol?(syntax-e$1 s_106)) #f))"
"(let-values(((s_107)(cdr s_105))) #t)"
" #f)"
" #f))"
"(let-values()"
"(let-values(((id23_109 _24_110)"
"(let-values(((s_111)(if(syntax?$1 s_104)(syntax-e$1 s_104) s_104)))"
"(let-values(((id25_112)(let-values(((s_114)(car s_111))) s_114))"
"((_26_113)(let-values(((s_115)(cdr s_111))) s_115)))"
"(values id25_112 _26_113)))))"
"(values #t id23_109 _24_110)))"
"(values #f #f #f)))))"
"(if ok?_91"
"(let-values(((b_116)(let-values()(resolve+shift30.1 #f #f #f #f #f #f #f #f #f #f temp27_117 phase28_118))))"
"(if(module-binding? b_116)"
"(if(eq? core-module-name(1/module-path-index-resolve(module-binding-module b_116)))"
"(module-binding-sym b_116)"
" #f)"
" #f))"
" #f))))"
"(void)"
"(void)"
"(define-values"
"(taint-dispatch)"
"(lambda(s_1 proc_2 phase_3)"
"((letrec-values(((loop_4)"
"(lambda(s_5 mode_6)"
"(let-values()"
"(if(equal? tmp_7 'none)"
"(let-values() s_5)"
"(if(equal? tmp_7 'opaque)"
"(let-values()(proc_2 s_5))"
"(if(equal? tmp_7 'transparent)"
"(let-values()"
"(let-values(((c_8)"
"(let-values(((s_9)"
"(let-values(((or-part_13)(syntax->list$1 s_5)))"
"(if or-part_13 or-part_13(syntax-e$1 s_5))))"
"((f_10)(lambda(tail?_14 d_15) d_15))"
"((s->_11)"
"(lambda(s_16)"
"(loop_4 s_16(syntax-taint-mode-property s_16))))"
"((seen_12) #f))"
"(let-values(((f_18)"
"(lambda(tail?_20 v_21)"
"(if(syntax?$1 v_21)"
"(let-values()(s->_11 v_21))"
"(let-values()(f_10 tail?_20 v_21))))))"
"((letrec-values(((loop_22)"
"(lambda(tail?_23 s_24 prev-depth_25)"
"(let-values(((depth_26)(add1 prev-depth_25)))"
"(if(if seen_19(> depth_26 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_23"
" s_24"
"(lambda(tail?_27 s_28)"
"(f_18 tail?_27 s_28))"
" seen_19))"
"(if(null? s_24)"
"(let-values()(f_18 tail?_23 s_24))"
"(if(pair? s_24)"
"(let-values()"
"(f_18"
" tail?_23"
"(cons"
"(loop_22 #f(car s_24) depth_26)"
"(loop_22 #t(cdr s_24) depth_26))))"
"(if(let-values(((or-part_29)"
"(symbol? s_24)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)"
"(boolean? s_24)))"
"(if or-part_30"
" or-part_30"
"(number? s_24)))))"
"(let-values()(f_18 #f s_24))"
"(if(let-values(((or-part_31)"
"(vector? s_24)))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32)"
"(box? s_24)))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_33)"
"(prefab-struct-key"
" s_24)))"
"(if or-part_33"
" or-part_33"
"(hash? s_24)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_23"
" s_24"
"(lambda(tail?_34 s_35)"
"(f_18 tail?_34 s_35))"
" seen_19))"
"(let-values()"
"(f_18 #f s_24)))))))))))"
" loop_22)"
" #f"
" s_17"
" 0)))))"
"(datum->syntax$1"
" #f"
" c_8"
" s_5"
"(if(syntax-any-macro-scopes? s_5)"
"(syntax-property-remove s_5 original-property-sym)"
" s_5))))"
"(if(equal? tmp_7 'transparent-binding)"
"(let-values()"
"(let-values(((c_36)(syntax-e$1 s_5)))"
"(if(pair? c_36)"
"(let-values()"
"(let-values(((cd_37)(cdr c_36)))"
"(if(let-values(((or-part_38)(pair? cd_37)))"
"(if or-part_38"
" or-part_38"
"(if(syntax?$1 cd_37)(pair?(syntax-e$1 cd_37)) #f)))"
"(let-values()"
"(let-values(((d_39)(if(syntax?$1 cd_37)(syntax-e$1 cd_37) cd_37)))"
"(datum->syntax$1"
" s_5"
"(cons"
"(loop_4(car c_36)(syntax-taint-mode-property(car c_36)))"
"(cons"
"(loop_4(car d_39) 'transparent)"
"(let-values(((s_40)"
"(let-values(((or-part_44)"
"(syntax->list$1(cdr d_39))))"
"(if or-part_44 or-part_44(cdr d_39))))"
"((f_41)(lambda(tail?_45 d_46) d_46))"
"((s->_42)"
"(lambda(s_47)"
"(loop_4 s_47(syntax-taint-mode-property s_47))))"
"((seen_43) #f))"
"(let-values(((f_49)"
"(lambda(tail?_51 v_52)"
"(if(syntax?$1 v_52)"
"(let-values()(s->_42 v_52))"
"(let-values()(f_41 tail?_51 v_52))))))"
"((letrec-values(((loop_53)"
"(lambda(tail?_54 s_55 prev-depth_56)"
"(let-values(((depth_57)"
"(add1 prev-depth_56)))"
"(if(if seen_50(> depth_57 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_54"
" s_55"
"(lambda(tail?_58 s_59)"
"(f_49 tail?_58 s_59))"
" seen_50))"
"(if(null? s_55)"
"(let-values()(f_49 tail?_54 s_55))"
"(if(pair? s_55)"
"(let-values()"
"(f_49"
" tail?_54"
"(cons"
"(loop_53"
" #f"
"(car s_55)"
" depth_57)"
"(loop_53"
" #t"
"(cdr s_55)"
" depth_57))))"
"(if(let-values(((or-part_60)"
"(symbol? s_55)))"
"(if or-part_60"
" or-part_60"
"(let-values(((or-part_61)"
"(boolean?"
" s_55)))"
"(if or-part_61"
" or-part_61"
"(number? s_55)))))"
"(let-values()(f_49 #f s_55))"
"(if(let-values(((or-part_62)"
"(vector?"
" s_55)))"
"(if or-part_62"
" or-part_62"
"(let-values(((or-part_63)"
"(box?"
" s_55)))"
"(if or-part_63"
" or-part_63"
"(let-values(((or-part_64)"
"(prefab-struct-key"
" s_55)))"
"(if or-part_64"
" or-part_64"
"(hash?"
" s_55)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_54"
" s_55"
"(lambda(tail?_65 s_66)"
"(f_49 tail?_65 s_66))"
" seen_50))"
"(let-values()"
"(f_49 #f s_55)))))))))))"
" loop_53)"
" #f"
" s_48"
" 0)))))"
" s_5"
" s_5)))"
"(let-values()(loop_4 s_5 'transparent)))))"
"(let-values()(loop_4 s_5 'transparent)))))"
"(let-values()"
"(let-values(((c_67)(syntax-e$1 s_5)))"
"(let-values(((tmp_68)(core-form-sym c_67 phase_3)))"
"(if(if(equal? tmp_68 'begin)"
" #t"
"(if(equal? tmp_68 'begin-for-syntax) #t(equal? tmp_68 '#%module-begin)))"
"(let-values()(loop_4 s_5 'transparent))"
"(if(if(equal? tmp_68 'define-values) #t(equal? tmp_68 'define-syntaxes))"
"(let-values()(loop_4 s_5 'transparent-binding))"
"(let-values()(loop_4 s_5 'opaque)))))))))))))))"
" loop_4)"
" s_1"
"(syntax-taint-mode-property s_1))))"
"(define-values"
"(syntax-taint-mode-property)"
"(lambda(s_69)"
"(let-values(((or-part_70)(syntax-property$1 s_69 'taint-mode)))"
"(if or-part_70 or-part_70(syntax-property$1 s_69 'certify-mode)))))"
"(define-values"
"(syntax-remove-taint-dispatch-properties)"
"(lambda(s_71)(syntax-property-remove(syntax-property-remove s_71 'taint-mode) 'certify-mode)))"
"(void)"
"(void)"
"(define-values(current-module-code-inspector)(make-parameter #f))"
"(void)"
"(void)"
"(define-values"
"(syntax-debug-info$1)"
"(lambda(s_1 phase_2 all-bindings?_3)"
"(let-values(((hts_4)"
"(alt-reverse"
"(let-values(((lst_6)(fallback->list(syntax-shifted-multi-scopes s_1))))"
"(begin"
"(if(list? lst_6)(void)(let-values()(in-list lst_6)))"
"((letrec-values(((for-loop_7)"
"(lambda(fold-var_8 lst_9)"
"(if(pair? lst_9)"
"(let-values(((smss_10)(unsafe-car lst_9)))"
"(let-values(((fold-var_11)"
"(let-values()"
"(let-values(((fold-var_13)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((init-ht_14)"
"(if(identifier? s_1)"
"(hasheq"
" 'name"
"(syntax-e$1 s_1))"
" '#hasheq())))"
"(let-values(((s-scs_15)"
"(scope-set-at-fallback"
" s_1"
" smss_10"
" phase_2)))"
"(let-values(((context_16)"
"(scope-set->context"
" s-scs_15)))"
"(let-values(((context-ht_17)"
"(hash-set"
" init-ht_14"
" 'context"
" context_16)))"
"(let-values(((sym_18)"
"(syntax-e$1"
" s_1)))"
"(let-values(((bindings_19)"
"(if(identifier?"
" s_1)"
"(let-values()"
"(let-values(((bindings_20"
" covered-scopess_21)"
"(let-values()"
"(begin"
"(if((lambda(ht_23)"
"(if(hash?"
" ht_23)"
"(immutable?"
" ht_23)"
" #f))"
" ht_22)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_22)))"
"((letrec-values(((for-loop_24)"
"(lambda(bindings_25"
" covered-scope-sets_26"
" i_27)"
"(if i_27"
"(let-values(((sc_28)"
"(unsafe-immutable-hash-iterate-key"
" ht_22"
" i_27)))"
"(let-values(((bindings_29"
" covered-scope-sets_30)"
"(let-values(((ht_31"
" bulk-bindings_32)"
"(let-values(((table_35)"
"(scope-binding-table"
" sc_28)))"
"(if(hash?"
" table_35)"
"(values"
"(hash-ref"
" table_35"
" sym_18"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_35)"
" sym_18"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_35)))))"
"((extra-shifts_34)"
" null))"
"(begin"
" #t"
"((letrec-values(((for-loop_36)"
"(lambda(bindings_37"
" covered-scope-sets_38"
" i_39)"
"(if(not"
"(null?"
" i_39))"
"(let-values(((scs_40)"
"(if(pair?"
" i_39)"
"(let-values()"
"(bulk-binding-at-scopes"
"(car"
" i_39)))"
"(let-values()"
"(hash-iterate-key"
" ht_31"
" i_39))))"
"((b_41)"
"(if(pair?"
" i_39)"
"(let-values()"
"(let-values(((bulk_42)"
"(bulk-binding-at-bulk"
"(car"
" i_39))))"
"(let-values(((b-info_43)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_42"
" s_33"
" extra-shifts_34)"
" sym_18"
" #f)))"
"(if b-info_43"
"((bulk-binding-create"
" bulk_42)"
" bulk_42"
" b-info_43"
" sym_18)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_31"
" i_39)))))"
"(let-values(((bindings_44"
" covered-scope-sets_45)"
"(let-values()"
"(if(if scs_40"
"(if b_41"
"(if(let-values()"
"(if or-part_48"
" or-part_48"
"(subset?"
" scs_40"
" s-scs_15)))"
"(not"
"(set-member?"
" covered-scope-sets_47"
" scs_40))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((bindings_51"
" covered-scope-sets_52)"
"(let-values()"
"(values"
"(cons"
"(hash"
" 'name"
"(syntax-e$1"
" s_1)"
" 'context"
"(scope-set->context"
" scs_40)"
" 'match?"
"(subset?"
" scs_40"
" s-scs_15)"
"(if(local-binding?"
" b_41)"
" 'local"
" 'module)"
"(if(local-binding?"
" b_41)"
"(local-binding-key"
" b_41)"
"(vector"
"(module-binding-sym"
" b_41)"
"(module-binding-module"
" b_41)"
"(module-binding-phase"
" b_41))))"
" bindings_49)"
"(set-add"
" covered-scope-sets_50"
" scs_40)))))"
"(values"
" bindings_51"
" covered-scope-sets_52)))"
"(values"
" bindings_46"
" covered-scope-sets_47)))))"
"(for-loop_36"
" bindings_44"
" covered-scope-sets_45"
"(if(pair?"
" i_39)"
"(let-values()"
"(cdr"
" i_39))"
"(let-values()"
"(let-values(((or-part_53)"
"(hash-iterate-next"
" ht_31"
" i_39)))"
"(if or-part_53"
" or-part_53"
" bulk-bindings_32)))))))"
"(values"
" bindings_37"
" covered-scope-sets_38)))))"
" for-loop_36)"
" bindings_25"
" covered-scope-sets_26"
"(let-values(((or-part_54)"
"(hash-iterate-first"
" ht_31)))"
"(if or-part_54"
" or-part_54"
" bulk-bindings_32)))))))"
"(for-loop_24"
" bindings_29"
" covered-scope-sets_30"
"(unsafe-immutable-hash-iterate-next"
" ht_22"
" i_27))))"
"(values"
" bindings_25"
" covered-scope-sets_26)))))"
" for-loop_24)"
" null"
"(set)"
"(unsafe-immutable-hash-iterate-first"
" ht_22))))))"
" bindings_20))"
"(let-values()"
" null))))"
"(if(null? bindings_19)"
" context-ht_17"
"(hash-set"
" context-ht_17"
" 'bindings"
" bindings_19)))))))))"
" fold-var_12))))"
"(values fold-var_13)))))"
"(for-loop_7 fold-var_11(unsafe-cdr lst_9))))"
" fold-var_8))))"
" for-loop_7)"
" null"
" lst_6))))))"
"(let-values(((ht_5)(car hts_4)))(if(null?(cdr hts_4)) ht_5(hash-set ht_5 'fallbacks(cdr hts_4)))))))"
"(define-values"
"(scope-set->context)"
"(lambda(scs_55)"
"(let-values(((temp1_57)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if((lambda(ht_61)(if(hash? ht_61)(immutable? ht_61) #f)) ht_60)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_60)))"
"((letrec-values(((for-loop_62)"
"(lambda(fold-var_63 i_64)"
"(if i_64"
"(let-values(((sc_65)(unsafe-immutable-hash-iterate-key ht_60 i_64)))"
"(let-values(((fold-var_66)"
"(let-values()"
"(let-values(((fold-var_68)"
"(let-values()"
"(cons"
"(let-values()"
"(if(representative-scope? sc_65)"
"(vector"
"(scope-id sc_65)"
"(scope-kind sc_65)"
"(multi-scope-name"
"(representative-scope-owner"
" sc_65)))"
"(vector"
"(scope-id sc_65)"
"(scope-kind sc_65))))"
" fold-var_67))))"
"(values fold-var_68)))))"
"(for-loop_62"
" fold-var_66"
"(unsafe-immutable-hash-iterate-next ht_60 i_64))))"
" fold-var_63))))"
" for-loop_62)"
" null"
"(unsafe-immutable-hash-iterate-first ht_60))))))"
"((<2_58) <)"
"((temp3_59)(lambda(v_69)(vector-ref v_69 0))))"
"(sort7.1 #f #f temp3_59 #t temp1_57 <2_58))))"
"(void)"
"(void)"
"(define-values"
"(raise-ambiguous-error)"
"(lambda(id_1 ctx_2)"
"    (raise-syntax-error$1 #f \"identifier's binding is ambiguous\" id_1 #f null (syntax-debug-info-string id_1 ctx_2))))"
"(define-values"
"(syntax-debug-info-string)"
"(lambda(s_3 ctx_4)"
"(let-values(((info_5)(syntax-debug-info$1 s_3(expand-context-phase ctx_4) #t)))"
"(if(not"
"(let-values(((or-part_6)(pair?(hash-ref info_5 'bindings null))))"
"(if or-part_6"
" or-part_6"
"(let-values(((lst_7)(hash-ref info_5 'fallbacks null)))"
"(begin"
"(if(list? lst_7)(void)(let-values()(in-list lst_7)))"
"((letrec-values(((for-loop_8)"
"(lambda(result_9 lst_10)"
"(if(pair? lst_10)"
"(let-values(((fb-info_11)(unsafe-car lst_10)))"
"(let-values(((result_12)"
"(let-values()"
"(let-values(((result_14)"
"(let-values()"
"(let-values()"
"(pair?"
"(hash-ref fb-info_11 'bindings null))))))"
"(values result_14)))))"
"(if(not((lambda x_15 result_12) fb-info_11))"
"(for-loop_8 result_12(unsafe-cdr lst_10))"
" result_12)))"
" result_9))))"
" for-loop_8)"
" #f"
" lst_7))))))"
"        (let-values () \"\")"
"(let-values()"
"(let-values(((relevant-scope-sets_16)"
"((letrec-values(((loop_18)"
"(lambda(info_19 layer_20)"
"(apply"
" append"
"(cons"
"(hash-ref info_19 'context)"
"(alt-reverse"
"(let-values(((lst_21)(hash-ref info_19 'bindings null)))"
"(begin"
"(if(list? lst_21)(void)(let-values()(in-list lst_21)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23 lst_24)"
"(if(pair? lst_24)"
"(let-values(((b_25)(unsafe-car lst_24)))"
"(let-values(((fold-var_26)"
"(let-values()"
"(let-values(((fold-var_28)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" b_25"
" 'context))"
" fold-var_27))))"
"(values fold-var_28)))))"
"(for-loop_22"
" fold-var_26"
"(unsafe-cdr lst_24))))"
" fold-var_23))))"
" for-loop_22)"
" null"
" lst_21)))))"
"(let-values(((fallbacks_29)(hash-ref info_19 'fallbacks null)))"
"(alt-reverse"
"(let-values(((start_31)(add1 layer_20)))"
"(begin"
"(if(list? lst_30)(void)(let-values()(in-list lst_30)))"
"(if(exact-nonnegative-integer? start_31)"
"(void)"
"(let-values()(in-naturals start_31)))"
"((letrec-values(((for-loop_32)"
"(lambda(fold-var_33 lst_34 pos_35)"
"(if(if(pair? lst_34) #t #f)"
"(let-values(((fallback_36)"
"(unsafe-car lst_34)))"
"(let-values(((fold-var_38)"
"(let-values()"
"(let-values(((fold-var_40)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_18"
" fallback_36"
" layer_37))"
" fold-var_39))))"
"(values fold-var_40)))))"
"(for-loop_32"
" fold-var_38"
"(unsafe-cdr lst_34)"
"(+ pos_35 1))))"
" fold-var_33))))"
" for-loop_32)"
" null"
" lst_30"
" start_31)))))))))"
" loop_18)"
" info_5"
" 0)))"
"(let-values(((common-scopes_17)"
"(if(null? relevant-scope-sets_16)"
"(set)"
"(let-values()"
"(begin"
"(if(list? lst_41)(void)(let-values()(in-list lst_41)))"
"((letrec-values(((for-loop_42)"
"(lambda(s_43 lst_44)"
"(if(pair? lst_44)"
"(let-values(((l_45)(unsafe-car lst_44)))"
"(let-values(((s_46)"
"(let-values()"
"(let-values(((s_48)"
"(let-values()"
"(set-intersect"
" s_47"
"(list->set l_45)))))"
"(values s_48)))))"
"(for-loop_42 s_46(unsafe-cdr lst_44))))"
" s_43))))"
" for-loop_42)"
"(list->set(car relevant-scope-sets_16))"
" lst_41))))))"
"(string-append"
"((letrec-values(((loop_49)"
"(lambda(info_50 layer_51)"
"(string-append"
"                                    \"\\n  context\""
"(layer->string layer_51)"
"                                    \"...:\""
"(describe-context(hash-ref info_50 'context) common-scopes_17)"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((lst_52)"
"(let-values(((temp1_53)(hash-ref info_50 'bindings null))"
"((temp2_54)"
"(lambda(a_55 b_56)"
"(if(hash-ref a_55 'match? #f)"
"(not(hash-ref b_56 'match? #f))"
" #f))))"
"(sort7.1 #f #f #f #f temp1_53 temp2_54))))"
"(begin"
"(if(list? lst_52)(void)(let-values()(in-list lst_52)))"
"((letrec-values(((for-loop_57)"
"(lambda(fold-var_58 lst_59)"
"(if(pair? lst_59)"
"(let-values(((b_60)(unsafe-car lst_59)))"
"(let-values(((fold-var_61)"
"(let-values()"
"(let-values(((fold-var_63)"
"(let-values()"
"(cons"
"(let-values()"
"(string-append"
"                                                                                                      \"\\n  \""
"(if(hash-ref"
" b_60"
" 'match?"
" #f)"
"                                                                                                        \"matching\""
"                                                                                                        \"other\")"
"                                                                                                      \" binding\""
"(layer->string"
" layer_51)"
"                                                                                                      \"...:\""
"                                                                                                      \"\\n   \""
"(if(hash-ref"
" b_60"
" 'local"
" #f)"
"                                                                                                        \"local\""
"(format"
"                                                                                                         \"~a\""
"(hash-ref"
" b_60"
" 'module"
" #f)))"
"(describe-context"
"(hash-ref"
" b_60"
" 'context)"
" common-scopes_17)))"
" fold-var_62))))"
"(values fold-var_63)))))"
"(for-loop_57 fold-var_61(unsafe-cdr lst_59))))"
" fold-var_58))))"
" for-loop_57)"
" null"
" lst_52)))))"
"(let-values(((fallbacks_64)(hash-ref info_50 'fallbacks null)))"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((start_66)(add1 layer_51)))"
"(begin"
"(if(list? lst_65)(void)(let-values()(in-list lst_65)))"
"(if(exact-nonnegative-integer? start_66)"
"(void)"
"(let-values()(in-naturals start_66)))"
"((letrec-values(((for-loop_67)"
"(lambda(fold-var_68 lst_69 pos_70)"
"(if(if(pair? lst_69) #t #f)"
"(let-values(((fallback_71)(unsafe-car lst_69)))"
"(let-values(((fold-var_73)"
"(let-values()"
"(let-values(((fold-var_75)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_49"
" fallback_71"
" layer_72))"
" fold-var_74))))"
"(values fold-var_75)))))"
"(for-loop_67"
" fold-var_73"
"(unsafe-cdr lst_69)"
"(+ pos_70 1))))"
" fold-var_68))))"
" for-loop_67)"
" null"
" lst_65"
" start_66))))))))))"
" loop_49)"
" info_5"
" 0)"
"(if(set-empty? common-scopes_17)"
"                 \"\""
"(string-append"
"                  \"\\n  common scopes...:\""
"(describe-context"
"(alt-reverse"
"(let-values(((lst_76)(hash-ref info_5 'context)))"
"(begin"
"(if(list? lst_76)(void)(let-values()(in-list lst_76)))"
"((letrec-values(((for-loop_77)"
"(lambda(fold-var_78 lst_79)"
"(if(pair? lst_79)"
"(let-values(((s_80)(unsafe-car lst_79)))"
"(let-values(((fold-var_81)"
"(let-values()"
"(if(set-member? common-scopes_17 s_80)"
"(let-values()"
"(let-values(((fold-var_84)"
"(let-values()"
"(cons"
"(let-values() s_80)"
" fold-var_83))))"
"(values fold-var_84)))"
" fold-var_82))))"
"(for-loop_77 fold-var_81(unsafe-cdr lst_79))))"
" fold-var_78))))"
" for-loop_77)"
" null"
" lst_76))))"
"(set))))))))))))"
"(define-values"
"(describe-context)"
"(lambda(scopes_85 common-scopes_86)"
"(let-values(((strs_87)"
"((letrec-values(((loop_88)"
"(lambda(strs_89 scopes_90)"
"(if(null? scopes_90)"
"(let-values()(alt-reverse strs_89))"
"(let-values()"
"                                          (let-values (((str_91) (format \" ~a\" (car scopes_90))))"
"(if(if(pair? strs_89)"
"(<(+(string-length str_91)(string-length(car strs_89))) 72)"
" #f)"
"(loop_88"
"(cons(string-append(car strs_89) str_91)(cdr strs_89))"
"(cdr scopes_90))"
"(loop_88(cons str_91 strs_89)(cdr scopes_90)))))))))"
" loop_88)"
" null"
"(if(set-empty? common-scopes_86)"
" scopes_85"
"(append"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_92)(void)(let-values()(in-list lst_92)))"
"((letrec-values(((for-loop_93)"
"(lambda(fold-var_94 lst_95)"
"(if(pair? lst_95)"
"(let-values(((s_96)(unsafe-car lst_95)))"
"(let-values(((fold-var_97)"
"(let-values()"
"(if(not(set-member? common-scopes_86 s_96))"
"(let-values()"
"(let-values(((fold-var_100)"
"(let-values()"
"(cons"
"(let-values() s_96)"
" fold-var_99))))"
"(values fold-var_100)))"
" fold-var_98))))"
"(for-loop_93 fold-var_97(unsafe-cdr lst_95))))"
" fold-var_94))))"
" for-loop_93)"
" null"
" lst_92))))"
"                      (list \"[common scopes]\"))))))"
"(if(null? strs_87)"
"        (let-values () \"\\n   [empty]\")"
"(let-values()"
"(apply"
" string-append"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_101)(void)(let-values()(in-list lst_101)))"
"((letrec-values(((for-loop_102)"
"(lambda(fold-var_103 lst_104)"
"(if(pair? lst_104)"
"(let-values(((str_105)(unsafe-car lst_104)))"
"(let-values(((fold-var_106)"
"(let-values()"
"(let-values(((fold-var_108)"
"(let-values()"
"(cons"
"                                                                         (let-values () (string-append \"\\n  \" str_105))"
" fold-var_107))))"
"(values fold-var_108)))))"
"(for-loop_102 fold-var_106(unsafe-cdr lst_104))))"
" fold-var_103))))"
" for-loop_102)"
" null"
" lst_101))))))))))"
" (define-values (layer->string) (lambda (layer_109) (if (zero? layer_109) \"\" (format \" at layer ~a\" layer_109))))"
"(void)"
"(void)"
"(define-values"
"(raise-syntax-implicit-error)"
"(lambda(s_1 sym_2 trigger-id_3 ctx_4)"
"(let-values(((phase_5)(expand-context-phase ctx_4)))"
"(let-values(((what_6)"
"(let-values()"
"(if(equal? tmp_8 '#%app)"
"                        (let-values () \"function application\")"
"(if(equal? tmp_8 '#%datum)"
"                          (let-values () \"literal data\")"
"(if(equal? tmp_8 '#%top)"
"(let-values()"
"(if(expand-context-allow-unbound? ctx_4)"
"                                \"reference to a top-level identifier\""
"                                \"reference to an unbound identifier\"))"
"(let-values()(void))))))))"
"(let-values(((unbound?_7)"
"(if trigger-id_3"
"(not(let-values()(resolve29.1 #f #f #f #f #f #f #f #f trigger-id1_9 phase2_10)))"
" #f)))"
"(raise-syntax-error$1"
" #f"
"(format"
"(if unbound?_7"
"              \"unbound identifier;\\n also, no ~a transformer is bound~a\""
"              (string-append what_6 \" is not allowed;\\n no ~a syntax transformer is bound~a\"))"
" sym_2"
"(let-values()"
"(if(equal? tmp_11 0)"
"                (let-values () \"\")"
"(if(equal? tmp_11 1)"
"                  (let-values () \" in the transformer phase\")"
"                  (let-values () (format \" at phase ~a\" phase_5))))))"
"(if unbound?_7 trigger-id_3 #f)"
"(if unbound?_7(if(not(eq?(syntax-e$1 s_1)(syntax-e$1 trigger-id_3))) s_1 #f) #f)"
" null"
"           (if unbound?_7 (syntax-debug-info-string trigger-id_3 ctx_4) \"\")))))))"
"(void)"
"(void)"
"(define-values(make-check-no-duplicate-table)(lambda() '#hasheq()))"
"(define-values"
"(check-no-duplicate-ids8.1)"
"(lambda(what1_1 what2_2 ids5_3 phase6_4 s7_5 ht3_6 ht4_7)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((ht_11)(if ht4_7 ht3_6(make-check-no-duplicate-table))))"
"            (let-values (((what_12) (if what2_2 what1_1 \"binding name\")))"
"(let-values()"
"((letrec-values(((loop_13)"
"(lambda(v_14 ht_15)"
"(if(identifier? v_14)"
"(let-values()"
"(let-values(((l_16)(hash-ref ht_15(syntax-e$1 v_14) null)))"
"(begin"
"(let-values()"
"(begin"
"(if(list? lst_17)(void)(let-values()(in-list lst_17)))"
"((letrec-values(((for-loop_18)"
"(lambda(fold-var_19 lst_20)"
"(if(pair? lst_20)"
"(let-values(((id_21)(unsafe-car lst_20)))"
"(let-values(((fold-var_22)"
"(let-values()"
"(let-values(((fold-var_24)"
"(let-values()"
"(begin"
"(let-values()"
"(if(bound-identifier=?$1"
" id_21"
" v_14"
" phase_9)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                                                                                                                  \"duplicate \""
" what_12)"
" s_10"
" v_14))"
"(void)))"
"(void)))))"
"(values fold-var_24)))))"
"(for-loop_18"
" fold-var_22"
"(unsafe-cdr lst_20))))"
" fold-var_19))))"
" for-loop_18)"
"(void)"
" lst_17)))"
"(hash-set ht_15(syntax-e$1 v_14)(cons v_14 l_16)))))"
"(if(pair? v_14)"
"(let-values()(loop_13(cdr v_14)(loop_13(car v_14) ht_15)))"
"(let-values() ht_15))))))"
" loop_13)"
" ids_8"
" ht_11)))))))))"
"(void)"
"(void)"
"(define-values"
"(remove-use-site-scopes)"
"(lambda(s_1 ctx_2)"
"(let-values(((use-sites_3)(root-expand-context-use-site-scopes ctx_2)))"
"(if(if use-sites_3(pair?(unbox use-sites_3)) #f)"
"(if(syntax?$1 s_1)"
"(remove-scopes s_1(unbox use-sites_3))"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_6 lst_7)"
"(if(pair? lst_7)"
"(let-values(((id_8)(unsafe-car lst_7)))"
"(let-values(((fold-var_9)"
"(let-values()"
"(let-values(((fold-var_11)"
"(let-values()"
"(cons"
"(let-values()"
"(remove-scopes id_8(unbox use-sites_3)))"
" fold-var_10))))"
"(values fold-var_11)))))"
"(for-loop_5 fold-var_9(unsafe-cdr lst_7))))"
" fold-var_6))))"
" for-loop_5)"
" null"
" lst_4)))))"
" s_1))))"
"(void)"
"(void)"
"(define-values"
"(struct:compile-context"
" compile-context1.1"
" compile-context?"
" compile-context-namespace"
" compile-context-phase"
" compile-context-self"
" compile-context-module-self"
" compile-context-full-module-name"
" compile-context-lazy-syntax-literals?"
" compile-context-header)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'compile-context"
" #f"
" 7"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'compile-context)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'namespace)"
"(make-struct-field-accessor -ref_4 1 'phase)"
"(make-struct-field-accessor -ref_4 2 'self)"
"(make-struct-field-accessor -ref_4 3 'module-self)"
"(make-struct-field-accessor -ref_4 4 'full-module-name)"
"(make-struct-field-accessor -ref_4 5 'lazy-syntax-literals?)"
"(make-struct-field-accessor -ref_4 6 'header))))"
"(define-values"
"(make-compile-context14.1)"
"(lambda(full-module-name6_51"
" full-module-name12_52"
" lazy-syntax-literals?7_53"
" lazy-syntax-literals?13_54"
" module-self5_55"
" module-self11_56"
" namespace2_57"
" namespace8_58"
" phase3_59"
" phase9_60"
" self4_61"
" self10_62)"
"(let-values(((namespace_63)(if namespace8_58 namespace2_57(1/current-namespace))))"
"(let-values(((phase_64)(if phase9_60 phase3_59(namespace-phase namespace_63))))"
"(let-values(((self_65)(if self10_62 self4_61(namespace-mpi namespace_63))))"
"(let-values(((module-self_66)(if module-self11_56 module-self5_55 #f)))"
"(let-values(((full-module-name_67)(if full-module-name12_52 full-module-name6_51 #f)))"
"(let-values(((lazy-syntax-literals?_68)"
"(if lazy-syntax-literals?13_54 lazy-syntax-literals?7_53(if module-self_66 #t #f))))"
"(let-values()"
"(begin"
"(if(if module-self_66(not full-module-name_67) #f)"
"                      (let-values () (error \"internal error: module-self provided without full name\"))"
"(void))"
"(compile-context1.1"
" namespace_63"
" phase_64"
" self_65"
" module-self_66"
" full-module-name_67"
" lazy-syntax-literals?_68"
" #f)))))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:mpi-intern-table mpi-intern-table1.1 mpi-intern-table? mpi-intern-table-normal mpi-intern-table-fast)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'mpi-intern-table"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'mpi-intern-table)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'normal)"
"(make-struct-field-accessor -ref_4 1 'fast))))"
"(define-values(make-module-path-index-intern-table)(lambda()(mpi-intern-table1.1(make-hash)(make-hasheq))))"
"(define-values"
"(intern-module-path-index!)"
"(lambda(t_26 mpi_27)"
"(let-values(((or-part_28)(hash-ref(mpi-intern-table-fast t_26) mpi_27 #f)))"
"(if or-part_28"
" or-part_28"
"(let-values(((name_29 base_30)(1/module-path-index-split mpi_27)))"
"(if(not name_29)"
"(let-values()(begin(hash-set!(mpi-intern-table-fast t_26) mpi_27 mpi_27) mpi_27))"
"(let-values()"
"(let-values(((interned-base_31)(if base_30(intern-module-path-index! t_26 base_30) #f)))"
"(let-values(((at-name_32)"
"(let-values(((or-part_34)(hash-ref(mpi-intern-table-normal t_26) name_29 #f)))"
"(if or-part_34"
" or-part_34"
"(let-values(((at-name_35)(make-hasheq)))"
"(begin"
"(hash-set!(mpi-intern-table-normal t_26) name_29 at-name_35)"
" at-name_35))))))"
"(let-values(((i-mpi_33)"
"(let-values(((or-part_36)(hash-ref at-name_32 interned-base_31 #f)))"
"(if or-part_36"
" or-part_36"
"(let-values(((mpi_37)"
"(if(eq? base_30 interned-base_31)"
" mpi_27"
"(let-values()"
"(if(1/module-path-index? the-struct_38)"
"(let-values()"
"(module-path-index2.1"
"(module-path-index-path the-struct_38)"
" base3_39"
"(module-path-index-resolved the-struct_38)"
"(module-path-index-shift-cache the-struct_38)))"
"(raise-argument-error"
" 'struct-copy"
"                                                         \"module-path-index?\""
" the-struct_38))))))"
"(begin(hash-set! at-name_32 interned-base_31 mpi_37) mpi_37))))))"
"(begin(hash-set!(mpi-intern-table-fast t_26) mpi_27 i-mpi_33) i-mpi_33)))))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:module-path-index-table"
" module-path-index-table1.1"
" module-path-index-table?"
" module-path-index-table-positions"
" module-path-index-table-intern)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-path-index-table"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-path-index-table)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'positions)"
"(make-struct-field-accessor -ref_4 1 'intern))))"
"(define-values(mpi-vector-id)(make-built-in-symbol! 'mpi-vector))"
"(define-values"
"(make-module-path-index-table)"
"(lambda()(module-path-index-table1.1(make-hasheq)(make-module-path-index-intern-table))))"
"(define-values"
"(add-module-path-index!)"
"(lambda(mpis_26 mpi_27)"
"(let-values(((pos_28)(add-module-path-index!/pos mpis_26 mpi_27)))"
"(if pos_28(list 'vector-ref mpi-vector-id pos_28) #f))))"
"(define-values"
"(add-module-path-index!/pos)"
"(lambda(mpis_29 mpi_30)"
"(if(not mpi_30)"
"(let-values() #f)"
"(if mpi_30"
"(let-values()"
"(let-values(((mpi_31)(intern-module-path-index!(module-path-index-table-intern mpis_29) mpi_30))"
"((positions_32)(module-path-index-table-positions mpis_29)))"
"(let-values(((or-part_33)(hash-ref positions_32 mpi_31 #f)))"
"(if or-part_33"
" or-part_33"
"(let-values(((pos_34)(hash-count positions_32)))"
"(begin(hash-set! positions_32 mpi_31 pos_34) pos_34))))))"
"(void)))))"
"(define-values"
"(generate-module-path-index-deserialize)"
"(lambda(mpis_35)"
"(let-values(((positions_36)(module-path-index-table-positions mpis_35)))"
"(let-values(((gen-order_37)(make-hasheqv)))"
"(let-values(((rev-positions_38)"
"(let-values()"
"(begin"
"(if((lambda(ht_42)(hash? ht_42)) ht_41)(void)(let-values()(default-in-hash ht_41)))"
"((letrec-values(((for-loop_43)"
"(lambda(table_44 i_45)"
"(if i_45"
"(let-values(((k_46 v_47)(hash-iterate-key+value ht_41 i_45)))"
"(let-values(((table_48)"
"(let-values()"
"(let-values(((table_50)"
"(let-values()"
"(let-values(((key_51 val_52)"
"(let-values()"
"(values v_47 k_46))))"
"(hash-set"
" table_49"
" key_51"
" val_52)))))"
"(values table_50)))))"
"(for-loop_43 table_48(hash-iterate-next ht_41 i_45))))"
" table_44))))"
" for-loop_43)"
" '#hasheqv()"
"(hash-iterate-first ht_41))))))"
"(let-values((()"
"(begin"
"(let-values(((start_53) 0)((end_54)(hash-count rev-positions_38))((inc_55) 1))"
"(begin"
"(if(if(real? start_53)(if(real? end_54)(real? inc_55) #f) #f)"
"(void)"
"(let-values()(in-range start_53 end_54 inc_55)))"
"((letrec-values(((for-loop_56)"
"(lambda(fold-var_57 pos_58)"
"(if(< pos_58 end_54)"
"(let-values()"
"(let-values(((fold-var_60)"
"(let-values()"
"(let-values(((fold-var_62)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_63)"
"(hash-ref"
" rev-positions_38"
" i_59)))"
"((letrec-values(((loop_64)"
"(lambda(mpi_65)"
"(if(hash-ref"
" gen-order_37"
" mpi_65"
" #f)"
"(void)"
"(let-values()"
"(let-values(((name_66"
" base_67)"
"(1/module-path-index-split"
" mpi_65)))"
"(begin"
"(if base_67"
"(let-values()"
"(loop_64"
" base_67))"
"(void))"
"(hash-set!"
" gen-order_37"
" mpi_65"
"(hash-count"
" gen-order_37)))))))))"
" loop_64)"
" mpi_63)))"
"(void)))))"
"(values fold-var_62)))))"
"(for-loop_56 fold-var_60(+ pos_58 inc_55))))"
" fold-var_57))))"
" for-loop_56)"
"(void)"
" start_53)))"
"(values))))"
"(let-values(((rev-gen-order_39)"
"(let-values()"
"(begin"
"(if((lambda(ht_69)(hash? ht_69)) ht_68)(void)(let-values()(default-in-hash ht_68)))"
"((letrec-values(((for-loop_70)"
"(lambda(table_71 i_72)"
"(if i_72"
"(let-values(((k_73 v_74)(hash-iterate-key+value ht_68 i_72)))"
"(let-values(((table_75)"
"(let-values()"
"(let-values(((table_77)"
"(let-values()"
"(let-values(((key_78 val_79)"
"(let-values()"
"(values"
" v_74"
" k_73))))"
"(hash-set"
" table_76"
" key_78"
" val_79)))))"
"(values table_77)))))"
"(for-loop_70 table_75(hash-iterate-next ht_68 i_72))))"
" table_71))))"
" for-loop_70)"
" '#hasheqv()"
"(hash-iterate-first ht_68))))))"
"(let-values(((gens_40)"
"(let-values(((len_80)(hash-count gen-order_37)))"
"(begin"
"(if(exact-nonnegative-integer? len_80)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_80)))"
"(let-values(((v_81)(make-vector len_80 0)))"
"(begin"
"(if(zero? len_80)"
"(void)"
"(let-values()"
"(let-values(((start_82) 0)((end_83)(hash-count gen-order_37))((inc_84) 1))"
"(begin"
"(if(if(real? start_82)(if(real? end_83)(real? inc_84) #f) #f)"
"(void)"
"(let-values()(in-range start_82 end_83 inc_84)))"
"((letrec-values(((for-loop_85)"
"(lambda(i_86 pos_87)"
"(if(< pos_87 end_83)"
"(let-values()"
"(let-values(((i_89)"
"(let-values()"
"(let-values(((i_91)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_81"
" i_90"
"(let-values()"
"(let-values(((mpi_92)"
"(hash-ref"
" rev-gen-order_39"
" i_88)))"
"(let-values(((path_93"
" base_94)"
"(1/module-path-index-split"
" mpi_92)))"
"(if(top-level-module-path-index?"
" mpi_92)"
"(let-values()"
" 'top)"
"(if(not"
" path_93)"
"(let-values()"
"(box"
"(let-values(((or-part_95)"
"(1/resolved-module-path-name"
"(module-path-index-resolved"
" mpi_92))))"
"(if or-part_95"
" or-part_95"
" 'self))))"
"(if(not"
" base_94)"
"(let-values()"
"(vector"
" path_93))"
"(if base_94"
"(let-values()"
"(vector"
" path_93"
"(hash-ref"
" gen-order_37"
" base_94)))"
"(void)))))))))"
"(unsafe-fx+"
" 1"
" i_90)))))"
"(values i_91)))))"
"(if(not"
"((lambda x_96(unsafe-fx= i_89 len_80))"
" i_88))"
"(for-loop_85 i_89(+ pos_87 inc_84))"
" i_89)))"
" i_86))))"
" for-loop_85)"
" 0"
" start_82)))))"
" v_81))))))"
"(list"
" 'deserialize-module-path-indexes"
"(list 'quote gens_40)"
"(list"
" 'quote"
"(let-values(((vec_97 i_98)"
"(let-values(((start_99) 0)((end_100)(hash-count rev-positions_38))((inc_101) 1))"
"(begin"
"(if(if(real? start_99)(if(real? end_100)(real? inc_101) #f) #f)"
"(void)"
"(let-values()(in-range start_99 end_100 inc_101)))"
"((letrec-values(((for-loop_102)"
"(lambda(vec_103 i_104 pos_105)"
"(if(< pos_105 end_100)"
"(let-values()"
"(let-values(((vec_107 i_108)"
"(let-values()"
"(let-values(((vec_111 i_112)"
"(let-values()"
"(let-values(((new-vec_113)"
"(if(eq?"
" i_110"
"(unsafe-vector*-length"
" vec_109))"
"(grow-vector"
" vec_109)"
" vec_109)))"
"(begin"
"(unsafe-vector*-set!"
" new-vec_113"
" i_110"
"(let-values()"
"(hash-ref"
" gen-order_37"
"(hash-ref"
" rev-positions_38"
" i_106))))"
"(values"
" new-vec_113"
"(unsafe-fx+"
" i_110"
" 1)))))))"
"(values vec_111 i_112)))))"
"(for-loop_102 vec_107 i_108(+ pos_105 inc_101))))"
"(values vec_103 i_104)))))"
" for-loop_102)"
"(make-vector 16)"
" 0"
" start_99)))))"
"(shrink-vector vec_97 i_98))))))))))))"
"(define-values"
"(deserialize-module-path-indexes)"
"(lambda(gen-vec_114 order-vec_115)"
"(let-values(((gen_116)(make-vector(vector-length gen-vec_114) #f)))"
"(begin"
"(let-values(((vec_117 len_118)"
"(let-values()"
"(begin"
"(if(vector? vec_120)(void)(let-values()(in-vector vec_120)))"
"(values vec_120(unsafe-vector-length vec_120)))))"
"((start_119) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_119)(void)(let-values()(in-naturals start_119)))"
"((letrec-values(((for-loop_121)"
"(lambda(fold-var_122 pos_123 pos_124)"
"(if(if(unsafe-fx< pos_123 len_118) #t #f)"
"(let-values(((d_125)(unsafe-vector-ref vec_117 pos_123)))"
"(let-values(((fold-var_127)"
"(let-values()"
"(let-values(((fold-var_129)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" gen_116"
" i_126"
"(if(eq? d_125 'top)"
"(let-values()"
"(deserialize-module-path-index))"
"(if(box? d_125)"
"(let-values()"
"(deserialize-module-path-index"
"(unbox d_125)))"
"(let-values()"
"(deserialize-module-path-index"
"(vector-ref d_125 0)"
"(if(>(vector-length d_125) 1)"
"(vector-ref"
" gen_116"
"(vector-ref d_125 1))"
" #f)))))))"
"(void)))))"
"(values fold-var_129)))))"
"(for-loop_121 fold-var_127(unsafe-fx+ 1 pos_123)(+ pos_124 1))))"
" fold-var_122))))"
" for-loop_121)"
"(void)"
" 0"
" start_119)))"
"(let-values(((len_130)(vector-length order-vec_115)))"
"(begin"
"(if(exact-nonnegative-integer? len_130)"
"(void)"
"              (let-values () (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_130)))"
"(let-values(((v_131)(make-vector len_130 0)))"
"(begin"
"(if(zero? len_130)"
"(void)"
"(let-values()"
"(let-values(((vec_132 len_133)"
"(let-values()"
"(begin"
"(if(vector? vec_134)(void)(let-values()(in-vector vec_134)))"
"(values vec_134(unsafe-vector-length vec_134))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_135)"
"(lambda(i_136 pos_137)"
"(if(unsafe-fx< pos_137 len_133)"
"(let-values(((p_138)(unsafe-vector-ref vec_132 pos_137)))"
"(let-values(((i_139)"
"(let-values()"
"(let-values(((i_141)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_131"
" i_140"
"(let-values()"
"(vector-ref gen_116 p_138)))"
"(unsafe-fx+ 1 i_140)))))"
"(values i_141)))))"
"(if(not((lambda x_142(unsafe-fx= i_139 len_130)) p_138))"
"(for-loop_135 i_139(unsafe-fx+ 1 pos_137))"
" i_139)))"
" i_136))))"
" for-loop_135)"
" 0"
" 0)))))"
" v_131))))))))"
"(define-values"
"(mpis-as-vector)"
"(lambda(mpis_143)"
"(let-values(((positions_144)(module-path-index-table-positions mpis_143)))"
"(let-values(((vec_145)(make-vector(hash-count positions_144) #f)))"
"(begin"
"(let-values()"
"(begin"
"(if((lambda(ht_147)(hash? ht_147)) ht_146)(void)(let-values()(default-in-hash ht_146)))"
"((letrec-values(((for-loop_148)"
"(lambda(fold-var_149 i_150)"
"(if i_150"
"(let-values(((mpi_151 pos_152)(hash-iterate-key+value ht_146 i_150)))"
"(let-values(((fold-var_153)"
"(let-values()"
"(let-values(((fold-var_155)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set! vec_145 pos_152 mpi_151))"
"(void)))))"
"(values fold-var_155)))))"
"(for-loop_148 fold-var_153(hash-iterate-next ht_146 i_150))))"
" fold-var_149))))"
" for-loop_148)"
"(void)"
"(hash-iterate-first ht_146))))"
" vec_145)))))"
"(define-values"
"(serialize-module-uses)"
"(lambda(mus_166 mpis_167)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_168)(void)(let-values()(in-list lst_168)))"
"((letrec-values(((for-loop_169)"
"(lambda(fold-var_170 lst_171)"
"(if(pair? lst_171)"
"(let-values(((mu_172)(unsafe-car lst_171)))"
"(let-values(((fold-var_173)"
"(let-values()"
"(let-values(((fold-var_175)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" 'module-use"
"(add-module-path-index!"
" mpis_167"
"(module-use-module mu_172))"
"(module-use-phase mu_172)))"
" fold-var_174))))"
"(values fold-var_175)))))"
"(for-loop_169 fold-var_173(unsafe-cdr lst_171))))"
" fold-var_170))))"
" for-loop_169)"
" null"
" lst_168))))))"
"(define-values"
"(interned-literal?)"
"(lambda(v_176)"
"(let-values(((or-part_177)(null? v_176)))"
"(if or-part_177"
" or-part_177"
"(let-values(((or-part_178)(boolean? v_176)))"
"(if or-part_178"
" or-part_178"
"(let-values(((or-part_179)"
"(if(fixnum? v_176)(if(< v_176(sub1(expt 2 30)))(> v_176(-(expt 2 30))) #f) #f)))"
"(if or-part_179"
" or-part_179"
"(let-values(((or-part_180)(symbol? v_176)))"
"(if or-part_180"
" or-part_180"
"(let-values(((or-part_181)(char? v_176)))(if or-part_181 or-part_181(keyword? v_176)))))))))))))"
"(define-values"
"(serialize-phase-to-link-module-uses)"
"(lambda(phase-to-link-module-uses_182 mpis_183)"
"(let-values(((phases-in-order_184)"
"(let-values(((temp10_185)(hash-keys phase-to-link-module-uses_182))((<11_186) <))"
"(sort7.1 #f #f #f #f temp10_185 <11_186))))"
"(list*"
" 'hasheqv"
"(apply"
" append"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_187)(void)(let-values()(in-list lst_187)))"
"((letrec-values(((for-loop_188)"
"(lambda(fold-var_189 lst_190)"
"(if(pair? lst_190)"
"(let-values(((phase_191)(unsafe-car lst_190)))"
"(let-values(((fold-var_192)"
"(let-values()"
"(let-values(((fold-var_194)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" phase_191"
"(list*"
" 'list"
"(serialize-module-uses"
"(hash-ref"
" phase-to-link-module-uses_182"
" phase_191)"
" mpis_183))))"
" fold-var_193))))"
"(values fold-var_194)))))"
"(for-loop_188 fold-var_192(unsafe-cdr lst_190))))"
" fold-var_189))))"
" for-loop_188)"
" null"
" lst_187)))))))))"
"(define-values"
"(generate-deserialize6.1)"
"(lambda(syntax-support?2_195 syntax-support?3_196 v4_197 mpis5_198)"
"(let-values()"
"(let-values()"
"(let-values(((syntax-support?_201)(if syntax-support?3_196 syntax-support?2_195 #t)))"
"(let-values()"
"(let-values(((reachable-scopes_202)(find-reachable-scopes v_199)))"
"(let-values(((state_203)(make-serialize-state reachable-scopes_202)))"
"(let-values(((mutables_204)(make-hasheq)))"
"(let-values(((objs_205)(make-hasheq)))"
"(let-values(((shares_206)(make-hasheq)))"
"(let-values(((obj-step_207) 0))"
"(let-values(((frontier_208) null))"
"(letrec-values(((add-frontier!_209)"
"(case-lambda"
"((v_228)(set! frontier_208(cons v_228 frontier_208)))"
"((kind_229 v_230)(add-frontier!_209 v_230)))))"
"(let-values((()"
"(begin"
"((letrec-values(((frontier-loop_231)"
"(lambda(v_232)"
"(begin"
"((letrec-values(((loop_233)"
"(lambda(v_234)"
"(if(let-values(((or-part_235)"
"(interned-literal?"
" v_234)))"
"(if or-part_235"
" or-part_235"
"(1/module-path-index?"
" v_234)))"
"(let-values()(void))"
"(if(hash-ref objs_205 v_234 #f)"
"(let-values()"
"(if(hash-ref"
" mutables_204"
" v_234"
" #f)"
"(void)"
"(let-values()"
"(hash-set!"
" shares_206"
" v_234"
" #t))))"
"(let-values()"
"(begin"
"(if(serialize-fill!?"
" v_234)"
"(let-values()"
"(begin"
"(hash-set!"
" mutables_204"
" v_234"
"(hash-count"
" mutables_204))"
"((serialize-fill!-ref"
" v_234)"
" v_234"
" add-frontier!_209"
" state_203)))"
"(if(serialize? v_234)"
"(let-values()"
"((serialize-ref"
" v_234)"
" v_234"
"(case-lambda"
"((v_236)"
"(loop_233 v_236))"
"((kind_237 v_238)"
"(loop_233"
" v_238)))"
" state_203))"
"(if(pair? v_234)"
"(let-values()"
"(begin"
"(loop_233"
"(car v_234))"
"(loop_233"
"(cdr v_234))))"
"(if(vector? v_234)"
"(let-values()"
"(if(let-values(((or-part_239)"
"(immutable?"
" v_234)))"
"(if or-part_239"
" or-part_239"
"(zero?"
"(vector-length"
" v_234))))"
"(let-values(((vec_240"
" len_241)"
"(let-values()"
"(begin"
"(if(vector?"
" vec_242)"
"(void)"
"(let-values()"
"(in-vector"
" vec_242)))"
"(values"
" vec_242"
"(unsafe-vector-length"
" vec_242))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_243)"
"(lambda(fold-var_244"
" pos_245)"
"(if(unsafe-fx<"
" pos_245"
" len_241)"
"(let-values(((e_246)"
"(unsafe-vector-ref"
" vec_240"
" pos_245)))"
"(let-values(((fold-var_247)"
"(let-values()"
"(let-values(((fold-var_249)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_233"
" e_246))"
"(void)))))"
"(values"
" fold-var_249)))))"
"(for-loop_243"
" fold-var_247"
"(unsafe-fx+"
" 1"
" pos_245))))"
" fold-var_244))))"
" for-loop_243)"
"(void)"
" 0)))"
"(begin"
"(hash-set!"
" mutables_204"
" v_234"
"(hash-count"
" mutables_204))"
"(let-values(((vec_250"
" len_251)"
"(let-values()"
"(begin"
"(if(vector?"
" vec_252)"
"(void)"
"(let-values()"
"(in-vector"
" vec_252)))"
"(values"
" vec_252"
"(unsafe-vector-length"
" vec_252))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_253)"
"(lambda(fold-var_254"
" pos_255)"
"(if(unsafe-fx<"
" pos_255"
" len_251)"
"(let-values(((e_256)"
"(unsafe-vector-ref"
" vec_250"
" pos_255)))"
"(let-values(((fold-var_257)"
"(let-values()"
"(let-values(((fold-var_259)"
"(let-values()"
"(begin"
"(let-values()"
"(add-frontier!_209"
" e_256))"
"(void)))))"
"(values"
" fold-var_259)))))"
"(for-loop_253"
" fold-var_257"
"(unsafe-fx+"
" 1"
" pos_255))))"
" fold-var_254))))"
" for-loop_253)"
"(void)"
" 0))))))"
"(if(box? v_234)"
"(let-values()"
"(if(immutable?"
" v_234)"
"(loop_233"
"(unbox"
" v_234))"
"(begin"
"(hash-set!"
" mutables_204"
" v_234"
"(hash-count"
" mutables_204))"
"(add-frontier!_209"
"(unbox"
" v_234)))))"
"(if(hash?"
" v_234)"
"(let-values()"
"(if(immutable?"
" v_234)"
"(let-values(((lst_260)"
"(sorted-hash-keys"
" v_234)))"
"(begin"
"(if(list?"
" lst_260)"
"(void)"
"(let-values()"
"(in-list"
" lst_260)))"
"((letrec-values(((for-loop_261)"
"(lambda(fold-var_262"
" lst_263)"
"(if(pair?"
" lst_263)"
"(let-values(((k_264)"
"(unsafe-car"
" lst_263)))"
"(let-values(((fold-var_265)"
"(let-values()"
"(let-values(((fold-var_267)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_233"
" k_264)"
"(loop_233"
"(hash-ref"
" v_234"
" k_264))))"
"(void)))))"
"(values"
" fold-var_267)))))"
"(for-loop_261"
" fold-var_265"
"(unsafe-cdr"
" lst_263))))"
" fold-var_262))))"
" for-loop_261)"
"(void)"
" lst_260)))"
"(begin"
"(hash-set!"
" mutables_204"
" v_234"
"(hash-count"
" mutables_204))"
"(let-values(((lst_268)"
"(sorted-hash-keys"
" v_234)))"
"(begin"
"(if(list?"
" lst_268)"
"(void)"
"(let-values()"
"(in-list"
" lst_268)))"
"((letrec-values(((for-loop_269)"
"(lambda(fold-var_270"
" lst_271)"
"(if(pair?"
" lst_271)"
"(let-values(((k_272)"
"(unsafe-car"
" lst_271)))"
"(let-values(((fold-var_273)"
"(let-values()"
"(let-values(((fold-var_275)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(add-frontier!_209"
" k_272)"
"(add-frontier!_209"
"(hash-ref"
" v_234"
" k_272))))"
"(void)))))"
"(values"
" fold-var_275)))))"
"(for-loop_269"
" fold-var_273"
"(unsafe-cdr"
" lst_271))))"
" fold-var_270))))"
" for-loop_269)"
"(void)"
" lst_268))))))"
"(if(prefab-struct-key"
" v_234)"
"(let-values()"
"(let-values(((v*_276"
" start*_277"
" stop*_278"
" step*_279)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                             \"vector\""
"(lambda(x_280)"
"(vector?"
" x_280))"
"(lambda(x_281)"
"(unsafe-vector-length"
" x_281))"
"(struct->vector"
" v_234)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_282)"
"(lambda(fold-var_283"
" idx_284)"
"(if(unsafe-fx<"
" idx_284"
" stop*_278)"
"(let-values(((e_285)"
"(unsafe-vector-ref"
" v*_276"
" idx_284)))"
"(let-values(((fold-var_286)"
"(let-values()"
"(let-values(((fold-var_288)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_233"
" e_285))"
"(void)))))"
"(values"
" fold-var_288)))))"
"(for-loop_282"
" fold-var_286"
"(unsafe-fx+"
" idx_284"
" 1))))"
" fold-var_283))))"
" for-loop_282)"
"(void)"
" start*_277))))"
"(if(srcloc?"
" v_234)"
"(let-values()"
"(let-values(((v*_289"
" start*_290"
" stop*_291"
" step*_292)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                               \"vector\""
"(lambda(x_293)"
"(vector?"
" x_293))"
"(lambda(x_294)"
"(unsafe-vector-length"
" x_294))"
"(struct->vector"
" v_234)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_295)"
"(lambda(fold-var_296"
" idx_297)"
"(if(unsafe-fx<"
" idx_297"
" stop*_291)"
"(let-values(((e_298)"
"(unsafe-vector-ref"
" v*_289"
" idx_297)))"
"(let-values(((fold-var_299)"
"(let-values()"
"(let-values(((fold-var_301)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_233"
" e_298))"
"(void)))))"
"(values"
" fold-var_301)))))"
"(for-loop_295"
" fold-var_299"
"(unsafe-fx+"
" idx_297"
" 1))))"
" fold-var_296))))"
" for-loop_295)"
"(void)"
" start*_290))))"
"(let-values()"
"(void))))))))))"
"(hash-set!"
" objs_205"
" v_234"
" obj-step_207)"
"(set! obj-step_207"
"(add1"
" obj-step_207)))))))))"
" loop_233)"
" v_232)"
"(if(null? frontier_208)"
"(void)"
"(let-values()"
"(let-values()"
"(begin"
"(set! frontier_208 null)"
"(let-values()"
"(begin"
"(if(list? lst_303)"
"(void)"
"(let-values()(in-list lst_303)))"
"((letrec-values(((for-loop_304)"
"(lambda(fold-var_305"
" lst_306)"
"(if(pair? lst_306)"
"(let-values(((v_307)"
"(unsafe-car"
" lst_306)))"
"(let-values(((fold-var_308)"
"(let-values()"
"(let-values(((fold-var_310)"
"(let-values()"
"(begin"
"(let-values()"
"(frontier-loop_231"
" v_307))"
"(void)))))"
"(values"
" fold-var_310)))))"
"(for-loop_304"
" fold-var_308"
"(unsafe-cdr"
" lst_306))))"
" fold-var_305))))"
" for-loop_304)"
"(void)"
" lst_303)))))))))))"
" frontier-loop_231)"
" v_199)"
"(values))))"
"(let-values(((num-mutables_210)(hash-count mutables_204)))"
"(let-values(((share-step-positions_211)"
"(let-values(((share-steps_311)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if((lambda(ht_313)(hash? ht_313)) ht_312)"
"(void)"
"(let-values()(default-in-hash-keys ht_312)))"
"((letrec-values(((for-loop_314)"
"(lambda(fold-var_315 i_316)"
"(if i_316"
"(let-values(((obj_317)"
"(hash-iterate-key"
" ht_312"
" i_316)))"
"(let-values(((fold-var_318)"
"(let-values()"
"(let-values(((fold-var_320)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" objs_205"
" obj_317))"
" fold-var_319))))"
"(values"
" fold-var_320)))))"
"(for-loop_314"
" fold-var_318"
"(hash-iterate-next"
" ht_312"
" i_316))))"
" fold-var_315))))"
" for-loop_314)"
" null"
"(hash-iterate-first ht_312)))))))"
"(let-values(((lst_321)"
"(let-values(((<13_324) <))"
"(sort7.1 #f #f #f #f share-steps12_323 <13_324))))"
"(begin"
"(if(list? lst_321)(void)(let-values()(in-list lst_321)))"
"(if(exact-nonnegative-integer? start_322)"
"(void)"
"(let-values()(in-naturals start_322)))"
"((letrec-values(((for-loop_325)"
"(lambda(table_326 lst_327 pos_328)"
"(if(if(pair? lst_327) #t #f)"
"(let-values(((step_329)"
"(unsafe-car lst_327)))"
"(let-values(((table_331)"
"(let-values()"
"(let-values(((table_333)"
"(let-values()"
"(let-values(((key_334"
" val_335)"
"(let-values()"
"(values"
" step_329"
" pos_330))))"
"(hash-set"
" table_332"
" key_334"
" val_335)))))"
"(values table_333)))))"
"(for-loop_325"
" table_331"
"(unsafe-cdr lst_327)"
"(+ pos_328 1))))"
" table_326))))"
" for-loop_325)"
" '#hasheqv()"
" lst_321"
" start_322))))))"
"(let-values(((stream_212) null))"
"(let-values(((stream-size_213) 0))"
"(let-values(((next-push-position_214)(lambda() stream-size_213)))"
"(let-values(((quoted?_215)"
"(lambda(pos_336)"
"(let-values(((v_337)"
"(list-ref"
" stream_212"
"(- stream-size_213(add1 pos_336)))))"
"(let-values(((or-part_338)(not(keyword? v_337))))"
"(if or-part_338 or-part_338(eq? '#:quote v_337)))))))"
"(let-values(((ser-reset!_216)"
"(lambda(pos_339)"
"(begin"
"(set! stream_212"
"(list-tail stream_212(- stream-size_213 pos_339)))"
"(set! stream-size_213 pos_339)))))"
"(let-values(((reap-stream!_217)"
"(lambda()"
"(begin0"
"(list->vector(alt-reverse stream_212))"
"(set! stream_212 null)"
"(set! stream-size_213 0)))))"
"(letrec-values(((ser-push!_218)"
"(case-lambda"
"((v_340)"
"(if(hash-ref shares_206 v_340 #f)"
"(let-values()"
"(let-values(((n_341)"
"(hash-ref"
" share-step-positions_211"
"(hash-ref objs_205 v_340))))"
"(begin"
"(ser-push!_218 'tag '#:ref)"
"(ser-push!_218 'exact n_341))))"
"(let-values(((c1_342)"
"(hash-ref mutables_204 v_340 #f)))"
"(if c1_342"
"((lambda(n_343)"
"(begin"
"(ser-push!_218 'tag '#:ref)"
"(ser-push!_218 'exact n_343)))"
" c1_342)"
"(let-values()(ser-push-encoded!_219 v_340))))))"
"((kind_344 v_345)"
"(let-values(((tmp_346) kind_344))"
"(if(equal? tmp_346 'exact)"
"(let-values()"
"(begin"
"(set! stream_212(cons v_345 stream_212))"
"(set! stream-size_213(add1 stream-size_213))))"
"(if(equal? tmp_346 'tag)"
"(let-values()(ser-push!_218 'exact v_345))"
"(if(equal? tmp_346 'reference)"
"(let-values()"
"(if(hash-ref shares_206 v_345 #f)"
"(let-values()"
"(let-values(((n_347)"
"(hash-ref"
" share-step-positions_211"
"(hash-ref"
" objs_205"
" v_345))))"
"(ser-push!_218 'exact n_347)))"
"(let-values(((c2_348)"
"(hash-ref"
" mutables_204"
" v_345"
" #f)))"
"(if c2_348"
"((lambda(n_349)"
"(ser-push!_218 'exact n_349))"
" c2_348)"
"(let-values()"
"(ser-push!_218 v_345))))))"
"(let-values()(ser-push!_218 v_345)))))))))"
"((ser-push-encoded!_219)"
"(lambda(v_350)"
"(if(keyword? v_350)"
"(let-values()"
"(begin"
"(ser-push!_218 'tag '#:quote)"
"(ser-push!_218 'exact v_350)))"
"(if(1/module-path-index? v_350)"
"(let-values()"
"(begin"
"(ser-push!_218 'tag '#:mpi)"
"(ser-push!_218"
" 'exact"
"(add-module-path-index!/pos mpis_200 v_350))))"
"(if(serialize? v_350)"
"(let-values()"
"((serialize-ref v_350)"
" v_350"
" ser-push!_218"
" state_203))"
"(if(if(list? v_350)"
"(if(pair? v_350)(pair?(cdr v_350)) #f)"
" #f)"
"(let-values()"
"(let-values(((start-pos_351)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:list)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
"(length v_350))"
"(values))))"
"(let-values(((all-quoted?_352)"
"(let-values()"
"(begin"
"(if(list? lst_353)"
"(void)"
"(let-values()"
"(in-list"
" lst_353)))"
"((letrec-values(((for-loop_354)"
"(lambda(all-quoted?_355"
" lst_356)"
"(if(pair?"
" lst_356)"
"(let-values(((i_357)"
"(unsafe-car"
" lst_356)))"
"(let-values(((all-quoted?_358)"
"(let-values()"
"(let-values(((all-quoted?_360)"
"(let-values()"
"(let-values(((i-pos_361)"
"(next-push-position_214)))"
"(begin"
"(ser-push!_218"
" i_357)"
"(if all-quoted?_359"
"(quoted?_215"
" i-pos_361)"
" #f))))))"
"(values"
" all-quoted?_360)))))"
"(for-loop_354"
" all-quoted?_358"
"(unsafe-cdr"
" lst_356))))"
" all-quoted?_355))))"
" for-loop_354)"
" #t"
" lst_353)))))"
"(if all-quoted?_352"
"(let-values()"
"(begin"
"(ser-reset!_216 start-pos_351)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218 'exact v_350)))"
"(void)))))))"
"(if(pair? v_350)"
"(let-values()"
"(let-values(((start-pos_362)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:cons)"
"(values))))"
"(let-values(((a-pos_363)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
"(car v_350))"
"(values))))"
"(let-values(((d-pos_364)"
"(next-push-position_214)))"
"(begin"
"(ser-push!_218(cdr v_350))"
"(if(if(quoted?_215 a-pos_363)"
"(quoted?_215 d-pos_364)"
" #f)"
"(let-values()"
"(begin"
"(ser-reset!_216"
" start-pos_362)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350)))"
"(void)))))))))"
"(if(box? v_350)"
"(let-values()"
"(let-values(((start-pos_365)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:box)"
"(values))))"
"(let-values(((v-pos_366)"
"(next-push-position_214)))"
"(begin"
"(ser-push!_218(unbox v_350))"
"(if(quoted?_215 v-pos_366)"
"(let-values()"
"(begin"
"(ser-reset!_216"
" start-pos_365)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350)))"
"(void)))))))"
"(if(vector? v_350)"
"(let-values()"
"(let-values(((start-pos_367)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:vector)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
"(vector-length"
" v_350))"
"(values))))"
"(let-values(((all-quoted?_368)"
"(let-values(((vec_369"
" len_370)"
"(let-values()"
"(begin"
"(if(vector?"
" vec_371)"
"(void)"
"(let-values()"
"(in-vector"
" vec_371)))"
"(values"
" vec_371"
"(unsafe-vector-length"
" vec_371))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_372)"
"(lambda(all-quoted?_373"
" pos_374)"
"(if(unsafe-fx<"
" pos_374"
" len_370)"
"(let-values(((i_375)"
"(unsafe-vector-ref"
" vec_369"
" pos_374)))"
"(let-values(((all-quoted?_376)"
"(let-values()"
"(let-values(((all-quoted?_378)"
"(let-values()"
"(let-values(((i-pos_379)"
"(next-push-position_214)))"
"(begin"
"(ser-push!_218"
" i_375)"
"(if all-quoted?_377"
"(quoted?_215"
" i-pos_379)"
" #f))))))"
"(values"
" all-quoted?_378)))))"
"(for-loop_372"
" all-quoted?_376"
"(unsafe-fx+"
" 1"
" pos_374))))"
" all-quoted?_373))))"
" for-loop_372)"
" #t"
" 0)))))"
"(if all-quoted?_368"
"(let-values()"
"(begin"
"(ser-reset!_216"
" start-pos_367)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350)))"
"(void)))))))"
"(if(hash? v_350)"
"(let-values()"
"(let-values(((start-pos_380)"
"(next-push-position_214)))"
"(let-values(((as-set?_381)"
"(let-values()"
"(begin"
"(if((lambda(ht_385)"
"(hash?"
" ht_385))"
" ht_384)"
"(void)"
"(let-values()"
"(default-in-hash-values"
" ht_384)))"
"((letrec-values(((for-loop_386)"
"(lambda(result_387"
" i_388)"
"(if i_388"
"(let-values(((val_389)"
"(hash-iterate-value"
" ht_384"
" i_388)))"
"(let-values(((result_390)"
"(let-values()"
"(let-values(((result_392)"
"(let-values()"
"(let-values()"
"(eq?"
" val_389"
" #t)))))"
"(values"
" result_392)))))"
"(if(not"
"((lambda x_393"
"(not"
" result_390))"
" val_389))"
"(for-loop_386"
" result_390"
"(hash-iterate-next"
" ht_384"
" i_388))"
" result_390)))"
" result_387))))"
" for-loop_386)"
" #t"
"(hash-iterate-first"
" ht_384))))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
"(if as-set?_381"
"(if(hash-eq?"
" v_350)"
"(let-values()"
" '#:seteq)"
"(if(hash-eqv?"
" v_350)"
"(let-values()"
" '#:seteqv)"
"(let-values()"
" '#:set)))"
"(if(hash-eq?"
" v_350)"
"(let-values()"
" '#:hasheq)"
"(if(hash-eqv?"
" v_350)"
"(let-values()"
" '#:hasheqv)"
"(let-values()"
" '#:hash)))))"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
"(hash-count"
" v_350))"
"(values))))"
"(let-values(((ks_382)"
"(sorted-hash-keys"
" v_350)))"
"(let-values(((all-quoted?_383)"
"(let-values()"
"(begin"
"(if(list?"
" lst_394)"
"(void)"
"(let-values()"
"(in-list"
" lst_394)))"
"((letrec-values(((for-loop_395)"
"(lambda(all-quoted?_396"
" lst_397)"
"(if(pair?"
" lst_397)"
"(let-values(((k_398)"
"(unsafe-car"
" lst_397)))"
"(let-values(((all-quoted?_399)"
"(let-values()"
"(let-values(((all-quoted?_401)"
"(let-values()"
"(let-values(((k-pos_402)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" k_398)"
"(values))))"
"(let-values(((v-pos_403)"
"(next-push-position_214)))"
"(begin"
"(if as-set?_381"
"(void)"
"(let-values()"
"(ser-push!_218"
"(hash-ref"
" v_350"
" k_398))))"
"(if all-quoted?_400"
"(if(quoted?_215"
" k-pos_402)"
"(let-values()"
"(if or-part_404"
" or-part_404"
"(quoted?_215"
" v-pos_403)))"
" #f)"
" #f))))))))"
"(values"
" all-quoted?_401)))))"
"(for-loop_395"
" all-quoted?_399"
"(unsafe-cdr"
" lst_397))))"
" all-quoted?_396))))"
" for-loop_395)"
" #t"
" lst_394)))))"
"(if all-quoted?_383"
"(let-values()"
"(begin"
"(ser-reset!_216"
" start-pos_380)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350)))"
"(void)))))))))"
"(let-values(((c3_405)"
"(prefab-struct-key"
" v_350)))"
"(if c3_405"
"((lambda(k_406)"
"(let-values(((vec_407)"
"(struct->vector"
" v_350)))"
"(let-values(((start-pos_408)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:prefab)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
" k_406)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
"(sub1"
"(vector-length"
" vec_407)))"
"(values))))"
"(let-values(((all-quoted?_409)"
"(let-values(((v*_410"
" start*_411"
" stop*_412"
" step*_413)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                               \"vector\""
"(lambda(x_414)"
"(vector?"
" x_414))"
"(lambda(x_415)"
"(unsafe-vector-length"
" x_415))"
" vec_407"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_416)"
"(lambda(all-quoted?_417"
" idx_418)"
"(if(unsafe-fx<"
" idx_418"
" stop*_412)"
"(let-values(((i_419)"
"(unsafe-vector-ref"
" v*_410"
" idx_418)))"
"(let-values(((all-quoted?_420)"
"(let-values()"
"(let-values(((all-quoted?_422)"
"(let-values()"
"(let-values(((i-pos_423)"
"(next-push-position_214)))"
"(begin"
"(ser-push!_218"
" i_419)"
"(if all-quoted?_421"
"(quoted?_215"
" i-pos_423)"
" #f))))))"
"(values"
" all-quoted?_422)))))"
"(for-loop_416"
" all-quoted?_420"
"(unsafe-fx+"
" idx_418"
" 1))))"
" all-quoted?_417))))"
" for-loop_416)"
" #t"
" start*_411)))))"
"(if all-quoted?_409"
"(let-values()"
"(begin"
"(ser-reset!_216"
" start-pos_408)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350)))"
"(void)))))))))"
" c3_405)"
"(if(srcloc? v_350)"
"(let-values()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:srcloc)"
"(ser-push!_218"
"(srcloc-source v_350))"
"(ser-push!_218"
"(srcloc-line v_350))"
"(ser-push!_218"
"(srcloc-column v_350))"
"(ser-push!_218"
"(srcloc-position v_350))"
"(ser-push!_218"
"(srcloc-span v_350))))"
"(let-values()"
"(begin"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350))))))))))))))))"
"((ser-push-optional-quote!_220)(lambda()(void))))"
"(let-values(((ser-shell!_221)"
"(lambda(v_424)"
"(if(serialize-fill!? v_424)"
"(let-values()"
"((serialize-ref v_424)"
" v_424"
" ser-push!_218"
" state_203))"
"(if(box? v_424)"
"(let-values()(ser-push!_218 'tag '#:box))"
"(if(vector? v_424)"
"(let-values()"
"(begin"
"(ser-push!_218 'tag '#:vector)"
"(ser-push!_218 'exact(vector-length v_424))))"
"(if(hash? v_424)"
"(let-values()"
"(ser-push!_218"
" 'tag"
"(if(hash-eq? v_424)"
"(let-values() '#:hasheq)"
"(if(hash-eqv? v_424)"
"(let-values() '#:hasheqv)"
"(let-values() '#:hash)))))"
"(let-values()"
"(error"
" 'ser-shell"
"                                                                           \"unknown mutable: ~e\""
" v_424)))))))))"
"(let-values(((ser-shell-fill!_222)"
"(lambda(v_425)"
"(if(serialize-fill!? v_425)"
"(let-values()"
"((serialize-fill!-ref v_425)"
" v_425"
" ser-push!_218"
" state_203))"
"(if(box? v_425)"
"(let-values()"
"(begin"
"(ser-push!_218 'tag '#:set-box!)"
"(ser-push!_218(unbox v_425))))"
"(if(vector? v_425)"
"(let-values()"
"(begin"
"(ser-push!_218 'tag '#:set-vector!)"
"(ser-push!_218 'exact(vector-length v_425))"
"(let-values(((vec_426 len_427)"
"(let-values()"
"(begin"
"(if(vector? vec_428)"
"(void)"
"(let-values()"
"(in-vector vec_428)))"
"(values"
" vec_428"
"(unsafe-vector-length"
" vec_428))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_429)"
"(lambda(fold-var_430"
" pos_431)"
"(if(unsafe-fx<"
" pos_431"
" len_427)"
"(let-values(((v_432)"
"(unsafe-vector-ref"
" vec_426"
" pos_431)))"
"(let-values(((fold-var_433)"
"(let-values()"
"(let-values(((fold-var_435)"
"(let-values()"
"(begin"
"(let-values()"
"(ser-push!_218"
" v_432))"
"(void)))))"
"(values"
" fold-var_435)))))"
"(for-loop_429"
" fold-var_433"
"(unsafe-fx+"
" 1"
" pos_431))))"
" fold-var_430))))"
" for-loop_429)"
"(void)"
" 0)))))"
"(if(hash? v_425)"
"(let-values()"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:set-hash!)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
"(hash-count v_425))"
"(values))))"
"(let-values(((ks_436)"
"(sorted-hash-keys v_425)))"
"(let-values()"
"(begin"
"(if(list? lst_437)"
"(void)"
"(let-values()"
"(in-list lst_437)))"
"((letrec-values(((for-loop_438)"
"(lambda(fold-var_439"
" lst_440)"
"(if(pair?"
" lst_440)"
"(let-values(((k_441)"
"(unsafe-car"
" lst_440)))"
"(let-values(((fold-var_442)"
"(let-values()"
"(let-values(((fold-var_444)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(ser-push!_218"
" k_441)"
"(ser-push!_218"
"(hash-ref"
" v_425"
" k_441))))"
"(void)))))"
"(values"
" fold-var_444)))))"
"(for-loop_438"
" fold-var_442"
"(unsafe-cdr"
" lst_440))))"
" fold-var_439))))"
" for-loop_438)"
"(void)"
" lst_437)))))))"
"(let-values()"
"(error"
" 'ser-shell-fill"
"                                                                             \"unknown mutable: ~e\""
" v_425)))))))))"
"(let-values(((rev-mutables_223)"
"(let-values()"
"(begin"
"(if((lambda(ht_446)(hash? ht_446)) ht_445)"
"(void)"
"(let-values()(default-in-hash ht_445)))"
"((letrec-values(((for-loop_447)"
"(lambda(table_448 i_449)"
"(if i_449"
"(let-values(((k_450 v_451)"
"(hash-iterate-key+value"
" ht_445"
" i_449)))"
"(let-values(((table_452)"
"(let-values()"
"(let-values(((table_454)"
"(let-values()"
"(let-values(((key_455"
" val_456)"
"(let-values()"
"(values"
" v_451"
" k_450))))"
"(hash-set"
" table_453"
" key_455"
" val_456)))))"
"(values"
" table_454)))))"
"(for-loop_447"
" table_452"
"(hash-iterate-next"
" ht_445"
" i_449))))"
" table_448))))"
" for-loop_447)"
" '#hasheqv()"
"(hash-iterate-first ht_445))))))"
"(let-values(((mutable-shell-bindings_224)"
"(begin"
"(let-values(((start_457) 0)"
"((end_458)(hash-count mutables_204))"
"((inc_459) 1))"
"(begin"
"(if(if(real? start_457)"
"(if(real? end_458)(real? inc_459) #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range start_457 end_458 inc_459)))"
"((letrec-values(((for-loop_460)"
"(lambda(fold-var_461"
" pos_462)"
"(if(< pos_462 end_458)"
"(let-values()"
"(let-values(((fold-var_464)"
"(let-values()"
"(let-values(((fold-var_466)"
"(let-values()"
"(begin"
"(let-values()"
"(ser-shell!_221"
"(hash-ref"
" rev-mutables_223"
" i_463)))"
"(void)))))"
"(values"
" fold-var_466)))))"
"(for-loop_460"
" fold-var_464"
"(+"
" pos_462"
" inc_459))))"
" fold-var_461))))"
" for-loop_460)"
"(void)"
" start_457)))"
"(reap-stream!_217))))"
"(let-values(((rev-shares_225)"
"(let-values()"
"(begin"
"(if((lambda(ht_468)(hash? ht_468)) ht_467)"
"(void)"
"(let-values()"
"(default-in-hash-keys ht_467)))"
"((letrec-values(((for-loop_469)"
"(lambda(table_470 i_471)"
"(if i_471"
"(let-values(((obj_472)"
"(hash-iterate-key"
" ht_467"
" i_471)))"
"(let-values(((table_473)"
"(let-values()"
"(let-values(((table_475)"
"(let-values()"
"(let-values(((key_476"
" val_477)"
"(let-values()"
"(values"
"(hash-ref"
" share-step-positions_211"
"(hash-ref"
" objs_205"
" obj_472))"
" obj_472))))"
"(hash-set"
" table_474"
" key_476"
" val_477)))))"
"(values"
" table_475)))))"
"(for-loop_469"
" table_473"
"(hash-iterate-next"
" ht_467"
" i_471))))"
" table_470))))"
" for-loop_469)"
" '#hasheqv()"
"(hash-iterate-first ht_467))))))"
"(let-values(((shared-bindings_226)"
"(begin"
"(let-values(((end_479)"
"(+"
" num-mutables_210"
"(hash-count shares_206)))"
"((inc_480) 1))"
"(begin"
"(if(if(real? start_478)"
"(if(real? end_479)"
"(real? inc_480)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range start_478 end_479 inc_480)))"
"((letrec-values(((for-loop_481)"
"(lambda(fold-var_482"
" pos_483)"
"(if(<"
" pos_483"
" end_479)"
"(let-values()"
"(let-values(((fold-var_485)"
"(let-values()"
"(let-values(((fold-var_487)"
"(let-values()"
"(begin"
"(let-values()"
"(ser-push-encoded!_219"
"(hash-ref"
" rev-shares_225"
" i_484)))"
"(void)))))"
"(values"
" fold-var_487)))))"
"(for-loop_481"
" fold-var_485"
"(+"
" pos_483"
" inc_480))))"
" fold-var_482))))"
" for-loop_481)"
"(void)"
" start_478)))"
"(reap-stream!_217))))"
"(let-values(((mutable-fills_227)"
"(begin"
"(let-values(((start_488) 0)"
"((end_489)"
"(hash-count mutables_204))"
"((inc_490) 1))"
"(begin"
"(if(if(real? start_488)"
"(if(real? end_489)"
"(real? inc_490)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range"
" start_488"
" end_489"
" inc_490)))"
"((letrec-values(((for-loop_491)"
"(lambda(fold-var_492"
" pos_493)"
"(if(<"
" pos_493"
" end_489)"
"(let-values()"
"(let-values(((fold-var_495)"
"(let-values()"
"(let-values(((fold-var_497)"
"(let-values()"
"(begin"
"(let-values()"
"(ser-shell-fill!_222"
"(hash-ref"
" rev-mutables_223"
" i_494)))"
"(void)))))"
"(values"
" fold-var_497)))))"
"(for-loop_491"
" fold-var_495"
"(+"
" pos_493"
" inc_490))))"
" fold-var_492))))"
" for-loop_491)"
"(void)"
" start_488)))"
"(reap-stream!_217))))"
"(list"
" 'deserialize"
" mpi-vector-id"
"(if syntax-support?_201 inspector-id #f)"
"(if syntax-support?_201 bulk-binding-registry-id #f)"
"(list 'quote(hash-count mutables_204))"
"(list 'quote mutable-shell-bindings_224)"
"(list 'quote(hash-count shares_206))"
"(list 'quote shared-bindings_226)"
"(list 'quote mutable-fills_227)"
"(list"
" 'quote"
"(begin"
"(ser-push!_218 v_199)"
"(reap-stream!_217)))))))))))))))))))))))))))))))))))"
"(define-values"
"(sorted-hash-keys)"
"(lambda(ht_515)"
"(let-values(((ks_516)(hash-keys ht_515)))"
"(if(null? ks_516)"
"(let-values() ks_516)"
"(if(null?(cdr ks_516))"
"(let-values() ks_516)"
"(if(andmap2 symbol? ks_516)"
"(let-values()(let-values(((symbol<?15_518) symbol<?))(sort7.1 #f #f #f #f ks14_517 symbol<?15_518)))"
"(if(andmap2 scope? ks_516)"
"(let-values()(let-values()(sort7.1 #f #f #f #f ks16_519 scope<?17_520)))"
"(if(andmap2 shifted-multi-scope? ks_516)"
"(let-values()(let-values()(sort7.1 #f #f #f #f ks18_521 shifted-multi-scope<?19_522)))"
"(if(andmap2 real? ks_516)"
"(let-values()(let-values(((<21_524) <))(sort7.1 #f #f #f #f ks20_523 <21_524)))"
"(let-values() ks_516))))))))))"
"(define-values"
"(deserialize)"
"(lambda(mpis_525"
" inspector_526"
" bulk-binding-registry_527"
" num-mutables_528"
" mutable-vec_529"
" num-shared_530"
" shared-vec_531"
" mutable-fill-vec_532"
" result-vec_533)"
"(let-values(((shared_534)(make-vector(+ num-mutables_528 num-shared_530) 'uninit)))"
"(let-values((()"
"(begin"
"(let-values(((start_537) 0)((inc_539) 1))"
"(begin"
"(if(if(real? start_537)(if(real? end_538)(real? inc_539) #f) #f)"
"(void)"
"(let-values()(in-range start_537 end_538 inc_539)))"
"((letrec-values(((for-loop_540)"
"(lambda(pos_541 pos_542)"
"(if(< pos_542 end_538)"
"(let-values()"
"(let-values(((pos_544)"
"(let-values()"
"(let-values(((pos_546)"
"(let-values()"
"(let-values(((d_547 next-pos_548)"
"(decode-shell"
" mutable-vec_529"
" pos_545"
" mpis_525"
" inspector_526"
" bulk-binding-registry_527"
" shared_534)))"
"(begin"
"(vector-set!"
" shared_534"
" i_543"
" d_547)"
" next-pos_548)))))"
"(values pos_546)))))"
"(for-loop_540 pos_544(+ pos_542 inc_539))))"
" pos_541))))"
" for-loop_540)"
" 0"
" start_537)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((end_550)(+ num-mutables_528 num-shared_530))((inc_551) 1))"
"(begin"
"(if(if(real? start_549)(if(real? end_550)(real? inc_551) #f) #f)"
"(void)"
"(let-values()(in-range start_549 end_550 inc_551)))"
"((letrec-values(((for-loop_552)"
"(lambda(pos_553 pos_554)"
"(if(< pos_554 end_550)"
"(let-values()"
"(let-values(((pos_556)"
"(let-values()"
"(let-values(((pos_558)"
"(let-values()"
"(let-values(((d_559 next-pos_560)"
"(decode"
" shared-vec_531"
" pos_557"
" mpis_525"
" inspector_526"
" bulk-binding-registry_527"
" shared_534)))"
"(begin"
"(vector-set!"
" shared_534"
" i_555"
" d_559)"
" next-pos_560)))))"
"(values pos_558)))))"
"(for-loop_552 pos_556(+ pos_554 inc_551))))"
" pos_553))))"
" for-loop_552)"
" 0"
" start_549)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((start_561) 0)"
"((inc_563) 1)"
"((vec_564 len_565)"
"(let-values()"
"(begin"
"(if(vector? vec_566)(void)(let-values()(in-vector vec_566)))"
"(values vec_566(unsafe-vector-length vec_566))))))"
"(begin"
"(if(if(real? start_561)(if(real? end_562)(real? inc_563) #f) #f)"
"(void)"
"(let-values()(in-range start_561 end_562 inc_563)))"
" #f"
"((letrec-values(((for-loop_567)"
"(lambda(pos_568 pos_569 pos_570)"
"(if(if(< pos_569 end_562)(unsafe-fx< pos_570 len_565) #f)"
"(let-values(((v_572)(unsafe-vector-ref vec_564 pos_570)))"
"(let-values(((pos_573)"
"(let-values()"
"(let-values(((pos_575)"
"(let-values()"
"(decode-fill!"
" v_572"
" mutable-fill-vec_532"
" pos_574"
" mpis_525"
" inspector_526"
" bulk-binding-registry_527"
" shared_534))))"
"(values pos_575)))))"
"(for-loop_567"
" pos_573"
"(+ pos_569 inc_563)"
"(unsafe-fx+ 1 pos_570))))"
" pos_568))))"
" for-loop_567)"
" 0"
" start_561"
" 0)))"
"(values))))"
"(let-values(((result_535 done-pos_536)"
"(decode result-vec_533 0 mpis_525 inspector_526 bulk-binding-registry_527 shared_534)))"
" result_535)))))))"
"(define-values"
"(decode-shell)"
"(lambda(vec_576 pos_577 mpis_578 inspector_579 bulk-binding-registry_580 shared_581)"
"(let-values(((tmp_582)(vector-ref vec_576 pos_577)))"
"(if(equal? tmp_582 '#:box)"
"(let-values()(values(box #f)(add1 pos_577)))"
"(if(equal? tmp_582 '#:vector)"
"(let-values()(values(make-vector(vector-ref vec_576(add1 pos_577)))(+ pos_577 2)))"
"(if(equal? tmp_582 '#:hash)"
"(let-values()(values(make-hasheq)(add1 pos_577)))"
"(if(equal? tmp_582 '#:hasheq)"
"(let-values()(values(make-hasheq)(add1 pos_577)))"
"(if(equal? tmp_582 '#:hasheqv)"
"(let-values()(values(make-hasheqv)(add1 pos_577)))"
"(let-values()"
"(decode vec_576 pos_577 mpis_578 inspector_579 bulk-binding-registry_580 shared_581))))))))))"
"(define-values"
"(decode)"
"(lambda(vec_583 pos_584 mpis_585 inspector_586 bulk-binding-registry_587 shared_588)"
"(let-values()"
"(let-values(((tmp_650)(vector-ref vec_583 pos_584)))"
"(let-values(((index_651)"
"(if(keyword? tmp_650)"
"(hash-ref"
" '#hasheq((#:scope+kind . 17)"
"(#:seteqv . 14)"
"(#:ref . 1)"
"(#:list . 12)"
"(#:vector . 12)"
"(#:module-binding . 23)"
"(#:set . 14)"
"(#:srcloc . 7)"
"(#:bulk-binding-at . 21)"
"(#:multi-scope . 18)"
"(#:hasheq . 13)"
"(#:simple-module-binding . 24)"
"(#:scope . 16)"
"(#:bulk-binding-registry . 3)"
"(#:hash . 13)"
"(#:shifted-multi-scope . 19)"
"(#:mpi . 9)"
"(#:quote . 8)"
"(#:prefab . 15)"
"(#:box . 10)"
"(#:local-binding . 25)"
"(#:bulk-binding . 26)"
"(#:inspector . 2)"
"(#:table-with-bulk-bindings . 20)"
"(#:seteq . 14)"
"(#:provided . 27)"
"(#:syntax . 4)"
"(#:cons . 11)"
"(#:hasheqv . 13)"
"(#:datum->syntax . 5)"
"(#:syntax+props . 6)"
"(#:representative-scope . 22))"
" tmp_650"
"(lambda() 0))"
" 0)))"
"(if(unsafe-fx< index_651 13)"
"(if(unsafe-fx< index_651 6)"
"(if(unsafe-fx< index_651 2)"
"(if(unsafe-fx< index_651 1)"
"(let-values()(values(vector-ref vec_583 pos_584)(add1 pos_584)))"
"(let-values()(values(vector-ref shared_588(vector-ref vec_583(add1 pos_584)))(+ pos_584 2))))"
"(if(unsafe-fx< index_651 3)"
"(let-values()(values inspector_586(add1 pos_584)))"
"(if(unsafe-fx< index_651 4)"
"(let-values()(values bulk-binding-registry_587(add1 pos_584)))"
"(if(unsafe-fx< index_651 5)"
"(let-values()"
"(let-values(((content_652 next-pos_653)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((context_654 next-pos_655)"
"(let-values(((i_656)(vector-ref vec_583 next-pos_653)))"
"(if(exact-integer? i_656)"
"(values(vector-ref shared_588 i_656)(add1 next-pos_653))"
"(decode"
" vec_583"
" next-pos_653"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(let-values(((srcloc_657 next-pos_658)"
"(let-values(((i_659)(vector-ref vec_583 next-pos_655)))"
"(if(exact-integer? i_659)"
"(values(vector-ref shared_588 i_659)(add1 next-pos_655))"
"(decode"
" vec_583"
" next-pos_655"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(values"
"(deserialize-syntax content_652 context_654 srcloc_657 #f #f inspector_586)"
" next-pos_658)))))"
"(let-values()"
"(let-values(((content_660 next-pos_661)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((context_662 next-pos_663)"
"(let-values(((i_664)(vector-ref vec_583 next-pos_661)))"
"(if(exact-integer? i_664)"
"(values(vector-ref shared_588 i_664)(add1 next-pos_661))"
"(decode"
" vec_583"
" next-pos_661"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(let-values(((srcloc_665 next-pos_666)"
"(let-values(((i_667)(vector-ref vec_583 next-pos_663)))"
"(if(exact-integer? i_667)"
"(values(vector-ref shared_588 i_667)(add1 next-pos_663))"
"(decode"
" vec_583"
" next-pos_663"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(values"
"(deserialize-datum->syntax content_660 context_662 srcloc_665 inspector_586)"
" next-pos_666)))))))))"
"(if(unsafe-fx< index_651 9)"
"(if(unsafe-fx< index_651 7)"
"(let-values()"
"(let-values(((content_668 next-pos_669)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((context_670 next-pos_671)"
"(let-values(((i_672)(vector-ref vec_583 next-pos_669)))"
"(if(exact-integer? i_672)"
"(values(vector-ref shared_588 i_672)(add1 next-pos_669))"
"(decode"
" vec_583"
" next-pos_669"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(let-values(((srcloc_673 next-pos_674)"
"(let-values(((i_675)(vector-ref vec_583 next-pos_671)))"
"(if(exact-integer? i_675)"
"(values(vector-ref shared_588 i_675)(add1 next-pos_671))"
"(decode"
" vec_583"
" next-pos_671"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(let-values(((props_676 next-pos_677)"
"(decode"
" vec_583"
" next-pos_674"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((tamper_678 next-pos_679)"
"(decode"
" vec_583"
" next-pos_677"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-syntax"
" content_668"
" context_670"
" srcloc_673"
" props_676"
" tamper_678"
" inspector_586)"
" next-pos_679)))))))"
"(if(unsafe-fx< index_651 8)"
"(let-values()"
"(let-values(((source_680 next-pos_681)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((line_682 next-pos_683)"
"(decode"
" vec_583"
" next-pos_681"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((column_684 next-pos_685)"
"(decode"
" vec_583"
" next-pos_683"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((position_686 next-pos_687)"
"(decode"
" vec_583"
" next-pos_685"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((span_688 next-pos_689)"
"(decode"
" vec_583"
" next-pos_687"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(srcloc source_680 line_682 column_684 position_686 span_688)"
" next-pos_689)))))))"
"(let-values()(values(vector-ref vec_583(add1 pos_584))(+ pos_584 2)))))"
"(if(unsafe-fx< index_651 10)"
"(let-values()(values(vector-ref mpis_585(vector-ref vec_583(add1 pos_584)))(+ pos_584 2)))"
"(if(unsafe-fx< index_651 11)"
"(let-values()"
"(let-values(((v_690 next-pos_691)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(box-immutable v_690) next-pos_691)))"
"(if(unsafe-fx< index_651 12)"
"(let-values()"
"(let-values(((a_692 next-pos_693)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((d_694 next-pos_695)"
"(decode"
" vec_583"
" next-pos_693"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(cons a_692 d_694) next-pos_695))))"
"(let-values()"
"(let-values(((len_696)(vector-ref vec_583(add1 pos_584))))"
"(let-values(((r_697)(make-vector len_696)))"
"(let-values(((next-pos_698)"
"(let-values(((start_699) 0)((inc_701) 1))"
"(begin"
"(if(if(real? start_699)(if(real? end_700)(real? inc_701) #f) #f)"
"(void)"
"(let-values()(in-range start_699 end_700 inc_701)))"
"((letrec-values(((for-loop_702)"
"(lambda(pos_703 pos_704)"
"(if(< pos_704 end_700)"
"(let-values()"
"(let-values(((pos_706)"
"(let-values()"
"(let-values(((pos_708)"
"(let-values()"
"(let-values(((v_709"
" next-pos_710)"
"(let-values(((v_711"
" next-pos_712)"
"(decode"
" vec_583"
" pos_707"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
" v_711"
" next-pos_712))))"
"(begin"
"(vector-set!"
" r_697"
" i_705"
" v_709)"
" next-pos_710)))))"
"(values pos_708)))))"
"(for-loop_702 pos_706(+ pos_704 inc_701))))"
" pos_703))))"
" for-loop_702)"
"(+ pos_584 2)"
" start_699)))))"
"(values"
"(if(eq?(vector-ref vec_583 pos_584) '#:list)"
"(vector->list r_697)"
"(vector->immutable-vector r_697))"
" next-pos_698))))))))))"
"(if(unsafe-fx< index_651 20)"
"(if(unsafe-fx< index_651 16)"
"(if(unsafe-fx< index_651 14)"
"(let-values()"
"(let-values(((ht_713)"
"(let-values(((tmp_715)(vector-ref vec_583 pos_584)))"
"(if(equal? tmp_715 '#:hash)"
"(let-values()(hash))"
"(if(equal? tmp_715 '#:hasheq)"
"(let-values()(hasheq))"
"(if(equal? tmp_715 '#:hasheqv)"
"(let-values()(hasheqv))"
"(let-values()(void))))))))"
"(let-values(((len_714)(vector-ref vec_583(add1 pos_584))))"
"(let-values(((start_716) 0)((inc_718) 1))"
"(begin"
"(if(if(real? start_716)(if(real? end_717)(real? inc_718) #f) #f)"
"(void)"
"(let-values()(in-range start_716 end_717 inc_718)))"
"((letrec-values(((for-loop_719)"
"(lambda(ht_720 pos_721 pos_722)"
"(if(< pos_722 end_717)"
"(let-values()"
"(let-values(((ht_724 pos_725)"
"(let-values()"
"(let-values(((ht_728 pos_729)"
"(let-values()"
"(let-values(((k_730 next-pos_731)"
"(decode"
" vec_583"
" pos_727"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((v_732 next-pos_733)"
"(decode"
" vec_583"
" next-pos_731"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(hash-set ht_726 k_730 v_732)"
" next-pos_733))))))"
"(values ht_728 pos_729)))))"
"(for-loop_719 ht_724 pos_725(+ pos_722 inc_718))))"
"(values ht_720 pos_721)))))"
" for-loop_719)"
" ht_713"
"(+ pos_584 2)"
" start_716))))))"
"(if(unsafe-fx< index_651 15)"
"(let-values()"
"(let-values(((s_734)"
"(let-values(((tmp_736)(vector-ref vec_583 pos_584)))"
"(if(equal? tmp_736 '#:set)"
"(let-values()(set))"
"(if(equal? tmp_736 '#:seteq)"
"(let-values()(seteq))"
"(if(equal? tmp_736 '#:seteqv)"
"(let-values()(seteqv))"
"(let-values()(void))))))))"
"(let-values(((len_735)(vector-ref vec_583(add1 pos_584))))"
"(let-values(((start_737) 0)((inc_739) 1))"
"(begin"
"(if(if(real? start_737)(if(real? end_738)(real? inc_739) #f) #f)"
"(void)"
"(let-values()(in-range start_737 end_738 inc_739)))"
"((letrec-values(((for-loop_740)"
"(lambda(s_741 pos_742 pos_743)"
"(if(< pos_743 end_738)"
"(let-values()"
"(let-values(((s_745 pos_746)"
"(let-values()"
"(let-values(((s_749 pos_750)"
"(let-values()"
"(let-values(((k_751 next-pos_752)"
"(decode"
" vec_583"
" pos_748"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(set-add s_747 k_751)"
" next-pos_752)))))"
"(values s_749 pos_750)))))"
"(for-loop_740 s_745 pos_746(+ pos_743 inc_739))))"
"(values s_741 pos_742)))))"
" for-loop_740)"
" s_734"
"(+ pos_584 2)"
" start_737))))))"
"(let-values()"
"(let-values(((key_753 next-pos_754)"
"(let-values(((k_758 next-pos_759)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values k_758 next-pos_759))))"
"(let-values(((len_755)(vector-ref vec_583 next-pos_754)))"
"(let-values(((r_756 done-pos_757)"
"(let-values(((start_760) 0)((inc_762) 1))"
"(begin"
"(if(if(real? start_760)(if(real? end_761)(real? inc_762) #f) #f)"
"(void)"
"(let-values()(in-range start_760 end_761 inc_762)))"
"((letrec-values(((for-loop_763)"
"(lambda(r_764 pos_765 pos_766)"
"(if(< pos_766 end_761)"
"(let-values()"
"(let-values(((r_768 pos_769)"
"(let-values()"
"(let-values(((r_772 pos_773)"
"(let-values()"
"(let-values(((v_774"
" next-pos_775)"
"(decode"
" vec_583"
" pos_771"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(cons"
" v_774"
" r_770)"
" next-pos_775)))))"
"(values r_772 pos_773)))))"
"(for-loop_763 r_768 pos_769(+ pos_766 inc_762))))"
"(values r_764 pos_765)))))"
" for-loop_763)"
" null"
"(add1 next-pos_754)"
" start_760)))))"
"(values(apply make-prefab-struct key_753(alt-reverse r_756)) done-pos_757)))))))"
"(if(unsafe-fx< index_651 17)"
"(let-values()(values(deserialize-scope)(add1 pos_584)))"
"(if(unsafe-fx< index_651 18)"
"(let-values()"
"(let-values(((kind_776 next-pos_777)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-scope kind_776) next-pos_777)))"
"(if(unsafe-fx< index_651 19)"
"(let-values()"
"(let-values(((name_778 next-pos_779)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((scopes_780 next-pos_781)"
"(decode"
" vec_583"
" next-pos_779"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-multi-scope name_778 scopes_780) next-pos_781))))"
"(let-values()"
"(let-values(((phase_782 next-pos_783)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((multi-scope_784 next-pos_785)"
"(decode"
" vec_583"
" next-pos_783"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-shifted-multi-scope phase_782 multi-scope_784) next-pos_785))))))))"
"(if(unsafe-fx< index_651 23)"
"(if(unsafe-fx< index_651 21)"
"(let-values()"
"(let-values(((syms_786 next-pos_787)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((bulk-bindings_788 next-pos_789)"
"(decode"
" vec_583"
" next-pos_787"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-table-with-bulk-bindings syms_786 bulk-bindings_788) next-pos_789))))"
"(if(unsafe-fx< index_651 22)"
"(let-values()"
"(let-values(((scopes_790 next-pos_791)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((bulk_792 next-pos_793)"
"(decode"
" vec_583"
" next-pos_791"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-bulk-binding-at scopes_790 bulk_792) next-pos_793))))"
"(let-values()"
"(let-values(((kind_794 next-pos_795)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((phase_796 next-pos_797)"
"(decode"
" vec_583"
" next-pos_795"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-representative-scope kind_794 phase_796) next-pos_797))))))"
"(if(unsafe-fx< index_651 25)"
"(if(unsafe-fx< index_651 24)"
"(let-values()"
"(let-values(((module_798 next-pos_799)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((sym_800 next-pos_801)"
"(decode"
" vec_583"
" next-pos_799"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((phase_802 next-pos_803)"
"(decode"
" vec_583"
" next-pos_801"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((nominal-module_804 next-pos_805)"
"(decode"
" vec_583"
" next-pos_803"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((nominal-phase_806 next-pos_807)"
"(decode"
" vec_583"
" next-pos_805"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((nominal-sym_808 next-pos_809)"
"(decode"
" vec_583"
" next-pos_807"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((nominal-require-phase_810 next-pos_811)"
"(decode"
" vec_583"
" next-pos_809"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((free=id_812 next-pos_813)"
"(decode"
" vec_583"
" next-pos_811"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((extra-inspector_814 next-pos_815)"
"(decode"
" vec_583"
" next-pos_813"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((extra-nominal-bindings_816 next-pos_817)"
"(decode"
" vec_583"
" next-pos_815"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-full-module-binding"
" module_798"
" sym_800"
" phase_802"
" nominal-module_804"
" nominal-phase_806"
" nominal-sym_808"
" nominal-require-phase_810"
" free=id_812"
" extra-inspector_814"
" extra-nominal-bindings_816)"
" next-pos_817))))))))))))"
"(let-values()"
"(let-values(((module_818 next-pos_819)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((sym_820 next-pos_821)"
"(decode"
" vec_583"
" next-pos_819"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((phase_822 next-pos_823)"
"(decode"
" vec_583"
" next-pos_821"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((nominal-module_824 next-pos_825)"
"(decode"
" vec_583"
" next-pos_823"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-simple-module-binding module_818 sym_820 phase_822 nominal-module_824)"
" next-pos_825)))))))"
"(if(unsafe-fx< index_651 26)"
"(let-values()"
"(let-values(((key_826 next-pos_827)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((free=id_828 next-pos_829)"
"(decode"
" vec_583"
" next-pos_827"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-full-local-binding key_826 free=id_828) next-pos_829))))"
"(if(unsafe-fx< index_651 27)"
"(let-values()"
"(let-values(((prefix_830 next-pos_831)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((excepts_832 next-pos_833)"
"(decode"
" vec_583"
" next-pos_831"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((mpi_834 next-pos_835)"
"(decode"
" vec_583"
" next-pos_833"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((provide-phase-level_836 next-pos_837)"
"(decode"
" vec_583"
" next-pos_835"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((phase-shift_838 next-pos_839)"
"(decode"
" vec_583"
" next-pos_837"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((bulk-binding-registry_840 next-pos_841)"
"(decode"
" vec_583"
" next-pos_839"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-bulk-binding"
" prefix_830"
" excepts_832"
" mpi_834"
" provide-phase-level_836"
" phase-shift_838"
" bulk-binding-registry_840)"
" next-pos_841))))))))"
"(let-values()"
"(let-values(((binding_842 next-pos_843)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((protected?_844 next-pos_845)"
"(decode"
" vec_583"
" next-pos_843"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((syntax?_846 next-pos_847)"
"(decode"
" vec_583"
" next-pos_845"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-provided binding_842 protected?_844 syntax?_846)"
" next-pos_847))))))))))))))))"
"(define-values"
"(decode-fill!)"
"(lambda(v_848 vec_849 pos_850 mpis_851 inspector_852 bulk-binding-registry_853 shared_854)"
"(let-values(((tmp_855)(vector-ref vec_849 pos_850)))"
"(if(equal? tmp_855 #f)"
"(let-values()(add1 pos_850))"
"(if(equal? tmp_855 '#:set-box!)"
"(let-values()"
"(let-values(((c_856 next-pos_857)"
"(decode vec_849(add1 pos_850) mpis_851 inspector_852 bulk-binding-registry_853 shared_854)))"
"(begin(set-box! v_848 c_856) next-pos_857)))"
"(if(equal? tmp_855 '#:set-vector!)"
"(let-values()"
"(let-values(((len_858)(vector-ref vec_849(add1 pos_850))))"
"(let-values(((start_859) 0)((inc_861) 1))"
"(begin"
"(if(if(real? start_859)(if(real? end_860)(real? inc_861) #f) #f)"
"(void)"
"(let-values()(in-range start_859 end_860 inc_861)))"
"((letrec-values(((for-loop_862)"
"(lambda(pos_863 pos_864)"
"(if(< pos_864 end_860)"
"(let-values()"
"(let-values(((pos_866)"
"(let-values()"
"(let-values(((pos_868)"
"(let-values()"
"(let-values(((c_869 next-pos_870)"
"(decode"
" vec_849"
" pos_867"
" mpis_851"
" inspector_852"
" bulk-binding-registry_853"
" shared_854)))"
"(begin"
"(vector-set! v_848 i_865 c_869)"
" next-pos_870)))))"
"(values pos_868)))))"
"(for-loop_862 pos_866(+ pos_864 inc_861))))"
" pos_863))))"
" for-loop_862)"
"(+ pos_850 2)"
" start_859)))))"
"(if(equal? tmp_855 '#:set-hash!)"
"(let-values()"
"(let-values(((len_871)(vector-ref vec_849(add1 pos_850))))"
"(let-values(((start_872) 0)((inc_874) 1))"
"(begin"
"(if(if(real? start_872)(if(real? end_873)(real? inc_874) #f) #f)"
"(void)"
"(let-values()(in-range start_872 end_873 inc_874)))"
"((letrec-values(((for-loop_875)"
"(lambda(pos_876 pos_877)"
"(if(< pos_877 end_873)"
"(let-values()"
"(let-values(((pos_879)"
"(let-values()"
"(let-values(((pos_881)"
"(let-values()"
"(let-values(((key_882 next-pos_883)"
"(decode"
" vec_849"
" pos_880"
" mpis_851"
" inspector_852"
" bulk-binding-registry_853"
" shared_854)))"
"(let-values(((val_884 done-pos_885)"
"(decode"
" vec_849"
" next-pos_883"
" mpis_851"
" inspector_852"
" bulk-binding-registry_853"
" shared_854)))"
"(begin"
"(hash-set! v_848 key_882 val_884)"
" done-pos_885))))))"
"(values pos_881)))))"
"(for-loop_875 pos_879(+ pos_877 inc_874))))"
" pos_876))))"
" for-loop_875)"
"(+ pos_850 2)"
" start_872)))))"
"(if(equal? tmp_855 '#:scope-fill!)"
"(let-values()"
"(let-values(((c_886 next-pos_887)"
"(decode"
" vec_849"
"(add1 pos_850)"
" mpis_851"
" inspector_852"
" bulk-binding-registry_853"
" shared_854)))"
"(begin(deserialize-scope-fill! v_848 c_886) next-pos_887)))"
"(if(equal? tmp_855 '#:representative-scope-fill!)"
"(let-values()"
"(let-values(((a_888 next-pos_889)"
"(decode"
" vec_849"
"(add1 pos_850)"
" mpis_851"
" inspector_852"
" bulk-binding-registry_853"
" shared_854)))"
"(let-values(((d_890 done-pos_891)"
"(decode"
" vec_849"
" next-pos_889"
" mpis_851"
" inspector_852"
" bulk-binding-registry_853"
" shared_854)))"
"(begin(deserialize-representative-scope-fill! v_848 a_888 d_890) done-pos_891))))"
"                  (let-values () (error 'deserialize \"bad fill encoding: ~v\" (vector-ref vec_849 pos_850))))))))))))"
"(define-values"
"(find-reachable-scopes)"
"(lambda(v_892)"
"(let-values(((seen_893)(make-hasheq)))"
"(let-values(((reachable-scopes_894)(seteq)))"
"(let-values(((scope-triggers_895)(make-hasheq)))"
"(begin"
"((letrec-values(((loop_896)"
"(lambda(v_897)"
"(if(interned-literal? v_897)"
"(let-values()(void))"
"(if(hash-ref seen_893 v_897 #f)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(hash-set! seen_893 v_897 #t)"
"(if(scope-with-bindings? v_897)"
"(let-values()"
"(let-values((()"
"(begin"
"(set! reachable-scopes_894"
"(set-add reachable-scopes_894 v_897))"
"(values))))"
"(let-values((()"
"(begin((reach-scopes-ref v_897) v_897 loop_896)(values))))"
"(let-values(((l_898)(hash-ref scope-triggers_895 v_897 null)))"
"(begin"
"(let-values()"
"(begin"
"(if(list? lst_899)(void)(let-values()(in-list lst_899)))"
"((letrec-values(((for-loop_900)"
"(lambda(fold-var_901 lst_902)"
"(if(pair? lst_902)"
"(let-values(((v_903)"
"(unsafe-car lst_902)))"
"(let-values(((fold-var_904)"
"(let-values()"
"(let-values(((fold-var_906)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_896"
" v_903))"
"(void)))))"
"(values"
" fold-var_906)))))"
"(for-loop_900"
" fold-var_904"
"(unsafe-cdr lst_902))))"
" fold-var_901))))"
" for-loop_900)"
"(void)"
" lst_899)))"
"((scope-with-bindings-ref v_897)"
" v_897"
" reachable-scopes_894"
" loop_896"
"(lambda(sc-unreachable_907 b_908)"
"(hash-update!"
" scope-triggers_895"
" sc-unreachable_907"
"(lambda(l_909)(cons b_908 l_909))"
" null))))))))"
"(if(reach-scopes? v_897)"
"(let-values()((reach-scopes-ref v_897) v_897 loop_896))"
"(if(pair? v_897)"
"(let-values()(begin(loop_896(car v_897))(loop_896(cdr v_897))))"
"(if(vector? v_897)"
"(let-values()"
"(let-values(((vec_910 len_911)"
"(let-values()"
"(begin"
"(if(vector? vec_912)"
"(void)"
"(let-values()(in-vector vec_912)))"
"(values vec_912(unsafe-vector-length vec_912))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_913)"
"(lambda(fold-var_914 pos_915)"
"(if(unsafe-fx< pos_915 len_911)"
"(let-values(((e_916)"
"(unsafe-vector-ref"
" vec_910"
" pos_915)))"
"(let-values(((fold-var_917)"
"(let-values()"
"(let-values(((fold-var_919)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_896"
" e_916))"
"(void)))))"
"(values"
" fold-var_919)))))"
"(for-loop_913"
" fold-var_917"
"(unsafe-fx+ 1 pos_915))))"
" fold-var_914))))"
" for-loop_913)"
"(void)"
" 0))))"
"(if(box? v_897)"
"(let-values()(loop_896(unbox v_897)))"
"(if(hash? v_897)"
"(let-values()"
"(let-values()"
"(begin"
"(if((lambda(ht_921)(hash? ht_921)) ht_920)"
"(void)"
"(let-values()(default-in-hash ht_920)))"
"((letrec-values(((for-loop_922)"
"(lambda(fold-var_923 i_924)"
"(if i_924"
"(let-values(((k_925 v_926)"
"(hash-iterate-key+value"
" ht_920"
" i_924)))"
"(let-values(((fold-var_927)"
"(let-values()"
"(let-values(((fold-var_929)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_896"
" k_925)"
"(loop_896"
" v_926)))"
"(void)))))"
"(values"
" fold-var_929)))))"
"(for-loop_922"
" fold-var_927"
"(hash-iterate-next ht_920 i_924))))"
" fold-var_923))))"
" for-loop_922)"
"(void)"
"(hash-iterate-first ht_920)))))"
"(if(prefab-struct-key v_897)"
"(let-values()"
"(let-values(((v*_930 start*_931 stop*_932 step*_933)"
"(normalise-inputs"
" 'in-vector"
"                                                                       \"vector\""
"(lambda(x_934)(vector? x_934))"
"(lambda(x_935)(unsafe-vector-length x_935))"
"(struct->vector v_897)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_936)"
"(lambda(fold-var_937 idx_938)"
"(if(unsafe-fx< idx_938 stop*_932)"
"(let-values(((e_939)"
"(unsafe-vector-ref"
" v*_930"
" idx_938)))"
"(let-values(((fold-var_940)"
"(let-values()"
"(let-values(((fold-var_942)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_896"
" e_939))"
"(void)))))"
"(values"
" fold-var_942)))))"
"(for-loop_936"
" fold-var_940"
"(unsafe-fx+ idx_938 1))))"
" fold-var_937))))"
" for-loop_936)"
"(void)"
" start*_931))))"
"(let-values()(void))))))))))))))))"
" loop_896)"
" v_892)"
" reachable-scopes_894))))))"
"(define-values"
"(deserialize-imports)"
" '(deserialize-module-path-indexes syntax-module-path-index-shift syntax-shift-phase-level module-use deserialize))"
"(define-values"
"(deserialize-instance)"
"(1/make-instance"
" 'deserialize"
" #f"
" 'deserialize-module-path-indexes"
" deserialize-module-path-indexes"
" 'syntax-module-path-index-shift"
" syntax-module-path-index-shift17.1"
" 'syntax-shift-phase-level"
" syntax-shift-phase-level$1"
" 'module-use"
" module-use1.1"
" 'deserialize"
" deserialize))"
"(void)"
"(void)"
"(define-values"
"(struct:parsed parsed1.1 parsed? parsed-s)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()(let-values()(make-struct-type 'parsed #f 1 0 #f null #f #f '(0) #f 'parsed)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 's))))"
"(define-values"
"(struct:parsed-id parsed-id2.1 parsed-id? parsed-id-binding)"
"(let-values(((struct:_21 make-_22 ?_23 -ref_24 -set!_25)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-id"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-id)))))"
"(values struct:_21 make-_22 ?_23(make-struct-field-accessor -ref_24 0 'binding))))"
"(define-values"
"(struct:parsed-primitive-id parsed-primitive-id3.1 parsed-primitive-id?)"
"(let-values(((struct:_41 make-_42 ?_43 -ref_44 -set!_45)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-primitive-id"
" struct:parsed-id"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-primitive-id)))))"
"(values struct:_41 make-_42 ?_43)))"
"(define-values"
"(struct:parsed-top-id parsed-top-id4.1 parsed-top-id?)"
"(let-values(((struct:_56 make-_57 ?_58 -ref_59 -set!_60)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-top-id"
" struct:parsed-id"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-top-id)))))"
"(values struct:_56 make-_57 ?_58)))"
"(define-values"
"(struct:parsed-lambda parsed-lambda5.1 parsed-lambda? parsed-lambda-keys parsed-lambda-body)"
"(let-values(((struct:_71 make-_72 ?_73 -ref_74 -set!_75)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-lambda"
" struct:parsed"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-lambda)))))"
"(values"
" struct:_71"
" make-_72"
" ?_73"
"(make-struct-field-accessor -ref_74 0 'keys)"
"(make-struct-field-accessor -ref_74 1 'body))))"
"(define-values"
"(struct:parsed-case-lambda parsed-case-lambda6.1 parsed-case-lambda? parsed-case-lambda-clauses)"
"(let-values(((struct:_96 make-_97 ?_98 -ref_99 -set!_100)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-case-lambda"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-case-lambda)))))"
"(values struct:_96 make-_97 ?_98(make-struct-field-accessor -ref_99 0 'clauses))))"
"(define-values"
"(struct:parsed-app parsed-app7.1 parsed-app? parsed-app-rator+rands)"
"(let-values(((struct:_116 make-_117 ?_118 -ref_119 -set!_120)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-app"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-app)))))"
"(values struct:_116 make-_117 ?_118(make-struct-field-accessor -ref_119 0 'rator+rands))))"
"(define-values"
"(struct:parsed-if parsed-if8.1 parsed-if? parsed-if-tst parsed-if-thn parsed-if-els)"
"(let-values(((struct:_136 make-_137 ?_138 -ref_139 -set!_140)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-if"
" struct:parsed"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-if)))))"
"(values"
" struct:_136"
" make-_137"
" ?_138"
"(make-struct-field-accessor -ref_139 0 'tst)"
"(make-struct-field-accessor -ref_139 1 'thn)"
"(make-struct-field-accessor -ref_139 2 'els))))"
"(define-values"
"(struct:parsed-set! parsed-set!9.1 parsed-set!? parsed-set!-id parsed-set!-rhs)"
"(let-values(((struct:_166 make-_167 ?_168 -ref_169 -set!_170)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-set!"
" struct:parsed"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-set!)))))"
"(values"
" struct:_166"
" make-_167"
" ?_168"
"(make-struct-field-accessor -ref_169 0 'id)"
"(make-struct-field-accessor -ref_169 1 'rhs))))"
"(define-values"
"(struct:parsed-with-continuation-mark"
" parsed-with-continuation-mark10.1"
" parsed-with-continuation-mark?"
" parsed-with-continuation-mark-key"
" parsed-with-continuation-mark-val"
" parsed-with-continuation-mark-body)"
"(let-values(((struct:_191 make-_192 ?_193 -ref_194 -set!_195)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-with-continuation-mark"
" struct:parsed"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-with-continuation-mark)))))"
"(values"
" struct:_191"
" make-_192"
" ?_193"
"(make-struct-field-accessor -ref_194 0 'key)"
"(make-struct-field-accessor -ref_194 1 'val)"
"(make-struct-field-accessor -ref_194 2 'body))))"
"(define-values"
"(struct:parsed-#%variable-reference"
" parsed-#%variable-reference11.1"
" parsed-#%variable-reference?"
" parsed-#%variable-reference-id)"
"(let-values(((struct:_221 make-_222 ?_223 -ref_224 -set!_225)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%variable-reference"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-#%variable-reference)))))"
"(values struct:_221 make-_222 ?_223(make-struct-field-accessor -ref_224 0 'id))))"
"(define-values"
"(struct:parsed-begin parsed-begin12.1 parsed-begin? parsed-begin-body)"
"(let-values(((struct:_241 make-_242 ?_243 -ref_244 -set!_245)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin)))))"
"(values struct:_241 make-_242 ?_243(make-struct-field-accessor -ref_244 0 'body))))"
"(define-values"
"(struct:parsed-begin0 parsed-begin013.1 parsed-begin0? parsed-begin0-body)"
"(let-values(((struct:_261 make-_262 ?_263 -ref_264 -set!_265)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin0"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin0)))))"
"(values struct:_261 make-_262 ?_263(make-struct-field-accessor -ref_264 0 'body))))"
"(define-values"
"(struct:parsed-quote parsed-quote14.1 parsed-quote? parsed-quote-datum)"
"(let-values(((struct:_281 make-_282 ?_283 -ref_284 -set!_285)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-quote"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-quote)))))"
"(values struct:_281 make-_282 ?_283(make-struct-field-accessor -ref_284 0 'datum))))"
"(define-values"
"(struct:parsed-quote-syntax parsed-quote-syntax15.1 parsed-quote-syntax? parsed-quote-syntax-datum)"
"(let-values(((struct:_301 make-_302 ?_303 -ref_304 -set!_305)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-quote-syntax"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-quote-syntax)))))"
"(values struct:_301 make-_302 ?_303(make-struct-field-accessor -ref_304 0 'datum))))"
"(define-values"
"(struct:parsed-let_-values"
" parsed-let_-values16.1"
" parsed-let_-values?"
" parsed-let_-values-idss"
" parsed-let_-values-clauses"
" parsed-let_-values-body)"
"(let-values(((struct:_321 make-_322 ?_323 -ref_324 -set!_325)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-let_-values"
" struct:parsed"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-let_-values)))))"
"(values"
" struct:_321"
" make-_322"
" ?_323"
"(make-struct-field-accessor -ref_324 0 'idss)"
"(make-struct-field-accessor -ref_324 1 'clauses)"
"(make-struct-field-accessor -ref_324 2 'body))))"
"(define-values"
"(struct:parsed-let-values parsed-let-values17.1 parsed-let-values?)"
"(let-values(((struct:_351 make-_352 ?_353 -ref_354 -set!_355)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-let-values"
" struct:parsed-let_-values"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-let-values)))))"
"(values struct:_351 make-_352 ?_353)))"
"(define-values"
"(struct:parsed-letrec-values parsed-letrec-values18.1 parsed-letrec-values?)"
"(let-values(((struct:_366 make-_367 ?_368 -ref_369 -set!_370)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-letrec-values"
" struct:parsed-let_-values"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-letrec-values)))))"
"(values struct:_366 make-_367 ?_368)))"
"(define-values"
"(struct:parsed-define-values"
" parsed-define-values19.1"
" parsed-define-values?"
" parsed-define-values-ids"
" parsed-define-values-syms"
" parsed-define-values-rhs)"
"(let-values(((struct:_381 make-_382 ?_383 -ref_384 -set!_385)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-define-values"
" struct:parsed"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-define-values)))))"
"(values"
" struct:_381"
" make-_382"
" ?_383"
"(make-struct-field-accessor -ref_384 0 'ids)"
"(make-struct-field-accessor -ref_384 1 'syms)"
"(make-struct-field-accessor -ref_384 2 'rhs))))"
"(define-values"
"(struct:parsed-define-syntaxes"
" parsed-define-syntaxes20.1"
" parsed-define-syntaxes?"
" parsed-define-syntaxes-ids"
" parsed-define-syntaxes-syms"
" parsed-define-syntaxes-rhs)"
"(let-values(((struct:_411 make-_412 ?_413 -ref_414 -set!_415)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-define-syntaxes"
" struct:parsed"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-define-syntaxes)))))"
"(values"
" struct:_411"
" make-_412"
" ?_413"
"(make-struct-field-accessor -ref_414 0 'ids)"
"(make-struct-field-accessor -ref_414 1 'syms)"
"(make-struct-field-accessor -ref_414 2 'rhs))))"
"(define-values"
"(struct:parsed-begin-for-syntax parsed-begin-for-syntax21.1 parsed-begin-for-syntax? parsed-begin-for-syntax-body)"
"(let-values(((struct:_441 make-_442 ?_443 -ref_444 -set!_445)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin-for-syntax"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin-for-syntax)))))"
"(values struct:_441 make-_442 ?_443(make-struct-field-accessor -ref_444 0 'body))))"
"(define-values"
"(struct:parsed-#%declare parsed-#%declare22.1 parsed-#%declare?)"
"(let-values(((struct:_461 make-_462 ?_463 -ref_464 -set!_465)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%declare"
" struct:parsed"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-#%declare)))))"
"(values struct:_461 make-_462 ?_463)))"
"(define-values"
"(struct:parsed-require parsed-require23.1 parsed-require?)"
"(let-values(((struct:_476 make-_477 ?_478 -ref_479 -set!_480)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-require"
" struct:parsed"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-require)))))"
"(values struct:_476 make-_477 ?_478)))"
"(define-values"
"(struct:parsed-#%module-begin parsed-#%module-begin24.1 parsed-#%module-begin? parsed-#%module-begin-body)"
"(let-values(((struct:_491 make-_492 ?_493 -ref_494 -set!_495)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%module-begin"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-#%module-begin)))))"
"(values struct:_491 make-_492 ?_493(make-struct-field-accessor -ref_494 0 'body))))"
"(define-values"
"(struct:parsed-module"
" parsed-module25.1"
" parsed-module?"
" parsed-module-star?"
" parsed-module-name-id"
" parsed-module-self"
" parsed-module-requires"
" parsed-module-provides"
" parsed-module-root-ctx-simple?"
" parsed-module-encoded-root-ctx"
" parsed-module-body)"
"(let-values(((struct:_511 make-_512 ?_513 -ref_514 -set!_515)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-module"
" struct:parsed"
" 8"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7)"
" #f"
" 'parsed-module)))))"
"(values"
" struct:_511"
" make-_512"
" ?_513"
"(make-struct-field-accessor -ref_514 0 'star?)"
"(make-struct-field-accessor -ref_514 1 'name-id)"
"(make-struct-field-accessor -ref_514 2 'self)"
"(make-struct-field-accessor -ref_514 3 'requires)"
"(make-struct-field-accessor -ref_514 4 'provides)"
"(make-struct-field-accessor -ref_514 5 'root-ctx-simple?)"
"(make-struct-field-accessor -ref_514 6 'encoded-root-ctx)"
"(make-struct-field-accessor -ref_514 7 'body))))"
"(void)"
"(void)"
"(define-values"
"(struct:compiled-in-memory"
" compiled-in-memory1.1"
" compiled-in-memory?"
" compiled-in-memory-linklet-directory"
" compiled-in-memory-phase-to-link-module-uses"
" compiled-in-memory-compile-time-inspector"
" compiled-in-memory-phase-to-link-extra-inspectorsss"
" compiled-in-memory-mpis"
" compiled-in-memory-syntax-literals"
" compiled-in-memory-pre-compiled-in-memorys"
" compiled-in-memory-post-compiled-in-memorys"
" compiled-in-memory-namespace-scopes"
" compiled-in-memory-purely-functional?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'compiled-in-memory"
" #f"
" 10"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(cim_69 port_70 mode_71)(write(compiled-in-memory-linklet-directory cim_69) port_70))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9)"
" #f"
" 'compiled-in-memory)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'linklet-directory)"
"(make-struct-field-accessor -ref_4 1 'phase-to-link-module-uses)"
"(make-struct-field-accessor -ref_4 2 'compile-time-inspector)"
"(make-struct-field-accessor -ref_4 3 'phase-to-link-extra-inspectorsss)"
"(make-struct-field-accessor -ref_4 4 'mpis)"
"(make-struct-field-accessor -ref_4 5 'syntax-literals)"
"(make-struct-field-accessor -ref_4 6 'pre-compiled-in-memorys)"
"(make-struct-field-accessor -ref_4 7 'post-compiled-in-memorys)"
"(make-struct-field-accessor -ref_4 8 'namespace-scopes)"
"(make-struct-field-accessor -ref_4 9 'purely-functional?))))"
"(void)"
"(void)"
"(define-values"
"(struct:namespace-scopes namespace-scopes1.1 namespace-scopes? namespace-scopes-post namespace-scopes-other)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type 'namespace-scopes #f 2 0 #f null 'prefab #f '(0 1) #f 'namespace-scopes)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'post)"
"(make-struct-field-accessor -ref_4 1 'other))))"
"(define-values"
"(swap-top-level-scopes)"
"(lambda(s_26 original-scopes-s_27 new-ns_28)"
"(let-values(((old-scs-post_29 old-scs-other_30)"
"(if(namespace-scopes? original-scopes-s_27)"
"(values(namespace-scopes-post original-scopes-s_27)(namespace-scopes-other original-scopes-s_27))"
"(decode-namespace-scopes original-scopes-s_27))))"
"(let-values(((new-scs-post_31 new-scs-other_32)(extract-namespace-scopes/values new-ns_28)))"
"(syntax-swap-scopes"
"(syntax-swap-scopes s_26 old-scs-post_29 new-scs-post_31)"
" old-scs-other_30"
" new-scs-other_32)))))"
"(define-values"
"(extract-namespace-scopes/values)"
"(lambda(ns_33)"
"(let-values(((root-ctx_34)(namespace-get-root-expand-ctx ns_33)))"
"(let-values(((post-expansion-sc_35)(root-expand-context-post-expansion-scope root-ctx_34)))"
"(values"
"(seteq post-expansion-sc_35)"
"(set-remove(list->seteq(root-expand-context-module-scopes root-ctx_34)) post-expansion-sc_35))))))"
"(define-values"
"(extract-namespace-scopes)"
"(lambda(ns_36)"
"(let-values(((scs-post_37 scs-other_38)(extract-namespace-scopes/values ns_36)))"
"(namespace-scopes1.1 scs-post_37 scs-other_38))))"
"(define-values"
"(encode-namespace-scopes)"
"(lambda(ns_39)"
"(let-values(((post-expansion-scs_40 other-scs_41)(extract-namespace-scopes/values ns_39)))"
"(let-values(((post-expansion-s_42)(add-scopes(datum->syntax$1 #f 'post)(set->list post-expansion-scs_40))))"
"(let-values(((other-s_43)(add-scopes(datum->syntax$1 #f 'other)(set->list other-scs_41))))"
"(datum->syntax$1 #f(vector post-expansion-s_42 other-s_43)))))))"
"(define-values"
"(decode-namespace-scopes)"
"(lambda(stx_44)"
"(let-values(((vec_45)(syntax-e$1 stx_44)))"
"(values(syntax-scope-set(vector-ref vec_45 0) 0)(syntax-scope-set(vector-ref vec_45 1) 0)))))"
"(define-values"
"(namespace-scopes=?)"
"(lambda(nss1_46 nss2_47)"
"(if(set=?(namespace-scopes-post nss1_46)(namespace-scopes-post nss2_47))"
"(set=?(namespace-scopes-other nss1_46)(namespace-scopes-other nss2_47))"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(struct:syntax-literals"
" syntax-literals1.1"
" syntax-literals?"
" syntax-literals-stxes"
" syntax-literals-count"
" set-syntax-literals-stxes!"
" set-syntax-literals-count!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'syntax-literals"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'syntax-literals)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'stxes)"
"(make-struct-field-accessor -ref_4 1 'count)"
"(make-struct-field-mutator -set!_5 0 'stxes)"
"(make-struct-field-mutator -set!_5 1 'count))))"
"(define-values"
"(struct:header"
" header2.1"
" header?"
" header-module-path-indexes"
" header-binding-sym-to-define-sym"
" header-binding-syms-in-order"
" header-require-var-to-import-sym"
" header-import-sym-to-extra-inspectors"
" header-require-vars-in-order"
" header-define-and-import-syms"
" header-syntax-literals"
" set-header-binding-syms-in-order!"
" set-header-require-vars-in-order!)"
"(let-values(((struct:_26 make-_27 ?_28 -ref_29 -set!_30)"
"(let-values()"
"(let-values()"
"(make-struct-type 'header #f 8 0 #f null(current-inspector) #f '(0 1 3 4 6 7) #f 'header)))))"
"(values"
" struct:_26"
" make-_27"
" ?_28"
"(make-struct-field-accessor -ref_29 0 'module-path-indexes)"
"(make-struct-field-accessor -ref_29 1 'binding-sym-to-define-sym)"
"(make-struct-field-accessor -ref_29 2 'binding-syms-in-order)"
"(make-struct-field-accessor -ref_29 3 'require-var-to-import-sym)"
"(make-struct-field-accessor -ref_29 4 'import-sym-to-extra-inspectors)"
"(make-struct-field-accessor -ref_29 5 'require-vars-in-order)"
"(make-struct-field-accessor -ref_29 6 'define-and-import-syms)"
"(make-struct-field-accessor -ref_29 7 'syntax-literals)"
"(make-struct-field-mutator -set!_30 2 'binding-syms-in-order)"
"(make-struct-field-mutator -set!_30 5 'require-vars-in-order))))"
"(define-values"
"(struct:variable-use variable-use3.1 variable-use? variable-use-module-use variable-use-sym)"
"(let-values(((struct:_81 make-_82 ?_83 -ref_84 -set!_85)"
"(let-values()"
"(let-values()(make-struct-type 'variable-use #f 2 0 #f null #f #f '(0 1) #f 'variable-use)))))"
"(values"
" struct:_81"
" make-_82"
" ?_83"
"(make-struct-field-accessor -ref_84 0 'module-use)"
"(make-struct-field-accessor -ref_84 1 'sym))))"
"(define-values(make-syntax-literals)(lambda()(syntax-literals1.1 null 0)))"
"(define-values"
"(make-header)"
"(lambda(mpis_106 syntax-literals_107)"
"(header2.1 mpis_106(make-hasheq) null(make-variable-uses)(make-hasheq) null(make-hasheq) syntax-literals_107)))"
"(define-values(make-variable-uses)(lambda()(make-hash)))"
"(define-values"
"(add-syntax-literal!)"
"(lambda(header-or-literals_108 q_109)"
"(let-values(((sl_110)"
"(if(header? header-or-literals_108)"
"(header-syntax-literals header-or-literals_108)"
" header-or-literals_108)))"
"(let-values(((pos_111)(syntax-literals-count sl_110)))"
"(begin"
"(set-syntax-literals-count! sl_110(add1 pos_111))"
"(set-syntax-literals-stxes! sl_110(cons q_109(syntax-literals-stxes sl_110)))"
" pos_111)))))"
"(define-values"
"(add-syntax-literals!)"
"(lambda(sl_112 vec_113)"
"(let-values(((pos_114)(syntax-literals-count sl_112)))"
"(begin"
"(let-values(((vec_115 len_116)"
"(let-values()"
"(begin"
"(if(vector? vec_117)(void)(let-values()(in-vector vec_117)))"
"(values vec_117(unsafe-vector-length vec_117))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_118)"
"(lambda(fold-var_119 pos_120)"
"(if(unsafe-fx< pos_120 len_116)"
"(let-values(((e_121)(unsafe-vector-ref vec_115 pos_120)))"
"(let-values(((fold-var_122)"
"(let-values()"
"(let-values(((fold-var_124)"
"(let-values()"
"(begin"
"(let-values()(add-syntax-literal! sl_112 e_121))"
"(void)))))"
"(values fold-var_124)))))"
"(for-loop_118 fold-var_122(unsafe-fx+ 1 pos_120))))"
" fold-var_119))))"
" for-loop_118)"
"(void)"
" 0)))"
"(cons pos_114(vector-length vec_113))))))"
"(define-values(syntax-literals-empty?)(lambda(sl_125)(null?(syntax-literals-stxes sl_125))))"
"(define-values"
"(generate-lazy-syntax-literals!9.1)"
"(lambda(skip-deserialize?4_126 skip-deserialize?5_127 sl6_128 mpis7_129 self8_130)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((skip-deserialize?_134)(if skip-deserialize?5_127 skip-deserialize?4_126 #f)))"
"(let-values()"
"(list"
"(list 'define-values(list syntax-literals-id)(list* 'make-vector(syntax-literals-count sl_131) '(#f)))"
"(list"
" 'define-values"
"(list get-syntax-literal!-id)"
"(list"
" 'lambda"
" '(pos)"
"(list"
" 'let-values"
"(list(list '(ready-stx)(list* 'vector-ref syntax-literals-id '(pos))))"
"(list"
" 'if"
" 'ready-stx"
" 'ready-stx"
"(list*"
" 'begin"
"(qq-append"
"(if skip-deserialize?_134"
" null"
"(list"
"(list"
" 'if"
"(list* 'vector-ref deserialized-syntax-vector-id '(0))"
" '(void)"
"(list deserialize-syntax-id bulk-binding-registry-id))))"
"(list"
"(list"
" 'let-values"
"(list"
"(list"
" '(stx)"
"(list"
" 'syntax-module-path-index-shift"
"(list"
" 'syntax-shift-phase-level"
"(list* 'vector-ref deserialized-syntax-vector-id '(pos))"
" phase-shift-id)"
"(add-module-path-index! mpis_132 self_133)"
" self-id"
" inspector-id)))"
"(list* 'begin(list* 'vector-set! syntax-literals-id '(pos stx)) '(stx))))))))))))))))))"
"(define-values"
"(generate-lazy-syntax-literals-data!)"
"(lambda(sl_155 mpis_156)"
"(if(syntax-literals-empty? sl_155)"
"(let-values()(list(list* 'define-values(list deserialize-syntax-id) '(#f))))"
"(let-values()"
"(list"
"(list"
" 'define-values"
"(list deserialize-syntax-id)"
"(list"
" 'lambda"
"(list bulk-binding-registry-id)"
"(list"
" 'begin"
"(list"
" 'vector-copy!"
" deserialized-syntax-vector-id"
" ''0"
"(list"
" 'let-values"
"(list(list*(list inspector-id) '(#f)))"
"(let-values(((temp25_157)"
"(vector->immutable-vector(list->vector(alt-reverse(syntax-literals-stxes sl_155))))))"
"(generate-deserialize6.1 #f #f temp25_157 mpis26_158))))"
"(list* 'set! deserialize-syntax-id '(#f))))))))))"
"(define-values(generate-lazy-syntax-literal-lookup)(lambda(pos_159)(list get-syntax-literal!-id pos_159)))"
"(define-values"
"(generate-eager-syntax-literals!)"
"(lambda(sl_160 mpis_161 base-phase_162 self_163 ns_164)"
"(if(syntax-literals-empty? sl_160)"
"(let-values() #f)"
"(let-values()"
"(list"
" 'let-values"
"(list"
"(list"
" '(ns+stxss)"
"(let-values(((temp27_165)"
"(cons(encode-namespace-scopes ns_164)(alt-reverse(syntax-literals-stxes sl_160)))))"
"(generate-deserialize6.1 #f #f temp27_165 mpis28_166))))"
"(list"
" 'let-values"
" '(((ns-scope-s)(car ns+stxss)))"
"(list"
" 'list->vector"
"(list*"
" 'map"
"(list"
" 'lambda"
" '(stx)"
"(list"
" 'swap-top-level-scopes"
"(list"
" 'syntax-module-path-index-shift"
"(list 'syntax-shift-phase-level 'stx(list '- base-phase_162 dest-phase-id))"
"(add-module-path-index! mpis_161 self_163)"
" self-id)"
" 'ns-scope-s"
" ns-id))"
" '((cdr ns+stxss))))))))))"
"(define-values(generate-eager-syntax-literal-lookup)(lambda(pos_167)(list 'vector-ref syntax-literals-id pos_167)))"
"(define-values"
"(syntax-literals-as-vector)"
"(lambda(sl_168)(list->vector(alt-reverse(syntax-literals-stxes sl_168)))))"
"(define-values"
"(select-fresh)"
"(lambda(sym_171 header_172)"
"(if(symbol-conflicts? sym_171 header_172)"
"((letrec-values(((loop_173)"
"(lambda(pos_174)"
"                          (let-values (((new-sym_175) (string->symbol (format \"~a/~a\" pos_174 sym_171))))"
"(if(symbol-conflicts? new-sym_175 header_172)(loop_173(add1 pos_174)) new-sym_175)))))"
" loop_173)"
" 1)"
" sym_171)))"
"(define-values"
"(symbol-conflicts?)"
"(lambda(sym_176 header_177)"
"(let-values(((or-part_178)(built-in-symbol? sym_176)))"
"(if or-part_178 or-part_178(hash-ref(header-define-and-import-syms header_177) sym_176 #f)))))"
"(define-values"
"(register-required-variable-use!19.1)"
"(lambda(defined?12_179 defined?13_180 header14_181 mpi15_182 phase16_183 sym17_184 extra-inspector18_185)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((defined?_191)(if defined?13_180 defined?12_179 #f)))"
"(let-values()"
"(let-values(((key_192)(variable-use3.1(module-use1.1 mpi_187 phase_188) sym_189)))"
"(let-values(((variable-uses_193)(header-require-var-to-import-sym header_186)))"
"(let-values(((var-sym_194)"
"(let-values(((or-part_195)(hash-ref variable-uses_193 key_192 #f)))"
"(if or-part_195"
" or-part_195"
"(let-values(((sym_196)(select-fresh(variable-use-sym key_192) header_186)))"
"(begin"
"(hash-set! variable-uses_193 key_192 sym_196)"
"(set-header-require-vars-in-order!"
" header_186"
"(cons key_192(header-require-vars-in-order header_186)))"
"(hash-set!"
"(header-define-and-import-syms header_186)"
" sym_196"
"(if defined?_191 'defined 'required))"
" sym_196))))))"
"(begin"
"(if extra-inspector_190"
"(let-values()"
"(let-values(((extra-inspectors_197)(header-import-sym-to-extra-inspectors header_186)))"
"(hash-update!"
" extra-inspectors_197"
" var-sym_194"
"(lambda(s_198)(set-add s_198 extra-inspector_190))"
" '#hasheq())))"
"(void))"
" var-sym_194)))))))))))))"
"(define-values"
"(register-as-defined!)"
"(lambda(header_225 def-sym_226)(hash-set!(header-define-and-import-syms header_225) def-sym_226 'defined)))"
"(define-values"
"(registered-as-required?)"
"(lambda(header_227 var-sym_228)"
"(eq? 'required(hash-ref(header-define-and-import-syms header_227) var-sym_228 #f))))"
"(define-values"
"(generate-links+imports)"
"(lambda(header_229 phase_230 cctx_231)"
"(let-values(((mod-use-to-link-sym_232)"
"(let-values(((lst_234)(header-require-vars-in-order header_229)))"
"(begin"
"(if(list? lst_234)(void)(let-values()(in-list lst_234)))"
"((letrec-values(((for-loop_235)"
"(lambda(ht_236 lst_237)"
"(if(pair? lst_237)"
"(let-values(((vu_238)(unsafe-car lst_237)))"
"(let-values(((ht_239)"
"(let-values()"
"(let-values(((ht_241)"
"(let-values()"
"(let-values(((mu_242)"
"(variable-use-module-use"
" vu_238)))"
"(if(let-values(((or-part_243)"
"(hash-ref"
" ht_240"
" mu_242"
" #f)))"
"(if or-part_243"
" or-part_243"
"(let-values(((or-part_244)"
"(eq?"
"(module-use-module"
" mu_242)"
"(compile-context-self"
" cctx_231))))"
"(if or-part_244"
" or-part_244"
"(top-level-module-path-index?"
"(module-use-module"
" mu_242))))))"
" ht_240"
"(hash-set"
" ht_240"
" mu_242"
"(string->symbol"
"(format"
"                                                                                     \"~a_~a_~a\""
"(extract-name"
"(module-use-module mu_242))"
"(module-use-phase mu_242)"
"(hash-count ht_240)))))))))"
"(values ht_241)))))"
"(for-loop_235 ht_239(unsafe-cdr lst_237))))"
" ht_236))))"
" for-loop_235)"
" '#hash()"
" lst_234)))))"
"(let-values(((link-mod-uses_233)(hash-keys mod-use-to-link-sym_232)))"
"(values"
" link-mod-uses_233"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_245)(void)(let-values()(in-list lst_245)))"
"((letrec-values(((for-loop_246)"
"(lambda(fold-var_247 lst_248)"
"(if(pair? lst_248)"
"(let-values(((mu_249)(unsafe-car lst_248)))"
"(let-values(((fold-var_250)"
"(let-values()"
"(let-values(((fold-var_252)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_253)"
"(header-require-vars-in-order"
" header_229)))"
"(begin"
"(if(list? lst_253)"
"(void)"
"(let-values()(in-list lst_253)))"
"((letrec-values(((for-loop_254)"
"(lambda(fold-var_255"
" lst_256)"
"(if(pair? lst_256)"
"(let-values(((vu_257)"
"(unsafe-car"
" lst_256)))"
"(let-values(((fold-var_258)"
"(let-values()"
"(if(equal?"
" mu_249"
"(variable-use-module-use"
" vu_257))"
"(let-values()"
"(let-values(((fold-var_261)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_262)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_229)"
" vu_257)))"
"(let-values(((ex-sym_263)"
"(variable-use-sym"
" vu_257)))"
"(if(eq?"
" var-sym_262"
" ex-sym_263)"
" var-sym_262"
"(list"
" ex-sym_263"
" var-sym_262)))))"
" fold-var_260))))"
"(values"
" fold-var_261)))"
" fold-var_259))))"
"(for-loop_254"
" fold-var_258"
"(unsafe-cdr"
" lst_256))))"
" fold-var_255))))"
" for-loop_254)"
" null"
" lst_253)))))"
" fold-var_251))))"
"(values fold-var_252)))))"
"(for-loop_246 fold-var_250(unsafe-cdr lst_248))))"
" fold-var_247))))"
" for-loop_246)"
" null"
" lst_245))))"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_264)(void)(let-values()(in-list lst_264)))"
"((letrec-values(((for-loop_265)"
"(lambda(fold-var_266 lst_267)"
"(if(pair? lst_267)"
"(let-values(((mu_268)(unsafe-car lst_267)))"
"(let-values(((fold-var_269)"
"(let-values()"
"(let-values(((fold-var_271)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((extra-inspectorss_272)"
"(alt-reverse"
"(let-values(((lst_273)"
"(header-require-vars-in-order"
" header_229)))"
"(begin"
"(if(list? lst_273)"
"(void)"
"(let-values()"
"(in-list lst_273)))"
"((letrec-values(((for-loop_274)"
"(lambda(fold-var_275"
" lst_276)"
"(if(pair?"
" lst_276)"
"(let-values(((vu_277)"
"(unsafe-car"
" lst_276)))"
"(let-values(((fold-var_278)"
"(let-values()"
"(if(equal?"
" mu_268"
"(variable-use-module-use"
" vu_277))"
"(let-values()"
"(let-values(((fold-var_281)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_282)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_229)"
" vu_277)))"
"(hash-ref"
"(header-import-sym-to-extra-inspectors"
" header_229)"
" var-sym_282"
" #f)))"
" fold-var_280))))"
"(values"
" fold-var_281)))"
" fold-var_279))))"
"(for-loop_274"
" fold-var_278"
"(unsafe-cdr"
" lst_276))))"
" fold-var_275))))"
" for-loop_274)"
" null"
" lst_273))))))"
"(if(ormap2 values extra-inspectorss_272)"
" extra-inspectorss_272"
" #f)))"
" fold-var_270))))"
"(values fold-var_271)))))"
"(for-loop_265 fold-var_269(unsafe-cdr lst_267))))"
" fold-var_266))))"
" for-loop_265)"
" null"
" lst_264))))"
"(alt-reverse"
"(let-values(((lst_283)(header-require-vars-in-order header_229)))"
"(begin"
"(if(list? lst_283)(void)(let-values()(in-list lst_283)))"
"((letrec-values(((for-loop_284)"
"(lambda(fold-var_285 lst_286)"
"(if(pair? lst_286)"
"(let-values(((vu_287)(unsafe-car lst_286)))"
"(let-values(((fold-var_288)"
"(let-values()"
"(if(let-values(((mod_290)"
"(module-use-module"
"(variable-use-module-use vu_287))))"
"(let-values(((or-part_291)"
"(eq?"
" mod_290"
"(compile-context-self cctx_231))))"
"(if or-part_291"
" or-part_291"
"(top-level-module-path-index? mod_290))))"
"(let-values()"
"(let-values(((fold-var_293)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_294)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_229)"
" vu_287)))"
"(let-values(((ex-sym_295)"
"(variable-use-sym vu_287)))"
"(if(eq? var-sym_294 ex-sym_295)"
" var-sym_294"
"(list var-sym_294 ex-sym_295)))))"
" fold-var_292))))"
"(values fold-var_293)))"
" fold-var_289))))"
"(for-loop_284 fold-var_288(unsafe-cdr lst_286))))"
" fold-var_285))))"
" for-loop_284)"
" null"
" lst_283)))))))))"
"(define-values"
"(extract-name)"
"(lambda(mpi_296)"
"(let-values(((p_297 base_298)(1/module-path-index-split mpi_296)))"
"(if(symbol? p_297)"
"(let-values() p_297)"
"(if(path? p_297)"
"(let-values()"
"            (let-values (((base_299 name_300 dir?_301) (split-path p_297))) (path-replace-extension name_300 #\"\")))"
"(if(string? p_297)"
"            (let-values () (path-replace-extension p_297 #\"\"))"
"(if(if(pair? p_297)(eq?(car p_297) 'quote) #f)"
"(let-values()(cadr p_297))"
"(if(if(pair? p_297)(eq?(car p_297) 'file) #f)"
"(let-values()"
"(let-values(((base_302 name_303 dir?_304)(split-path(cadr p_297))))"
"                    (path-replace-extension name_303 #\"\")))"
"(if(if(pair? p_297)(eq?(car p_297) 'lib) #f)"
"                  (let-values () (path-replace-extension (cadr p_297) #\"\"))"
"(let-values() 'module))))))))))"
"(void)"
"(void)"
"(define-values"
"(instance-imports)"
"(list ns-id phase-shift-id self-id inspector-id bulk-binding-registry-id set-transformer!-id))"
"(define-values"
"(make-instance-instance13.1)"
"(lambda(bulk-binding-registry5_13 inspector4_14 namespace1_15 phase-shift2_16 self3_17 set-transformer!6_18)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" ns-id"
" ns_19"
" phase-shift-id"
" phase-shift_20"
" self-id"
" self_21"
" inspector-id"
" inspector_22"
" bulk-binding-registry-id"
" bulk-binding-registry_23"
" set-transformer!-id"
" set-transformer!_24))))))))))"
"(define-values"
"(make-module-body-instance-instance18.1)"
"(lambda(set-transformer!16_55)"
"(let-values()(let-values()(1/make-instance 'body-instance #f set-transformer!-id set-transformer!_56)))))"
"(void)"
"(void)"
"(define-values"
"(eager-instance-imports)"
"(list* ns-id dest-phase-id self-id bulk-binding-registry-id inspector-id '(swap-top-level-scopes)))"
"(define-values"
"(make-eager-instance-instance11.1)"
"(lambda(bulk-binding-registry4_8 dest-phase2_9 inspector5_10 namespace1_11 self3_12)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" ns-id"
" ns_13"
" dest-phase-id"
" dest-phase_14"
" self-id"
" self_15"
" bulk-binding-registry-id"
" bulk-binding-registry_16"
" inspector-id"
" inspector_17"
" 'swap-top-level-scopes"
" swap-top-level-scopes)))))))))"
"(void)"
"(void)"
"(define-values"
"(self-quoting-in-linklet?)"
"(lambda(datum_1)"
"(let-values(((or-part_2)(number? datum_1)))"
"(if or-part_2"
" or-part_2"
"(let-values(((or-part_3)(boolean? datum_1)))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(string? datum_1)))(if or-part_4 or-part_4(bytes? datum_1)))))))))"
"(void)"
"(void)"
"(define-values(kernel-primitive-table$1)(primitive-table '#%kernel))"
"(define-values(datum->syntax$3)(hash-ref kernel-primitive-table$1 'datum->syntax))"
"(define-values(syntax-property$2)(hash-ref kernel-primitive-table$1 'syntax-property))"
"(define-values(syntax-e$3)(hash-ref kernel-primitive-table$1 'syntax-e))"
"(define-values(syntax?$2)(hash-ref kernel-primitive-table$1 'syntax?))"
"(void)"
"(void)"
"(define-values"
"(datum->correlated)"
"(let-values(((datum->correlated4_294)"
"(lambda(d3_295 srcloc1_296 srcloc2_297)"
"(let-values()"
"(let-values(((srcloc_299)(if srcloc2_297 srcloc1_296 #f)))"
"(let-values()(datum->syntax$3 #f d_298 srcloc_299)))))))"
"(case-lambda"
"((d_300)(datum->correlated4_294 d_300 #f #f))"
"((d_301 srcloc1_302)(datum->correlated4_294 d_301 srcloc1_302 #t)))))"
"(define-values(correlated-e)(lambda(e_303)(if(syntax?$2 e_303)(syntax-e$3 e_303) e_303)))"
"(define-values(correlated-cadr)(lambda(e_304)(car(correlated-e(cdr(correlated-e e_304))))))"
"(define-values"
"(correlated-length)"
"(lambda(e_305)(let-values(((l_306)(correlated-e e_305)))(if(list? l_306)(length l_306) #f))))"
"(define-values"
"(correlated->list)"
"(lambda(e_307)"
"((letrec-values(((loop_308)"
"(lambda(e_309)"
"(if(pair? e_309)"
"(let-values()(cons(car e_309)(loop_308(cdr e_309))))"
"(if(null? e_309)"
"(let-values() null)"
"(if(syntax?$2 e_309)"
"(let-values()(loop_308(syntax-e$3 e_309)))"
"                              (let-values () (error 'correlate->list \"not a list\"))))))))"
" loop_308)"
" e_307)))"
"(define-values"
"(correlated-property)"
"(case-lambda"
"((e_331 k_332)(syntax-property$2 e_331 k_332))"
"((e_333 k_334 v_335)(syntax-property$2 e_333 k_334 v_335))))"
"(define-values"
"(to-syntax-list.1$1)"
"(lambda(s_336)"
"(if(list? s_336)"
"(let-values() s_336)"
"(if(pair? s_336)"
"(let-values()(let-values(((r_337)(to-syntax-list.1$1(cdr s_336))))(if r_337(cons(car s_336) r_337) #f)))"
"(if(syntax?$2 s_336)(let-values()(to-syntax-list.1$1(syntax-e$3 s_336)))(let-values() #f))))))"
"(void)"
"(void)"
"(define-values(kernel-primitive-table)(1/primitive-table '#%kernel))"
"(define-values(read-syntax$2)(hash-ref kernel-primitive-table 'read-syntax))"
"(define-values(read-syntax/recursive$2)(hash-ref kernel-primitive-table 'read-syntax/recursive))"
"(define-values(syntax-property-symbol-keys$1)(hash-ref kernel-primitive-table 'syntax-property-symbol-keys))"
"(define-values(1/syntax-property)(hash-ref kernel-primitive-table 'syntax-property))"
"(define-values(syntax-span$1)(hash-ref kernel-primitive-table 'syntax-span))"
"(define-values(syntax-position$1)(hash-ref kernel-primitive-table 'syntax-position))"
"(define-values(syntax-column$1)(hash-ref kernel-primitive-table 'syntax-column))"
"(define-values(syntax-line$1)(hash-ref kernel-primitive-table 'syntax-line))"
"(define-values(syntax-source$1)(hash-ref kernel-primitive-table 'syntax-source))"
"(define-values(syntax-e$2)(hash-ref kernel-primitive-table 'syntax-e))"
"(define-values(1/syntax?)(hash-ref kernel-primitive-table 'syntax?))"
"(void)"
"(void)"
"(define-values"
"(srcloc->vector)"
"(lambda(s_42)"
"(if s_42"
"(vector(srcloc-source s_42)(srcloc-line s_42)(srcloc-column s_42)(srcloc-position s_42)(srcloc-span s_42))"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(correlate*)"
"(lambda(stx_1 s-exp_2)"
"(let-values(((e_3)"
"(if(if(datum-has-elements? s-exp_2)(syntax-srcloc stx_1) #f)"
"(let-values()"
"(datum->correlated"
"(correlated-e(datum->correlated s-exp_2))"
"(srcloc->vector(syntax-srcloc stx_1))))"
"(let-values()(datum->correlated s-exp_2(srcloc->vector(syntax-srcloc stx_1)))))))"
"(let-values(((maybe-n_4)(syntax-property$1 stx_1 'inferred-name)))"
"(if maybe-n_4"
"(correlated-property e_3 'inferred-name(if(syntax?$1 maybe-n_4)(syntax->datum$1 maybe-n_4) maybe-n_4))"
" e_3)))))"
"(void)"
"(void)"
"(define-values"
"(compile$2)"
"(let-values(((compile7_6)"
"(lambda(p5_7 cctx6_8 name1_9 result-used?2_10 name3_11 result-used?4_12)"
"(let-values()"
"(let-values()"
"(let-values(((name_15)(if name3_11 name1_9 #f)))"
"(let-values(((result-used?_16)(if result-used?4_12 result-used?2_10 #t)))"
"(let-values()"
"(let-values(((compile_17)"
"(lambda(p_18 name_19 result-used?_20)"
"(compile$2 p_18 cctx_14 name_19 result-used?_20))))"
"(let-values(((s_21)(parsed-s p_13)))"
"(if(parsed-id? p_13)"
"(let-values()(let-values()(compile-identifier22.1 #f #f p25_22 cctx26_23)))"
"(if(parsed-lambda? p_13)"
"(let-values()"
"(if result-used?_16"
"(let-values()"
"(add-lambda-properties"
"(correlate*"
" s_21"
"(list*"
" 'lambda"
"(compile-lambda"
"(parsed-lambda-keys p_13)"
"(parsed-lambda-body p_13)"
" cctx_14)))"
" name_15"
" s_21))"
"(let-values()(correlate* s_21 ''unused-lambda))))"
"(if(parsed-case-lambda? p_13)"
"(let-values()"
"(if result-used?_16"
"(let-values()"
"(add-lambda-properties"
"(correlate*"
" s_21"
"(list*"
" 'case-lambda"
"(alt-reverse"
"(let-values(((lst_24)(parsed-case-lambda-clauses p_13)))"
"(begin"
"(if(list? lst_24)(void)(let-values()(in-list lst_24)))"
"((letrec-values(((for-loop_25)"
"(lambda(fold-var_26 lst_27)"
"(if(pair? lst_27)"
"(let-values(((clause_28)"
"(unsafe-car lst_27)))"
"(let-values(((fold-var_29)"
"(let-values()"
"(let-values(((fold-var_31)"
"(let-values()"
"(cons"
"(let-values()"
"(compile-lambda"
"(car"
" clause_28)"
"(cadr"
" clause_28)"
" cctx_14))"
" fold-var_30))))"
"(values fold-var_31)))))"
"(for-loop_25"
" fold-var_29"
"(unsafe-cdr lst_27))))"
" fold-var_26))))"
" for-loop_25)"
" null"
" lst_24))))))"
" name_15"
" s_21))"
"(let-values()(correlate* s_21 ''unused-case-lambda))))"
"(if(parsed-app? p_13)"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_32)(parsed-app-rator+rands p_13)))"
"(begin"
"(if(list? lst_32)(void)(let-values()(in-list lst_32)))"
"((letrec-values(((for-loop_33)"
"(lambda(fold-var_34 lst_35)"
"(if(pair? lst_35)"
"(let-values(((r_36)(unsafe-car lst_35)))"
"(let-values(((fold-var_37)"
"(let-values()"
"(let-values(((fold-var_39)"
"(let-values()"
"(cons"
"(let-values()"
"(compile_17"
" r_36"
" #f"
" #t))"
" fold-var_38))))"
"(values fold-var_39)))))"
"(for-loop_33 fold-var_37(unsafe-cdr lst_35))))"
" fold-var_34))))"
" for-loop_33)"
" null"
" lst_32)))))"
"(if(parsed-if? p_13)"
"(let-values()"
"(let-values(((tst-e_40)(compile_17(parsed-if-tst p_13) #f #f)))"
"(if(eq?(correlated-e tst-e_40) #t)"
"(let-values()"
"(compile_17(parsed-if-thn p_13) name_15 result-used?_16))"
"(if(eq?(correlated-e tst-e_40) #f)"
"(let-values()"
"(compile_17(parsed-if-els p_13) name_15 result-used?_16))"
"(let-values()"
"(correlate*"
" s_21"
"(list"
" 'if"
" tst-e_40"
"(compile_17(parsed-if-thn p_13) name_15 result-used?_16)"
"(compile_17(parsed-if-els p_13) name_15 result-used?_16))))))))"
"(if(parsed-with-continuation-mark? p_13)"
"(let-values()"
"(correlate*"
" s_21"
"(list"
" 'with-continuation-mark"
"(compile_17(parsed-with-continuation-mark-key p_13) #f #t)"
"(compile_17(parsed-with-continuation-mark-val p_13) #f #t)"
"(compile_17"
"(parsed-with-continuation-mark-body p_13)"
" name_15"
" result-used?_16))))"
"(if(parsed-begin0? p_13)"
"(let-values()"
"(correlate*"
" s_21"
"(list*"
" 'begin0"
"(compile_17(car(parsed-begin0-body p_13)) name_15 result-used?_16)"
"(alt-reverse"
"(let-values(((lst_41)(cdr(parsed-begin0-body p_13))))"
"(begin"
"(if(list? lst_41)(void)(let-values()(in-list lst_41)))"
"((letrec-values(((for-loop_42)"
"(lambda(fold-var_43 lst_44)"
"(if(pair? lst_44)"
"(let-values(((e_45)(unsafe-car lst_44)))"
"(let-values(((fold-var_46)"
"(let-values()"
"(let-values(((fold-var_48)"
"(let-values()"
"(cons"
"(let-values()"
"(compile_17"
" e_45"
" #f"
" #f))"
" fold-var_47))))"
"(values"
" fold-var_48)))))"
"(for-loop_42"
" fold-var_46"
"(unsafe-cdr lst_44))))"
" fold-var_43))))"
" for-loop_42)"
" null"
" lst_41)))))))"
"(if(parsed-begin? p_13)"
"(let-values()"
"(correlate*"
" s_21"
"(compile-begin"
"(parsed-begin-body p_13)"
" cctx_14"
" name_15"
" result-used?_16)))"
"(if(parsed-set!? p_13)"
"(let-values()"
"(correlate*"
" s_21"
"(let-values(((...der/compile/expr.rkt:89:24_49)"
" compile-identifier24.1)"
"((temp27_50)(parsed-set!-id p_13))"
"((temp29_52)"
"(compile_17"
"(parsed-set!-rhs p_13)"
"(parsed-s(parsed-set!-id p_13))"
" #t)))"
"(compile-identifier22.1 temp29_52 #t temp27_50 cctx28_51))))"
"(if(parsed-let-values? p_13)"
"(let-values()"
"(let-values(((...der/compile/expr.rkt:92:6_53) compile-let17.1)"
"((temp33_57) #f))"
"(compile-let15.1"
" temp33_57"
" p30_54"
" cctx31_55"
" name32_56"
" result-used?34_58)))"
"(if(parsed-letrec-values? p_13)"
"(let-values()"
"(let-values(((...der/compile/expr.rkt:94:6_59) compile-let17.1)"
"((temp38_63) #t))"
"(compile-let15.1"
" temp38_63"
" p35_60"
" cctx36_61"
" name37_62"
" result-used?39_64)))"
"(if(parsed-quote? p_13)"
"(let-values()"
"(let-values(((datum_65)(parsed-quote-datum p_13)))"
"(if(self-quoting-in-linklet? datum_65)"
"(let-values()(correlate* s_21 datum_65))"
"(let-values()"
"(correlate* s_21(list 'quote datum_65))))))"
"(if(parsed-quote-syntax? p_13)"
"(let-values()"
"(if result-used?_16"
"(compile-quote-syntax"
"(parsed-quote-syntax-datum p_13)"
" cctx_14)"
"(correlate* s_21(list 'quote(syntax->datum$1 s_21)))))"
"(if(parsed-#%variable-reference? p_13)"
"(let-values()"
"(let-values(((id_66)"
"(parsed-#%variable-reference-id p_13)))"
"(correlate*"
" s_21"
"(if id_66"
"(list"
" '#%variable-reference"
"(let-values()"
"(compile-identifier22.1 #f #f id40_67 cctx41_68)))"
" '(#%variable-reference)))))"
"(let-values()"
"(error"
"                                                               \"unrecognized parsed form:\""
" p_13))))))))))))))))))))))))))"
"(case-lambda"
"((p_69 cctx_70)(compile7_6 p_69 cctx_70 #f #f #f #f))"
"((p_71 cctx_72 name_73 result-used?2_74)(compile7_6 p_71 cctx_72 name_73 result-used?2_74 #t #t))"
"((p_75 cctx_76 name1_77)(compile7_6 p_75 cctx_76 name1_77 #f #t #f)))))"
"(define-values"
"(compile-lambda)"
"(lambda(formals_78 bodys_79 cctx_80)(list formals_78(compile-sequence bodys_79 cctx_80 #f #t))))"
"(define-values"
"(compile-sequence)"
"(lambda(bodys_81 cctx_82 name_83 result-used?_84)"
"(if(null?(cdr bodys_81))"
"(compile$2(car bodys_81) cctx_82 name_83 result-used?_84)"
"(compile-begin bodys_81 cctx_82 name_83 result-used?_84))))"
"(define-values"
"(compile-begin)"
"(lambda(es_85 cctx_86 name_87 result-used?_88)"
"(let-values(((used-pos_89)(sub1(length es_85))))"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((start_91) 0))"
"(begin"
"(if(list? lst_90)(void)(let-values()(in-list lst_90)))"
"(if(exact-nonnegative-integer? start_91)(void)(let-values()(in-naturals start_91)))"
"((letrec-values(((for-loop_92)"
"(lambda(fold-var_93 lst_94 pos_95)"
"(if(if(pair? lst_94) #t #f)"
"(let-values(((e_96)(unsafe-car lst_94)))"
"(let-values(((fold-var_98)"
"(let-values()"
"(let-values(((fold-var_100)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((used?_101)(= i_97 used-pos_89)))"
"(compile$2"
" e_96"
" cctx_86"
"(if used?_101 name_87 #f)"
"(if used?_101 result-used?_88 #f))))"
" fold-var_99))))"
"(values fold-var_100)))))"
"(for-loop_92 fold-var_98(unsafe-cdr lst_94)(+ pos_95 1))))"
" fold-var_93))))"
" for-loop_92)"
" null"
" lst_90"
" start_91))))))))"
"(define-values"
"(add-lambda-properties)"
"(lambda(s_102 inferred-name_103 orig-s_104)"
"(letrec-values(((simplify-name_105)"
"(lambda(v_109)"
"(if(pair? v_109)"
"(let-values()"
"(let-values(((n1_110)(simplify-name_105(car v_109))))"
"(let-values(((n2_111)(simplify-name_105(cdr v_109))))"
"(if(eq? n1_110 n2_111) n1_110 v_109))))"
"(let-values() v_109)))))"
"(let-values(((name_106)"
"(let-values(((or-part_112)"
"(let-values(((v_113)"
"(simplify-name_105(syntax-property$1 orig-s_104 'inferred-name))))"
"(if(let-values(((or-part_114)(symbol? v_113)))"
"(if or-part_114"
" or-part_114"
"(let-values(((or-part_115)(syntax?$1 v_113)))"
"(if or-part_115 or-part_115(void? v_113)))))"
" v_113"
" #f))))"
"(if or-part_112 or-part_112 inferred-name_103))))"
"(let-values(((named-s_107)"
"(if name_106"
"(correlated-property"
" s_102"
" 'inferred-name"
"(if(syntax?$1 name_106)(syntax-e$1 name_106) name_106))"
" s_102)))"
"(let-values(((as-method_108)(syntax-property$1 orig-s_104 'method-arity-error)))"
"(if as-method_108(correlated-property named-s_107 'method-arity-error as-method_108) named-s_107)))))))"
"(define-values"
"(lifted/1.1$16 lifted/2.1$16 lifted/3.1$15 lifted/4.1$15 lifted/5.1$15)"
"(make-struct-type"
" 'compile-let"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'compile-let"
"(case-lambda"
"((self_116 p_117 cctx_118 name_119 result-used?_120)"
"(apply missing-kw self_116 p_117 cctx_118 name_119 result-used?_120 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_121 p_122 cctx_123 name_124 result-used?_125)"
"(apply missing-kw self_121 p_122 cctx_123 name_124 result-used?_125 null)))))"
"(define-values"
"(compile-let15.1)"
"(lambda(rec?9_126 p11_127 cctx12_128 name13_129 result-used?14_130)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(correlate*"
"(parsed-s p_131)"
"(list"
"(if rec?_134 'letrec-values 'let-values)"
"(alt-reverse"
"(let-values(((lst_136)(parsed-let_-values-clauses p_131))"
"((lst_137)(parsed-let_-values-idss p_131)))"
"(begin"
"(if(list? lst_136)(void)(let-values()(in-list lst_136)))"
"(if(list? lst_137)(void)(let-values()(in-list lst_137)))"
"((letrec-values(((for-loop_138)"
"(lambda(fold-var_139 lst_140 lst_141)"
"(if(if(pair? lst_140)(pair? lst_141) #f)"
"(let-values(((clause_142)(unsafe-car lst_140))"
"((ids_143)(unsafe-car lst_141)))"
"(let-values(((fold-var_144)"
"(let-values()"
"(let-values(((fold-var_146)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
"(if rec?_134"
"(alt-reverse"
"(let-values(((lst_147)"
"(car clause_142)))"
"(begin"
"(if(list? lst_147)"
"(void)"
"(let-values()"
"(in-list lst_147)))"
"(if(list? lst_148)"
"(void)"
"(let-values()"
"(in-list lst_148)))"
"((letrec-values(((for-loop_149)"
"(lambda(fold-var_150"
" lst_151"
" lst_152)"
"(if(if(pair?"
" lst_151)"
"(pair?"
" lst_152)"
" #f)"
"(let-values(((sym_153)"
"(unsafe-car"
" lst_151))"
"((id_154)"
"(unsafe-car"
" lst_152)))"
"(let-values(((fold-var_155)"
"(let-values()"
"(let-values(((fold-var_157)"
"(let-values()"
"(cons"
"(let-values()"
"(add-undefined-error-name-property"
" sym_153"
" id_154))"
" fold-var_156))))"
"(values"
" fold-var_157)))))"
"(for-loop_149"
" fold-var_155"
"(unsafe-cdr"
" lst_151)"
"(unsafe-cdr"
" lst_152))))"
" fold-var_150))))"
" for-loop_149)"
" null"
" lst_147"
" lst_148))))"
"(car clause_142))"
"(compile$2"
"(cadr clause_142)"
" cctx_132"
"(if(= 1(length ids_143))"
"(car ids_143)"
" #f))))"
" fold-var_145))))"
"(values fold-var_146)))))"
"(for-loop_138 fold-var_144(unsafe-cdr lst_140)(unsafe-cdr lst_141))))"
" fold-var_139))))"
" for-loop_138)"
" null"
" lst_136"
" lst_137))))"
"(compile-sequence(parsed-let_-values-body p_131) cctx_132 name_133 result-used?_135)))))))))))"
"(define-values"
"(unpack16.1$3)"
"(lambda(given-kws_158 given-args_159 p11_160 cctx12_161 name13_162 result-used?14_163)"
"(let-values(((rec?9_164)(car given-args_159)))"
"(compile-let15.1 rec?9_164 p11_160 cctx12_161 name13_162 result-used?14_163))))"
"(define-values"
"(compile-let17.1)"
"(lifted/2.1$16"
"(lambda(given-kws_165 given-argc_166)"
"(if(= given-argc_166 6)"
"(let-values()(if(pair? l2_167)(if(eq?(car l2_167) '#:rec?)(null?(cdr l2_167)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_168 given-args_169 p_170 cctx_171 name_172 result-used?_173)"
"(unpack16.1$3 given-kws_168 given-args_169 p_170 cctx_171 name_172 result-used?_173)))"
" '(#:rec?)"
" '(#:rec?)))"
"(define-values"
"(add-undefined-error-name-property)"
"(lambda(sym_174 orig-id_175)"
"(let-values(((id_176)(correlate* orig-id_175 sym_174)))"
"(correlated-property"
" id_176"
" 'undefined-error-name"
"(let-values(((or-part_177)(syntax-property$1 orig-id_175 'undefined-error-name)))"
"(if or-part_177 or-part_177(syntax-e$1 orig-id_175)))))))"
"(define-values"
"(compile-identifier22.1)"
"(lambda(set-to18_178 set-to19_179 p20_180 cctx21_181)"
"(let-values()"
"(let-values()"
"(let-values(((rhs_184)(if set-to19_179 set-to18_178 #f)))"
"(let-values()"
"(let-values(((normal-b_185)(parsed-id-binding p_182)))"
"(let-values(((b_186)"
"(let-values()"
"(if or-part_188"
" or-part_188"
"(let-values(((temp42_189)(compile-context-self cctx_183))"
"((temp43_190)(compile-context-phase cctx_183))"
"((temp44_191)(syntax-e$1(parsed-s p_182))))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp42_189"
" temp43_190"
" temp44_191))))))"
"(let-values(((sym_187)"
"(if(local-binding? b_186)"
"(let-values()(local-binding-key b_186))"
"(if(module-binding? b_186)"
"(let-values()"
"(let-values(((mpi_192)"
"(if(parsed-top-id? p_182)"
"(compile-context-self cctx_183)"
"(module-binding-module b_186))))"
"(if(parsed-primitive-id? p_182)"
"(let-values()"
"(begin"
"(if(zero?(module-binding-phase b_186))"
"(void)"
"                                              (let-values () (error \"internal error: non-zero phase for a primitive\")))"
"(if rhs_184"
"(let-values()"
"(error"
"                                                 \"internal error: cannot assign to a primitive:\""
"(parsed-s p_182)))"
"(void))"
"(module-binding-sym b_186)))"
"(if(eq? mpi_192(compile-context-module-self cctx_183))"
"(let-values()"
"(let-values(((header_193)(compile-context-header cctx_183)))"
"(hash-ref"
"(header-binding-sym-to-define-sym header_193)"
"(module-binding-sym b_186))))"
"(let-values()"
"(let-values(((temp45_194)(compile-context-header cctx_183))"
"((temp47_196)(module-binding-phase b_186))"
"((temp48_197)(module-binding-sym b_186))"
"((temp49_198)"
"(let-values(((or-part_199)"
"(module-binding-extra-inspector b_186)))"
"(if or-part_199"
" or-part_199"
"(syntax-inspector(parsed-s p_182))))))"
"(register-required-variable-use!19.1"
" #f"
" #f"
" temp45_194"
" mpi46_195"
" temp47_196"
" temp48_197"
" temp49_198)))))))"
"(let-values()"
"                                    (error \"not a reference to a module or local binding:\" b_186 (parsed-s p_182)))))))"
"(correlate*(parsed-s p_182)(if rhs_184(list 'set! sym_187 rhs_184) sym_187)))))))))))"
"(define-values"
"(unpack23.1)"
"(lambda(given-kws_200 given-args_201 p20_202 cctx21_203)"
"(let-values(((set-to19_204)(pair? given-kws_200)))"
"(let-values(((set-to18_205)(if set-to19_204(car given-args_201)(void))))"
"(compile-identifier22.1 set-to18_205 set-to19_204 p20_202 cctx21_203)))))"
"(define-values"
"(compile-identifier24.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_206 given-argc_207)"
"(if(= given-argc_207 4)"
"(let-values()"
"(let-values(((l1_209)(if(null? l1_208) l1_208(if(eq?(car l1_208) '#:set-to)(cdr l1_208) l1_208))))"
"(null? l1_209)))"
" #f))"
"(case-lambda"
"((given-kws_210 given-args_211 p_212 cctx_213)(unpack23.1 given-kws_210 given-args_211 p_212 cctx_213)))"
" null"
" '(#:set-to)"
"(let-values(((compile-identifier_214)(case-lambda((p_215 cctx_216)(unpack23.1 null null p_215 cctx_216)))))"
" compile-identifier_214)))"
"(define-values"
"(compile-quote-syntax)"
"(lambda(q_217 cctx_218)"
"(let-values(((pos_219)(add-syntax-literal!(compile-context-header cctx_218) q_217)))"
"(if(compile-context-lazy-syntax-literals? cctx_218)"
"(let-values()(generate-lazy-syntax-literal-lookup pos_219))"
"(let-values()(generate-eager-syntax-literal-lookup pos_219))))))"
"(void)"
"(void)"
"(define-values"
"(compile-forms26.1)"
"(lambda(body-imports1_14"
" body-suffix-forms2_15"
" body-suffix-forms13_16"
" compiled-expression-callback6_17"
" compiled-expression-callback17_18"
" cross-linklet-inlining?11_19"
" cross-linklet-inlining?22_20"
" definition-callback7_21"
" definition-callback18_22"
" encoded-root-expand-ctx-box4_23"
" encoded-root-expand-ctx-box15_24"
" force-phases3_25"
" force-phases14_26"
" get-module-linklet-info9_27"
" get-module-linklet-info20_28"
" other-form-callback8_29"
" other-form-callback19_30"
" root-ctx-only-if-syntax?5_31"
" root-ctx-only-if-syntax?16_32"
" to-source?10_33"
" to-source?21_34"
" bodys23_35"
" cctx24_36"
" mpis25_37)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((body-suffix-forms_42)(if body-suffix-forms13_16 body-suffix-forms2_15 null)))"
"(let-values(((force-phases_43)(if force-phases14_26 force-phases3_25 null)))"
"(let-values(((encoded-root-expand-ctx-box_44)"
"(if encoded-root-expand-ctx-box15_24 encoded-root-expand-ctx-box4_23 #f)))"
"(let-values(((root-ctx-only-if-syntax?_45)"
"(if root-ctx-only-if-syntax?16_32 root-ctx-only-if-syntax?5_31 #f)))"
"(let-values(((compiled-expression-callback_46)"
"(if compiled-expression-callback17_18 compiled-expression-callback6_17 void)))"
"(let-values(((definition-callback_47)"
"(if definition-callback18_22 definition-callback7_21 void)))"
"(let-values(((other-form-callback_48)"
"(if other-form-callback19_30 other-form-callback8_29 void)))"
"(let-values(((get-module-linklet-info_49)"
"(if get-module-linklet-info20_28"
" get-module-linklet-info9_27"
"(lambda(mod-name_50 p_51) #f))))"
"(let-values(((to-source?_52)(if to-source?21_34 to-source?10_33 #f)))"
"(let-values(((cross-linklet-inlining?_53)"
"(if cross-linklet-inlining?22_20 cross-linklet-inlining?11_19 #t)))"
"(let-values()"
"(let-values(((phase_54)(compile-context-phase cctx_39)))"
"(let-values(((self_55)(compile-context-self cctx_39)))"
"(let-values(((syntax-literals_56)(make-syntax-literals)))"
"(let-values(((phase-to-body_57)(make-hasheqv)))"
"(let-values(((add-body!_58)"
"(lambda(phase_82 body_83)"
"(hash-update!"
" phase-to-body_57"
" phase_82"
"(lambda(l_84)(cons body_83 l_84))"
" null))))"
"(let-values(((phase-to-header_59)(make-hasheqv)))"
"(let-values(((find-or-create-header!_60)"
"(lambda(phase_85)"
"(let-values(((or-part_86)"
"(hash-ref phase-to-header_59 phase_85 #f)))"
"(if or-part_86"
" or-part_86"
"(let-values(((header_87)"
"(make-header"
" mpis_40"
" syntax-literals_56)))"
"(begin"
"(hash-set! phase-to-header_59 phase_85 header_87)"
" header_87)))))))"
"(let-values((()"
"(begin"
"(let-values()"
"(begin"
"(if(list? lst_88)"
"(void)"
"(let-values()(in-list lst_88)))"
"((letrec-values(((for-loop_89)"
"(lambda(fold-var_90 lst_91)"
"(if(pair? lst_91)"
"(let-values(((phase_92)"
"(unsafe-car"
" lst_91)))"
"(let-values(((fold-var_93)"
"(let-values()"
"(let-values(((fold-var_95)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(find-or-create-header!_60"
" phase_92)"
"(add-body!_58"
" phase_92"
" '(void))))"
"(void)))))"
"(values"
" fold-var_95)))))"
"(for-loop_89"
" fold-var_93"
"(unsafe-cdr lst_91))))"
" fold-var_90))))"
" for-loop_89)"
"(void)"
" lst_88)))"
"(values))))"
"(let-values(((saw-define-syntaxes?_61) #f))"
"(let-values((()"
"(begin"
"(if(compile-context-module-self cctx_39)"
"(let-values()"
"((letrec-values(((loop!_96)"
"(lambda(bodys_97"
" phase_98"
" header_99)"
"(let-values()"
"(begin"
"(if(list? lst_100)"
"(void)"
"(let-values()"
"(in-list lst_100)))"
"((letrec-values(((for-loop_101)"
"(lambda(fold-var_102"
" lst_103)"
"(if(pair?"
" lst_103)"
"(let-values(((body_104)"
"(unsafe-car"
" lst_103)))"
"(let-values(((fold-var_105)"
"(let-values()"
"(let-values(((fold-var_107)"
"(let-values()"
"(begin"
"(let-values()"
"(if(parsed-define-values?"
" body_104)"
"(let-values()"
"(let-values(((lst_108)"
"(parsed-define-values-syms"
" body_104)))"
"(begin"
"(if(list?"
" lst_108)"
"(void)"
"(let-values()"
"(in-list"
" lst_108)))"
"((letrec-values(((for-loop_109)"
"(lambda(fold-var_110"
" lst_111)"
"(if(pair?"
" lst_111)"
"(let-values(((sym_112)"
"(unsafe-car"
" lst_111)))"
"(let-values(((fold-var_113)"
"(let-values()"
"(let-values(((fold-var_115)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((def-sym_116)"
"(select-fresh"
" sym_112"
" header_99)))"
"(begin"
"(hash-set!"
"(header-binding-sym-to-define-sym"
" header_99)"
" sym_112"
" def-sym_116)"
"(set-header-binding-syms-in-order!"
" header_99"
"(cons"
" sym_112"
"(header-binding-syms-in-order"
" header_99)))"
"(register-as-defined!"
" header_99"
" def-sym_116))))"
"(void)))))"
"(values"
" fold-var_115)))))"
"(for-loop_109"
" fold-var_113"
"(unsafe-cdr"
" lst_111))))"
" fold-var_110))))"
" for-loop_109)"
"(void)"
" lst_108))))"
"(if(parsed-begin-for-syntax?"
" body_104)"
"(let-values()"
"(loop!_96"
"(parsed-begin-for-syntax-body"
" body_104)"
"(add1"
" phase_98)"
"(find-or-create-header!_60"
"(add1"
" phase_98))))"
"(void))))"
"(void)))))"
"(values"
" fold-var_107)))))"
"(for-loop_101"
" fold-var_105"
"(unsafe-cdr"
" lst_103))))"
" fold-var_102))))"
" for-loop_101)"
"(void)"
" lst_100))))))"
" loop!_96)"
" bodys_38"
" phase_54"
"(find-or-create-header!_60 phase_54)))"
"(void))"
"(values))))"
"(let-values(((as-required?_62)"
"(lambda(header_117)"
"(lambda(sym_118)"
"(registered-as-required? header_117 sym_118)))))"
"(let-values(((last-i_63)(sub1(length bodys_38))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop!_119)"
"(lambda(bodys_120"
" phase_121"
" header_122)"
"(let-values(((start_124)"
" 0))"
"(begin"
"(if(list? lst_123)"
"(void)"
"(let-values()"
"(in-list"
" lst_123)))"
"(if(exact-nonnegative-integer?"
" start_124)"
"(void)"
"(let-values()"
"(in-naturals"
" start_124)))"
"((letrec-values(((for-loop_125)"
"(lambda(fold-var_126"
" lst_127"
" pos_128)"
"(if(if(pair?"
" lst_127)"
" #t"
" #f)"
"(let-values(((body_129)"
"(unsafe-car"
" lst_127)))"
"(let-values(((fold-var_131)"
"(let-values()"
"(let-values(((fold-var_133)"
"(let-values()"
"(begin"
"(let-values()"
"(if(parsed-define-values?"
" body_129)"
"(let-values()"
"(let-values(((ids_134)"
"(parsed-define-values-ids"
" body_129)))"
"(let-values(((binding-syms_135)"
"(parsed-define-values-syms"
" body_129)))"
"(let-values(((def-syms_136)"
"(if(compile-context-module-self"
" cctx_39)"
"(let-values()"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list?"
" lst_138)"
"(void)"
"(let-values()"
"(in-list"
" lst_138)))"
"((letrec-values(((for-loop_139)"
"(lambda(fold-var_140"
" lst_141)"
"(if(pair?"
" lst_141)"
"(let-values(((binding-sym_142)"
"(unsafe-car"
" lst_141)))"
"(let-values(((fold-var_143)"
"(let-values()"
"(let-values(((fold-var_145)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
"(header-binding-sym-to-define-sym"
" header_122)"
" binding-sym_142))"
" fold-var_144))))"
"(values"
" fold-var_145)))))"
"(for-loop_139"
" fold-var_143"
"(unsafe-cdr"
" lst_141))))"
" fold-var_140))))"
" for-loop_139)"
" null"
" lst_138)))))"
"(let-values()"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list?"
" lst_146)"
"(void)"
"(let-values()"
"(in-list"
" lst_146)))"
"((letrec-values(((for-loop_147)"
"(lambda(fold-var_148"
" lst_149)"
"(if(pair?"
" lst_149)"
"(let-values(((binding-sym_150)"
"(unsafe-car"
" lst_149)))"
"(let-values(((fold-var_151)"
"(let-values()"
"(let-values(((fold-var_153)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((temp31_156)"
"(compile-context-self"
" cctx_39))"
"((temp34_159)"
" #f)"
"((temp35_160)"
" #t))"
"(register-required-variable-use!19.1"
" temp35_160"
" #t"
" header30_155"
" temp31_156"
" phase32_157"
" binding-sym33_158"
" temp34_159)))"
" fold-var_152))))"
"(values"
" fold-var_153)))))"
"(for-loop_147"
" fold-var_151"
"(unsafe-cdr"
" lst_149))))"
" fold-var_148))))"
" for-loop_147)"
" null"
" lst_146))))))))"
"(let-values(((rhs_137)"
"(compile$2"
"(parsed-define-values-rhs"
" body_129)"
"(let-values()"
"(if(compile-context?"
" the-struct_161)"
"(let-values()"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_161)"
" phase36_162"
"(compile-context-self"
" the-struct_161)"
"(compile-context-module-self"
" the-struct_161)"
"(compile-context-full-module-name"
" the-struct_161)"
"(compile-context-lazy-syntax-literals?"
" the-struct_161)"
" header37_163))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                            \"compile-context?\""
" the-struct_161)))"
"(if(="
"(length"
" ids_134)"
" 1)"
"(car"
" ids_134)"
" #f))))"
"(begin"
"(definition-callback_47)"
"(compiled-expression-callback_46"
" rhs_137"
"(length"
" def-syms_136)"
" phase_121"
"(as-required?_62"
" header_122))"
"(add-body!_58"
" phase_121"
"(propagate-inline-property"
"(correlate*"
"(parsed-s"
" body_129)"
"(list"
" 'define-values"
" def-syms_136"
" rhs_137))"
"(parsed-s"
" body_129)))"
"(if(let-values(((or-part_164)"
"(compile-context-module-self"
" cctx_39)))"
"(if or-part_164"
" or-part_164"
"(null?"
" ids_134)))"
"(void)"
"(let-values()"
"(begin"
"(add-body!_58"
" phase_121"
"(list*"
" 'if"
" #f"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list?"
" lst_165)"
"(void)"
"(let-values()"
"(in-list"
" lst_165)))"
"((letrec-values(((for-loop_166)"
"(lambda(fold-var_167"
" lst_168)"
"(if(pair?"
" lst_168)"
"(let-values(((def-sym_169)"
"(unsafe-car"
" lst_168)))"
"(let-values(((fold-var_170)"
"(let-values()"
"(let-values(((fold-var_172)"
"(let-values()"
"(cons"
"(let-values()"
"(list*"
" 'set!"
" def-sym_169"
" '(#f)))"
" fold-var_171))))"
"(values"
" fold-var_172)))))"
"(for-loop_166"
" fold-var_170"
"(unsafe-cdr"
" lst_168))))"
" fold-var_167))))"
" for-loop_166)"
" null"
" lst_165)))))"
" '((void))))"
"(add-body!_58"
" phase_121"
"(compile-top-level-bind"
" ids_134"
" binding-syms_135"
"(let-values()"
"(if(compile-context?"
" the-struct_173)"
"(let-values()"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_173)"
" phase38_174"
"(compile-context-self"
" the-struct_173)"
"(compile-context-module-self"
" the-struct_173)"
"(compile-context-full-module-name"
" the-struct_173)"
"(compile-context-lazy-syntax-literals?"
" the-struct_173)"
" header39_175))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                         \"compile-context?\""
" the-struct_173)))"
" #f)))))))))))"
"(if(parsed-define-syntaxes?"
" body_129)"
"(let-values()"
"(let-values(((ids_176)"
"(parsed-define-syntaxes-ids"
" body_129)))"
"(let-values(((binding-syms_177)"
"(parsed-define-syntaxes-syms"
" body_129)))"
"(let-values(((next-header_178)"
"(find-or-create-header!_60"
"(add1"
" phase_121))))"
"(let-values(((gen-syms_179)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list?"
" lst_182)"
"(void)"
"(let-values()"
"(in-list"
" lst_182)))"
"((letrec-values(((for-loop_183)"
"(lambda(fold-var_184"
" lst_185)"
"(if(pair?"
" lst_185)"
"(let-values(((binding-sym_186)"
"(unsafe-car"
" lst_185)))"
"(let-values(((fold-var_187)"
"(let-values()"
"(let-values(((fold-var_189)"
"(let-values()"
"(cons"
"(let-values()"
"(select-fresh"
" binding-sym_186"
" next-header_178))"
" fold-var_188))))"
"(values"
" fold-var_189)))))"
"(for-loop_183"
" fold-var_187"
"(unsafe-cdr"
" lst_185))))"
" fold-var_184))))"
" for-loop_183)"
" null"
" lst_182))))))"
"(let-values(((rhs_180)"
"(compile$2"
"(parsed-define-syntaxes-rhs"
" body_129)"
"(let-values()"
"(if(compile-context?"
" the-struct_190)"
"(let-values(((phase40_191)"
"(add1"
" phase_121)))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_190)"
" phase40_191"
"(compile-context-self"
" the-struct_190)"
"(compile-context-module-self"
" the-struct_190)"
"(compile-context-full-module-name"
" the-struct_190)"
"(compile-context-lazy-syntax-literals?"
" the-struct_190)"
" header41_192))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                \"compile-context?\""
" the-struct_190))))))"
"(let-values((()"
"(begin"
"(definition-callback_47)"
"(values))))"
"(let-values((()"
"(begin"
"(compiled-expression-callback_46"
" rhs_180"
"(length"
" gen-syms_179)"
"(add1"
" phase_121)"
"(as-required?_62"
" header_122))"
"(values))))"
"(let-values(((transformer-set!s_181)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list?"
" lst_193)"
"(void)"
"(let-values()"
"(in-list"
" lst_193)))"
"(if(list?"
" lst_194)"
"(void)"
"(let-values()"
"(in-list"
" lst_194)))"
"((letrec-values(((for-loop_195)"
"(lambda(fold-var_196"
" lst_197"
" lst_198)"
"(if(if(pair?"
" lst_197)"
"(pair?"
" lst_198)"
" #f)"
"(let-values(((binding-sym_199)"
"(unsafe-car"
" lst_197))"
"((gen-sym_200)"
"(unsafe-car"
" lst_198)))"
"(let-values(((fold-var_201)"
"(let-values()"
"(let-values(((fold-var_203)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" set-transformer!-id"
"(list"
" 'quote"
" binding-sym_199)"
" gen-sym_200))"
" fold-var_202))))"
"(values"
" fold-var_203)))))"
"(for-loop_195"
" fold-var_201"
"(unsafe-cdr"
" lst_197)"
"(unsafe-cdr"
" lst_198))))"
" fold-var_196))))"
" for-loop_195)"
" null"
" lst_193"
" lst_194))))))"
"(begin"
"(if(compile-context-module-self"
" cctx_39)"
"(let-values()"
"(add-body!_58"
"(add1"
" phase_121)"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_179"
" rhs_180))"
"(list*"
" 'begin"
"(qq-append"
" transformer-set!s_181"
" '((void)))))))"
"(let-values()"
"(add-body!_58"
"(add1"
" phase_121)"
"(generate-top-level-define-syntaxes"
" gen-syms_179"
" rhs_180"
" transformer-set!s_181"
"(compile-top-level-bind"
" ids_176"
" binding-syms_177"
"(let-values()"
"(if(compile-context?"
" the-struct_204)"
"(let-values()"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_204)"
" phase42_205"
"(compile-context-self"
" the-struct_204)"
"(compile-context-module-self"
" the-struct_204)"
"(compile-context-full-module-name"
" the-struct_204)"
"(compile-context-lazy-syntax-literals?"
" the-struct_204)"
" header43_206))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                  \"compile-context?\""
" the-struct_204)))"
" gen-syms_179)))))"
"(set! saw-define-syntaxes?_61"
" #t)))))))))))"
"(if(parsed-begin-for-syntax?"
" body_129)"
"(let-values()"
"(loop!_119"
"(parsed-begin-for-syntax-body"
" body_129)"
"(add1"
" phase_121)"
"(find-or-create-header!_60"
"(add1"
" phase_121))))"
"(if(let-values(((or-part_207)"
"(parsed-#%declare?"
" body_129)))"
"(if or-part_207"
" or-part_207"
"(let-values(((or-part_208)"
"(parsed-module?"
" body_129)))"
"(if or-part_208"
" or-part_208"
"(parsed-require?"
" body_129)))))"
"(let-values()"
"(let-values(((e_209)"
"(other-form-callback_48"
" body_129"
"(let-values()"
"(if(compile-context?"
" the-struct_210)"
"(let-values()"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_210)"
" phase44_211"
"(compile-context-self"
" the-struct_210)"
"(compile-context-module-self"
" the-struct_210)"
"(compile-context-full-module-name"
" the-struct_210)"
"(compile-context-lazy-syntax-literals?"
" the-struct_210)"
" header45_212))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                            \"compile-context?\""
" the-struct_210))))))"
"(if e_209"
"(let-values()"
"(begin"
"(compiled-expression-callback_46"
" e_209"
" #f"
" phase_121"
"(as-required?_62"
" header_122))"
"(add-body!_58"
" phase_121"
" e_209)))"
"(void))))"
"(let-values()"
"(let-values(((e_213)"
"(compile$2"
" body_129"
"(let-values()"
"(if(compile-context?"
" the-struct_214)"
"(let-values()"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_214)"
" phase46_215"
"(compile-context-self"
" the-struct_214)"
"(compile-context-module-self"
" the-struct_214)"
"(compile-context-full-module-name"
" the-struct_214)"
"(compile-context-lazy-syntax-literals?"
" the-struct_214)"
" header47_216))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                            \"compile-context?\""
" the-struct_214)))"
" #f"
"(="
" i_130"
" last-i_63))))"
"(begin"
"(compiled-expression-callback_46"
" e_213"
" #f"
" phase_121"
"(as-required?_62"
" header_122))"
"(add-body!_58"
" phase_121"
" e_213)))))))))"
"(void)))))"
"(values"
" fold-var_133)))))"
"(for-loop_125"
" fold-var_131"
"(unsafe-cdr"
" lst_127)"
"(+"
" pos_128"
" 1))))"
" fold-var_126))))"
" for-loop_125)"
"(void)"
" lst_123"
" start_124))))))"
" loop!_119)"
" bodys_38"
" phase_54"
"(find-or-create-header!_60 phase_54))"
"(values))))"
"(let-values(((encoded-root-expand-pos_64)"
"(if encoded-root-expand-ctx-box_44"
"(if(unbox encoded-root-expand-ctx-box_44)"
"(if(not"
"(if root-ctx-only-if-syntax?_45"
"(if(not saw-define-syntaxes?_61)"
"(syntax-literals-empty?"
" syntax-literals_56)"
" #f)"
" #f))"
"(add-syntax-literal!"
" syntax-literals_56"
"(unbox encoded-root-expand-ctx-box_44))"
" #f)"
" #f)"
" #f)))"
"(let-values(((phases-in-order_65)"
"(let-values(((temp48_217)"
"(hash-keys phase-to-body_57))"
"((<49_218) <))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" temp48_217"
" <49_218))))"
"(let-values(((min-phase_66)"
"(if(pair? phases-in-order_65)"
"(car phases-in-order_65)"
" phase_54)))"
"(let-values(((max-phase_67)"
"(if(pair? phases-in-order_65)"
"(car(alt-reverse phases-in-order_65))"
" phase_54)))"
"(let-values(((struct:link-info_68"
" link-info29_69"
" link-info?_70"
" link-info-link-module-uses_71"
" link-info-imports_72"
" link-info-extra-inspectorsss_73"
" link-info-def-decls_74)"
"(let-values(((struct:_219"
" make-_220"
" ?_221"
" -ref_222"
" -set!_223)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'link-info"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'link-info)))))"
"(values"
" struct:_219"
" make-_220"
" ?_221"
"(make-struct-field-accessor"
" -ref_222"
" 0"
" 'link-module-uses)"
"(make-struct-field-accessor"
" -ref_222"
" 1"
" 'imports)"
"(make-struct-field-accessor"
" -ref_222"
" 2"
" 'extra-inspectorsss)"
"(make-struct-field-accessor"
" -ref_222"
" 3"
" 'def-decls)))))"
"(let-values(((phase-to-link-info_76)"
"(let-values()"
"(begin"
"(if(list? lst_254)"
"(void)"
"(let-values()"
"(in-list lst_254)))"
"((letrec-values(((for-loop_255)"
"(lambda(table_256"
" lst_257)"
"(if(pair?"
" lst_257)"
"(let-values(((phase_258)"
"(unsafe-car"
" lst_257)))"
"(let-values(((table_259)"
"(let-values()"
"(let-values(((table_261)"
"(let-values()"
"(let-values(((key_262"
" val_263)"
"(let-values()"
"(let-values(((header_264)"
"(hash-ref"
" phase-to-header_59"
" phase_258"
" #f)))"
"(let-values(((link-module-uses_265"
" imports_266"
" extra-inspectorsss_267"
" def-decls_268)"
"(generate-links+imports"
" header_264"
" phase_258"
" cctx_39)))"
"(values"
" phase_258"
"(link-info29_69"
" link-module-uses_265"
" imports_266"
" extra-inspectorsss_267"
" def-decls_268)))))))"
"(hash-set"
" table_260"
" key_262"
" val_263)))))"
"(values"
" table_261)))))"
"(for-loop_255"
" table_259"
"(unsafe-cdr"
" lst_257))))"
" table_256))))"
" for-loop_255)"
" '#hash()"
" lst_254)))))"
"(let-values(((body-linklets+module-uses_77)"
"(let-values()"
"(begin"
"(if(list? lst_269)"
"(void)"
"(let-values()"
"(in-list lst_269)))"
"((letrec-values(((for-loop_270)"
"(lambda(table_271"
" lst_272)"
"(if(pair?"
" lst_272)"
"(let-values(((phase_273)"
"(unsafe-car"
" lst_272)))"
"(let-values(((table_274)"
"(let-values()"
"(let-values(((table_276)"
"(let-values()"
"(let-values(((key_277"
" val_278)"
"(let-values()"
"(let-values(((bodys_279)"
"(hash-ref"
" phase-to-body_57"
" phase_273)))"
"(let-values(((li_280)"
"(hash-ref"
" phase-to-link-info_76"
" phase_273)))"
"(let-values(((binding-sym-to-define-sym_281)"
"(header-binding-sym-to-define-sym"
"(hash-ref"
" phase-to-header_59"
" phase_273))))"
"(let-values(((module-uses_282)"
"(link-info-link-module-uses_71"
" li_280)))"
"(let-values(((linklet_283"
" new-module-uses_284)"
"(let-values()"
"((if to-source?_52"
"(lambda(l_285"
" name_286"
" keys_287"
" getter_288)"
"(values"
" l_285"
" keys_287))"
"(lambda(l_289"
" name_290"
" keys_291"
" getter_292)"
"(1/compile-linklet"
" l_289"
" name_290"
" keys_291"
" getter_292)))"
"(list*"
" 'linklet"
"(qq-append"
" body-imports_41"
"(link-info-imports_72"
" li_280))"
"(qq-append"
"(link-info-def-decls_74"
" li_280)"
"(alt-reverse"
"(let-values(((lst_293)"
"(header-binding-syms-in-order"
"(hash-ref"
" phase-to-header_59"
" phase_273))))"
"(begin"
"(if(list?"
" lst_293)"
"(void)"
"(let-values()"
"(in-list"
" lst_293)))"
"((letrec-values(((for-loop_294)"
"(lambda(fold-var_295"
" lst_296)"
"(if(pair?"
" lst_296)"
"(let-values(((binding-sym_297)"
"(unsafe-car"
" lst_296)))"
"(let-values(((fold-var_298)"
"(let-values()"
"(let-values(((fold-var_300)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((def-sym_301)"
"(hash-ref"
" binding-sym-to-define-sym_281"
" binding-sym_297)))"
"(list"
" def-sym_301"
" binding-sym_297)))"
" fold-var_299))))"
"(values"
" fold-var_300)))))"
"(for-loop_294"
" fold-var_298"
"(unsafe-cdr"
" lst_296))))"
" fold-var_295))))"
" for-loop_294)"
" null"
" lst_293)))))"
"(qq-append"
"(alt-reverse"
" bodys_279)"
" body-suffix-forms_42))"
" 'module"
"(list->vector"
"(append"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list?"
" lst_302)"
"(void)"
"(let-values()"
"(in-list"
" lst_302)))"
"((letrec-values(((for-loop_303)"
"(lambda(fold-var_304"
" lst_305)"
"(if(pair?"
" lst_305)"
"(let-values(((i_306)"
"(unsafe-car"
" lst_305)))"
"(let-values(((fold-var_307)"
"(let-values()"
"(let-values(((fold-var_309)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_308))))"
"(values"
" fold-var_309)))))"
"(for-loop_303"
" fold-var_307"
"(unsafe-cdr"
" lst_305))))"
" fold-var_304))))"
" for-loop_303)"
" null"
" lst_302))))"
"(link-info-link-module-uses_71"
" li_280)))"
"(if cross-linklet-inlining?_53"
"(make-module-use-to-linklet"
"(compile-context-namespace"
" cctx_39)"
" get-module-linklet-info_49"
"(link-info-link-module-uses_71"
" li_280))"
" #f)))))"
"(values"
" phase_273"
"(cons"
" linklet_283"
"(list-tail"
"(vector->list"
" new-module-uses_284)"
"(length"
" body-imports_41))))))))))))"
"(hash-set"
" table_275"
" key_277"
" val_278)))))"
"(values"
" table_276)))))"
"(for-loop_270"
" table_274"
"(unsafe-cdr"
" lst_272))))"
" table_271))))"
" for-loop_270)"
" '#hasheq()"
" lst_269)))))"
"(let-values(((body-linklets_78)"
"(let-values()"
"(begin"
"(if((lambda(ht_311)"
"(hash? ht_311))"
" ht_310)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_310)))"
"((letrec-values(((for-loop_312)"
"(lambda(table_313"
" i_314)"
"(if i_314"
"(let-values(((phase_315"
" l+mus_316)"
"(hash-iterate-key+value"
" ht_310"
" i_314)))"
"(let-values(((table_317)"
"(let-values()"
"(let-values(((table_319)"
"(let-values()"
"(let-values(((key_320"
" val_321)"
"(let-values()"
"(values"
" phase_315"
"(car"
" l+mus_316)))))"
"(hash-set"
" table_318"
" key_320"
" val_321)))))"
"(values"
" table_319)))))"
"(for-loop_312"
" table_317"
"(hash-iterate-next"
" ht_310"
" i_314))))"
" table_313))))"
" for-loop_312)"
" '#hasheq()"
"(hash-iterate-first"
" ht_310))))))"
"(let-values(((phase-to-link-module-uses_79)"
"(let-values()"
"(begin"
"(if((lambda(ht_323)"
"(hash? ht_323))"
" ht_322)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_322)))"
"((letrec-values(((for-loop_324)"
"(lambda(table_325"
" i_326)"
"(if i_326"
"(let-values(((phase_327"
" l+mus_328)"
"(hash-iterate-key+value"
" ht_322"
" i_326)))"
"(let-values(((table_329)"
"(let-values()"
"(let-values(((table_331)"
"(let-values()"
"(let-values(((key_332"
" val_333)"
"(let-values()"
"(values"
" phase_327"
"(cdr"
" l+mus_328)))))"
"(hash-set"
" table_330"
" key_332"
" val_333)))))"
"(values"
" table_331)))))"
"(for-loop_324"
" table_329"
"(hash-iterate-next"
" ht_322"
" i_326))))"
" table_325))))"
" for-loop_324)"
" '#hasheq()"
"(hash-iterate-first"
" ht_322))))))"
"(let-values(((phase-to-link-module-uses-expr_80)"
"(serialize-phase-to-link-module-uses"
" phase-to-link-module-uses_79"
" mpis_40)))"
"(let-values(((phase-to-link-extra-inspectorsss_81)"
"(let-values()"
"(begin"
"(if((lambda(ht_335)"
"(hash? ht_335))"
" ht_334)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_334)))"
"((letrec-values(((for-loop_336)"
"(lambda(table_337"
" i_338)"
"(if i_338"
"(let-values(((phase_339"
" li_340)"
"(hash-iterate-key+value"
" ht_334"
" i_338)))"
"(let-values(((table_341)"
"(let-values()"
"(let-values(((table_343)"
"(let-values()"
"(let-values(((key_344"
" val_345)"
"(let-values()"
"(values"
" phase_339"
"(link-info-extra-inspectorsss_73"
" li_340)))))"
"(hash-set"
" table_342"
" key_344"
" val_345)))))"
"(values"
" table_343)))))"
"(for-loop_336"
" table_341"
"(hash-iterate-next"
" ht_334"
" i_338))))"
" table_337))))"
" for-loop_336)"
" '#hash()"
"(hash-iterate-first"
" ht_334))))))"
"(values"
" body-linklets_78"
" min-phase_66"
" max-phase_67"
" phase-to-link-module-uses_79"
" phase-to-link-module-uses-expr_80"
" phase-to-link-extra-inspectorsss_81"
" syntax-literals_56"
" encoded-root-expand-pos_64))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(compile-top-level-bind)"
"(lambda(ids_399 binding-syms_400 cctx_401 trans-exprs_402)"
"(let-values(((phase_403)(compile-context-phase cctx_401)))"
"(let-values(((self_404)(compile-context-self cctx_401)))"
"(let-values(((header_405)(compile-context-header cctx_401)))"
"(let-values(((mpis_406)(header-module-path-indexes header_405)))"
"(let-values(((top-level-bind-scope_407)"
"(root-expand-context-top-level-bind-scope"
"(namespace-get-root-expand-ctx(compile-context-namespace cctx_401)))))"
"(let-values(((self-expr_408)(add-module-path-index! mpis_406 self_404)))"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((lst_411)"
"(let-values()"
"(if or-part_412"
" or-part_412"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_413)(void)(let-values()(in-list lst_413)))"
"((letrec-values(((for-loop_414)"
"(lambda(fold-var_415 lst_416)"
"(if(pair? lst_416)"
"(let-values(((id_417)(unsafe-car lst_416)))"
"(let-values(((fold-var_418)"
"(let-values()"
"(let-values(((fold-var_420)"
"(let-values()"
"(cons"
"(let-values() ''#f)"
" fold-var_419))))"
"(values fold-var_420)))))"
"(for-loop_414 fold-var_418(unsafe-cdr lst_416))))"
" fold-var_415))))"
" for-loop_414)"
" null"
" lst_413))))))))"
"(begin"
"(if(list? lst_409)(void)(let-values()(in-list lst_409)))"
"(if(list? lst_410)(void)(let-values()(in-list lst_410)))"
"(if(list? lst_411)(void)(let-values()(in-list lst_411)))"
"((letrec-values(((for-loop_421)"
"(lambda(fold-var_422 lst_423 lst_424 lst_425)"
"(if(if(pair? lst_423)(if(pair? lst_424)(pair? lst_425) #f) #f)"
"(let-values(((id_426)(unsafe-car lst_423))"
"((binding-sym_427)(unsafe-car lst_424))"
"((trans-expr_428)(unsafe-car lst_425)))"
"(let-values(((fold-var_429)"
"(let-values()"
"(let-values(((fold-var_431)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id-stx_432)"
"(compile-quote-syntax"
"(remove-scope"
" id_426"
" top-level-bind-scope_407)"
" cctx_401)))"
"(list"
" top-level-bind!-id"
" id-stx_432"
" self-expr_408"
" phase_403"
" phase-shift-id"
" ns-id"
"(list 'quote binding-sym_427)"
"(if trans-exprs_402 #t #f)"
" trans-expr_428)))"
" fold-var_430))))"
"(values fold-var_431)))))"
"(for-loop_421"
" fold-var_429"
"(unsafe-cdr lst_423)"
"(unsafe-cdr lst_424)"
"(unsafe-cdr lst_425))))"
" fold-var_422))))"
" for-loop_421)"
" null"
" lst_409"
" lst_410"
" lst_411)))))))))))))"
"(define-values"
"(generate-top-level-define-syntaxes)"
"(lambda(gen-syms_435 rhs_436 transformer-set!s_437 finish_438)"
"(list"
" 'call-with-values"
"(list 'lambda '() rhs_436)"
"(list"
" 'case-lambda"
"(list gen-syms_435(list* 'begin(qq-append transformer-set!s_437(list* finish_438 '((void))))))"
"(list"
" '()"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_435"
"(list*"
" 'values"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_439)(void)(let-values()(in-list lst_439)))"
"((letrec-values(((for-loop_440)"
"(lambda(fold-var_441 lst_442)"
"(if(pair? lst_442)"
"(let-values(((s_443)(unsafe-car lst_442)))"
"(let-values(((fold-var_444)"
"(let-values()"
"(let-values(((fold-var_446)"
"(let-values()"
"(cons(let-values() ''#f) fold-var_445))))"
"(values fold-var_446)))))"
"(for-loop_440 fold-var_444(unsafe-cdr lst_442))))"
" fold-var_441))))"
" for-loop_440)"
" null"
" lst_439)))))))"
"(list* 'begin finish_438 '((void)))))"
"(list 'args(list* 'let-values(list(list* gen-syms_435 '((apply values args)))) '((void))))))))"
"(define-values"
"(propagate-inline-property)"
"(lambda(e_447 orig-s_448)"
"(let-values(((v_449)(syntax-property$1 orig-s_448 'compiler-hint:cross-module-inline)))"
"(if v_449(correlated-property e_447 'compiler-hint:cross-module-inline v_449) e_447))))"
"(define-values"
"(make-module-use-to-linklet)"
"(lambda(ns_450 get-module-linklet-info_451 init-mus_452)"
"(let-values(((mu-intern-table_453)(make-hash)))"
"(let-values(((intern-module-use_454)"
"(lambda(mu_455)"
"(let-values(((mod-name_456)(1/module-path-index-resolve(module-use-module mu_455))))"
"(let-values(((or-part_457)"
"(hash-ref mu-intern-table_453(cons mod-name_456(module-use-phase mu_455)) #f)))"
"(if or-part_457"
" or-part_457"
"(begin"
"(hash-set! mu-intern-table_453(cons mod-name_456(module-use-phase mu_455)) mu_455)"
" mu_455)))))))"
"(begin"
"(for-each2 intern-module-use_454 init-mus_452)"
"(lambda(mu_458)"
"(if mu_458"
"(let-values()"
"(let-values(((mod-name_459)(1/module-path-index-resolve(module-use-module mu_458))))"
"(let-values(((mli_460)"
"(let-values(((or-part_461)"
"(get-module-linklet-info_451 mod-name_459(module-use-phase mu_458))))"
"(if or-part_461"
" or-part_461"
"(namespace->module-linklet-info ns_450 mod-name_459(module-use-phase mu_458))))))"
"(if mli_460"
"(values"
"(module-linklet-info-linklet-or-instance mli_460)"
"(if(module-linklet-info-module-uses mli_460)"
"(list->vector"
"(append"
" '(#f #f)"
"(alt-reverse"
"(let-values(((lst_462)(module-linklet-info-module-uses mli_460)))"
"(begin"
"(if(list? lst_462)(void)(let-values()(in-list lst_462)))"
"((letrec-values(((for-loop_463)"
"(lambda(fold-var_464 lst_465)"
"(if(pair? lst_465)"
"(let-values(((sub-mu_466)(unsafe-car lst_465)))"
"(let-values(((fold-var_467)"
"(let-values()"
"(let-values(((fold-var_469)"
"(let-values()"
"(cons"
"(let-values()"
"(intern-module-use_454"
"(module-use1.1"
"(module-path-index-shift"
"(module-use-module"
" sub-mu_466)"
"(module-linklet-info-self"
" mli_460)"
"(module-use-module"
" mu_458))"
"(module-use-phase"
" sub-mu_466))))"
" fold-var_468))))"
"(values fold-var_469)))))"
"(for-loop_463 fold-var_467(unsafe-cdr lst_465))))"
" fold-var_464))))"
" for-loop_463)"
" null"
" lst_462))))))"
" #f))"
"(values #f #f)))))"
"(let-values()(values #f #f)))))))))"
"(void)"
"(void)"
"(define-values"
"(build-shared-data-linklet)"
"(lambda(cims_1 ns_2)"
"(let-values(((mpis_3)(make-module-path-index-table)))"
"(let-values(((mpi-trees_4)"
"(map-cim-tree"
" cims_1"
"(lambda(cim_12)"
"(let-values(((vec_13 i_14)"
"(let-values(((vec_15 len_16)"
"(let-values(((vec_17)(compiled-in-memory-mpis cim_12)))"
"(begin"
"(if(vector? vec_17)(void)(let-values()(in-vector vec_17)))"
"(values vec_17(unsafe-vector-length vec_17))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_18)"
"(lambda(vec_19 i_20 pos_21)"
"(if(unsafe-fx< pos_21 len_16)"
"(let-values(((mpi_22)"
"(unsafe-vector-ref vec_15 pos_21)))"
"(let-values(((vec_23 i_24)"
"(let-values()"
"(let-values(((vec_27 i_28)"
"(let-values()"
"(let-values(((new-vec_29)"
"(if(eq?"
" i_26"
"(unsafe-vector*-length"
" vec_25))"
"(grow-vector"
" vec_25)"
" vec_25)))"
"(begin"
"(unsafe-vector*-set!"
" new-vec_29"
" i_26"
"(let-values()"
"(add-module-path-index!/pos"
" mpis_3"
" mpi_22)))"
"(values"
" new-vec_29"
"(unsafe-fx+"
" i_26"
" 1)))))))"
"(values vec_27 i_28)))))"
"(for-loop_18 vec_23 i_24(unsafe-fx+ 1 pos_21))))"
"(values vec_19 i_20)))))"
" for-loop_18)"
"(make-vector 16)"
" 0"
" 0)))))"
"(shrink-vector vec_13 i_14))))))"
"(let-values(((syntax-literals_5)(make-syntax-literals)))"
"(let-values(((syntax-literals-trees_6)"
"(map-cim-tree"
" cims_1"
"(lambda(cim_30)"
"(add-syntax-literals! syntax-literals_5(compiled-in-memory-syntax-literals cim_30))))))"
"(let-values(((module-uses-tables_7) null))"
"(let-values(((module-uses-tables-count_8) 0))"
"(let-values(((phase-to-link-module-uses-trees_9)"
"(map-cim-tree"
" cims_1"
"(lambda(cim_31)"
"(let-values()"
"(begin"
"(set! module-uses-tables_7"
"(cons"
"(compiled-in-memory-phase-to-link-module-uses cim_31)"
" module-uses-tables_7))"
"(set! module-uses-tables-count_8(add1 pos_32))"
" pos_32))))))"
"(let-values(((syntax-literals-expr_10)"
"(generate-eager-syntax-literals! syntax-literals_5 mpis_3 0 #f ns_2)))"
"(let-values(((phase-to-link-module-uses-expr_11)"
"(list*"
" 'vector"
"(alt-reverse"
"(let-values(((lst_33)(alt-reverse module-uses-tables_7)))"
"(begin"
"(if(list? lst_33)(void)(let-values()(in-list lst_33)))"
"((letrec-values(((for-loop_34)"
"(lambda(fold-var_35 lst_36)"
"(if(pair? lst_36)"
"(let-values(((phase-to-link-module-uses_37)"
"(unsafe-car lst_36)))"
"(let-values(((fold-var_38)"
"(let-values()"
"(let-values(((fold-var_40)"
"(let-values()"
"(cons"
"(let-values()"
"(serialize-phase-to-link-module-uses"
" phase-to-link-module-uses_37"
" mpis_3))"
" fold-var_39))))"
"(values fold-var_40)))))"
"(for-loop_34 fold-var_38(unsafe-cdr lst_36))))"
" fold-var_35))))"
" for-loop_34)"
" null"
" lst_33)))))))"
"(1/compile-linklet"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list*"
" mpi-vector-id"
" '(mpi-vector-trees"
" phase-to-link-modules-vector"
" phase-to-link-modules-trees"
" syntax-literals"
" syntax-literals-trees))"
"(list 'define-values(list mpi-vector-id)(generate-module-path-index-deserialize mpis_3))"
"(list 'define-values '(mpi-vector-trees)(list 'quote mpi-trees_4))"
"(list 'define-values '(phase-to-link-modules-vector) phase-to-link-module-uses-expr_11)"
"(list"
" 'define-values"
" '(phase-to-link-modules-trees)"
"(list 'quote phase-to-link-module-uses-trees_9))"
"(list 'define-values '(syntax-literals) syntax-literals-expr_10)"
"(list"
" 'define-values"
" '(syntax-literals-trees)"
"(list 'quote syntax-literals-trees_6)))))))))))))))"
"(define-values"
"(map-cim-tree)"
"(lambda(cims_41 proc_42)"
"((letrec-values(((loop_43)"
"(lambda(cims_44)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"((letrec-values(((for-loop_46)"
"(lambda(fold-var_47 lst_48)"
"(if(pair? lst_48)"
"(let-values(((cim_49)(unsafe-car lst_48)))"
"(let-values(((fold-var_50)"
"(let-values()"
"(let-values(((fold-var_52)"
"(let-values()"
"(cons"
"(let-values()"
"(vector"
"(proc_42 cim_49)"
"(loop_43"
"(compiled-in-memory-pre-compiled-in-memorys"
" cim_49))"
"(loop_43"
"(compiled-in-memory-post-compiled-in-memorys"
" cim_49))))"
" fold-var_51))))"
"(values fold-var_52)))))"
"(for-loop_46 fold-var_50(unsafe-cdr lst_48))))"
" fold-var_47))))"
" for-loop_46)"
" null"
" lst_45)))))))"
" loop_43)"
" cims_41)))"
"(void)"
"(void)"
"(define-values"
"(compiled-tops->compiled-top8.1)"
"(lambda(merge-serialization?2_1"
" merge-serialization?5_2"
" namespace3_3"
" namespace6_4"
" to-source?1_5"
" to-source?4_6"
" all-cims7_7)"
"(let-values()"
"(let-values(((to-source?_9)(if to-source?4_6 to-source?1_5 #f)))"
"(let-values(((merge-serialization?_10)(if merge-serialization?5_2 merge-serialization?2_1 #f)))"
"(let-values(((ns_11)(if namespace6_4 namespace3_3 #f)))"
"(let-values()"
"(let-values(((cims_12)(remove-nontail-purely-functional all-cims_8)))"
"(if(= 1(length cims_12))"
"(let-values()(car cims_12))"
"(let-values()"
"(let-values(((sequence-ht_13)"
"(let-values(((start_16) 0))"
"(begin"
"(if(list? lst_15)(void)(let-values()(in-list lst_15)))"
"(if(exact-nonnegative-integer? start_16)"
"(void)"
"(let-values()(in-naturals start_16)))"
"((letrec-values(((for-loop_17)"
"(lambda(table_18 lst_19 pos_20)"
"(if(if(pair? lst_19) #t #f)"
"(let-values(((cim_21)(unsafe-car lst_19)))"
"(let-values(((table_23)"
"(let-values()"
"(let-values(((table_25)"
"(let-values()"
"(let-values(((key_26"
" val_27)"
"(let-values()"
"(values"
"(string->symbol"
"(number->string"
" i_22))"
"((if to-source?_9"
" values"
" compiled-in-memory-linklet-directory)"
" cim_21)))))"
"(hash-set"
" table_24"
" key_26"
" val_27)))))"
"(values table_25)))))"
"(for-loop_17"
" table_23"
"(unsafe-cdr lst_19)"
"(+ pos_20 1))))"
" table_18))))"
" for-loop_17)"
" '#hasheq()"
" lst_15"
" start_16)))))"
"(let-values(((ht_14)"
"(if merge-serialization?_10"
"(hash-set"
" sequence-ht_13"
" 'data"
"(1/hash->linklet-directory"
"(hasheq"
" #f"
"(1/hash->linklet-bundle"
"(hasheq 0(build-shared-data-linklet cims_12 ns_11))))))"
" sequence-ht_13)))"
"(if to-source?_9"
"(let-values() ht_14)"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory ht_14)"
" '#hasheqv()"
" #f"
" '#hasheqv()"
" '#()"
" '#()"
" cims_12"
" null"
" #f"
" #f)))))))))))))))"
"(define-values"
"(compiled-top->compiled-tops)"
"(lambda(ld_54)"
"(let-values(((ht_55)(1/linklet-directory->hash ld_54)))"
"(alt-reverse"
"(let-values(((start_56) 0)((end_57)(hash-count ht_55))((inc_58) 1))"
"(begin"
"(if(if(real? start_56)(if(real? end_57)(real? inc_58) #f) #f)"
"(void)"
"(let-values()(in-range start_56 end_57 inc_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(fold-var_60 pos_61)"
"(if(< pos_61 end_57)"
"(let-values()"
"(let-values(((fold-var_63)"
"(let-values(((top_64)"
"(hash-ref"
" ht_55"
"(string->symbol(number->string i_62))"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_65)"
"(lambda(fold-var_66)"
"(let-values()"
"(let-values(((fold-var_67)"
"(let-values()"
"(if top_64"
"(let-values()"
"(let-values(((fold-var_70)"
"(let-values()"
"(cons"
"(let-values()"
" top_64)"
" fold-var_69))))"
"(values fold-var_70)))"
" fold-var_68))))"
" fold-var_67)))))"
" for-loop_65)"
" fold-var_60)))))"
"(for-loop_59 fold-var_63(+ pos_61 inc_58))))"
" fold-var_60))))"
" for-loop_59)"
" null"
" start_56)))))))"
"(define-values"
"(remove-nontail-purely-functional)"
"(lambda(cims_71)"
"((letrec-values(((loop_72)"
"(lambda(cims_73)"
"(if(null? cims_73)"
"(let-values() null)"
"(if(null?(cdr cims_73))"
"(let-values() cims_73)"
"(if(if(compiled-in-memory?(car cims_73))"
"(compiled-in-memory-purely-functional?(car cims_73))"
" #f)"
"(let-values()(loop_72(cdr cims_73)))"
"(let-values()(cons(car cims_73)(cdr cims_73)))))))))"
" loop_72)"
" cims_71)))"
"(void)"
"(void)"
"(define-values"
"(any-side-effects?6.1)"
"(lambda(locals1_1 locals2_2 e3_3 expected-results4_4 required-reference?5_5)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((locals_9)(if locals2_2 locals1_1 '#hasheq())))"
"(let-values()"
"(let-values(((actual-results_10)"
"((letrec-values(((loop_11)"
"(lambda(e_12 locals_13)"
"(let-values(((tmp_14)"
"(if(pair?(correlated-e e_12))"
"(correlated-e(car(correlated-e e_12)))"
" #f)))"
"(let-values(((index_15)"
"(if(symbol? tmp_14)"
"(hash-ref"
" '#hasheq((values . 3)"
"(begin . 5)"
"(void . 4)"
"(make-struct-type . 7)"
"(let-values . 2)"
"(quote . 1)"
"(letrec-values . 2)"
"(make-struct-field-mutator . 9)"
"(begin0 . 6)"
"(#%variable-reference . 1)"
"(lambda . 1)"
"(case-lambda . 1)"
"(make-struct-type-property . 10)"
"(make-struct-field-accessor . 8))"
" tmp_14"
"(lambda() 0))"
" 0)))"
"(if(unsafe-fx< index_15 5)"
"(if(unsafe-fx< index_15 2)"
"(if(unsafe-fx< index_15 1)"
"(let-values()"
"(let-values(((v_16)(correlated-e e_12)))"
"(if(let-values(((or-part_17)"
"(self-quoting-in-linklet? v_16)))"
"(if or-part_17"
" or-part_17"
"(if(symbol? v_16)"
"(let-values(((or-part_18)"
"(hash-ref locals_13 v_16 #f)))"
"(if or-part_18"
" or-part_18"
"(let-values(((or-part_19)"
"(built-in-symbol? v_16)))"
"(if or-part_19"
" or-part_19"
"(required-reference?_8 v_16)))))"
" #f)))"
" 1"
" #f)))"
"(let-values() 1))"
"(if(unsafe-fx< index_15 3)"
"(let-values()"
"(let-values(((ok?_20 _14_21 ids15_22 rhs16_23 body17_24)"
"(let-values()"
"(let-values()"
"(let-values(((_14_41"
" ids15_42"
" rhs16_43"
" body17_44)"
"(let-values(((s_45)"
"(if(syntax?$2"
" s_39)"
"(syntax-e$3"
" s_39)"
" s_39)))"
"(if(pair? s_45)"
"(let-values(((_18_46)"
"(let-values(((s_50)"
"(car"
" s_45)))"
" s_50))"
"((ids19_47"
" rhs20_48"
" body21_49)"
"(let-values(((s_51)"
"(cdr"
" s_45)))"
"(let-values(((s_52)"
"(if(syntax?$2"
" s_51)"
"(syntax-e$3"
" s_51)"
" s_51)))"
"(if(pair?"
" s_52)"
"(let-values(((ids22_53"
" rhs23_54)"
"(let-values(((s_56)"
"(car"
" s_52)))"
"(let-values(((s_57)"
"(if(syntax?$2"
" s_56)"
"(syntax-e$3"
" s_56)"
" s_56)))"
"(let-values(((flat-s_58)"
"(to-syntax-list.1$1"
" s_57)))"
"(if(not"
" flat-s_58)"
"(let-values()"
"((lambda(false_59"
" str_60"
" e_61)"
"(error"
" str_60))"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_40))"
"(let-values()"
"(let-values(((ids_65"
" rhs_66)"
"(let-values()"
"(begin"
"(if(list?"
" lst_67)"
"(void)"
"(let-values()"
"(in-list"
" lst_67)))"
"((letrec-values(((for-loop_68)"
"(lambda(ids_69"
" rhs_70"
" lst_71)"
"(if(pair?"
" lst_71)"
"(let-values(((s_72)"
"(unsafe-car"
" lst_71)))"
"(let-values(((ids_73"
" rhs_74)"
"(let-values()"
"(let-values(((ids_77"
" rhs_78)"
"(let-values()"
"(let-values(((ids29_79"
" rhs30_80)"
"(let-values()"
"(let-values(((s_81)"
"(if(syntax?$2"
" s_72)"
"(syntax-e$3"
" s_72)"
" s_72)))"
"(if(pair?"
" s_81)"
"(let-values(((ids25_82)"
"(let-values(((s_84)"
"(car"
" s_81)))"
" s_84))"
"((rhs26_83)"
"(let-values(((s_85)"
"(cdr"
" s_81)))"
"(let-values(((s_86)"
"(if(syntax?$2"
" s_85)"
"(syntax-e$3"
" s_85)"
" s_85)))"
"(if(pair?"
" s_86)"
"(let-values(((rhs27_87)"
"(let-values(((s_88)"
"(car"
" s_86)))"
" s_88))"
"(()"
"(let-values(((s_89)"
"(cdr"
" s_86)))"
"(let-values(((s_90)"
"(if(syntax?$2"
" s_89)"
"(syntax-e$3"
" s_89)"
" s_89)))"
"(if(null?"
" s_90)"
"(values)"
"((lambda(false_91"
" str_92"
" e_93)"
"(error"
" str_92))"
" #f"
"                                                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_40))))))"
"(values"
" rhs27_87))"
"((lambda(false_94"
" str_95"
" e_96)"
"(error"
" str_95))"
" #f"
"                                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_40))))))"
"(values"
" ids25_82"
" rhs26_83))"
"((lambda(false_97"
" str_98"
" e_99)"
"(error"
" str_98))"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_40))))))"
"(values"
"(cons"
" ids29_79"
" ids_75)"
"(cons"
" rhs30_80"
" rhs_76))))))"
"(values"
" ids_77"
" rhs_78)))))"
"(for-loop_68"
" ids_73"
" rhs_74"
"(unsafe-cdr"
" lst_71))))"
"(values"
" ids_69"
" rhs_70)))))"
" for-loop_68)"
" null"
" null"
" lst_67)))))"
"(values"
"(alt-reverse"
" ids_65)"
"(alt-reverse"
" rhs_66)))))))))"
"((body24_55)"
"(let-values(((s_100)"
"(cdr"
" s_52)))"
"(let-values(((s_101)"
"(if(syntax?$2"
" s_100)"
"(syntax-e$3"
" s_100)"
" s_100)))"
"(if(pair?"
" s_101)"
"(let-values(((body28_102)"
"(let-values(((s_103)"
"(car"
" s_101)))"
" s_103))"
"(()"
"(let-values(((s_104)"
"(cdr"
" s_101)))"
"(let-values(((s_105)"
"(if(syntax?$2"
" s_104)"
"(syntax-e$3"
" s_104)"
" s_104)))"
"(if(null?"
" s_105)"
"(values)"
"((lambda(false_106"
" str_107"
" e_108)"
"(error"
" str_107))"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_40))))))"
"(values"
" body28_102))"
"((lambda(false_109"
" str_110"
" e_111)"
"(error"
" str_110))"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_40))))))"
"(values"
" ids22_53"
" rhs23_54"
" body24_55))"
"((lambda(false_112"
" str_113"
" e_114)"
"(error"
" str_113))"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_40))))))"
"(values"
" _18_46"
" ids19_47"
" rhs20_48"
" body21_49))"
"((lambda(false_115"
" str_116"
" e_117)"
"(error str_116))"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_40)))))"
"(values"
" #t"
" _14_41"
" ids15_42"
" rhs16_43"
" body17_44))))))"
"(if(not"
"(let-values()"
"(begin"
"(if(list? lst_118)"
"(void)"
"(let-values()(in-list lst_118)))"
"(if(list? lst_119)"
"(void)"
"(let-values()(in-list lst_119)))"
"((letrec-values(((for-loop_120)"
"(lambda(result_121"
" lst_122"
" lst_123)"
"(if(if(pair? lst_122)"
"(pair? lst_123)"
" #f)"
"(let-values(((ids_124)"
"(unsafe-car"
" lst_122))"
"((rhs_125)"
"(unsafe-car"
" lst_123)))"
"(let-values(((result_126)"
"(let-values()"
"(let-values(((result_128)"
"(let-values()"
"(let-values()"
"(let-values(((...pile/side-effect.rkt:27:21_129)"
" any-side-effects?8.1)"
"((temp32_131)"
"(correlated-length"
" ids_124)))"
"(any-side-effects?6.1"
" locals34_133"
" #t"
" rhs31_130"
" temp32_131"
" required-reference?33_132))))))"
"(values"
" result_128)))))"
"(if(if(not"
"((lambda x_134"
" result_126)"
" ids_124))"
"(not"
"((lambda x_135"
" result_126)"
" rhs_125))"
" #f)"
"(for-loop_120"
" result_126"
"(unsafe-cdr lst_122)"
"(unsafe-cdr"
" lst_123))"
" result_126)))"
" result_121))))"
" for-loop_120)"
" #f"
" lst_118"
" lst_119))))"
"(loop_11"
" body17_24"
"(add-binding-info locals_13 ids15_22 rhs16_23))"
" #f)))"
"(if(unsafe-fx< index_15 4)"
"(let-values()"
"(let-values(((ok?_136 _35_137 e36_138)"
"(let-values()"
"(let-values()"
"(let-values(((_35_151 e36_152)"
"(let-values(((s_153)"
"(if(syntax?$2"
" s_149)"
"(syntax-e$3"
" s_149)"
" s_149)))"
"(if(pair? s_153)"
"(let-values(((_37_154)"
"(let-values(((s_156)"
"(car"
" s_153)))"
" s_156))"
"((e38_155)"
"(let-values(((s_157)"
"(cdr"
" s_153)))"
"(let-values(((s_158)"
"(if(syntax?$2"
" s_157)"
"(syntax-e$3"
" s_157)"
" s_157)))"
"(let-values(((flat-s_159)"
"(to-syntax-list.1$1"
" s_158)))"
"(if(not"
" flat-s_159)"
"(let-values()"
"((lambda(false_160"
" str_161"
" e_162)"
"(error"
" str_161))"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_150))"
"(let-values()"
" flat-s_159)))))))"
"(values"
" _37_154"
" e38_155))"
"((lambda(false_166"
" str_167"
" e_168)"
"(error str_167))"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_150)))))"
"(values #t _35_151 e36_152))))))"
"(if(let-values()"
"(begin"
"(if(list? lst_169)"
"(void)"
"(let-values()(in-list lst_169)))"
"((letrec-values(((for-loop_170)"
"(lambda(result_171 lst_172)"
"(if(pair? lst_172)"
"(let-values(((e_173)"
"(unsafe-car"
" lst_172)))"
"(let-values(((result_174)"
"(let-values()"
"(let-values(((result_176)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((...pile/side-effect.rkt:33:21_177)"
" any-side-effects?8.1)"
"((temp40_179)"
" 1))"
"(any-side-effects?6.1"
" locals42_181"
" #t"
" e39_178"
" temp40_179"
" required-reference?41_180)))))))"
"(values"
" result_176)))))"
"(if(not"
"((lambda x_182"
"(not"
" result_174))"
" e_173))"
"(for-loop_170"
" result_174"
"(unsafe-cdr"
" lst_172))"
" result_174)))"
" result_171))))"
" for-loop_170)"
" #t"
" lst_169)))"
"(length e36_138)"
" #f)))"
"(let-values()"
"(let-values(((ok?_183 _43_184 e44_185)"
"(let-values()"
"(let-values()"
"(let-values(((_43_198 e44_199)"
"(let-values(((s_200)"
"(if(syntax?$2"
" s_196)"
"(syntax-e$3"
" s_196)"
" s_196)))"
"(if(pair? s_200)"
"(let-values(((_45_201)"
"(let-values(((s_203)"
"(car"
" s_200)))"
" s_203))"
"((e46_202)"
"(let-values(((s_204)"
"(cdr"
" s_200)))"
"(let-values(((s_205)"
"(if(syntax?$2"
" s_204)"
"(syntax-e$3"
" s_204)"
" s_204)))"
"(let-values(((flat-s_206)"
"(to-syntax-list.1$1"
" s_205)))"
"(if(not"
" flat-s_206)"
"(let-values()"
"((lambda(false_207"
" str_208"
" e_209)"
"(error"
" str_208))"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_197))"
"(let-values()"
" flat-s_206)))))))"
"(values"
" _45_201"
" e46_202))"
"((lambda(false_213"
" str_214"
" e_215)"
"(error str_214))"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_197)))))"
"(values #t _43_198 e44_199))))))"
"(if(let-values()"
"(begin"
"(if(list? lst_216)"
"(void)"
"(let-values()(in-list lst_216)))"
"((letrec-values(((for-loop_217)"
"(lambda(result_218 lst_219)"
"(if(pair? lst_219)"
"(let-values(((e_220)"
"(unsafe-car"
" lst_219)))"
"(let-values(((result_221)"
"(let-values()"
"(let-values(((result_223)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((...pile/side-effect.rkt:38:21_224)"
" any-side-effects?8.1)"
"((temp48_226)"
" 1))"
"(any-side-effects?6.1"
" locals50_228"
" #t"
" e47_225"
" temp48_226"
" required-reference?49_227)))))))"
"(values"
" result_223)))))"
"(if(not"
"((lambda x_229"
"(not"
" result_221))"
" e_220))"
"(for-loop_217"
" result_221"
"(unsafe-cdr"
" lst_219))"
" result_221)))"
" result_218))))"
" for-loop_217)"
" #t"
" lst_216)))"
" 1"
" #f))))))"
"(if(unsafe-fx< index_15 7)"
"(if(unsafe-fx< index_15 6)"
"(let-values()"
"(let-values(((ok?_230 _51_231 e52_232)"
"(let-values()"
"(let-values()"
"(let-values(((_51_245 e52_246)"
"(let-values(((s_247)"
"(if(syntax?$2"
" s_243)"
"(syntax-e$3"
" s_243)"
" s_243)))"
"(if(pair? s_247)"
"(let-values(((_53_248)"
"(let-values(((s_250)"
"(car"
" s_247)))"
" s_250))"
"((e54_249)"
"(let-values(((s_251)"
"(cdr"
" s_247)))"
"(let-values(((s_252)"
"(if(syntax?$2"
" s_251)"
"(syntax-e$3"
" s_251)"
" s_251)))"
"(let-values(((flat-s_253)"
"(to-syntax-list.1$1"
" s_252)))"
"(if(not"
" flat-s_253)"
"(let-values()"
"((lambda(false_254"
" str_255"
" e_256)"
"(error"
" str_255))"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_244))"
"(let-values()"
" flat-s_253)))))))"
"(values"
" _53_248"
" e54_249))"
"((lambda(false_260"
" str_261"
" e_262)"
"(error str_261))"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_244)))))"
"(values #t _51_245 e52_246))))))"
"((letrec-values(((bloop_263)"
"(lambda(es_264)"
"(if(null? es_264)"
"(let-values() #f)"
"(if(null?(cdr es_264))"
"(let-values()"
"(loop_11"
"(car es_264)"
" locals_13))"
"(let-values()"
"(if(not"
"(let-values(((...pile/side-effect.rkt:46:28_265)"
" any-side-effects?8.1)"
"((temp55_266)"
"(car es_264))"
"((temp56_267)"
" #f))"
"(any-side-effects?6.1"
" locals58_269"
" #t"
" temp55_266"
" temp56_267"
" required-reference?57_268)))"
"(bloop_263(cdr es_264))"
" #f)))))))"
" bloop_263)"
" e52_232)))"
"(let-values()"
"(let-values(((ok?_270 _59_271 e060_272 e61_273)"
"(let-values()"
"(let-values()"
"(let-values(((_59_288 e060_289 e61_290)"
"(let-values(((s_291)"
"(if(syntax?$2"
" s_286)"
"(syntax-e$3"
" s_286)"
" s_286)))"
"(if(pair? s_291)"
"(let-values(((_62_292)"
"(let-values(((s_295)"
"(car"
" s_291)))"
" s_295))"
"((e063_293"
" e64_294)"
"(let-values(((s_296)"
"(cdr"
" s_291)))"
"(let-values(((s_297)"
"(if(syntax?$2"
" s_296)"
"(syntax-e$3"
" s_296)"
" s_296)))"
"(if(pair?"
" s_297)"
"(let-values(((e065_298)"
"(let-values(((s_300)"
"(car"
" s_297)))"
" s_300))"
"((e66_299)"
"(let-values(((s_301)"
"(cdr"
" s_297)))"
"(let-values(((s_302)"
"(if(syntax?$2"
" s_301)"
"(syntax-e$3"
" s_301)"
" s_301)))"
"(let-values(((flat-s_303)"
"(to-syntax-list.1$1"
" s_302)))"
"(if(not"
" flat-s_303)"
"(let-values()"
"((lambda(false_304"
" str_305"
" e_306)"
"(error"
" str_305))"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_287))"
"(let-values()"
" flat-s_303)))))))"
"(values"
" e065_298"
" e66_299))"
"((lambda(false_310"
" str_311"
" e_312)"
"(error"
" str_311))"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_287))))))"
"(values"
" _62_292"
" e063_293"
" e64_294))"
"((lambda(false_313"
" str_314"
" e_315)"
"(error str_314))"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_287)))))"
"(values"
" #t"
" _59_288"
" e060_289"
" e61_290))))))"
"(if(let-values()"
"(begin"
"(if(list? lst_316)"
"(void)"
"(let-values()(in-list lst_316)))"
"((letrec-values(((for-loop_317)"
"(lambda(result_318 lst_319)"
"(if(pair? lst_319)"
"(let-values(((e_320)"
"(unsafe-car"
" lst_319)))"
"(let-values(((result_321)"
"(let-values()"
"(let-values(((result_323)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((...pile/side-effect.rkt:51:21_324)"
" any-side-effects?8.1)"
"((temp68_326)"
" #f))"
"(any-side-effects?6.1"
" locals70_328"
" #t"
" e67_325"
" temp68_326"
" required-reference?69_327)))))))"
"(values"
" result_323)))))"
"(if(not"
"((lambda x_329"
"(not"
" result_321))"
" e_320))"
"(for-loop_317"
" result_321"
"(unsafe-cdr lst_319))"
" result_321)))"
" result_318))))"
" for-loop_317)"
" #t"
" lst_316)))"
"(loop_11 e060_272 locals_13)"
" #f))))"
"(if(unsafe-fx< index_15 8)"
"(let-values()"
"(if(ok-make-struct-type? e_12 required-reference?_8) 5 #f))"
"(if(unsafe-fx< index_15 9)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_12"
" locals_13"
" 'accessor)"
" 1"
" #f))"
"(if(unsafe-fx< index_15 10)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_12"
" locals_13"
" 'mutator)"
" 1"
" #f))"
"(let-values()"
"(if(ok-make-struct-type-property? e_12)"
" 3"
" #f))))))))))))"
" loop_11)"
" e_6"
" locals_9)))"
"(not"
"(if actual-results_10"
"(let-values(((or-part_330)(not expected-results_7)))"
"(if or-part_330 or-part_330(= actual-results_10 expected-results_7)))"
" #f))))))))))"
"(define-values"
"(unpack7.1$2)"
"(lambda(given-kws_331 given-args_332 e3_333 expected-results4_334 required-reference?5_335)"
"(let-values(((locals2_336)(pair? given-kws_331)))"
"(let-values(((locals1_337)(if locals2_336(car given-args_332)(void))))"
"(any-side-effects?6.1 locals1_337 locals2_336 e3_333 expected-results4_334 required-reference?5_335)))))"
"(define-values"
"(any-side-effects?8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_338 given-argc_339)"
"(if(= given-argc_339 5)"
"(let-values()"
"(let-values(((l1_341)(if(null? l1_340) l1_340(if(eq?(car l1_340) '#:locals)(cdr l1_340) l1_340))))"
"(null? l1_341)))"
" #f))"
"(case-lambda"
"((given-kws_342 given-args_343 e_344 expected-results_345 required-reference?_346)"
"(unpack7.1$2 given-kws_342 given-args_343 e_344 expected-results_345 required-reference?_346)))"
" null"
" '(#:locals)"
"(let-values(((any-side-effects?_347)"
"(case-lambda"
"((e_348 expected-results_349 required-reference?_350)"
"(unpack7.1$2 null null e_348 expected-results_349 required-reference?_350)))))"
" any-side-effects?_347)))"
"(define-values"
"(struct:struct-op make-struct-op struct-op? struct-op-type struct-op-field-count)"
"(let-values(((struct:_351 make-_352 ?_353 -ref_354 -set!_355)"
"(let-values()"
"(let-values()(make-struct-type 'struct-op #f 2 0 #f null 'prefab #f '(0 1) #f 'struct-op)))))"
"(values"
" struct:_351"
" make-_352"
" ?_353"
"(make-struct-field-accessor -ref_354 0 'type)"
"(make-struct-field-accessor -ref_354 1 'field-count))))"
"(define-values"
"(add-binding-info)"
"(lambda(locals_376 idss_377 rhss_378)"
"(let-values()"
"(begin"
"(if(list? lst_379)(void)(let-values()(in-list lst_379)))"
"(if(list? lst_380)(void)(let-values()(in-list lst_380)))"
"((letrec-values(((for-loop_381)"
"(lambda(locals_382 lst_383 lst_384)"
"(if(if(pair? lst_383)(pair? lst_384) #f)"
"(let-values(((ids_385)(unsafe-car lst_383))((rhs_386)(unsafe-car lst_384)))"
"(let-values(((locals_387)"
"(let-values()"
"(let-values(((locals_389)"
"(let-values()"
"((letrec-values(((loop_390)"
"(lambda(rhs_391)"
"(let-values(((tmp_392)"
"(if(pair?"
"(correlated-e"
" rhs_391))"
"(correlated-e"
"(car"
"(correlated-e"
" rhs_391)))"
" #f)))"
"(if(equal?"
" tmp_392"
" 'make-struct-type)"
"(let-values()"
"(let-values(((field-count_393)"
"(extract-struct-field-count-lower-bound"
" rhs_391)))"
"(let-values(((lst_394)"
"(correlated->list"
" ids_385))"
"((lst_395)"
" '(struct-type"
" constructor"
" predicate"
" accessor"
" mutator)))"
"(begin"
"(if(list? lst_394)"
"(void)"
"(let-values()"
"(in-list lst_394)))"
"(if(list? lst_395)"
"(void)"
"(let-values()"
"(in-list lst_395)))"
"((letrec-values(((for-loop_396)"
"(lambda(locals_397"
" lst_398"
" lst_399)"
"(if(if(pair?"
" lst_398)"
"(pair?"
" lst_399)"
" #f)"
"(let-values(((id_400)"
"(unsafe-car"
" lst_398))"
"((type_401)"
"(unsafe-car"
" lst_399)))"
"(let-values(((locals_402)"
"(let-values()"
"(let-values(((locals_404)"
"(let-values()"
"(hash-set"
" locals_403"
"(correlated-e"
" id_400)"
"(make-struct-op"
" type_401"
" field-count_393)))))"
"(values"
" locals_404)))))"
"(for-loop_396"
" locals_402"
"(unsafe-cdr"
" lst_398)"
"(unsafe-cdr"
" lst_399))))"
" locals_397))))"
" for-loop_396)"
" locals_388"
" lst_394"
" lst_395)))))"
"(if(equal? tmp_392 'let-values)"
"(let-values()"
"(if(null?"
"(correlated-e"
"(correlated-cadr"
" rhs_391)))"
"(loop_390"
"(caddr"
"(correlated->list"
" rhs_391)))"
"(loop_390 #f)))"
"(let-values()"
"(let-values(((lst_405)"
"(correlated->list"
" ids_385)))"
"(begin"
"(if(list? lst_405)"
"(void)"
"(let-values()"
"(in-list lst_405)))"
"((letrec-values(((for-loop_406)"
"(lambda(locals_407"
" lst_408)"
"(if(pair?"
" lst_408)"
"(let-values(((id_409)"
"(unsafe-car"
" lst_408)))"
"(let-values(((locals_410)"
"(let-values()"
"(let-values(((locals_412)"
"(let-values()"
"(hash-set"
" locals_411"
"(correlated-e"
" id_409)"
" #t))))"
"(values"
" locals_412)))))"
"(for-loop_406"
" locals_410"
"(unsafe-cdr"
" lst_408))))"
" locals_407))))"
" for-loop_406)"
" locals_388"
" lst_405))))))))))"
" loop_390)"
" rhs_386))))"
"(values locals_389)))))"
"(for-loop_381 locals_387(unsafe-cdr lst_383)(unsafe-cdr lst_384))))"
" locals_382))))"
" for-loop_381)"
" locals_376"
" lst_379"
" lst_380)))))"
"(define-values"
"(ok-make-struct-type-property?)"
"(lambda(e_413)"
"(let-values(((l_414)(correlated->list e_413)))"
"(if(let-values(((or-part_415)(=(length l_414) 3)))(if or-part_415 or-part_415(=(length l_414) 2)))"
"(let-values(((pos->vals_416 pos-next_417 init_418 pos-cont?_419 val-cont?_420 all-cont?_421)"
"(make-sequence '(arg)(cdr l_414)))"
"((pos->vals_422 pos-next_423 init_424 pos-cont?_425 val-cont?_426 all-cont?_427)"
"(make-sequence"
" '(pred)"
"(list(lambda(v_428)(quoted? symbol? v_428))(lambda(v_429)(is-lambda? v_429 2))))))"
"(begin"
"(void)"
"(void)"
"((letrec-values(((for-loop_430)"
"(lambda(result_431 pos_432 pos_433)"
"(if(if(if pos-cont?_419(pos-cont?_419 pos_432) #t)"
"(if pos-cont?_425(pos-cont?_425 pos_433) #t)"
" #f)"
"(let-values(((arg_434)(pos->vals_416 pos_432))((pred_435)(pos->vals_422 pos_433)))"
"(if(if(if val-cont?_420(val-cont?_420 arg_434) #t)"
"(if val-cont?_426(val-cont?_426 pred_435) #t)"
" #f)"
"(let-values(((result_436)"
"(let-values()"
"(let-values(((result_438)"
"(let-values()(let-values()(pred_435 arg_434)))))"
"(values result_438)))))"
"(if(if(if(if all-cont?_421(all-cont?_421 pos_432 arg_434) #t)"
"(not((lambda x_439(not result_436)) arg_434))"
" #f)"
"(if(if all-cont?_427(all-cont?_427 pos_433 pred_435) #t)"
"(not((lambda x_440(not result_436)) pred_435))"
" #f)"
" #f)"
"(for-loop_430 result_436(pos-next_417 pos_432)(pos-next_423 pos_433))"
" result_436))"
" result_431))"
" result_431))))"
" for-loop_430)"
" #t"
" init_418"
" init_424)))"
" #f))))"
"(define-values"
"(ok-make-struct-type?)"
"(lambda(e_441 required-reference?_442)"
"(let-values(((l_443)(correlated->list e_441)))"
"(let-values(((init-field-count-expr_444)(if(>(length l_443) 3)(list-ref l_443 3) #f)))"
"(let-values(((immutables-expr_445)"
"(let-values(((or-part_446)(if(>(length l_443) 9)(list-ref l_443 9) #f)))"
"(if or-part_446 or-part_446 'null))))"
"(if(>=(length l_443) 5)"
"(if(<=(length l_443) 12)"
"(let-values(((pos->vals_447 pos-next_448 init_449 pos-cont?_450 val-cont?_451 all-cont?_452)"
"(make-sequence '(arg)(cdr l_443)))"
"((pos->vals_453 pos-next_454 init_455 pos-cont?_456 val-cont?_457 all-cont?_458)"
"(make-sequence"
" '(pred)"
"(list"
"(lambda(v_459)(quoted? symbol? v_459))"
"(lambda(v_460)(quoted? false? v_460))"
"(lambda(v_461)(field-count-expr-to-field-count v_461))"
"(lambda(v_462)(field-count-expr-to-field-count v_462))"
"(lambda(v_463)"
"(not"
"(let-values(((temp73_465) 1))"
"(any-side-effects?6.1 #f #f v72_464 temp73_465 required-reference?74_466))))"
"(lambda(v_467)(known-good-struct-properties? v_467 immutables-expr_445))"
"(lambda(v_468)(inspector-or-false? v_468))"
"(lambda(v_469)(procedure-spec? v_469 immutables-expr_445))"
"(lambda(v_470)(immutables-ok? v_470 init-field-count-expr_444))))))"
"(begin"
"(void)"
"(void)"
"((letrec-values(((for-loop_471)"
"(lambda(result_472 pos_473 pos_474)"
"(if(if(if pos-cont?_450(pos-cont?_450 pos_473) #t)"
"(if pos-cont?_456(pos-cont?_456 pos_474) #t)"
" #f)"
"(let-values(((arg_475)(pos->vals_447 pos_473))"
"((pred_476)(pos->vals_453 pos_474)))"
"(if(if(if val-cont?_451(val-cont?_451 arg_475) #t)"
"(if val-cont?_457(val-cont?_457 pred_476) #t)"
" #f)"
"(let-values(((result_477)"
"(let-values()"
"(let-values(((result_479)"
"(let-values()"
"(let-values()(pred_476 arg_475)))))"
"(values result_479)))))"
"(if(if(if(if all-cont?_452(all-cont?_452 pos_473 arg_475) #t)"
"(not((lambda x_480(not result_477)) arg_475))"
" #f)"
"(if(if all-cont?_458(all-cont?_458 pos_474 pred_476) #t)"
"(not((lambda x_481(not result_477)) pred_476))"
" #f)"
" #f)"
"(for-loop_471 result_477(pos-next_448 pos_473)(pos-next_454 pos_474))"
" result_477))"
" result_472))"
" result_472))))"
" for-loop_471)"
" #t"
" init_449"
" init_455)))"
" #f)"
" #f))))))"
"(define-values"
"(extract-struct-field-count-lower-bound)"
"(lambda(e_482)"
"(let-values(((l_483)(correlated->list e_482)))"
"(+(field-count-expr-to-field-count(list-ref l_483 3))(field-count-expr-to-field-count(list-ref l_483 4))))))"
"(define-values"
"(quoted?)"
"(lambda(val?_484 v_485)"
"(let-values(((or-part_486)"
"(if(pair?(correlated-e v_485))"
"(if(eq?(correlated-e(car(correlated-e v_485))) 'quote)"
"(val?_484(correlated-e(correlated-cadr v_485)))"
" #f)"
" #f)))"
"(if or-part_486 or-part_486(val?_484(correlated-e v_485))))))"
"(define-values"
"(quoted-value)"
"(lambda(v_487)(if(pair?(correlated-e v_487))(correlated-e(correlated-cadr v_487))(correlated-e v_487))))"
"(define-values(false?)(lambda(v_488)(eq?(correlated-e v_488) #f)))"
"(define-values"
"(field-count-expr-to-field-count)"
"(lambda(v_489)(if(quoted? exact-nonnegative-integer? v_489)(quoted-value v_489) #f)))"
"(define-values"
"(inspector-or-false?)"
"(lambda(v_490)"
"(let-values(((or-part_491)(quoted? false? v_490)))"
"(if or-part_491"
" or-part_491"
"(if(= 1(correlated-length v_490))(eq? 'current-inspector(correlated-e(car(correlated-e v_490)))) #f)))))"
"(define-values"
"(known-good-struct-properties?)"
"(lambda(v_492 immutables-expr_493)"
"(let-values(((or-part_494)(quoted? null? v_492)))"
"(if or-part_494"
" or-part_494"
"(let-values(((or-part_495)(eq? 'null(correlated-e v_492))))"
"(if or-part_495"
" or-part_495"
"(if(pair?(correlated-e v_492))"
"(if(eq?(correlated-e(car(correlated-e v_492))) 'list)"
"(if(let-values(((lst_496)(cdr(correlated->list v_492))))"
"(begin"
"(if(list? lst_496)(void)(let-values()(in-list lst_496)))"
"((letrec-values(((for-loop_497)"
"(lambda(result_498 lst_499)"
"(if(pair? lst_499)"
"(let-values(((prop+val_500)(unsafe-car lst_499)))"
"(let-values(((result_501)"
"(let-values()"
"(let-values(((result_503)"
"(let-values()"
"(let-values()"
"(if(="
"(correlated-length prop+val_500)"
" 3)"
"(let-values(((prop+val_504)"
"(correlated->list"
" prop+val_500)))"
"(if(eq?"
" 'cons"
"(correlated-e"
"(car prop+val_504)))"
"(known-good-struct-property+value?"
"(list-ref prop+val_504 1)"
"(list-ref prop+val_504 2)"
" immutables-expr_493)"
" #f))"
" #f)))))"
"(values result_503)))))"
"(if(not((lambda x_505(not result_501)) prop+val_500))"
"(for-loop_497 result_501(unsafe-cdr lst_499))"
" result_501)))"
" result_498))))"
" for-loop_497)"
" #t"
" lst_496)))"
"(="
"(sub1(correlated-length v_492))"
"(set-count"
"(let-values(((lst_506)(cdr(correlated->list v_492))))"
"(begin"
"(if(list? lst_506)(void)(let-values()(in-list lst_506)))"
"((letrec-values(((for-loop_507)"
"(lambda(table_508 lst_509)"
"(if(pair? lst_509)"
"(let-values(((prop+val_510)(unsafe-car lst_509)))"
"(let-values(((table_511)"
"(let-values()"
"(let-values(((table_513)"
"(let-values()"
"(let-values(((key_514 val_515)"
"(let-values()"
"(values"
"(let-values()"
"(correlated-e"
"(list-ref"
"(correlated->list"
" prop+val_510)"
" 1)))"
" #t))))"
"(hash-set"
" table_512"
" key_514"
" val_515)))))"
"(values table_513)))))"
"(for-loop_507 table_511(unsafe-cdr lst_509))))"
" table_508))))"
" for-loop_507)"
" '#hash()"
" lst_506)))))"
" #f)"
" #f)"
" #f)))))))"
"(define-values"
"(known-good-struct-property+value?)"
"(lambda(prop-expr_516 val-expr_517 immutables-expr_518)"
"(let-values(((prop-name_519)(correlated-e prop-expr_516)))"
"(let-values()"
"(if(equal? tmp_520 'prop:evt)"
"(let-values()"
"(let-values(((or-part_521)(is-lambda? val-expr_517 1)))"
"(if or-part_521 or-part_521(immutable-field? val-expr_517 immutables-expr_518))))"
"(if(equal? tmp_520 'prop:procedure)"
"(let-values()"
"(let-values(((or-part_522)(is-lambda? val-expr_517)))"
"(if or-part_522 or-part_522(immutable-field? val-expr_517 immutables-expr_518))))"
"(if(equal? tmp_520 'prop:custom-write)"
"(let-values()(is-lambda? val-expr_517 3))"
"(if(equal? tmp_520 'prop:method-arity-error)(let-values() #t)(let-values() #f)))))))))"
"(define-values"
"(is-lambda?)"
"(let-values(((is-lambda?12_523)"
"(lambda(expr11_524 arity9_525 arity10_526)"
"(let-values()"
"(let-values(((arity_528)(if arity10_526 arity9_525 #f)))"
"(let-values()"
"(if(pair?(correlated-e expr_527))"
"(if(eq? 'lambda(car(correlated-e expr_527)))"
"(let-values(((or-part_529)(not arity_528)))"
"(if or-part_529"
" or-part_529"
"(= arity_528(length(correlated->list(cadr(correlated->list expr_527)))))))"
" #f)"
" #f)))))))"
"(case-lambda"
"((expr_530)(is-lambda?12_523 expr_530 #f #f))"
"((expr_531 arity9_532)(is-lambda?12_523 expr_531 arity9_532 #t)))))"
"(define-values"
"(immutable-field?)"
"(lambda(val-expr_533 immutables-expr_534)"
"(if(quoted? exact-nonnegative-integer? val-expr_533)"
"(memv(quoted-value val-expr_533)(immutables-expr-to-immutables immutables-expr_534 null))"
" #f)))"
"(define-values"
"(immutables-expr-to-immutables)"
"(lambda(e_535 fail-v_536)"
"(let-values(((tmp_537)(if(pair?(correlated-e e_535))(correlated-e(car(correlated-e e_535))) #f)))"
"(if(equal? tmp_537 'quote)"
"(let-values()"
"(let-values(((v_538)(correlated-cadr e_535)))"
"(let-values(((or-part_539)"
"(if(correlated-length v_538)"
"(let-values(((l_540)(map2 correlated-e(correlated->list v_538))))"
"(if(andmap2 exact-nonnegative-integer? l_540)"
"(if(=(length l_540)(set-count(list->set l_540))) l_540 #f)"
" #f))"
" #f)))"
"(if or-part_539 or-part_539 fail-v_536))))"
"(let-values() fail-v_536)))))"
"(define-values"
"(procedure-spec?)"
"(lambda(e_541 immutables-expr_542)"
"(let-values(((or-part_543)(quoted? false? e_541)))"
"(if or-part_543"
" or-part_543"
"(if(quoted? exact-nonnegative-integer? e_541)"
"(memv(quoted-value e_541)(immutables-expr-to-immutables immutables-expr_542 null))"
" #f)))))"
"(define-values"
"(immutables-ok?)"
"(lambda(e_544 init-field-count-expr_545)"
"(let-values(((l_546)(immutables-expr-to-immutables e_544 #f)))"
"(let-values(((c_547)(field-count-expr-to-field-count init-field-count-expr_545)))"
"(if l_546"
"(let-values()"
"(begin"
"(if(list? lst_548)(void)(let-values()(in-list lst_548)))"
"((letrec-values(((for-loop_549)"
"(lambda(result_550 lst_551)"
"(if(pair? lst_551)"
"(let-values(((n_552)(unsafe-car lst_551)))"
"(let-values(((result_553)"
"(let-values()"
"(let-values(((result_555)"
"(let-values()(let-values()(< n_552 c_547)))))"
"(values result_555)))))"
"(if(not((lambda x_556(not result_553)) n_552))"
"(for-loop_549 result_553(unsafe-cdr lst_551))"
" result_553)))"
" result_550))))"
" for-loop_549)"
" #t"
" lst_548)))"
" #f)))))"
"(define-values"
"(ok-make-struct-field-accessor/mutator?)"
"(lambda(e_557 locals_558 type_559)"
"(let-values(((l_560)(correlated->list e_557)))"
"(let-values(((a_561)(if(=(length l_560) 4)(hash-ref locals_558(correlated-e(list-ref l_560 1)) #f) #f)))"
"(if(struct-op? a_561)"
"(if(eq?(struct-op-type a_561) type_559)"
"(if(<(field-count-expr-to-field-count(list-ref l_560 2))(struct-op-field-count a_561))"
"(quoted? symbol?(list-ref l_560 3))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(void)"
"(define-values"
"(compile-single)"
"(lambda(p_1 cctx_2)"
"(let-values(((...nder/compile/top.rkt:29:2_3) compile-top11.1)((temp14_6) #f)((temp15_7) #t))"
"(compile-top9.1 temp14_6 #t temp15_7 #t #f #f p12_4 cctx13_5))))"
"(define-values"
"(compile-top9.1)"
"(lambda(serializable?1_8"
" serializable?4_9"
" single-expression?2_10"
" single-expression?5_11"
" to-source?3_12"
" to-source?6_13"
" p7_14"
" cctx8_15)"
"(let-values()"
"(let-values()"
"(let-values(((serializable?_18)(if serializable?4_9 serializable?1_8 #t)))"
"(let-values(((single-expression?_19)(if single-expression?5_11 single-expression?2_10 #f)))"
"(let-values(((to-source?_20)(if to-source?6_13 to-source?3_12 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((phase_21)(compile-context-phase cctx_17)))"
"(let-values(((mpis_22)(make-module-path-index-table)))"
"(let-values(((purely-functional?_23) #t))"
"(let-values(((body-linklets_24"
" min-phase_25"
" max-phase_26"
" phase-to-link-module-uses_27"
" phase-to-link-module-uses-expr_28"
" phase-to-link-extra-inspectorsss_29"
" syntax-literals_30"
" no-root-context-pos_31)"
"(let-values(((temp16_35)(list p_16))"
"((temp19_38)"
"(if single-expression?_19"
"(list* '()(list syntax-literals-id) '(()))"
"(list"
"(list top-level-bind!-id top-level-require!-id)"
"(list mpi-vector-id syntax-literals-id)"
" instance-imports)))"
"((temp21_40)(lambda()(set! purely-functional?_23 #f)))"
"((temp22_41)"
"(lambda(e_44 expected-results_45 phase_46 required-reference?_47)"
"(if(if purely-functional?_23"
"(let-values()"
"(any-side-effects?6.1"
" #f"
" #f"
" e25_48"
" expected-results26_49"
" required-reference?27_50))"
" #f)"
"(let-values()(set! purely-functional?_23 #f))"
"(void))))"
"((temp23_42)"
"(lambda(s_51 cctx_52)"
"(begin"
"(set! purely-functional?_23 #f)"
"(compile-top-level-require s_51 cctx_52))))"
"((temp24_43)(not single-expression?_19)))"
"(compile-forms26.1"
" temp19_38"
" #f"
" #f"
" temp22_41"
" #t"
" temp24_43"
" #t"
" temp21_40"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp23_42"
" #t"
" #f"
" #f"
" to-source?20_39"
" #t"
" temp16_35"
" cctx17_36"
" mpis18_37))))"
"(let-values(((add-metadata_32)"
"(lambda(ht_53)"
"(let-values(((ht_54)(hash-set ht_53 'original-phase phase_21)))"
"(let-values(((ht_55)(hash-set ht_54 'max-phase max-phase_26))) ht_55)))))"
"(let-values(((bundle_33)"
"((if to-source?_20 values 1/hash->linklet-bundle)"
"(add-metadata_32"
"(if serializable?_18"
"(let-values()"
"(let-values(((syntax-literals-expr_56)"
"(let-values()"
"(generate-eager-syntax-literals!"
" syntax-literals_30"
" mpis_22"
" phase_21"
"(compile-context-self cctx_17)"
"(compile-context-namespace cctx_17)))))"
"(let-values(((link-linklet_57)"
"((if to-source?_20"
" values"
"(lambda(s_58)"
"(let-values()(1/compile-linklet s_58))))"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list"
" mpi-vector-id"
" deserialized-syntax-vector-id"
" 'phase-to-link-modules"
" syntax-literals-id)"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize mpis_22))"
"(list"
" 'define-values"
"(list deserialized-syntax-vector-id)"
"(list* 'make-vector(add1 phase_21) '(#f)))"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_28)"
"(list"
" 'define-values"
"(list syntax-literals-id)"
" syntax-literals-expr_56)))))"
"(hash-set body-linklets_24 'link link-linklet_57))))"
"(let-values() body-linklets_24))))))"
"(if to-source?_20"
"(let-values()(hasheq #f bundle_33))"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory(hasheq #f bundle_33))"
" phase-to-link-module-uses_27"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_29"
"(mpis-as-vector mpis_22)"
"(syntax-literals-as-vector syntax-literals_30)"
" null"
" null"
"(extract-namespace-scopes(compile-context-namespace cctx_17))"
" purely-functional?_23))))))))))))))))))"
"(define-values"
"(unpack10.1$1)"
"(lambda(given-kws_59 given-args_60 p7_61 cctx8_62)"
"(let-values(((serializable?4_63)(if(pair? given-kws_59)(eq? '#:serializable?(car given-kws_59)) #f)))"
"(let-values(((serializable?1_64)(if serializable?4_63(car given-args_60)(void)))"
"((given-kws_65)(if serializable?4_63(cdr given-kws_59) given-kws_59))"
"((given-args_66)(if serializable?4_63(cdr given-args_60) given-args_60)))"
"(let-values(((single-expression?5_67)"
"(if(pair? given-kws_65)(eq? '#:single-expression?(car given-kws_65)) #f)))"
"(let-values(((single-expression?2_68)(if single-expression?5_67(car given-args_66)(void)))"
"((given-kws_69)(if single-expression?5_67(cdr given-kws_65) given-kws_65))"
"((given-args_70)(if single-expression?5_67(cdr given-args_66) given-args_66)))"
"(let-values(((to-source?6_71)(pair? given-kws_69)))"
"(let-values(((to-source?3_72)(if to-source?6_71(car given-args_70)(void))))"
"(compile-top9.1"
" serializable?1_64"
" serializable?4_63"
" single-expression?2_68"
" single-expression?5_67"
" to-source?3_72"
" to-source?6_71"
" p7_61"
" cctx8_62)))))))))"
"(define-values"
"(compile-top11.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_73 given-argc_74)"
"(if(= given-argc_74 4)"
"(let-values()"
"(let-values(((l1_76)(if(null? l1_75) l1_75(if(eq?(car l1_75) '#:serializable?)(cdr l1_75) l1_75))))"
"(let-values()"
"(let-values(((l1_78)"
"(if(null? l1_77) l1_77(if(eq?(car l1_77) '#:single-expression?)(cdr l1_77) l1_77))))"
"(let-values()"
"(let-values(((l1_80)(if(null? l1_79) l1_79(if(eq?(car l1_79) '#:to-source?)(cdr l1_79) l1_79))))"
"(null? l1_80)))))))"
" #f))"
"(case-lambda((given-kws_81 given-args_82 p_83 cctx_84)(unpack10.1$1 given-kws_81 given-args_82 p_83 cctx_84)))"
" null"
" '(#:serializable? #:single-expression? #:to-source?)"
"(let-values(((compile-top_85)(case-lambda((p_86 cctx_87)(unpack10.1$1 null null p_86 cctx_87)))))"
" compile-top_85)))"
"(define-values"
"(compile-top-level-require)"
"(lambda(p_88 cctx_89)"
"(let-values(((phase_90)(compile-context-phase cctx_89)))"
"(if(parsed-require? p_88)"
"(let-values()"
"(let-values(((form-stx_91)(compile-quote-syntax(syntax-disarm$1(parsed-s p_88)) cctx_89)))"
"(list top-level-require!-id form-stx_91 ns-id)))"
"(let-values() #f)))))"
"(void)"
"(void)"
"(define-values"
"(compile-module13.1)"
"(lambda(as-submodule?2_6"
" as-submodule?7_7"
" modules-being-compiled5_8"
" modules-being-compiled10_9"
" serializable?3_10"
" serializable?8_11"
" to-source?4_12"
" to-source?9_13"
" with-submodules?1_14"
" with-submodules?6_15"
" p11_16"
" cctx12_17)"
"(let-values()"
"(let-values()"
"(let-values(((with-submodules?_20)(if with-submodules?6_15 with-submodules?1_14 #t)))"
"(let-values(((as-submodule?_21)(if as-submodule?7_7 as-submodule?2_6 #f)))"
"(let-values(((serializable?_22)(if serializable?8_11 serializable?3_10 with-submodules?_20)))"
"(let-values(((to-source?_23)(if to-source?9_13 to-source?4_12 #f)))"
"(let-values(((modules-being-compiled_24)"
"(if modules-being-compiled10_9"
" modules-being-compiled5_8"
"(if with-submodules?_20(make-hasheq) #f))))"
"(let-values()"
"(let-values()"
"(let-values(((enclosing-self_25)(compile-context-module-self cctx_19)))"
"(let-values(((self_26)(parsed-module-self p_18)))"
"(let-values(((full-module-name_27)"
"(let-values(((parent-full-name_57)(compile-context-full-module-name cctx_19))"
"((name_58)(syntax-e$1(parsed-module-name-id p_18))))"
"(if parent-full-name_57"
"(append"
"(if(list? parent-full-name_57)"
" parent-full-name_57"
"(list parent-full-name_57))"
"(list name_58))"
" name_58))))"
"(let-values(((requires_28)(parsed-module-requires p_18)))"
"(let-values(((provides_29)(parsed-module-provides p_18)))"
"(let-values(((encoded-root-expand-ctx-box_30)"
"(box(parsed-module-encoded-root-ctx p_18))))"
"(let-values(((body-context-simple?_31)(parsed-module-root-ctx-simple? p_18)))"
"(let-values(((language-info_32)"
"(filter-language-info"
"(syntax-property$1(parsed-s p_18) 'module-language))))"
"(let-values(((bodys_33)(parsed-module-body p_18)))"
"(let-values(((empty-result-for-module->namespace?_34) #f))"
"(let-values(((mpis_35)(make-module-path-index-table)))"
"(let-values(((body-cctx_36)"
"(let-values()"
"(if(compile-context? the-struct_59)"
"(let-values(((phase33_60) 0)"
"((lazy-syntax-literals?37_64) #t))"
"(compile-context1.1"
"(compile-context-namespace the-struct_59)"
" phase33_60"
" self34_61"
" module-self35_62"
" full-module-name36_63"
" lazy-syntax-literals?37_64"
"(compile-context-header the-struct_59)))"
"(raise-argument-error"
" 'struct-copy"
"                                                               \"compile-context?\""
" the-struct_59)))))"
"(let-values(((cross-phase-persistent?_37) #f))"
"(let-values(((side-effects_38)(make-hasheqv)))"
"(let-values(((check-side-effects!_39)"
"(lambda(e_65"
" expected-results_66"
" phase_67"
" required-reference?_68)"
"(if(hash-ref side-effects_38 phase_67 #f)"
"(void)"
"(let-values()"
"(if(let-values()"
"(any-side-effects?6.1"
" #f"
" #f"
" e38_69"
" expected-results39_70"
" required-reference?40_71))"
"(let-values()"
"(hash-set! side-effects_38 phase_67 #t))"
"(void)))))))"
"(let-values(((pre-submodules_40)"
"(let-values(((...r/compile/module.rkt:83:26_72)"
" compile-submodules32.1)"
"((temp41_73) #f))"
"(compile-submodules30.1"
" bodys42_74"
" body-cctx46_78"
" modules-being-compiled47_79"
" serializable?44_76"
" temp41_73"
" to-source?45_77"
" with-submodules?43_75))))"
"(let-values(((body-linklets_41"
" min-phase_42"
" max-phase_43"
" phase-to-link-module-uses_44"
" phase-to-link-module-uses-expr_45"
" phase-to-link-extra-inspectorsss_46"
" syntax-literals_47"
" root-ctx-pos_48)"
"(let-values(((temp51_84)"
"(list"
"(list get-syntax-literal!-id)"
"(list set-transformer!-id)))"
"((temp52_85) '((void)))"
"((temp53_86) '(0))"
"((temp57_90)"
"(lambda(body_93 cctx_94)"
"(if(parsed-#%declare? body_93)"
"(let-values()"
"(let-values(((ok?_95"
" _60_96"
" kw61_97)"
"(let-values(((s_108)"
"(parsed-s"
" body_93)))"
"(let-values()"
"(let-values(((_60_110"
" kw61_111)"
"(let-values(((s_112)"
"(if(syntax?$1"
" s_108)"
"(syntax-e$1"
" s_108)"
" s_108)))"
"(if(pair?"
" s_112)"
"(let-values(((_62_113)"
"(let-values(((s_115)"
"(car"
" s_112)))"
" s_115))"
"((kw63_114)"
"(let-values(((s_116)"
"(cdr"
" s_112)))"
"(let-values(((s_117)"
"(if(syntax?$1"
" s_116)"
"(syntax-e$1"
" s_116)"
" s_116)))"
"(let-values(((flat-s_118)"
"(to-syntax-list.1"
" s_117)))"
"(if(not"
" flat-s_118)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                     \"bad syntax\""
" orig-s_109))"
"(let-values()"
" flat-s_118)))))))"
"(values"
" _62_113"
" kw63_114))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_109)))))"
"(values"
" #t"
" _60_110"
" kw61_111))))))"
"(begin"
"(let-values()"
"(begin"
"(if(list? lst_119)"
"(void)"
"(let-values()"
"(in-list lst_119)))"
"((letrec-values(((for-loop_120)"
"(lambda(fold-var_121"
" lst_122)"
"(if(pair?"
" lst_122)"
"(let-values(((kw_123)"
"(unsafe-car"
" lst_122)))"
"(let-values(((fold-var_124)"
"(let-values()"
"(let-values(((fold-var_126)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(eq?"
"(syntax-e$1"
" kw_123)"
" '#:cross-phase-persistent)"
"(let-values()"
"(set! cross-phase-persistent?_37"
" #t))"
"(void))"
"(if(eq?"
"(syntax-e$1"
" kw_123)"
" '#:empty-namespace)"
"(let-values()"
"(begin"
"(set! empty-result-for-module->namespace?_34"
" #t)"
"(set-box!"
" encoded-root-expand-ctx-box_30"
" #f)))"
"(void))))"
"(void)))))"
"(values"
" fold-var_126)))))"
"(for-loop_120"
" fold-var_124"
"(unsafe-cdr"
" lst_122))))"
" fold-var_121))))"
" for-loop_120)"
"(void)"
" lst_119)))"
" #f)))"
"(let-values() #f))))"
"((temp58_91)"
"(lambda(mod-name_127 phase_128)"
"(let-values(((ht_129)"
"(if modules-being-compiled_24"
"(hash-ref"
" modules-being-compiled_24"
" mod-name_127"
" #f)"
" #f)))"
"(if ht_129"
"(hash-ref ht_129 phase_128 #f)"
" #f)))))"
"(compile-forms26.1"
" temp51_84"
" temp52_85"
" #t"
" check-side-effects!56_89"
" #t"
" #f"
" #f"
" #f"
" #f"
" encoded-root-expand-ctx-box54_87"
" #t"
" temp53_86"
" #t"
" temp58_91"
" #t"
" temp57_90"
" #t"
" body-context-simple?55_88"
" #t"
" to-source?59_92"
" #t"
" bodys48_81"
" body-cctx49_82"
" mpis50_83))))"
"(let-values((()"
"(begin"
"(if with-submodules?_20"
"(let-values()"
"(hash-set!"
" modules-being-compiled_24"
"(1/module-path-index-resolve self_26)"
"(let-values()"
"(begin"
"(if((lambda(ht_131)(hash? ht_131))"
" ht_130)"
"(void)"
"(let-values()"
"(default-in-hash ht_130)))"
"((letrec-values(((for-loop_132)"
"(lambda(table_133"
" i_134)"
"(if i_134"
"(let-values(((phase_135"
" linklet_136)"
"(hash-iterate-key+value"
" ht_130"
" i_134)))"
"(let-values(((table_137)"
"(let-values()"
"(let-values(((table_139)"
"(let-values()"
"(let-values(((key_140"
" val_141)"
"(let-values()"
"(values"
" phase_135"
"(module-linklet-info2.1"
" linklet_136"
"(hash-ref"
" phase-to-link-module-uses_44"
" phase_135"
" #f)"
" self_26)))))"
"(hash-set"
" table_138"
" key_140"
" val_141)))))"
"(values"
" table_139)))))"
"(for-loop_132"
" table_137"
"(hash-iterate-next"
" ht_130"
" i_134))))"
" table_133))))"
" for-loop_132)"
" '#hasheq()"
"(hash-iterate-first ht_130))))))"
"(void))"
"(values))))"
"(let-values(((post-submodules_49)"
"(let-values(((...r/compile/module.rkt:138:27_142)"
" compile-submodules32.1)"
"((temp64_143) #t))"
"(compile-submodules30.1"
" bodys65_144"
" body-cctx69_148"
" modules-being-compiled70_149"
" serializable?67_146"
" temp64_143"
" to-source?68_147"
" with-submodules?66_145))))"
"(let-values(((declaration-body_50)"
"(list"
"(list"
" 'define-values"
" '(self-mpi)"
"(add-module-path-index! mpis_35 self_26))"
"(list"
" 'define-values"
" '(requires)"
"(let-values(((temp73_153) #f))"
"(generate-deserialize6.1"
" temp73_153"
" #t"
" requires71_151"
" mpis72_152)))"
"(list"
" 'define-values"
" '(provides)"
"(let-values(((temp76_157) #f))"
"(generate-deserialize6.1"
" temp76_157"
" #t"
" provides74_155"
" mpis75_156)))"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_45))))"
"(let-values(((declaration-linklet_51)"
"((if to-source?_23"
" values"
"(lambda(s_158)"
"(let-values()"
"(1/compile-linklet s_158 'decl))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id))"
" '(self-mpi"
" requires"
" provides"
" phase-to-link-modules)"
" declaration-body_50))))"
"(let-values(((syntax-literals-linklet_52)"
"(if(not"
"(syntax-literals-empty?"
" syntax-literals_47))"
"((if to-source?_23"
" values"
"(lambda(s_159)"
"(let-values()"
"(1/compile-linklet"
" s_159"
" 'syntax-literals))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id)"
"(list*"
" deserialized-syntax-vector-id"
"(if serializable?_22"
"(list deserialize-syntax-id)"
" '()))"
" instance-imports)"
"(list*"
" get-syntax-literal!-id"
" '(get-encoded-root-expand-ctx))"
"(qq-append"
"(let-values(((temp80_164)"
"(not"
" serializable?_22)))"
"(generate-lazy-syntax-literals!9.1"
" temp80_164"
" #t"
" syntax-literals77_161"
" mpis78_162"
" self79_163))"
"(list"
"(list"
" 'define-values"
" '(get-encoded-root-expand-ctx)"
"(if root-ctx-pos_48"
"(let-values()"
"(list"
" 'lambda"
" '()"
"(generate-lazy-syntax-literal-lookup"
" root-ctx-pos_48)))"
"(if empty-result-for-module->namespace?_34"
"(let-values() ''empty)"
"(let-values() ''#f))))))))"
" #f)))"
"(let-values(((syntax-literals-data-linklet_53)"
"(if serializable?_22"
"(if(not"
"(syntax-literals-empty?"
" syntax-literals_47))"
"((if to-source?_23"
" values"
"(lambda(s_165)"
"(let-values()"
"(1/compile-linklet"
" s_165"
" 'syntax-literals-data))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id))"
"(list"
" deserialized-syntax-vector-id"
" deserialize-syntax-id)"
"(list"
" 'define-values"
"(list"
" deserialized-syntax-vector-id)"
"(list*"
" 'make-vector"
"(syntax-literals-count"
" syntax-literals_47)"
" '(#f)))"
"(let-values()"
"(generate-lazy-syntax-literals-data!"
" syntax-literals_47"
" mpis_35))))"
" #f)"
" #f)))"
"(let-values(((data-linklet_54)"
"(if serializable?_22"
"((if to-source?_23"
" values"
"(lambda(s_166)"
"(let-values()"
"(1/compile-linklet"
" s_166"
" 'data))))"
"(list"
" 'linklet"
"(list deserialize-imports)"
"(list mpi-vector-id)"
"(list*"
" 'define-values"
"(list inspector-id)"
" '((current-code-inspector)))"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize"
" mpis_35))))"
" #f)))"
"(let-values(((bundle_55)"
"(let-values(((bundle_167)"
"(hash-set"
" body-linklets_41"
" 'name"
" full-module-name_27)))"
"(let-values(((bundle_168)"
"(hash-set"
" bundle_167"
" 'decl"
" declaration-linklet_51)))"
"(let-values(((bundle_169)"
"(if data-linklet_54"
"(hash-set"
" bundle_168"
" 'data"
" data-linklet_54)"
" bundle_168)))"
"(let-values(((bundle_170)"
"(if syntax-literals-linklet_52"
"(hash-set"
" bundle_169"
" 'stx"
" syntax-literals-linklet_52)"
" bundle_169)))"
"(let-values(((bundle_171)"
"(if syntax-literals-data-linklet_53"
"(hash-set"
" bundle_170"
" 'stx-data"
" syntax-literals-data-linklet_53)"
" bundle_170)))"
"(let-values(((bundle_172)"
"(if(null?"
" pre-submodules_40)"
" bundle_171"
"(hash-set"
" bundle_171"
" 'pre"
"(map2"
" car"
" pre-submodules_40)))))"
"(let-values(((bundle_173)"
"(if(null?"
" post-submodules_49)"
" bundle_172"
"(hash-set"
" bundle_172"
" 'post"
"(map2"
" car"
" post-submodules_49)))))"
"(let-values(((bundle_174)"
"(if cross-phase-persistent?_37"
"(hash-set"
" bundle_173"
" 'cross-phase-persistent?"
" #t)"
" bundle_173)))"
"(let-values(((bundle_175)"
"(if language-info_32"
"(hash-set"
" bundle_174"
" 'language-info"
" language-info_32)"
" bundle_174)))"
"(let-values(((bundle_176)"
"(if(zero?"
" min-phase_42)"
" bundle_175"
"(hash-set"
" bundle_175"
" 'min-phase"
" min-phase_42))))"
"(let-values(((bundle_177)"
"(if(zero?"
" max-phase_43)"
" bundle_176"
"(hash-set"
" bundle_176"
" 'max-phase"
" max-phase_43))))"
"(let-values(((bundle_178)"
"(if(hash-count"
" side-effects_38)"
"(hash-set"
" bundle_177"
" 'side-effects"
"(let-values(((temp81_179)"
"(hash-keys"
" side-effects_38))"
"((<82_180)"
" <))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" temp81_179"
" <82_180)))"
" bundle_177)))"
"(let-values(((bundle_181)"
"(if empty-result-for-module->namespace?_34"
"(hash-set"
" bundle_178"
" 'module->namespace"
" 'empty)"
" bundle_178)))"
"(1/hash->linklet-bundle"
" bundle_181))))))))))))))))"
"(let-values(((ld_56)"
"(if(if(null? pre-submodules_40)"
"(if(null?"
" post-submodules_49)"
"(not as-submodule?_21)"
" #f)"
" #f)"
"(let-values() bundle_55)"
"(let-values()"
"((if to-source?_23"
" values"
" 1/hash->linklet-directory)"
"(let-values(((lst_182)"
"(append"
" pre-submodules_40"
" post-submodules_49)))"
"(begin"
"(if(list? lst_182)"
"(void)"
"(let-values()"
"(in-list lst_182)))"
"((letrec-values(((for-loop_183)"
"(lambda(ht_184"
" lst_185)"
"(if(pair?"
" lst_185)"
"(let-values(((sm_186)"
"(unsafe-car"
" lst_185)))"
"(let-values(((ht_187)"
"(let-values()"
"(let-values(((ht_189)"
"(let-values()"
"(hash-set"
" ht_188"
"(car"
" sm_186)"
"((if to-source?_23"
" values"
" compiled-in-memory-linklet-directory)"
"(cdr"
" sm_186))))))"
"(values"
" ht_189)))))"
"(for-loop_183"
" ht_187"
"(unsafe-cdr"
" lst_185))))"
" ht_184))))"
" for-loop_183)"
"(hasheq #f bundle_55)"
" lst_182))))))))"
"(if to-source?_23"
"(let-values() ld_56)"
"(let-values()"
"(compiled-in-memory1.1"
" ld_56"
" phase-to-link-module-uses_44"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_46"
"(mpis-as-vector mpis_35)"
"(syntax-literals-as-vector"
" syntax-literals_47)"
"(map2 cdr pre-submodules_40)"
"(map2 cdr post-submodules_49)"
" #f"
" #f))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(lifted/1.1$14 lifted/2.1$14 lifted/3.1$13 lifted/4.1$13 lifted/5.1$13)"
"(make-struct-type"
" 'compile-submodules"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'compile-submodules(case-lambda((self_231)(apply missing-kw self_231 null))))))"
"(current-inspector)"
"(case-lambda((self_232)(apply missing-kw self_232 null)))))"
"(define-values"
"(compile-submodules30.1)"
"(lambda(bodys17_233"
" cctx21_234"
" modules-being-compiled22_235"
" serializable?19_236"
" star?16_237"
" to-source?20_238"
" with-submodules?18_239)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(if(not with-submodules?_242)"
"(let-values() null)"
"(let-values()"
"((letrec-values(((loop_247)"
"(lambda(bodys_248 phase_249)"
"(if(null? bodys_248)"
"(let-values() null)"
"(let-values()"
"(let-values(((body_250)(car bodys_248)))"
"(if(if(parsed-module? body_250)"
"(eq?"
"(if star?_240 #t #f)"
"(if(parsed-module-star? body_250) #t #f))"
" #f)"
"(let-values()"
"(cons"
"(cons"
"(syntax-e$1(parsed-module-name-id body_250))"
"(let-values(((temp85_254) #t))"
"(compile-module13.1"
" temp85_254"
" #t"
" modules-being-compiled88_257"
" #t"
" serializable?86_255"
" #t"
" to-source?87_256"
" #t"
" #f"
" #f"
" body83_252"
" body-cctx84_253)))"
"(loop_247(cdr bodys_248) phase_249)))"
"(if(parsed-begin-for-syntax? body_250)"
"(let-values()"
"(append"
"(loop_247"
"(parsed-begin-for-syntax-body body_250)"
"(add1 phase_249))"
"(loop_247(cdr bodys_248) phase_249)))"
"(let-values()(loop_247(cdr bodys_248) phase_249))))))))))"
" loop_247)"
" bodys_241"
" 0)))))))))))))"
"(define-values"
"(unpack31.1)"
"(lambda(given-kws_258 given-args_259)"
"(let-values(((bodys17_260)(car given-args_259))"
"((given-kws_261)(cdr given-kws_258))"
"((given-args_262)(cdr given-args_259)))"
"(let-values(((cctx21_263)(car given-args_262))"
"((given-kws_264)(cdr given-kws_261))"
"((given-args_265)(cdr given-args_262)))"
"(let-values(((modules-being-compiled22_266)(car given-args_265))"
"((given-kws_267)(cdr given-kws_264))"
"((given-args_268)(cdr given-args_265)))"
"(let-values(((serializable?19_269)(car given-args_268))"
"((given-kws_270)(cdr given-kws_267))"
"((given-args_271)(cdr given-args_268)))"
"(let-values(((star?16_272)(car given-args_271))"
"((given-kws_273)(cdr given-kws_270))"
"((given-args_274)(cdr given-args_271)))"
"(let-values(((to-source?20_275)(car given-args_274))"
"((given-kws_276)(cdr given-kws_273))"
"((given-args_277)(cdr given-args_274)))"
"(let-values(((with-submodules?18_278)(car given-args_277)))"
"(compile-submodules30.1"
" bodys17_260"
" cctx21_263"
" modules-being-compiled22_266"
" serializable?19_269"
" star?16_272"
" to-source?20_275"
" with-submodules?18_278))))))))))"
"(define-values"
"(compile-submodules32.1)"
"(lifted/2.1$14"
"(lambda(given-kws_279 given-argc_280)"
"(if(= given-argc_280 2)"
"(let-values()"
"(if(pair? l2_281)"
"(if(eq?(car l2_281) '#:bodys)"
"(let-values(((l2_282)(cdr l2_281)))"
"(if(pair? l2_282)"
"(if(eq?(car l2_282) '#:cctx)"
"(let-values(((l2_283)(cdr l2_282)))"
"(if(pair? l2_283)"
"(if(eq?(car l2_283) '#:modules-being-compiled)"
"(let-values(((l2_284)(cdr l2_283)))"
"(if(pair? l2_284)"
"(if(eq?(car l2_284) '#:serializable?)"
"(let-values(((l2_285)(cdr l2_284)))"
"(if(pair? l2_285)"
"(if(eq?(car l2_285) '#:star?)"
"(let-values(((l2_286)(cdr l2_285)))"
"(if(pair? l2_286)"
"(if(eq?(car l2_286) '#:to-source?)"
"(let-values(((l2_287)(cdr l2_286)))"
"(if(pair? l2_287)"
"(if(eq?(car l2_287) '#:with-submodules?)(null?(cdr l2_287)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_288 given-args_289)(unpack31.1 given-kws_288 given-args_289)))"
" '(#:bodys #:cctx #:modules-being-compiled #:serializable? #:star? #:to-source? #:with-submodules?)"
" '(#:bodys #:cctx #:modules-being-compiled #:serializable? #:star? #:to-source? #:with-submodules?)))"
"(define-values"
"(filter-language-info)"
"(lambda(li_290)"
"(if(vector? li_290)"
"(if(= 3(vector-length li_290))"
"(if(1/module-path?(vector-ref li_290 0))(if(symbol?(vector-ref li_290 1)) li_290 #f) #f)"
" #f)"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(module-path->mpi5.1)"
"(lambda(declared-submodule-names1_1 declared-submodule-names2_2 mod-path3_3 self4_4)"
"(let-values()"
"(let-values()"
"(let-values(((declared-submodule-names_7)"
"(if declared-submodule-names2_2 declared-submodule-names1_1 '#hasheq())))"
"(let-values()"
"(if(if(list? mod-path_5)"
"(if(= 2(length mod-path_5))"
"(if(eq? 'quote(car mod-path_5))"
"(if(symbol?(cadr mod-path_5))(hash-ref declared-submodule-names_7(cadr mod-path_5) #f) #f)"
" #f)"
" #f)"
" #f)"
"              (let-values () (1/module-path-index-join (list 'submod \".\" (cadr mod-path_5)) self_6))"
"(if(if(list? mod-path_5)"
"(if(eq? 'submod(car mod-path_5))"
"(let-values(((mod-path_8)(cadr mod-path_5)))"
"(if(list? mod-path_8)"
"(if(= 2(length mod-path_8))"
"(if(eq? 'quote(car mod-path_8))"
"(if(symbol?(cadr mod-path_8))"
"(hash-ref declared-submodule-names_7(cadr mod-path_8) #f)"
" #f)"
" #f)"
" #f)"
" #f))"
" #f)"
" #f)"
"(let-values()"
"                  (1/module-path-index-join (list* 'submod \".\" (cadr (cadr mod-path_5)) (cddr mod-path_5)) self_6))"
"(let-values()(1/module-path-index-join mod-path_5 self_6))))))))))"
"(define-values"
"(module-path->mpi/context)"
"(lambda(mod-path_26 ctx_27)"
"(let-values(((temp9_30)(namespace-mpi(expand-context-namespace ctx_27)))"
"((temp10_31)(expand-context-declared-submodule-names ctx_27)))"
"(module-path->mpi5.1 temp10_31 #t mod-path8_29 temp9_30))))"
"(void)"
"(void)"
"(define-values"
"(syntax-mapped-names)"
"(lambda(s_1 phase_2)"
"(let-values(((s-scs_3)(syntax-scope-set s_1 phase_2)))"
"(let-values()"
"(begin"
"(if((lambda(ht_5)(if(hash? ht_5)(immutable? ht_5) #f)) ht_4)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_4)))"
"((letrec-values(((for-loop_6)"
"(lambda(syms_7 i_8)"
"(if i_8"
"(let-values(((sc_9)(unsafe-immutable-hash-iterate-key ht_4 i_8)))"
"(let-values(((syms_10)"
"(let-values()"
"(let-values(((syms_12)"
"(let-values()"
"(set-union"
" syms_11"
"(binding-table-symbols"
"(scope-binding-table sc_9)"
" s-scs_3"
" s_1"
" null)))))"
"(values syms_12)))))"
"(for-loop_6 syms_10(unsafe-immutable-hash-iterate-next ht_4 i_8))))"
" syms_7))))"
" for-loop_6)"
"(seteq)"
"(unsafe-immutable-hash-iterate-first ht_4)))))))"
"(void)"
"(void)"
"(define-values"
"(struct:requires+provides"
" requires+provides1.1"
" requires+provides?"
" requires+provides-self"
" requires+provides-require-mpis"
" requires+provides-require-mpis-in-order"
" requires+provides-requires"
" requires+provides-provides"
" requires+provides-phase-to-defined-syms"
" requires+provides-can-cross-phase-persistent?"
" requires+provides-all-bindings-simple?"
" set-requires+provides-can-cross-phase-persistent?!"
" set-requires+provides-all-bindings-simple?!)"
"(let-values(((struct:_36 make-_37 ?_38 -ref_39 -set!_40)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'requires+provides"
" #f"
" 8"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5)"
" #f"
" 'requires+provides)))))"
"(values"
" struct:_36"
" make-_37"
" ?_38"
"(make-struct-field-accessor -ref_39 0 'self)"
"(make-struct-field-accessor -ref_39 1 'require-mpis)"
"(make-struct-field-accessor -ref_39 2 'require-mpis-in-order)"
"(make-struct-field-accessor -ref_39 3 'requires)"
"(make-struct-field-accessor -ref_39 4 'provides)"
"(make-struct-field-accessor -ref_39 5 'phase-to-defined-syms)"
"(make-struct-field-accessor -ref_39 6 'can-cross-phase-persistent?)"
"(make-struct-field-accessor -ref_39 7 'all-bindings-simple?)"
"(make-struct-field-mutator -set!_40 6 'can-cross-phase-persistent?)"
"(make-struct-field-mutator -set!_40 7 'all-bindings-simple?))))"
"(define-values"
"(struct:required required2.1 required? required-id required-phase required-can-be-shadowed? required-as-transformer?)"
"(let-values(((struct:_91 make-_92 ?_93 -ref_94 -set!_95)"
"(let-values()"
"(let-values()"
"(make-struct-type 'required #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'required)))))"
"(values"
" struct:_91"
" make-_92"
" ?_93"
"(make-struct-field-accessor -ref_94 0 'id)"
"(make-struct-field-accessor -ref_94 1 'phase)"
"(make-struct-field-accessor -ref_94 2 'can-be-shadowed?)"
"(make-struct-field-accessor -ref_94 3 'as-transformer?))))"
"(define-values"
"(struct:bulk-required"
" bulk-required4.1"
" bulk-required?"
" bulk-required-provides"
" bulk-required-prefix-len"
" bulk-required-s"
" bulk-required-provide-phase-level"
" bulk-required-can-be-shadowed?)"
"(let-values(((struct:_161 make-_162 ?_163 -ref_164 -set!_165)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-required"
" #f"
" 5"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'bulk-required)))))"
"(values"
" struct:_161"
" make-_162"
" ?_163"
"(make-struct-field-accessor -ref_164 0 'provides)"
"(make-struct-field-accessor -ref_164 1 'prefix-len)"
"(make-struct-field-accessor -ref_164 2 's)"
"(make-struct-field-accessor -ref_164 3 'provide-phase-level)"
"(make-struct-field-accessor -ref_164 4 'can-be-shadowed?))))"
"(define-values"
"(make-requires+provides)"
"(lambda(self_201)"
"(requires+provides1.1"
" self_201"
"(make-module-path-index-intern-table)"
"(make-hasheqv)"
"(make-hasheq)"
"(make-hasheqv)"
"(make-hasheqv)"
" #t"
" #t)))"
"(define-values"
"(requires+provides-reset!)"
"(lambda(r+p_202)"
"(begin"
"(hash-clear!(requires+provides-require-mpis-in-order r+p_202))"
"(hash-clear!(requires+provides-requires r+p_202))"
"(hash-clear!(requires+provides-provides r+p_202))"
"(hash-clear!(requires+provides-phase-to-defined-syms r+p_202)))))"
"(define-values"
"(intern-mpi)"
"(lambda(r+p_203 mpi_204)(intern-module-path-index!(requires+provides-require-mpis r+p_203) mpi_204)))"
"(define-values"
"(add-required-module!)"
"(lambda(r+p_205 mod-name_206 phase-shift_207 is-cross-phase-persistent?_208)"
"(let-values(((mpi_209)(intern-mpi r+p_205 mod-name_206)))"
"(begin"
"(if(hash-ref(hash-ref(requires+provides-requires r+p_205) mpi_209 '#hasheqv()) phase-shift_207 #f)"
"(void)"
"(let-values()"
"(begin"
"(hash-update!"
"(requires+provides-require-mpis-in-order r+p_205)"
" phase-shift_207"
"(lambda(l_210)(cons mpi_209 l_210))"
" null)"
"(hash-set!"
"(hash-ref!(requires+provides-requires r+p_205) mpi_209 make-hasheqv)"
" phase-shift_207"
"(make-hasheq)))))"
"(if is-cross-phase-persistent?_208"
"(void)"
"(let-values()(set-requires+provides-can-cross-phase-persistent?! r+p_205 #f)))"
" mpi_209))))"
"(define-values"
"(add-defined-or-required-id!13.1)"
"(lambda(as-transformer?6_221 can-be-shadowed?5_222 can-be-shadowed?7_223 r+p9_224 id10_225 phase11_226 binding12_227)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((can-be-shadowed?_232)(if can-be-shadowed?7_223 can-be-shadowed?5_222 #f)))"
"(let-values()"
"(let-values()"
"(begin"
"(if(equal?"
" phase_230"
"(phase+"
"(module-binding-nominal-phase binding_231)"
"(module-binding-nominal-require-phase binding_231)))"
"(void)"
"                      (let-values () (error \"internal error: binding phase does not match nominal info\")))"
"(let-values(((.../require+provide.rkt:118:2_234) add-defined-or-required-id-at-nominal!29.1)"
"((temp111_238)(module-binding-nominal-module binding_231))"
"((temp112_239)(module-binding-nominal-require-phase binding_231)))"
"(add-defined-or-required-id-at-nominal!27.1"
" as-transformer?114_241"
" can-be-shadowed?113_240"
" temp111_238"
" temp112_239"
" r+p108_235"
" id109_236"
" phase110_237))))))))))))"
"(define-values"
"(lifted/6.1$7 lifted/7.1$7 lifted/8.1$7 lifted/9.1$7 lifted/10.1$7)"
"(make-struct-type"
" 'add-defined-or-required-id-at-nominal!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'add-defined-or-required-id-at-nominal!"
"(case-lambda((self_261 r+p_262 id_263 phase_264)(apply missing-kw self_261 r+p_262 id_263 phase_264 null))))))"
"(current-inspector)"
"(case-lambda((self_265 r+p_266 id_267 phase_268)(apply missing-kw self_265 r+p_266 id_267 phase_268 null)))))"
"(define-values"
"(add-defined-or-required-id-at-nominal!27.1)"
"(lambda(as-transformer?19_269"
" can-be-shadowed?18_270"
" nominal-module16_271"
" nominal-require-phase17_272"
" r+p24_273"
" id25_274"
" phase26_275)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((at-mod_283)"
"(hash-ref!"
"(requires+provides-requires r+p_276)"
"(intern-mpi r+p_276 nominal-module_279)"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_284)(hash-ref! at-mod_283 nominal-require-phase_280 make-hasheq)))"
"(let-values(((sym_285)(syntax-e$1 id_277)))"
"(hash-set!"
" sym-to-reqds_284"
" sym_285"
"(cons"
"(required2.1 id_277 phase_278 can-be-shadowed?_281 as-transformer?_282)"
"(hash-ref sym-to-reqds_284 sym_285 null))))))))))))))))"
"(define-values"
"(unpack28.1)"
"(lambda(given-kws_286 given-args_287 r+p24_288 id25_289 phase26_290)"
"(let-values(((as-transformer?19_291)(car given-args_287))"
"((given-kws_292)(cdr given-kws_286))"
"((given-args_293)(cdr given-args_287)))"
"(let-values(((can-be-shadowed?18_294)(car given-args_293))"
"((given-kws_295)(cdr given-kws_292))"
"((given-args_296)(cdr given-args_293)))"
"(let-values(((nominal-module16_297)(car given-args_296))"
"((given-kws_298)(cdr given-kws_295))"
"((given-args_299)(cdr given-args_296)))"
"(let-values(((nominal-require-phase17_300)(car given-args_299)))"
"(add-defined-or-required-id-at-nominal!27.1"
" as-transformer?19_291"
" can-be-shadowed?18_294"
" nominal-module16_297"
" nominal-require-phase17_300"
" r+p24_288"
" id25_289"
" phase26_290)))))))"
"(define-values"
"(add-defined-or-required-id-at-nominal!29.1)"
"(lifted/7.1$7"
"(lambda(given-kws_301 given-argc_302)"
"(if(= given-argc_302 5)"
"(let-values()"
"(if(pair? l2_303)"
"(if(eq?(car l2_303) '#:as-transformer?)"
"(let-values(((l2_304)(cdr l2_303)))"
"(if(pair? l2_304)"
"(if(eq?(car l2_304) '#:can-be-shadowed?)"
"(let-values(((l2_305)(cdr l2_304)))"
"(if(pair? l2_305)"
"(if(eq?(car l2_305) '#:nominal-module)"
"(let-values(((l2_306)(cdr l2_305)))"
"(if(pair? l2_306)"
"(if(eq?(car l2_306) '#:nominal-require-phase)(null?(cdr l2_306)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_307 given-args_308 r+p_309 id_310 phase_311)"
"(unpack28.1 given-kws_307 given-args_308 r+p_309 id_310 phase_311)))"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)))"
"(define-values"
"(add-bulk-required-ids!53.1)"
"(lambda(accum-update-nominals36_328"
" can-be-shadowed?34_329"
" check-and-remove?35_330"
" excepts31_331"
" in33_332"
" prefix30_333"
" symbols-accum32_334"
" who37_335"
" r+p46_336"
" s47_337"
" self48_338"
" nominal-module49_339"
" phase-shift50_340"
" provides51_341"
" provide-phase-level52_342)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((phase_358)(phase+ provide-phase-level_349 phase-shift_347)))"
"(let-values(((shortcut-table_359)"
"(if check-and-remove?_355"
"(if(>(hash-count provides_348) 64)"
"(syntax-mapped-names s_344 phase_358)"
" #f)"
" #f)))"
"(let-values(((mpi_360)(intern-mpi r+p_343 nominal-module_346)))"
"(let-values(((at-mod_361)"
"(hash-ref!"
"(requires+provides-requires r+p_343)"
" mpi_360"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_362)"
"(hash-ref! at-mod_361 phase-shift_347 make-hasheq)))"
"(let-values(((prefix-len_363)"
"(if bulk-prefix_350"
"(string-length(symbol->string bulk-prefix_350))"
" 0)))"
"(let-values(((br_364)"
"(bulk-required4.1"
" provides_348"
" prefix-len_363"
" s_344"
" provide-phase-level_349"
" can-be-shadowed?_354)))"
"(let-values()"
"(begin"
"(if((lambda(ht_366)(hash? ht_366)) ht_365)"
"(void)"
"(let-values()(default-in-hash ht_365)))"
"((letrec-values(((for-loop_367)"
"(lambda(fold-var_368 i_369)"
"(if i_369"
"(let-values(((out-sym_370 binding/p_371)"
"(hash-iterate-key+value"
" ht_365"
" i_369)))"
"(let-values(((fold-var_372)"
"(let-values()"
"(let-values(((fold-var_374)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if symbols-accum_352"
"(let-values()"
"(hash-set!"
" symbols-accum_352"
" out-sym_370"
" #t))"
"(void))"
"(if(hash-ref"
" bulk-excepts_351"
" out-sym_370"
" #f)"
"(void)"
"(let-values()"
"(let-values(((sym_375)"
"(if(not"
" bulk-prefix_350)"
"(let-values()"
" out-sym_370)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                                            \"~a~a\""
" bulk-prefix_350"
" out-sym_370))))))"
"(begin"
"(if(if check-and-remove?_355"
"(let-values(((or-part_376)"
"(not"
" shortcut-table_359)))"
"(if or-part_376"
" or-part_376"
"(hash-ref"
" shortcut-table_359"
" sym_375"
" #f)))"
" #f)"
"(let-values()"
"(let-values(((.../require+provide.rkt:170:8_377)"
" check-not-defined89.1)"
"((temp115_378)"
" #t)"
"((temp117_380)"
"(datum->syntax$1"
" s_344"
" sym_375"
" s_344))"
"((temp120_383)"
"(lambda()"
"(let-values()"
"(provide-binding-to-require-binding11.1"
" mpi127_391"
" phase-shift129_393"
" provide-phase-level128_392"
" self126_390"
" binding/p124_388"
" sym125_389))))"
"((temp121_384)"
" #t))"
"(check-not-defined87.1"
" accum-update-nominals122_385"
" #t"
" temp115_378"
" #t"
" orig-s119_382"
" temp121_384"
" #t"
" temp120_383"
" #t"
" who123_386"
" r+p116_379"
" temp117_380"
" phase118_381)))"
"(void))"
"(hash-set!"
" sym-to-reqds_362"
" sym_375"
"(cons"
" br_364"
"(hash-ref"
" sym-to-reqds_362"
" sym_375"
" null)))))))))"
"(void)))))"
"(values"
" fold-var_374)))))"
"(for-loop_367"
" fold-var_372"
"(hash-iterate-next ht_365 i_369))))"
" fold-var_368))))"
" for-loop_367)"
"(void)"
"(hash-iterate-first ht_365)))))))))))))))))))))))))))))"
"(define-values"
"(bulk-required->required)"
"(lambda(br_444 nominal-module_445 phase_446 sym_447)"
"(let-values(((prefix-len_448)(bulk-required-prefix-len br_444)))"
"(let-values(((out-sym_449)"
"(if(zero? prefix-len_448)"
" sym_447"
"(string->symbol(substring(symbol->string sym_447) prefix-len_448)))))"
"(let-values(((binding/p_450)(hash-ref(bulk-required-provides br_444) out-sym_449)))"
"(required2.1"
"(datum->syntax$1(bulk-required-s br_444) sym_447)"
"(phase+ phase_446(bulk-required-provide-phase-level br_444))"
"(bulk-required-can-be-shadowed? br_444)"
"(provided-as-transformer? binding/p_450)))))))"
"(define-values"
"(normalize-required)"
"(lambda(r_451 mod-name_452 phase_453 sym_454)"
"(if(bulk-required? r_451)(bulk-required->required r_451 mod-name_452 phase_453 sym_454) r_451)))"
"(define-values"
"(add-enclosing-module-defined-and-required!61.1)"
"(lambda(enclosing-requires+provides56_463 r+p58_464 enclosing-mod59_465 phase-shift60_466)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(set-requires+provides-all-bindings-simple?! r+p_467 #f)"
"(let-values(((ht_471)(requires+provides-requires enclosing-r+p_468)))"
"(begin"
"(if((lambda(ht_472)(hash? ht_472)) ht_471)(void)(let-values()(default-in-hash ht_471)))"
"((letrec-values(((for-loop_473)"
"(lambda(fold-var_474 i_475)"
"(if i_475"
"(let-values(((mod-name_476 at-mod_477)"
"(hash-iterate-key+value ht_471 i_475)))"
"(let-values(((fold-var_478)"
"(let-values()"
"(let-values(((fold-var_480)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values()"
"(begin"
"(if((lambda(ht_482)"
"(hash? ht_482))"
" ht_481)"
"(void)"
"(let-values()"
"(default-in-hash ht_481)))"
"((letrec-values(((for-loop_483)"
"(lambda(fold-var_484"
" i_485)"
"(if i_485"
"(let-values(((phase_486"
" at-phase_487)"
"(hash-iterate-key+value"
" ht_481"
" i_485)))"
"(let-values(((fold-var_488)"
"(let-values()"
"(begin"
"(if((lambda(ht_490)"
"(hash?"
" ht_490))"
" ht_489)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_489)))"
"((letrec-values(((for-loop_491)"
"(lambda(fold-var_492"
" i_493)"
"(if i_493"
"(let-values(((sym_494"
" reqds_495)"
"(hash-iterate-key+value"
" ht_489"
" i_493)))"
"(let-values(((fold-var_496)"
"(let-values()"
"(begin"
"(if(list?"
" lst_497)"
"(void)"
"(let-values()"
"(in-list"
" lst_497)))"
"((letrec-values(((for-loop_498)"
"(lambda(fold-var_499"
" lst_500)"
"(if(pair?"
" lst_500)"
"(let-values(((reqd/maybe-bulk_501)"
"(unsafe-car"
" lst_500)))"
"(let-values(((fold-var_502)"
"(let-values()"
"(let-values(((fold-var_504)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((reqd_505)"
"(normalize-required"
" reqd/maybe-bulk_501"
" mod-name_476"
" phase_486"
" sym_494)))"
"(let-values(((temp131_508)"
"(syntax-shift-phase-level$1"
"(let-values(((temp137_514)"
"(required-id"
" reqd_505))"
"((temp138_515)"
"(requires+provides-self"
" enclosing-r+p_468)))"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" temp137_514"
" temp138_515"
" enclosing-mod139_516"
" #f"
" #f))"
" phase-shift_470))"
"((temp132_509)"
"(phase+"
"(required-phase"
" reqd_505)"
" phase-shift_470))"
"((temp135_512)"
" #t)"
"((temp136_513)"
"(required-as-transformer?"
" reqd_505)))"
"(add-defined-or-required-id-at-nominal!27.1"
" temp136_513"
" temp135_512"
" enclosing-mod133_510"
" phase-shift134_511"
" r+p130_507"
" temp131_508"
" temp132_509))))"
"(void)))))"
"(values"
" fold-var_504)))))"
"(for-loop_498"
" fold-var_502"
"(unsafe-cdr"
" lst_500))))"
" fold-var_499))))"
" for-loop_498)"
" fold-var_492"
" lst_497)))))"
"(for-loop_491"
" fold-var_496"
"(hash-iterate-next"
" ht_489"
" i_493))))"
" fold-var_492))))"
" for-loop_491)"
" fold-var_484"
"(hash-iterate-first"
" ht_489))))))"
"(for-loop_483"
" fold-var_488"
"(hash-iterate-next"
" ht_481"
" i_485))))"
" fold-var_484))))"
" for-loop_483)"
"(void)"
"(hash-iterate-first ht_481)))))"
"(void)))))"
"(values fold-var_480)))))"
"(for-loop_473 fold-var_478(hash-iterate-next ht_471 i_475))))"
" fold-var_474))))"
" for-loop_473)"
"(void)"
"(hash-iterate-first ht_471))))))))))))"
"(define-values"
"(remove-required-id!69.1)"
"(lambda(unless-matches64_539 r+p66_540 id67_541 phase68_542)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((b_547)"
"(let-values(((temp142_551) #t))"
"(resolve+shift30.1 #f #f temp142_551 #t #f #f #f #f #f #f id140_549 phase141_550))))"
"(if b_547"
"(let-values()"
"(let-values(((mpi_552)(intern-mpi r+p_543(module-binding-nominal-module b_547))))"
"(let-values(((at-mod_553)(hash-ref(requires+provides-requires r+p_543) mpi_552 #f)))"
"(if at-mod_553"
"(let-values()"
"(let-values(((nominal-phase_554)(module-binding-nominal-require-phase b_547)))"
"(let-values(((sym-to-reqds_555)(hash-ref at-mod_553 nominal-phase_554 #f)))"
"(if sym-to-reqds_555"
"(let-values()"
"(let-values(((sym_556)(syntax-e$1 id_544)))"
"(let-values(((l_557)(hash-ref sym-to-reqds_555 sym_556 null)))"
"(if(null? l_557)"
"(void)"
"(let-values()"
"(if(same-binding? b_547 binding_546)"
"(void)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_555"
" sym_556"
"(remove-non-matching-requireds"
" l_557"
" id_544"
" phase_545"
" mpi_552"
" nominal-phase_554"
" sym_556)))))))))"
"(void)))))"
"(void)))))"
"(void))))))))))"
"(define-values"
"(remove-non-matching-requireds)"
"(lambda(reqds_572 id_573 phase_574 mpi_575 nominal-phase_576 sym_577)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_578)(void)(let-values()(in-list lst_578)))"
"((letrec-values(((for-loop_579)"
"(lambda(fold-var_580 lst_581)"
"(if(pair? lst_581)"
"(let-values(((r_582)(unsafe-car lst_581)))"
"(let-values(((fold-var_583)"
"(let-values(((r_584)"
"(normalize-required"
" r_582"
" mpi_575"
" nominal-phase_576"
" sym_577)))"
"(begin"
" #t"
"((letrec-values(((for-loop_585)"
"(lambda(fold-var_586)"
"(let-values()"
"(let-values(((fold-var_587)"
"(let-values()"
"(if(free-identifier=?$1"
"(required-id r_584)"
" id_573"
" phase_574"
" phase_574)"
" fold-var_588"
"(let-values()"
"(let-values(((fold-var_590)"
"(let-values()"
"(cons"
"(let-values()"
" r_584)"
" fold-var_589))))"
"(values"
" fold-var_590)))))))"
" fold-var_587)))))"
" for-loop_585)"
" fold-var_580)))))"
"(for-loop_579 fold-var_583(unsafe-cdr lst_581))))"
" fold-var_580))))"
" for-loop_579)"
" null"
" lst_578))))))"
"(define-values"
"(lifted/26.1$1 lifted/27.1$1 lifted/28.1$1 lifted/29.1$1 lifted/30.1$1)"
"(make-struct-type"
" 'check-not-defined"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'check-not-defined"
"(case-lambda((self_591 r+p_592 id_593 phase_594)(apply missing-kw self_591 r+p_592 id_593 phase_594 null))))))"
"(current-inspector)"
"(case-lambda((self_595 r+p_596 id_597 phase_598)(apply missing-kw self_595 r+p_596 id_597 phase_598 null)))))"
"(define-values"
"(check-not-defined87.1)"
"(lambda(accum-update-nominals76_599"
" accum-update-nominals82_600"
" check-not-required?72_601"
" check-not-required?78_602"
" in73_603"
" remove-shadowed!?75_604"
" remove-shadowed!?81_605"
" unless-matches74_606"
" unless-matches80_607"
" who77_608"
" r+p84_609"
" id85_610"
" phase86_611)"
"(let-values(((check-not-required?_612)(if check-not-required?78_602 check-not-required?72_601 #f)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((ok-binding/delayed_617)(if unless-matches80_607 unless-matches74_606 #f)))"
"(let-values(((remove-shadowed!?_618)(if remove-shadowed!?81_605 remove-shadowed!?75_604 #f)))"
"(let-values(((accum-update-nominals_619)"
"(if accum-update-nominals82_600 accum-update-nominals76_599 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((b_621)"
"(let-values(((temp145_625) #t))"
"(resolve+shift30.1"
" #f"
" #f"
" temp145_625"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id143_623"
" phase144_624))))"
"(if(not b_621)"
"(let-values()(void))"
"(if(not(module-binding? b_621))"
"                              (let-values () (raise-syntax-error$1 #f \"identifier out of context\" id_614))"
"(let-values()"
"(let-values(((defined?_626)"
"(if b_621"
"(eq?(requires+provides-self r+p_613)(module-binding-module b_621))"
" #f)))"
"(if(if(not defined?_626)(not check-not-required?_612) #f)"
"(let-values()(set-requires+provides-all-bindings-simple?! r+p_613 #f))"
"(if(if defined?_626"
"(not"
"(hash-ref"
"(hash-ref"
"(requires+provides-phase-to-defined-syms r+p_613)"
" phase_615"
" '#hasheq())"
"(module-binding-sym b_621)"
" #f))"
" #f)"
"(let-values()(void))"
"(let-values()"
"(let-values(((mpi_627)"
"(intern-mpi r+p_613(module-binding-nominal-module b_621))))"
"(let-values(((at-mod_628)"
"(hash-ref(requires+provides-requires r+p_613) mpi_627 #f)))"
"(let-values(((ok-binding_629)"
"(if(procedure? ok-binding/delayed_617)"
"(ok-binding/delayed_617)"
" ok-binding/delayed_617)))"
"(if(not at-mod_628)"
"(let-values()(void))"
"(if(if ok-binding_629(same-binding? b_621 ok-binding_629) #f)"
"(let-values()"
"(if(same-binding-nominals? b_621 ok-binding_629)"
"(void)"
"(let-values()"
"(let-values(((update!_630)"
"(lambda()"
"(let-values(((temp146_632) #t)"
"((temp148_634)"
"(let-values(((temp151_638)"
"(cons"
" ok-binding_629"
"(module-binding-extra-nominal-bindings"
" b_621))))"
"(module-binding-update48.1"
" #f"
" #f"
" temp151_638"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b150_637))))"
"(add-binding!17.1"
" #f"
" #f"
" temp146_632"
" #t"
" id147_633"
" temp148_634"
" phase149_635)))))"
"(if accum-update-nominals_619"
"(let-values()"
"(set-box!"
" accum-update-nominals_619"
"(cons update!_630(unbox accum-update-nominals_619))))"
"(let-values()(update!_630)))))))"
"(let-values()"
"(let-values(((nominal-phase_639)"
"(module-binding-nominal-require-phase b_621)))"
"(let-values(((sym-to-reqds_640)"
"(hash-ref at-mod_628 nominal-phase_639 '#hasheq())))"
"(let-values(((reqds_641)"
"(hash-ref"
" sym-to-reqds_640"
"(syntax-e$1 id_614)"
" null)))"
"(begin"
"(let-values()"
"(begin"
"(if(list? lst_642)"
"(void)"
"(let-values()(in-list lst_642)))"
"((letrec-values(((for-loop_643)"
"(lambda(fold-var_644 lst_645)"
"(if(pair? lst_645)"
"(let-values(((r_646)"
"(unsafe-car"
" lst_645)))"
"(let-values(((fold-var_647)"
"(let-values()"
"(let-values(((fold-var_649)"
"(let-values()"
"(begin"
"(let-values()"
"(if(if(bulk-required?"
" r_646)"
"(bulk-required-can-be-shadowed?"
" r_646)"
"(required-can-be-shadowed?"
" r_646))"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" r+p_613"
" #f))"
"(let-values()"
"(raise-syntax-error$1"
" who_620"
"(string-append"
"                                                                                                                                  \"identifier already \""
"(if defined?_626"
"                                                                                                                                    \"defined\""
"                                                                                                                                    \"required\")"
"(if(zero-phase?"
" phase_615)"
"(let-values()"
"                                                                                                                                      \"\")"
"(if(label-phase?"
" phase_615)"
"(let-values()"
"                                                                                                                                        \" for label\")"
"(if(="
" 1"
" phase_615)"
"(let-values()"
"                                                                                                                                          \" for syntax\")"
"(let-values()"
"(format"
"                                                                                                                                           \" for phase ~a\""
" phase_615))))))"
" orig-s_616"
" id_614))))"
"(void)))))"
"(values"
" fold-var_649)))))"
"(for-loop_643"
" fold-var_647"
"(unsafe-cdr lst_645))))"
" fold-var_644))))"
" for-loop_643)"
"(void)"
" lst_642)))"
"(if(if remove-shadowed!?_618(pair? reqds_641) #f)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_640"
"(syntax-e$1 id_614)"
"(remove-non-matching-requireds"
" reqds_641"
" id_614"
" phase_615"
" mpi_627"
" nominal-phase_639"
"(syntax-e$1 id_614))))"
"(void))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack88.1)"
"(lambda(given-kws_650 given-args_651 r+p84_652 id85_653 phase86_654)"
"(let-values(((accum-update-nominals82_655)"
"(if(pair? given-kws_650)(eq? '#:accum-update-nominals(car given-kws_650)) #f)))"
"(let-values(((accum-update-nominals76_656)(if accum-update-nominals82_655(car given-args_651)(void)))"
"((given-kws_657)(if accum-update-nominals82_655(cdr given-kws_650) given-kws_650))"
"((given-args_658)(if accum-update-nominals82_655(cdr given-args_651) given-args_651)))"
"(let-values(((check-not-required?78_659)"
"(if(pair? given-kws_657)(eq? '#:check-not-required?(car given-kws_657)) #f)))"
"(let-values(((check-not-required?72_660)(if check-not-required?78_659(car given-args_658)(void)))"
"((given-kws_661)(if check-not-required?78_659(cdr given-kws_657) given-kws_657))"
"((given-args_662)(if check-not-required?78_659(cdr given-args_658) given-args_658)))"
"(let-values(((in73_663)(car given-args_662))"
"((given-kws_664)(cdr given-kws_661))"
"((given-args_665)(cdr given-args_662)))"
"(let-values(((remove-shadowed!?81_666)"
"(if(pair? given-kws_664)(eq? '#:remove-shadowed!?(car given-kws_664)) #f)))"
"(let-values(((remove-shadowed!?75_667)(if remove-shadowed!?81_666(car given-args_665)(void)))"
"((given-kws_668)(if remove-shadowed!?81_666(cdr given-kws_664) given-kws_664))"
"((given-args_669)(if remove-shadowed!?81_666(cdr given-args_665) given-args_665)))"
"(let-values(((unless-matches80_670)"
"(if(pair? given-kws_668)(eq? '#:unless-matches(car given-kws_668)) #f)))"
"(let-values(((unless-matches74_671)(if unless-matches80_670(car given-args_669)(void)))"
"((given-kws_672)(if unless-matches80_670(cdr given-kws_668) given-kws_668))"
"((given-args_673)(if unless-matches80_670(cdr given-args_669) given-args_669)))"
"(let-values(((who77_674)(car given-args_673)))"
"(check-not-defined87.1"
" accum-update-nominals76_656"
" accum-update-nominals82_655"
" check-not-required?72_660"
" check-not-required?78_659"
" in73_663"
" remove-shadowed!?75_667"
" remove-shadowed!?81_666"
" unless-matches74_671"
" unless-matches80_670"
" who77_674"
" r+p84_652"
" id85_653"
" phase86_654)))))))))))))"
"(define-values"
"(check-not-defined89.1)"
"(lifted/27.1$1"
"(lambda(given-kws_675 given-argc_676)"
"(if(= given-argc_676 5)"
"(subsets?"
" '(#:in #:who)"
" given-kws_675"
" '(#:accum-update-nominals #:check-not-required? #:in #:remove-shadowed!? #:unless-matches #:who))"
" #f))"
"(case-lambda"
"((given-kws_677 given-args_678 r+p_679 id_680 phase_681)"
"(unpack88.1 given-kws_677 given-args_678 r+p_679 id_680 phase_681)))"
" '(#:in #:who)"
" '(#:accum-update-nominals #:check-not-required? #:in #:remove-shadowed!? #:unless-matches #:who)))"
"(define-values"
"(add-defined-syms!)"
"(lambda(r+p_682 syms_683 phase_684)"
"(let-values(((phase-to-defined-syms_685)(requires+provides-phase-to-defined-syms r+p_682)))"
"(let-values(((defined-syms_686)(hash-ref phase-to-defined-syms_685 phase_684 '#hasheq())))"
"(let-values(((new-defined-syms_687)"
"(let-values()"
"(begin"
"(if(list? lst_688)(void)(let-values()(in-list lst_688)))"
"((letrec-values(((for-loop_689)"
"(lambda(defined-syms_690 lst_691)"
"(if(pair? lst_691)"
"(let-values(((sym_692)(unsafe-car lst_691)))"
"(let-values(((defined-syms_693)"
"(let-values()"
"(let-values(((defined-syms_695)"
"(let-values()"
"(hash-set"
" defined-syms_694"
" sym_692"
" #t))))"
"(values defined-syms_695)))))"
"(for-loop_689 defined-syms_693(unsafe-cdr lst_691))))"
" defined-syms_690))))"
" for-loop_689)"
" defined-syms_686"
" lst_688)))))"
"(hash-set! phase-to-defined-syms_685 phase_684 new-defined-syms_687))))))"
"(define-values"
"(extract-module-requires)"
"(lambda(r+p_696 mod-name_697 phase_698)"
"(let-values(((mpi_699)(intern-mpi r+p_696 mod-name_697)))"
"(let-values(((at-mod_700)(hash-ref(requires+provides-requires r+p_696) mpi_699 #f)))"
"(if at-mod_700"
"(alt-reverse"
"(let-values(((ht_701)(hash-ref at-mod_700 phase_698 '#hasheq())))"
"(begin"
"(if((lambda(ht_702)(hash? ht_702)) ht_701)(void)(let-values()(default-in-hash ht_701)))"
"((letrec-values(((for-loop_703)"
"(lambda(fold-var_704 i_705)"
"(if i_705"
"(let-values(((sym_706 reqds_707)(hash-iterate-key+value ht_701 i_705)))"
"(let-values(((fold-var_708)"
"(let-values()"
"(begin"
"(if(list? lst_709)(void)(let-values()(in-list lst_709)))"
"((letrec-values(((for-loop_710)"
"(lambda(fold-var_711 lst_712)"
"(if(pair? lst_712)"
"(let-values(((reqd_713)"
"(unsafe-car lst_712)))"
"(let-values(((fold-var_714)"
"(let-values()"
"(let-values(((fold-var_716)"
"(let-values()"
"(cons"
"(let-values()"
"(normalize-required"
" reqd_713"
" mpi_699"
" phase_698"
" sym_706))"
" fold-var_715))))"
"(values"
" fold-var_716)))))"
"(for-loop_710"
" fold-var_714"
"(unsafe-cdr lst_712))))"
" fold-var_711))))"
" for-loop_710)"
" fold-var_704"
" lst_709)))))"
"(for-loop_703 fold-var_708(hash-iterate-next ht_701 i_705))))"
" fold-var_704))))"
" for-loop_703)"
" null"
"(hash-iterate-first ht_701)))))"
" #f)))))"
"(define-values"
"(extract-module-definitions)"
"(lambda(r+p_717)"
"(let-values(((or-part_718)(extract-module-requires r+p_717(requires+provides-self r+p_717) 0)))"
"(if or-part_718 or-part_718 null))))"
"(define-values"
"(extract-all-module-requires)"
"(lambda(r+p_719 mod-name_720 phase_721)"
"(let-values(((self_722)(requires+provides-self r+p_719)))"
"(let-values(((requires_723)(requires+provides-requires r+p_719)))"
"(call/ec"
"(lambda(esc_724)"
"(alt-reverse"
"(let-values(((lst_725)"
"(if mod-name_720(list(intern-mpi r+p_719 mod-name_720))(hash-keys requires_723))))"
"(begin"
"(if(list? lst_725)(void)(let-values()(in-list lst_725)))"
"((letrec-values(((for-loop_726)"
"(lambda(fold-var_727 lst_728)"
"(if(pair? lst_728)"
"(let-values(((mod-name_729)(unsafe-car lst_728)))"
"(let-values(((fold-var_730)"
"(let-values()"
"(if(eq? mod-name_729 self_722)"
" fold-var_731"
"(let-values(((phase-to-requireds_732)"
"(hash-ref"
" requires_723"
" mod-name_729"
" '#hasheqv())))"
"(begin"
" #t"
"((letrec-values(((for-loop_733)"
"(lambda(fold-var_734)"
"(let-values()"
"(let-values(((fold-var_735)"
"(let-values(((lst_736)"
"(if(eq?"
" phase_721"
" 'all)"
"(hash-keys"
" phase-to-requireds_732)"
"(list"
" phase_721))))"
"(begin"
"(if(list?"
" lst_736)"
"(void)"
"(let-values()"
"(in-list"
" lst_736)))"
"((letrec-values(((for-loop_737)"
"(lambda(fold-var_738"
" lst_739)"
"(if(pair?"
" lst_739)"
"(let-values(((phase_740)"
"(unsafe-car"
" lst_739)))"
"(let-values(((fold-var_741)"
"(let-values(((ht_742)"
"(hash-ref"
" phase-to-requireds_732"
" phase_740"
"(lambda()"
"(esc_724"
" #f)))))"
"(begin"
"(if((lambda(ht_743)"
"(hash?"
" ht_743))"
" ht_742)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_742)))"
"((letrec-values(((for-loop_744)"
"(lambda(fold-var_745"
" i_746)"
"(if i_746"
"(let-values(((sym_747"
" reqds_748)"
"(hash-iterate-key+value"
" ht_742"
" i_746)))"
"(let-values(((fold-var_749)"
"(let-values()"
"(begin"
"(if(list?"
" lst_750)"
"(void)"
"(let-values()"
"(in-list"
" lst_750)))"
"((letrec-values(((for-loop_751)"
"(lambda(fold-var_752"
" lst_753)"
"(if(pair?"
" lst_753)"
"(let-values(((reqd_754)"
"(unsafe-car"
" lst_753)))"
"(let-values(((fold-var_755)"
"(let-values()"
"(let-values(((fold-var_757)"
"(let-values()"
"(cons"
"(let-values()"
"(normalize-required"
" reqd_754"
" mod-name_729"
" phase_740"
" sym_747))"
" fold-var_756))))"
"(values"
" fold-var_757)))))"
"(for-loop_751"
" fold-var_755"
"(unsafe-cdr"
" lst_753))))"
" fold-var_752))))"
" for-loop_751)"
" fold-var_745"
" lst_750)))))"
"(for-loop_744"
" fold-var_749"
"(hash-iterate-next"
" ht_742"
" i_746))))"
" fold-var_745))))"
" for-loop_744)"
" fold-var_738"
"(hash-iterate-first"
" ht_742))))))"
"(for-loop_737"
" fold-var_741"
"(unsafe-cdr"
" lst_739))))"
" fold-var_738))))"
" for-loop_737)"
" fold-var_734"
" lst_736)))))"
" fold-var_735)))))"
" for-loop_733)"
" fold-var_731)))))))"
"(for-loop_726 fold-var_730(unsafe-cdr lst_728))))"
" fold-var_727))))"
" for-loop_726)"
" null"
" lst_725))))))))))"
"(define-values"
"(add-provide!101.1)"
"(lambda(as-protected?90_774"
" as-transformer?91_775"
" r+p94_776"
" sym95_777"
" phase96_778"
" binding97_779"
" immed-binding98_780"
" id99_781"
" orig-s100_782)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(if as-protected?_790"
"(not(eq?(module-binding-module immed-binding_787)(requires+provides-self r+p_783)))"
" #f)"
"(let-values()"
"                              (raise-syntax-error$1 #f \"cannot protect required identifier in re-provide\" sym_784))"
"(void))"
"(hash-update!"
"(requires+provides-provides r+p_783)"
" phase_785"
"(lambda(at-phase_792)"
"(let-values(((b/p_793)(hash-ref at-phase_792 sym_784 #f)))"
"(let-values(((b_794)(provided-as-binding b/p_793)))"
"(if(not b_794)"
"(let-values()"
"(hash-set"
" at-phase_792"
" sym_784"
"(if(let-values()(if or-part_795 or-part_795 as-transformer?_791))"
"(provided1.1 binding_786 as-protected?_790 as-transformer?_791)"
" binding_786)))"
"(if(same-binding? b_794 binding_786)"
"(let-values() at-phase_792)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                        \"identifier already provided (as a different binding)\""
" orig-s_789"
" id_788)))))))"
" '#hasheq()))))))))))))))"
"(define-values"
"(extract-requires-and-provides)"
"(lambda(r+p_822 old-self_823 new-self_824)"
"(let-values(((extract-requires_825)"
"(lambda()"
"(let-values(((phase-to-mpis-in-order_827)(requires+provides-require-mpis-in-order r+p_822)))"
"(let-values(((phases-in-order_828)"
"(let-values(((temp152_829)(hash-keys phase-to-mpis-in-order_827)))"
"(sort7.1 #f #f #f #f temp152_829 phase<?153_830))))"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_831)(void)(let-values()(in-list lst_831)))"
"((letrec-values(((for-loop_832)"
"(lambda(fold-var_833 lst_834)"
"(if(pair? lst_834)"
"(let-values(((phase_835)(unsafe-car lst_834)))"
"(let-values(((fold-var_836)"
"(let-values()"
"(let-values(((fold-var_838)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_835"
"(alt-reverse"
"(let-values(((lst_839)"
"(alt-reverse"
"(hash-ref"
" phase-to-mpis-in-order_827"
" phase_835))))"
"(begin"
"(if(list? lst_839)"
"(void)"
"(let-values()"
"(in-list lst_839)))"
"((letrec-values(((for-loop_840)"
"(lambda(fold-var_841"
" lst_842)"
"(if(pair?"
" lst_842)"
"(let-values(((mpi_843)"
"(unsafe-car"
" lst_842)))"
"(let-values(((fold-var_844)"
"(let-values()"
"(if(eq?"
" mpi_843"
" old-self_823)"
" fold-var_845"
"(let-values()"
"(let-values(((fold-var_847)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-shift"
" mpi_843"
" old-self_823"
" new-self_824))"
" fold-var_846))))"
"(values"
" fold-var_847)))))))"
"(for-loop_840"
" fold-var_844"
"(unsafe-cdr"
" lst_842))))"
" fold-var_841))))"
" for-loop_840)"
" null"
" lst_839))))))"
" fold-var_837))))"
"(values fold-var_838)))))"
"(for-loop_832 fold-var_836(unsafe-cdr lst_834))))"
" fold-var_833))))"
" for-loop_832)"
" null"
" lst_831)))))))))"
"(let-values(((extract-provides_826)"
"(lambda()"
"(shift-provides-module-path-index"
"(requires+provides-provides r+p_822)"
" old-self_823"
" new-self_824))))"
"(values(extract-requires_825)(extract-provides_826))))))"
"(define-values"
"(shift-provides-module-path-index)"
"(lambda(provides_871 from-mpi_872 to-mpi_873)"
"(let-values()"
"(begin"
"(if((lambda(ht_875)(hash? ht_875)) ht_874)(void)(let-values()(default-in-hash ht_874)))"
"((letrec-values(((for-loop_876)"
"(lambda(table_877 i_878)"
"(if i_878"
"(let-values(((phase_879 at-phase_880)(hash-iterate-key+value ht_874 i_878)))"
"(let-values(((table_881)"
"(let-values()"
"(let-values(((table_883)"
"(let-values()"
"(let-values(((key_884 val_885)"
"(let-values()"
"(values"
" phase_879"
"(let-values()"
"(begin"
"(if((lambda(ht_887)"
"(hash? ht_887))"
" ht_886)"
"(void)"
"(let-values()"
"(default-in-hash ht_886)))"
"((letrec-values(((for-loop_888)"
"(lambda(table_889"
" i_890)"
"(if i_890"
"(let-values(((sym_891"
" binding_892)"
"(hash-iterate-key+value"
" ht_886"
" i_890)))"
"(let-values(((table_893)"
"(let-values()"
"(if(symbol-interned?"
" sym_891)"
"(let-values()"
"(let-values(((table_896)"
"(let-values()"
"(let-values(((key_897"
" val_898)"
"(let-values()"
"(values"
" sym_891"
"(if(eq?"
" from-mpi_872"
" to-mpi_873)"
"(let-values()"
" binding_892)"
"(let-values()"
"((letrec-values(((loop_899)"
"(lambda(binding_900)"
"(if(provided?"
" binding_900)"
"(let-values()"
"(provided1.1"
"(loop_899"
"(provided-binding"
" binding_900))"
"(provided-protected?"
" binding_900)"
"(provided-syntax?"
" binding_900)))"
"(let-values()"
"(binding-module-path-index-shift"
" binding_900"
" from-mpi_872"
" to-mpi_873))))))"
" loop_899)"
" binding_892)))))))"
"(hash-set"
" table_895"
" key_897"
" val_898)))))"
"(values"
" table_896)))"
" table_894))))"
"(for-loop_888"
" table_893"
"(hash-iterate-next"
" ht_886"
" i_890))))"
" table_889))))"
" for-loop_888)"
" '#hasheq()"
"(hash-iterate-first ht_886))))))))"
"(hash-set table_882 key_884 val_885)))))"
"(values table_883)))))"
"(for-loop_876 table_881(hash-iterate-next ht_874 i_878))))"
" table_877))))"
" for-loop_876)"
" '#hasheqv()"
"(hash-iterate-first ht_874))))))"
"(void)"
"(void)"
"(define-values"
"(struct:adjust-only adjust-only1.1 adjust-only? adjust-only-syms)"
"(let-values(((struct:_21 make-_22 ?_23 -ref_24 -set!_25)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-only #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-only)))))"
"(values struct:_21 make-_22 ?_23(make-struct-field-accessor -ref_24 0 'syms))))"
"(define-values"
"(struct:adjust-prefix adjust-prefix2.1 adjust-prefix? adjust-prefix-sym)"
"(let-values(((struct:_41 make-_42 ?_43 -ref_44 -set!_45)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-prefix #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-prefix)))))"
"(values struct:_41 make-_42 ?_43(make-struct-field-accessor -ref_44 0 'sym))))"
"(define-values"
"(struct:adjust-all-except adjust-all-except3.1 adjust-all-except? adjust-all-except-prefix-sym adjust-all-except-syms)"
"(let-values(((struct:_61 make-_62 ?_63 -ref_64 -set!_65)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'adjust-all-except"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'adjust-all-except)))))"
"(values"
" struct:_61"
" make-_62"
" ?_63"
"(make-struct-field-accessor -ref_64 0 'prefix-sym)"
"(make-struct-field-accessor -ref_64 1 'syms))))"
"(define-values"
"(struct:adjust-rename adjust-rename4.1 adjust-rename? adjust-rename-to-id adjust-rename-from-sym)"
"(let-values(((struct:_86 make-_87 ?_88 -ref_89 -set!_90)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-rename #f 2 0 #f null(current-inspector) #f '(0 1) #f 'adjust-rename)))))"
"(values"
" struct:_86"
" make-_87"
" ?_88"
"(make-struct-field-accessor -ref_89 0 'to-id)"
"(make-struct-field-accessor -ref_89 1 'from-sym))))"
"(define-values(layers$1) '(raw phaseless path))"
"(define-values"
"(parse-and-perform-requires!28.1)"
"(lambda(copy-variable-as-constant?11_123"
" copy-variable-as-constant?20_124"
" copy-variable-phase-level10_125"
" copy-variable-phase-level19_126"
" declared-submodule-names9_127"
" declared-submodule-names18_128"
" run-phase6_129"
" run-phase15_130"
" run?7_131"
" run?16_132"
" self5_133"
" self14_134"
" skip-variable-phase-level12_135"
" skip-variable-phase-level21_136"
" visit?8_137"
" visit?17_138"
" who13_139"
" reqs23_140"
" orig-s24_141"
" m-ns25_142"
" phase-shift26_143"
" requires+provides27_144)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((self_150)(if self14_134 self5_133 #f)))"
"(let-values(((run-phase_151)(if run-phase15_130 run-phase6_129(namespace-phase m-ns_147))))"
"(let-values(((run?_152)(if run?16_132 run?7_131 #f)))"
"(let-values(((visit?_153)(if visit?17_138 visit?8_137 #t)))"
"(let-values(((declared-submodule-names_154)"
"(if declared-submodule-names18_128 declared-submodule-names9_127 '#hasheq())))"
"(let-values(((copy-variable-phase-level_155)"
"(if copy-variable-phase-level19_126 copy-variable-phase-level10_125 #f)))"
"(let-values(((copy-variable-as-constant?_156)"
"(if copy-variable-as-constant?20_124 copy-variable-as-constant?11_123 #f)))"
"(let-values(((skip-variable-phase-level_157)"
"(if skip-variable-phase-level21_136 skip-variable-phase-level12_135 #f)))"
"(let-values()"
"(let-values()"
"((letrec-values(((loop_159)"
"(lambda(reqs_160"
" top-req_161"
" phase-shift_162"
" just-meta_163"
" adjust_164"
" for-meta-ok?_165"
" just-meta-ok?_166"
" layer_167)"
"(let-values()"
"(begin"
"(if(list? lst_168)(void)(let-values()(in-list lst_168)))"
"((letrec-values(((for-loop_169)"
"(lambda(result_170 lst_171)"
"(if(pair? lst_171)"
"(let-values(((req_172)"
"(unsafe-car lst_171)))"
"(let-values(((result_173)"
"(let-values()"
"(let-values(((result_175)"
"(let-values()"
"(let-values()"
"(let-values(((check-nested_176)"
"(let-values(((check-nested106_178)"
"(lambda(want-layer105_179"
" ok?103_180"
" ok?104_181)"
"(let-values()"
"(let-values(((ok?_183)"
"(if ok?104_181"
" ok?103_180"
" #t)))"
"(let-values()"
"(if(if ok?_183"
"(member"
" want-layer_182"
"(member"
" layer_167"
" layers$1))"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"invalid nesting\""
" orig-s_146"
" req_172)))))))))"
"(case-lambda"
"((want-layer_184)"
"(check-nested106_178"
" want-layer_184"
" #f"
" #f))"
"((want-layer_185"
" ok?103_186)"
"(check-nested106_178"
" want-layer_185"
" ok?103_186"
" #t))))))"
"(let-values(((fm_177)"
"(if(pair?"
"(syntax-e$1"
" req_172))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" req_172)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" req_172)))"
" #f)"
" #f)))"
"(let-values()"
"(if(equal?"
" tmp_187"
" 'for-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_176"
" 'raw"
" for-meta-ok?_165)"
"(values))))"
"(let-values(((ok?_188"
" for-meta108_189"
" phase-level109_190"
" spec110_191)"
"(let-values()"
"(let-values()"
"(let-values(((for-meta108_207"
" phase-level109_208"
" spec110_209)"
"(let-values(((s_210)"
"(if(syntax?$1"
" s_205)"
"(syntax-e$1"
" s_205)"
" s_205)))"
"(if(pair?"
" s_210)"
"(let-values(((for-meta111_211)"
"(let-values(((s_214)"
"(car"
" s_210)))"
" s_214))"
"((phase-level112_212"
" spec113_213)"
"(let-values(((s_215)"
"(cdr"
" s_210)))"
"(let-values(((s_216)"
"(if(syntax?$1"
" s_215)"
"(syntax-e$1"
" s_215)"
" s_215)))"
"(if(pair?"
" s_216)"
"(let-values(((phase-level114_217)"
"(let-values(((s_219)"
"(car"
" s_216)))"
" s_219))"
"((spec115_218)"
"(let-values(((s_220)"
"(cdr"
" s_216)))"
"(let-values(((s_221)"
"(if(syntax?$1"
" s_220)"
"(syntax-e$1"
" s_220)"
" s_220)))"
"(let-values(((flat-s_222)"
"(to-syntax-list.1"
" s_221)))"
"(if(not"
" flat-s_222)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_206))"
"(let-values()"
" flat-s_222)))))))"
"(values"
" phase-level114_217"
" spec115_218))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                         \"bad syntax\""
" orig-s_206))))))"
"(values"
" for-meta111_211"
" phase-level112_212"
" spec113_213))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_206)))))"
"(values"
" #t"
" for-meta108_207"
" phase-level109_208"
" spec110_209))))))"
"(let-values(((p_204)"
"(syntax-e$1"
" phase-level109_190)))"
"(begin"
"(if(phase?"
" p_204)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad phase\""
" orig-s_146"
" req_172)))"
"(loop_159"
" spec110_191"
"(let-values()"
"(if or-part_223"
" or-part_223"
" req_172))"
"(phase+"
" phase-shift_162"
" p_204)"
" just-meta_163"
" adjust_164"
" #f"
" just-meta-ok?_166"
" 'raw))))))"
"(if(equal?"
" tmp_187"
" 'for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_176"
" 'raw"
" for-meta-ok?_165)"
"(values))))"
"(let-values(((ok?_224"
" for-syntax116_225"
" spec117_226)"
"(let-values()"
"(let-values()"
"(let-values(((for-syntax116_239"
" spec117_240)"
"(let-values(((s_241)"
"(if(syntax?$1"
" s_237)"
"(syntax-e$1"
" s_237)"
" s_237)))"
"(if(pair?"
" s_241)"
"(let-values(((for-syntax118_242)"
"(let-values(((s_244)"
"(car"
" s_241)))"
" s_244))"
"((spec119_243)"
"(let-values(((s_245)"
"(cdr"
" s_241)))"
"(let-values(((s_246)"
"(if(syntax?$1"
" s_245)"
"(syntax-e$1"
" s_245)"
" s_245)))"
"(let-values(((flat-s_247)"
"(to-syntax-list.1"
" s_246)))"
"(if(not"
" flat-s_247)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_238))"
"(let-values()"
" flat-s_247)))))))"
"(values"
" for-syntax118_242"
" spec119_243))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_238)))))"
"(values"
" #t"
" for-syntax116_239"
" spec117_240))))))"
"(loop_159"
" spec117_226"
"(let-values()"
"(if or-part_248"
" or-part_248"
" req_172))"
"(phase+"
" phase-shift_162"
" 1)"
" just-meta_163"
" adjust_164"
" #f"
" just-meta-ok?_166"
" 'raw))))"
"(if(equal?"
" tmp_187"
" 'for-template)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_176"
" 'raw"
" for-meta-ok?_165)"
"(values))))"
"(let-values(((ok?_249"
" for-template120_250"
" spec121_251)"
"(let-values()"
"(let-values()"
"(let-values(((for-template120_264"
" spec121_265)"
"(let-values(((s_266)"
"(if(syntax?$1"
" s_262)"
"(syntax-e$1"
" s_262)"
" s_262)))"
"(if(pair?"
" s_266)"
"(let-values(((for-template122_267)"
"(let-values(((s_269)"
"(car"
" s_266)))"
" s_269))"
"((spec123_268)"
"(let-values(((s_270)"
"(cdr"
" s_266)))"
"(let-values(((s_271)"
"(if(syntax?$1"
" s_270)"
"(syntax-e$1"
" s_270)"
" s_270)))"
"(let-values(((flat-s_272)"
"(to-syntax-list.1"
" s_271)))"
"(if(not"
" flat-s_272)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_263))"
"(let-values()"
" flat-s_272)))))))"
"(values"
" for-template122_267"
" spec123_268))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                         \"bad syntax\""
" orig-s_263)))))"
"(values"
" #t"
" for-template120_264"
" spec121_265))))))"
"(loop_159"
" spec121_251"
"(let-values()"
"(if or-part_273"
" or-part_273"
" req_172))"
"(phase+"
" phase-shift_162"
" -1)"
" just-meta_163"
" adjust_164"
" #f"
" just-meta-ok?_166"
" 'raw))))"
"(if(equal?"
" tmp_187"
" 'for-label)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_176"
" 'raw"
" for-meta-ok?_165)"
"(values))))"
"(let-values(((ok?_274"
" for-label124_275"
" spec125_276)"
"(let-values()"
"(let-values()"
"(let-values(((for-label124_289"
" spec125_290)"
"(let-values(((s_291)"
"(if(syntax?$1"
" s_287)"
"(syntax-e$1"
" s_287)"
" s_287)))"
"(if(pair?"
" s_291)"
"(let-values(((for-label126_292)"
"(let-values(((s_294)"
"(car"
" s_291)))"
" s_294))"
"((spec127_293)"
"(let-values(((s_295)"
"(cdr"
" s_291)))"
"(let-values(((s_296)"
"(if(syntax?$1"
" s_295)"
"(syntax-e$1"
" s_295)"
" s_295)))"
"(let-values(((flat-s_297)"
"(to-syntax-list.1"
" s_296)))"
"(if(not"
" flat-s_297)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_288))"
"(let-values()"
" flat-s_297)))))))"
"(values"
" for-label126_292"
" spec127_293))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                           \"bad syntax\""
" orig-s_288)))))"
"(values"
" #t"
" for-label124_289"
" spec125_290))))))"
"(loop_159"
" spec125_276"
"(let-values()"
"(if or-part_298"
" or-part_298"
" req_172))"
"(phase+"
" phase-shift_162"
" #f)"
" just-meta_163"
" adjust_164"
" #f"
" just-meta-ok?_166"
" 'raw))))"
"(if(equal?"
" tmp_187"
" 'just-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_176"
" 'raw"
" just-meta-ok?_166)"
"(values))))"
"(let-values(((ok?_299"
" just-meta128_300"
" phase-level129_301"
" spec130_302)"
"(let-values()"
"(let-values()"
"(let-values(((just-meta128_318"
" phase-level129_319"
" spec130_320)"
"(let-values(((s_321)"
"(if(syntax?$1"
" s_316)"
"(syntax-e$1"
" s_316)"
" s_316)))"
"(if(pair?"
" s_321)"
"(let-values(((just-meta131_322)"
"(let-values(((s_325)"
"(car"
" s_321)))"
" s_325))"
"((phase-level132_323"
" spec133_324)"
"(let-values(((s_326)"
"(cdr"
" s_321)))"
"(let-values(((s_327)"
"(if(syntax?$1"
" s_326)"
"(syntax-e$1"
" s_326)"
" s_326)))"
"(if(pair?"
" s_327)"
"(let-values(((phase-level134_328)"
"(let-values(((s_330)"
"(car"
" s_327)))"
" s_330))"
"((spec135_329)"
"(let-values(((s_331)"
"(cdr"
" s_327)))"
"(let-values(((s_332)"
"(if(syntax?$1"
" s_331)"
"(syntax-e$1"
" s_331)"
" s_331)))"
"(let-values(((flat-s_333)"
"(to-syntax-list.1"
" s_332)))"
"(if(not"
" flat-s_333)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_317))"
"(let-values()"
" flat-s_333)))))))"
"(values"
" phase-level134_328"
" spec135_329))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_317))))))"
"(values"
" just-meta131_322"
" phase-level132_323"
" spec133_324))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_317)))))"
"(values"
" #t"
" just-meta128_318"
" phase-level129_319"
" spec130_320))))))"
"(let-values(((p_315)"
"(syntax-e$1"
" phase-level129_301)))"
"(begin"
"(if(phase?"
" p_315)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                   \"bad phase\""
" orig-s_146"
" req_172)))"
"(loop_159"
" spec130_302"
"(let-values()"
"(if or-part_334"
" or-part_334"
" req_172))"
" phase-shift_162"
" p_315"
" adjust_164"
" for-meta-ok?_165"
" #f"
" 'raw))))))"
"(if(equal?"
" tmp_187"
" 'only)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_176"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_335"
" only136_336"
" spec137_337"
" id138_338)"
"(let-values()"
"(let-values()"
"(let-values(((only136_353"
" spec137_354"
" id138_355)"
"(let-values(((s_356)"
"(if(syntax?$1"
" s_351)"
"(syntax-e$1"
" s_351)"
" s_351)))"
"(if(pair?"
" s_356)"
"(let-values(((only139_357)"
"(let-values(((s_360)"
"(car"
" s_356)))"
" s_360))"
"((spec140_358"
" id141_359)"
"(let-values(((s_361)"
"(cdr"
" s_356)))"
"(let-values(((s_362)"
"(if(syntax?$1"
" s_361)"
"(syntax-e$1"
" s_361)"
" s_361)))"
"(if(pair?"
" s_362)"
"(let-values(((spec142_363)"
"(let-values(((s_365)"
"(car"
" s_362)))"
" s_365))"
"((id143_364)"
"(let-values(((s_366)"
"(cdr"
" s_362)))"
"(let-values(((s_367)"
"(if(syntax?$1"
" s_366)"
"(syntax-e$1"
" s_366)"
" s_366)))"
"(let-values(((flat-s_368)"
"(to-syntax-list.1"
" s_367)))"
"(if(not"
" flat-s_368)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_352))"
"(let-values()"
"(let-values(((id_369)"
"(let-values()"
"(begin"
"(if(list?"
" lst_370)"
"(void)"
"(let-values()"
"(in-list"
" lst_370)))"
"((letrec-values(((for-loop_371)"
"(lambda(id_372"
" lst_373)"
"(if(pair?"
" lst_373)"
"(let-values(((s_374)"
"(unsafe-car"
" lst_373)))"
"(let-values(((id_375)"
"(let-values()"
"(let-values(((id_377)"
"(let-values()"
"(let-values(((id144_378)"
"(let-values()"
"(if(let-values(((or-part_379)"
"(if(syntax?$1"
" s_374)"
"(symbol?"
"(syntax-e$1"
" s_374))"
" #f)))"
"(if or-part_379"
" or-part_379"
"(symbol?"
" s_374)))"
" s_374"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_352"
" s_374)))))"
"(cons"
" id144_378"
" id_376)))))"
"(values"
" id_377)))))"
"(for-loop_371"
" id_375"
"(unsafe-cdr"
" lst_373))))"
" id_372))))"
" for-loop_371)"
" null"
" lst_370)))))"
"(alt-reverse"
" id_369)))))))))"
"(values"
" spec142_363"
" id143_364))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_352))))))"
"(values"
" only139_357"
" spec140_358"
" id141_359))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_352)))))"
"(values"
" #t"
" only136_353"
" spec137_354"
" id138_355))))))"
"(loop_159"
"(list"
" spec137_337)"
"(let-values()"
"(if or-part_380"
" or-part_380"
" req_172))"
" phase-shift_162"
" just-meta_163"
"(adjust-only1.1"
"(ids->sym-set"
" id138_338))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_187"
" 'prefix)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_176"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_381"
" prefix145_382"
" id:prefix146_383"
" spec147_384)"
"(let-values()"
"(let-values()"
"(let-values(((prefix145_399"
" id:prefix146_400"
" spec147_401)"
"(let-values(((s_402)"
"(if(syntax?$1"
" s_397)"
"(syntax-e$1"
" s_397)"
" s_397)))"
"(if(pair?"
" s_402)"
"(let-values(((prefix148_403)"
"(let-values(((s_406)"
"(car"
" s_402)))"
" s_406))"
"((id:prefix149_404"
" spec150_405)"
"(let-values(((s_407)"
"(cdr"
" s_402)))"
"(let-values(((s_408)"
"(if(syntax?$1"
" s_407)"
"(syntax-e$1"
" s_407)"
" s_407)))"
"(if(pair?"
" s_408)"
"(let-values(((id:prefix151_409)"
"(let-values(((s_411)"
"(car"
" s_408)))"
"(if(let-values(((or-part_412)"
"(if(syntax?$1"
" s_411)"
"(symbol?"
"(syntax-e$1"
" s_411))"
" #f)))"
"(if or-part_412"
" or-part_412"
"(symbol?"
" s_411)))"
" s_411"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_398"
" s_411))))"
"((spec152_410)"
"(let-values(((s_413)"
"(cdr"
" s_408)))"
"(let-values(((s_414)"
"(if(syntax?$1"
" s_413)"
"(syntax-e$1"
" s_413)"
" s_413)))"
"(if(pair?"
" s_414)"
"(let-values(((spec153_415)"
"(let-values(((s_416)"
"(car"
" s_414)))"
" s_416))"
"(()"
"(let-values(((s_417)"
"(cdr"
" s_414)))"
"(let-values(((s_418)"
"(if(syntax?$1"
" s_417)"
"(syntax-e$1"
" s_417)"
" s_417)))"
"(if(null?"
" s_418)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_398))))))"
"(values"
" spec153_415))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_398))))))"
"(values"
" id:prefix151_409"
" spec152_410))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_398))))))"
"(values"
" prefix148_403"
" id:prefix149_404"
" spec150_405))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_398)))))"
"(values"
" #t"
" prefix145_399"
" id:prefix146_400"
" spec147_401))))))"
"(loop_159"
"(list"
" spec147_384)"
"(let-values()"
"(if or-part_419"
" or-part_419"
" req_172))"
" phase-shift_162"
" just-meta_163"
"(adjust-prefix2.1"
"(syntax-e$1"
" id:prefix146_383))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_187"
" 'all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_176"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_420"
" all-except154_421"
" spec155_422"
" id156_423)"
"(let-values()"
"(let-values()"
"(let-values(((all-except154_438"
" spec155_439"
" id156_440)"
"(let-values(((s_441)"
"(if(syntax?$1"
" s_436)"
"(syntax-e$1"
" s_436)"
" s_436)))"
"(if(pair?"
" s_441)"
"(let-values(((all-except157_442)"
"(let-values(((s_445)"
"(car"
" s_441)))"
" s_445))"
"((spec158_443"
" id159_444)"
"(let-values(((s_446)"
"(cdr"
" s_441)))"
"(let-values(((s_447)"
"(if(syntax?$1"
" s_446)"
"(syntax-e$1"
" s_446)"
" s_446)))"
"(if(pair?"
" s_447)"
"(let-values(((spec160_448)"
"(let-values(((s_450)"
"(car"
" s_447)))"
" s_450))"
"((id161_449)"
"(let-values(((s_451)"
"(cdr"
" s_447)))"
"(let-values(((s_452)"
"(if(syntax?$1"
" s_451)"
"(syntax-e$1"
" s_451)"
" s_451)))"
"(let-values(((flat-s_453)"
"(to-syntax-list.1"
" s_452)))"
"(if(not"
" flat-s_453)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_437))"
"(let-values()"
"(let-values(((id_454)"
"(let-values()"
"(begin"
"(if(list?"
" lst_455)"
"(void)"
"(let-values()"
"(in-list"
" lst_455)))"
"((letrec-values(((for-loop_456)"
"(lambda(id_457"
" lst_458)"
"(if(pair?"
" lst_458)"
"(let-values(((s_459)"
"(unsafe-car"
" lst_458)))"
"(let-values(((id_460)"
"(let-values()"
"(let-values(((id_462)"
"(let-values()"
"(let-values(((id162_463)"
"(let-values()"
"(if(let-values(((or-part_464)"
"(if(syntax?$1"
" s_459)"
"(symbol?"
"(syntax-e$1"
" s_459))"
" #f)))"
"(if or-part_464"
" or-part_464"
"(symbol?"
" s_459)))"
" s_459"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_437"
" s_459)))))"
"(cons"
" id162_463"
" id_461)))))"
"(values"
" id_462)))))"
"(for-loop_456"
" id_460"
"(unsafe-cdr"
" lst_458))))"
" id_457))))"
" for-loop_456)"
" null"
" lst_455)))))"
"(alt-reverse"
" id_454)))))))))"
"(values"
" spec160_448"
" id161_449))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_437))))))"
"(values"
" all-except157_442"
" spec158_443"
" id159_444))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                   \"bad syntax\""
" orig-s_437)))))"
"(values"
" #t"
" all-except154_438"
" spec155_439"
" id156_440))))))"
"(loop_159"
"(list"
" spec155_422)"
"(let-values()"
"(if or-part_465"
" or-part_465"
" req_172))"
" phase-shift_162"
" just-meta_163"
"(adjust-all-except3.1"
" '||"
"(ids->sym-set"
" id156_423))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_187"
" 'prefix-all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_176"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_466"
" prefix-all-except163_467"
" id:prefix164_468"
" spec165_469"
" id166_470)"
"(let-values()"
"(let-values()"
"(let-values(((prefix-all-except163_487"
" id:prefix164_488"
" spec165_489"
" id166_490)"
"(let-values(((s_491)"
"(if(syntax?$1"
" s_485)"
"(syntax-e$1"
" s_485)"
" s_485)))"
"(if(pair?"
" s_491)"
"(let-values(((prefix-all-except167_492)"
"(let-values(((s_496)"
"(car"
" s_491)))"
" s_496))"
"((id:prefix168_493"
" spec169_494"
" id170_495)"
"(let-values(((s_497)"
"(cdr"
" s_491)))"
"(let-values(((s_498)"
"(if(syntax?$1"
" s_497)"
"(syntax-e$1"
" s_497)"
" s_497)))"
"(if(pair?"
" s_498)"
"(let-values(((id:prefix171_499)"
"(let-values(((s_502)"
"(car"
" s_498)))"
"(if(let-values(((or-part_503)"
"(if(syntax?$1"
" s_502)"
"(symbol?"
"(syntax-e$1"
" s_502))"
" #f)))"
"(if or-part_503"
" or-part_503"
"(symbol?"
" s_502)))"
" s_502"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_486"
" s_502))))"
"((spec172_500"
" id173_501)"
"(let-values(((s_504)"
"(cdr"
" s_498)))"
"(let-values(((s_505)"
"(if(syntax?$1"
" s_504)"
"(syntax-e$1"
" s_504)"
" s_504)))"
"(if(pair?"
" s_505)"
"(let-values(((spec174_506)"
"(let-values(((s_508)"
"(car"
" s_505)))"
" s_508))"
"((id175_507)"
"(let-values(((s_509)"
"(cdr"
" s_505)))"
"(let-values(((s_510)"
"(if(syntax?$1"
" s_509)"
"(syntax-e$1"
" s_509)"
" s_509)))"
"(let-values(((flat-s_511)"
"(to-syntax-list.1"
" s_510)))"
"(if(not"
" flat-s_511)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_486))"
"(let-values()"
"(let-values(((id_512)"
"(let-values()"
"(begin"
"(if(list?"
" lst_513)"
"(void)"
"(let-values()"
"(in-list"
" lst_513)))"
"((letrec-values(((for-loop_514)"
"(lambda(id_515"
" lst_516)"
"(if(pair?"
" lst_516)"
"(let-values(((s_517)"
"(unsafe-car"
" lst_516)))"
"(let-values(((id_518)"
"(let-values()"
"(let-values(((id_520)"
"(let-values()"
"(let-values(((id176_521)"
"(let-values()"
"(if(let-values(((or-part_522)"
"(if(syntax?$1"
" s_517)"
"(symbol?"
"(syntax-e$1"
" s_517))"
" #f)))"
"(if or-part_522"
" or-part_522"
"(symbol?"
" s_517)))"
" s_517"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_486"
" s_517)))))"
"(cons"
" id176_521"
" id_519)))))"
"(values"
" id_520)))))"
"(for-loop_514"
" id_518"
"(unsafe-cdr"
" lst_516))))"
" id_515))))"
" for-loop_514)"
" null"
" lst_513)))))"
"(alt-reverse"
" id_512)))))))))"
"(values"
" spec174_506"
" id175_507))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_486))))))"
"(values"
" id:prefix171_499"
" spec172_500"
" id173_501))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_486))))))"
"(values"
" prefix-all-except167_492"
" id:prefix168_493"
" spec169_494"
" id170_495))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                     \"bad syntax\""
" orig-s_486)))))"
"(values"
" #t"
" prefix-all-except163_487"
" id:prefix164_488"
" spec165_489"
" id166_490))))))"
"(loop_159"
"(list"
" spec165_469)"
"(let-values()"
"(if or-part_523"
" or-part_523"
" req_172))"
" phase-shift_162"
" just-meta_163"
"(adjust-all-except3.1"
"(syntax-e$1"
" id:prefix164_468)"
"(ids->sym-set"
" id166_470))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_187"
" 'rename)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_176"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_524"
" rename177_525"
" spec178_526"
" id:to179_527"
" id:from180_528)"
"(let-values()"
"(let-values()"
"(let-values(((rename177_545"
" spec178_546"
" id:to179_547"
" id:from180_548)"
"(let-values(((s_549)"
"(if(syntax?$1"
" s_543)"
"(syntax-e$1"
" s_543)"
" s_543)))"
"(if(pair?"
" s_549)"
"(let-values(((rename181_550)"
"(let-values(((s_554)"
"(car"
" s_549)))"
" s_554))"
"((spec182_551"
" id:to183_552"
" id:from184_553)"
"(let-values(((s_555)"
"(cdr"
" s_549)))"
"(let-values(((s_556)"
"(if(syntax?$1"
" s_555)"
"(syntax-e$1"
" s_555)"
" s_555)))"
"(if(pair?"
" s_556)"
"(let-values(((spec185_557)"
"(let-values(((s_560)"
"(car"
" s_556)))"
" s_560))"
"((id:to186_558"
" id:from187_559)"
"(let-values(((s_561)"
"(cdr"
" s_556)))"
"(let-values(((s_562)"
"(if(syntax?$1"
" s_561)"
"(syntax-e$1"
" s_561)"
" s_561)))"
"(if(pair?"
" s_562)"
"(let-values(((id:to188_563)"
"(let-values(((s_565)"
"(car"
" s_562)))"
"(if(let-values(((or-part_566)"
"(if(syntax?$1"
" s_565)"
"(symbol?"
"(syntax-e$1"
" s_565))"
" #f)))"
"(if or-part_566"
" or-part_566"
"(symbol?"
" s_565)))"
" s_565"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_544"
" s_565))))"
"((id:from189_564)"
"(let-values(((s_567)"
"(cdr"
" s_562)))"
"(let-values(((s_568)"
"(if(syntax?$1"
" s_567)"
"(syntax-e$1"
" s_567)"
" s_567)))"
"(if(pair?"
" s_568)"
"(let-values(((id:from190_569)"
"(let-values(((s_570)"
"(car"
" s_568)))"
"(if(let-values(((or-part_571)"
"(if(syntax?$1"
" s_570)"
"(symbol?"
"(syntax-e$1"
" s_570))"
" #f)))"
"(if or-part_571"
" or-part_571"
"(symbol?"
" s_570)))"
" s_570"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_544"
" s_570))))"
"(()"
"(let-values(((s_572)"
"(cdr"
" s_568)))"
"(let-values(((s_573)"
"(if(syntax?$1"
" s_572)"
"(syntax-e$1"
" s_572)"
" s_572)))"
"(if(null?"
" s_573)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_544))))))"
"(values"
" id:from190_569))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_544))))))"
"(values"
" id:to188_563"
" id:from189_564))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_544))))))"
"(values"
" spec185_557"
" id:to186_558"
" id:from187_559))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_544))))))"
"(values"
" rename181_550"
" spec182_551"
" id:to183_552"
" id:from184_553))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                       \"bad syntax\""
" orig-s_544)))))"
"(values"
" #t"
" rename177_545"
" spec178_546"
" id:to179_547"
" id:from180_548))))))"
"(loop_159"
"(list"
" spec178_526)"
"(let-values()"
"(if or-part_574"
" or-part_574"
" req_172))"
" phase-shift_162"
" just-meta_163"
"(adjust-rename4.1"
" id:to179_527"
"(syntax-e$1"
" id:from180_528))"
" #f"
" #f"
" 'path))))"
"(let-values()"
"(let-values(((maybe-mp_575)"
"(syntax->datum$1"
" req_172)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_578)"
"(1/module-path?"
" maybe-mp_575)))"
"(if or-part_578"
" or-part_578"
"(1/resolved-module-path?"
" maybe-mp_575)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad require spec\""
" orig-s_146"
" req_172)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values()"
"(if or-part_579"
" or-part_579"
"(not"
"(eq?"
" just-meta_163"
" 'all))))"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" requires+provides_149"
" #f))"
"(void))"
"(values))))"
"(let-values(((mp_576)"
"(if(1/resolved-module-path?"
" maybe-mp_575)"
"(resolved-module-path->module-path"
" maybe-mp_575)"
" maybe-mp_575)))"
"(let-values(((mpi_577)"
"(let-values()"
"(module-path->mpi5.1"
" declared-submodule-names209_583"
" #t"
" mp207_581"
" self208_582))))"
"(let-values(((...r/expand/require.rkt:168:9_584)"
" perform-require!74.1)"
"((temp194_588)"
"(let-values()"
"(if or-part_601"
" or-part_601"
" top-req_161))))"
"(perform-require!72.1"
" adjust199_593"
" #t"
" #f"
" #f"
" copy-variable-as-constant?204_598"
" #t"
" copy-variable-phase-level203_597"
" #t"
" #f"
" #f"
" just-meta198_592"
" #t"
" phase-shift196_590"
" requires+provides200_594"
" #t"
" run-phase197_591"
" run?201_595"
" #t"
" skip-variable-phase-level205_599"
" #t"
" visit?202_596"
" #t"
" who206_600"
" mpi191_585"
" req192_586"
" self193_587"
" temp194_588"
" m-ns195_589)))))))))))))))))))))))))"
"(values"
" result_175)))))"
"(if(not"
"((lambda x_602"
"(not result_173))"
" req_172))"
"(for-loop_169"
" result_173"
"(unsafe-cdr lst_171))"
" result_173)))"
" result_170))))"
" for-loop_169)"
" #t"
" lst_168))))))"
" loop_159)"
" reqs_145"
" #f"
" phase-shift_148"
" 'all"
" #f"
" #t"
" #t"
" 'raw))))))))))))))))))"
"(define-values"
"(ids->sym-set)"
"(lambda(ids_652)"
"(let-values()"
"(begin"
"(if(list? lst_653)(void)(let-values()(in-list lst_653)))"
"((letrec-values(((for-loop_654)"
"(lambda(table_655 lst_656)"
"(if(pair? lst_656)"
"(let-values(((id_657)(unsafe-car lst_656)))"
"(let-values(((table_658)"
"(let-values()"
"(let-values(((table_660)"
"(let-values()"
"(let-values(((key_661 val_662)"
"(let-values()"
"(values"
"(let-values()(syntax-e$1 id_657))"
" #t))))"
"(hash-set table_659 key_661 val_662)))))"
"(values table_660)))))"
"(for-loop_654 table_658(unsafe-cdr lst_656))))"
" table_655))))"
" for-loop_654)"
" '#hash()"
" lst_653)))))"
"(define-values"
"(perform-initial-require!38.1)"
"(lambda(who31_675 mod-path33_676 self34_677 in-stx35_678 m-ns36_679 requires+provides37_680)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((...r/expand/require.rkt:192:2_687) perform-require!74.1)"
"((temp210_688)(let-values()(module-path->mpi5.1 #f #f mod-path221_699 self222_700)))"
"((temp211_689) #f)"
"((temp215_693) 0)"
"((temp216_694) 0)"
"((temp218_696) #t)"
"((temp219_697) #t))"
"(perform-require!72.1"
" #f"
" #f"
" temp218_696"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp219_697"
" #t"
" #f"
" #f"
" temp215_693"
" requires+provides217_695"
" #t"
" temp216_694"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" who220_698"
" temp210_688"
" temp211_689"
" self212_690"
" in-stx213_691"
" m-ns214_692)))))))))))"
"(define-values"
"(lifted/11.1$3 lifted/12.1$3 lifted/13.1$3 lifted/14.1$3 lifted/15.1$3)"
"(make-struct-type"
" 'perform-require!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'perform-require!"
"(case-lambda"
"((self_719 mpi_720 orig-s_721 self_722 in-stx_723 m-ns_724)"
"(apply missing-kw self_719 mpi_720 orig-s_721 self_722 in-stx_723 m-ns_724 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_725 mpi_726 orig-s_727 self_728 in-stx_729 m-ns_730)"
"(apply missing-kw self_725 mpi_726 orig-s_727 self_728 in-stx_729 m-ns_730 null)))))"
"(define-values"
"(perform-require!72.1)"
"(lambda(adjust44_731"
" adjust57_732"
" can-be-shadowed?48_733"
" can-be-shadowed?61_734"
" copy-variable-as-constant?51_735"
" copy-variable-as-constant?64_736"
" copy-variable-phase-level50_737"
" copy-variable-phase-level63_738"
" initial-require?49_739"
" initial-require?62_740"
" just-meta43_741"
" just-meta56_742"
" phase-shift41_743"
" requires+provides45_744"
" requires+provides58_745"
" run-phase42_746"
" run?47_747"
" run?60_748"
" skip-variable-phase-level52_749"
" skip-variable-phase-level65_750"
" visit?46_751"
" visit?59_752"
" who53_753"
" mpi67_754"
" orig-s68_755"
" self69_756"
" in-stx70_757"
" m-ns71_758)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((just-meta_766)(if just-meta56_742 just-meta43_741 'all)))"
"(let-values(((adjust_767)(if adjust57_732 adjust44_731 #f)))"
"(let-values(((requires+provides_768)(if requires+provides58_745 requires+provides45_744 #f)))"
"(let-values(((visit?_769)(if visit?59_752 visit?46_751 #t)))"
"(let-values(((run?_770)(if run?60_748 run?47_747 #f)))"
"(let-values(((can-be-shadowed?_771)(if can-be-shadowed?61_734 can-be-shadowed?48_733 #f)))"
"(let-values(((initial-require?_772)"
"(if initial-require?62_740 initial-require?49_739 #f)))"
"(let-values(((copy-variable-phase-level_773)"
"(if copy-variable-phase-level63_738 copy-variable-phase-level50_737 #f)))"
"(let-values(((copy-variable-as-constant?_774)"
"(if copy-variable-as-constant?64_736"
" copy-variable-as-constant?51_735"
" #f)))"
"(let-values(((skip-variable-phase-level_775)"
"(if skip-variable-phase-level65_750"
" skip-variable-phase-level52_749"
" #f)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((module-name_777)(1/module-path-index-resolve mpi_759 #t)))"
"(let-values(((bind-in-stx_778)"
"(if(adjust-rename? adjust_767)"
"(adjust-rename-to-id adjust_767)"
" in-stx_762)))"
"(let-values(((done-syms_779)(if adjust_767(make-hash) #f)))"
"(let-values(((m_780)(namespace->module m-ns_763 module-name_777)))"
"(let-values((()"
"(begin"
"(if m_780"
"(void)"
"(let-values()"
"(raise-unknown-module-error"
" 'require"
" module-name_777)))"
"(values))))"
"(let-values(((interned-mpi_781)"
"(if requires+provides_768"
"(add-required-module!"
" requires+provides_768"
" mpi_759"
" phase-shift_764"
"(module-cross-phase-persistent? m_780))"
" mpi_759)))"
"(let-values((()"
"(begin"
"(if visit?_769"
"(let-values()"
"(let-values()"
"(namespace-module-visit!102.1"
" run-phase239_791"
" #t"
" m-ns236_788"
" interned-mpi237_789"
" phase-shift238_790)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if run?_770"
"(let-values()"
"(let-values()"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" run-phase243_796"
" #t"
" #f"
" #f"
" #f"
" #f"
" m-ns240_793"
" interned-mpi241_794"
" phase-shift242_795)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(not"
"(let-values()"
"(if or-part_797"
" or-part_797"
" run?_770)))"
"(let-values()"
"(let-values()"
"(namespace-module-make-available!110.1"
" run-phase247_802"
" #t"
" m-ns244_799"
" interned-mpi245_800"
" phase-shift246_801)))"
"(void))"
"(values))))"
"(let-values(((can-bulk-bind?_782)"
"(if(let-values(((or-part_803)"
"(not adjust_767)))"
"(if or-part_803"
" or-part_803"
"(let-values(((or-part_804)"
"(adjust-prefix?"
" adjust_767)))"
"(if or-part_804"
" or-part_804"
"(adjust-all-except?"
" adjust_767)))))"
"(not skip-variable-phase-level_775)"
" #f)))"
"(let-values(((bulk-prefix_783)"
"(if(adjust-prefix? adjust_767)"
"(let-values()"
"(adjust-prefix-sym adjust_767))"
"(if(adjust-all-except? adjust_767)"
"(let-values()"
"(adjust-all-except-prefix-sym"
" adjust_767))"
"(let-values() #f)))))"
"(let-values(((bulk-excepts_784)"
"(if(adjust-all-except? adjust_767)"
"(let-values()"
"(adjust-all-except-syms adjust_767))"
"(let-values() '#hasheq()))))"
"(let-values(((update-nominals-box_785)"
"(if can-bulk-bind?_782"
"(box null)"
" #f)))"
"(let-values((()"
"(begin"
"(let-values(((...r/expand/require.rkt:252:3_805)"
" bind-all-provides!98.1)"
"((temp229_812)"
"(if(adjust-only?"
" adjust_767)"
"(let-values()"
"(set->list"
"(adjust-only-syms"
" adjust_767)))"
"(if(adjust-rename?"
" adjust_767)"
"(let-values()"
"(list"
"(adjust-rename-from-sym"
" adjust_767)))"
"(let-values()"
" #f))))"
"((temp234_817)"
"(if requires+provides_768"
"(if can-bulk-bind?_782"
"(lambda(provides_819"
" provide-phase-level_820)"
"(let-values(((temp250_824)"
"(module-self"
" m_780))"
"((temp257_831)"
"(if(positive?"
"(hash-count"
" bulk-excepts_784))"
" done-syms_779"
" #f))"
"((temp259_833)"
"(not"
" initial-require?_772)))"
"(add-bulk-required-ids!53.1"
" update-nominals-box261_835"
" can-be-shadowed?258_832"
" temp259_833"
" bulk-excepts256_830"
" orig-s260_834"
" bulk-prefix255_829"
" temp257_831"
" who262_836"
" requires+provides248_822"
" bind-in-stx249_823"
" temp250_824"
" mpi251_825"
" phase-shift252_826"
" provides253_827"
" provide-phase-level254_828)))"
" #f)"
" #f))"
"((temp235_818)"
"(if(let-values(((or-part_837)"
"(not"
" can-bulk-bind?_782)))"
"(if or-part_837"
" or-part_837"
" copy-variable-phase-level_773))"
"(lambda(binding_838"
" as-transformer?_839)"
"(let-values(((sym_840)"
"(module-binding-nominal-sym"
" binding_838)))"
"(let-values(((provide-phase_841)"
"(module-binding-nominal-phase"
" binding_838)))"
"(let-values(((adjusted-sym_842)"
"(if(if skip-variable-phase-level_775"
"(if(not"
" as-transformer?_839)"
"(equal?"
" provide-phase_841"
" skip-variable-phase-level_775)"
" #f)"
" #f)"
"(let-values()"
" #f)"
"(if(not"
" adjust_767)"
"(let-values()"
" sym_840)"
"(if(adjust-only?"
" adjust_767)"
"(let-values()"
"(if(set-member?"
"(adjust-only-syms"
" adjust_767)"
" sym_840)"
"(if(hash-set!"
" done-syms_779"
" sym_840"
" #t)"
" sym_840"
" #f)"
" #f))"
"(if(adjust-prefix?"
" adjust_767)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                                      \"~a~a\""
"(adjust-prefix-sym"
" adjust_767)"
" sym_840)))"
"(if(adjust-all-except?"
" adjust_767)"
"(let-values()"
"(if(not"
"(if(set-member?"
"(adjust-all-except-syms"
" adjust_767)"
" sym_840)"
"(hash-set!"
" done-syms_779"
" sym_840"
" #t)"
" #f))"
"(string->symbol"
"(format"
"                                                                                                                                          \"~a~a\""
"(adjust-all-except-prefix-sym"
" adjust_767)"
" sym_840))"
" #f))"
"(if(adjust-rename?"
" adjust_767)"
"(let-values()"
"(if(eq?"
" sym_840"
"(adjust-rename-from-sym"
" adjust_767))"
"(if(hash-set!"
" done-syms_779"
" sym_840"
" #t)"
"(adjust-rename-to-id"
" adjust_767)"
" #f)"
" #f))"
"(void)))))))))"
"(begin"
"(if(if adjusted-sym_842"
" requires+provides_768"
" #f)"
"(let-values()"
"(let-values(((s_843)"
"(datum->syntax$1"
" bind-in-stx_778"
" adjusted-sym_842)))"
"(let-values(((bind-phase_844)"
"(phase+"
" phase-shift_764"
" provide-phase_841)))"
"(begin"
"(if initial-require?_772"
"(void)"
"(let-values()"
"(let-values(((temp269_846)"
" #t)"
"((temp275_852)"
" #t))"
"(check-not-defined87.1"
" #f"
" #f"
" temp269_846"
" #t"
" orig-s274_851"
" temp275_852"
" #t"
" binding273_850"
" #t"
" who276_853"
" requires+provides270_847"
" s271_848"
" bind-phase272_849))))"
"(let-values()"
"(add-defined-or-required-id!13.1"
" as-transformer?268_860"
" can-be-shadowed?267_859"
" #t"
" requires+provides263_855"
" s264_856"
" bind-phase265_857"
" binding266_858))))))"
"(void))"
"(if(if adjusted-sym_842"
"(if copy-variable-phase-level_773"
"(if(not"
" as-transformer?_839)"
"(equal?"
" provide-phase_841"
" copy-variable-phase-level_773)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(copy-namespace-value"
" m-ns_763"
" adjusted-sym_842"
" binding_838"
" copy-variable-phase-level_773"
" phase-shift_764"
" copy-variable-as-constant?_774))"
"(void))"
" adjusted-sym_842)))))"
" #f)))"
"(bind-all-provides!96.1"
" temp234_817"
" bulk-excepts233_816"
" bulk-prefix232_815"
" can-bulk-bind?231_814"
" temp235_818"
" orig-s228_811"
" just-meta230_813"
" temp229_812"
" m223_806"
" bind-in-stx224_807"
" phase-shift225_808"
" m-ns226_809"
" interned-mpi227_810))"
"(values))))"
"(let-values((()"
"(begin"
"(if update-nominals-box_785"
"(let-values()"
"(let-values(((lst_861)"
"(unbox"
" update-nominals-box_785)))"
"(begin"
"(if(list? lst_861)"
"(void)"
"(let-values()"
"(in-list lst_861)))"
"((letrec-values(((for-loop_862)"
"(lambda(fold-var_863"
" lst_864)"
"(if(pair?"
" lst_864)"
"(let-values(((update!_865)"
"(unsafe-car"
" lst_864)))"
"(let-values(((fold-var_866)"
"(let-values()"
"(let-values(((fold-var_868)"
"(let-values()"
"(begin"
"(let-values()"
"(update!_865))"
"(void)))))"
"(values"
" fold-var_868)))))"
"(for-loop_862"
" fold-var_866"
"(unsafe-cdr"
" lst_864))))"
" fold-var_863))))"
" for-loop_862)"
"(void)"
" lst_861))))"
"(void))"
"(values))))"
"(let-values(((need-syms_786)"
"(if(adjust-only? adjust_767)"
"(let-values()"
"(adjust-only-syms"
" adjust_767))"
"(if(adjust-all-except?"
" adjust_767)"
"(let-values()"
"(adjust-all-except-syms"
" adjust_767))"
"(if(adjust-rename?"
" adjust_767)"
"(let-values()"
"(set"
"(adjust-rename-from-sym"
" adjust_767)))"
"(let-values() #f))))))"
"(if(if need-syms_786"
"(not"
"(="
"(set-count need-syms_786)"
"(hash-count done-syms_779)))"
" #f)"
"(let-values()"
"(let-values()"
"(begin"
"(if((lambda(ht_870)"
"(if(hash? ht_870)"
"(immutable? ht_870)"
" #f))"
" ht_869)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_869)))"
"((letrec-values(((for-loop_871)"
"(lambda(fold-var_872"
" i_873)"
"(if i_873"
"(let-values(((sym_874)"
"(unsafe-immutable-hash-iterate-key"
" ht_869"
" i_873)))"
"(let-values(((fold-var_875)"
"(let-values()"
"(let-values(((fold-var_877)"
"(let-values()"
"(begin"
"(let-values()"
"(if(hash-ref"
" done-syms_779"
" sym_874"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" who_776"
"                                                                                                                                                     \"not in nested spec\""
" orig-s_760"
" sym_874))))"
"(void)))))"
"(values"
" fold-var_877)))))"
"(for-loop_871"
" fold-var_875"
"(unsafe-immutable-hash-iterate-next"
" ht_869"
" i_873))))"
" fold-var_872))))"
" for-loop_871)"
"(void)"
"(unsafe-immutable-hash-iterate-first"
" ht_869)))))"
"(void))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack73.1)"
"(lambda(given-kws_878 given-args_879 mpi67_880 orig-s68_881 self69_882 in-stx70_883 m-ns71_884)"
"(let-values(((adjust57_885)(if(pair? given-kws_878)(eq? '#:adjust(car given-kws_878)) #f)))"
"(let-values(((adjust44_886)(if adjust57_885(car given-args_879)(void)))"
"((given-kws_887)(if adjust57_885(cdr given-kws_878) given-kws_878))"
"((given-args_888)(if adjust57_885(cdr given-args_879) given-args_879)))"
"(let-values(((can-be-shadowed?61_889)"
"(if(pair? given-kws_887)(eq? '#:can-be-shadowed?(car given-kws_887)) #f)))"
"(let-values(((can-be-shadowed?48_890)(if can-be-shadowed?61_889(car given-args_888)(void)))"
"((given-kws_891)(if can-be-shadowed?61_889(cdr given-kws_887) given-kws_887))"
"((given-args_892)(if can-be-shadowed?61_889(cdr given-args_888) given-args_888)))"
"(let-values(((copy-variable-as-constant?64_893)"
"(if(pair? given-kws_891)(eq? '#:copy-variable-as-constant?(car given-kws_891)) #f)))"
"(let-values(((copy-variable-as-constant?51_894)"
"(if copy-variable-as-constant?64_893(car given-args_892)(void)))"
"((given-kws_895)(if copy-variable-as-constant?64_893(cdr given-kws_891) given-kws_891))"
"((given-args_896)(if copy-variable-as-constant?64_893(cdr given-args_892) given-args_892)))"
"(let-values(((copy-variable-phase-level63_897)"
"(if(pair? given-kws_895)(eq? '#:copy-variable-phase-level(car given-kws_895)) #f)))"
"(let-values(((copy-variable-phase-level50_898)"
"(if copy-variable-phase-level63_897(car given-args_896)(void)))"
"((given-kws_899)(if copy-variable-phase-level63_897(cdr given-kws_895) given-kws_895))"
"((given-args_900)"
"(if copy-variable-phase-level63_897(cdr given-args_896) given-args_896)))"
"(let-values(((initial-require?62_901)"
"(if(pair? given-kws_899)(eq? '#:initial-require?(car given-kws_899)) #f)))"
"(let-values(((initial-require?49_902)(if initial-require?62_901(car given-args_900)(void)))"
"((given-kws_903)(if initial-require?62_901(cdr given-kws_899) given-kws_899))"
"((given-args_904)(if initial-require?62_901(cdr given-args_900) given-args_900)))"
"(let-values(((just-meta56_905)"
"(if(pair? given-kws_903)(eq? '#:just-meta(car given-kws_903)) #f)))"
"(let-values(((just-meta43_906)(if just-meta56_905(car given-args_904)(void)))"
"((given-kws_907)(if just-meta56_905(cdr given-kws_903) given-kws_903))"
"((given-args_908)(if just-meta56_905(cdr given-args_904) given-args_904)))"
"(let-values(((phase-shift41_909)(car given-args_908))"
"((given-kws_910)(cdr given-kws_907))"
"((given-args_911)(cdr given-args_908)))"
"(let-values(((requires+provides58_912)"
"(if(pair? given-kws_910)"
"(eq? '#:requires+provides(car given-kws_910))"
" #f)))"
"(let-values(((requires+provides45_913)"
"(if requires+provides58_912(car given-args_911)(void)))"
"((given-kws_914)"
"(if requires+provides58_912(cdr given-kws_910) given-kws_910))"
"((given-args_915)"
"(if requires+provides58_912(cdr given-args_911) given-args_911)))"
"(let-values(((run-phase42_916)(car given-args_915))"
"((given-kws_917)(cdr given-kws_914))"
"((given-args_918)(cdr given-args_915)))"
"(let-values(((run?60_919)"
"(if(pair? given-kws_917)(eq? '#:run?(car given-kws_917)) #f)))"
"(let-values(((run?47_920)(if run?60_919(car given-args_918)(void)))"
"((given-kws_921)(if run?60_919(cdr given-kws_917) given-kws_917))"
"((given-args_922)"
"(if run?60_919(cdr given-args_918) given-args_918)))"
"(let-values(((skip-variable-phase-level65_923)"
"(if(pair? given-kws_921)"
"(eq? '#:skip-variable-phase-level(car given-kws_921))"
" #f)))"
"(let-values(((skip-variable-phase-level52_924)"
"(if skip-variable-phase-level65_923"
"(car given-args_922)"
"(void)))"
"((given-kws_925)"
"(if skip-variable-phase-level65_923"
"(cdr given-kws_921)"
" given-kws_921))"
"((given-args_926)"
"(if skip-variable-phase-level65_923"
"(cdr given-args_922)"
" given-args_922)))"
"(let-values(((visit?59_927)"
"(if(pair? given-kws_925)"
"(eq? '#:visit?(car given-kws_925))"
" #f)))"
"(let-values(((visit?46_928)"
"(if visit?59_927(car given-args_926)(void)))"
"((given-kws_929)"
"(if visit?59_927(cdr given-kws_925) given-kws_925))"
"((given-args_930)"
"(if visit?59_927(cdr given-args_926) given-args_926)))"
"(let-values(((who53_931)(car given-args_930)))"
"(perform-require!72.1"
" adjust44_886"
" adjust57_885"
" can-be-shadowed?48_890"
" can-be-shadowed?61_889"
" copy-variable-as-constant?51_894"
" copy-variable-as-constant?64_893"
" copy-variable-phase-level50_898"
" copy-variable-phase-level63_897"
" initial-require?49_902"
" initial-require?62_901"
" just-meta43_906"
" just-meta56_905"
" phase-shift41_909"
" requires+provides45_913"
" requires+provides58_912"
" run-phase42_916"
" run?47_920"
" run?60_919"
" skip-variable-phase-level52_924"
" skip-variable-phase-level65_923"
" visit?46_928"
" visit?59_927"
" who53_931"
" mpi67_880"
" orig-s68_881"
" self69_882"
" in-stx70_883"
" m-ns71_884))))))))))))))))))))))))))"
"(define-values"
"(perform-require!74.1)"
"(lifted/12.1$3"
"(lambda(given-kws_932 given-argc_933)"
"(if(= given-argc_933 7)"
"(subsets?"
" '(#:phase-shift #:run-phase #:who)"
" given-kws_932"
" '(#:adjust"
" #:can-be-shadowed?"
" #:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:initial-require?"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:skip-variable-phase-level"
" #:visit?"
" #:who))"
" #f))"
"(case-lambda"
"((given-kws_934 given-args_935 mpi_936 orig-s_937 self_938 in-stx_939 m-ns_940)"
"(unpack73.1 given-kws_934 given-args_935 mpi_936 orig-s_937 self_938 in-stx_939 m-ns_940)))"
" '(#:phase-shift #:run-phase #:who)"
" '(#:adjust"
" #:can-be-shadowed?"
" #:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:initial-require?"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:skip-variable-phase-level"
" #:visit?"
" #:who)))"
"(define-values"
"(lifted/16.1$2 lifted/17.1$2 lifted/18.1$2 lifted/19.1$2 lifted/20.1$2)"
"(make-struct-type"
" 'bind-all-provides!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'bind-all-provides!"
"(case-lambda"
"((self_941 m_942 in-stx_943 phase-shift_944 ns_945 mpi_946)"
"(apply missing-kw self_941 m_942 in-stx_943 phase-shift_944 ns_945 mpi_946 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_947 m_948 in-stx_949 phase-shift_950 ns_951 mpi_952)"
"(apply missing-kw self_947 m_948 in-stx_949 phase-shift_950 ns_951 mpi_952 null)))))"
"(define-values"
"(bind-all-provides!96.1)"
"(lambda(bulk-callback82_953"
" bulk-excepts80_954"
" bulk-prefix79_955"
" can-bulk?78_956"
" filter81_957"
" in75_958"
" just-meta77_959"
" only76_960"
" m91_961"
" in-stx92_962"
" phase-shift93_963"
" ns94_964"
" mpi95_965)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((self_979)(module-self m_966)))"
"(let-values(((ht_980)(module-provides m_966)))"
"(begin"
"(if((lambda(ht_981)(hash? ht_981)) ht_980)"
"(void)"
"(let-values()(default-in-hash ht_980)))"
"((letrec-values(((for-loop_982)"
"(lambda(fold-var_983 i_984)"
"(if i_984"
"(let-values(((provide-phase-level_985 provides_986)"
"(hash-iterate-key+value ht_980 i_984)))"
"(let-values(((fold-var_987)"
"(let-values()"
"(if(let-values(((or-part_989)"
"(eq?"
" just-meta_973"
" 'all)))"
"(if or-part_989"
" or-part_989"
"(eqv?"
" just-meta_973"
" provide-phase-level_985)))"
"(let-values()"
"(let-values(((fold-var_991)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_992)"
"(phase+"
" phase-shift_968"
" provide-phase-level_985)))"
"(begin"
"(if bulk-callback_978"
"(let-values()"
"(bulk-callback_978"
" provides_986"
" provide-phase-level_985))"
"(void))"
"(if filter_977"
"(let-values()"
"(let-values(((lst_993)"
"(let-values()"
"(if or-part_994"
" or-part_994"
"(hash-keys"
" provides_986)))))"
"(begin"
"(if(list?"
" lst_993)"
"(void)"
"(let-values()"
"(in-list"
" lst_993)))"
"((letrec-values(((for-loop_995)"
"(lambda(fold-var_996"
" lst_997)"
"(if(pair?"
" lst_997)"
"(let-values(((sym_998)"
"(unsafe-car"
" lst_997)))"
"(let-values(((fold-var_999)"
"(let-values()"
"(let-values(((fold-var_1001)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((binding/p_1002)"
"(hash-ref"
" provides_986"
" sym_998"
" #f)))"
"(if binding/p_1002"
"(let-values()"
"(let-values(((b_1003)"
"(let-values()"
"(provide-binding-to-require-binding11.1"
" mpi280_1008"
" phase-shift282_1010"
" provide-phase-level281_1009"
" self279_1007"
" binding/p277_1005"
" sym278_1006))))"
"(let-values(((sym_1011)"
"(filter_977"
" b_1003"
"(provided-as-transformer?"
" binding/p_1002))))"
"(if(if sym_1011"
"(not"
" can-bulk?_974)"
" #f)"
"(let-values()"
"(let-values(((temp283_1012)"
"(datum->syntax$1"
" in-stx_967"
" sym_1011)))"
"(add-binding!17.1"
" #f"
" #f"
" #f"
" #f"
" temp283_1012"
" b284_1013"
" phase285_1014)))"
"(void)))))"
"(void))))"
"(void)))))"
"(values"
" fold-var_1001)))))"
"(for-loop_995"
" fold-var_999"
"(unsafe-cdr"
" lst_997))))"
" fold-var_996))))"
" for-loop_995)"
"(void)"
" lst_993))))"
"(void))"
"(if can-bulk?_974"
"(let-values()"
"(let-values(((temp287_1017)"
"(bulk-binding14.1"
"(if(not"
" bulk-prefix_975)"
"(if(zero?"
"(hash-count"
" bulk-excepts_976))"
" provides_986"
" #f)"
" #f)"
" bulk-prefix_975"
" bulk-excepts_976"
" self_979"
" mpi_970"
" provide-phase-level_985"
" phase-shift_968"
"(namespace-bulk-binding-registry"
" ns_969))))"
"(add-bulk-binding!25.1"
" orig-s289_1019"
" #t"
" in-stx286_1016"
" temp287_1017"
" phase288_1018)))"
"(void)))))"
"(void)))))"
"(values fold-var_991)))"
" fold-var_988))))"
"(for-loop_982"
" fold-var_987"
"(hash-iterate-next ht_980 i_984))))"
" fold-var_983))))"
" for-loop_982)"
"(void)"
"(hash-iterate-first ht_980)))))))))))))))))))))"
"(define-values"
"(unpack97.1)"
"(lambda(given-kws_1020 given-args_1021 m91_1022 in-stx92_1023 phase-shift93_1024 ns94_1025 mpi95_1026)"
"(let-values(((bulk-callback82_1027)(car given-args_1021))"
"((given-kws_1028)(cdr given-kws_1020))"
"((given-args_1029)(cdr given-args_1021)))"
"(let-values(((bulk-excepts80_1030)(car given-args_1029))"
"((given-kws_1031)(cdr given-kws_1028))"
"((given-args_1032)(cdr given-args_1029)))"
"(let-values(((bulk-prefix79_1033)(car given-args_1032))"
"((given-kws_1034)(cdr given-kws_1031))"
"((given-args_1035)(cdr given-args_1032)))"
"(let-values(((can-bulk?78_1036)(car given-args_1035))"
"((given-kws_1037)(cdr given-kws_1034))"
"((given-args_1038)(cdr given-args_1035)))"
"(let-values(((filter81_1039)(car given-args_1038))"
"((given-kws_1040)(cdr given-kws_1037))"
"((given-args_1041)(cdr given-args_1038)))"
"(let-values(((in75_1042)(car given-args_1041))"
"((given-kws_1043)(cdr given-kws_1040))"
"((given-args_1044)(cdr given-args_1041)))"
"(let-values(((just-meta77_1045)(car given-args_1044))"
"((given-kws_1046)(cdr given-kws_1043))"
"((given-args_1047)(cdr given-args_1044)))"
"(let-values(((only76_1048)(car given-args_1047)))"
"(bind-all-provides!96.1"
" bulk-callback82_1027"
" bulk-excepts80_1030"
" bulk-prefix79_1033"
" can-bulk?78_1036"
" filter81_1039"
" in75_1042"
" just-meta77_1045"
" only76_1048"
" m91_1022"
" in-stx92_1023"
" phase-shift93_1024"
" ns94_1025"
" mpi95_1026)))))))))))"
"(define-values"
"(bind-all-provides!98.1)"
"(lifted/17.1$2"
"(lambda(given-kws_1049 given-argc_1050)"
"(if(= given-argc_1050 7)"
"(let-values()"
"(if(pair? l2_1051)"
"(if(eq?(car l2_1051) '#:bulk-callback)"
"(let-values(((l2_1052)(cdr l2_1051)))"
"(if(pair? l2_1052)"
"(if(eq?(car l2_1052) '#:bulk-excepts)"
"(let-values(((l2_1053)(cdr l2_1052)))"
"(if(pair? l2_1053)"
"(if(eq?(car l2_1053) '#:bulk-prefix)"
"(let-values(((l2_1054)(cdr l2_1053)))"
"(if(pair? l2_1054)"
"(if(eq?(car l2_1054) '#:can-bulk?)"
"(let-values(((l2_1055)(cdr l2_1054)))"
"(if(pair? l2_1055)"
"(if(eq?(car l2_1055) '#:filter)"
"(let-values(((l2_1056)(cdr l2_1055)))"
"(if(pair? l2_1056)"
"(if(eq?(car l2_1056) '#:in)"
"(let-values(((l2_1057)(cdr l2_1056)))"
"(if(pair? l2_1057)"
"(if(eq?(car l2_1057) '#:just-meta)"
"(let-values(((l2_1058)(cdr l2_1057)))"
"(if(pair? l2_1058)"
"(if(eq?(car l2_1058) '#:only)(null?(cdr l2_1058)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1059 given-args_1060 m_1061 in-stx_1062 phase-shift_1063 ns_1064 mpi_1065)"
"(unpack97.1 given-kws_1059 given-args_1060 m_1061 in-stx_1062 phase-shift_1063 ns_1064 mpi_1065)))"
" '(#:bulk-callback #:bulk-excepts #:bulk-prefix #:can-bulk? #:filter #:in #:just-meta #:only)"
" '(#:bulk-callback #:bulk-excepts #:bulk-prefix #:can-bulk? #:filter #:in #:just-meta #:only)))"
"(define-values"
"(require-spec-shift-for-syntax)"
"(lambda(req_1066)"
"(let-values(((rebuild-req_1067)"
"(lambda(req_1069 new-req_1070)(datum->syntax$1 req_1069 new-req_1070 req_1069 req_1069))))"
"(letrec-values(((loop_1068)"
"(lambda(shifted?_1071)"
"(lambda(req_1072)"
"(let-values(((fm_1073)"
"(if(pair?(syntax-e$1 req_1072))"
"(if(identifier?(car(syntax-e$1 req_1072)))"
"(syntax-e$1(car(syntax-e$1 req_1072)))"
" #f)"
" #f)))"
"(let-values()"
"(if(equal? tmp_1074 'for-meta)"
"(let-values()"
"(let-values(((ok?_1075 for-meta290_1076 phase-level291_1077 spec292_1078)"
"(let-values()"
"(let-values()"
"(let-values(((for-meta290_1094 phase-level291_1095 spec292_1096)"
"(let-values(((s_1097)"
"(if(syntax?$1 s_1092)"
"(syntax-e$1 s_1092)"
" s_1092)))"
"(if(pair? s_1097)"
"(let-values(((for-meta293_1098)"
"(let-values(((s_1101)"
"(car s_1097)))"
" s_1101))"
"((phase-level294_1099 spec295_1100)"
"(let-values(((s_1102)"
"(cdr s_1097)))"
"(let-values(((s_1103)"
"(if(syntax?$1"
" s_1102)"
"(syntax-e$1"
" s_1102)"
" s_1102)))"
"(if(pair? s_1103)"
"(let-values(((phase-level296_1104)"
"(let-values(((s_1106)"
"(car"
" s_1103)))"
" s_1106))"
"((spec297_1105)"
"(let-values(((s_1107)"
"(cdr"
" s_1103)))"
"(let-values(((s_1108)"
"(if(syntax?$1"
" s_1107)"
"(syntax-e$1"
" s_1107)"
" s_1107)))"
"(let-values(((flat-s_1109)"
"(to-syntax-list.1"
" s_1108)))"
"(if(not"
" flat-s_1109)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                    \"bad syntax\""
" orig-s_1093))"
"(let-values()"
" flat-s_1109)))))))"
"(values"
" phase-level296_1104"
" spec297_1105))"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_1093))))))"
"(values"
" for-meta293_1098"
" phase-level294_1099"
" spec295_1100))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_1093)))))"
"(values"
" #t"
" for-meta290_1094"
" phase-level291_1095"
" spec292_1096))))))"
"(let-values(((p_1091)(syntax-e$1 phase-level291_1077)))"
"(begin"
"(if(phase? p_1091)"
"(void)"
"                                           (let-values () (raise-syntax-error$1 #f \"bad phase\" req_1072)))"
"(rebuild-req_1067"
" req_1072"
"(list*"
" for-meta290_1076"
"(phase+ p_1091 1)"
"(map2(loop_1068 #t) spec292_1078)))))))"
"(if(equal? tmp_1074 'for-syntax)"
"(let-values()"
"(let-values(((ok?_1110 for-syntax298_1111 spec299_1112)"
"(let-values()"
"(let-values()"
"(let-values(((for-syntax298_1125 spec299_1126)"
"(let-values(((s_1127)"
"(if(syntax?$1 s_1123)"
"(syntax-e$1 s_1123)"
" s_1123)))"
"(if(pair? s_1127)"
"(let-values(((for-syntax300_1128)"
"(let-values(((s_1130)"
"(car s_1127)))"
" s_1130))"
"((spec301_1129)"
"(let-values(((s_1131)"
"(cdr s_1127)))"
"(let-values(((s_1132)"
"(if(syntax?$1"
" s_1131)"
"(syntax-e$1"
" s_1131)"
" s_1131)))"
"(let-values(((flat-s_1133)"
"(to-syntax-list.1"
" s_1132)))"
"(if(not flat-s_1133)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                  \"bad syntax\""
" orig-s_1124))"
"(let-values()"
" flat-s_1133)))))))"
"(values for-syntax300_1128 spec301_1129))"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_1124)))))"
"(values #t for-syntax298_1125 spec299_1126))))))"
"(rebuild-req_1067"
" req_1072"
"(list* 'for-meta 2(map2(loop_1068 #t) spec299_1112)))))"
"(if(equal? tmp_1074 'for-template)"
"(let-values()"
"(let-values(((ok?_1134 for-template302_1135 spec303_1136)"
"(let-values()"
"(let-values()"
"(let-values(((for-template302_1149 spec303_1150)"
"(let-values(((s_1151)"
"(if(syntax?$1 s_1147)"
"(syntax-e$1 s_1147)"
" s_1147)))"
"(if(pair? s_1151)"
"(let-values(((for-template304_1152)"
"(let-values(((s_1154)"
"(car s_1151)))"
" s_1154))"
"((spec305_1153)"
"(let-values(((s_1155)"
"(cdr s_1151)))"
"(let-values(((s_1156)"
"(if(syntax?$1"
" s_1155)"
"(syntax-e$1"
" s_1155)"
" s_1155)))"
"(let-values(((flat-s_1157)"
"(to-syntax-list.1"
" s_1156)))"
"(if(not flat-s_1157)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_1148))"
"(let-values()"
" flat-s_1157)))))))"
"(values for-template304_1152 spec305_1153))"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_1148)))))"
"(values #t for-template302_1149 spec303_1150))))))"
"(rebuild-req_1067"
" req_1072"
"(list* 'for-meta 0(map2(loop_1068 #t) spec303_1136)))))"
"(if(equal? tmp_1074 'for-label)"
"(let-values()"
"(let-values(((ok?_1158 for-label306_1159 spec307_1160)"
"(let-values()"
"(let-values()"
"(let-values(((for-label306_1173 spec307_1174)"
"(let-values(((s_1175)"
"(if(syntax?$1 s_1171)"
"(syntax-e$1 s_1171)"
" s_1171)))"
"(if(pair? s_1175)"
"(let-values(((for-label308_1176)"
"(let-values(((s_1178)"
"(car s_1175)))"
" s_1178))"
"((spec309_1177)"
"(let-values(((s_1179)"
"(cdr s_1175)))"
"(let-values(((s_1180)"
"(if(syntax?$1"
" s_1179)"
"(syntax-e$1"
" s_1179)"
" s_1179)))"
"(let-values(((flat-s_1181)"
"(to-syntax-list.1"
" s_1180)))"
"(if(not flat-s_1181)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                      \"bad syntax\""
" orig-s_1172))"
"(let-values()"
" flat-s_1181)))))))"
"(values for-label308_1176 spec309_1177))"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_1172)))))"
"(values #t for-label306_1173 spec307_1174))))))"
"(rebuild-req_1067"
" req_1072"
"(list* for-label306_1159(map2(loop_1068 #t) spec307_1160)))))"
"(if(equal? tmp_1074 'just-meta)"
"(let-values()"
"(let-values(((ok?_1182 just-meta310_1183 phase-level311_1184 spec312_1185)"
"(let-values()"
"(let-values()"
"(let-values(((just-meta310_1200"
" phase-level311_1201"
" spec312_1202)"
"(let-values(((s_1203)"
"(if(syntax?$1 s_1198)"
"(syntax-e$1 s_1198)"
" s_1198)))"
"(if(pair? s_1203)"
"(let-values(((just-meta313_1204)"
"(let-values(((s_1207)"
"(car"
" s_1203)))"
" s_1207))"
"((phase-level314_1205"
" spec315_1206)"
"(let-values(((s_1208)"
"(cdr"
" s_1203)))"
"(let-values(((s_1209)"
"(if(syntax?$1"
" s_1208)"
"(syntax-e$1"
" s_1208)"
" s_1208)))"
"(if(pair? s_1209)"
"(let-values(((phase-level316_1210)"
"(let-values(((s_1212)"
"(car"
" s_1209)))"
" s_1212))"
"((spec317_1211)"
"(let-values(((s_1213)"
"(cdr"
" s_1209)))"
"(let-values(((s_1214)"
"(if(syntax?$1"
" s_1213)"
"(syntax-e$1"
" s_1213)"
" s_1213)))"
"(let-values(((flat-s_1215)"
"(to-syntax-list.1"
" s_1214)))"
"(if(not"
" flat-s_1215)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                            \"bad syntax\""
" orig-s_1199))"
"(let-values()"
" flat-s_1215)))))))"
"(values"
" phase-level316_1210"
" spec317_1211))"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_1199))))))"
"(values"
" just-meta313_1204"
" phase-level314_1205"
" spec315_1206))"
"(raise-syntax-error$1"
" #f"
"                                                                                \"bad syntax\""
" orig-s_1199)))))"
"(values"
" #t"
" just-meta310_1200"
" phase-level311_1201"
" spec312_1202))))))"
"(rebuild-req_1067"
" req_1072"
"(list*"
" just-meta310_1183"
" phase-level311_1184"
"(map2(loop_1068 #f) spec312_1185)))))"
"(let-values()"
"(if shifted?_1071"
" req_1072"
"(datum->syntax$1 #f(list 'for-syntax req_1072)))))))))))))))"
"((loop_1068 #f) req_1066)))))"
"(define-values"
"(copy-namespace-value)"
"(lambda(m-ns_1216 adjusted-sym_1217 binding_1218 phase-level_1219 phase-shift_1220 as-constant?_1221)"
"(let-values(((i-ns_1222)"
"(let-values(((temp319_1226)(1/module-path-index-resolve(module-binding-module binding_1218)))"
"((temp320_1227)(phase-(module-binding-phase binding_1218) phase-level_1219))"
"((temp321_1228) #t))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" temp321_1228"
" #t"
" #f"
" #f"
" m-ns318_1225"
" temp319_1226"
" temp320_1227))))"
"(let-values(((val_1223)"
"(namespace-get-variable"
" i-ns_1222"
"(module-binding-phase binding_1218)"
"(module-binding-sym binding_1218)"
"(lambda()"
"(error"
" 'namespace-require/copy"
"(format"
"(string-append"
"                          \"namespace mismatch;\\n\""
"                          \" variable not found\\n\""
"                          \"  variable name: ~s\\n\""
"                          \"  phase level: ~s\")"
"(module-binding-sym binding_1218)"
"(module-binding-phase binding_1218)))))))"
"(namespace-set-variable!"
" m-ns_1216"
"(phase+ phase-shift_1220 phase-level_1219)"
" adjusted-sym_1217"
" val_1223"
" as-constant?_1221)))))"
"(void)"
"(void)"
"(define-values"
"(top-level-instance)"
"(1/make-instance"
" 'top-level"
" #f"
" top-level-bind!-id"
"(lambda(id_1 mpi_2 orig-phase_3 phase-shift_4 ns_5 sym_6 trans?_7 trans-val_8)"
"(let-values(((phase_9)(phase+ orig-phase_3 phase-shift_4)))"
"(let-values(((b_10)"
"(let-values(((temp7_15)(root-expand-context-frame-id(namespace-get-root-expand-ctx ns_5))))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" temp7_15"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi4_12"
" phase5_13"
" sym6_14))))"
"(begin"
"(let-values()(add-binding!17.1 #f #f #f #f id1_16 b2_17 phase3_18))"
"(if trans?_7"
"(let-values()(if trans-val_8(let-values()(maybe-install-free=id! trans-val_8 id_1 phase_9))(void)))"
"(let-values()(namespace-unset-transformer! ns_5 phase_9 sym_6)))))))"
" top-level-require!-id"
"(lambda(stx_19 ns_20)"
"(let-values(((reqs_21)(cdr(syntax->list$1 stx_19))))"
"(let-values(((temp8_23) #t)"
"((temp9_24) #f)"
"((temp11_26) #f)"
"((temp13_28)(namespace-phase ns_20))"
"((temp14_29)(make-requires+provides #f))"
"((temp15_30) 'require))"
"(parse-and-perform-requires!28.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp8_23"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp9_24"
" #t"
" temp15_30"
" reqs10_25"
" temp11_26"
" ns12_27"
" temp13_28"
" temp14_29))))))"
"(void)"
"(void)"
"(define-values"
"(create-compiled-in-memorys-using-shared-data)"
"(lambda(tops_1 data-linklet_2 ns_3)"
"(let-values(((data-instance_4)"
"(1/instantiate-linklet"
" data-linklet_2"
"(list"
" deserialize-instance"
"(let-values(((temp2_16)(namespace-phase ns_3))"
"((temp3_17)(namespace-mpi ns_3))"
"((temp4_18)(namespace-bulk-binding-registry ns_3))"
"((temp5_19)(current-code-inspector)))"
"(make-eager-instance-instance11.1 temp4_18 temp2_16 temp5_19 ns1_15 temp3_17))))))"
"(let-values(((data_5)(lambda(key_20)(1/instance-variable-value data-instance_4 key_20))))"
"(let-values(((mpi-vector_6)(data_5 mpi-vector-id)))"
"(let-values(((mpi-vector-trees_7)(data_5 'mpi-vector-trees)))"
"(let-values(((phase-to-link-modules-vector_8)(data_5 'phase-to-link-modules-vector)))"
"(let-values(((phase-to-link-modules-trees_9)(data_5 'phase-to-link-modules-trees)))"
"(let-values(((syntax-literals_10)(data_5 'syntax-literals)))"
"(let-values(((syntax-literals-trees_11)(data_5 'syntax-literals-trees)))"
"(let-values(((namespace-scopes_12)(extract-namespace-scopes ns_3)))"
"(letrec-values(((construct-compiled-in-memory_13)"
"(lambda(ld_21"
" mpi-vector-tree_22"
" phase-to-link-modules-tree_23"
" syntax-literals-tree_24)"
"(let-values(((is-module?_25)"
"(let-values(((or-part_31)(1/linklet-bundle? ld_21)))"
"(if or-part_31"
" or-part_31"
"(let-values(((b_32)"
"(hash-ref"
"(1/linklet-directory->hash ld_21)"
" #f"
" #f)))"
"(if b_32"
"(hash-ref(1/linklet-bundle->hash b_32) 'decl #f)"
" #f))))))"
"(let-values(((mpi-pos-vec_26)(vector-ref mpi-vector-tree_22 0)))"
"(let-values(((syntax-literals-spec_27)"
"(vector-ref syntax-literals-tree_24 0)))"
"(let-values(((pres_28)"
"(if is-module?_25"
"(extract-submodules ld_21 'pre)"
"(compiled-top->compiled-tops ld_21))))"
"(let-values(((posts_29)"
"(if is-module?_25"
"(extract-submodules ld_21 'post)"
" null)))"
"(let-values(((map-construct-compiled-in-memory_30)"
"(lambda(l_33 vec-pos_34)"
"(alt-reverse"
"(let-values(((lst_36)"
"(vector-ref"
" mpi-vector-tree_22"
" vec-pos_34))"
"((lst_37)"
"(vector-ref"
" phase-to-link-modules-tree_23"
" vec-pos_34))"
"((lst_38)"
"(vector-ref"
" syntax-literals-tree_24"
" vec-pos_34)))"
"(begin"
"(if(list? lst_35)"
"(void)"
"(let-values()(in-list lst_35)))"
"(if(list? lst_36)"
"(void)"
"(let-values()(in-list lst_36)))"
"(if(list? lst_37)"
"(void)"
"(let-values()(in-list lst_37)))"
"(if(list? lst_38)"
"(void)"
"(let-values()(in-list lst_38)))"
"((letrec-values(((for-loop_39)"
"(lambda(fold-var_40"
" lst_41"
" lst_42"
" lst_43"
" lst_44)"
"(if(if(pair? lst_41)"
"(if(pair? lst_42)"
"(if(pair? lst_43)"
"(pair? lst_44)"
" #f)"
" #f)"
" #f)"
"(let-values(((sub-ld_45)"
"(unsafe-car"
" lst_41))"
"((mpi-vector-tree_46)"
"(unsafe-car"
" lst_42))"
"((phase-to-link-modules-tree_47)"
"(unsafe-car"
" lst_43))"
"((syntax-literals-tree_48)"
"(unsafe-car"
" lst_44)))"
"(let-values(((fold-var_49)"
"(let-values()"
"(let-values(((fold-var_51)"
"(let-values()"
"(cons"
"(let-values()"
"(construct-compiled-in-memory_13"
" sub-ld_45"
" mpi-vector-tree_46"
" phase-to-link-modules-tree_47"
" syntax-literals-tree_48))"
" fold-var_50))))"
"(values"
" fold-var_51)))))"
"(for-loop_39"
" fold-var_49"
"(unsafe-cdr lst_41)"
"(unsafe-cdr lst_42)"
"(unsafe-cdr lst_43)"
"(unsafe-cdr"
" lst_44))))"
" fold-var_40))))"
" for-loop_39)"
" null"
" lst_35"
" lst_36"
" lst_37"
" lst_38)))))))"
"(compiled-in-memory1.1"
" ld_21"
"(vector-ref"
" phase-to-link-modules-vector_8"
"(vector-ref phase-to-link-modules-tree_23 0))"
" #f"
" '#hasheqv()"
"(let-values(((len_52)(vector-length mpi-pos-vec_26)))"
"(begin"
"(if(exact-nonnegative-integer? len_52)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                               \"exact-nonnegative-integer?\""
" len_52)))"
"(let-values(((v_53)(make-vector len_52 0)))"
"(begin"
"(if(zero? len_52)"
"(void)"
"(let-values()"
"(let-values(((vec_54 len_55)"
"(let-values()"
"(begin"
"(if(vector? vec_56)"
"(void)"
"(let-values()"
"(in-vector vec_56)))"
"(values"
" vec_56"
"(unsafe-vector-length vec_56))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_57)"
"(lambda(i_58 pos_59)"
"(if(unsafe-fx< pos_59 len_55)"
"(let-values(((pos_60)"
"(unsafe-vector-ref"
" vec_54"
" pos_59)))"
"(let-values(((i_61)"
"(let-values()"
"(let-values(((i_63)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_53"
" i_62"
"(let-values()"
"(vector-ref"
" mpi-vector_6"
" pos_60)))"
"(unsafe-fx+"
" 1"
" i_62)))))"
"(values"
" i_63)))))"
"(if(not"
"((lambda x_64"
"(unsafe-fx="
" i_61"
" len_52))"
" pos_60))"
"(for-loop_57"
" i_61"
"(unsafe-fx+"
" 1"
" pos_59))"
" i_61)))"
" i_58))))"
" for-loop_57)"
" 0"
" 0)))))"
" v_53))))"
"(let-values(((len_65)(cdr syntax-literals-spec_27)))"
"(begin"
"(if(exact-nonnegative-integer? len_65)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                               \"exact-nonnegative-integer?\""
" len_65)))"
"(let-values(((v_66)(make-vector len_65 0)))"
"(begin"
"(if(zero? len_65)"
"(void)"
"(let-values()"
"(let-values(((start_67) 0)"
"((end_68)(cdr syntax-literals-spec_27))"
"((inc_69) 1))"
"(begin"
"(if(if(real? start_67)"
"(if(real? end_68)(real? inc_69) #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range start_67 end_68 inc_69)))"
"((letrec-values(((for-loop_70)"
"(lambda(i_71 pos_72)"
"(if(< pos_72 end_68)"
"(let-values()"
"(let-values(((i_74)"
"(let-values()"
"(let-values(((i_76)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_66"
" i_75"
"(let-values()"
"(if syntax-literals_10"
"(vector-ref"
" syntax-literals_10"
"(+"
"(car"
" syntax-literals-spec_27)"
" i_73))"
" #f)))"
"(unsafe-fx+"
" 1"
" i_75)))))"
"(values"
" i_76)))))"
"(if(not"
"((lambda x_77"
"(unsafe-fx="
" i_74"
" len_65))"
" i_73))"
"(for-loop_70"
" i_74"
"(+ pos_72 inc_69))"
" i_74)))"
" i_71))))"
" for-loop_70)"
" 0"
" start_67)))))"
" v_66))))"
"(map-construct-compiled-in-memory_30 pres_28 1)"
"(map-construct-compiled-in-memory_30 posts_29 2)"
" namespace-scopes_12"
" #f))))))))))"
"(map2"
" construct-compiled-in-memory_13"
" tops_1"
" mpi-vector-trees_7"
" phase-to-link-modules-trees_9"
" syntax-literals-trees_11)))))))))))))"
"(define-values"
"(extract-submodules)"
"(lambda(ld_78 names-key_79)"
"(if(1/linklet-bundle? ld_78)"
"(let-values() null)"
"(let-values()"
"(let-values(((h_80)(1/linklet-directory->hash ld_78)))"
"(let-values(((mod_81)(hash-ref h_80 #f #f)))"
"            (let-values ((() (begin (if mod_81 (void) (let-values () (error \"missing main module\"))) (values))))"
"(let-values(((mh_82)(1/linklet-bundle->hash mod_81)))"
"(let-values(((names_83)(hash-ref mh_82 names-key_79 null)))"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_84)(void)(let-values()(in-list lst_84)))"
"((letrec-values(((for-loop_85)"
"(lambda(fold-var_86 lst_87)"
"(if(pair? lst_87)"
"(let-values(((name_88)(unsafe-car lst_87)))"
"(let-values(((fold-var_89)"
"(let-values()"
"(let-values(((fold-var_91)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" h_80"
" name_88"
"(lambda()"
"(error"
"                                                                                      \"missing submodule declaration:\""
" name_88))))"
" fold-var_90))))"
"(values fold-var_91)))))"
"(for-loop_85 fold-var_89(unsafe-cdr lst_87))))"
" fold-var_86))))"
" for-loop_85)"
" null"
" lst_84)))))))))))))"
"(void)"
"(void)"
"(define-values"
"(check-require-access9.1)"
"(lambda(skip-imports1_20"
" linklet3_21"
" import-module-uses4_22"
" import-module-instances5_23"
" insp6_24"
" extra-inspector7_25"
" extra-inspectorsss8_26)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((lst_34)(list-tail(1/linklet-import-variables linklet_27) skip-num-imports_28))"
"((lst_37)(let-values()(if or-part_38 or-part_38 import-module-uses_29))))"
"(begin"
"(if(list? lst_34)(void)(let-values()(in-list lst_34)))"
"(if(list? lst_35)(void)(let-values()(in-list lst_35)))"
"(if(list? lst_36)(void)(let-values()(in-list lst_36)))"
"(if(list? lst_37)(void)(let-values()(in-list lst_37)))"
"((letrec-values(((for-loop_39)"
"(lambda(fold-var_40 lst_41 lst_42 lst_43 lst_44)"
"(if(if(pair? lst_41)"
"(if(pair? lst_42)(if(pair? lst_43)(pair? lst_44) #f) #f)"
" #f)"
"(let-values(((import-syms_45)(unsafe-car lst_41))"
"((mu_46)(unsafe-car lst_42))"
"((mi_47)(unsafe-car lst_43))"
"((extra-inspectorss_48)(unsafe-car lst_44)))"
"(let-values(((fold-var_49)"
"(let-values()"
"(let-values(((fold-var_51)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_52)"
"(module-instance-module"
" mi_47)))"
"(if(module-no-protected? m_52)"
"(void)"
"(let-values()"
"(let-values(((access_53)"
"(let-values(((or-part_54)"
"(module-access"
" m_52)))"
"(if or-part_54"
" or-part_54"
"(module-compute-access!"
" m_52)))))"
"(let-values(((lst_56)"
"(let-values(((or-part_57)"
"(if extra-inspectorsss_33"
" extra-inspectorss_48"
" #f)))"
"(if or-part_57"
" or-part_57"
" import-syms_45))))"
"(begin"
"(if(list? lst_55)"
"(void)"
"(let-values()"
"(in-list lst_55)))"
"(if(list? lst_56)"
"(void)"
"(let-values()"
"(in-list lst_56)))"
"((letrec-values(((for-loop_58)"
"(lambda(fold-var_59"
" lst_60"
" lst_61)"
"(if(if(pair?"
" lst_60)"
"(pair?"
" lst_61)"
" #f)"
"(let-values(((import-sym_62)"
"(unsafe-car"
" lst_60))"
"((extra-inspectors_63)"
"(unsafe-car"
" lst_61)))"
"(let-values(((fold-var_64)"
"(let-values()"
"(let-values(((fold-var_66)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((a_67)"
"(hash-ref"
"(hash-ref"
" access_53"
"(module-use-phase"
" mu_46)"
" '#hasheq())"
" import-sym_62"
" 'unexported)))"
"(if(let-values(((or-part_68)"
"(eq?"
" a_67"
" 'unexported)))"
"(if or-part_68"
" or-part_68"
"(eq?"
" a_67"
" 'protected)))"
"(let-values()"
"(let-values(((guard-insp_69)"
"(namespace-inspector"
"(module-instance-namespace"
" mi_47))))"
"(if(let-values(((or-part_70)"
"(inspector-superior?"
" insp_31"
" guard-insp_69)))"
"(if or-part_70"
" or-part_70"
"(let-values(((or-part_71)"
"(if extra-inspector_32"
"(inspector-superior?"
" extra-inspector_32"
" guard-insp_69)"
" #f)))"
"(if or-part_71"
" or-part_71"
"(if extra-inspectorsss_33"
"(if extra-inspectorss_48"
"(let-values()"
"(begin"
"(if((lambda(ht_73)"
"(if(hash?"
" ht_73)"
"(immutable?"
" ht_73)"
" #f))"
" ht_72)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_72)))"
"((letrec-values(((for-loop_74)"
"(lambda(result_75"
" i_76)"
"(if i_76"
"(let-values(((extra-insp_77)"
"(unsafe-immutable-hash-iterate-key"
" ht_72"
" i_76)))"
"(let-values(((result_78)"
"(let-values()"
"(let-values(((result_80)"
"(let-values()"
"(let-values()"
"(inspector-superior?"
" extra-insp_77"
" guard-insp_69)))))"
"(values"
" result_80)))))"
"(if(not"
"((lambda x_81"
"(not"
" result_78))"
" extra-insp_77))"
"(for-loop_74"
" result_78"
"(unsafe-immutable-hash-iterate-next"
" ht_72"
" i_76))"
" result_78)))"
" result_75))))"
" for-loop_74)"
" #t"
"(unsafe-immutable-hash-iterate-first"
" ht_72))))"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(error"
" 'link"
"(string-append"
"                                                                                                                                                                          \"access disallowed by code inspector to ~a variable\\n\""
"                                                                                                                                                                          \"  variable: ~s\\n\""
"                                                                                                                                                                          \"  from module: ~a\")"
" a_67"
" import-sym_62"
"(1/module-path-index-resolve"
"(namespace-mpi"
"(module-instance-namespace"
" mi_47))))))))"
"(void))))"
"(void)))))"
"(values"
" fold-var_66)))))"
"(for-loop_58"
" fold-var_64"
"(unsafe-cdr"
" lst_60)"
"(unsafe-cdr"
" lst_61))))"
" fold-var_59))))"
" for-loop_58)"
"(void)"
" lst_55"
" lst_56))))))))"
"(void)))))"
"(values fold-var_51)))))"
"(for-loop_39"
" fold-var_49"
"(unsafe-cdr lst_41)"
"(unsafe-cdr lst_42)"
"(unsafe-cdr lst_43)"
"(unsafe-cdr lst_44))))"
" fold-var_40))))"
" for-loop_39)"
"(void)"
" lst_34"
" lst_35"
" lst_36"
" lst_37)))))))))))))"
"(void)"
"(void)"
"(define-values"
"(eval-single-top)"
"(lambda(c_1 ns_2)"
"(let-values(((...xpander/eval/top.rkt:30:2_3) eval-one-top17.1)((temp20_6) #t))"
"(eval-one-top15.1 temp20_6 #t c18_4 ns19_5 #f #f))))"
"(define-values"
"(compiled-multiple-top?)"
"(lambda(c_7)"
"(let-values(((ld_8)(if(compiled-in-memory? c_7)(compiled-in-memory-linklet-directory c_7) c_7)))"
"(if(1/linklet-directory? ld_8)(not(hash-ref(1/linklet-directory->hash ld_8) #f #f)) #f))))"
"(define-values"
"(eval-top)"
"(let-values(((eval-top7_9)"
"(lambda(c5_10 ns6_11 eval-compiled1_12 as-tail?2_13 eval-compiled3_14 as-tail?4_15)"
"(let-values()"
"(let-values()"
"(let-values(((eval-compiled_18)(if eval-compiled3_14 eval-compiled1_12 eval-top)))"
"(let-values(((as-tail?_19)(if as-tail?4_15 as-tail?2_13 #t)))"
"(let-values()"
"(if(compiled-multiple-top? c_16)"
"(eval-multiple-tops c_16 ns_17 eval-compiled_18 as-tail?_19)"
"(let-values()(eval-one-top15.1 #f #f c21_20 ns22_21 as-tail?23_22 #t)))))))))))"
"(case-lambda"
"((c_23 ns_24)(eval-top7_9 c_23 ns_24 #f #f #f #f))"
"((c_25 ns_26 eval-compiled_27 as-tail?2_28)(eval-top7_9 c_25 ns_26 eval-compiled_27 as-tail?2_28 #t #t))"
"((c_29 ns_30 eval-compiled1_31)(eval-top7_9 c_29 ns_30 eval-compiled1_31 #f #t #f)))))"
"(define-values"
"(eval-multiple-tops)"
"(lambda(c_32 ns_33 eval-compiled_34 as-tail?_35)"
"(let-values(((eval-compiled-parts_36)"
"(lambda(l_37)"
"((letrec-values(((loop_38)"
"(lambda(l_39)"
"(if(null? l_39)"
"(let-values() void)"
"(if(null?(cdr l_39))"
"(let-values()(eval-compiled_34(car l_39) ns_33 as-tail?_35))"
"(let-values()"
"(begin(eval-compiled_34(car l_39) ns_33 #f)(loop_38(cdr l_39)))))))))"
" loop_38)"
" l_37))))"
"(if(compiled-in-memory? c_32)"
"(let-values()(eval-compiled-parts_36(compiled-in-memory-pre-compiled-in-memorys c_32)))"
"(let-values(((c1_40)(hash-ref(1/linklet-directory->hash c_32) 'data #f)))"
"(if c1_40"
"((lambda(data-ld_41)"
"(eval-compiled-parts_36"
"(create-compiled-in-memorys-using-shared-data"
"(compiled-top->compiled-tops c_32)"
"(hash-ref(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash data-ld_41) #f)) 0)"
" ns_33)))"
" c1_40)"
"(let-values()(eval-compiled-parts_36(compiled-top->compiled-tops c_32)))))))))"
"(define-values"
"(eval-one-top15.1)"
"(lambda(single-expression?9_42 single-expression?10_43 c13_44 ns14_45 as-tail?11_46 as-tail?12_47)"
"(let-values()"
"(let-values()"
"(let-values(((as-tail?_50)(if as-tail?12_47 as-tail?11_46 #t)))"
"(let-values(((single-expression?_51)(if single-expression?10_43 single-expression?9_42 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((ld_52)(if(compiled-in-memory? c_48)(compiled-in-memory-linklet-directory c_48) c_48)))"
"(let-values(((h_53)(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash ld_52) #f))))"
"(let-values(((link-instance_54)"
"(if(compiled-in-memory? c_48)"
"(link-instance-from-compiled-in-memory"
" c_48"
"(if(not single-expression?_51) ns_49 #f))"
"(1/instantiate-linklet"
"(hash-ref h_53 'link)"
"(list"
" deserialize-instance"
"(let-values(((temp25_64)(namespace-phase ns_49))"
"((temp26_65)(namespace-mpi ns_49))"
"((temp27_66)(namespace-bulk-binding-registry ns_49))"
"((temp28_67)(current-code-inspector)))"
"(make-eager-instance-instance11.1"
" temp27_66"
" temp25_64"
" temp28_67"
" ns24_63"
" temp26_65)))))))"
"(let-values(((orig-phase_55)(hash-ref h_53 'original-phase)))"
"(let-values(((max-phase_56)(hash-ref h_53 'max-phase)))"
"(let-values(((phase-shift_57)(phase-(namespace-phase ns_49) orig-phase_55)))"
"(let-values(((extra-inspector_58)"
"(if(compiled-in-memory? c_48)"
"(compiled-in-memory-compile-time-inspector c_48)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_59)"
"(if(compiled-in-memory? c_48)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_48)"
" '#hasheqv())))"
"(let-values(((phase-to-link-modules_60)"
"(if(compiled-in-memory? c_48)"
"(compiled-in-memory-phase-to-link-module-uses c_48)"
"(1/instance-variable-value link-instance_54 'phase-to-link-modules))))"
"(let-values(((thunk_61)"
"(let-values(((end_69)(sub1 orig-phase_55))((inc_70) -1))"
"(begin"
"(if(if(real? start_68)(if(real? end_69)(real? inc_70) #f) #f)"
"(void)"
"(let-values()(in-range start_68 end_69 inc_70)))"
"((letrec-values(((for-loop_71)"
"(lambda(prev-thunk_72 pos_73)"
"(if(> pos_73 end_69)"
"(let-values()"
"(let-values(((prev-thunk_75)"
"(let-values()"
"(let-values(((prev-thunk_77)"
"(let-values()"
"(let-values((()"
"(begin"
"(prev-thunk_76"
" #f)"
"(values))))"
"(let-values(((module-uses_78)"
"(hash-ref"
" phase-to-link-modules_60"
" phase_74"
" null)))"
"(let-values(((import-module-instances_79"
" import-instances_80)"
"(let-values(((mis_84"
" is_85)"
"(let-values()"
"(begin"
"(if(list?"
" lst_86)"
"(void)"
"(let-values()"
"(in-list"
" lst_86)))"
"((letrec-values(((for-loop_87)"
"(lambda(mis_88"
" is_89"
" lst_90)"
"(if(pair?"
" lst_90)"
"(let-values(((mu_91)"
"(unsafe-car"
" lst_90)))"
"(let-values(((mis_92"
" is_93)"
"(let-values()"
"(let-values(((mis_96"
" is_97)"
"(let-values()"
"(let-values(((mis29_98"
" is30_99)"
"(let-values()"
"(let-values(((temp33_103)"
"(phase-"
"(phase+"
" phase_74"
" phase-shift_57)"
"(module-use-phase"
" mu_91))))"
"(namespace-module-use->module+linklet-instances144.1"
" temp33_103"
" #f"
" #f"
" #f"
" #f"
" ns31_101"
" mu32_102)))))"
"(values"
"(cons"
" mis29_98"
" mis_94)"
"(cons"
" is30_99"
" is_95))))))"
"(values"
" mis_96"
" is_97)))))"
"(for-loop_87"
" mis_92"
" is_93"
"(unsafe-cdr"
" lst_90))))"
"(values"
" mis_88"
" is_89)))))"
" for-loop_87)"
" null"
" null"
" lst_86)))))"
"(values"
"(alt-reverse"
" mis_84)"
"(alt-reverse"
" is_85)))))"
"(let-values(((phase-ns_81)"
"(namespace->namespace-at-phase"
" ns_49"
"(phase+"
" phase_74"
" phase-shift_57))))"
"(let-values(((inst_82)"
"(if single-expression?_51"
" link-instance_54"
"(let-values(((temp36_107)"
"(namespace-mpi"
" ns_49))"
"((temp37_108)"
"(namespace-inspector"
" ns_49))"
"((temp38_109)"
"(namespace-bulk-binding-registry"
" ns_49))"
"((temp39_110)"
"(lambda(name_111"
" val_112)"
"(namespace-set-transformer!"
" ns_49"
"(phase+"
"(sub1"
" phase_74)"
" phase-shift_57)"
" name_111"
" val_112))))"
"(make-instance-instance13.1"
" temp38_109"
" temp37_108"
" phase-ns34_105"
" phase-shift35_106"
" temp36_107"
" temp39_110)))))"
"(let-values(((linklet_83)"
"(hash-ref"
" h_53"
" phase_74"
" #f)))"
"(if linklet_83"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((temp41_116)"
" 3)"
"((temp44_119)"
"(current-code-inspector))"
"((temp46_121)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_59"
" phase_74"
" #f)))"
"(check-require-access9.1"
" temp41_116"
" linklet40_115"
" module-uses42_117"
" import-module-instances43_118"
" temp44_119"
" extra-inspector45_120"
" temp46_121))"
"(values))))"
"(let-values(((instantiate_113)"
"(lambda(tail?_122)"
"(1/instantiate-linklet"
" linklet_83"
"(list*"
" top-level-instance"
" link-instance_54"
" inst_82"
" import-instances_80)"
"(namespace->instance"
" ns_49"
"(phase+"
" phase_74"
" phase-shift_57))"
"(not"
" tail?_122)))))"
"(if(zero-phase?"
" phase_74)"
"(let-values()"
" instantiate_113)"
"(if single-expression?_51"
"(let-values()"
"(lambda(tail?_123)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" phase-ns_81)"
"(let-values()"
"(instantiate_113"
" tail?_123)))))"
"(let-values()"
"(let-values(((ns-1_124)"
"(namespace->namespace-at-phase"
" phase-ns_81"
"(sub1"
" phase_74))))"
"(lambda(tail?_125)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(let-values()"
"(make-expand-context5.1"
" #f"
" #f"
" ns-147_126))"
" 1/current-namespace"
" phase-ns_81)"
"(let-values()"
"(instantiate_113"
" tail?_125)))))))))))"
"(let-values()"
" void)))))))))))"
"(values prev-thunk_77)))))"
"(for-loop_71"
" prev-thunk_75"
"(+ pos_73 inc_70))))"
" prev-thunk_72))))"
" for-loop_71)"
" void"
" start_68)))))"
"(thunk_61 as-tail?_50)))))))))))))))))))"
"(define-values"
"(unpack16.1$2)"
"(lambda(given-kws_127 given-args_128 c13_129 ns14_130 as-tail?11_131 as-tail?12_132)"
"(let-values(((single-expression?10_133)(pair? given-kws_127)))"
"(let-values(((single-expression?9_134)(if single-expression?10_133(car given-args_128)(void))))"
"(eval-one-top15.1"
" single-expression?9_134"
" single-expression?10_133"
" c13_129"
" ns14_130"
" as-tail?11_131"
" as-tail?12_132)))))"
"(define-values"
"(eval-one-top17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_135 given-argc_136)"
"(if(if(>= given-argc_136 4)(<= given-argc_136 5) #f)"
"(let-values()"
"(let-values(((l1_138)"
"(if(null? l1_137) l1_137(if(eq?(car l1_137) '#:single-expression?)(cdr l1_137) l1_137))))"
"(null? l1_138)))"
" #f))"
"(case-lambda"
"((given-kws_139 given-args_140 c_141 ns_142)(unpack16.1$2 given-kws_139 given-args_140 c_141 ns_142 #f #f))"
"((given-kws_143 given-args_144 c_145 ns_146 as-tail?11_147)"
"(unpack16.1$2 given-kws_143 given-args_144 c_145 ns_146 as-tail?11_147 #t)))"
" null"
" '(#:single-expression?)"
"(let-values(((eval-one-top_148)"
"(case-lambda"
"((c_149 ns_150)(unpack16.1$2 null null c_149 ns_150 #f #f))"
"((c_151 ns_152 as-tail?11_153)(unpack16.1$2 null null c_151 ns_152 as-tail?11_153 #t)))))"
" eval-one-top_148)))"
"(define-values"
"(link-instance-from-compiled-in-memory)"
"(lambda(cim_154 to-ns_155)"
"(let-values(((orig-syntax-literals_156)(compiled-in-memory-syntax-literals cim_154)))"
"(let-values(((syntax-literals_157)"
"(if(not to-ns_155)"
"(let-values() orig-syntax-literals_156)"
"(if(namespace-scopes=?"
"(compiled-in-memory-namespace-scopes cim_154)"
"(extract-namespace-scopes to-ns_155))"
"(let-values() orig-syntax-literals_156)"
"(let-values()"
"(let-values(((len_158)(vector-length orig-syntax-literals_156)))"
"(begin"
"(if(exact-nonnegative-integer? len_158)"
"(void)"
"                                (let-values () (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_158)))"
"(let-values(((v_159)(make-vector len_158 0)))"
"(begin"
"(if(zero? len_158)"
"(void)"
"(let-values()"
"(let-values(((vec_160 len_161)"
"(let-values()"
"(begin"
"(if(vector? vec_162)"
"(void)"
"(let-values()(in-vector vec_162)))"
"(values vec_162(unsafe-vector-length vec_162))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_163)"
"(lambda(i_164 pos_165)"
"(if(unsafe-fx< pos_165 len_161)"
"(let-values(((s_166)"
"(unsafe-vector-ref vec_160 pos_165)))"
"(let-values(((i_167)"
"(let-values()"
"(let-values(((i_169)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_159"
" i_168"
"(let-values()"
"(swap-top-level-scopes"
" s_166"
"(compiled-in-memory-namespace-scopes"
" cim_154)"
" to-ns_155)))"
"(unsafe-fx+"
" 1"
" i_168)))))"
"(values i_169)))))"
"(if(not"
"((lambda x_170(unsafe-fx= i_167 len_158))"
" s_166))"
"(for-loop_163 i_167(unsafe-fx+ 1 pos_165))"
" i_167)))"
" i_164))))"
" for-loop_163)"
" 0"
" 0)))))"
" v_159)))))))))"
"(1/make-instance"
" 'link"
" #f"
" mpi-vector-id"
"(compiled-in-memory-mpis cim_154)"
" syntax-literals-id"
" syntax-literals_157)))))"
"(void)"
"(void)"
"(define-values(runtime-scope)(new-multi-scope))"
"(define-values(runtime-stx)(add-scope empty-syntax runtime-scope))"
"(define-values(runtime-module-name)(1/make-resolved-module-path '#%runtime))"
"(define-values"
"(add-runtime-primitive!)"
"(lambda(sym_1)"
"(let-values(((temp1_2)(syntax-scope-set runtime-stx 0))"
"((temp3_4)"
"(let-values(((temp5_6) 0))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" runtime-mpi4_5"
" temp5_6"
" sym6_7))))"
"(add-binding-in-scopes!16.1 #f #f temp1_2 sym2_3 temp3_4))))"
"(call-with-values(lambda()(add-runtime-primitive! 'values)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'cons)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'list)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'make-struct-type)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'make-struct-type-property)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'gensym)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'string->uninterned-symbol)) print-values)"
"(define-values"
"(runtime-instances)"
" '(#%kernel #%paramz #%foreign #%unsafe #%flfxnum #%extfl #%network #%place #%futures))"
"(void)"
"(void)"
"(define-values"
"(select-defined-syms-and-bind!16.1)"
"(lambda(as-transformer?5_18"
" as-transformer?10_19"
" frame-id1_20"
" in4_21"
" in9_22"
" requires+provides3_23"
" requires+provides8_24"
" top-level-bind-scope2_25"
" top-level-bind-scope7_26"
" ids11_27"
" defined-syms12_28"
" self13_29"
" phase14_30"
" all-scopes-stx15_31)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((top-level-bind-scope_38)(if top-level-bind-scope7_26 top-level-bind-scope2_25 #f)))"
"(let-values(((requires+provides_39)(if requires+provides8_24 requires+provides3_23 #f)))"
"(let-values(((orig-s_40)(if in9_22 in4_21 #f)))"
"(let-values(((as-transformer?_41)(if as-transformer?10_19 as-transformer?5_18 #f)))"
"(let-values()"
"(let-values(((defined-syms-at-phase_42)"
"(let-values(((or-part_43)(hash-ref defined-syms_33 phase_35 #f)))"
"(if or-part_43"
" or-part_43"
"(let-values(((ht_44)(make-hasheq)))"
"(begin(hash-set! defined-syms_33 phase_35 ht_44) ht_44))))))"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"((letrec-values(((for-loop_46)"
"(lambda(fold-var_47 lst_48)"
"(if(pair? lst_48)"
"(let-values(((id_49)(unsafe-car lst_48)))"
"(let-values(((fold-var_50)"
"(let-values()"
"(let-values(((fold-var_52)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((sym_53)"
"(syntax-e$1"
" id_49)))"
"(let-values(((defined-sym_54)"
"(if(if(not"
"(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_42"
" sym_53"
" #f)"
" id_49"
" phase_35"
" top-level-bind-scope_38))"
"(no-extra-scopes?"
" id_49"
" all-scopes-stx_36"
" top-level-bind-scope_38"
" phase_35)"
" #f)"
" sym_53"
"((letrec-values(((loop_56)"
"(lambda(pos_57)"
"(let-values(((s_58)"
"(string->unreadable-symbol"
"(format"
"                                                                                                                                                  \"~a.~a\""
" sym_53"
" pos_57))))"
"(if(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_42"
" s_58"
" #f)"
" id_49"
" phase_35"
" top-level-bind-scope_38)"
"(loop_56"
"(add1"
" pos_57))"
" s_58)))))"
" loop_56)"
" 1))))"
"(let-values((()"
"(begin"
"(hash-set!"
" defined-syms-at-phase_42"
" defined-sym_54"
" id_49)"
"(values))))"
"(let-values(((b_55)"
"(let-values()"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" frame-id26_63"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" sym27_64"
" #t"
" #f"
" #f"
" self23_60"
" phase24_61"
" defined-sym25_62))))"
"(begin"
"(if requires+provides_39"
"(let-values()"
"(let-values()"
"(remove-required-id!69.1"
" b31_69"
" requires+provides28_66"
" id29_67"
" phase30_68)))"
"(void))"
"(let-values()"
"(add-binding!17.1"
" orig-s22_74"
" #t"
" #f"
" #f"
" id19_71"
" b20_72"
" phase21_73))"
"(if requires+provides_39"
"(let-values()"
"(let-values()"
"(add-defined-or-required-id!13.1"
" as-transformer?36_80"
" #f"
" #f"
" requires+provides32_76"
" id33_77"
" phase34_78"
" b35_79)))"
"(void))"
" defined-sym_54))))))"
" fold-var_51))))"
"(values fold-var_52)))))"
"(for-loop_46 fold-var_50(unsafe-cdr lst_48))))"
" fold-var_47))))"
" for-loop_46)"
" null"
" lst_45))))))))))))))))))"
"(define-values"
"(no-extra-scopes?)"
"(lambda(id_114 all-scopes-stx_115 top-level-bind-scope_116 phase_117)"
"(let-values(((m-id_118)(datum->syntax$1 all-scopes-stx_115(syntax-e$1 id_114))))"
"(let-values(((or-part_119)(bound-identifier=?$1 id_114 m-id_118 phase_117)))"
"(if or-part_119"
" or-part_119"
"(if top-level-bind-scope_116"
"(bound-identifier=?$1 id_114(add-scope m-id_118 top-level-bind-scope_116) phase_117)"
" #f))))))"
"(define-values"
"(defined-as-other?)"
"(lambda(prev-id_120 id_121 phase_122 top-level-bind-scope_123)"
"(if prev-id_120"
"(if(not(bound-identifier=?$1 prev-id_120 id_121 phase_122))"
"(let-values(((or-part_124)(not top-level-bind-scope_123)))"
"(if or-part_124"
" or-part_124"
"(not"
"(bound-identifier=?$1"
"(remove-scope prev-id_120 top-level-bind-scope_123)"
"(remove-scope id_121 top-level-bind-scope_123)"
" phase_122))))"
" #f)"
" #f)))"
"(define-values"
"(select-defined-syms-and-bind!/ctx)"
"(lambda(tl-ids_125 ctx_126)"
"(let-values(((temp38_129)(root-expand-context-defined-syms ctx_126))"
"((temp39_130)(namespace-mpi(expand-context-namespace ctx_126)))"
"((temp40_131)(expand-context-phase ctx_126))"
"((temp41_132)(root-expand-context-all-scopes-stx ctx_126))"
"((temp42_133)(root-expand-context-frame-id ctx_126))"
"((temp43_134)(root-expand-context-top-level-bind-scope ctx_126)))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" temp42_133"
" #f"
" #f"
" #f"
" #f"
" temp43_134"
" #t"
" tl-ids37_128"
" temp38_129"
" temp39_130"
" temp40_131"
" temp41_132))))"
"(define-values"
"(add-defined-sym!)"
"(lambda(defined-syms_135 phase_136 sym_137 id_138)"
"(let-values(((defined-syms-at-phase_139)"
"(let-values(((or-part_140)(hash-ref defined-syms_135 phase_136 #f)))"
"(if or-part_140"
" or-part_140"
"(let-values(((ht_141)(make-hasheq)))"
"(begin(hash-set! defined-syms_135 phase_136 ht_141) ht_141))))))"
"(hash-set! defined-syms-at-phase_139 sym_137 id_138))))"
"(void)"
"(void)"
"(define-values(box-cons!)(lambda(b_6 v_7)(set-box! b_6(cons v_7(unbox b_6)))))"
"(define-values(box-clear!)(lambda(b_8)(begin0(alt-reverse(unbox b_8))(set-box! b_8 null))))"
"(define-values"
"(struct:lift-context lift-context1.1 lift-context? lift-context-convert lift-context-lifts lift-context-module*-ok?)"
"(let-values(((struct:_9 make-_10 ?_11 -ref_12 -set!_13)"
"(let-values()"
"(let-values()"
"(make-struct-type 'lift-context #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'lift-context)))))"
"(values"
" struct:_9"
" make-_10"
" ?_11"
"(make-struct-field-accessor -ref_12 0 'convert)"
"(make-struct-field-accessor -ref_12 1 'lifts)"
"(make-struct-field-accessor -ref_12 2 'module*-ok?))))"
"(define-values"
"(struct:lifted-bind lifted-bind2.1 lifted-bind? lifted-bind-ids lifted-bind-keys lifted-bind-rhs)"
"(let-values(((struct:_39 make-_40 ?_41 -ref_42 -set!_43)"
"(let-values()"
"(let-values()"
"(make-struct-type 'lifted-bind #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'lifted-bind)))))"
"(values"
" struct:_39"
" make-_40"
" ?_41"
"(make-struct-field-accessor -ref_42 0 'ids)"
"(make-struct-field-accessor -ref_42 1 'keys)"
"(make-struct-field-accessor -ref_42 2 'rhs))))"
"(define-values"
"(make-lift-context6.1)"
"(lambda(module*-ok?3_69 module*-ok?4_70 convert5_71)"
"(let-values()"
"(let-values(((module*-ok?_73)(if module*-ok?4_70 module*-ok?3_69 #f)))"
"(let-values()(lift-context1.1 convert_72(box null) module*-ok?_73))))))"
"(define-values"
"(add-lifted!)"
"(lambda(lifts_88 ids_89 rhs_90 phase_91)"
"(let-values(((lifted-ids_92 lifted_93)((lift-context-convert lifts_88) ids_89 rhs_90 phase_91)))"
"(begin(box-cons!(lift-context-lifts lifts_88) lifted_93) lifted-ids_92))))"
"(define-values(get-and-clear-lifts!)(lambda(lifts_94)(box-clear!(lift-context-lifts lifts_94))))"
"(define-values"
"(make-local-lift)"
"(lambda(lift-env_95 counter_96)"
"(lambda(ids_97 rhs_98 phase_99)"
"(let-values(((keys_100)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_101)(void)(let-values()(in-list lst_101)))"
"((letrec-values(((for-loop_102)"
"(lambda(fold-var_103 lst_104)"
"(if(pair? lst_104)"
"(let-values(((id_105)(unsafe-car lst_104)))"
"(let-values(((fold-var_106)"
"(let-values()"
"(let-values(((fold-var_108)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((key_109)"
"(let-values()"
"(add-local-binding!35.1"
" #f"
" #f"
" #f"
" #f"
" id31_110"
" phase32_111"
" counter33_112))))"
"(begin"
"(set-box!"
" lift-env_95"
"(hash-set"
"(unbox lift-env_95)"
" key_109"
" variable))"
" key_109)))"
" fold-var_107))))"
"(values fold-var_108)))))"
"(for-loop_102 fold-var_106(unsafe-cdr lst_104))))"
" fold-var_103))))"
" for-loop_102)"
" null"
" lst_101))))))"
"(values ids_97(lifted-bind2.1 ids_97 keys_100 rhs_98))))))"
"(define-values"
"(make-top-level-lift)"
"(lambda(ctx_113)"
"(lambda(ids_114 rhs_115 phase_116)"
"(let-values(((post-scope_117)"
"(root-expand-context-post-expansion-scope"
"(namespace-get-root-expand-ctx(expand-context-namespace ctx_113)))))"
"(let-values(((tl-ids_118)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_120)(void)(let-values()(in-list lst_120)))"
"((letrec-values(((for-loop_121)"
"(lambda(fold-var_122 lst_123)"
"(if(pair? lst_123)"
"(let-values(((id_124)(unsafe-car lst_123)))"
"(let-values(((fold-var_125)"
"(let-values()"
"(let-values(((fold-var_127)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope id_124 post-scope_117))"
" fold-var_126))))"
"(values fold-var_127)))))"
"(for-loop_121 fold-var_125(unsafe-cdr lst_123))))"
" fold-var_122))))"
" for-loop_121)"
" null"
" lst_120))))))"
"(let-values(((syms_119)(select-defined-syms-and-bind!/ctx tl-ids_118 ctx_113)))"
"(values tl-ids_118(lifted-bind2.1 tl-ids_118 syms_119 rhs_115))))))))"
"(define-values"
"(wrap-lifts-as-let)"
"(lambda(lifts_128 body_129 s_130 phase_131)"
"(datum->syntax$1"
" #f"
"(let-values(((lst_132)(alt-reverse lifts_128)))"
"(begin"
"(if(list? lst_132)(void)(let-values()(in-list lst_132)))"
"((letrec-values(((for-loop_133)"
"(lambda(body_134 lst_135)"
"(if(pair? lst_135)"
"(let-values(((lift_136)(unsafe-car lst_135)))"
"(let-values(((body_137)"
"(let-values()"
"(let-values(((body_139)"
"(let-values()"
"(begin"
"(if(lifted-bind? lift_136)"
"(void)"
"(let-values()"
"                                                                       (error \"non-bindings in `lift-context`\")))"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx phase_131)"
" 'let-values)"
"(list"
"(list"
"(lifted-bind-ids lift_136)"
"(lifted-bind-rhs lift_136)))"
" body_138)))))"
"(values body_139)))))"
"(for-loop_133 body_137(unsafe-cdr lst_135))))"
" body_134))))"
" for-loop_133)"
" body_129"
" lst_132))))))"
"(define-values"
"(wrap-lifts-as-begin15.1)"
"(lambda(adjust-form9_140 adjust-form10_141 lifts11_142 body12_143 s13_144 phase14_145)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((adjust-form_150)(if adjust-form10_141 adjust-form9_140 values)))"
"(let-values()"
"(datum->syntax$1"
" #f"
"(cons"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_149) 'begin)"
"(append"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_151)(void)(let-values()(in-list lst_151)))"
"((letrec-values(((for-loop_152)"
"(lambda(fold-var_153 lst_154)"
"(if(pair? lst_154)"
"(let-values(((lift_155)(unsafe-car lst_154)))"
"(let-values(((fold-var_156)"
"(let-values()"
"(let-values(((fold-var_158)"
"(let-values()"
"(cons"
"(let-values()"
"(adjust-form_150"
"(if(lifted-bind? lift_155)"
"(let-values()"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1"
" core-stx"
" phase_149)"
" 'define-values)"
"(lifted-bind-ids lift_155)"
"(lifted-bind-rhs lift_155))))"
"(let-values() lift_155))))"
" fold-var_157))))"
"(values fold-var_158)))))"
"(for-loop_152 fold-var_156(unsafe-cdr lst_154))))"
" fold-var_153))))"
" for-loop_152)"
" null"
" lst_151))))"
"(list body_147))))))))))))"
"(define-values"
"(get-lifts-as-lists)"
"(lambda(lifts_182)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_183)(void)(let-values()(in-list lst_183)))"
"((letrec-values(((for-loop_184)"
"(lambda(fold-var_185 lst_186)"
"(if(pair? lst_186)"
"(let-values(((lift_187)(unsafe-car lst_186)))"
"(let-values(((fold-var_188)"
"(let-values()"
"(let-values(((fold-var_190)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
"(lifted-bind-ids lift_187)"
"(lifted-bind-keys lift_187)"
"(lifted-bind-rhs lift_187)))"
" fold-var_189))))"
"(values fold-var_190)))))"
"(for-loop_184 fold-var_188(unsafe-cdr lst_186))))"
" fold-var_185))))"
" for-loop_184)"
" null"
" lst_183))))))"
"(define-values"
"(struct:module-lift-context"
" module-lift-context18.1"
" module-lift-context?"
" module-lift-context-wrt-phase"
" module-lift-context-lifts"
" module-lift-context-module*-ok?)"
"(let-values(((struct:_191 make-_192 ?_193 -ref_194 -set!_195)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-lift-context"
" #f"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'module-lift-context)))))"
"(values"
" struct:_191"
" make-_192"
" ?_193"
"(make-struct-field-accessor -ref_194 0 'wrt-phase)"
"(make-struct-field-accessor -ref_194 1 'lifts)"
"(make-struct-field-accessor -ref_194 2 'module*-ok?))))"
"(define-values"
"(make-module-lift-context)"
"(lambda(phase_221 module*-ok?_222)(module-lift-context18.1 phase_221(box null) module*-ok?_222)))"
"(define-values"
"(get-and-clear-module-lifts!)"
"(lambda(module-lifts_223)(box-clear!(module-lift-context-lifts module-lifts_223))))"
"(define-values"
"(add-lifted-module!)"
"(lambda(module-lifts_224 s_225 phase_226)"
"(begin"
"(if(let-values(((or-part_227)"
"(if(module-lift-context? module-lifts_224)"
"(module-lift-context-module*-ok? module-lifts_224)"
" #f)))"
"(if or-part_227"
" or-part_227"
"(if(lift-context? module-lifts_224)(lift-context-module*-ok? module-lifts_224) #f)))"
"(void)"
"(let-values()"
"(let-values(((tmp_228)(core-form-sym s_225 phase_226)))"
"(if(equal? tmp_228 'module)"
"(let-values()(void))"
"(if(equal? tmp_228 'module*)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-lift-module"
"                   \"cannot lift `module*' to a top-level context\""
"                   \"syntax\""
" s_225))"
"(let-values()"
"                  (raise-arguments-error 'syntax-local-lift-module \"not a `module' declaration\" \"syntax\" s_225)))))))"
"(if(module-lift-context? module-lifts_224)"
"(let-values()(box-cons!(module-lift-context-lifts module-lifts_224) s_225))"
"(if(lift-context? module-lifts_224)"
"(let-values()(box-cons!(lift-context-lifts module-lifts_224) s_225))"
"          (let-values () (error \"internal error: unrecognized lift-context type for module lift\")))))))"
"(define-values"
"(struct:require-lift-context"
" require-lift-context19.1"
" require-lift-context?"
" require-lift-context-do-require"
" require-lift-context-wrt-phase"
" require-lift-context-requires)"
"(let-values(((struct:_229 make-_230 ?_231 -ref_232 -set!_233)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'require-lift-context"
" #f"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'require-lift-context)))))"
"(values"
" struct:_229"
" make-_230"
" ?_231"
"(make-struct-field-accessor -ref_232 0 'do-require)"
"(make-struct-field-accessor -ref_232 1 'wrt-phase)"
"(make-struct-field-accessor -ref_232 2 'requires))))"
"(define-values"
"(make-require-lift-context)"
"(lambda(wrt-phase_259 do-require_260)(require-lift-context19.1 do-require_260 wrt-phase_259(box null))))"
"(define-values"
"(get-and-clear-require-lifts!)"
"(lambda(require-lifts_261)(box-clear!(require-lift-context-requires require-lifts_261))))"
"(define-values"
"(struct:to-module-lift-context"
" to-module-lift-context20.1"
" to-module-lift-context?"
" to-module-lift-context-wrt-phase"
" to-module-lift-context-provides"
" to-module-lift-context-end-as-expressions?"
" to-module-lift-context-ends)"
"(let-values(((struct:_265 make-_266 ?_267 -ref_268 -set!_269)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'to-module-lift-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'to-module-lift-context)))))"
"(values"
" struct:_265"
" make-_266"
" ?_267"
"(make-struct-field-accessor -ref_268 0 'wrt-phase)"
"(make-struct-field-accessor -ref_268 1 'provides)"
"(make-struct-field-accessor -ref_268 2 'end-as-expressions?)"
"(make-struct-field-accessor -ref_268 3 'ends))))"
"(define-values"
"(make-to-module-lift-context26.1)"
"(lambda(end-as-expressions?22_304 shared-module-ends21_305 phase25_306)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()(to-module-lift-context20.1 phase_307(box null) end-as-expressions?_309 ends_308)))))))"
"(define-values(make-shared-module-ends)(lambda()(box null)))"
"(define-values"
"(get-and-clear-end-lifts!)"
"(lambda(to-module-lifts_324)(box-clear!(to-module-lift-context-ends to-module-lifts_324))))"
"(define-values"
"(get-and-clear-provide-lifts!)"
"(lambda(to-module-lifts_325)(box-clear!(to-module-lift-context-provides to-module-lifts_325))))"
"(void)"
"(void)"
"(define-values"
"(struct:already-expanded already-expanded1.1 already-expanded? already-expanded-s already-expanded-binding-layer)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'already-expanded"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'already-expanded)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 's)"
"(make-struct-field-accessor -ref_4 1 'binding-layer))))"
"(void)"
"(void)"
"(define-values"
"(1/prop:liberal-define-context has-liberal-define-context-property? liberal-define-context-value)"
"(make-struct-type-property 'liberal-define-context))"
"(define-values"
"(struct:liberal-define-context make-liberal-define-context 1/liberal-define-context?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'liberal-define-context"
" #f"
" 0"
" 0"
" #f"
"(list(cons 1/prop:liberal-define-context #t))"
" #f"
" #f"
" '()"
" #f"
" 'make-liberal-define-context)))))"
"(values struct:_1 make-_2 ?_3)))"
"(void)"
"(void)"
"(define-values"
"(1/prop:expansion-contexts expansion-contexts? expansion-contexts-ref)"
"(make-struct-type-property"
" 'expansion-contexts"
"(lambda(v_1 info_2)"
"(begin"
"(if(if(list? v_1)"
"(let-values()"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(result_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((s_7)(unsafe-car lst_6)))"
"(let-values(((result_8)"
"(let-values()"
"(let-values(((result_10)"
"(let-values()"
"(let-values()"
"(memq"
" s_7"
" '(expression"
" top-level"
" module"
" module-begin"
" definition-context))))))"
"(values result_10)))))"
"(if(not((lambda x_11(not result_8)) s_7))"
"(for-loop_4 result_8(unsafe-cdr lst_6))"
" result_8)))"
" result_5))))"
" for-loop_4)"
" #t"
" lst_3)))"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:expansion-contexts"
"            \"(listof (or/c 'expression 'top-level 'module 'module-begin 'definition-context))\""
" v_1)))"
" v_1))))"
"(define-values"
"(not-in-this-expand-context?)"
"(lambda(t_12 ctx_13)"
"(if(expansion-contexts? t_12)"
"(not(memq(context->symbol(expand-context-context ctx_13))(expansion-contexts-ref t_12)))"
" #f)))"
"(define-values(context->symbol)(lambda(context_14)(if(symbol? context_14) context_14 'definition-context)))"
"(define-values"
"(avoid-current-expand-context)"
"(lambda(s_15 t_16 ctx_17)"
"(let-values(((wrap_18)"
"(lambda(sym_20)"
"(datum->syntax$1"
" #f"
"(list"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx sym_20)(expand-context-phase ctx_17))"
" s_15)))))"
"(let-values(((fail_19)"
"(lambda()"
"(raise-syntax-error$1"
" #f"
"(format"
"                        \"not allowed in context\\n  expansion context: ~a\""
"(context->symbol(expand-context-context ctx_17)))"
" s_15))))"
"(let-values(((tmp_21)(context->symbol(expand-context-context ctx_17))))"
"(if(equal? tmp_21 'module-begin)"
"(let-values()(wrap_18 'begin))"
"(if(if(equal? tmp_21 'module) #t(if(equal? tmp_21 'top-level) #t(equal? tmp_21 'definition-context)))"
"(let-values()(if(memq 'expression(expansion-contexts-ref t_16))(wrap_18 '#%expression)(fail_19)))"
"(let-values()(fail_19)))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:reference-record"
" reference-record1.1"
" reference-record?"
" reference-record-already-bound"
" reference-record-reference-before-bound"
" reference-record-all-referenced?"
" set-reference-record-already-bound!"
" set-reference-record-reference-before-bound!"
" set-reference-record-all-referenced?!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()(make-struct-type 'reference-record #f 3 0 #f null #f #f '() #f 'reference-record)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'already-bound)"
"(make-struct-field-accessor -ref_4 1 'reference-before-bound)"
"(make-struct-field-accessor -ref_4 2 'all-referenced?)"
"(make-struct-field-mutator -set!_5 0 'already-bound)"
"(make-struct-field-mutator -set!_5 1 'reference-before-bound)"
"(make-struct-field-mutator -set!_5 2 'all-referenced?))))"
"(define-values(make-reference-record)(lambda()(reference-record1.1(seteq)(seteq) #f)))"
"(define-values"
"(reference-record-used!)"
"(lambda(rr_31 key_32)"
"(if(set-member?(reference-record-already-bound rr_31) key_32)"
"(void)"
"(let-values()"
"(set-reference-record-reference-before-bound!"
" rr_31"
"(set-add(reference-record-reference-before-bound rr_31) key_32))))))"
"(define-values"
"(reference-records-all-used!)"
"(lambda(rrs_33)"
"(let-values(((stop?_34 fold-var_35)"
"(let-values()"
"(begin"
"(if(list? lst_36)(void)(let-values()(in-list lst_36)))"
"((letrec-values(((for-loop_37)"
"(lambda(stop-after?_38 fold-var_39 lst_40)"
"(if(pair? lst_40)"
"(let-values(((rr_41)(unsafe-car lst_40)))"
"(let-values(((stop-after?_42 fold-var_43)"
"(let-values()"
"(let-values(((stop?_46)"
"(reference-record-all-referenced? rr_41)))"
"(begin"
" #t"
"((letrec-values(((for-loop_47)"
"(lambda(stop-after?_48 fold-var_49)"
"(let-values()"
"(let-values(((stop-after?_50"
" fold-var_51)"
"(let-values()"
"(let-values(((stop-after?_54)"
"(let-values()"
"(if or-part_55"
" or-part_55"
" stop?_46))))"
"(begin"
" #t"
"((letrec-values(((for-loop_56)"
"(lambda(stop-after?_57"
" fold-var_58)"
"(let-values()"
"(let-values(((stop-after?_59"
" fold-var_60)"
"(let-values()"
"(if stop?_46"
"(values"
" stop-after?_61"
" fold-var_62)"
"(let-values()"
"(let-values(((stop-after?_65"
" fold-var_66)"
"(let-values()"
"(let-values(((fold-var_67)"
"(let-values()"
"(begin"
"(let-values()"
"(set-reference-record-all-referenced?!"
" rr_41"
" #t))"
"(void)))))"
"(values"
" stop-after?_63"
" fold-var_67)))))"
"(values"
" stop-after?_65"
" fold-var_66)))))))"
"(values"
" stop-after?_59"
" fold-var_60))))))"
" for-loop_56)"
" stop-after?_54"
" fold-var_53))))))"
"(values"
" stop-after?_50"
" fold-var_51))))))"
" for-loop_47)"
" stop-after?_44"
" fold-var_45))))))"
"(if(not((lambda x_68 stop-after?_42) rr_41))"
"(for-loop_37 stop-after?_42 fold-var_43(unsafe-cdr lst_40))"
"(values stop-after?_42 fold-var_43))))"
"(values stop-after?_38 fold-var_39)))))"
" for-loop_37)"
" #f"
"(void)"
" lst_36)))))"
"(values fold-var_35))))"
"(define-values"
"(reference-record-bound!)"
"(lambda(rr_69 keys_70)"
"(begin"
"(set-reference-record-already-bound!"
" rr_69"
"(let-values()"
"(begin"
"(if(list? lst_71)(void)(let-values()(in-list lst_71)))"
"((letrec-values(((for-loop_72)"
"(lambda(ab_73 lst_74)"
"(if(pair? lst_74)"
"(let-values(((key_75)(unsafe-car lst_74)))"
"(let-values(((ab_76)"
"(let-values()"
"(let-values(((ab_78)(let-values()(set-add ab_77 key_75))))"
"(values ab_78)))))"
"(for-loop_72 ab_76(unsafe-cdr lst_74))))"
" ab_73))))"
" for-loop_72)"
"(reference-record-already-bound rr_69)"
" lst_71))))"
"(set-reference-record-reference-before-bound!"
" rr_69"
"(let-values()"
"(begin"
"(if(list? lst_79)(void)(let-values()(in-list lst_79)))"
"((letrec-values(((for-loop_80)"
"(lambda(rbb_81 lst_82)"
"(if(pair? lst_82)"
"(let-values(((key_83)(unsafe-car lst_82)))"
"(let-values(((rbb_84)"
"(let-values()"
"(let-values(((rbb_86)(let-values()(set-remove rbb_85 key_83))))"
"(values rbb_86)))))"
"(for-loop_80 rbb_84(unsafe-cdr lst_82))))"
" rbb_81))))"
" for-loop_80)"
"(reference-record-reference-before-bound rr_69)"
" lst_79)))))))"
"(define-values"
"(reference-record-forward-references?)"
"(lambda(rr_87)"
"(let-values(((or-part_88)(reference-record-all-referenced? rr_87)))"
"(if or-part_88 or-part_88(positive?(set-count(reference-record-reference-before-bound rr_87)))))))"
"(define-values"
"(reference-record-clear!)"
"(lambda(rr_89)"
"(begin(set-reference-record-already-bound! rr_89 #f)(set-reference-record-reference-before-bound! rr_89 #f))))"
"(void)"
"(void)"
"(define-values"
"(call-expand-observe)"
"(lambda(obs_57 key_58 . args_59)"
"(obs_57"
"(hash-ref key->number key_58)"
"(if(null? args_59)(let-values() #f)(let-values()(apply list* args_59))))))"
"(define-values"
"(log-expand-start)"
"(lambda()"
"(let-values(((obs_60)(current-expand-observe)))"
"(if obs_60(let-values()(call-expand-observe obs_60 'start-expand))(void)))))"
"(define-values"
"(key->number)"
" '#hash((prim-#%stratified . 155)"
"(lambda-renames . 17)"
"(variable . 125)"
"(macro-post-x . 22)"
"(splice . 11)"
"(exit-local-bind . 160)"
"(prim-submodule . 158)"
"(local-lift . 129)"
"(prim-letrec-values . 113)"
"(enter-macro . 8)"
"(opaque-expr . 146)"
"(prim-set! . 123)"
"(prim-if . 105)"
"(prim-define-values . 104)"
"(block->letrec . 14)"
"(lift-statement . 134)"
"(enter-prim . 6)"
"(prim-define-syntaxes . 103)"
"(prim-begin0 . 108)"
"(track-origin . 152)"
"(lift-loop . 128)"
"(prim-expression . 138)"
"(phase-up . 20)"
"(local-post . 133)"
"(prim-require . 119)"
"(prim-stop . 100)"
"(start-expand . 141)"
"(enter-block . 10)"
"(prim-module-begin . 102)"
"(letrec-syntaxes-renames . 19)"
"(prim-#%datum . 115)"
"(enter-list . 4)"
"(enter-bind . 144)"
"(return . 2)"
"(rename-list . 147)"
"(next-group . 13)"
"(prim-quote-syntax . 118)"
"(exit-prim . 7)"
"(module-lift-loop . 137)"
"(exit-bind . 145)"
"(module-body . 23)"
"(let-renames . 16)"
"(prim-#%app . 109)"
"(exit-check . 127)"
"(prim-lambda . 110)"
"(prim-letrec-syntaxes-values . 114)"
"(exit-local-expr . 140)"
"(exit-list . 5)"
"(block-renames . 24)"
"(prim-quote . 117)"
"(enter-check . 126)"
"(block->list . 12)"
"(macro-pre-x . 21)"
"(prim-begin-for-syntax . 156)"
"(tag . 142)"
"(local-bind . 143)"
"(enter-local . 130)"
"(local-pre . 132)"
"(prim-#%top . 116)"
"(lift-require . 150)"
"(exit-macro . 9)"
"(prim-submodule* . 159)"
"(lift-provide . 151)"
"(prim-begin . 107)"
"(local-value-result . 154)"
"(module-lift-end-loop . 135)"
"(letlift-loop . 136)"
"(exit-local . 131)"
"(prim-provide . 122)"
"(enter-local-expr . 139)"
"(prim-module . 101)"
"(prim-with-continaution-mark . 106)"
"(next . 3)"
"(case-lambda-renames . 18)"
"(local-value . 153)"
"(prim-#%variable-reference . 149)"
"(rename-one . 148)"
"(prepare-env . 157)"
"(prim-case-lambda . 111)"
"(visit . 0)"
"(prim-let-values . 112)"
"(resolve . 1)))"
"(void)"
"(void)"
"(define-values"
"(expand5.1)"
"(lambda(alternate-id1_21 alternate-id2_22 s3_23 ctx4_24)"
"(let-values()"
"(let-values()"
"(let-values(((alternate-id_27)(if alternate-id2_22 alternate-id1_21 #f)))"
"(let-values()"
"(begin"
"(let-values(((obs_28)(expand-context-observer ctx_26)))"
"(if obs_28"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_28"
"(if(expand-context-only-immediate? ctx_26) 'enter-check 'visit)"
" s_25)))"
"(void)))"
"(if(identifier? s_25)"
"(let-values()(expand-identifier s_25 ctx_26 alternate-id_27))"
"(if(if(pair?(syntax-content s_25))(identifier?(car(syntax-content s_25))) #f)"
"(let-values()(expand-id-application-form s_25 ctx_26 alternate-id_27))"
"(if(let-values(((or-part_29)(pair?(syntax-content s_25))))"
"(if or-part_29 or-part_29(null?(syntax-content s_25))))"
"(let-values()(expand-implicit '#%app s_25 ctx_26 #f))"
"(if(already-expanded?(syntax-content s_25))"
"(let-values()(expand-already-expanded s_25 ctx_26))"
"(let-values()(expand-implicit '#%datum s_25 ctx_26 #f)))))))))))))"
"(define-values"
"(expand-identifier)"
"(lambda(s_47 ctx_48 alternate-id_49)"
"(let-values(((id_50)(let-values()(if or-part_51 or-part_51 s_47))))"
"(if(free-id-set-member?(expand-context-stops ctx_48)(expand-context-phase ctx_48) id_50)"
"(let-values()"
"(begin"
"(let-values(((obs_52)(expand-context-observer ctx_48)))"
"(if obs_52"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_48))"
"(let-values()"
"(begin"
"(call-expand-observe obs_52 'enter-prim s_47)"
"(call-expand-observe obs_52 'prim-stop)"
"(call-expand-observe obs_52 'exit-prim s_47)"
"(call-expand-observe obs_52 'return s_47)))"
"(void)))"
"(void)))"
" s_47))"
"(let-values()"
"(let-values(((binding_53)"
"(let-values(((temp66_56)(expand-context-phase ctx_48))"
"((temp67_57) 'ambiguous)"
"((temp68_58) #t))"
"(resolve+shift30.1 temp67_57 #t #f #f #f #f temp68_58 #t #f #f id65_55 temp66_56))))"
"(begin"
"(let-values(((obs_59)(expand-context-observer ctx_48)))"
"(if obs_59"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_48))"
"(let-values()(call-expand-observe obs_59 'resolve id_50))"
"(void)))"
"(void)))"
"(if(eq? binding_53 'ambiguous)"
"(let-values()(raise-ambiguous-error id_50 ctx_48))"
"(if(not binding_53)"
"(let-values()(expand-implicit '#%top(substitute-alternate-id s_47 alternate-id_49) ctx_48 s_47))"
"(let-values()"
"(let-values(((t_60 primitive?_61 insp-of-t_62)"
"(let-values(((...nder/expand/main.rkt:101:45_63) lookup17.1)"
"((temp72_67)(if alternate-id_49 s_47 #f))"
"((temp73_68)(expand-context-in-local-expand? ctx_48)))"
"(lookup15.1 temp72_67 #t temp73_68 #t binding69_64 ctx70_65 id71_66))))"
"(dispatch t_60 insp-of-t_62 s_47 id_50 ctx_48 binding_53 primitive?_61))))))))))))"
"(define-values"
"(expand-id-application-form)"
"(lambda(s_69 ctx_70 alternate-id_71)"
"(let-values(((id_72)(let-values()(if or-part_73 or-part_73(car(syntax-e/no-taint s_69))))))"
"(if(free-id-set-member?(expand-context-stops ctx_70)(expand-context-phase ctx_70) id_72)"
"(let-values()"
"(begin"
"(let-values(((obs_74)(expand-context-observer ctx_70)))"
"(if obs_74"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_70))"
"(let-values()"
"(begin"
"(call-expand-observe obs_74 'enter-prim s_69)"
"(call-expand-observe obs_74 'prim-stop)"
"(call-expand-observe obs_74 'exit-prim s_69)"
"(call-expand-observe obs_74 'return s_69)))"
"(void)))"
"(void)))"
" s_69))"
"(let-values()"
"(let-values(((binding_75)"
"(let-values(((temp75_78)(expand-context-phase ctx_70))"
"((temp76_79) 'ambiguous)"
"((temp77_80) #t))"
"(resolve+shift30.1 temp76_79 #t #f #f #f #f temp77_80 #t #f #f id74_77 temp75_78))))"
"(begin"
"(let-values(((obs_81)(expand-context-observer ctx_70)))"
"(if obs_81"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_70))"
"(let-values()(call-expand-observe obs_81 'resolve id_72))"
"(void)))"
"(void)))"
"(if(eq? binding_75 'ambiguous)"
"(let-values()(raise-ambiguous-error id_72 ctx_70))"
"(if(not binding_75)"
"(let-values()(expand-implicit '#%app(substitute-alternate-id s_69 alternate-id_71) ctx_70 id_72))"
"(let-values()"
"(let-values(((t_82 primitive?_83 insp-of-t_84)"
"(let-values(((...nder/expand/main.rkt:123:45_85) lookup17.1)"
"((temp81_89)(if alternate-id_71(car(syntax-e/no-taint s_69)) #f))"
"((temp82_90)(expand-context-in-local-expand? ctx_70)))"
"(lookup15.1 temp81_89 #t temp82_90 #t binding78_86 ctx79_87 id80_88))))"
"(if(variable? t_82)"
"(let-values()"
"(expand-implicit '#%app(substitute-alternate-id s_69 alternate-id_71) ctx_70 id_72))"
"(let-values()"
"(dispatch t_82 insp-of-t_84 s_69 id_72 ctx_70 binding_75 primitive?_83))))))))))))))"
"(define-values"
"(expand-implicit)"
"(lambda(sym_91 s_92 ctx_93 trigger-id_94)"
"(let-values(((disarmed-s_95)(syntax-disarm$1 s_92)))"
"(let-values(((id_96)(datum->syntax$1 disarmed-s_95 sym_91)))"
"(if(free-id-set-member?(expand-context-stops ctx_93)(expand-context-phase ctx_93) id_96)"
"(let-values()"
"(begin"
"(let-values(((obs_97)(expand-context-observer ctx_93)))"
"(if obs_97"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_93))"
"(let-values()"
"(begin"
"(call-expand-observe obs_97 'enter-prim s_92)"
"(call-expand-observe obs_97 'prim-stop)"
"(call-expand-observe obs_97 'exit-prim s_92)"
"(call-expand-observe obs_97 'return s_92)))"
"(void)))"
"(void)))"
" s_92))"
"(let-values()"
"(let-values(((b_98)"
"(let-values(((temp84_101)(expand-context-phase ctx_93))"
"((temp85_102) 'ambiguous)"
"((temp86_103) #t))"
"(resolve+shift30.1 temp85_102 #t #f #f #f #f temp86_103 #t #f #f id83_100 temp84_101))))"
"(if(eq? b_98 'ambiguous)"
"(let-values()(raise-ambiguous-error id_96 ctx_93))"
"(let-values()"
"(let-values(((t_104 primitive?_105 insp-of-t_106)"
"(if b_98"
"(let-values()(lookup15.1 #f #f #f #f b87_107 ctx88_108 id89_109))"
"(values #f #f #f))))"
"(if(transformer? t_104)"
"(let-values()"
"(dispatch-transformer"
" t_104"
" insp-of-t_106"
"(make-explicit sym_91 s_92 disarmed-s_95)"
" id_96"
" ctx_93"
" b_98))"
"(if(expand-context-only-immediate? ctx_93)"
"(let-values()"
"(begin"
"(let-values(((obs_110)(expand-context-observer ctx_93)))"
"(if obs_110"
"(let-values()(let-values()(call-expand-observe obs_110 'exit-check s_92)))"
"(void)))"
" s_92))"
"(if(core-form? t_104)"
"(let-values()"
"(if(if(eq? sym_91 '#%top)"
"(if(eq?(core-form-name t_104) '#%top)(expand-context-in-local-expand? ctx_93) #f)"
" #f)"
"(let-values()(dispatch-implicit-#%top-core-form t_104 s_92 ctx_93))"
"(let-values()"
"(dispatch-core-form t_104(make-explicit sym_91 s_92 disarmed-s_95) ctx_93))))"
"(let-values()"
"(let-values(((tl-id_111)"
"(if(eq? sym_91 '#%top)"
"(if(root-expand-context-top-level-bind-scope ctx_93)"
"(add-scope s_92(root-expand-context-top-level-bind-scope ctx_93))"
" #f)"
" #f)))"
"(let-values(((tl-b_112)"
"(if tl-id_111"
"(let-values(((temp91_114)(expand-context-phase ctx_93)))"
"(resolve29.1 #f #f #f #f #f #f #f #f tl-id90_113 temp91_114))"
" #f)))"
"(if tl-b_112"
"(let-values()"
"(if(expand-context-to-parsed? ctx_93)(parsed-id2.1 tl-id_111 tl-b_112) tl-id_111))"
"(let-values()"
"(raise-syntax-implicit-error s_92 sym_91 trigger-id_94 ctx_93)))))))))))))))))))"
"(define-values"
"(expand-already-expanded)"
"(lambda(s_115 ctx_116)"
"(let-values(((ae_117)(syntax-e$1 s_115)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_119)(syntax-any-macro-scopes? s_115)))"
"(if or-part_119"
" or-part_119"
"(not"
"(eq?(expand-context-binding-layer ctx_116)(already-expanded-binding-layer ae_117)))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                            \"expanded syntax not in its original lexical context;\\n\""
"                            \" extra bindings or scopes in the current context\")"
"(already-expanded-s ae_117)))"
"(void))"
"(values))))"
"(let-values(((result-s_118)(syntax-track-origin$1(already-expanded-s ae_117) s_115)))"
"(begin"
"(let-values(((obs_120)(expand-context-observer ctx_116)))"
"(if obs_120"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_120 'tag result-s_118)"
"(call-expand-observe obs_120 'opaque-expr result-s_118))))"
"(void)))"
"(if(expand-context-to-parsed? ctx_116)"
"(let-values()(expand5.1 #f #f result-s92_121 ctx93_122))"
" result-s_118)))))))"
"(define-values"
"(make-explicit)"
"(lambda(sym_123 s_124 disarmed-s_125)"
"(syntax-rearm$1(datum->syntax$1 disarmed-s_125(cons sym_123 disarmed-s_125) s_124 s_124) s_124)))"
"(define-values"
"(dispatch)"
"(lambda(t_126 insp-of-t_127 s_128 id_129 ctx_130 binding_131 primitive?_132)"
"(if(core-form? t_126)"
"(let-values()(dispatch-core-form t_126 s_128 ctx_130))"
"(if(transformer? t_126)"
"(let-values()(dispatch-transformer t_126 insp-of-t_127 s_128 id_129 ctx_130 binding_131))"
"(if(variable? t_126)"
"(let-values()(dispatch-variable t_126 s_128 id_129 ctx_130 binding_131 primitive?_132))"
"          (let-values () (raise-syntax-error$1 #f \"illegal use of syntax\" s_128)))))))"
"(define-values"
"(dispatch-core-form)"
"(lambda(t_133 s_134 ctx_135)"
"(if(expand-context-only-immediate? ctx_135)"
"(let-values()"
"(begin"
"(let-values(((obs_136)(expand-context-observer ctx_135)))"
"(if obs_136(let-values()(let-values()(call-expand-observe obs_136 'exit-check s_134)))(void)))"
" s_134))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_138)(expand-context-observer ctx_135)))"
"(if obs_138"
"(let-values()(let-values()(call-expand-observe obs_138 'enter-prim s_134)))"
"(void)))"
"(values))))"
"(let-values(((result-s_137)((core-form-expander t_133) s_134 ctx_135)))"
"(begin"
"(let-values(((obs_139)(expand-context-observer ctx_135)))"
"(if obs_139"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_139 'exit-prim result-s_137)"
"(call-expand-observe obs_139 'return result-s_137))))"
"(void)))"
" result-s_137)))))))"
"(define-values"
"(dispatch-implicit-#%top-core-form)"
"(lambda(t_140 s_141 ctx_142)"
"(let-values((()"
"(begin"
"(let-values(((obs_144)(expand-context-observer ctx_142)))"
"(if obs_144"
"(let-values()(let-values()(call-expand-observe obs_144 'enter-prim s_141)))"
"(void)))"
"(values))))"
"(let-values(((result-s_143)((core-form-expander t_140) s_141 ctx_142 #t)))"
"(begin"
"(let-values(((obs_145)(expand-context-observer ctx_142)))"
"(if obs_145"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_145 'exit-prim result-s_143)"
"(call-expand-observe obs_145 'return result-s_143))))"
"(void)))"
" result-s_143)))))"
"(define-values"
"(dispatch-transformer)"
"(lambda(t_146 insp-of-t_147 s_148 id_149 ctx_150 binding_151)"
"(if(not-in-this-expand-context? t_146 ctx_150)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_153)(expand-context-observer ctx_150)))"
"(if obs_153"
"(let-values()(let-values()(call-expand-observe obs_153 'enter-macro s_148)))"
"(void)))"
"(values))))"
"(let-values(((adj-s_152)"
"(avoid-current-expand-context(substitute-alternate-id s_148 id_149) t_146 ctx_150)))"
"(begin"
"(let-values(((obs_154)(expand-context-observer ctx_150)))"
"(if obs_154(let-values()(let-values()(call-expand-observe obs_154 'exit-macro s_148)))(void)))"
"(let-values()(expand5.1 #f #f adj-s94_155 ctx95_156))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_159)(expand-context-observer ctx_150)))"
"(if obs_159"
"(let-values()"
"(if(expand-context-only-immediate? ctx_150)"
"(let-values()"
"(begin"
"(call-expand-observe obs_159 'visit s_148)"
"(call-expand-observe obs_159 'resolves id_149)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-s_157 re-ctx_158)"
"(if(1/rename-transformer? t_146)"
"(values s_148 ctx_150)"
"(apply-transformer t_146 insp-of-t_147 s_148 id_149 ctx_150 binding_151))))"
"(begin"
"(let-values(((obs_160)(expand-context-observer ctx_150)))"
"(if obs_160"
"(let-values()"
"(if(expand-context-only-immediate? ctx_150)"
"(let-values()(call-expand-observe obs_160 'return exp-s_157))"
"(void)))"
"(void)))"
"(if(expand-context-just-once? ctx_150)"
"(let-values() exp-s_157)"
"(let-values()"
"(let-values(((temp98_164)"
"(if(1/rename-transformer? t_146)"
"(syntax-track-origin$1"
"(rename-transformer-target-in-context t_146 ctx_150)"
" id_149"
" id_149)"
" #f)))"
"(expand5.1 temp98_164 #t exp-s96_162 re-ctx97_163)))))))))))"
"(define-values"
"(dispatch-variable)"
"(lambda(t_165 s_166 id_167 ctx_168 binding_169 primitive?_170)"
"(if(expand-context-only-immediate? ctx_168)"
"(let-values()"
"(begin"
"(let-values(((obs_171)(expand-context-observer ctx_168)))"
"(if obs_171(let-values()(let-values()(call-expand-observe obs_171 'exit-check s_166)))(void)))"
" id_167))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_173)(expand-context-observer ctx_168)))"
"(if obs_173"
"(let-values()(let-values()(call-expand-observe obs_173 'variable s_166)))"
"(void)))"
"(values))))"
"(let-values((()(begin(register-variable-referenced-if-local! binding_169)(values))))"
"(let-values(((result-s_172)"
"(let-values(((temp101_177)"
"(free-id-set-empty-or-just-module*?(expand-context-stops ctx_168))))"
"(substitute-variable6.1 temp101_177 id99_175 t100_176))))"
"(if(expand-context-to-parsed? ctx_168)"
"(let-values()"
"(if primitive?_170"
"(parsed-primitive-id3.1 result-s_172 binding_169)"
"(parsed-id2.1 result-s_172 binding_169)))"
"(let-values()"
"(begin"
"(let-values(((obs_178)(expand-context-observer ctx_168)))"
"(if obs_178"
"(let-values()(let-values()(call-expand-observe obs_178 'return result-s_172)))"
"(void)))"
" result-s_172))))))))))"
"(define-values"
"(apply-transformer)"
"(lambda(t_179 insp-of-t_180 s_181 id_182 ctx_183 binding_184)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_197)(expand-context-observer ctx_183)))"
"(if obs_197"
"(let-values()(let-values()(call-expand-observe obs_197 'enter-macro s_181)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_185)(syntax-disarm$1 s_181)))"
"(let-values(((intro-scope_186)(new-scope 'macro)))"
"(let-values(((intro-s_187)(flip-scope disarmed-s_185 intro-scope_186)))"
"(let-values(((use-s_188 use-scopes_189)(maybe-add-use-site-scope intro-s_187 ctx_183 binding_184)))"
"(let-values(((cleaned-s_190)(syntax-remove-taint-dispatch-properties use-s_188)))"
"(let-values(((def-ctx-scopes_191)(box null)))"
"(let-values(((transformed-s_192)"
"(apply-transformer-in-context"
" t_179"
" cleaned-s_190"
" ctx_183"
" insp-of-t_180"
" intro-scope_186"
" use-scopes_189"
" def-ctx-scopes_191"
" id_182)))"
"(let-values(((result-s_193)(flip-scope transformed-s_192 intro-scope_186)))"
"(let-values(((post-s_194)(maybe-add-post-expansion-scope result-s_193 ctx_183)))"
"(let-values(((tracked-s_195)(syntax-track-origin$1 post-s_194 cleaned-s_190 id_182)))"
"(let-values(((rearmed-s_196)"
"(taint-dispatch"
" tracked-s_195"
"(lambda(t-s_198)(syntax-rearm$1 t-s_198 s_181))"
"(expand-context-phase ctx_183))))"
"(begin"
"(let-values(((obs_199)(expand-context-observer ctx_183)))"
"(if obs_199"
"(let-values()"
"(let-values()(call-expand-observe obs_199 'exit-macro rearmed-s_196)))"
"(void)))"
"(values"
" rearmed-s_196"
"(accumulate-def-ctx-scopes ctx_183 def-ctx-scopes_191))))))))))))))))))"
"(define-values"
"(apply-transformer-in-context)"
"(lambda(t_200 cleaned-s_201 ctx_202 insp-of-t_203 intro-scope_204 use-scopes_205 def-ctx-scopes_206 id_207)"
"(let-values((()"
"(begin"
"(let-values(((obs_212)(expand-context-observer ctx_202)))"
"(if obs_212"
"(let-values()(let-values()(call-expand-observe obs_212 'macro-pre-x cleaned-s_201)))"
"(void)))"
"(values))))"
"(let-values(((confine-def-ctx-scopes?_208)"
"(not"
"(let-values(((or-part_213)(expand-context-only-immediate? ctx_202)))"
"(if or-part_213"
" or-part_213"
"(not(free-id-set-empty-or-just-module*?(expand-context-stops ctx_202))))))))"
"(let-values(((accum-ctx_209)"
"(if(if confine-def-ctx-scopes?_208"
"(if(expand-context-def-ctx-scopes ctx_202)"
"(not(null?(unbox(expand-context-def-ctx-scopes ctx_202))))"
" #f)"
" #f)"
"(accumulate-def-ctx-scopes ctx_202(expand-context-def-ctx-scopes ctx_202))"
" ctx_202)))"
"(let-values(((m-ctx_210)"
"(let-values()"
"(if(expand-context? the-struct_214)"
"(let-values(((current-introduction-scopes102_215)(cons intro-scope_204 use-scopes_205))"
"((def-ctx-scopes103_216)"
"(if confine-def-ctx-scopes?_208"
" def-ctx-scopes_206"
"(expand-context-def-ctx-scopes ctx_202))))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_214)"
"(root-expand-context-post-expansion-scope the-struct_214)"
"(root-expand-context-top-level-bind-scope the-struct_214)"
"(root-expand-context-all-scopes-stx the-struct_214)"
"(root-expand-context-use-site-scopes the-struct_214)"
"(root-expand-context-defined-syms the-struct_214)"
"(root-expand-context-frame-id the-struct_214)"
"(root-expand-context-counter the-struct_214)"
"(root-expand-context-lift-key the-struct_214)"
"(expand-context-to-parsed? the-struct_214)"
"(expand-context-context the-struct_214)"
"(expand-context-phase the-struct_214)"
"(expand-context-namespace the-struct_214)"
"(expand-context-env the-struct_214)"
"(expand-context-user-env the-struct_214)"
"(expand-context-post-expansion-scope-action the-struct_214)"
"(expand-context-scopes the-struct_214)"
" def-ctx-scopes103_216"
"(expand-context-binding-layer the-struct_214)"
"(expand-context-reference-records the-struct_214)"
"(expand-context-only-immediate? the-struct_214)"
"(expand-context-just-once? the-struct_214)"
"(expand-context-module-begin-k the-struct_214)"
"(expand-context-need-eventually-defined the-struct_214)"
"(expand-context-allow-unbound? the-struct_214)"
"(expand-context-in-local-expand? the-struct_214)"
"(expand-context-stops the-struct_214)"
" current-introduction-scopes102_215"
"(expand-context-declared-submodule-names the-struct_214)"
"(expand-context-lifts the-struct_214)"
"(expand-context-lift-envs the-struct_214)"
"(expand-context-module-lifts the-struct_214)"
"(expand-context-require-lifts the-struct_214)"
"(expand-context-to-module-lifts the-struct_214)"
"(expand-context-requires+provides the-struct_214)"
"(expand-context-name the-struct_214)"
"(expand-context-observer the-struct_214)))"
"                            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_214)))))"
"(let-values(((transformed-s_211)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" m-ctx_210"
" 1/current-namespace"
"(namespace->namespace-at-phase"
"(expand-context-namespace ctx_202)"
"(add1(expand-context-phase ctx_202)))"
" current-module-code-inspector"
"(let-values()(if or-part_217 or-part_217(current-module-code-inspector))))"
"(let-values()"
"(call-with-continuation-barrier"
"(lambda()((transformer->procedure t_200) cleaned-s_201)))))))"
"(begin"
"(let-values(((obs_218)(expand-context-observer ctx_202)))"
"(if obs_218"
"(let-values()(let-values()(call-expand-observe obs_218 'macro-post-x transformed-s_211)))"
"(void)))"
"(if(syntax?$1 transformed-s_211)"
"(void)"
"(let-values()"
"(raise-arguments-error"
"(syntax-e$1 id_207)"
"                     \"received value from syntax expander was not syntax\""
"                     \"received\""
" transformed-s_211)))"
" transformed-s_211))))))))"
"(define-values"
"(maybe-add-use-site-scope)"
"(lambda(s_219 ctx_220 binding_221)"
"(if(if(root-expand-context-use-site-scopes ctx_220)"
"(matching-frame?(root-expand-context-frame-id ctx_220)(binding-frame-id binding_221))"
" #f)"
"(let-values()"
"(let-values(((sc_222)(new-scope 'use-site)))"
"(let-values(((b_223)(root-expand-context-use-site-scopes ctx_220)))"
"(begin(set-box! b_223(cons sc_222(unbox b_223)))(values(add-scope s_219 sc_222)(list sc_222))))))"
"(let-values()(values s_219 null)))))"
"(define-values"
"(matching-frame?)"
"(lambda(current-frame-id_224 bind-frame-id_225)"
"(if current-frame-id_224"
"(let-values(((or-part_226)(eq? current-frame-id_224 bind-frame-id_225)))"
"(if or-part_226 or-part_226(eq? current-frame-id_224 'all)))"
" #f)))"
"(define-values"
"(maybe-add-post-expansion-scope)"
"(lambda(s_227 ctx_228)"
"(if(root-expand-context-post-expansion-scope ctx_228)"
"(let-values()"
"((expand-context-post-expansion-scope-action ctx_228) s_227(root-expand-context-post-expansion-scope ctx_228)))"
"(let-values() s_227))))"
"(define-values"
"(accumulate-def-ctx-scopes)"
"(lambda(ctx_229 def-ctx-scopes_230)"
"(if(null?(unbox def-ctx-scopes_230))"
" ctx_229"
"(let-values()"
"(if(expand-context? the-struct_231)"
"(let-values(((scopes104_232)(append(unbox def-ctx-scopes_230)(expand-context-scopes ctx_229))))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_231)"
"(root-expand-context-post-expansion-scope the-struct_231)"
"(root-expand-context-top-level-bind-scope the-struct_231)"
"(root-expand-context-all-scopes-stx the-struct_231)"
"(root-expand-context-use-site-scopes the-struct_231)"
"(root-expand-context-defined-syms the-struct_231)"
"(root-expand-context-frame-id the-struct_231)"
"(root-expand-context-counter the-struct_231)"
"(root-expand-context-lift-key the-struct_231)"
"(expand-context-to-parsed? the-struct_231)"
"(expand-context-context the-struct_231)"
"(expand-context-phase the-struct_231)"
"(expand-context-namespace the-struct_231)"
"(expand-context-env the-struct_231)"
"(expand-context-user-env the-struct_231)"
"(expand-context-post-expansion-scope-action the-struct_231)"
" scopes104_232"
"(expand-context-def-ctx-scopes the-struct_231)"
"(expand-context-binding-layer the-struct_231)"
"(expand-context-reference-records the-struct_231)"
"(expand-context-only-immediate? the-struct_231)"
"(expand-context-just-once? the-struct_231)"
"(expand-context-module-begin-k the-struct_231)"
"(expand-context-need-eventually-defined the-struct_231)"
"(expand-context-allow-unbound? the-struct_231)"
"(expand-context-in-local-expand? the-struct_231)"
"(expand-context-stops the-struct_231)"
"(expand-context-current-introduction-scopes the-struct_231)"
"(expand-context-declared-submodule-names the-struct_231)"
"(expand-context-lifts the-struct_231)"
"(expand-context-lift-envs the-struct_231)"
"(expand-context-module-lifts the-struct_231)"
"(expand-context-require-lifts the-struct_231)"
"(expand-context-to-module-lifts the-struct_231)"
"(expand-context-requires+provides the-struct_231)"
"(expand-context-name the-struct_231)"
"(expand-context-observer the-struct_231)))"
"          (raise-argument-error 'struct-copy \"expand-context?\" the-struct_231))))))"
"(define-values"
"(lookup15.1)"
"(lambda(in8_233"
" in10_234"
" out-of-context-as-variable?9_235"
" out-of-context-as-variable?11_236"
" b12_237"
" ctx13_238"
" id14_239)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((in-s_243)(if in10_234 in8_233 #f)))"
"(let-values(((out-of-context-as-variable?_244)"
"(if out-of-context-as-variable?11_236 out-of-context-as-variable?9_235 #f)))"
"(let-values()"
"(let-values(((temp106_247)(expand-context-env ctx_241))"
"((temp107_248)(expand-context-lift-envs ctx_241))"
"((temp108_249)(expand-context-namespace ctx_241))"
"((temp109_250)(expand-context-phase ctx_241)))"
"(binding-lookup48.1"
" in-s111_252"
" #t"
" out-of-context-as-variable?112_253"
" #t"
" b105_246"
" temp106_247"
" temp107_248"
" temp108_249"
" temp109_250"
" id110_251))))))))))"
"(define-values"
"(unpack16.1)"
"(lambda(given-kws_254 given-args_255 b12_256 ctx13_257 id14_258)"
"(let-values(((in10_259)(if(pair? given-kws_254)(eq? '#:in(car given-kws_254)) #f)))"
"(let-values(((in8_260)(if in10_259(car given-args_255)(void)))"
"((given-kws_261)(if in10_259(cdr given-kws_254) given-kws_254))"
"((given-args_262)(if in10_259(cdr given-args_255) given-args_255)))"
"(let-values(((out-of-context-as-variable?11_263)(pair? given-kws_261)))"
"(let-values(((out-of-context-as-variable?9_264)"
"(if out-of-context-as-variable?11_263(car given-args_262)(void))))"
"(lookup15.1"
" in8_260"
" in10_259"
" out-of-context-as-variable?9_264"
" out-of-context-as-variable?11_263"
" b12_256"
" ctx13_257"
" id14_258)))))))"
"(define-values"
"(lookup17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_265 given-argc_266)"
"(if(= given-argc_266 5)"
"(let-values()"
"(let-values(((l1_268)(if(null? l1_267) l1_267(if(eq?(car l1_267) '#:in)(cdr l1_267) l1_267))))"
"(let-values()"
"(let-values(((l1_270)"
"(if(null? l1_269)"
" l1_269"
"(if(eq?(car l1_269) '#:out-of-context-as-variable?)(cdr l1_269) l1_269))))"
"(null? l1_270)))))"
" #f))"
"(case-lambda"
"((given-kws_271 given-args_272 b_273 ctx_274 id_275)"
"(unpack16.1 given-kws_271 given-args_272 b_273 ctx_274 id_275)))"
" null"
" '(#:in #:out-of-context-as-variable?)"
"(let-values(((lookup_276)(case-lambda((b_277 ctx_278 id_279)(unpack16.1 null null b_277 ctx_278 id_279)))))"
" lookup_276)))"
"(define-values"
"(substitute-alternate-id)"
"(lambda(s_280 alternate-id_281)"
"(if(not alternate-id_281)"
"(let-values() s_280)"
"(if(identifier? s_280)"
"(let-values()(syntax-rearm$1(syntax-track-origin$1 alternate-id_281 s_280) s_280))"
"(let-values()"
"(let-values(((disarmed-s_282)(syntax-disarm$1 s_280)))"
"(syntax-rearm$1"
"(syntax-track-origin$1"
"(datum->syntax$1 disarmed-s_282(cons alternate-id_281(cdr(syntax-e$1 disarmed-s_282))) s_280)"
" s_280)"
" s_280)))))))"
"(define-values"
"(register-variable-referenced-if-local!)"
"(lambda(binding_283)"
"(if(if(local-binding? binding_283)(reference-record?(binding-frame-id binding_283)) #f)"
"(let-values()(reference-record-used!(binding-frame-id binding_283)(local-binding-key binding_283)))"
"(void))))"
"(define-values"
"(expand/capture-lifts28.1)"
"(lambda(always-wrap?21_284"
" always-wrap?25_285"
" begin-form?19_286"
" begin-form?23_287"
" expand-lifts?18_288"
" expand-lifts?22_289"
" lift-key20_290"
" lift-key24_291"
" s26_292"
" ctx27_293)"
"(let-values()"
"(let-values()"
"(let-values(((expand-lifts?_296)(if expand-lifts?22_289 expand-lifts?18_288 #f)))"
"(let-values(((begin-form?_297)(if begin-form?23_287 begin-form?19_286 #f)))"
"(let-values(((lift-key_298)(if lift-key24_291 lift-key20_290(generate-lift-key))))"
"(let-values(((always-wrap?_299)(if always-wrap?25_285 always-wrap?21_284 #f)))"
"(let-values()"
"(let-values(((context_300)(expand-context-context ctx_295)))"
"(let-values(((phase_301)(expand-context-phase ctx_295)))"
"(let-values(((local?_302)(not begin-form?_297)))"
"((letrec-values(((loop_303)"
"(lambda(s_304 always-wrap?_305 ctx_306)"
"(let-values(((lift-env_307)(if local?_302(box empty-env) #f)))"
"(let-values(((lift-ctx_308)"
"(let-values(((temp113_314)"
"(if local?_302"
"(make-local-lift"
" lift-env_307"
"(root-expand-context-counter ctx_306))"
"(make-top-level-lift ctx_306)))"
"((temp114_315)"
"(if(not local?_302)"
"(eq? context_300 'module)"
" #f)))"
"(make-lift-context6.1 temp114_315 #t temp113_314))))"
"(let-values(((capture-ctx_309)"
"(let-values()"
"(if(expand-context? the-struct_316)"
"(let-values(((lift-envs117_319)"
"(if local?_302"
"(cons"
" lift-env_307"
"(expand-context-lift-envs ctx_306))"
"(expand-context-lift-envs ctx_306)))"
"((module-lifts118_320)"
"(if(let-values()"
"(if or-part_321"
" or-part_321"
"(not"
"(memq"
" context_300"
" '(top-level module)))))"
"(expand-context-module-lifts ctx_306)"
" lift-ctx_308)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_316)"
"(root-expand-context-post-expansion-scope"
" the-struct_316)"
"(root-expand-context-top-level-bind-scope"
" the-struct_316)"
"(root-expand-context-all-scopes-stx the-struct_316)"
"(root-expand-context-use-site-scopes"
" the-struct_316)"
"(root-expand-context-defined-syms the-struct_316)"
"(root-expand-context-frame-id the-struct_316)"
"(root-expand-context-counter the-struct_316)"
" lift-key115_317"
"(expand-context-to-parsed? the-struct_316)"
"(expand-context-context the-struct_316)"
"(expand-context-phase the-struct_316)"
"(expand-context-namespace the-struct_316)"
"(expand-context-env the-struct_316)"
"(expand-context-user-env the-struct_316)"
"(expand-context-post-expansion-scope-action"
" the-struct_316)"
"(expand-context-scopes the-struct_316)"
"(expand-context-def-ctx-scopes the-struct_316)"
"(expand-context-binding-layer the-struct_316)"
"(expand-context-reference-records the-struct_316)"
"(expand-context-only-immediate? the-struct_316)"
"(expand-context-just-once? the-struct_316)"
"(expand-context-module-begin-k the-struct_316)"
"(expand-context-need-eventually-defined"
" the-struct_316)"
"(expand-context-allow-unbound? the-struct_316)"
"(expand-context-in-local-expand? the-struct_316)"
"(expand-context-stops the-struct_316)"
"(expand-context-current-introduction-scopes"
" the-struct_316)"
"(expand-context-declared-submodule-names"
" the-struct_316)"
" lifts116_318"
" lift-envs117_319"
" module-lifts118_320"
"(expand-context-require-lifts the-struct_316)"
"(expand-context-to-module-lifts the-struct_316)"
"(expand-context-requires+provides the-struct_316)"
"(expand-context-name the-struct_316)"
"(expand-context-observer the-struct_316)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                   \"expand-context?\""
" the-struct_316)))))"
"(let-values(((exp-s_310)"
"(let-values()"
"(expand5.1 #f #f s119_322 capture-ctx120_323))))"
"(let-values(((lifts_311)"
"(get-and-clear-lifts!"
"(expand-context-lifts capture-ctx_309))))"
"(let-values(((with-lifts-s_312)"
"(if(let-values(((or-part_324)(pair? lifts_311)))"
"(if or-part_324 or-part_324 always-wrap?_305))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_306)"
"(let-values()"
"(begin"
"(if expand-lifts?_296"
"(void)"
"(let-values()"
"(error"
"                                                                                   \"internal error: to-parsed mode without expanding lifts\")))"
"(wrap-lifts-as-parsed-let"
" lifts_311"
" exp-s_310"
" s_304"
" ctx_306"
"(lambda(rhs_325 rhs-ctx_326)"
"(loop_303 rhs_325 #f rhs-ctx_326)))))"
"(let-values()"
"(if begin-form?_297"
"(let-values()"
"(wrap-lifts-as-begin15.1"
" #f"
" #f"
" lifts121_327"
" exp-s122_328"
" s123_329"
" phase124_330))"
"(wrap-lifts-as-let"
" lifts_311"
" exp-s_310"
" s_304"
" phase_301)))))"
"(let-values() exp-s_310))))"
"(if(let-values(((or-part_331)(not expand-lifts?_296)))"
"(if or-part_331"
" or-part_331"
"(let-values(((or-part_332)(null? lifts_311)))"
"(if or-part_332"
" or-part_332"
"(expand-context-to-parsed? ctx_306)))))"
"(let-values() with-lifts-s_312)"
"(let-values()"
"(begin"
"(let-values(((obs_333)"
"(expand-context-observer ctx_306)))"
"(if obs_333"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_333"
" 'lift-loop"
" with-lifts-s_312)))"
"(void)))"
"(loop_303 with-lifts-s_312 #f ctx_306)))))))))))))"
" loop_303)"
" s_294"
" always-wrap?_299"
" ctx_295)))))))))))))"
"(define-values"
"(expand-transformer43.1)"
"(lambda(always-wrap?35_369"
" always-wrap?40_370"
" begin-form?32_371"
" begin-form?37_372"
" context31_373"
" context36_374"
" expand-lifts?33_375"
" expand-lifts?38_376"
" lift-key34_377"
" lift-key39_378"
" s41_379"
" ctx42_380)"
"(let-values()"
"(let-values()"
"(let-values(((context_383)(if context36_374 context31_373 'expression)))"
"(let-values(((begin-form?_384)(if begin-form?37_372 begin-form?32_371 #f)))"
"(let-values(((expand-lifts?_385)(if expand-lifts?38_376 expand-lifts?33_375 #t)))"
"(let-values(((lift-key_386)(if lift-key39_378 lift-key34_377(generate-lift-key))))"
"(let-values(((always-wrap?_387)(if always-wrap?40_370 always-wrap?35_369 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((trans-ctx_388)(context->transformer-context ctx_382 context_383)))"
"(let-values()"
"(expand/capture-lifts28.1"
" always-wrap?130_395"
" #t"
" begin-form?128_393"
" #t"
" expand-lifts?127_392"
" #t"
" lift-key129_394"
" #t"
" s125_390"
" trans-ctx126_391))))))))))))))"
"(define-values"
"(context->transformer-context)"
"(let-values(((context->transformer-context49_437)"
"(lambda(ctx48_438 context46_439 context47_440)"
"(let-values()"
"(let-values(((context_442)(if context47_440 context46_439 'expression)))"
"(let-values()"
"(let-values(((phase_443)(add1(expand-context-phase ctx_441))))"
"(let-values(((ns_444)"
"(namespace->namespace-at-phase(expand-context-namespace ctx_441) phase_443)))"
"(begin"
"(namespace-visit-available-modules! ns_444 phase_443)"
"(let-values()"
"(if(expand-context? the-struct_445)"
"(let-values(((scopes132_447) null)"
"((only-immediate?136_451) #f)"
"((def-ctx-scopes137_452) #f)"
"((post-expansion-scope138_453) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_445)"
" post-expansion-scope138_453"
"(root-expand-context-top-level-bind-scope the-struct_445)"
"(root-expand-context-all-scopes-stx the-struct_445)"
"(root-expand-context-use-site-scopes the-struct_445)"
"(root-expand-context-defined-syms the-struct_445)"
"(root-expand-context-frame-id the-struct_445)"
"(root-expand-context-counter the-struct_445)"
"(root-expand-context-lift-key the-struct_445)"
"(expand-context-to-parsed? the-struct_445)"
" context131_446"
" phase133_448"
" namespace134_449"
" env135_450"
"(expand-context-user-env the-struct_445)"
"(expand-context-post-expansion-scope-action the-struct_445)"
" scopes132_447"
" def-ctx-scopes137_452"
"(expand-context-binding-layer the-struct_445)"
"(expand-context-reference-records the-struct_445)"
" only-immediate?136_451"
"(expand-context-just-once? the-struct_445)"
"(expand-context-module-begin-k the-struct_445)"
"(expand-context-need-eventually-defined the-struct_445)"
"(expand-context-allow-unbound? the-struct_445)"
"(expand-context-in-local-expand? the-struct_445)"
"(expand-context-stops the-struct_445)"
"(expand-context-current-introduction-scopes the-struct_445)"
"(expand-context-declared-submodule-names the-struct_445)"
"(expand-context-lifts the-struct_445)"
"(expand-context-lift-envs the-struct_445)"
"(expand-context-module-lifts the-struct_445)"
"(expand-context-require-lifts the-struct_445)"
"(expand-context-to-module-lifts the-struct_445)"
"(expand-context-requires+provides the-struct_445)"
"(expand-context-name the-struct_445)"
"(expand-context-observer the-struct_445)))"
"                                  (raise-argument-error 'struct-copy \"expand-context?\" the-struct_445))))))))))))"
"(case-lambda"
"((ctx_454)(context->transformer-context49_437 ctx_454 #f #f))"
"((ctx_455 context46_456)(context->transformer-context49_437 ctx_455 context46_456 #t)))))"
"(define-values"
"(expand+eval-for-syntaxes-binding)"
"(lambda(rhs_457 ids_458 ctx_459)"
"(let-values(((exp-rhs_460)"
"(let-values(((temp140_464)(as-named-context ctx_459 ids_458)))"
"(expand-transformer43.1 #f #f #f #f #f #f #f #f #f #f rhs139_463 temp140_464))))"
"(let-values(((phase_461)(add1(expand-context-phase ctx_459))))"
"(let-values(((parsed-rhs_462)"
"(if(expand-context-to-parsed? ctx_459)"
" exp-rhs_460"
"(let-values(((temp142_466)(context->transformer-context(as-to-parsed-context ctx_459))))"
"(expand5.1 #f #f exp-rhs141_465 temp142_466)))))"
"(values"
" exp-rhs_460"
" parsed-rhs_462"
"(eval-for-bindings"
" ids_458"
" parsed-rhs_462"
" phase_461"
"(namespace->namespace-at-phase(expand-context-namespace ctx_459) phase_461)"
" ctx_459)))))))"
"(define-values"
"(eval-for-syntaxes-binding)"
"(lambda(rhs_467 ids_468 ctx_469)"
"(let-values(((exp-rhs_470 parsed-rhs_471 vals_472)(expand+eval-for-syntaxes-binding rhs_467 ids_468 ctx_469)))"
" vals_472)))"
"(define-values"
"(eval-for-bindings)"
"(lambda(ids_473 p_474 phase_475 ns_476 ctx_477)"
"(let-values(((compiled_478)"
"(compile-single"
" p_474"
"(let-values()(make-compile-context14.1 #f #f #f #f #f #f ns143_481 #t phase144_482 #t #f #f)))))"
"(let-values(((vals_479)"
"(call-with-values"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" ctx_477"
" 1/current-namespace"
" ns_476"
" eval-jit-enabled"
" #f)"
"(let-values()(eval-single-top compiled_478 ns_476))))"
" list)))"
"(begin"
"(if(=(length vals_479)(length ids_473))"
"(void)"
"(let-values()"
"              (error \"wrong number of results (\" (length vals_479) \"vs.\" (length ids_473) \")\" \"from\" p_474)))"
" vals_479)))))"
"(define-values(keep-properties-only)(lambda(s_483)(datum->syntax$1 #f 'props s_483 s_483)))"
"(define-values"
"(keep-as-needed55.1)"
"(lambda(for-track?51_484 for-track?52_485 ctx53_486 s54_487)"
"(let-values()"
"(let-values()"
"(let-values(((for-track?_490)(if for-track?52_485 for-track?51_484 #f)))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_488)"
"(let-values()(keep-properties-only s_489))"
"(let-values()"
"(let-values(((d_491)(if for-track?_490(syntax-e$1 s_489) #f)))"
"(syntax-rearm$1"
"(datum->syntax$1"
"(syntax-disarm$1 s_489)"
"(if(symbol? d_491)"
"(let-values() d_491)"
"(if(if(pair? d_491)(identifier?(car d_491)) #f)"
"(let-values()(syntax-e$1(car d_491)))"
"(let-values() #f)))"
" s_489"
" s_489)"
" s_489))))))))))"
"(define-values"
"(rebuild62.1)"
"(lambda(track?58_509 track?59_510 orig-s60_511 new61_512)"
"(let-values()"
"(let-values()"
"(let-values(((track?_515)(if track?59_510 track?58_509 #t)))"
"(let-values()"
"(syntax-rearm$1"
"(datum->syntax$1(syntax-disarm$1 orig-s_513) new_514 orig-s_513(if track?_515 orig-s_513 #f))"
" orig-s_513)))))))"
"(define-values"
"(attach-disappeared-transformer-bindings)"
"(lambda(s_533 trans-idss_534)"
"(if(null? trans-idss_534)"
"(let-values() s_533)"
"(let-values()"
"(syntax-property$1"
" s_533"
" 'disappeared-binding"
"(append"
"(apply append trans-idss_534)"
"(let-values(((or-part_535)(syntax-property$1 s_533 'disappeared-binding)))"
"(if or-part_535 or-part_535 null))))))))"
"(define-values"
"(increment-binding-layer)"
"(lambda(ids_536 ctx_537 layer-val_538)"
"(if((letrec-values(((loop_539)"
"(lambda(ids_540)"
"(let-values(((or-part_541)(identifier? ids_540)))"
"(if or-part_541"
" or-part_541"
"(if(pair? ids_540)"
"(let-values(((or-part_542)(loop_539(car ids_540))))"
"(if or-part_542 or-part_542(loop_539(cdr ids_540))))"
" #f))))))"
" loop_539)"
" ids_536)"
" layer-val_538"
"(expand-context-binding-layer ctx_537))))"
"(define-values"
"(wrap-lifts-as-parsed-let)"
"(lambda(lifts_543 exp-s_544 s_545 ctx_546 parse-rhs_547)"
"(let-values(((idss+keyss+rhss_548)(get-lifts-as-lists lifts_543)))"
"((letrec-values(((lets-loop_549)"
"(lambda(idss+keyss+rhss_550 rhs-ctx_551)"
"(if(null? idss+keyss+rhss_550)"
"(let-values() exp-s_544)"
"(let-values()"
"(let-values(((ids_552)(caar idss+keyss+rhss_550)))"
"(let-values(((keys_553)(cadar idss+keyss+rhss_550)))"
"(let-values(((rhs_554)(caddar idss+keyss+rhss_550)))"
"(let-values(((exp-rhs_555)(parse-rhs_547 rhs_554 rhs-ctx_551)))"
"(parsed-let-values17.1"
" s_545"
"(list ids_552)"
"(list(list keys_553 exp-rhs_555))"
"(list"
"(lets-loop_549"
"(cdr idss+keyss+rhss_550)"
"(let-values()"
"(if(expand-context? the-struct_556)"
"(let-values(((env145_557)"
"(let-values()"
"(begin"
"(if(list? lst_558)"
"(void)"
"(let-values()(in-list lst_558)))"
"(if(list? lst_559)"
"(void)"
"(let-values()(in-list lst_559)))"
"((letrec-values(((for-loop_560)"
"(lambda(env_561 lst_562 lst_563)"
"(if(if(pair? lst_562)"
"(pair? lst_563)"
" #f)"
"(let-values(((id_564)"
"(unsafe-car lst_562))"
"((key_565)"
"(unsafe-car"
" lst_563)))"
"(let-values(((env_566)"
"(let-values()"
"(let-values(((env_568)"
"(let-values()"
"(env-extend"
" env_567"
" key_565"
"(local-variable1.1"
" id_564)))))"
"(values"
" env_568)))))"
"(for-loop_560"
" env_566"
"(unsafe-cdr lst_562)"
"(unsafe-cdr lst_563))))"
" env_561))))"
" for-loop_560)"
"(expand-context-env rhs-ctx_551)"
" lst_558"
" lst_559)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_556)"
"(root-expand-context-post-expansion-scope the-struct_556)"
"(root-expand-context-top-level-bind-scope the-struct_556)"
"(root-expand-context-all-scopes-stx the-struct_556)"
"(root-expand-context-use-site-scopes the-struct_556)"
"(root-expand-context-defined-syms the-struct_556)"
"(root-expand-context-frame-id the-struct_556)"
"(root-expand-context-counter the-struct_556)"
"(root-expand-context-lift-key the-struct_556)"
"(expand-context-to-parsed? the-struct_556)"
"(expand-context-context the-struct_556)"
"(expand-context-phase the-struct_556)"
"(expand-context-namespace the-struct_556)"
" env145_557"
"(expand-context-user-env the-struct_556)"
"(expand-context-post-expansion-scope-action the-struct_556)"
"(expand-context-scopes the-struct_556)"
"(expand-context-def-ctx-scopes the-struct_556)"
"(expand-context-binding-layer the-struct_556)"
"(expand-context-reference-records the-struct_556)"
"(expand-context-only-immediate? the-struct_556)"
"(expand-context-just-once? the-struct_556)"
"(expand-context-module-begin-k the-struct_556)"
"(expand-context-need-eventually-defined the-struct_556)"
"(expand-context-allow-unbound? the-struct_556)"
"(expand-context-in-local-expand? the-struct_556)"
"(expand-context-stops the-struct_556)"
"(expand-context-current-introduction-scopes the-struct_556)"
"(expand-context-declared-submodule-names the-struct_556)"
"(expand-context-lifts the-struct_556)"
"(expand-context-lift-envs the-struct_556)"
"(expand-context-module-lifts the-struct_556)"
"(expand-context-require-lifts the-struct_556)"
"(expand-context-to-module-lifts the-struct_556)"
"(expand-context-requires+provides the-struct_556)"
"(expand-context-name the-struct_556)"
"(expand-context-observer the-struct_556)))"
"(raise-argument-error"
" 'struct-copy"
"                                              \"expand-context?\""
" the-struct_556)))))))))))))))"
" lets-loop_549)"
" idss+keyss+rhss_548"
" ctx_546))))"
"(define-values"
"(rename-transformer-target-in-context)"
"(lambda(t_569 ctx_570)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) current-expand-context ctx_570)"
"(let-values()(1/rename-transformer-target t_569)))))"
"(void)"
"(void)"
"(define-values"
"(stop-ids->all-stop-ids)"
"(lambda(stop-ids_1 phase_2)"
"(if(null? stop-ids_1)"
"(let-values() stop-ids_1)"
"(let-values()"
"(let-values(((p-core-stx_3)(syntax-shift-phase-level$1 core-stx phase_2)))"
"(if(if(= 1(length stop-ids_1))"
"(free-identifier=?$1(car stop-ids_1)(datum->syntax$1 p-core-stx_3 'module*) phase_2 phase_2)"
" #f)"
"(let-values() stop-ids_1)"
"(let-values()"
"(append"
" stop-ids_1"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_6 lst_7)"
"(if(pair? lst_7)"
"(let-values(((sym_8)(unsafe-car lst_7)))"
"(let-values(((fold-var_9)"
"(let-values()"
"(let-values(((fold-var_11)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1 p-core-stx_3 sym_8))"
" fold-var_10))))"
"(values fold-var_11)))))"
"(for-loop_5 fold-var_9(unsafe-cdr lst_7))))"
" fold-var_6))))"
" for-loop_5)"
" null"
" lst_4))))))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:internal-definition-context"
" internal-definition-context1.1"
" 1/internal-definition-context?"
" internal-definition-context-frame-id"
" internal-definition-context-scope"
" internal-definition-context-add-scope?"
" internal-definition-context-env-mixins)"
"(let-values(((struct:_6 make-_7 ?_8 -ref_9 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'internal-definition-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'internal-definition-context)))))"
"(values"
" struct:_6"
" make-_7"
" ?_8"
"(make-struct-field-accessor -ref_9 0 'frame-id)"
"(make-struct-field-accessor -ref_9 1 'scope)"
"(make-struct-field-accessor -ref_9 2 'add-scope?)"
"(make-struct-field-accessor -ref_9 3 'env-mixins))))"
"(define-values"
"(struct:env-mixin env-mixin2.1 env-mixin? env-mixin-id env-mixin-sym env-mixin-value env-mixin-cache)"
"(let-values(((struct:_41 make-_42 ?_43 -ref_44 -set!_45)"
"(let-values()"
"(let-values()"
"(make-struct-type 'env-mixin #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'env-mixin)))))"
"(values"
" struct:_41"
" make-_42"
" ?_43"
"(make-struct-field-accessor -ref_44 0 'id)"
"(make-struct-field-accessor -ref_44 1 'sym)"
"(make-struct-field-accessor -ref_44 2 'value)"
"(make-struct-field-accessor -ref_44 3 'cache))))"
"(define-values"
"(1/syntax-local-make-definition-context)"
"(let-values(((syntax-local-make-definition-context7_76)"
"(lambda(parent-ctx3_77 add-scope?4_78 parent-ctx5_79 add-scope?6_80)"
"(let-values(((parent-ctx_81)(if parent-ctx5_79 parent-ctx3_77 #f)))"
"(let-values(((add-scope?_82)(if add-scope?6_80 add-scope?4_78 #t)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_87)(not parent-ctx_81)))"
"(if or-part_87 or-part_87(1/internal-definition-context? parent-ctx_81)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-make-definition-context"
"                                             \"(or/c #f internal-definition-context?)\""
" parent-ctx_81)))"
"(values))))"
"(let-values(((ctx_83)"
"(let-values(((temp38_88) 'syntax-local-make-definition-context))"
"(get-current-expand-context12.1 #f #f temp38_88 #t))))"
"(let-values(((frame-id_84)"
"(let-values(((or-part_89)(root-expand-context-frame-id ctx_83)))"
"(if or-part_89"
" or-part_89"
"(let-values(((or-part_90)"
"(if parent-ctx_81"
"(internal-definition-context-frame-id parent-ctx_81)"
" #f)))"
"(if or-part_90 or-part_90(gensym)))))))"
"(let-values(((sc_85)(new-scope 'intdef)))"
"(let-values(((def-ctx-scopes_86)(expand-context-def-ctx-scopes ctx_83)))"
"(begin"
"(if def-ctx-scopes_86"
"(void)"
"(let-values()"
"                                        (error \"internal error: no box to accumulate definition-context scopes\")))"
"(set-box! def-ctx-scopes_86(cons sc_85(unbox def-ctx-scopes_86)))"
"(internal-definition-context1.1"
" frame-id_84"
" sc_85"
" add-scope?_82"
"(box null))))))))))))))"
"(case-lambda"
"(()(syntax-local-make-definition-context7_76 #f #f #f #f))"
"((parent-ctx_91 add-scope?4_92)(syntax-local-make-definition-context7_76 parent-ctx_91 add-scope?4_92 #t #t))"
"((parent-ctx3_93)(syntax-local-make-definition-context7_76 parent-ctx3_93 #f #t #f)))))"
"(define-values"
"(1/syntax-local-bind-syntaxes)"
"(lambda(ids_94 s_95 intdef_96)"
"(let-values((()"
"(begin"
"(if(if(list? ids_94)(andmap2 identifier? ids_94) #f)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-bind-syntaxes \"(listof identifier?)\" ids_94)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_104)(not s_95)))(if or-part_104 or-part_104(syntax?$1 s_95)))"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-local-bind-syntaxes \"(or/c syntax? #f)\" s_95)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/internal-definition-context? intdef_96)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-bind-syntaxes"
"                             \"internal-definition-context?\""
" intdef_96)))"
"(values))))"
"(let-values(((ctx_97)"
"(let-values(((temp39_105) 'local-expand))"
"(get-current-expand-context12.1 #f #f temp39_105 #t))))"
"(let-values((()"
"(begin"
"(let-values(((obs_106)(expand-context-observer ctx_97)))"
"(if obs_106"
"(let-values()(let-values()(call-expand-observe obs_106 'local-bind ids_94)))"
"(void)))"
"(values))))"
"(let-values(((phase_98)(expand-context-phase ctx_97)))"
"(let-values(((intdef-env_99)(add-intdef-bindings(expand-context-env ctx_97) intdef_96)))"
"(let-values(((intdef-ids_100)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_107)(void)(let-values()(in-list lst_107)))"
"((letrec-values(((for-loop_108)"
"(lambda(fold-var_109 lst_110)"
"(if(pair? lst_110)"
"(let-values(((id_111)(unsafe-car lst_110)))"
"(let-values(((fold-var_112)"
"(let-values()"
"(let-values(((fold-var_114)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((pre-id_115)"
"(remove-use-site-scopes"
"(flip-introduction-scopes"
" id_111"
" ctx_97)"
" ctx_97)))"
"(let-values(((...finition-context.rkt:71:23_116)"
" add-intdef-scopes23.1)"
"((temp42_119)"
" #t))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" temp42_119"
" #t"
" pre-id40_117"
" intdef41_118))))"
" fold-var_113))))"
"(values fold-var_114)))))"
"(for-loop_108 fold-var_112(unsafe-cdr lst_110))))"
" fold-var_109))))"
" for-loop_108)"
" null"
" lst_107))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_120)(expand-context-observer ctx_97)))"
"(if obs_120"
"(let-values()"
"(let-values()(call-expand-observe obs_120 'rename-list intdef-ids_100)))"
"(void)))"
"(values))))"
"(let-values(((syms_101)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_121)(void)(let-values()(in-list lst_121)))"
"((letrec-values(((for-loop_122)"
"(lambda(fold-var_123 lst_124)"
"(if(pair? lst_124)"
"(let-values(((intdef-id_125)(unsafe-car lst_124)))"
"(let-values(((fold-var_126)"
"(let-values()"
"(let-values(((fold-var_128)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((temp45_132)"
"(root-expand-context-counter"
" ctx_97))"
"((temp46_133)"
"(internal-definition-context-frame-id"
" intdef_96)))"
"(add-local-binding!35.1"
" temp46_133"
" #t"
" #f"
" #f"
" intdef-id43_130"
" phase44_131"
" temp45_132)))"
" fold-var_127))))"
"(values fold-var_128)))))"
"(for-loop_122 fold-var_126(unsafe-cdr lst_124))))"
" fold-var_123))))"
" for-loop_122)"
" null"
" lst_121))))))"
"(let-values(((vals_102)"
"(if s_95"
"(let-values()"
"(let-values(((input-s_134)"
"(flip-introduction-scopes"
"(let-values(((...finition-context.rkt:79:48_136)"
" add-intdef-scopes23.1)"
"((temp49_139) #t))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" temp49_139"
" #t"
" s47_137"
" intdef48_138))"
" ctx_97)))"
"(let-values(((tmp-env_135)"
"(let-values()"
"(begin"
"(if(list? lst_140)"
"(void)"
"(let-values()(in-list lst_140)))"
"((letrec-values(((for-loop_141)"
"(lambda(env_142 lst_143)"
"(if(pair? lst_143)"
"(let-values(((sym_144)"
"(unsafe-car lst_143)))"
"(let-values(((env_145)"
"(let-values()"
"(let-values(((env_147)"
"(let-values()"
"(hash-set"
" env_146"
" sym_144"
" variable))))"
"(values"
" env_147)))))"
"(for-loop_141"
" env_145"
"(unsafe-cdr lst_143))))"
" env_142))))"
" for-loop_141)"
" intdef-env_99"
" lst_140)))))"
"(eval-for-syntaxes-binding"
" input-s_134"
" ids_94"
"(let-values(((...finition-context.rkt:84:33_148)"
" make-local-expand-context35.1)"
"((temp50_149)"
"(let-values()"
"(if(expand-context? the-struct_152)"
"(let-values()"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_152)"
"(root-expand-context-post-expansion-scope"
" the-struct_152)"
"(root-expand-context-top-level-bind-scope"
" the-struct_152)"
"(root-expand-context-all-scopes-stx the-struct_152)"
"(root-expand-context-use-site-scopes the-struct_152)"
"(root-expand-context-defined-syms the-struct_152)"
"(root-expand-context-frame-id the-struct_152)"
"(root-expand-context-counter the-struct_152)"
"(root-expand-context-lift-key the-struct_152)"
"(expand-context-to-parsed? the-struct_152)"
"(expand-context-context the-struct_152)"
"(expand-context-phase the-struct_152)"
"(expand-context-namespace the-struct_152)"
" env53_153"
"(expand-context-user-env the-struct_152)"
"(expand-context-post-expansion-scope-action"
" the-struct_152)"
"(expand-context-scopes the-struct_152)"
"(expand-context-def-ctx-scopes the-struct_152)"
"(expand-context-binding-layer the-struct_152)"
"(expand-context-reference-records the-struct_152)"
"(expand-context-only-immediate? the-struct_152)"
"(expand-context-just-once? the-struct_152)"
"(expand-context-module-begin-k the-struct_152)"
"(expand-context-need-eventually-defined"
" the-struct_152)"
"(expand-context-allow-unbound? the-struct_152)"
"(expand-context-in-local-expand? the-struct_152)"
"(expand-context-stops the-struct_152)"
"(expand-context-current-introduction-scopes"
" the-struct_152)"
"(expand-context-declared-submodule-names"
" the-struct_152)"
"(expand-context-lifts the-struct_152)"
"(expand-context-lift-envs the-struct_152)"
"(expand-context-module-lifts the-struct_152)"
"(expand-context-require-lifts the-struct_152)"
"(expand-context-to-module-lifts the-struct_152)"
"(expand-context-requires+provides the-struct_152)"
"(expand-context-name the-struct_152)"
"(expand-context-observer the-struct_152)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                  \"expand-context?\""
" the-struct_152))))"
"((temp51_150) 'expression))"
"(make-local-expand-context33.1"
" temp51_150"
" intdef52_151"
" #f"
" #f"
" #f"
" #f"
" temp50_149))))))"
"(let-values()"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_154)(void)(let-values()(in-list lst_154)))"
"((letrec-values(((for-loop_155)"
"(lambda(fold-var_156 lst_157)"
"(if(pair? lst_157)"
"(let-values(((id_158)(unsafe-car lst_157)))"
"(let-values(((fold-var_159)"
"(let-values()"
"(let-values(((fold-var_161)"
"(let-values()"
"(cons"
"(let-values()"
" variable)"
" fold-var_160))))"
"(values fold-var_161)))))"
"(for-loop_155"
" fold-var_159"
"(unsafe-cdr lst_157))))"
" fold-var_156))))"
" for-loop_155)"
" null"
" lst_154))))))))"
"(let-values(((env-mixins_103)(internal-definition-context-env-mixins intdef_96)))"
"(begin"
"(set-box!"
" env-mixins_103"
"(append"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_162)(void)(let-values()(in-list lst_162)))"
"(if(list? lst_163)(void)(let-values()(in-list lst_163)))"
"(if(list? lst_164)(void)(let-values()(in-list lst_164)))"
"((letrec-values(((for-loop_165)"
"(lambda(fold-var_166 lst_167 lst_168 lst_169)"
"(if(if(pair? lst_167)"
"(if(pair? lst_168)(pair? lst_169) #f)"
" #f)"
"(let-values(((intdef-id_170)(unsafe-car lst_167))"
"((sym_171)(unsafe-car lst_168))"
"((val_172)(unsafe-car lst_169)))"
"(let-values(((fold-var_173)"
"(let-values()"
"(let-values(((fold-var_175)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_172"
" intdef-id_170"
" phase_98)"
"(env-mixin2.1"
" intdef-id_170"
" sym_171"
" val_172"
"(make-weak-hasheq))))"
" fold-var_174))))"
"(values fold-var_175)))))"
"(for-loop_165"
" fold-var_173"
"(unsafe-cdr lst_167)"
"(unsafe-cdr lst_168)"
"(unsafe-cdr lst_169))))"
" fold-var_166))))"
" for-loop_165)"
" null"
" lst_162"
" lst_163"
" lst_164))))"
"(unbox env-mixins_103)))"
"(let-values(((obs_176)(expand-context-observer ctx_97)))"
"(if obs_176"
"(let-values()(let-values()(call-expand-observe obs_176 'exit-local-bind)))"
"(void))))))))))))))))))"
"(define-values"
"(1/internal-definition-context-binding-identifiers)"
"(lambda(intdef_177)"
"(begin"
"(if(1/internal-definition-context? intdef_177)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-binding-identifiers"
"           \"internal-definition-context?\""
" intdef_177)))"
"(alt-reverse"
"(let-values(((lst_178)(unbox(internal-definition-context-env-mixins intdef_177))))"
"(begin"
"(if(list? lst_178)(void)(let-values()(in-list lst_178)))"
"((letrec-values(((for-loop_179)"
"(lambda(fold-var_180 lst_181)"
"(if(pair? lst_181)"
"(let-values(((env-mixin_182)(unsafe-car lst_181)))"
"(let-values(((fold-var_183)"
"(let-values()"
"(let-values(((fold-var_185)"
"(let-values()"
"(cons"
"(let-values()(env-mixin-id env-mixin_182))"
" fold-var_184))))"
"(values fold-var_185)))))"
"(for-loop_179 fold-var_183(unsafe-cdr lst_181))))"
" fold-var_180))))"
" for-loop_179)"
" null"
" lst_178)))))))"
"(define-values"
"(1/internal-definition-context-introduce)"
"(let-values(((internal-definition-context-introduce13_186)"
"(lambda(intdef11_187 s12_188 mode9_189 mode10_190)"
"(let-values()"
"(let-values()"
"(let-values(((mode_193)(if mode10_190 mode9_189 'flip)))"
"(let-values()"
"(begin"
"(if(1/internal-definition-context? intdef_191)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-introduce"
"                                 \"internal-definition-context?\""
" intdef_191)))"
"(if(syntax?$1 s_192)"
"(void)"
"(let-values()"
"                                (raise-argument-error 'internal-definition-context-introduce \"syntax?\" s_192)))"
"(let-values(((...finition-context.rkt:112:2_194) add-intdef-scopes23.1)"
"((temp56_197)"
"(let-values()"
"(if(equal? tmp_198 'add)"
"(let-values() add-scope)"
"(if(equal? tmp_198 'remove)"
"(let-values() remove-scope)"
"(if(equal? tmp_198 'flip)"
"(let-values() flip-scope)"
"(let-values()"
"(raise-argument-error"
" 1/internal-definition-context-introduce"
"                                                     \"(or/c 'add 'remove 'flip)\""
" mode_193))))))))"
"(add-intdef-scopes21.1 temp56_197 #t #f #f s54_195 intdef55_196))))))))))"
"(case-lambda"
"((intdef_199 s_200)(internal-definition-context-introduce13_186 intdef_199 s_200 #f #f))"
"((intdef_201 s_202 mode9_203)(internal-definition-context-introduce13_186 intdef_201 s_202 mode9_203 #t)))))"
"(define-values"
"(1/internal-definition-context-seal)"
"(lambda(intdef_204)"
"(begin"
"(if(1/internal-definition-context? intdef_204)"
"(void)"
"(let-values()"
"          (raise-argument-error 'internal-definition-context-seal \"internal-definition-context?\" intdef_204)))"
"(void))))"
"(define-values"
"(1/identifier-remove-from-definition-context)"
"(lambda(id_205 intdef_206)"
"(begin"
"(if(identifier? id_205)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-remove-from-definition-context \"identifier?\" id_205)))"
"(if(let-values(((or-part_207)(1/internal-definition-context? intdef_206)))"
"(if or-part_207 or-part_207(if(list? intdef_206)(andmap2 1/internal-definition-context? intdef_206) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'identifier-remove-from-definition-context"
"           \"(or/c internal-definition-context? (listof internal-definition-context?))\""
" intdef_206)))"
"(let-values(((pos->vals_208 pos-next_209 init_210 pos-cont?_211 val-cont?_212 all-cont?_213)"
"(make-sequence '(intdef)(in-intdefs intdef_206))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_214)"
"(lambda(id_215 pos_216)"
"(if(if pos-cont?_211(pos-cont?_211 pos_216) #t)"
"(let-values(((intdef_217)(pos->vals_208 pos_216)))"
"(if(if val-cont?_212(val-cont?_212 intdef_217) #t)"
"(let-values(((id_218)"
"(let-values()"
"(let-values(((id_220)"
"(let-values()"
"(1/internal-definition-context-introduce"
" intdef_217"
" id_219"
" 'remove))))"
"(values id_220)))))"
"(if(if all-cont?_213(all-cont?_213 pos_216 intdef_217) #t)"
"(for-loop_214 id_218(pos-next_209 pos_216))"
" id_218))"
" id_215))"
" id_215))))"
" for-loop_214)"
" id_205"
" init_210))))))"
"(define-values"
"(in-intdefs)"
"(lambda(intdefs_221)"
"(if(not intdefs_221)"
"(let-values()(in-list null))"
"(if(list? intdefs_221)"
"(let-values()(in-list(alt-reverse intdefs_221)))"
"(let-values()(in-value intdefs_221))))))"
"(define-values"
"(add-intdef-bindings)"
"(lambda(env_222 intdefs_223)"
"(let-values(((pos->vals_224 pos-next_225 init_226 pos-cont?_227 val-cont?_228 all-cont?_229)"
"(make-sequence '(intdef)(in-intdefs intdefs_223))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_230)"
"(lambda(env_231 pos_232)"
"(if(if pos-cont?_227(pos-cont?_227 pos_232) #t)"
"(let-values(((intdef_233)(pos->vals_224 pos_232)))"
"(if(if val-cont?_228(val-cont?_228 intdef_233) #t)"
"(let-values(((env_234)"
"(let-values()"
"(let-values(((env_236)"
"(let-values()"
"(let-values(((env-mixins_237)"
"(unbox"
"(internal-definition-context-env-mixins"
" intdef_233))))"
"((letrec-values(((loop_238)"
"(lambda(env_239 env-mixins_240)"
"(if(null? env-mixins_240)"
"(let-values() env_239)"
"(let-values()"
"(let-values(((env-mixin_241)"
"(car"
" env-mixins_240)))"
"(let-values(((or-part_242)"
"(hash-ref"
"(env-mixin-cache"
" env-mixin_241)"
" env_239"
" #f)))"
"(if or-part_242"
" or-part_242"
"(let-values(((new-env_243)"
"(env-extend"
"(loop_238"
" env_239"
"(cdr"
" env-mixins_240))"
"(env-mixin-sym"
" env-mixin_241)"
"(env-mixin-value"
" env-mixin_241))))"
"(begin"
"(hash-set!"
"(env-mixin-cache"
" env-mixin_241)"
" env_239"
" new-env_243)"
" new-env_243))))))))))"
" loop_238)"
" env_235"
" env-mixins_237)))))"
"(values env_236)))))"
"(if(if all-cont?_229(all-cont?_229 pos_232 intdef_233) #t)"
"(for-loop_230 env_234(pos-next_225 pos_232))"
" env_234))"
" env_231))"
" env_231))))"
" for-loop_230)"
" env_222"
" init_226)))))"
"(define-values"
"(add-intdef-scopes21.1)"
"(lambda(action16_244 action18_245 always?15_246 always?17_247 s19_248 intdefs20_249)"
"(let-values()"
"(let-values()"
"(let-values(((always?_252)(if always?17_247 always?15_246 #f)))"
"(let-values(((action_253)(if action18_245 action16_244 add-scope)))"
"(let-values()"
"(let-values(((pos->vals_254 pos-next_255 init_256 pos-cont?_257 val-cont?_258 all-cont?_259)"
"(make-sequence '(intdef)(in-intdefs intdefs_251))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_260)"
"(lambda(s_261 pos_262)"
"(if(if pos-cont?_257(pos-cont?_257 pos_262) #t)"
"(let-values(((intdef_263)(pos->vals_254 pos_262)))"
"(if(if val-cont?_258(val-cont?_258 intdef_263) #t)"
"(let-values(((s_264)"
"(let-values()"
"(if(let-values()"
"(if or-part_266"
" or-part_266"
"(internal-definition-context-add-scope?"
" intdef_263)))"
"(let-values()"
"(let-values(((s_268)"
"(let-values()"
"(action_253"
" s_267"
"(internal-definition-context-scope"
" intdef_263)))))"
"(values s_268)))"
" s_265))))"
"(if(if all-cont?_259(all-cont?_259 pos_262 intdef_263) #t)"
"(for-loop_260 s_264(pos-next_255 pos_262))"
" s_264))"
" s_261))"
" s_261))))"
" for-loop_260)"
" s_250"
" init_256))))))))))"
"(define-values"
"(unpack22.1)"
"(lambda(given-kws_269 given-args_270 s19_271 intdefs20_272)"
"(let-values(((action18_273)(if(pair? given-kws_269)(eq? '#:action(car given-kws_269)) #f)))"
"(let-values(((action16_274)(if action18_273(car given-args_270)(void)))"
"((given-kws_275)(if action18_273(cdr given-kws_269) given-kws_269))"
"((given-args_276)(if action18_273(cdr given-args_270) given-args_270)))"
"(let-values(((always?17_277)(pair? given-kws_275)))"
"(let-values(((always?15_278)(if always?17_277(car given-args_276)(void))))"
"(add-intdef-scopes21.1 action16_274 action18_273 always?15_278 always?17_277 s19_271 intdefs20_272)))))))"
"(define-values"
"(add-intdef-scopes23.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_279 given-argc_280)"
"(if(= given-argc_280 4)"
"(let-values()"
"(let-values(((l1_282)(if(null? l1_281) l1_281(if(eq?(car l1_281) '#:action)(cdr l1_281) l1_281))))"
"(let-values()"
"(let-values(((l1_284)(if(null? l1_283) l1_283(if(eq?(car l1_283) '#:always?)(cdr l1_283) l1_283))))"
"(null? l1_284)))))"
" #f))"
"(case-lambda"
"((given-kws_285 given-args_286 s_287 intdefs_288)(unpack22.1 given-kws_285 given-args_286 s_287 intdefs_288)))"
" null"
" '(#:action #:always?)"
"(let-values(((add-intdef-scopes_289)(case-lambda((s_290 intdefs_291)(unpack22.1 null null s_290 intdefs_291)))))"
" add-intdef-scopes_289)))"
"(define-values"
"(lifted/1.1$8 lifted/2.1$8 lifted/3.1$7 lifted/4.1$7 lifted/5.1$7)"
"(make-struct-type"
" 'make-local-expand-context"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'make-local-expand-context(case-lambda((self_292 ctx_293)(apply missing-kw self_292 ctx_293 null))))))"
"(current-inspector)"
"(case-lambda((self_294 ctx_295)(apply missing-kw self_294 ctx_295 null)))))"
"(define-values"
"(make-local-expand-context33.1)"
"(lambda(context24_296 intdefs26_297 phase25_298 phase29_299 stop-ids27_300 stop-ids31_301 ctx32_302)"
"(let-values()"
"(let-values()"
"(let-values(((phase_305)(if phase29_299 phase25_298(expand-context-phase ctx_303))))"
"(let-values()"
"(let-values(((stop-ids_307)(if stop-ids31_301 stop-ids27_300 #f)))"
"(let-values()"
"(let-values(((same-kind?_308)"
"(let-values(((or-part_311)(eq? context_304(expand-context-context ctx_303))))"
"(if or-part_311"
" or-part_311"
"(if(list? context_304)(list?(expand-context-context ctx_303)) #f)))))"
"(let-values(((all-stop-ids_309)"
"(if stop-ids_307(stop-ids->all-stop-ids stop-ids_307 phase_305) #f)))"
"(let-values(((def-ctx-scopes_310)"
"(if(expand-context-def-ctx-scopes ctx_303)"
"(unbox(expand-context-def-ctx-scopes ctx_303))"
" null)))"
"(let-values()"
"(if(expand-context? the-struct_312)"
"(let-values(((env58_314)(add-intdef-bindings(expand-context-env ctx_303) intdefs_306))"
"((use-site-scopes59_315)"
"(if(let-values(((or-part_326)(eq? context_304 'module)))"
"(if or-part_326 or-part_326(list? context_304)))"
"(let-values(((or-part_327)(root-expand-context-use-site-scopes ctx_303)))"
"(if or-part_327 or-part_327(box null)))"
" #f))"
"((frame-id60_316)"
"(let-values(((pos->vals_328"
" pos-next_329"
" init_330"
" pos-cont?_331"
" val-cont?_332"
" all-cont?_333)"
"(make-sequence '(intdef)(in-intdefs intdefs_306))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_334)"
"(lambda(frame-id_335 pos_336)"
"(if(if pos-cont?_331(pos-cont?_331 pos_336) #t)"
"(let-values(((intdef_337)(pos->vals_328 pos_336)))"
"(if(if val-cont?_332(val-cont?_332 intdef_337) #t)"
"(let-values(((frame-id_338)"
"(let-values()"
"(let-values(((frame-id_340)"
"(let-values()"
"(let-values(((i-frame-id_341)"
"(internal-definition-context-frame-id"
" intdef_337)))"
"(if(if frame-id_339"
"(if i-frame-id_341"
"(not"
"(eq?"
" frame-id_339"
" i-frame-id_341))"
" #f)"
" #f)"
"(let-values()"
" 'all)"
"(let-values()"
"(let-values()"
"(if or-part_342"
" or-part_342"
" i-frame-id_341))))))))"
"(values frame-id_340)))))"
"(if(if all-cont?_333"
"(all-cont?_333 pos_336 intdef_337)"
" #t)"
"(for-loop_334"
" frame-id_338"
"(pos-next_329 pos_336))"
" frame-id_338))"
" frame-id_335))"
" frame-id_335))))"
" for-loop_334)"
"(root-expand-context-frame-id ctx_303)"
" init_330))))"
"((post-expansion-scope61_317)"
"(if intdefs_306"
"(new-scope 'macro)"
"(if same-kind?_308"
"(if(memq context_304 '(module module-begin top-level))"
"(root-expand-context-post-expansion-scope ctx_303)"
" #f)"
" #f)))"
"((post-expansion-scope-action62_318)"
"(if intdefs_306"
"(lambda(s_343 placeholder-sc_344)"
"(let-values()(add-intdef-scopes21.1 #f #f #f #f s70_345 intdefs71_346)))"
"(expand-context-post-expansion-scope-action ctx_303)))"
"((scopes63_319)(append def-ctx-scopes_310(expand-context-scopes ctx_303)))"
"((only-immediate?64_320)(not stop-ids_307))"
"((to-parsed?65_321) #f)"
"((just-once?66_322) #f)"
"((in-local-expand?67_323) #t)"
"((stops68_324)"
"(free-id-set phase_305(let-values()(if or-part_347 or-part_347 null))))"
"((current-introduction-scopes69_325) null))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_312)"
" post-expansion-scope61_317"
"(root-expand-context-top-level-bind-scope the-struct_312)"
"(root-expand-context-all-scopes-stx the-struct_312)"
" use-site-scopes59_315"
"(root-expand-context-defined-syms the-struct_312)"
" frame-id60_316"
"(root-expand-context-counter the-struct_312)"
"(root-expand-context-lift-key the-struct_312)"
" to-parsed?65_321"
" context57_313"
"(expand-context-phase the-struct_312)"
"(expand-context-namespace the-struct_312)"
" env58_314"
"(expand-context-user-env the-struct_312)"
" post-expansion-scope-action62_318"
" scopes63_319"
"(expand-context-def-ctx-scopes the-struct_312)"
"(expand-context-binding-layer the-struct_312)"
"(expand-context-reference-records the-struct_312)"
" only-immediate?64_320"
" just-once?66_322"
"(expand-context-module-begin-k the-struct_312)"
"(expand-context-need-eventually-defined the-struct_312)"
"(expand-context-allow-unbound? the-struct_312)"
" in-local-expand?67_323"
" stops68_324"
" current-introduction-scopes69_325"
"(expand-context-declared-submodule-names the-struct_312)"
"(expand-context-lifts the-struct_312)"
"(expand-context-lift-envs the-struct_312)"
"(expand-context-module-lifts the-struct_312)"
"(expand-context-require-lifts the-struct_312)"
"(expand-context-to-module-lifts the-struct_312)"
"(expand-context-requires+provides the-struct_312)"
"(expand-context-name the-struct_312)"
"(expand-context-observer the-struct_312)))"
"                          (raise-argument-error 'struct-copy \"expand-context?\" the-struct_312))))))))))))))"
"(define-values"
"(unpack34.1)"
"(lambda(given-kws_348 given-args_349 ctx32_350)"
"(let-values(((context24_351)(car given-args_349))"
"((given-kws_352)(cdr given-kws_348))"
"((given-args_353)(cdr given-args_349)))"
"(let-values(((intdefs26_354)(car given-args_353))"
"((given-kws_355)(cdr given-kws_352))"
"((given-args_356)(cdr given-args_353)))"
"(let-values(((phase29_357)(if(pair? given-kws_355)(eq? '#:phase(car given-kws_355)) #f)))"
"(let-values(((phase25_358)(if phase29_357(car given-args_356)(void)))"
"((given-kws_359)(if phase29_357(cdr given-kws_355) given-kws_355))"
"((given-args_360)(if phase29_357(cdr given-args_356) given-args_356)))"
"(let-values(((stop-ids31_361)(pair? given-kws_359)))"
"(let-values(((stop-ids27_362)(if stop-ids31_361(car given-args_360)(void))))"
"(make-local-expand-context33.1"
" context24_351"
" intdefs26_354"
" phase25_358"
" phase29_357"
" stop-ids27_362"
" stop-ids31_361"
" ctx32_350)))))))))"
"(define-values"
"(make-local-expand-context35.1)"
"(lifted/2.1$8"
"(lambda(given-kws_363 given-argc_364)"
"(if(= given-argc_364 3)"
"(subsets? '(#:context #:intdefs) given-kws_363 '(#:context #:intdefs #:phase #:stop-ids))"
" #f))"
"(case-lambda((given-kws_365 given-args_366 ctx_367)(unpack34.1 given-kws_365 given-args_366 ctx_367)))"
" '(#:context #:intdefs)"
" '(#:context #:intdefs #:phase #:stop-ids)))"
"(define-values"
"(flip-introduction-scopes)"
"(lambda(s_368 ctx_369)(flip-scopes s_368(expand-context-current-introduction-scopes ctx_369))))"
"(void)"
"(void)"
"(define-values"
"(1/syntax-transforming?)"
"(lambda()(if(let-values(((temp65_12) #t))(get-current-expand-context12.1 temp65_12 #t #f #f)) #t #f)))"
"(define-values"
"(1/syntax-transforming-with-lifts?)"
"(lambda()"
"(let-values(((ctx_13)(let-values(((temp66_15) #t))(get-current-expand-context12.1 temp66_15 #t #f #f))))"
"(if ctx_13(if(expand-context-lifts ctx_13) #t #f) #f))))"
"(define-values"
"(1/syntax-transforming-module-expression?)"
"(lambda()"
"(let-values(((ctx_16)(let-values(((temp67_18) #t))(get-current-expand-context12.1 temp67_18 #t #f #f))))"
"(if ctx_16(if(expand-context-to-module-lifts ctx_16) #t #f) #f))))"
"(define-values"
"(1/syntax-local-transforming-module-provides?)"
"(lambda()"
"(let-values(((ctx_19)(let-values(((temp68_21) #t))(get-current-expand-context12.1 temp68_21 #t #f #f))))"
"(if ctx_19(if(expand-context-requires+provides ctx_19) #t #f) #f))))"
"(define-values"
"(1/syntax-local-context)"
"(lambda()"
"(let-values(((ctx_22)"
"(let-values(((temp69_23) 'syntax-local-context))"
"(get-current-expand-context12.1 #f #f temp69_23 #t))))"
"(expand-context-context ctx_22))))"
"(define-values"
"(1/syntax-local-introduce)"
"(lambda(s_24)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_24)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-introduce \"syntax?\" s_24)))"
"(values))))"
"(let-values(((ctx_25)"
"(let-values(((temp70_26) 'syntax-local-introduce))"
"(get-current-expand-context12.1 #f #f temp70_26 #t))))"
"(flip-introduction-scopes s_24 ctx_25)))))"
"(define-values"
"(1/syntax-local-identifier-as-binding)"
"(lambda(id_27)"
"(let-values((()"
"(begin"
"(if(identifier? id_27)"
"(void)"
"                      (let-values () (raise-argument-error 1/syntax-local-identifier-as-binding \"identifier?\" id_27)))"
"(values))))"
"(let-values(((ctx_28)"
"(let-values(((temp71_29) 'syntax-local-identifier-as-binding))"
"(get-current-expand-context12.1 #f #f temp71_29 #t))))"
"(remove-use-site-scopes id_27 ctx_28)))))"
"(define-values"
"(1/syntax-local-phase-level)"
"(lambda()"
"(let-values(((ctx_30)(let-values(((temp72_32) #t))(get-current-expand-context12.1 temp72_32 #t #f #f))))"
"(if ctx_30(expand-context-phase ctx_30) 0))))"
"(define-values"
"(1/syntax-local-name)"
"(lambda()"
"(let-values(((ctx_33)"
"(let-values(((temp73_35) 'syntax-local-name))(get-current-expand-context12.1 #f #f temp73_35 #t))))"
"(let-values(((id_34)(expand-context-name ctx_33)))"
"(if id_34(datum->syntax$1 #f(syntax-e$1 id_34) id_34) #f)))))"
"(define-values"
"(1/make-syntax-introducer)"
"(let-values(((make-syntax-introducer3_36)"
"(lambda(as-use-site?1_37 as-use-site?2_38)"
"(let-values(((as-use-site?_39)(if as-use-site?2_38 as-use-site?1_37 #f)))"
"(let-values()"
"(let-values(((sc_40)(new-scope(if as-use-site?_39 'use-site 'macro))))"
"(let-values(((core77_41)"
"(lambda(s76_42 mode74_43 mode75_44)"
"(let-values()"
"(let-values(((mode_46)(if mode75_44 mode74_43 'flip)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_45)"
"(void)"
"(let-values()"
"                                                    (raise-argument-error 'syntax-introducer \"syntax?\" s_45)))"
"(let-values()"
"(if(equal? tmp_47 'add)"
"(let-values()(add-scope s_45 sc_40))"
"(if(equal? tmp_47 'remove)"
"(let-values()(remove-scope s_45 sc_40))"
"(if(equal? tmp_47 'flip)"
"(let-values()(flip-scope s_45 sc_40))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                           \"(or/c 'add 'remove 'flip)\""
" mode_46)))))))))))))"
"(case-lambda"
"((s_48)(core77_41 s_48 #f #f))"
"((s_49 mode74_50)(core77_41 s_49 mode74_50 #t))))))))))"
"(case-lambda"
"(()(make-syntax-introducer3_36 #f #f))"
"((as-use-site?1_51)(make-syntax-introducer3_36 as-use-site?1_51 #t)))))"
"(define-values"
"(1/make-syntax-delta-introducer)"
"(let-values(((make-syntax-delta-introducer9_52)"
"(lambda(ext-s7_53 base-s8_54 phase5_55 phase6_56)"
"(let-values()"
"(let-values()"
"(let-values(((phase_59)(if phase6_56 phase5_55(1/syntax-local-phase-level))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 ext-s_57)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'make-syntax-delta-introducer \"syntax?\" ext-s_57)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_65)(syntax?$1 base-s_58)))"
"(if or-part_65 or-part_65(not base-s_58)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
"                                                 \"(or/c syntax? #f)\""
" base-s_58)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(phase? phase_59)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
" phase?-string"
" phase_59)))"
"(values))))"
"(let-values(((ext-scs_60)(syntax-scope-set ext-s_57 phase_59)))"
"(let-values(((base-scs_61)"
"(syntax-scope-set"
"(let-values()(if or-part_66 or-part_66 empty-syntax))"
" phase_59)))"
"(let-values(((use-base-scs_62)"
"(if(subset? base-scs_61 ext-scs_60)"
" base-scs_61"
"(let-values(((or-part_67)"
"(if(identifier? base-s_58)"
"(let-values(((temp81_71) #t))"
"(resolve29.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_71"
" #t"
" base-s79_69"
" phase80_70))"
" #f)))"
"(if or-part_67 or-part_67(seteq))))))"
"(let-values(((delta-scs_63)"
"(set->list(set-subtract ext-scs_60 use-base-scs_62))))"
"(let-values(((maybe-taint_64)"
"(if(syntax-clean? ext-s_57) values syntax-taint$1)))"
"(let-values(((core85_72)"
"(lambda(s84_73 mode82_74 mode83_75)"
"(let-values()"
"(let-values(((mode_77)(if mode83_75 mode82_74 'add)))"
"(let-values()"
"(maybe-taint_64"
"(let-values()"
"(if(equal? tmp_78 'add)"
"(let-values()(add-scopes s_76 delta-scs_63))"
"(if(equal? tmp_78 'remove)"
"(let-values()(remove-scopes s_76 delta-scs_63))"
"(if(equal? tmp_78 'flip)"
"(let-values()(flip-scopes s_76 delta-scs_63))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                                            \"(or/c 'add 'remove 'flip)\""
" mode_77)))))))))))))"
"(case-lambda"
"((s_79)(core85_72 s_79 #f #f))"
"((s_80 mode82_81)(core85_72 s_80 mode82_81 #t)))))))))))))))))))"
"(case-lambda"
"((ext-s_82 base-s_83)(make-syntax-delta-introducer9_52 ext-s_82 base-s_83 #f #f))"
"((ext-s_84 base-s_85 phase5_86)(make-syntax-delta-introducer9_52 ext-s_84 base-s_85 phase5_86 #t)))))"
"(define-values"
"(do-syntax-local-value17.1)"
"(lambda(immediate?11_97 who13_98 id14_99 intdef15_100 failure-thunk16_101)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_103)"
"(void)"
"                                  (let-values () (raise-argument-error who_102 \"identifier?\" id_103)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_110)(not failure-thunk_105)))"
"(if or-part_110"
" or-part_110"
"(if(procedure? failure-thunk_105)"
"(procedure-arity-includes? failure-thunk_105 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_102"
"                                       \"(or #f (procedure-arity-includes/c 0))\""
" failure-thunk_105)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_111)(not intdef_104)))"
"(if or-part_111 or-part_111(1/internal-definition-context? intdef_104)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_102"
"                                         \"(or #f internal-definition-context?)\""
" failure-thunk_105)))"
"(values))))"
"(let-values(((current-ctx_107)"
"(let-values()(get-current-expand-context12.1 #f #f who87_112 #t))))"
"(let-values(((ctx_108)"
"(if intdef_104"
"(let-values()"
"(if(expand-context? the-struct_113)"
"(let-values(((env88_114)"
"(add-intdef-bindings"
"(expand-context-env current-ctx_107)"
" intdef_104)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_113)"
"(root-expand-context-post-expansion-scope the-struct_113)"
"(root-expand-context-top-level-bind-scope the-struct_113)"
"(root-expand-context-all-scopes-stx the-struct_113)"
"(root-expand-context-use-site-scopes the-struct_113)"
"(root-expand-context-defined-syms the-struct_113)"
"(root-expand-context-frame-id the-struct_113)"
"(root-expand-context-counter the-struct_113)"
"(root-expand-context-lift-key the-struct_113)"
"(expand-context-to-parsed? the-struct_113)"
"(expand-context-context the-struct_113)"
"(expand-context-phase the-struct_113)"
"(expand-context-namespace the-struct_113)"
" env88_114"
"(expand-context-user-env the-struct_113)"
"(expand-context-post-expansion-scope-action the-struct_113)"
"(expand-context-scopes the-struct_113)"
"(expand-context-def-ctx-scopes the-struct_113)"
"(expand-context-binding-layer the-struct_113)"
"(expand-context-reference-records the-struct_113)"
"(expand-context-only-immediate? the-struct_113)"
"(expand-context-just-once? the-struct_113)"
"(expand-context-module-begin-k the-struct_113)"
"(expand-context-need-eventually-defined the-struct_113)"
"(expand-context-allow-unbound? the-struct_113)"
"(expand-context-in-local-expand? the-struct_113)"
"(expand-context-stops the-struct_113)"
"(expand-context-current-introduction-scopes the-struct_113)"
"(expand-context-declared-submodule-names the-struct_113)"
"(expand-context-lifts the-struct_113)"
"(expand-context-lift-envs the-struct_113)"
"(expand-context-module-lifts the-struct_113)"
"(expand-context-require-lifts the-struct_113)"
"(expand-context-to-module-lifts the-struct_113)"
"(expand-context-requires+provides the-struct_113)"
"(expand-context-name the-struct_113)"
"(expand-context-observer the-struct_113)))"
"                                            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_113)))"
" current-ctx_107)))"
"(let-values((()"
"(begin"
"(let-values(((obs_115)(expand-context-observer ctx_108)))"
"(if obs_115"
"(let-values()"
"(let-values()(call-expand-observe obs_115 'local-value id_103)))"
"(void)))"
"(values))))"
"(let-values(((phase_109)(expand-context-phase ctx_108)))"
"((letrec-values(((loop_116)"
"(lambda(id_117)"
"(let-values(((b_118)"
"(if immediate?_106"
"(let-values(((temp91_122) #t))"
"(resolve+shift30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp91_122"
" #t"
" #f"
" #f"
" id89_120"
" phase90_121))"
"(resolve+shift/extra-inspector"
" id_117"
" phase_109"
"(expand-context-namespace ctx_108)))))"
"(begin"
"(let-values(((obs_123)(expand-context-observer ctx_108)))"
"(if obs_123"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_123 'resolve id_117)))"
"(void)))"
"(if(not b_118)"
"(let-values()"
"(begin"
"(let-values(((obs_124)(expand-context-observer ctx_108)))"
"(if obs_124"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_124"
" 'local-value-result"
" #f)))"
"(void)))"
"(if failure-thunk_105"
"(failure-thunk_105)"
"(error"
" 'syntax-local-value"
"                                                               \"unbound identifier: ~v\""
" id_117))))"
"(let-values()"
"(let-values(((v_125 primitive?_126 insp_127)"
"(let-values(((temp95_132) #t))"
"(lookup15.1"
" #f"
" #f"
" temp95_132"
" #t"
" b92_129"
" ctx93_130"
" id94_131))))"
"(if(let-values(((or-part_133)(variable? v_125)))"
"(if or-part_133 or-part_133(core-form? v_125)))"
"(let-values()"
"(begin"
"(let-values(((obs_134)"
"(expand-context-observer ctx_108)))"
"(if obs_134"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_134"
" 'local-value-result"
" #f)))"
"(void)))"
"(if failure-thunk_105"
"(failure-thunk_105)"
"(error"
" 'syntax-local-value"
"                                                                     \"identifier is not bound to syntax: ~v\""
" id_117))))"
"(let-values()"
"(begin"
"(let-values(((obs_135)"
"(expand-context-observer ctx_108)))"
"(if obs_135"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_135"
" 'local-value-result"
" #t)))"
"(void)))"
"(if(1/rename-transformer? v_125)"
"(let-values()"
"(if immediate?_106"
"(values"
" v_125"
"(1/rename-transformer-target v_125))"
"(loop_116(1/rename-transformer-target v_125))))"
"(if immediate?_106"
"(let-values()(values v_125 #f))"
"(let-values() v_125))))))))))))))"
" loop_116)"
"(flip-introduction-scopes id_103 ctx_108)))))))))))))))))"
"(define-values"
"(1/syntax-local-value)"
"(let-values(((syntax-local-value25_152)"
"(lambda(id24_153 failure-thunk20_154 intdef21_155 failure-thunk22_156 intdef23_157)"
"(let-values()"
"(let-values(((failure-thunk_159)(if failure-thunk22_156 failure-thunk20_154 #f)))"
"(let-values(((intdef_160)(if intdef23_157 intdef21_155 #f)))"
"(let-values()"
"(let-values(((temp96_162) 'syntax-local-value)((temp97_163) #f))"
"(do-syntax-local-value17.1"
" temp97_163"
" temp96_162"
" id98_164"
" intdef99_165"
" failure-thunk100_166)))))))))"
"(case-lambda"
"((id_167)(syntax-local-value25_152 id_167 #f #f #f #f))"
"((id_168 failure-thunk_169 intdef21_170)(syntax-local-value25_152 id_168 failure-thunk_169 intdef21_170 #t #t))"
"((id_171 failure-thunk20_172)(syntax-local-value25_152 id_171 failure-thunk20_172 #f #t #f)))))"
"(define-values"
"(1/syntax-local-value/immediate)"
"(let-values(((syntax-local-value/immediate32_173)"
"(lambda(id31_174 failure-thunk27_175 intdef28_176 failure-thunk29_177 intdef30_178)"
"(let-values()"
"(let-values(((failure-thunk_180)(if failure-thunk29_177 failure-thunk27_175 #f)))"
"(let-values(((intdef_181)(if intdef30_178 intdef28_176 #f)))"
"(let-values()"
"(let-values(((temp101_183) 'syntax-local-value/immediate)((temp102_184) #t))"
"(do-syntax-local-value17.1"
" temp102_184"
" temp101_183"
" id103_185"
" intdef104_186"
" failure-thunk105_187)))))))))"
"(case-lambda"
"((id_188)(syntax-local-value/immediate32_173 id_188 #f #f #f #f))"
"((id_189 failure-thunk_190 intdef28_191)"
"(syntax-local-value/immediate32_173 id_189 failure-thunk_190 intdef28_191 #t #t))"
"((id_192 failure-thunk27_193)(syntax-local-value/immediate32_173 id_192 failure-thunk27_193 #f #t #f)))))"
"(define-values"
"(do-lift-values-expression)"
"(lambda(who_194 n_195 s_196)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_196) (void) (let-values () (raise-argument-error who_194 \"syntax?\" s_196)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? n_195)"
"(void)"
"                        (let-values () (raise-argument-error who_194 \"exact-nonnegative-integer?\" n_195)))"
"(values))))"
"(let-values(((ctx_197)(let-values()(get-current-expand-context12.1 #f #f who106_201 #t))))"
"(let-values(((lifts_198)(expand-context-lifts ctx_197)))"
"(let-values(((counter_199)(root-expand-context-counter ctx_197)))"
"(let-values(((ids_200)"
"(alt-reverse"
"(let-values(((start_202) 0)((inc_204) 1))"
"(begin"
"(if(if(real? start_202)(if(real? end_203)(real? inc_204) #f) #f)"
"(void)"
"(let-values()(in-range start_202 end_203 inc_204)))"
"((letrec-values(((for-loop_205)"
"(lambda(fold-var_206 pos_207)"
"(if(< pos_207 end_203)"
"(let-values()"
"(let-values(((fold-var_209)"
"(let-values()"
"(let-values(((fold-var_211)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(set-box!"
" counter_199"
"(add1"
"(unbox"
" counter_199)))"
"(values))))"
"(let-values(((name_212)"
"(string->unreadable-symbol"
"(format"
"                                                                                                              \"lifted/~a\""
"(unbox"
" counter_199)))))"
"(add-scope"
"(datum->syntax$1"
" #f"
" name_212)"
"(new-scope 'macro)))))"
" fold-var_210))))"
"(values fold-var_211)))))"
"(for-loop_205 fold-var_209(+ pos_207 inc_204))))"
" fold-var_206))))"
" for-loop_205)"
" null"
" start_202))))))"
"(begin"
"(let-values(((obs_213)(expand-context-observer ctx_197)))"
"(if obs_213"
"(let-values()(let-values()(call-expand-observe obs_213 'local-lift ids_200 s_196)))"
"(void)))"
"(map2"
"(lambda(id_214)(flip-introduction-scopes id_214 ctx_197))"
"(add-lifted!"
" lifts_198"
" ids_200"
"(flip-introduction-scopes s_196 ctx_197)"
"(expand-context-phase ctx_197))))))))))))"
"(define-values"
"(1/syntax-local-lift-expression)"
"(lambda(s_215)(car(do-lift-values-expression 'syntax-local-lift-expression 1 s_215))))"
"(define-values"
"(1/syntax-local-lift-values-expression)"
"(lambda(n_216 s_217)(do-lift-values-expression 'syntax-local-lift-values-expression n_216 s_217)))"
"(define-values"
"(1/syntax-local-lift-context)"
"(lambda()"
"(let-values(((ctx_218)"
"(let-values(((temp107_219) 'syntax-local-lift-context))"
"(get-current-expand-context12.1 #f #f temp107_219 #t))))"
"(root-expand-context-lift-key ctx_218))))"
"(define-values"
"(1/syntax-local-lift-module)"
"(lambda(s_220)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_220)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-lift-module \"syntax?\" s_220)))"
"(values))))"
"(let-values(((ctx_221)"
"(let-values(((temp108_223) 'syntax-local-lift-module))"
"(get-current-expand-context12.1 #f #f temp108_223 #t))))"
"(let-values(((phase_222)(expand-context-phase ctx_221)))"
"(begin"
"(let-values(((tmp_224)(core-form-sym s_220 phase_222)))"
"(if(if(equal? tmp_224 'module) #t(equal? tmp_224 'module*))"
"(let-values()(add-lifted-module!(expand-context-module-lifts ctx_221) s_220 phase_222))"
"(let-values()"
"                  (raise-arguments-error 'syntax-local-lift-module \"not a module form\" \"given form\" s_220))))"
"(let-values(((obs_225)(expand-context-observer ctx_221)))"
"(if obs_225"
"(let-values()(let-values()(call-expand-observe obs_225 'lift-statement s_220)))"
"(void)))))))))"
"(define-values"
"(do-local-lift-to-module52.1)"
"(lambda(add-lifted!37_232"
" get-lift-ctx36_233"
" get-wrt-phase38_234"
" intro?34_235"
" intro?42_236"
" more-checks35_237"
" more-checks43_238"
" post-wrap41_239"
" post-wrap49_240"
" pre-wrap39_241"
" pre-wrap47_242"
" shift-wrap40_243"
" shift-wrap48_244"
" who50_245"
" s51_246)"
"(let-values()"
"(let-values()"
"(let-values(((intro?_249)(if intro?42_236 intro?34_235 #t)))"
"(let-values(((more-checks_250)(if more-checks43_238 more-checks35_237 void)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((pre-wrap_254)"
"(if pre-wrap47_242 pre-wrap39_241(lambda(s_255 phase_256 lift-ctx_257) s_255))))"
"(let-values(((shift-wrap_258)"
"(if shift-wrap48_244 shift-wrap40_243(lambda(s_259 phase_260 lift-ctx_261) s_259))))"
"(let-values(((post-wrap_262)"
"(if post-wrap49_240 post-wrap41_239(lambda(s_263 phase_264 lift-ctx_265) s_263))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_248)"
"(void)"
"                                            (let-values () (raise-argument-error who_247 \"syntax?\" s_248)))"
"(values))))"
"(let-values((()(begin(more-checks_250)(values))))"
"(let-values(((ctx_266)"
"(let-values()(get-current-expand-context12.1 #f #f who109_274 #t))))"
"(let-values(((lift-ctx_267)(get-lift-ctx_251 ctx_266)))"
"(let-values(((phase_268)(expand-context-phase ctx_266)))"
"(let-values(((wrt-phase_269)(get-wrt-phase_253 lift-ctx_267)))"
"(let-values(((added-s_270)"
"(if intro?_249(flip-introduction-scopes s_248 ctx_266) s_248)))"
"(let-values(((pre-s_271)(pre-wrap_254 added-s_270 phase_268 lift-ctx_267)))"
"(let-values(((shift-s_272)"
"(let-values(((inc_277) -1))"
"(begin"
"(if(if(real? start_275)"
"(if(real? end_276)(real? inc_277) #f)"
" #f)"
"(void)"
"(let-values()(in-range start_275 end_276 inc_277)))"
"((letrec-values(((for-loop_278)"
"(lambda(s_279 pos_280)"
"(if(> pos_280 end_276)"
"(let-values()"
"(let-values(((s_282)"
"(let-values()"
"(let-values(((s_284)"
"(let-values()"
"(shift-wrap_258"
" s_283"
"(sub1"
" phase_281)"
" lift-ctx_267))))"
"(values s_284)))))"
"(for-loop_278"
" s_282"
"(+ pos_280 inc_277))))"
" s_279))))"
" for-loop_278)"
" pre-s_271"
" start_275)))))"
"(let-values(((post-s_273)"
"(post-wrap_262 shift-s_272 wrt-phase_269 lift-ctx_267)))"
"(begin"
"(add-lifted!_252 lift-ctx_267 post-s_273 wrt-phase_269)"
"(values ctx_266 added-s_270)))))))))))))))))))))))))"
"(define-values"
"(1/syntax-local-lift-require)"
"(lambda(s_322 use-s_323)"
"(let-values(((sc_324)(new-scope 'macro)))"
"(let-values(((ctx_325 added-s_326)"
"(let-values(((temp110_329) 'syntax-local-lift-require)"
"((temp111_330)(datum->syntax$1 #f s_322))"
"((temp112_331) #f)"
"((temp113_332)"
"(lambda()"
"(if(syntax?$1 use-s_323)"
"(void)"
"(let-values()"
"                                        (raise-argument-error 'syntax-local-lift-require \"syntax?\" use-s_323)))))"
"((temp117_336)"
"(lambda(s_338 phase_339 require-lift-ctx_340)(require-spec-shift-for-syntax s_338)))"
"((temp118_337)"
"(lambda(s_341 phase_342 require-lift-ctx_343)"
"(wrap-form '#%require(add-scope s_341 sc_324) phase_342))))"
"(do-local-lift-to-module52.1"
" add-lifted-require!116_335"
" expand-context-require-lifts114_333"
" require-lift-context-wrt-phase115_334"
" temp112_331"
" #t"
" temp113_332"
" #t"
" temp118_337"
" #t"
" #f"
" #f"
" temp117_336"
" #t"
" temp110_329"
" temp111_330))))"
"(let-values(((result-s_327)(add-scope use-s_323 sc_324)))"
"(begin"
"(let-values(((obs_344)(expand-context-observer ctx_325)))"
"(if obs_344"
"(let-values()"
"(let-values()(call-expand-observe obs_344 'lift-require added-s_326 use-s_323 result-s_327)))"
"(void)))"
" result-s_327))))))"
"(define-values"
"(1/syntax-local-lift-provide)"
"(lambda(s_345)"
"(let-values(((ctx_346 result-s_347)"
"(let-values(((temp119_349) 'syntax-local-lift-module-end-declaration)"
"((temp124_354)"
"(lambda(s_356 phase_357 to-module-lift-ctx_358)(wrap-form 'for-syntax s_356 #f)))"
"((temp125_355)"
"(lambda(s_359 phase_360 to-module-lift-ctx_361)"
"(wrap-form '#%provide s_359 phase_360))))"
"(do-local-lift-to-module52.1"
" add-lifted-to-module-provide!123_353"
" expand-context-to-module-lifts121_351"
" to-module-lift-context-wrt-phase122_352"
" #f"
" #f"
" #f"
" #f"
" temp125_355"
" #t"
" #f"
" #f"
" temp124_354"
" #t"
" temp119_349"
" s120_350))))"
"(let-values(((obs_362)(expand-context-observer ctx_346)))"
"(if obs_362(let-values()(let-values()(call-expand-observe obs_362 'lift-provide result-s_347)))(void))))))"
"(define-values"
"(1/syntax-local-lift-module-end-declaration)"
"(lambda(s_363)"
"(let-values(((ctx_364 also-s_365)"
"(let-values(((temp126_367) 'syntax-local-lift-module-end-declaration)"
"((temp129_370)(lambda(lift-ctx_374) 0))"
"((temp131_372)"
"(lambda(orig-s_375 phase_376 to-module-lift-ctx_377)"
"(if(to-module-lift-context-end-as-expressions? to-module-lift-ctx_377)"
"(wrap-form '#%expression orig-s_375 phase_376)"
" orig-s_375)))"
"((temp132_373)"
"(lambda(s_378 phase_379 to-module-lift-ctx_380)"
"(wrap-form 'begin-for-syntax s_378 phase_379))))"
"(do-local-lift-to-module52.1"
" add-lifted-to-module-end!130_371"
" expand-context-to-module-lifts128_369"
" temp129_370"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp131_372"
" #t"
" temp132_373"
" #t"
" temp126_367"
" s127_368))))"
"(let-values(((obs_381)(expand-context-observer ctx_364)))"
"(if obs_381(let-values()(let-values()(call-expand-observe obs_381 'lift-statement s_363)))(void))))))"
"(define-values"
"(wrap-form)"
"(lambda(sym_382 s_383 phase_384)"
"(datum->syntax$1"
" #f"
"(list(datum->syntax$1(if phase_384(syntax-shift-phase-level$1 core-stx phase_384) #f) sym_382) s_383))))"
"(define-values"
"(1/syntax-local-module-defined-identifiers)"
"(lambda()"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-defined-identifiers"
"                         \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_385)"
"(let-values(((temp133_386) 'syntax-local-module-defined-identifiers))"
"(get-current-expand-context12.1 #f #f temp133_386 #t))))"
"(requireds->phase-ht(extract-module-definitions(expand-context-requires+provides ctx_385)))))))"
"(define-values"
"(1/syntax-local-module-required-identifiers)"
"(lambda(mod-path_387 phase-level_388)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_393)(not mod-path_387)))"
"(if or-part_393 or-part_393(1/module-path? mod-path_387)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                         \"(or/c module-path? #f)\""
" mod-path_387)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_394)(eq? phase-level_388 #t)))"
"(if or-part_394 or-part_394(phase? phase-level_388)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                           (format \"(or/c ~a #t)\" phase?-string)"
" phase-level_388)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-required-identifiers"
"                             \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_389)"
"(let-values(((temp134_395) 'syntax-local-module-required-identifiers))"
"(get-current-expand-context12.1 #f #f temp134_395 #t))))"
"(let-values(((requires+provides_390)(expand-context-requires+provides ctx_389)))"
"(let-values(((mpi_391)(if mod-path_387(module-path->mpi/context mod-path_387 ctx_389) #f)))"
"(let-values(((requireds_392)"
"(extract-all-module-requires"
" requires+provides_390"
" mpi_391"
"(if(eq? phase-level_388 #t) 'all phase-level_388))))"
"(if requireds_392"
"(alt-reverse"
"(let-values(((ht_396)(requireds->phase-ht requireds_392)))"
"(begin"
"(if((lambda(ht_397)(hash? ht_397)) ht_396)(void)(let-values()(default-in-hash ht_396)))"
"((letrec-values(((for-loop_398)"
"(lambda(fold-var_399 i_400)"
"(if i_400"
"(let-values(((phase_401 ids_402)(hash-iterate-key+value ht_396 i_400)))"
"(let-values(((fold-var_403)"
"(let-values()"
"(let-values(((fold-var_405)"
"(let-values()"
"(cons"
"(let-values()"
"(cons phase_401 ids_402))"
" fold-var_404))))"
"(values fold-var_405)))))"
"(for-loop_398 fold-var_403(hash-iterate-next ht_396 i_400))))"
" fold-var_399))))"
" for-loop_398)"
" null"
"(hash-iterate-first ht_396)))))"
" #f))))))))))"
"(define-values"
"(requireds->phase-ht)"
"(lambda(requireds_406)"
"(let-values()"
"(begin"
"(if(list? lst_407)(void)(let-values()(in-list lst_407)))"
"((letrec-values(((for-loop_408)"
"(lambda(ht_409 lst_410)"
"(if(pair? lst_410)"
"(let-values(((r_411)(unsafe-car lst_410)))"
"(let-values(((ht_412)"
"(let-values()"
"(let-values(((ht_414)"
"(let-values()"
"(hash-update"
" ht_413"
"(required-phase r_411)"
"(lambda(l_415)(cons(required-id r_411) l_415))"
" null))))"
"(values ht_414)))))"
"(for-loop_408 ht_412(unsafe-cdr lst_410))))"
" ht_409))))"
" for-loop_408)"
"(hasheqv)"
" lst_407)))))"
"(define-values"
"(1/syntax-local-module-exports)"
"(lambda(mod-path_416)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_421)(1/module-path? mod-path_416)))"
"(if or-part_421"
" or-part_421"
"(if(syntax?$1 mod-path_416)(1/module-path?(syntax->datum$1 mod-path_416)) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-exports"
"(string-append"
"                          \"(or/c module-path?\\n\""
"                          \"      (and/c syntax?\\n\""
"                          \"             (lambda (stx)\\n\""
"                          \"               (module-path? (syntax->datum stx)))))\")"
" mod-path_416)))"
"(values))))"
"(let-values(((ctx_417)"
"(let-values(((temp135_422) 'syntax-local-module-exports))"
"(get-current-expand-context12.1 #f #f temp135_422 #t))))"
"(let-values(((ns_418)(expand-context-namespace ctx_417)))"
"(let-values(((mod-name_419)"
"(1/module-path-index-resolve"
"(module-path->mpi/context"
"(if(syntax?$1 mod-path_416)(syntax->datum$1 mod-path_416) mod-path_416)"
" ctx_417)"
" #t)))"
"(let-values(((m_420)(namespace->module ns_418 mod-name_419)))"
"(begin"
"(if m_420(void)(let-values()(raise-unknown-module-error 'syntax-local-module-exports mod-name_419)))"
"(alt-reverse"
"(let-values(((ht_423)(module-provides m_420)))"
"(begin"
"(if((lambda(ht_424)(hash? ht_424)) ht_423)(void)(let-values()(default-in-hash ht_423)))"
"((letrec-values(((for-loop_425)"
"(lambda(fold-var_426 i_427)"
"(if i_427"
"(let-values(((phase_428 syms_429)(hash-iterate-key+value ht_423 i_427)))"
"(let-values(((fold-var_430)"
"(let-values()"
"(let-values(((fold-var_432)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_428"
"(alt-reverse"
"(let-values()"
"(begin"
"(if((lambda(ht_434)"
"(hash? ht_434))"
" ht_433)"
"(void)"
"(let-values()"
"(default-in-hash-keys"
" ht_433)))"
"((letrec-values(((for-loop_435)"
"(lambda(fold-var_436"
" i_437)"
"(if i_437"
"(let-values(((sym_438)"
"(hash-iterate-key"
" ht_433"
" i_437)))"
"(let-values(((fold-var_439)"
"(let-values()"
"(let-values(((fold-var_441)"
"(let-values()"
"(cons"
"(let-values()"
" sym_438)"
" fold-var_440))))"
"(values"
" fold-var_441)))))"
"(for-loop_435"
" fold-var_439"
"(hash-iterate-next"
" ht_433"
" i_437))))"
" fold-var_436))))"
" for-loop_435)"
" null"
"(hash-iterate-first ht_433)))))))"
" fold-var_431))))"
"(values fold-var_432)))))"
"(for-loop_425 fold-var_430(hash-iterate-next ht_423 i_427))))"
" fold-var_426))))"
" for-loop_425)"
" null"
"(hash-iterate-first ht_423)))))))))))))"
"(define-values"
"(1/syntax-local-submodules)"
"(lambda()"
"(let-values(((ctx_442)"
"(let-values(((temp136_444) 'syntax-local-submodules))"
"(get-current-expand-context12.1 #f #f temp136_444 #t))))"
"(let-values(((submods_443)(expand-context-declared-submodule-names ctx_442)))"
"(alt-reverse"
"(let-values()"
"(begin"
"(if((lambda(ht_446)(hash? ht_446)) ht_445)(void)(let-values()(default-in-hash ht_445)))"
"((letrec-values(((for-loop_447)"
"(lambda(fold-var_448 i_449)"
"(if i_449"
"(let-values(((name_450 kind_451)(hash-iterate-key+value ht_445 i_449)))"
"(let-values(((fold-var_452)"
"(let-values()"
"(if(eq? kind_451 'module)"
"(let-values()"
"(let-values(((fold-var_455)"
"(let-values()"
"(cons(let-values() name_450) fold-var_454))))"
"(values fold-var_455)))"
" fold-var_453))))"
"(for-loop_447 fold-var_452(hash-iterate-next ht_445 i_449))))"
" fold-var_448))))"
" for-loop_447)"
" null"
"(hash-iterate-first ht_445)))))))))"
"(define-values"
"(1/syntax-local-environment-ref)"
"(let-values(((syntax-local-environment-ref58_456)"
"(lambda(key57_457 default55_458 default56_459)"
"(let-values()"
"(let-values(((default_461)(if default56_459 default55_458 #f)))"
"(let-values()"
"(let-values(((ctx_462)"
"(let-values(((temp137_463) 'syntax-local-environment-ref))"
"(get-current-expand-context12.1 #f #f temp137_463 #t))))"
"(hash-ref(expand-context-user-env ctx_462) key_460 default_461))))))))"
"(case-lambda"
"((key_464)(syntax-local-environment-ref58_456 key_464 #f #f))"
"((key_465 default55_466)(syntax-local-environment-ref58_456 key_465 default55_466 #t)))))"
"(define-values"
"(1/syntax-local-get-shadower)"
"(let-values(((syntax-local-get-shadower63_467)"
"(lambda(id62_468 only-generated?60_469 only-generated?61_470)"
"(let-values()"
"(let-values(((only-generated?_472)(if only-generated?61_470 only-generated?60_469 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_471)"
"(void)"
"(let-values()"
"                                            (raise-argument-error 'syntax-local-get-shadower \"identifier?\" id_471)))"
"(values))))"
"(let-values(((ctx_473)"
"(let-values(((temp138_475) 'syntax-local-get-shadower))"
"(get-current-expand-context12.1 #f #f temp138_475 #t))))"
"(let-values(((new-id_474)(add-scopes id_471(expand-context-scopes ctx_473))))"
"(if(syntax-clean? id_471) new-id_474(syntax-taint$1 new-id_474)))))))))))"
"(case-lambda"
"((id_476)(syntax-local-get-shadower63_467 id_476 #f #f))"
"((id_477 only-generated?60_478)(syntax-local-get-shadower63_467 id_477 only-generated?60_478 #t)))))"
"(void)"
"(void)"
"(define-values"
"(syntax-source-accessor)"
"(lambda(who_1 srcloc-accessor_2)"
"(lambda(s_3)"
"(let-values((()"
"(begin"
"                      (if (syntax?$1 s_3) (void) (let-values () (raise-argument-error who_1 \"syntax?\" s_3)))"
"(values))))"
"(let-values(((srcloc_4)(syntax-srcloc s_3)))(if srcloc_4(srcloc-accessor_2 srcloc_4) #f))))))"
"(define-values(1/syntax-source)(syntax-source-accessor 'syntax-source srcloc-source))"
"(define-values(1/syntax-line)(syntax-source-accessor 'syntax-line srcloc-line))"
"(define-values(1/syntax-column)(syntax-source-accessor 'syntax-column srcloc-column))"
"(define-values(1/syntax-position)(syntax-source-accessor 'syntax-position srcloc-position))"
"(define-values(1/syntax-span)(syntax-source-accessor 'syntax-span srcloc-span))"
"(define-values"
"(encoded-srcloc?)"
"(lambda(v_5)"
"(let-values(((or-part_6)(if(list? v_5)(if(=(length v_5) 5)(srcloc-vector?(list->vector v_5)) #f) #f)))"
"(if or-part_6 or-part_6(if(vector? v_5)(if(=(vector-length v_5) 5)(srcloc-vector? v_5) #f) #f)))))"
"(define-values"
"(srcloc-vector?)"
"(lambda(v_7)"
"(if(let-values(((or-part_8)(not(vector-ref v_7 1))))"
"(if or-part_8 or-part_8(exact-positive-integer?(vector-ref v_7 1))))"
"(if(let-values(((or-part_9)(not(vector-ref v_7 2))))"
"(if or-part_9 or-part_9(exact-nonnegative-integer?(vector-ref v_7 2))))"
"(if(let-values(((or-part_10)(not(vector-ref v_7 3))))"
"(if or-part_10 or-part_10(exact-positive-integer?(vector-ref v_7 3))))"
"(let-values(((or-part_11)(not(vector-ref v_7 4))))"
"(if or-part_11 or-part_11(exact-nonnegative-integer?(vector-ref v_7 4))))"
" #f)"
" #f)"
" #f)))"
"(define-values"
"(to-srcloc-stx)"
"(lambda(v_12)"
"(if(pair? v_12)"
"(let-values()(to-srcloc-stx(list->vector v_12)))"
"(if(vector? v_12)"
"(let-values()"
"(let-values()"
"(if(syntax?$1 the-struct_13)"
"(let-values(((srcloc1_14)"
"(srcloc"
"(vector-ref v_12 0)"
"(vector-ref v_12 1)"
"(vector-ref v_12 2)"
"(vector-ref v_12 3)"
"(vector-ref v_12 4))))"
"(syntax1.1"
"(syntax-content the-struct_13)"
"(syntax-scopes the-struct_13)"
"(syntax-shifted-multi-scopes the-struct_13)"
"(syntax-scope-propagations the-struct_13)"
"(syntax-mpi-shifts the-struct_13)"
" srcloc1_14"
"(syntax-props the-struct_13)"
"(syntax-inspector the-struct_13)"
"(syntax-tamper the-struct_13)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_13))))"
"(let-values() v_12)))))"
"(void)"
"(void)"
"(define-values"
"(reader-syntax->syntax)"
"(lambda(v_1)"
"(let-values(((f_3)"
"(lambda(tail?_5 v_6)"
"(if(1/syntax? v_6)"
"(let-values()"
"(let-values(((e_7)(syntax-e$2 v_6)))"
"(if(syntax?$1 e_7)"
"(let-values() e_7)"
"(let-values()"
"(let-values(((s_8)"
"(let-values()"
"(if(syntax?$1 the-struct_10)"
"(let-values(((content1_11)(reader-syntax->syntax(syntax-e$2 v_6)))"
"((srcloc2_12)"
"(srcloc"
"(syntax-source$1 v_6)"
"(syntax-line$1 v_6)"
"(syntax-column$1 v_6)"
"(syntax-position$1 v_6)"
"(syntax-span$1 v_6)))"
"((props3_13)"
"(let-values(((tmp_14)"
"(1/syntax-property v_6 'paren-shape)))"
"(if(equal? tmp_14 '#\\[)"
"(let-values() original-square-props)"
"(if(equal? tmp_14 '#\\{)"
"(let-values() original-curly-props)"
"(let-values() original-props))))))"
"(syntax1.1"
" content1_11"
"(syntax-scopes the-struct_10)"
"(syntax-shifted-multi-scopes the-struct_10)"
"(syntax-scope-propagations the-struct_10)"
"(syntax-mpi-shifts the-struct_10)"
" srcloc2_12"
" props3_13"
"(syntax-inspector the-struct_10)"
"(syntax-tamper the-struct_10)))"
"                                                (raise-argument-error 'struct-copy \"syntax?\" the-struct_10)))))"
"(let-values(((keys_9)(syntax-property-symbol-keys$1 v_6)))"
"(if(null? keys_9)"
"(let-values() s_8)"
"(if(if(null?(cdr keys_9))(eq?(car keys_9) 'paren-shape) #f)"
"(let-values() s_8)"
"(let-values()"
"(let-values()"
"(begin"
"(if(list? lst_15)(void)(let-values()(in-list lst_15)))"
"((letrec-values(((for-loop_16)"
"(lambda(s_17 lst_18)"
"(if(pair? lst_18)"
"(let-values(((key_19)(unsafe-car lst_18)))"
"(let-values(((s_20)"
"(let-values()"
"(let-values(((s_22)"
"(let-values()"
"(syntax-property$1"
" s_21"
" key_19"
"(1/syntax-property"
" v_6"
" key_19)"
" #t))))"
"(values s_22)))))"
"(for-loop_16 s_20(unsafe-cdr lst_18))))"
" s_17))))"
" for-loop_16)"
" s_8"
" lst_15))))))))))))"
"(let-values() v_6))))"
"((seen_4) #f))"
"((letrec-values(((loop_23)"
"(lambda(tail?_24 s_25 prev-depth_26)"
"(let-values(((depth_27)(add1 prev-depth_26)))"
"(if(if seen_4(> depth_27 32) #f)"
"(let-values()"
"(datum-map-slow tail?_24 s_25(lambda(tail?_28 s_29)(f_3 tail?_28 s_29)) seen_4))"
"(if(null? s_25)"
"(let-values()(f_3 tail?_24 s_25))"
"(if(pair? s_25)"
"(let-values()"
"(f_3"
" tail?_24"
"(cons(loop_23 #f(car s_25) depth_27)(loop_23 #t(cdr s_25) depth_27))))"
"(if(let-values(((or-part_30)(symbol? s_25)))"
"(if or-part_30"
" or-part_30"
"(let-values(((or-part_31)(boolean? s_25)))"
"(if or-part_31 or-part_31(number? s_25)))))"
"(let-values()(f_3 #f s_25))"
"(if(let-values(((or-part_32)(vector? s_25)))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_33)(box? s_25)))"
"(if or-part_33"
" or-part_33"
"(let-values(((or-part_34)(prefab-struct-key s_25)))"
"(if or-part_34 or-part_34(hash? s_25)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_24"
" s_25"
"(lambda(tail?_35 s_36)(f_3 tail?_35 s_36))"
" seen_4))"
"(let-values()(f_3 #f s_25)))))))))))"
" loop_23)"
" #f"
" s_2"
" 0))))"
"(define-values(original-props)(syntax-props(syntax-property$1 empty-syntax original-property-sym #t)))"
"(define-values"
"(original-square-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\[)))"
"(define-values"
"(original-curly-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\{)))"
"(void)"
"(void)"
"(define-values"
"(read-syntax$1)"
"(lambda(src_1 in_2)(let-values()(reader-syntax->syntax(read-syntax$2 src_1 in_2)))))"
"(define-values"
"(read-syntax/recursive$1)"
"(lambda(src_3 in_4 start_5 readtable_6 graph?_7)"
"(let-values()(reader-syntax->syntax(read-syntax/recursive$2 src_3 in_4 start_5 readtable_6 graph?_7)))))"
"(void)"
"(void)"
"(define-values"
"(1/syntax-e)"
"(lambda(s_1)"
"(begin"
"      (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-e \"syntax?\" s_1)))"
"(syntax-e$1 s_1))))"
"(define-values"
"(1/syntax->datum)"
"(lambda(s_2)"
"(begin"
"      (if (syntax?$1 s_2) (void) (let-values () (raise-argument-error 'syntax->datum \"syntax?\" s_2)))"
"(syntax->datum$1 s_2))))"
"(define-values(maybe-syntax->datum)(lambda(s_3)(if(syntax?$1 s_3)(syntax->datum$1 s_3) s_3)))"
"(define-values"
"(1/datum->syntax)"
"(let-values(((datum->syntax9_4)"
"(lambda(stx-c7_5 s8_6 stx-l1_7 stx-p2_8 ignored3_9 stx-l4_10 stx-p5_11 ignored6_12)"
"(let-values()"
"(let-values()"
"(let-values(((stx-l_15)(if stx-l4_10 stx-l1_7 #f)))"
"(let-values(((stx-p_16)(if stx-p5_11 stx-p2_8 #f)))"
"(let-values(((ignored_17)(if ignored6_12 ignored3_9 #f)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_18)(not stx-c_13)))"
"(if or-part_18 or-part_18(syntax?$1 stx-c_13)))"
"(void)"
"                                  (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-c_13)))"
"(if(let-values(((or-part_19)(not stx-l_15)))"
"(if or-part_19"
" or-part_19"
"(let-values(((or-part_20)(syntax?$1 stx-l_15)))"
"(if or-part_20 or-part_20(encoded-srcloc? stx-l_15)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'datum->syntax"
"(string-append"
"                                      \"(or #f syntax?\\n\""
"                                      \"       (list/c any/c\\n\""
"                                      \"               (or/c exact-positive-integer? #f)\\n\""
"                                      \"               (or/c exact-nonnegative-integer? #f)\\n\""
"                                      \"               (or/c exact-positive-integer? #f)\\n\""
"                                      \"               (or/c exact-nonnegative-integer? #f))\\n\""
"                                      \"       (vector/c any/c\\n\""
"                                      \"                 (or/c exact-positive-integer? #f)\\n\""
"                                      \"                 (or/c exact-nonnegative-integer? #f)\\n\""
"                                      \"                 (or/c exact-positive-integer? #f)\\n\""
"                                      \"                 (or/c exact-nonnegative-integer? #f)))\")"
" stx-l_15)))"
"(if(let-values(((or-part_21)(not stx-p_16)))"
"(if or-part_21 or-part_21(syntax?$1 stx-p_16)))"
"(void)"
"                                  (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-p_16)))"
"(datum->syntax$1 stx-c_13 s_14(to-srcloc-stx stx-l_15) stx-p_16)))))))))))"
"(case-lambda"
"((stx-c_22 s_23)(datum->syntax9_4 stx-c_22 s_23 #f #f #f #f #f #f))"
"((stx-c_24 s_25 stx-l_26 stx-p_27 ignored3_28)"
"(datum->syntax9_4 stx-c_24 s_25 stx-l_26 stx-p_27 ignored3_28 #t #t #t))"
"((stx-c_29 s_30 stx-l_31 stx-p2_32)(datum->syntax9_4 stx-c_29 s_30 stx-l_31 stx-p2_32 #f #t #t #f))"
"((stx-c_33 s_34 stx-l1_35)(datum->syntax9_4 stx-c_33 s_34 stx-l1_35 #f #f #t #f #f)))))"
"(define-values"
"(1/syntax->list)"
"(lambda(s_36)"
"(begin"
"      (if (syntax?$1 s_36) (void) (let-values () (raise-argument-error 'syntax->list \"syntax?\" s_36)))"
"(syntax->list$1 s_36))))"
"(define-values"
"(1/syntax-original?)"
"(lambda(s_37)"
"(begin"
"      (if (syntax?$1 s_37) (void) (let-values () (raise-argument-error 'syntax-original? \"syntax?\" s_37)))"
"(if(syntax-property$1 s_37 original-property-sym)(not(syntax-any-macro-scopes? s_37)) #f))))"
"(define-values"
"(1/bound-identifier=?)"
"(let-values(((bound-identifier=?15_38)"
"(lambda(a13_39 b14_40 phase11_41 phase12_42)"
"(let-values()"
"(let-values()"
"(let-values(((phase_45)(if phase12_42 phase11_41(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? a_43)"
"(void)"
"                              (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" a_43)))"
"(if(identifier? b_44)"
"(void)"
"                              (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" b_44)))"
"(if(phase? phase_45)"
"(void)"
"(let-values()(raise-argument-error 'bound-identifier=? phase?-string phase_45)))"
"(bound-identifier=?$1 a_43 b_44 phase_45)))))))))"
"(case-lambda"
"((a_46 b_47)(bound-identifier=?15_38 a_46 b_47 #f #f))"
"((a_48 b_49 phase11_50)(bound-identifier=?15_38 a_48 b_49 phase11_50 #t)))))"
"(define-values"
"(1/free-identifier=?)"
"(let-values(((free-identifier=?23_51)"
"(lambda(a21_52 b22_53 a-phase17_54 b-phase18_55 a-phase19_56 b-phase20_57)"
"(let-values()"
"(let-values()"
"(let-values(((a-phase_60)(if a-phase19_56 a-phase17_54(1/syntax-local-phase-level))))"
"(let-values(((b-phase_61)(if b-phase20_57 b-phase18_55 a-phase_60)))"
"(let-values()"
"(begin"
"(if(identifier? a_58)"
"(void)"
"                                (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" a_58)))"
"(if(identifier? b_59)"
"(void)"
"                                (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" b_59)))"
"(if(phase? a-phase_60)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string a-phase_60)))"
"(if(phase? b-phase_61)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string b-phase_61)))"
"(free-identifier=?$1 a_58 b_59 a-phase_60 b-phase_61))))))))))"
"(case-lambda"
"((a_62 b_63)(free-identifier=?23_51 a_62 b_63 #f #f #f #f))"
"((a_64 b_65 a-phase_66 b-phase18_67)(free-identifier=?23_51 a_64 b_65 a-phase_66 b-phase18_67 #t #t))"
"((a_68 b_69 a-phase17_70)(free-identifier=?23_51 a_68 b_69 a-phase17_70 #f #t #f)))))"
"(define-values"
"(1/free-transformer-identifier=?)"
"(lambda(a_71 b_72)"
"(let-values((()"
"(begin"
"(if(identifier? a_71)"
"(void)"
"                      (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" a_71)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_72)"
"(void)"
"                        (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" b_72)))"
"(values))))"
"(let-values(((phase_73)(add1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_71 b_72 phase_73 phase_73))))))"
"(define-values"
"(1/free-template-identifier=?)"
"(lambda(a_74 b_75)"
"(let-values((()"
"(begin"
"(if(identifier? a_74)"
"(void)"
"                      (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" a_74)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_75)"
"(void)"
"                        (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" b_75)))"
"(values))))"
"(let-values(((phase_76)(sub1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_74 b_75 phase_76 phase_76))))))"
"(define-values"
"(1/free-label-identifier=?)"
"(lambda(a_77 b_78)"
"(begin"
"      (if (identifier? a_77) (void) (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" a_77)))"
"      (if (identifier? b_78) (void) (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" b_78)))"
"(free-identifier=?$1 a_77 b_78 #f #f))))"
"(define-values"
"(1/identifier-binding)"
"(let-values(((identifier-binding30_79)"
"(lambda(id29_80 phase25_81 top-level-symbol?26_82 phase27_83 top-level-symbol?28_84)"
"(let-values()"
"(let-values(((phase_86)(if phase27_83 phase25_81(1/syntax-local-phase-level))))"
"(let-values(((top-level-symbol?_87)(if top-level-symbol?28_84 top-level-symbol?26_82 #f)))"
"(let-values()"
"(begin"
"(if(identifier? id_85)"
"(void)"
"                              (let-values () (raise-argument-error 'identifier-binding \"identifier?\" id_85)))"
"(if(phase? phase_86)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding phase?-string phase_86)))"
"(identifier-binding$1 id_85 phase_86 top-level-symbol?_87)))))))))"
"(case-lambda"
"((id_88)(identifier-binding30_79 id_88 #f #f #f #f))"
"((id_89 phase_90 top-level-symbol?26_91)(identifier-binding30_79 id_89 phase_90 top-level-symbol?26_91 #t #t))"
"((id_92 phase25_93)(identifier-binding30_79 id_92 phase25_93 #f #t #f)))))"
"(define-values"
"(1/identifier-transformer-binding)"
"(let-values(((identifier-transformer-binding35_94)"
"(lambda(id34_95 phase32_96 phase33_97)"
"(let-values()"
"(let-values(((phase_99)(if phase33_97 phase32_96(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_98)"
"(void)"
"                            (let-values () (raise-argument-error 'identifier-transformer-binding \"identifier?\" id_98)))"
"(identifier-binding$1 id_98(if phase_99(add1 phase_99) #f)))))))))"
"(case-lambda"
"((id_100)(identifier-transformer-binding35_94 id_100 #f #f))"
"((id_101 phase32_102)(identifier-transformer-binding35_94 id_101 phase32_102 #t)))))"
"(define-values"
"(1/identifier-template-binding)"
"(lambda(id_103)"
"(begin"
"(if(identifier? id_103)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-template-binding \"identifier?\" id_103)))"
"(identifier-binding$1 id_103(sub1(1/syntax-local-phase-level))))))"
"(define-values"
"(1/identifier-label-binding)"
"(lambda(id_104)"
"(begin"
"(if(identifier? id_104)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-label-binding \"identifier?\" id_104)))"
"(identifier-binding$1 id_104 #f))))"
"(define-values"
"(1/identifier-binding-symbol)"
"(let-values(((identifier-binding-symbol40_105)"
"(lambda(id39_106 phase37_107 phase38_108)"
"(let-values()"
"(let-values(((phase_110)(if phase38_108 phase37_107(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_109)"
"(void)"
"                            (let-values () (raise-argument-error 'identifier-binding-symbol \"identifier?\" id_109)))"
"(if(phase? phase_110)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding-symbol phase?-string phase_110)))"
"(identifier-binding-symbol$1 id_109 phase_110))))))))"
"(case-lambda"
"((id_111)(identifier-binding-symbol40_105 id_111 #f #f))"
"((id_112 phase37_113)(identifier-binding-symbol40_105 id_112 phase37_113 #t)))))"
"(define-values"
"(1/identifier-prune-lexical-context)"
"(let-values(((identifier-prune-lexical-context45_114)"
"(lambda(id44_115 syms42_116 syms43_117)"
"(let-values()"
"(let-values(((syms_119)(if syms43_117 syms42_116 null)))"
"(let-values()"
"(begin"
"(if(identifier? id_118)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'identifier-prune-lexical-context \"identifier?\" id_118)))"
"(if(if(list? syms_119)(andmap2 symbol? syms_119) #f)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'identifier-prune-lexical-context \"(listof symbol?)\" syms_119)))"
" id_118)))))))"
"(case-lambda"
"((id_120)(identifier-prune-lexical-context45_114 id_120 #f #f))"
"((id_121 syms42_122)(identifier-prune-lexical-context45_114 id_121 syms42_122 #t)))))"
"(define-values"
"(1/syntax-debug-info)"
"(let-values(((syntax-debug-info52_123)"
"(lambda(s51_124 phase47_125 all-bindings?48_126 phase49_127 all-bindings?50_128)"
"(let-values()"
"(let-values(((phase_130)(if phase49_127 phase47_125(1/syntax-local-phase-level))))"
"(let-values(((all-bindings?_131)(if all-bindings?50_128 all-bindings?48_126 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_129)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-debug-info \"syntax?\" s_129)))"
"(if(phase? phase_130)"
"(void)"
"(let-values()(raise-argument-error 'syntax-debug-info phase?-string phase_130)))"
"(syntax-debug-info$1 s_129 phase_130 all-bindings?_131)))))))))"
"(case-lambda"
"((s_132)(syntax-debug-info52_123 s_132 #f #f #f #f))"
"((s_133 phase_134 all-bindings?48_135)(syntax-debug-info52_123 s_133 phase_134 all-bindings?48_135 #t #t))"
"((s_136 phase47_137)(syntax-debug-info52_123 s_136 phase47_137 #f #t #f)))))"
"(define-values"
"(1/syntax-shift-phase-level)"
"(lambda(s_138 phase_139)"
"(begin"
"      (if (syntax?$1 s_138) (void) (let-values () (raise-argument-error 'syntax-shift-phase-level \"syntax?\" s_138)))"
"(if(phase? phase_139)"
"(void)"
"(let-values()(raise-argument-error 'syntax-shift-phase-level phase?-string phase_139)))"
"(syntax-shift-phase-level$1 s_138 phase_139))))"
"(define-values"
"(1/syntax-track-origin)"
"(lambda(new-stx_140 old-stx_141 id_142)"
"(let-values((()"
"(begin"
"(if(syntax?$1 new-stx_140)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" new-stx_140)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(syntax?$1 old-stx_141)"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" old-stx_141)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? id_142)"
"(void)"
"                          (let-values () (raise-argument-error 'syntax-track-origin \"identifier?\" id_142)))"
"(values))))"
"(let-values(((s_143)(syntax-track-origin$1 new-stx_140 old-stx_141 id_142)))"
"(let-values(((ctx_144)"
"(let-values(((temp72_146) #t))(get-current-expand-context12.1 temp72_146 #t #f #f))))"
"(begin"
"(if ctx_144"
"(let-values()"
"(let-values(((obs_147)(expand-context-observer ctx_144)))"
"(if obs_147"
"(let-values()(let-values()(call-expand-observe obs_147 'track-origin s_143)))"
"(void))))"
"(void))"
" s_143))))))))"
"(define-values"
"(1/read-syntax)"
"(let-values(((read-syntax58_148)"
"(lambda(src54_149 in55_150 src56_151 in57_152)"
"(let-values(((src_153)(if src56_151 src54_149(object-name(current-input-port)))))"
"(let-values(((in_154)(if in57_152 in55_150(current-input-port))))"
"(let-values()"
"(begin"
"(if(input-port? in_154)"
"(void)"
"                            (let-values () (raise-argument-error 'read-syntax \"input-port?\" in_154)))"
"(read-syntax$1 src_153 in_154))))))))"
"(case-lambda"
"(()(read-syntax58_148 #f #f #f #f))"
"((src_155 in55_156)(read-syntax58_148 src_155 in55_156 #t #t))"
"((src54_157)(read-syntax58_148 src54_157 #f #t #f)))))"
"(define-values"
"(1/read-syntax/recursive)"
"(let-values(((read-syntax/recursive70_158)"
"(lambda(src60_159"
" in61_160"
" start62_161"
" readtable63_162"
" graph?64_163"
" src65_164"
" in66_165"
" start67_166"
" readtable68_167"
" graph?69_168)"
"(let-values(((src_169)(if src65_164 src60_159(object-name(current-input-port)))))"
"(let-values(((in_170)(if in66_165 in61_160(current-input-port))))"
"(let-values(((start_171)(if start67_166 start62_161 #f)))"
"(let-values(((readtable_172)(if readtable68_167 readtable63_162(current-readtable))))"
"(let-values(((graph?_173)(if graph?69_168 graph?64_163 #t)))"
"(let-values()"
"(begin"
"(if(input-port? in_170)"
"(void)"
"                                  (let-values () (raise-argument-error 'read-syntax/recursive \"input-port?\" in_170)))"
"(if(let-values(((or-part_174)(char? start_171)))"
"(if or-part_174 or-part_174(not start_171)))"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'read-syntax/recursive \"(or/c char? #f)\" start_171)))"
"(if(let-values(((or-part_175)(readtable? readtable_172)))"
"(if or-part_175 or-part_175(not readtable_172)))"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'read-syntax/recursive \"(or/c readtable? #f)\" readtable_172)))"
"(read-syntax/recursive$1 src_169 in_170 start_171 readtable_172 graph?_173)))))))))))"
"(case-lambda"
"(()(read-syntax/recursive70_158 #f #f #f #f #f #f #f #f #f #f))"
"((src_176 in_177 start_178 readtable_179 graph?64_180)"
"(read-syntax/recursive70_158 src_176 in_177 start_178 readtable_179 graph?64_180 #t #t #t #t #t))"
"((src_181 in_182 start_183 readtable63_184)"
"(read-syntax/recursive70_158 src_181 in_182 start_183 readtable63_184 #f #t #t #t #t #f))"
"((src_185 in_186 start62_187)(read-syntax/recursive70_158 src_185 in_186 start62_187 #f #f #t #t #t #f #f))"
"((src_188 in61_189)(read-syntax/recursive70_158 src_188 in61_189 #f #f #f #t #t #f #f #f))"
"((src60_190)(read-syntax/recursive70_158 src60_190 #f #f #f #f #t #f #f #f #f)))))"
"(void)"
"(void)"
"(define-values"
"(make-create-root-expand-context-from-module)"
"(lambda(requires_1 evaled-ld-h_2)"
"(lambda(ns_3 phase-shift_4 original-self_5 self_6)"
"(let-values(((root-ctx_7)(let-values()(make-root-expand-context10.1 #f #f #f #f #f #f #f #f))))"
"(let-values(((s_8)"
"(syntax-shift-phase-level$1"
"(add-scopes empty-syntax(root-expand-context-module-scopes root-ctx_7))"
" phase-shift_4)))"
"(let-values((()"
"(begin"
"(let-values()"
"(begin"
"(if(list? lst_10)(void)(let-values()(in-list lst_10)))"
"((letrec-values(((for-loop_11)"
"(lambda(fold-var_12 lst_13)"
"(if(pair? lst_13)"
"(let-values(((phase+reqs_14)(unsafe-car lst_13)))"
"(let-values(((fold-var_15)"
"(let-values()"
"(let-values(((fold-var_17)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_18)"
"(car"
" phase+reqs_14)))"
"(let-values(((lst_19)"
"(cdr"
" phase+reqs_14)))"
"(begin"
"(if(list? lst_19)"
"(void)"
"(let-values()"
"(in-list lst_19)))"
"((letrec-values(((for-loop_20)"
"(lambda(fold-var_21"
" lst_22)"
"(if(pair?"
" lst_22)"
"(let-values(((req_23)"
"(unsafe-car"
" lst_22)))"
"(let-values(((fold-var_24)"
"(let-values()"
"(let-values(((fold-var_26)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_27)"
"(module-path-index-shift"
" req_23"
" original-self_5"
" self_6)))"
"(let-values(((temp6_34)"
"(phase+"
" phase_18"
" phase-shift_4))"
"((temp8_36)"
" 'module))"
"(perform-require!72.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp6_34"
" #f"
" #f"
" phase-shift7_35"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp8_36"
" mpi1_29"
" s2_30"
" self3_31"
" s4_32"
" ns5_33))))"
"(void)))))"
"(values"
" fold-var_26)))))"
"(for-loop_20"
" fold-var_24"
"(unsafe-cdr"
" lst_22))))"
" fold-var_21))))"
" for-loop_20)"
"(void)"
" lst_19)))))"
"(void)))))"
"(values fold-var_17)))))"
"(for-loop_11 fold-var_15(unsafe-cdr lst_13))))"
" fold-var_12))))"
" for-loop_11)"
"(void)"
" lst_10)))"
"(values))))"
"(let-values(((defined-syms_9)(root-expand-context-defined-syms root-ctx_7)))"
"(begin"
"(let-values()"
"(begin"
"(if((lambda(ht_38)(hash? ht_38)) ht_37)(void)(let-values()(default-in-hash ht_37)))"
"((letrec-values(((for-loop_39)"
"(lambda(fold-var_40 i_41)"
"(if i_41"
"(let-values(((phase_42 linklet_43)(hash-iterate-key+value ht_37 i_41)))"
"(let-values(((fold-var_44)"
"(let-values()"
"(let-values(((fold-var_46)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((lst_47)"
"(1/linklet-export-variables"
" linklet_43)))"
"(begin"
"(if(list? lst_47)"
"(void)"
"(let-values()(in-list lst_47)))"
"((letrec-values(((for-loop_48)"
"(lambda(fold-var_49"
" lst_50)"
"(if(pair?"
" lst_50)"
"(let-values(((sym_51)"
"(unsafe-car"
" lst_50)))"
"(let-values(((fold-var_52)"
"(let-values()"
"(let-values(((fold-var_54)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_55)"
"(datum->syntax$1"
" s_8"
" sym_51)))"
"(begin"
"(let-values(((temp10_57)"
"(let-values()"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" self12_59"
" phase13_60"
" sym14_61)))"
"((temp11_58)"
"(phase+"
" phase_42"
" phase-shift_4)))"
"(add-binding!17.1"
" #f"
" #f"
" #f"
" #f"
" id9_56"
" temp10_57"
" temp11_58))"
"(add-defined-sym!"
" defined-syms_9"
" phase_42"
" sym_51"
" id_55))))"
"(void)))))"
"(values"
" fold-var_54)))))"
"(for-loop_48"
" fold-var_52"
"(unsafe-cdr"
" lst_50))))"
" fold-var_49))))"
" for-loop_48)"
"(void)"
" lst_47))))"
"(void)))))"
"(values fold-var_46)))))"
"(for-loop_39 fold-var_44(hash-iterate-next ht_37 i_41))))"
" fold-var_40))))"
" for-loop_39)"
"(void)"
"(hash-iterate-first ht_37))))"
" root-ctx_7))))))))"
"(void)"
"(void)"
"(define-values(module-cache)(make-weak-hash))"
"(define-values(make-module-cache-key)(lambda(hash-code_1)(if hash-code_1(list hash-code_1) #f)))"
"(define-values"
"(module-cache-set!)"
"(lambda(key_2 proc_3)(hash-set! module-cache key_2(make-ephemeron key_2 proc_3))))"
"(define-values"
"(module-cache-ref)"
"(lambda(key_4)(let-values(((e_5)(hash-ref module-cache key_4 #f)))(if e_5(ephemeron-value e_5) #f))))"
"(void)"
"(void)"
"(define-values"
"(eval-module8.1)"
"(lambda(namespace1_1"
" namespace4_2"
" supermodule-name3_3"
" supermodule-name6_4"
" with-submodules?2_5"
" with-submodules?5_6"
" c7_7)"
"(let-values()"
"(let-values(((ns_9)(if namespace4_2 namespace1_1(1/current-namespace))))"
"(let-values(((with-submodules?_10)(if with-submodules?5_6 with-submodules?2_5 #t)))"
"(let-values(((supermodule-name_11)(if supermodule-name6_4 supermodule-name3_3 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((dh_12 h_13 data-instance_14 declaration-instance_15)"
"(compiled-module->dh+h+data-instance+declaration-instance c_8)))"
"(let-values(((syntax-literals-data-instance_16)"
"(if(compiled-in-memory? c_8)"
"(make-syntax-literal-data-instance-from-compiled-in-memory c_8)"
"(let-values(((l_37)(hash-ref h_13 'stx-data #f)))"
"(if l_37"
"(let-values()"
"(1/instantiate-linklet"
"(1/eval-linklet l_37)"
"(list deserialize-instance data-instance_14)))"
"(if(eq?(hash-ref h_13 'module->namespace #f) 'empty)"
"(let-values() empty-syntax-literals-instance/empty-namespace)"
"(let-values() empty-syntax-literals-data-instance)))))))"
"(let-values(((decl_17)"
"(lambda(key_38)(1/instance-variable-value declaration-instance_15 key_38))))"
"(let-values(((pre-submodule-names_18)(hash-ref h_13 'pre null)))"
"(let-values(((post-submodule-names_19)(hash-ref h_13 'post null)))"
"(let-values(((default-name_20)(hash-ref h_13 'name 'module)))"
"(let-values(((cache-key_21)"
"(make-module-cache-key"
"(if(null? pre-submodule-names_18)"
"(if(null? post-submodule-names_19)(hash-ref h_13 'hash-code #f) #f)"
" #f))))"
"(let-values(((cross-phase-persistent?_22)(hash-ref h_13 'cross-phase-persistent? #f)))"
"(let-values(((min-phase_23)(hash-ref h_13 'min-phase 0)))"
"(let-values(((max-phase_24)(hash-ref h_13 'max-phase 0)))"
"(let-values(((language-info_25)(hash-ref h_13 'language-info #f)))"
"(let-values(((phases-h_26)"
"(let-values(((end_40)(add1 max-phase_24))((inc_41) 1))"
"(begin"
"(if(if(real? start_39)"
"(if(real? end_40)(real? inc_41) #f)"
" #f)"
"(void)"
"(let-values()(in-range start_39 end_40 inc_41)))"
"((letrec-values(((for-loop_42)"
"(lambda(table_43 pos_44)"
"(if(< pos_44 end_40)"
"(let-values()"
"(let-values(((table_46)"
"(let-values(((v_47)"
"(hash-ref"
" h_13"
" phase-level_45"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_48)"
"(lambda(table_49)"
"(let-values()"
"(let-values(((table_50)"
"(let-values()"
"(if v_47"
"(let-values()"
"(let-values(((table_53)"
"(let-values()"
"(let-values(((key_54"
" val_55)"
"(let-values()"
"(values"
" phase-level_45"
"(1/eval-linklet"
" v_47)))))"
"(hash-set"
" table_52"
" key_54"
" val_55)))))"
"(values"
" table_53)))"
" table_51))))"
" table_50)))))"
" for-loop_48)"
" table_43)))))"
"(for-loop_42"
" table_46"
"(+ pos_44 inc_41))))"
" table_43))))"
" for-loop_42)"
" '#hash()"
" start_39)))))"
"(let-values(((syntax-literals-linklet_27)"
"(let-values(((l_56)(hash-ref h_13 'stx #f)))"
"(if l_56(1/eval-linklet l_56) #f))))"
"(let-values(((extra-inspector_28)"
"(if(compiled-in-memory? c_8)"
"(compiled-in-memory-compile-time-inspector c_8)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_29)"
"(if(compiled-in-memory? c_8)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_8)"
" '#hasheqv())))"
"(let-values(((requires_30)(decl_17 'requires)))"
"(let-values(((provides_31)(decl_17 'provides)))"
"(let-values(((original-self_32)(decl_17 'self-mpi)))"
"(let-values(((phase-to-link-modules_33)"
"(decl_17 'phase-to-link-modules)))"
"(let-values(((create-root-expand-context-from-module_34)"
"(make-create-root-expand-context-from-module"
" requires_30"
" phases-h_26)))"
"(let-values(((declare-submodules_35)"
"(if dh_12"
"(lambda(ns_57 names_58 declare-name_59 pre?_60)"
"(if(compiled-in-memory? c_8)"
"(let-values(((lst_61)"
"(if pre?_60"
"(compiled-in-memory-pre-compiled-in-memorys"
" c_8)"
"(compiled-in-memory-post-compiled-in-memorys"
" c_8))))"
"(begin"
"(if(list? lst_61)"
"(void)"
"(let-values()(in-list lst_61)))"
"((letrec-values(((for-loop_62)"
"(lambda(fold-var_63"
" lst_64)"
"(if(pair? lst_64)"
"(let-values(((c_65)"
"(unsafe-car"
" lst_64)))"
"(let-values(((fold-var_66)"
"(let-values()"
"(let-values(((fold-var_68)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...nder/eval/module.rkt:109:17_69)"
" eval-module10.1))"
"(eval-module8.1"
" ns13_71"
" #t"
" declare-name14_72"
" #t"
" #f"
" #f"
" c12_70)))"
"(void)))))"
"(values"
" fold-var_68)))))"
"(for-loop_62"
" fold-var_66"
"(unsafe-cdr"
" lst_64))))"
" fold-var_63))))"
" for-loop_62)"
"(void)"
" lst_61)))"
"(let-values()"
"(begin"
"(if(list? lst_73)"
"(void)"
"(let-values()(in-list lst_73)))"
"((letrec-values(((for-loop_74)"
"(lambda(fold-var_75"
" lst_76)"
"(if(pair? lst_76)"
"(let-values(((name_77)"
"(unsafe-car"
" lst_76)))"
"(let-values(((fold-var_78)"
"(let-values()"
"(let-values(((fold-var_80)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((sm-cd_81)"
"(hash-ref"
" dh_12"
" name_77"
" #f)))"
"(begin"
"(if sm-cd_81"
"(void)"
"(let-values()"
"(error"
"                                                                                                                                                     \"missing submodule declaration:\""
" name_77)))"
"(let-values(((...nder/eval/module.rkt:113:17_82)"
" eval-module10.1))"
"(eval-module8.1"
" ns16_84"
" #t"
" declare-name17_85"
" #t"
" #f"
" #f"
" sm-cd15_83)))))"
"(void)))))"
"(values"
" fold-var_80)))))"
"(for-loop_74"
" fold-var_78"
"(unsafe-cdr"
" lst_76))))"
" fold-var_75))))"
" for-loop_74)"
"(void)"
" lst_73)))))"
" void)))"
"(let-values(((declare-this-module_36)"
"(lambda(ns_86)"
"(let-values(((m_87)"
"(let-values(((temp22_90)"
"(1/current-module-declare-source))"
"((temp30_98)"
"(append"
" pre-submodule-names_18"
" post-submodule-names_19))"
"((temp32_100)"
"(lambda()"
"(get-all-variables"
" phases-h_26)))"
"((temp33_101)"
"(lambda(phase-level_104"
" ns_105)"
"(module-linklet-info2.1"
"(hash-ref"
" phases-h_26"
" phase-level_104"
" #f)"
"(hash-ref"
" phase-to-link-modules_33"
" phase-level_104"
" #f)"
" original-self_32)))"
"((temp34_102)"
"(lambda(data-box_106"
" ns_107"
" phase-shift_108"
" self_109"
" bulk-binding-registry_110"
" insp_111)"
"(if(unbox"
" data-box_106)"
"(void)"
"(let-values()"
"(init-instance-data!"
" data-box_106"
" cache-key_21"
" ns_107"
" syntax-literals-linklet_27"
" data-instance_14"
" syntax-literals-data-instance_16"
" phase-shift_108"
" original-self_32"
" self_109"
" bulk-binding-registry_110"
" insp_111"
" create-root-expand-context-from-module_34)))))"
"((temp35_103)"
"(lambda(data-box_112"
" ns_113"
" phase-shift_114"
" phase-level_115"
" self_116"
" bulk-binding-registry_117"
" insp_118)"
"(let-values()"
"(let-values(((syntax-literals-instance_119)"
"(instance-data-syntax-literals-instance"
"(unbox"
" data-box_112))))"
"(let-values(((phase-linklet_120)"
"(hash-ref"
" phases-h_26"
" phase-level_115"
" #f)))"
"(if phase-linklet_120"
"(let-values()"
"(let-values(((module-uses_121)"
"(hash-ref"
" phase-to-link-modules_33"
" phase-level_115)))"
"(let-values(((import-module-instances_122"
" import-instances_123)"
"(let-values(((mis_126"
" is_127)"
"(let-values()"
"(begin"
"(if(list?"
" lst_128)"
"(void)"
"(let-values()"
"(in-list"
" lst_128)))"
"((letrec-values(((for-loop_129)"
"(lambda(mis_130"
" is_131"
" lst_132)"
"(if(pair?"
" lst_132)"
"(let-values(((mu_133)"
"(unsafe-car"
" lst_132)))"
"(let-values(((mis_134"
" is_135)"
"(let-values()"
"(let-values(((mis_138"
" is_139)"
"(let-values()"
"(let-values(((mis43_140"
" is44_141)"
"(let-values()"
"(let-values(((temp49_147)"
"(phase+"
"(phase-"
" phase-level_115"
"(module-use-phase"
" mu_133))"
" phase-shift_114)))"
"(namespace-module-use->module+linklet-instances144.1"
" temp49_147"
" original-self47_145"
" #t"
" self48_146"
" #t"
" ns45_143"
" mu46_144)))))"
"(values"
"(cons"
" mis43_140"
" mis_136)"
"(cons"
" is44_141"
" is_137))))))"
"(values"
" mis_138"
" is_139)))))"
"(for-loop_129"
" mis_134"
" is_135"
"(unsafe-cdr"
" lst_132))))"
"(values"
" mis_130"
" is_131)))))"
" for-loop_129)"
" null"
" null"
" lst_128)))))"
"(values"
"(alt-reverse"
" mis_126)"
"(alt-reverse"
" is_127)))))"
"(let-values((()"
"(begin"
"(let-values(((temp37_150)"
" 2)"
"((temp42_155)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_29"
" phase-level_115"
" #f)))"
"(check-require-access9.1"
" temp37_150"
" phase-linklet36_149"
" module-uses38_151"
" import-module-instances39_152"
" insp40_153"
" extra-inspector41_154"
" temp42_155))"
"(values))))"
"(let-values(((module-body-instance-instance_124)"
"(let-values(((temp50_157)"
"(lambda(name_158"
" val_159)"
"(namespace-set-transformer!"
" ns_113"
"(sub1"
" phase-level_115)"
" name_158"
" val_159))))"
"(make-module-body-instance-instance18.1"
" temp50_157))))"
"(let-values(((instantiate-body_125)"
"(lambda()"
"(1/instantiate-linklet"
" phase-linklet_120"
"(list*"
" syntax-literals-instance_119"
" module-body-instance-instance_124"
" import-instances_123)"
"(namespace->instance"
" ns_113"
" phase-level_115)))))"
"(if(zero-phase?"
" phase-level_115)"
"(let-values()"
"(if(zero-phase?"
" phase-shift_114)"
"(let-values()"
"(instantiate-body_125))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" ns_113)"
"(let-values()"
"(instantiate-body_125))))))"
"(let-values()"
"(let-values(((ns-1_160)"
"(namespace->namespace-at-phase"
" ns_113"
"(phase+"
" phase-shift_114"
"(sub1"
" phase-level_115)))))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(delay"
"(lambda()"
"(let-values()"
"(make-expand-context5.1"
" #f"
" #f"
" ns-151_161))))"
" 1/current-namespace"
" ns_113"
" current-module-code-inspector"
" insp_118)"
"(let-values()"
"(instantiate-body_125))))))))))))"
"(void))))))))"
"(make-module37.1"
" cross-phase-persistent?29_97"
" #t"
" temp32_100"
" #t"
" temp35_103"
" language-info26_94"
" #t"
" max-phase28_96"
" #t"
" min-phase27_95"
" #t"
" #f"
" #f"
" temp33_101"
" #t"
" #f"
" #f"
" temp34_102"
" #t"
" #f"
" #f"
" provides25_93"
" requires24_92"
" #t"
" original-self23_91"
" temp22_90"
" #t"
" temp30_98"
" #t"
" supermodule-name31_99"
" #t))))"
"(let-values(((declare-name_88)"
"(substitute-module-declare-name"
" default-name_20)))"
"(begin"
"(if with-submodules?_10"
"(let-values()"
"(declare-submodules_35"
" ns_86"
" pre-submodule-names_18"
" declare-name_88"
" #t))"
"(void))"
"(let-values()"
"(declare-module!56.1"
" with-submodules?21_166"
" #t"
" ns18_163"
" m19_164"
" declare-name20_165))"
"(if with-submodules?_10"
"(let-values()"
"(declare-submodules_35"
" ns_86"
" post-submodule-names_19"
" declare-name_88"
" #f))"
"(void))))))))"
"(begin"
"(if cache-key_21"
"(let-values()"
"(module-cache-set!"
" cache-key_21"
" declare-this-module_36))"
"(void))"
"(declare-this-module_36"
" ns_9))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack9.1)"
"(lambda(given-kws_167 given-args_168 c7_169)"
"(let-values(((namespace4_170)(if(pair? given-kws_167)(eq? '#:namespace(car given-kws_167)) #f)))"
"(let-values(((namespace1_171)(if namespace4_170(car given-args_168)(void)))"
"((given-kws_172)(if namespace4_170(cdr given-kws_167) given-kws_167))"
"((given-args_173)(if namespace4_170(cdr given-args_168) given-args_168)))"
"(let-values(((supermodule-name6_174)"
"(if(pair? given-kws_172)(eq? '#:supermodule-name(car given-kws_172)) #f)))"
"(let-values(((supermodule-name3_175)(if supermodule-name6_174(car given-args_173)(void)))"
"((given-kws_176)(if supermodule-name6_174(cdr given-kws_172) given-kws_172))"
"((given-args_177)(if supermodule-name6_174(cdr given-args_173) given-args_173)))"
"(let-values(((with-submodules?5_178)(pair? given-kws_176)))"
"(let-values(((with-submodules?2_179)(if with-submodules?5_178(car given-args_177)(void))))"
"(eval-module8.1"
" namespace1_171"
" namespace4_170"
" supermodule-name3_175"
" supermodule-name6_174"
" with-submodules?2_179"
" with-submodules?5_178"
" c7_169)))))))))"
"(define-values"
"(eval-module10.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_180 given-argc_181)"
"(if(= given-argc_181 3)"
"(let-values()"
"(let-values(((l1_183)(if(null? l1_182) l1_182(if(eq?(car l1_182) '#:namespace)(cdr l1_182) l1_182))))"
"(let-values()"
"(let-values(((l1_185)"
"(if(null? l1_184) l1_184(if(eq?(car l1_184) '#:supermodule-name)(cdr l1_184) l1_184))))"
"(let-values()"
"(let-values(((l1_187)"
"(if(null? l1_186)"
" l1_186"
"(if(eq?(car l1_186) '#:with-submodules?)(cdr l1_186) l1_186))))"
"(null? l1_187)))))))"
" #f))"
"(case-lambda((given-kws_188 given-args_189 c_190)(unpack9.1 given-kws_188 given-args_189 c_190)))"
" null"
" '(#:namespace #:supermodule-name #:with-submodules?)"
"(let-values(((eval-module_191)(case-lambda((c_192)(unpack9.1 null null c_192))))) eval-module_191)))"
"(define-values"
"(struct:instance-data instance-data11.1 instance-data? instance-data-syntax-literals-instance instance-data-cache-key)"
"(let-values(((struct:_193 make-_194 ?_195 -ref_196 -set!_197)"
"(let-values()"
"(let-values()"
"(make-struct-type 'instance-data #f 2 0 #f null(current-inspector) #f '(0 1) #f 'instance-data)))))"
"(values"
" struct:_193"
" make-_194"
" ?_195"
"(make-struct-field-accessor -ref_196 0 'syntax-literals-instance)"
"(make-struct-field-accessor -ref_196 1 'cache-key))))"
"(define-values"
"(init-instance-data!)"
"(lambda(data-box_218"
" cache-key_219"
" ns_220"
" syntax-literals-linklet_221"
" data-instance_222"
" syntax-literals-data-instance_223"
" phase-shift_224"
" original-self_225"
" self_226"
" bulk-binding-registry_227"
" insp_228"
" create-root-expand-context-from-module_229)"
"(let-values((()"
"(begin"
"(if(not(load-on-demand-enabled))"
"(let-values()"
"(force-syntax-deserialize syntax-literals-data-instance_223 bulk-binding-registry_227))"
"(void))"
"(values))))"
"(let-values(((inst_230)"
"(let-values(((temp58_239)"
"                                  (lambda (name_240 val_241) (error \"shouldn't get here for the root-ctx linklet\"))))"
"(make-instance-instance13.1"
" bulk-binding-registry57_238"
" insp56_237"
" ns53_234"
" phase-shift54_235"
" self55_236"
" temp58_239))))"
"(let-values(((syntax-literals-instance_231)"
"(if syntax-literals-linklet_221"
"(1/instantiate-linklet"
" syntax-literals-linklet_221"
"(list deserialize-instance data-instance_222 syntax-literals-data-instance_223 inst_230))"
" empty-syntax-literals-instance)))"
"(let-values((()"
"(begin"
"(set-box! data-box_218(instance-data11.1 syntax-literals-instance_231 cache-key_219))"
"(values))))"
"(let-values(((get-encoded-root-expand-ctx_232)"
"(1/instance-variable-value syntax-literals-instance_231 'get-encoded-root-expand-ctx)))"
"(if(eq? get-encoded-root-expand-ctx_232 'empty)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_220"
"(delay(lambda()(let-values()(make-root-expand-context10.1 #f #f #f #f #f #f #f #f))))))"
"(if(procedure? get-encoded-root-expand-ctx_232)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_220"
"(delay(lambda()(root-expand-context-decode-for-module(get-encoded-root-expand-ctx_232))))))"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_220"
"(delay"
"(lambda()"
"(create-root-expand-context-from-module_229"
" ns_220"
" phase-shift_224"
" original-self_225"
" self_226))))))))))))))"
"(define-values"
"(force-syntax-deserialize)"
"(lambda(syntax-literals-data-instance_242 bulk-binding-registry_243)"
"(let-values(((deserialize-syntax_244)"
"(1/instance-variable-value syntax-literals-data-instance_242 deserialize-syntax-id)))"
"(if deserialize-syntax_244(let-values()(deserialize-syntax_244 bulk-binding-registry_243))(void)))))"
"(define-values"
"(compiled-module->dh+h)"
"(lambda(c_245)"
"(let-values(((ld/h_246)(if(compiled-in-memory? c_245)(compiled-in-memory-linklet-directory c_245) c_245)))"
"(let-values(((dh_247)"
"(if(1/linklet-directory? ld/h_246)"
"(let-values()(1/linklet-directory->hash ld/h_246))"
"(let-values() #f))))"
"(let-values(((h_248)(1/linklet-bundle->hash(if dh_247(hash-ref dh_247 #f) ld/h_246))))"
"(values dh_247 h_248))))))"
"(define-values"
"(compiled-module->dh+h+data-instance+declaration-instance)"
"(lambda(c_252)"
"(let-values(((dh_253 h_254)(compiled-module->dh+h c_252)))"
"(let-values(((data-instance_255)"
"(if(compiled-in-memory? c_252)"
"(make-data-instance-from-compiled-in-memory c_252)"
"(1/instantiate-linklet(1/eval-linklet(hash-ref h_254 'data))(list deserialize-instance)))))"
"(let-values(((declaration-instance_256)"
"(1/instantiate-linklet"
"(1/eval-linklet(hash-ref h_254 'decl))"
"(list deserialize-instance data-instance_255))))"
"(values dh_253 h_254 data-instance_255 declaration-instance_256))))))"
"(define-values"
"(compiled-module->declaration-instance)"
"(lambda(c_257)"
"(let-values(((dh_258 h_259 data-instance_260 declaration-instance_261)"
"(compiled-module->dh+h+data-instance+declaration-instance c_257)))"
" declaration-instance_261)))"
"(define-values"
"(compiled-module->h+declaration-instance)"
"(lambda(c_262)"
"(let-values(((dh_263 h_264 data-instance_265 declaration-instance_266)"
"(compiled-module->dh+h+data-instance+declaration-instance c_262)))"
"(values h_264 declaration-instance_266))))"
"(define-values"
"(make-data-instance-from-compiled-in-memory)"
"(lambda(cim_267)(1/make-instance 'data #f mpi-vector-id(compiled-in-memory-mpis cim_267))))"
"(define-values"
"(make-syntax-literal-data-instance-from-compiled-in-memory)"
"(lambda(cim_268)"
"(1/make-instance"
" 'syntax-literal-data"
" #f"
" deserialize-syntax-id"
" void"
" deserialized-syntax-vector-id"
"(compiled-in-memory-syntax-literals cim_268))))"
"(define-values"
"(empty-syntax-literals-data-instance)"
"(1/make-instance 'empty-stx-data #f deserialized-syntax-vector-id(vector) deserialize-syntax-id void))"
"(define-values"
"(empty-syntax-literals-instance)"
"(1/make-instance 'empty-stx #f get-syntax-literal!-id(lambda(pos_269) #f) 'get-encoded-root-expand-ctx #f))"
"(define-values"
"(empty-syntax-literals-instance/empty-namespace)"
"(1/make-instance"
" 'empty-stx/empty-ns"
" #f"
" get-syntax-literal!-id"
"(lambda(pos_270) #f)"
" 'get-encoded-root-expand-ctx"
" 'empty))"
"(define-values"
"(get-all-variables)"
"(lambda(phases-h_271)"
"(let-values()"
"(begin"
"(if((lambda(ht_273)(hash? ht_273)) ht_272)(void)(let-values()(default-in-hash ht_272)))"
"((letrec-values(((for-loop_274)"
"(lambda(table_275 i_276)"
"(if i_276"
"(let-values(((phase_277 linklet_278)(hash-iterate-key+value ht_272 i_276)))"
"(let-values(((table_279)"
"(let-values()"
"(let-values(((table_281)"
"(let-values()"
"(let-values(((key_282 val_283)"
"(let-values()"
"(values"
" phase_277"
"(1/linklet-export-variables"
" linklet_278)))))"
"(hash-set table_280 key_282 val_283)))))"
"(values table_281)))))"
"(for-loop_274 table_279(hash-iterate-next ht_272 i_276))))"
" table_275))))"
" for-loop_274)"
" '#hash()"
"(hash-iterate-first ht_272))))))"
"(void)"
"(void)"
"(define-values"
"(1/namespace-attach-module)"
"(let-values(((namespace-attach-module5_1)"
"(lambda(src-namespace3_2 mod-path4_3 dest-namespace1_4 dest-namespace2_5)"
"(let-values()"
"(let-values()"
"(let-values(((dest-namespace_8)(if dest-namespace2_5 dest-namespace1_4(1/current-namespace))))"
"(let-values()"
"(let-values(((...namespace/attach.rkt:14:2_9) do-attach-module21.1)"
"((temp22_10) 'namespace-attach-module)"
"((temp26_14) #t))"
"(do-attach-module19.1"
" temp26_14"
" #t"
" temp22_10"
" src-namespace23_11"
" mod-path24_12"
" dest-namespace25_13)))))))))"
"(case-lambda"
"((src-namespace_15 mod-path_16)(namespace-attach-module5_1 src-namespace_15 mod-path_16 #f #f))"
"((src-namespace_17 mod-path_18 dest-namespace1_19)"
"(namespace-attach-module5_1 src-namespace_17 mod-path_18 dest-namespace1_19 #t)))))"
"(define-values"
"(1/namespace-attach-module-declaration)"
"(let-values(((namespace-attach-module-declaration11_20)"
"(lambda(src-namespace9_21 mod-path10_22 dest-namespace7_23 dest-namespace8_24)"
"(let-values()"
"(let-values()"
"(let-values(((dest-namespace_27)"
"(if dest-namespace8_24 dest-namespace7_23(1/current-namespace))))"
"(let-values()"
"(let-values(((...namespace/attach.rkt:21:2_28) do-attach-module21.1)"
"((temp27_29) 'namespace-attach-module-declaration)"
"((temp31_33) #f))"
"(do-attach-module19.1"
" temp31_33"
" #t"
" temp27_29"
" src-namespace28_30"
" mod-path29_31"
" dest-namespace30_32)))))))))"
"(case-lambda"
"((src-namespace_34 mod-path_35)(namespace-attach-module-declaration11_20 src-namespace_34 mod-path_35 #f #f))"
"((src-namespace_36 mod-path_37 dest-namespace7_38)"
"(namespace-attach-module-declaration11_20 src-namespace_36 mod-path_37 dest-namespace7_38 #t)))))"
"(define-values"
"(do-attach-module19.1)"
"(lambda(attach-instances?13_39 attach-instances?14_40 who15_41 src-namespace16_42 mod-path17_43 dest-namespace18_44)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((attach-instances?_49)(if attach-instances?14_40 attach-instances?13_39 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? src-namespace_46)"
"(void)"
"                                  (let-values () (raise-argument-error who_45 \"namespace?\" src-namespace_46)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_54)(1/module-path? mod-path_47)))"
"(if or-part_54 or-part_54(1/resolved-module-path? mod-path_47)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_45"
"                                       \"(or/c module-path? resolved-module-path?)\""
" mod-path_47)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? dest-namespace_48)"
"(void)"
"                                      (let-values () (raise-argument-error who_45 \"namespace?\" dest-namespace_48)))"
"(values))))"
"(let-values(((phase_50)(namespace-phase src-namespace_46)))"
"(let-values((()"
"(begin"
"(if(eqv? phase_50(namespace-phase dest-namespace_48))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                             \"source and destination namespace phases do not match\""
"                                             \"source phase\""
" phase_50"
"                                             \"destination phase\""
"(namespace-phase dest-namespace_48))))"
"(values))))"
"(let-values(((todo_51)(make-hasheq)))"
"(let-values(((missing_52)(gensym 'missing)))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_55)"
"(lambda(mpi_56"
" phase_57"
" attach-instances?_58"
" attach-phase_59)"
"(let-values(((mod-name_60)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_46)"
"(let-values()"
"(1/module-path-index-resolve"
" mpi_56)))))"
"(let-values(((attach-this-instance?_61)"
"(if attach-instances?_58"
"(eqv? phase_57 attach-phase_59)"
" #f)))"
"(let-values(((m-ns_62)"
"(hash-ref"
"(hash-ref"
" todo_51"
" mod-name_60"
" '#hasheqv())"
" phase_57"
" missing_52)))"
"(if(let-values(((or-part_63)"
"(eq? missing_52 m-ns_62)))"
"(if or-part_63"
" or-part_63"
"(if attach-this-instance?_61"
"(not m-ns_62)"
" #f)))"
"(let-values()"
"(let-values(((m_64)"
"(namespace->module"
" src-namespace_46"
" mod-name_60)))"
"(begin"
"(if m_64"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                     \"module not declared (in the source namespace)\""
"                                                                                     \"module name\""
" mod-name_60)))"
"(if(if(module-cross-phase-persistent?"
" m_64)"
"(if(not(label-phase? phase_57))"
"(not(zero-phase? phase_57))"
" #f)"
" #f)"
"(let-values()"
"(loop_55"
" mpi_56"
" 0"
" attach-instances?_58"
" 0))"
"(let-values()"
"(let-values(((already-m_65)"
"(namespace->module"
" dest-namespace_48"
" mod-name_60)))"
"(let-values((()"
"(begin"
"(if(if already-m_65"
"(not"
"(eq?"
" already-m_65"
" m_64))"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                           \"a different declaration is already in the destination namespace\""
"                                                                                                           \"module name\""
" mod-name_60))"
"(void))"
"(values))))"
"(let-values(((m-ns_66"
" already?_67)"
"(if attach-this-instance?_61"
"(let-values()"
"(let-values(((m-ns_68)"
"(let-values()"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace32_70"
" mod-name33_71"
" phase34_72))))"
"(let-values((()"
"(begin"
"(if m-ns_68"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                                                 \"module not instantiated (in the source namespace)\""
"                                                                                                                                 \"module name\""
" mod-name_60)))"
"(values))))"
"(let-values(((already-m-ns_69)"
"(if already-m_65"
"(let-values()"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" dest-namespace35_73"
" mod-name36_74"
" phase37_75))"
" #f)))"
"(begin"
"(if(if already-m-ns_69"
"(if(not"
"(eq?"
" m-ns_68"
" already-m-ns_69))"
"(not"
"(namespace-same-instance?"
" m-ns_68"
" already-m-ns_69))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                                       \"a different instance is already in the destination namespace\""
"                                                                                                                       \"module name\""
" mod-name_60))"
"(void))"
"(values"
" m-ns_68"
"(if already-m-ns_69"
" #t"
" #f)))))))"
"(let-values()"
"(begin"
"(if(if(label-phase?"
" phase_57)"
"(not"
"(let-values()"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace38_76"
" mod-name39_77"
" phase40_78)))"
" #f)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_46)"
"(let-values()"
"(let-values()"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace41_79"
" mpi42_80"
" phase43_81)))))"
"(void))"
"(values"
" #f"
"(if already-m_65"
" #t"
" #f)))))))"
"(begin"
"(hash-update!"
" todo_51"
" mod-name_60"
"(lambda(ht_82)"
"(hash-set"
" ht_82"
" phase_57"
" m-ns_66))"
" '#hasheqv())"
"(if already?_67"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_83)"
"(module-requires"
" m_64)))"
"(begin"
"(if(list? lst_83)"
"(void)"
"(let-values()"
"(in-list"
" lst_83)))"
"((letrec-values(((for-loop_84)"
"(lambda(fold-var_85"
" lst_86)"
"(if(pair?"
" lst_86)"
"(let-values(((phase+reqs_87)"
"(unsafe-car"
" lst_86)))"
"(let-values(((fold-var_88)"
"(let-values(((lst_89)"
"(cdr"
" phase+reqs_87)))"
"(begin"
"(if(list?"
" lst_89)"
"(void)"
"(let-values()"
"(in-list"
" lst_89)))"
"((letrec-values(((for-loop_90)"
"(lambda(fold-var_91"
" lst_92)"
"(if(pair?"
" lst_92)"
"(let-values(((req_93)"
"(unsafe-car"
" lst_92)))"
"(let-values(((fold-var_94)"
"(let-values()"
"(let-values(((fold-var_96)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_55"
"(module-path-index-shift"
" req_93"
"(module-self"
" m_64)"
" mpi_56)"
"(phase+"
" phase_57"
"(car"
" phase+reqs_87))"
" attach-instances?_58"
" attach-phase_59))"
"(void)))))"
"(values"
" fold-var_96)))))"
"(for-loop_90"
" fold-var_94"
"(unsafe-cdr"
" lst_92))))"
" fold-var_91))))"
" for-loop_90)"
" fold-var_85"
" lst_89)))))"
"(for-loop_84"
" fold-var_88"
"(unsafe-cdr"
" lst_86))))"
" fold-var_85))))"
" for-loop_84)"
"(void)"
" lst_83)))"
"(let-values(((lst_97)"
"(module-submodule-names"
" m_64)))"
"(begin"
"(if(list? lst_97)"
"(void)"
"(let-values()"
"(in-list"
" lst_97)))"
"((letrec-values(((for-loop_98)"
"(lambda(fold-var_99"
" lst_100)"
"(if(pair?"
" lst_100)"
"(let-values(((submod-name_101)"
"(unsafe-car"
" lst_100)))"
"(let-values(((fold-var_102)"
"(let-values()"
"(let-values(((fold-var_104)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_55"
"(1/module-path-index-join"
"(list"
" 'submod"
"                                                                                                                                                                     \".\""
" submod-name_101)"
" mpi_56)"
" #f"
" #f"
" attach-phase_59))"
"(void)))))"
"(values"
" fold-var_104)))))"
"(for-loop_98"
" fold-var_102"
"(unsafe-cdr"
" lst_100))))"
" fold-var_99))))"
" for-loop_98)"
"(void)"
" lst_97)))"
"(if(module-supermodule-name"
" m_64)"
"(let-values()"
"(loop_55"
"(1/module-path-index-join"
"                                                                                                        '(submod \"..\")"
" mpi_56)"
" #f"
" #f"
" attach-phase_59))"
"(void))))))))))))))"
"(void))))))))"
" loop_55)"
"(1/module-path-index-join"
"(if(1/resolved-module-path? mod-path_47)"
"(resolved-module-path->module-path mod-path_47)"
" mod-path_47)"
" #f)"
" phase_50"
" attach-instances?_49"
" phase_50)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values()"
"(begin"
"(if((lambda(ht_106)(hash? ht_106)) ht_105)"
"(void)"
"(let-values()(default-in-hash ht_105)))"
"((letrec-values(((for-loop_107)"
"(lambda(fold-var_108 i_109)"
"(if i_109"
"(let-values(((mod-name_110 phases_111)"
"(hash-iterate-key+value"
" ht_105"
" i_109)))"
"(let-values(((fold-var_112)"
"(let-values()"
"(begin"
"(if((lambda(ht_114)"
"(hash? ht_114))"
" ht_113)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_113)))"
"((letrec-values(((for-loop_115)"
"(lambda(fold-var_116"
" i_117)"
"(if i_117"
"(let-values(((phase_118"
" m-ns_119)"
"(hash-iterate-key+value"
" ht_113"
" i_117)))"
"(let-values(((fold-var_120)"
"(let-values()"
"(let-values(((fold-var_122)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_123)"
"(namespace->module"
" src-namespace_46"
" mod-name_110)))"
"(begin"
"(let-values()"
"(declare-module!56.1"
" #f"
" #f"
" dest-namespace44_124"
" m45_125"
" mod-name46_126))"
"(if m-ns_119"
"(let-values()"
"(begin"
"(namespace-record-module-instance-attached!"
" src-namespace_46"
" mod-name_110"
" phase_118)"
"(let-values(((or-part_127)"
"(let-values()"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" dest-namespace47_128"
" mod-name48_129"
" phase49_130))))"
"(if or-part_127"
" or-part_127"
"(namespace-install-module-namespace!"
" dest-namespace_48"
" mod-name_110"
" phase_118"
" m_123"
" m-ns_119)))))"
"(void)))))"
"(void)))))"
"(values"
" fold-var_122)))))"
"(for-loop_115"
" fold-var_120"
"(hash-iterate-next"
" ht_113"
" i_117))))"
" fold-var_116))))"
" for-loop_115)"
" fold-var_108"
"(hash-iterate-first"
" ht_113))))))"
"(for-loop_107"
" fold-var_112"
"(hash-iterate-next ht_105 i_109))))"
" fold-var_108))))"
" for-loop_107)"
"(void)"
"(hash-iterate-first ht_105))))"
"(values))))"
"(let-values(((mnr_53)(1/current-module-name-resolver)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" dest-namespace_48)"
"(let-values()"
"(let-values()"
"(begin"
"(if((lambda(ht_132)(hash? ht_132)) ht_131)"
"(void)"
"(let-values()(default-in-hash-keys ht_131)))"
"((letrec-values(((for-loop_133)"
"(lambda(fold-var_134 i_135)"
"(if i_135"
"(let-values(((mod-name_136)"
"(hash-iterate-key ht_131 i_135)))"
"(let-values(((fold-var_137)"
"(let-values()"
"(let-values(((fold-var_139)"
"(let-values()"
"(begin"
"(let-values()"
"(mnr_53"
" mod-name_136"
" src-namespace_46))"
"(void)))))"
"(values fold-var_139)))))"
"(for-loop_133"
" fold-var_137"
"(hash-iterate-next ht_131 i_135))))"
" fold-var_134))))"
" for-loop_133)"
"(void)"
"(hash-iterate-first ht_131))))))))))))))))))))))))"
"(define-values"
"(unpack20.1)"
"(lambda(given-kws_140 given-args_141 who15_142 src-namespace16_143 mod-path17_144 dest-namespace18_145)"
"(let-values(((attach-instances?14_146)(pair? given-kws_140)))"
"(let-values(((attach-instances?13_147)(if attach-instances?14_146(car given-args_141)(void))))"
"(do-attach-module19.1"
" attach-instances?13_147"
" attach-instances?14_146"
" who15_142"
" src-namespace16_143"
" mod-path17_144"
" dest-namespace18_145)))))"
"(define-values"
"(do-attach-module21.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_148 given-argc_149)"
"(if(= given-argc_149 6)"
"(let-values()"
"(let-values(((l1_151)"
"(if(null? l1_150) l1_150(if(eq?(car l1_150) '#:attach-instances?)(cdr l1_150) l1_150))))"
"(null? l1_151)))"
" #f))"
"(case-lambda"
"((given-kws_152 given-args_153 who_154 src-namespace_155 mod-path_156 dest-namespace_157)"
"(unpack20.1 given-kws_152 given-args_153 who_154 src-namespace_155 mod-path_156 dest-namespace_157)))"
" null"
" '(#:attach-instances?)"
"(let-values(((do-attach-module_158)"
"(case-lambda"
"((who_159 src-namespace_160 mod-path_161 dest-namespace_162)"
"(unpack20.1 null null who_159 src-namespace_160 mod-path_161 dest-namespace_162)))))"
" do-attach-module_158)))"
"(void)"
"(void)"
"(define-values"
"(1/namespace-syntax-introduce)"
"(let-values(((namespace-syntax-introduce4_4)"
"(lambda(s3_5 ns1_6 ns2_7)"
"(let-values()"
"(let-values(((ns_9)(if ns2_7 ns1_6(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_8)"
"(void)"
"(let-values()"
"                                            (raise-argument-error 'namespace-syntax-introduce \"syntax?\" s_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_9)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'namespace-syntax-introduce \"namespace?\" ns_9)))"
"(values))))"
"(let-values(((root-ctx_10)(namespace-get-root-expand-ctx ns_9)))"
"(let-values(((post-scope_11)(root-expand-context-post-expansion-scope root-ctx_10)))"
"(let-values(((other-namespace-scopes_12)"
"(alt-reverse"
"(let-values(((ht_15)"
"(syntax-scope-set"
"(root-expand-context-all-scopes-stx root-ctx_10)"
"(namespace-phase ns_9))))"
"(begin"
"(if((lambda(ht_16)(if(hash? ht_16)(immutable? ht_16) #f)) ht_15)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_15)))"
"((letrec-values(((for-loop_17)"
"(lambda(fold-var_18 i_19)"
"(if i_19"
"(let-values(((sc_20)"
"(unsafe-immutable-hash-iterate-key"
" ht_15"
" i_19)))"
"(let-values(((fold-var_21)"
"(let-values()"
"(if(equal?"
" sc_20"
" post-scope_11)"
" fold-var_22"
"(let-values()"
"(let-values(((fold-var_24)"
"(let-values()"
"(cons"
"(let-values()"
" sc_20)"
" fold-var_23))))"
"(values"
" fold-var_24)))))))"
"(for-loop_17"
" fold-var_21"
"(unsafe-immutable-hash-iterate-next"
" ht_15"
" i_19))))"
" fold-var_18))))"
" for-loop_17)"
" null"
"(unsafe-immutable-hash-iterate-first ht_15)))))))"
"(let-values(((add-ns-scopes_13)"
"(lambda(s_25)"
"(let-values(((temp78_27)"
"(add-scopes"
"(push-scope s_25 post-scope_11)"
" other-namespace-scopes_12))"
"((temp79_28)"
"(root-expand-context-all-scopes-stx root-ctx_10))"
"((temp80_29)"
"(let-values(((or-part_31)"
"(namespace-declaration-inspector ns_9)))"
"(if or-part_31 or-part_31(current-code-inspector))))"
"((temp81_30) #t))"
"(syntax-transfer-shifts39.1"
" temp81_30"
" #t"
" temp78_27"
" temp79_28"
" temp80_29"
" #t)))))"
"(let-values(((maybe-module-id_14)"
"(if(pair?(1/syntax-e s_8))"
"(if(identifier?(car(1/syntax-e s_8)))"
"(add-ns-scopes_13(car(1/syntax-e s_8)))"
" #f)"
" #f)))"
"(if(if maybe-module-id_14"
"(1/free-identifier=?"
" maybe-module-id_14"
"(1/namespace-module-identifier ns_9))"
" #f)"
"(let-values()"
"(1/datum->syntax"
" s_8"
"(cons maybe-module-id_14(cdr(1/syntax-e s_8)))"
" s_8"
" s_8))"
"(let-values()(add-ns-scopes_13 s_8))))))))))))))))"
"(case-lambda"
"((s_32)(namespace-syntax-introduce4_4 s_32 #f #f))"
"((s_33 ns1_34)(namespace-syntax-introduce4_4 s_33 ns1_34 #t)))))"
"(define-values"
"(1/namespace-module-identifier)"
"(let-values(((namespace-module-identifier8_35)"
"(lambda(where6_36 where7_37)"
"(let-values(((where_38)(if where7_37 where6_36(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_39)(1/namespace? where_38)))"
"(if or-part_39 or-part_39(phase? where_38)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-module-identifier"
"                             (string-append \"(or/c namespace? \" phase?-string \")\")"
" where_38)))"
"(1/datum->syntax"
"(1/syntax-shift-phase-level"
" core-stx"
"(if(1/namespace? where_38)(namespace-phase where_38) where_38))"
" 'module)))))))"
"(case-lambda"
"(()(namespace-module-identifier8_35 #f #f))"
"((where6_40)(namespace-module-identifier8_35 where6_40 #t)))))"
"(define-values"
"(do-namespace-require23.1)"
"(lambda(copy-variable-as-constant?13_42"
" copy-variable-as-constant?18_43"
" copy-variable-phase-level12_44"
" copy-variable-phase-level17_45"
" run?10_46"
" run?15_47"
" skip-variable-phase-level14_48"
" skip-variable-phase-level19_49"
" visit?11_50"
" visit?16_51"
" who20_52"
" req21_53"
" ns22_54)"
"(let-values(((run?_55)(if run?15_47 run?10_46 #t)))"
"(let-values(((visit?_56)(if visit?16_51 visit?11_50 #f)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((copy-variable-phase-level_60)"
"(if copy-variable-phase-level17_45 copy-variable-phase-level12_44 #f)))"
"(let-values(((copy-variable-as-constant?_61)"
"(if copy-variable-as-constant?18_43 copy-variable-as-constant?13_42 #f)))"
"(let-values(((skip-variable-phase-level_62)"
"(if skip-variable-phase-level19_49 skip-variable-phase-level14_48 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_59)"
"(void)"
"                                        (let-values () (raise-argument-error who_57 \"namespace?\" ns_59)))"
"(values))))"
"(let-values(((ctx-stx_63)"
"(add-scopes"
" empty-syntax"
"(root-expand-context-module-scopes(namespace-get-root-expand-ctx ns_59)))))"
"(if(let-values(((or-part_64)(1/module-path-index? req_58)))"
"(if or-part_64 or-part_64(1/module-path? req_58)))"
"(let-values()"
"(let-values(((temp82_66)"
"(if(1/module-path-index? req_58)"
" req_58"
"(1/module-path-index-join req_58 #f)))"
"((temp83_67) #f)"
"((temp84_68) #f)"
"((temp89_73)(namespace-phase ns_59))"
"((temp90_74)(namespace-phase ns_59)))"
"(perform-require!72.1"
" #f"
" #f"
" #f"
" #f"
" copy-variable-as-constant?92_76"
" #t"
" copy-variable-phase-level91_75"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp89_73"
" #f"
" #f"
" temp90_74"
" run?87_71"
" #t"
" skip-variable-phase-level93_77"
" #t"
" visit?88_72"
" #t"
" who94_78"
" temp82_66"
" temp83_67"
" temp84_68"
" ctx-stx85_69"
" ns86_70)))"
"(let-values()"
"(let-values(((temp97_82)(list(1/datum->syntax ctx-stx_63 req_58)))"
"((temp98_83) #f)"
"((temp100_85)(namespace-phase ns_59))"
"((temp101_86)(make-requires+provides #f)))"
"(parse-and-perform-requires!28.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" run?95_80"
" #t"
" #f"
" #f"
" skip-variable-phase-level102_87"
" #t"
" visit?96_81"
" #t"
" who103_88"
" temp97_82"
" temp98_83"
" ns99_84"
" temp100_85"
" temp101_86)))))))))))))))))"
"(define-values"
"(1/namespace-require)"
"(let-values(((namespace-require29_133)"
"(lambda(req28_134 ns26_135 ns27_136)"
"(let-values()"
"(let-values(((ns_138)(if ns27_136 ns26_135(1/current-namespace))))"
"(let-values()"
"(let-values(((temp104_139) 'namespace-require))"
"(do-namespace-require23.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp104_139"
" req105_140"
" ns106_141))))))))"
"(case-lambda"
"((req_142)(namespace-require29_133 req_142 #f #f))"
"((req_143 ns26_144)(namespace-require29_133 req_143 ns26_144 #t)))))"
"(define-values"
"(1/namespace-mapped-symbols)"
"(let-values(((namespace-mapped-symbols72_280)"
"(lambda(ns70_281 ns71_282)"
"(let-values(((ns_283)(if ns71_282 ns70_281(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_283)"
"(void)"
"                          (let-values () (raise-argument-error 'namespace-mapped-symbols \"namespace?\" ns_283)))"
"(set->list"
"(set-union"
"(syntax-mapped-names"
"(root-expand-context-all-scopes-stx(namespace-get-root-expand-ctx ns_283))"
"(namespace-phase ns_283))"
"(list->set(1/instance-variable-names(namespace->instance ns_283 0)))))))))))"
"(case-lambda"
"(()(namespace-mapped-symbols72_280 #f #f))"
"((ns70_284)(namespace-mapped-symbols72_280 ns70_284 #t)))))"
"(void)"
"(void)"
"(define-values"
"(provides->api-provides)"
"(lambda(provides_1 self_2)"
"(let-values(((extract_3)"
"(lambda(ok?_4)"
"(let-values(((result-l_5)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if((lambda(ht_7)(hash? ht_7)) ht_6)"
"(void)"
"(let-values()(default-in-hash ht_6)))"
"((letrec-values(((for-loop_8)"
"(lambda(fold-var_9 i_10)"
"(if i_10"
"(let-values(((phase_11 at-phase_12)"
"(hash-iterate-key+value ht_6 i_10)))"
"(let-values(((fold-var_13)"
"(let-values(((l_14)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if((lambda(ht_16)"
"(hash? ht_16))"
" ht_15)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_15)))"
"((letrec-values(((for-loop_17)"
"(lambda(fold-var_18"
" i_19)"
"(if i_19"
"(let-values(((sym_20"
" b/p_21)"
"(hash-iterate-key+value"
" ht_15"
" i_19)))"
"(let-values(((fold-var_22)"
"(let-values()"
"(if(ok?_4"
" b/p_21)"
"(let-values()"
"(let-values(((fold-var_25)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((b_26)"
"(provided-as-binding"
" b/p_21)))"
"(list"
" sym_20"
"(if(eq?"
" self_2"
"(module-binding-module"
" b_26))"
"(let-values()"
" null)"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_27)"
"(cons"
" b_26"
"(module-binding-extra-nominal-bindings"
" b_26))))"
"(begin"
"(if(list?"
" lst_27)"
"(void)"
"(let-values()"
"(in-list"
" lst_27)))"
"((letrec-values(((for-loop_28)"
"(lambda(fold-var_29"
" lst_30)"
"(if(pair?"
" lst_30)"
"(let-values(((b_31)"
"(unsafe-car"
" lst_30)))"
"(let-values(((fold-var_32)"
"(let-values()"
"(let-values(((fold-var_34)"
"(let-values()"
"(cons"
"(let-values()"
"(if(if(eqv?"
"(module-binding-nominal-phase"
" b_31)"
" phase_11)"
"(eq?"
"(module-binding-nominal-sym"
" b_31)"
" sym_20)"
" #f)"
"(let-values()"
"(module-binding-nominal-module"
" b_31))"
"(let-values()"
"(list"
"(module-binding-nominal-module"
" b_31)"
"(module-binding-phase"
" b_31)"
"(module-binding-nominal-sym"
" b_31)"
"(module-binding-nominal-phase"
" b_31)))))"
" fold-var_33))))"
"(values"
" fold-var_34)))))"
"(for-loop_28"
" fold-var_32"
"(unsafe-cdr"
" lst_30))))"
" fold-var_29))))"
" for-loop_28)"
" null"
" lst_27)))))))))"
" fold-var_24))))"
"(values"
" fold-var_25)))"
" fold-var_23))))"
"(for-loop_17"
" fold-var_22"
"(hash-iterate-next"
" ht_15"
" i_19))))"
" fold-var_18))))"
" for-loop_17)"
" null"
"(hash-iterate-first"
" ht_15)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_35)"
"(lambda(fold-var_36)"
"(let-values()"
"(let-values(((fold-var_37)"
"(let-values()"
"(if(null?"
" l_14)"
" fold-var_38"
"(let-values()"
"(let-values(((fold-var_40)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_11"
"(let-values(((symbol<?5_43)"
" symbol<?)"
"((car6_44)"
" car))"
"(sort7.1"
" #f"
" #f"
" car6_44"
" #t"
" l4_42"
" symbol<?5_43))))"
" fold-var_39))))"
"(values"
" fold-var_40)))))))"
" fold-var_37)))))"
" for-loop_35)"
" fold-var_9)))))"
"(for-loop_8"
" fold-var_13"
"(hash-iterate-next ht_6 i_10))))"
" fold-var_9))))"
" for-loop_8)"
" null"
"(hash-iterate-first ht_6)))))))"
"(let-values(((car3_48) car))(sort7.1 #f #f car3_48 #t result-l1_46 phase<?2_47))))))"
"(values"
"(extract_3(lambda(b/p_49)(not(provided-as-transformer? b/p_49))))"
"(extract_3 provided-as-transformer?)))))"
"(define-values"
"(variables->api-nonprovides)"
"(lambda(provides_50 all-vars_51)"
"(let-values(((result-l_52)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if((lambda(ht_54)(hash? ht_54)) ht_53)(void)(let-values()(default-in-hash ht_53)))"
"((letrec-values(((for-loop_55)"
"(lambda(fold-var_56 i_57)"
"(if i_57"
"(let-values(((phase_58 vars_59)(hash-iterate-key+value ht_53 i_57)))"
"(let-values(((fold-var_60)"
"(let-values()"
"(let-values(((l_62)"
"(let-values(((syms_63)"
"(hash-ref"
" provides_50"
" phase_58"
" '#hasheq())))"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_64)"
"(void)"
"(let-values()(in-list lst_64)))"
"((letrec-values(((for-loop_65)"
"(lambda(fold-var_66"
" lst_67)"
"(if(pair?"
" lst_67)"
"(let-values(((var-sym_68)"
"(unsafe-car"
" lst_67)))"
"(let-values(((fold-var_69)"
"(let-values()"
"(if(hash-ref"
" syms_63"
" var-sym_68"
" #f)"
" fold-var_70"
"(let-values()"
"(let-values(((fold-var_72)"
"(let-values()"
"(cons"
"(let-values()"
" var-sym_68)"
" fold-var_71))))"
"(values"
" fold-var_72)))))))"
"(for-loop_65"
" fold-var_69"
"(unsafe-cdr"
" lst_67))))"
" fold-var_66))))"
" for-loop_65)"
" null"
" lst_64)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_73)"
"(lambda(fold-var_74)"
"(let-values()"
"(let-values(((fold-var_75)"
"(let-values()"
"(if(null?"
" l_62)"
" fold-var_76"
"(let-values()"
"(let-values(((fold-var_78)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_58"
"(let-values(((symbol<?11_80)"
" symbol<?))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" l10_79"
" symbol<?11_80))))"
" fold-var_77))))"
"(values"
" fold-var_78)))))))"
" fold-var_75)))))"
" for-loop_73)"
" fold-var_61))))))"
"(for-loop_55 fold-var_60(hash-iterate-next ht_53 i_57))))"
" fold-var_56))))"
" for-loop_55)"
" null"
"(hash-iterate-first ht_53)))))))"
"(let-values(((car9_84) car))(sort7.1 #f #f car9_84 #t result-l7_82 phase<?8_83)))))"
"(void)"
"(void)"
"(define-values"
"(1/compiled-expression?)"
"(lambda(c_1)"
"(let-values(((or-part_2)(compiled-in-memory? c_1)))"
"(if or-part_2"
" or-part_2"
"(let-values(((or-part_3)(1/linklet-directory? c_1)))(if or-part_3 or-part_3(1/linklet-bundle? c_1)))))))"
"(define-values"
"(compiled->linklet-directory-or-bundle)"
"(lambda(c_4)(if(compiled-in-memory? c_4)(compiled-in-memory-linklet-directory c_4) c_4)))"
"(define-values"
"(1/compiled-module-expression?)"
"(lambda(c_5)"
"(let-values(((ld_6)(compiled->linklet-directory-or-bundle c_5)))"
"(let-values(((or-part_7)"
"(if(1/linklet-directory? ld_6)"
"(if(let-values(((b_8)(hash-ref(1/linklet-directory->hash ld_6) #f #f)))"
"(if b_8(hash-ref(1/linklet-bundle->hash b_8) 'decl #f) #f))"
" #t"
" #f)"
" #f)))"
"(if or-part_7"
" or-part_7"
"(if(1/linklet-bundle? ld_6)(if(hash-ref(1/linklet-bundle->hash ld_6) 'decl #f) #t #f) #f))))))"
"(define-values"
"(1/module-compiled-exports)"
"(lambda(c_44)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_44)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_44)))"
"(values))))"
"(let-values(((inst_45)(compiled-module->declaration-instance c_44)))"
"(provides->api-provides"
"(1/instance-variable-value inst_45 'provides)"
"(1/instance-variable-value inst_45 'self-mpi))))))"
"(define-values"
"(1/module-compiled-indirect-exports)"
"(lambda(c_46)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_46)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-indirect-imports \"compiled-module-expression?\" c_46)))"
"(values))))"
"(let-values(((h_47 inst_48)(compiled-module->h+declaration-instance c_46)))"
"(let-values(((min-phase_49)(hash-ref h_47 'min-phase 0)))"
"(let-values(((max-phase_50)(hash-ref h_47 'max-phase 0)))"
"(variables->api-nonprovides"
"(1/instance-variable-value inst_48 'provides)"
"(let-values(((end_52)(add1 max-phase_50))((inc_53) 1))"
"(begin"
"(if(if(real? start_51)(if(real? end_52)(real? inc_53) #f) #f)"
"(void)"
"(let-values()(in-range start_51 end_52 inc_53)))"
"((letrec-values(((for-loop_54)"
"(lambda(table_55 pos_56)"
"(if(< pos_56 end_52)"
"(let-values()"
"(let-values(((table_58)"
"(let-values()"
"(let-values(((table_60)"
"(let-values()"
"(let-values(((key_61 val_62)"
"(let-values()"
"(let-values(((linklet_63)"
"(hash-ref"
" h_47"
" phase-level_57"
" #f)))"
"(values"
" phase-level_57"
"(if linklet_63"
"(1/linklet-export-variables"
" linklet_63)"
" null))))))"
"(hash-set table_59 key_61 val_62)))))"
"(values table_60)))))"
"(for-loop_54 table_58(+ pos_56 inc_53))))"
" table_55))))"
" for-loop_54)"
" '#hash()"
" start_51))))))))))"
"(void)"
"(void)"
"(define-values"
"(1/eval)"
"(let-values(((eval6_11)"
"(lambda(s5_12 ns1_13 compile2_14 ns3_15 compile4_16)"
"(let-values()"
"(let-values(((ns_18)(if ns3_15 ns1_13(1/current-namespace))))"
"(let-values(((compile_19)"
"(if compile4_16 compile2_14(lambda(s_20 ns_21)(1/compile s_20 ns_21 #f)))))"
"(let-values()"
"(if(let-values(((or-part_22)(compiled-in-memory? s_17)))"
"(if or-part_22"
" or-part_22"
"(let-values(((or-part_23)(1/linklet-directory? s_17)))"
"(if or-part_23 or-part_23(1/linklet-bundle? s_17)))))"
"(let-values()(eval-compiled s_17 ns_18))"
"(if(if(syntax?$1 s_17)"
"(let-values(((or-part_24)(compiled-in-memory?(1/syntax-e s_17))))"
"(if or-part_24"
" or-part_24"
"(let-values(((or-part_25)(1/linklet-directory?(1/syntax-e s_17))))"
"(if or-part_25 or-part_25(1/linklet-bundle?(1/syntax-e s_17))))))"
" #f)"
"(let-values()(eval-compiled(1/syntax->datum s_17) ns_18))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:56:4_26) per-top-level62.1)"
"((temp74_29)"
"(lambda(s_30 ns_31 tail?_32)"
"(eval-compiled(compile_19 s_30 ns_31) ns_31 tail?_32))))"
"(per-top-level60.1 #f #f #f #f temp74_29 #f #f s72_27 ns73_28))))))))))))"
"(case-lambda"
"((s_33)(eval6_11 s_33 #f #f #f #f))"
"((s_34 ns_35 compile2_36)(eval6_11 s_34 ns_35 compile2_36 #t #t))"
"((s_37 ns1_38)(eval6_11 s_37 ns1_38 #f #t #f)))))"
"(define-values"
"(eval-compiled)"
"(let-values(((eval-compiled12_39)"
"(lambda(c10_40 ns11_41 as-tail?8_42 as-tail?9_43)"
"(let-values()"
"(let-values()"
"(let-values(((as-tail?_46)(if as-tail?9_43 as-tail?8_42 #t)))"
"(let-values()"
"(if(1/compiled-module-expression? c_44)"
"(let-values()(let-values()(eval-module8.1 ns76_49 #t #f #f #f #f c75_48)))"
"(let-values()(eval-top c_44 ns_45 eval-compiled as-tail?_46))))))))))"
"(case-lambda"
"((c_50 ns_51)(eval-compiled12_39 c_50 ns_51 #f #f))"
"((c_52 ns_53 as-tail?8_54)(eval-compiled12_39 c_52 ns_53 as-tail?8_54 #t)))))"
"(define-values"
"(1/compile)"
"(let-values(((compile23_55)"
"(lambda(s22_56"
" ns14_57"
" serializable?15_58"
" expand16_59"
" to-source?17_60"
" ns18_61"
" serializable?19_62"
" expand20_63"
" to-source?21_64)"
"(let-values()"
"(let-values(((ns_66)(if ns18_61 ns14_57(1/current-namespace))))"
"(let-values(((serializable?_67)(if serializable?19_62 serializable?15_58 #t)))"
"(let-values(((expand_68)(if expand20_63 expand16_59 expand$1)))"
"(let-values(((to-source?_69)(if to-source?21_64 to-source?17_60 #f)))"
"(let-values()"
"(let-values(((cs_70)"
"(if(1/compiled-expression? s_65)"
"(let-values()(list s_65))"
"(if(if(syntax?$1 s_65)(1/compiled-expression?(1/syntax-e s_65)) #f)"
"(let-values()(list(1/syntax-e s_65)))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:83:6_71) per-top-level62.1)"
"((temp79_74)"
"(lambda(s_76 ns_77 as-tail?_78)"
"(list"
"(compile-single$1"
" s_76"
" ns_77"
" expand_68"
" serializable?_67"
" to-source?_69))))"
"((append80_75) append))"
"(per-top-level60.1"
" append80_75"
" #t"
" #f"
" #f"
" temp79_74"
" #f"
" #f"
" s77_72"
" ns78_73)))))))"
"(if(if(= 1(length cs_70))(not(compiled-multiple-top?(car cs_70))) #f)"
"(car cs_70)"
"(let-values()"
"(compiled-tops->compiled-top8.1"
" serializable?83_82"
" #t"
" ns84_83"
" #t"
" to-source?82_81"
" #t"
" cs81_80)))))))))))))"
"(case-lambda"
"((s_84)(compile23_55 s_84 #f #f #f #f #f #f #f #f))"
"((s_85 ns_86 serializable?_87 expand_88 to-source?17_89)"
"(compile23_55 s_85 ns_86 serializable?_87 expand_88 to-source?17_89 #t #t #t #t))"
"((s_90 ns_91 serializable?_92 expand16_93)(compile23_55 s_90 ns_91 serializable?_92 expand16_93 #f #t #t #t #f))"
"((s_94 ns_95 serializable?15_96)(compile23_55 s_94 ns_95 serializable?15_96 #f #f #t #t #f #f))"
"((s_97 ns14_98)(compile23_55 s_97 ns14_98 #f #f #f #t #f #f #f)))))"
"(define-values"
"(compile-to-linklets)"
"(let-values(((compile-to-linklets28_99)"
"(lambda(s27_100 ns25_101 ns26_102)"
"(let-values()"
"(let-values(((ns_104)(if ns26_102 ns25_101(1/current-namespace))))"
"(let-values()(1/compile s_103 ns_104 #t expand$1 #t)))))))"
"(case-lambda"
"((s_105)(compile-to-linklets28_99 s_105 #f #f))"
"((s_106 ns25_107)(compile-to-linklets28_99 s_106 ns25_107 #t)))))"
"(define-values"
"(struct:lifted-parsed-begin"
" lifted-parsed-begin30.1"
" lifted-parsed-begin?"
" lifted-parsed-begin-seq"
" lifted-parsed-begin-last)"
"(let-values(((struct:_108 make-_109 ?_110 -ref_111 -set!_112)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'lifted-parsed-begin"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'lifted-parsed-begin)))))"
"(values"
" struct:_108"
" make-_109"
" ?_110"
"(make-struct-field-accessor -ref_111 0 'seq)"
"(make-struct-field-accessor -ref_111 1 'last))))"
"(define-values"
"(compile-single$1)"
"(lambda(s_133 ns_134 expand_135 serializable?_136 to-source?_137)"
"(let-values(((exp-s_138)(expand_135 s_133 ns_134 #f #t)))"
"((letrec-values(((loop_139)"
"(lambda(exp-s_140)"
"(if(parsed-module? exp-s_140)"
"(let-values()"
"(let-values(((temp87_143)"
"(let-values()"
"(make-compile-context14.1 #f #f #f #f #f #f ns90_147 #t #f #f #f #f))))"
"(compile-module13.1"
" #f"
" #f"
" #f"
" #f"
" serializable?88_144"
" #t"
" to-source?89_145"
" #t"
" #f"
" #f"
" exp-s86_142"
" temp87_143)))"
"(if(lifted-parsed-begin? exp-s_140)"
"(let-values()"
"(let-values(((temp91_149)"
"(alt-reverse"
"(let-values(((lst_151)"
"(append"
"(lifted-parsed-begin-seq exp-s_140)"
"(list(lifted-parsed-begin-last exp-s_140)))))"
"(begin"
"(if(list? lst_151)(void)(let-values()(in-list lst_151)))"
"((letrec-values(((for-loop_152)"
"(lambda(fold-var_153 lst_154)"
"(if(pair? lst_154)"
"(let-values(((e_155)(unsafe-car lst_154)))"
"(let-values(((fold-var_156)"
"(let-values()"
"(let-values(((fold-var_158)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_139"
" e_155))"
" fold-var_157))))"
"(values fold-var_158)))))"
"(for-loop_152"
" fold-var_156"
"(unsafe-cdr lst_154))))"
" fold-var_153))))"
" for-loop_152)"
" null"
" lst_151))))))"
"(compiled-tops->compiled-top8.1 #f #f #f #f to-source?92_150 #t temp91_149)))"
"(let-values()"
"(let-values(((temp94_161)"
"(let-values()"
"(make-compile-context14.1 #f #f #f #f #f #f ns97_165 #t #f #f #f #f))))"
"(compile-top9.1"
" serializable?95_162"
" #t"
" #f"
" #f"
" to-source?96_163"
" #t"
" exp-s93_160"
" temp94_161))))))))"
" loop_139)"
" exp-s_138))))"
"(define-values"
"(expand$1)"
"(let-values(((expand38_166)"
"(lambda(s37_167"
" ns31_168"
" log-expand?32_169"
" to-parsed?33_170"
" ns34_171"
" log-expand?35_172"
" to-parsed?36_173)"
"(let-values()"
"(let-values(((ns_175)(if ns34_171 ns31_168(1/current-namespace))))"
"(let-values(((log-expand?_176)(if log-expand?35_172 log-expand?32_169 #f)))"
"(let-values(((to-parsed?_177)(if to-parsed?36_173 to-parsed?33_170 #f)))"
"(let-values()"
"(begin"
"(if log-expand?_176(let-values()(log-expand-start))(void))"
"(let-values(((...pander/eval/main.rkt:133:2_178) per-top-level62.1)"
"((temp100_181)"
"(lambda(s_184 ns_185 as-tail?_186)"
"(expand-single s_184 ns_185 to-parsed?_177)))"
"((cons101_182) cons)"
"((re-pair102_183) re-pair))"
"(per-top-level60.1"
" cons101_182"
" #t"
" #f"
" #f"
" temp100_181"
" re-pair102_183"
" #t"
" s98_179"
" ns99_180)))))))))))"
"(case-lambda"
"((s_187)(expand38_166 s_187 #f #f #f #f #f #f))"
"((s_188 ns_189 log-expand?_190 to-parsed?33_191)"
"(expand38_166 s_188 ns_189 log-expand?_190 to-parsed?33_191 #t #t #t))"
"((s_192 ns_193 log-expand?32_194)(expand38_166 s_192 ns_193 log-expand?32_194 #f #t #t #f))"
"((s_195 ns31_196)(expand38_166 s_195 ns31_196 #f #f #t #f #f)))))"
"(define-values"
"(expand-single)"
"(lambda(s_197 ns_198 to-parsed?_199)"
"(let-values(((require-lifts_200 lifts_201 exp-s_202)"
"(expand-capturing-lifts"
" s_197"
"(let-values()(make-expand-context5.1 to-parsed?104_205 #t ns103_204)))))"
"(if(if(null? require-lifts_200)(null? lifts_201) #f)"
"(let-values() exp-s_202)"
"(if to-parsed?_199"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:144:4_206) wrap-lifts-as-lifted-parsed-begin71.1)"
"((temp109_211)(lambda(form_212)(expand-single form_212 ns_198 to-parsed?_199))))"
"(wrap-lifts-as-lifted-parsed-begin69.1"
" temp109_211"
" require-lifts105_207"
" lifts106_208"
" exp-s107_209"
" s108_210)))"
"(let-values()"
"(let-values(((temp110_214)(append require-lifts_200 lifts_201))"
"((temp111_215)(lambda(form_219)(expand-single form_219 ns_198 to-parsed?_199)))"
"((temp114_218)(namespace-phase ns_198)))"
"(wrap-lifts-as-begin15.1 temp111_215 #t temp110_214 exp-s112_216 s113_217 temp114_218))))))))"
"(define-values"
"(lifted/1.1$6 lifted/2.1$6 lifted/3.1$5 lifted/4.1$5 lifted/5.1$5)"
"(make-struct-type"
" 'per-top-level"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'per-top-level"
"(case-lambda((self_264 given-s_265 ns_266)(apply missing-kw self_264 given-s_265 ns_266 null))))))"
"(current-inspector)"
"(case-lambda((self_267 given-s_268 ns_269)(apply missing-kw self_267 given-s_268 ns_269 null)))))"
"(define-values"
"(per-top-level60.1)"
"(lambda(combine51_270"
" combine55_271"
" just-once?53_272"
" just-once?57_273"
" single50_274"
" wrap52_275"
" wrap56_276"
" given-s58_277"
" ns59_278)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((combine_282)(if combine55_271 combine51_270 #f)))"
"(let-values(((wrap_283)(if wrap56_276 wrap52_275 #f)))"
"(let-values(((just-once?_284)(if just-once?57_273 just-once?53_272 #f)))"
"(let-values()"
"(let-values(((s_285)(maybe-intro given-s_279 ns_280)))"
"(let-values(((ctx_286)(let-values()(make-expand-context5.1 #f #f ns130_288))))"
"(let-values(((phase_287)(namespace-phase ns_280)))"
"((letrec-values(((loop_289)"
"(lambda(s_290 phase_291 ns_292 as-tail?_293)"
"(let-values(((tl-ctx_294)"
"(let-values()"
"(if(expand-context? the-struct_299)"
"(let-values()"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_299)"
"(root-expand-context-post-expansion-scope"
" the-struct_299)"
"(root-expand-context-top-level-bind-scope"
" the-struct_299)"
"(root-expand-context-all-scopes-stx the-struct_299)"
"(root-expand-context-use-site-scopes the-struct_299)"
"(root-expand-context-defined-syms the-struct_299)"
"(root-expand-context-frame-id the-struct_299)"
"(root-expand-context-counter the-struct_299)"
"(root-expand-context-lift-key the-struct_299)"
"(expand-context-to-parsed? the-struct_299)"
"(expand-context-context the-struct_299)"
" phase131_300"
" namespace132_301"
"(expand-context-env the-struct_299)"
"(expand-context-user-env the-struct_299)"
"(expand-context-post-expansion-scope-action"
" the-struct_299)"
"(expand-context-scopes the-struct_299)"
"(expand-context-def-ctx-scopes the-struct_299)"
"(expand-context-binding-layer the-struct_299)"
"(expand-context-reference-records the-struct_299)"
"(expand-context-only-immediate? the-struct_299)"
" just-once?133_302"
"(expand-context-module-begin-k the-struct_299)"
"(expand-context-need-eventually-defined the-struct_299)"
"(expand-context-allow-unbound? the-struct_299)"
"(expand-context-in-local-expand? the-struct_299)"
"(expand-context-stops the-struct_299)"
"(expand-context-current-introduction-scopes"
" the-struct_299)"
"(expand-context-declared-submodule-names"
" the-struct_299)"
"(expand-context-lifts the-struct_299)"
"(expand-context-lift-envs the-struct_299)"
"(expand-context-module-lifts the-struct_299)"
"(expand-context-require-lifts the-struct_299)"
"(expand-context-to-module-lifts the-struct_299)"
"(expand-context-requires+provides the-struct_299)"
"(expand-context-name the-struct_299)"
"(expand-context-observer the-struct_299)))"
"(raise-argument-error"
" 'struct-copy"
"                                                               \"expand-context?\""
" the-struct_299)))))"
"(let-values(((require-lifts_295 lifts_296 exp-s_297)"
"(expand-capturing-lifts"
" s_290"
"(let-values()"
"(if(expand-context? the-struct_303)"
"(let-values(((only-immediate?134_304) #t)"
"((def-ctx-scopes135_305)(box null)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_303)"
"(root-expand-context-post-expansion-scope"
" the-struct_303)"
"(root-expand-context-top-level-bind-scope"
" the-struct_303)"
"(root-expand-context-all-scopes-stx the-struct_303)"
"(root-expand-context-use-site-scopes the-struct_303)"
"(root-expand-context-defined-syms the-struct_303)"
"(root-expand-context-frame-id the-struct_303)"
"(root-expand-context-counter the-struct_303)"
"(root-expand-context-lift-key the-struct_303)"
"(expand-context-to-parsed? the-struct_303)"
"(expand-context-context the-struct_303)"
" phase136_306"
" namespace137_307"
"(expand-context-env the-struct_303)"
"(expand-context-user-env the-struct_303)"
"(expand-context-post-expansion-scope-action"
" the-struct_303)"
"(expand-context-scopes the-struct_303)"
" def-ctx-scopes135_305"
"(expand-context-binding-layer the-struct_303)"
"(expand-context-reference-records the-struct_303)"
" only-immediate?134_304"
"(expand-context-just-once? the-struct_303)"
"(expand-context-module-begin-k the-struct_303)"
"(expand-context-need-eventually-defined"
" the-struct_303)"
"(expand-context-allow-unbound? the-struct_303)"
"(expand-context-in-local-expand? the-struct_303)"
"(expand-context-stops the-struct_303)"
"(expand-context-current-introduction-scopes"
" the-struct_303)"
"(expand-context-declared-submodule-names"
" the-struct_303)"
"(expand-context-lifts the-struct_303)"
"(expand-context-lift-envs the-struct_303)"
"(expand-context-module-lifts the-struct_303)"
"(expand-context-require-lifts the-struct_303)"
"(expand-context-to-module-lifts the-struct_303)"
"(expand-context-requires+provides the-struct_303)"
"(expand-context-name the-struct_303)"
"(expand-context-observer the-struct_303)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                  \"expand-context?\""
" the-struct_303))))))"
"(let-values(((disarmed-exp-s_298)(syntax-disarm$1 exp-s_297)))"
"(if(let-values(((or-part_308)(pair? require-lifts_295)))"
"(if or-part_308 or-part_308(pair? lifts_296)))"
"(let-values()"
"(let-values(((new-s_309)"
"(let-values(((temp138_310)"
"(append require-lifts_295 lifts_296)))"
"(wrap-lifts-as-begin15.1"
" #f"
" #f"
" temp138_310"
" exp-s139_311"
" s140_312"
" phase141_313))))"
"(if just-once?_284"
" new-s_309"
"(loop_289 new-s_309 phase_291 ns_292 as-tail?_293))))"
"(if(not single_281)"
"(let-values() exp-s_297)"
"(if(if just-once?_284(not(eq? exp-s_297 s_290)) #f)"
"(let-values() exp-s_297)"
"(let-values()"
"(let-values(((tmp_314)"
"(core-form-sym disarmed-exp-s_298 phase_291)))"
"(if(equal? tmp_314 'begin)"
"(let-values()"
"(let-values(((ok?_315 begin142_316 e143_317)"
"(let-values()"
"(let-values()"
"(let-values(((begin142_331 e143_332)"
"(let-values(((s_333)"
"(if(syntax?$1"
" s_329)"
"(syntax-e$1"
" s_329)"
" s_329)))"
"(if(pair? s_333)"
"(let-values(((begin144_334)"
"(let-values(((s_336)"
"(car"
" s_333)))"
" s_336))"
"((e145_335)"
"(let-values(((s_337)"
"(cdr"
" s_333)))"
"(let-values(((s_338)"
"(if(syntax?$1"
" s_337)"
"(syntax-e$1"
" s_337)"
" s_337)))"
"(let-values(((flat-s_339)"
"(to-syntax-list.1"
" s_338)))"
"(if(not"
" flat-s_339)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_330))"
"(let-values()"
" flat-s_339)))))))"
"(values"
" begin144_334"
" e145_335))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_330)))))"
"(values"
" #t"
" begin142_331"
" e143_332))))))"
"(letrec-values(((begin-loop_328)"
"(lambda(es_340)"
"(if(null? es_340)"
"(let-values()"
"(if combine_282 null(void)))"
"(if(if(not combine_282)"
"(null?(cdr es_340))"
" #f)"
"(let-values()"
"(loop_289"
"(car es_340)"
" phase_291"
" ns_292"
" as-tail?_293))"
"(let-values()"
"(let-values(((a_341)"
"(loop_289"
"(car es_340)"
" phase_291"
" ns_292"
" #f)))"
"(if combine_282"
"(combine_282"
" a_341"
"(begin-loop_328"
"(cdr es_340)))"
"(begin-loop_328"
"(cdr es_340))))))))))"
"(if wrap_283"
"(wrap_283"
" begin142_316"
" exp-s_297"
"(begin-loop_328 e143_317))"
"(begin-loop_328 e143_317)))))"
"(if(equal? tmp_314 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_342"
" begin-for-syntax146_343"
" e147_344)"
"(let-values()"
"(let-values()"
"(let-values(((begin-for-syntax146_360"
" e147_361)"
"(let-values(((s_362)"
"(if(syntax?$1"
" s_358)"
"(syntax-e$1"
" s_358)"
" s_358)))"
"(if(pair? s_362)"
"(let-values(((begin-for-syntax148_363)"
"(let-values(((s_365)"
"(car"
" s_362)))"
" s_365))"
"((e149_364)"
"(let-values(((s_366)"
"(cdr"
" s_362)))"
"(let-values(((s_367)"
"(if(syntax?$1"
" s_366)"
"(syntax-e$1"
" s_366)"
" s_366)))"
"(let-values(((flat-s_368)"
"(to-syntax-list.1"
" s_367)))"
"(if(not"
" flat-s_368)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_359))"
"(let-values()"
" flat-s_368)))))))"
"(values"
" begin-for-syntax148_363"
" e149_364))"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_359)))))"
"(values"
" #t"
" begin-for-syntax146_360"
" e147_361))))))"
"(let-values(((next-phase_355)(add1 phase_291)))"
"(let-values(((next-ns_356)"
"(namespace->namespace-at-phase"
" ns_292"
" next-phase_355)))"
"(let-values((()"
"(begin"
"(namespace-visit-available-modules!"
" next-ns_356)"
"(values))))"
"(let-values(((l_357)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_369)"
"(void)"
"(let-values()"
"(in-list lst_369)))"
"((letrec-values(((for-loop_370)"
"(lambda(fold-var_371"
" lst_372)"
"(if(pair?"
" lst_372)"
"(let-values(((s_373)"
"(unsafe-car"
" lst_372)))"
"(let-values(((fold-var_374)"
"(let-values()"
"(let-values(((fold-var_376)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_289"
" s_373"
" next-phase_355"
" next-ns_356"
" #f))"
" fold-var_375))))"
"(values"
" fold-var_376)))))"
"(for-loop_370"
" fold-var_374"
"(unsafe-cdr"
" lst_372))))"
" fold-var_371))))"
" for-loop_370)"
" null"
" lst_369))))))"
"(if wrap_283"
"(let-values()"
"(wrap_283"
" begin-for-syntax146_343"
" exp-s_297"
" l_357))"
"(if combine_282"
"(let-values() l_357)"
"(let-values()(void))))))))))"
"(let-values()"
"(single_281"
" exp-s_297"
" ns_292"
" as-tail?_293)))))))))))))))"
" loop_289)"
" s_285"
" phase_287"
" ns_280"
" #t)))))))))))))"
"(define-values"
"(unpack61.1$1)"
"(lambda(given-kws_377 given-args_378 given-s58_379 ns59_380)"
"(let-values(((combine55_381)(if(pair? given-kws_377)(eq? '#:combine(car given-kws_377)) #f)))"
"(let-values(((combine51_382)(if combine55_381(car given-args_378)(void)))"
"((given-kws_383)(if combine55_381(cdr given-kws_377) given-kws_377))"
"((given-args_384)(if combine55_381(cdr given-args_378) given-args_378)))"
"(let-values(((just-once?57_385)(if(pair? given-kws_383)(eq? '#:just-once?(car given-kws_383)) #f)))"
"(let-values(((just-once?53_386)(if just-once?57_385(car given-args_384)(void)))"
"((given-kws_387)(if just-once?57_385(cdr given-kws_383) given-kws_383))"
"((given-args_388)(if just-once?57_385(cdr given-args_384) given-args_384)))"
"(let-values(((single50_389)(car given-args_388))"
"((given-kws_390)(cdr given-kws_387))"
"((given-args_391)(cdr given-args_388)))"
"(let-values(((wrap56_392)(pair? given-kws_390)))"
"(let-values(((wrap52_393)(if wrap56_392(car given-args_391)(void))))"
"(per-top-level60.1"
" combine51_382"
" combine55_381"
" just-once?53_386"
" just-once?57_385"
" single50_389"
" wrap52_393"
" wrap56_392"
" given-s58_379"
" ns59_380))))))))))"
"(define-values"
"(per-top-level62.1)"
"(lifted/2.1$6"
"(lambda(given-kws_394 given-argc_395)"
"(if(= given-argc_395 4)(subsets? '(#:single) given-kws_394 '(#:combine #:just-once? #:single #:wrap)) #f))"
"(case-lambda"
"((given-kws_396 given-args_397 given-s_398 ns_399)(unpack61.1$1 given-kws_396 given-args_397 given-s_398 ns_399)))"
" '(#:single)"
" '(#:combine #:just-once? #:single #:wrap)))"
"(define-values"
"(maybe-intro)"
"(lambda(s_400 ns_401)(if(syntax?$1 s_400) s_400(1/namespace-syntax-introduce(1/datum->syntax #f s_400) ns_401))))"
"(define-values"
"(re-pair)"
"(lambda(form-id_402 s_403 r_404)"
"(syntax-rearm$1(1/datum->syntax(syntax-disarm$1 s_403)(cons form-id_402 r_404) s_403 s_403) s_403)))"
"(define-values"
"(expand-capturing-lifts)"
"(lambda(s_405 ctx_406)"
"(let-values()"
"(let-values(((ns_407)(expand-context-namespace ctx_406)))"
"(let-values((()(begin(namespace-visit-available-modules! ns_407)(values))))"
"(let-values(((lift-ctx_408)"
"(let-values(((temp150_411)(make-top-level-lift ctx_406)))"
"(make-lift-context6.1 #f #f temp150_411))))"
"(let-values(((require-lift-ctx_409)"
"(make-require-lift-context(namespace-phase ns_407)(make-parse-top-lifted-require ns_407))))"
"(let-values(((exp-s_410)"
"(let-values(((temp152_413)"
"(let-values()"
"(if(expand-context? the-struct_414)"
"(let-values()"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_414)"
"(root-expand-context-post-expansion-scope the-struct_414)"
"(root-expand-context-top-level-bind-scope the-struct_414)"
"(root-expand-context-all-scopes-stx the-struct_414)"
"(root-expand-context-use-site-scopes the-struct_414)"
"(root-expand-context-defined-syms the-struct_414)"
"(root-expand-context-frame-id the-struct_414)"
"(root-expand-context-counter the-struct_414)"
"(root-expand-context-lift-key the-struct_414)"
"(expand-context-to-parsed? the-struct_414)"
"(expand-context-context the-struct_414)"
"(expand-context-phase the-struct_414)"
"(expand-context-namespace the-struct_414)"
"(expand-context-env the-struct_414)"
"(expand-context-user-env the-struct_414)"
"(expand-context-post-expansion-scope-action the-struct_414)"
"(expand-context-scopes the-struct_414)"
"(expand-context-def-ctx-scopes the-struct_414)"
"(expand-context-binding-layer the-struct_414)"
"(expand-context-reference-records the-struct_414)"
"(expand-context-only-immediate? the-struct_414)"
"(expand-context-just-once? the-struct_414)"
"(expand-context-module-begin-k the-struct_414)"
"(expand-context-need-eventually-defined the-struct_414)"
"(expand-context-allow-unbound? the-struct_414)"
"(expand-context-in-local-expand? the-struct_414)"
"(expand-context-stops the-struct_414)"
"(expand-context-current-introduction-scopes the-struct_414)"
"(expand-context-declared-submodule-names the-struct_414)"
" lifts153_415"
"(expand-context-lift-envs the-struct_414)"
" module-lifts154_416"
" require-lifts155_417"
"(expand-context-to-module-lifts the-struct_414)"
"(expand-context-requires+provides the-struct_414)"
"(expand-context-name the-struct_414)"
"(expand-context-observer the-struct_414)))"
"                                              (raise-argument-error 'struct-copy \"expand-context?\" the-struct_414)))))"
"(expand5.1 #f #f s151_412 temp152_413))))"
"(values"
"(get-and-clear-require-lifts! require-lift-ctx_409)"
"(get-and-clear-lifts! lift-ctx_408)"
" exp-s_410)))))))))"
"(define-values"
"(make-parse-top-lifted-require)"
"(lambda(ns_418)"
"(lambda(s_419 phase_420)"
"(let-values(((ok?_421 #%require156_422 req157_423)"
"(let-values(((s_434)(syntax-disarm$1 s_419)))"
"(let-values()"
"(let-values(((#%require156_436 req157_437)"
"(let-values(((s_438)(if(syntax?$1 s_434)(syntax-e$1 s_434) s_434)))"
"(if(pair? s_438)"
"(let-values(((#%require158_439)(let-values(((s_441)(car s_438))) s_441))"
"((req159_440)"
"(let-values(((s_442)(cdr s_438)))"
"(let-values(((s_443)"
"(if(syntax?$1 s_442)"
"(syntax-e$1 s_442)"
" s_442)))"
"(if(pair? s_443)"
"(let-values(((req160_444)"
"(let-values(((s_445)(car s_443))) s_445))"
"(()"
"(let-values(((s_446)(cdr s_443)))"
"(let-values(((s_447)"
"(if(syntax?$1 s_446)"
"(syntax-e$1 s_446)"
" s_446)))"
"(if(null? s_447)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_435))))))"
"(values req160_444))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_435))))))"
"(values #%require158_439 req159_440))"
"                                          (raise-syntax-error$1 #f \"bad syntax\" orig-s_435)))))"
"(values #t #%require156_436 req157_437))))))"
"(let-values(((temp161_449)(list req157_423))"
"((temp166_454)(make-requires+provides #f))"
"((temp167_455) 'require))"
"(parse-and-perform-requires!28.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" phase165_453"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp167_455"
" temp161_449"
" s162_450"
" ns163_451"
" phase164_452"
" temp166_454))))))"
"(define-values"
"(lifted/6.1$4 lifted/7.1$4 lifted/8.1$4 lifted/9.1$4 lifted/10.1$4)"
"(make-struct-type"
" 'wrap-lifts-as-lifted-parsed-begin"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'wrap-lifts-as-lifted-parsed-begin"
"(case-lambda"
"((self_456 require-lifts_457 lifts_458 exp-s_459 s_460)"
"(apply missing-kw self_456 require-lifts_457 lifts_458 exp-s_459 s_460 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_461 require-lifts_462 lifts_463 exp-s_464 s_465)"
"(apply missing-kw self_461 require-lifts_462 lifts_463 exp-s_464 s_465 null)))))"
"(define-values"
"(wrap-lifts-as-lifted-parsed-begin69.1)"
"(lambda(adjust-form63_466 require-lifts65_467 lifts66_468 exp-s67_469 s68_470)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(lifted-parsed-begin30.1"
"(append"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_476)(void)(let-values()(in-list lst_476)))"
"((letrec-values(((for-loop_477)"
"(lambda(fold-var_478 lst_479)"
"(if(pair? lst_479)"
"(let-values(((req_480)(unsafe-car lst_479)))"
"(let-values(((fold-var_481)"
"(let-values()"
"(let-values(((fold-var_483)"
"(let-values()"
"(cons"
"(let-values()"
"(parsed-require23.1 req_480))"
" fold-var_482))))"
"(values fold-var_483)))))"
"(for-loop_477 fold-var_481(unsafe-cdr lst_479))))"
" fold-var_478))))"
" for-loop_477)"
" null"
" lst_476))))"
"(alt-reverse"
"(let-values(((lst_484)(get-lifts-as-lists lifts_472)))"
"(begin"
"(if(list? lst_484)(void)(let-values()(in-list lst_484)))"
"((letrec-values(((for-loop_485)"
"(lambda(fold-var_486 lst_487)"
"(if(pair? lst_487)"
"(let-values(((ids+syms+rhs_488)(unsafe-car lst_487)))"
"(let-values(((fold-var_489)"
"(let-values()"
"(let-values(((fold-var_491)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((exp-rhs_492)"
"(adjust-form_475"
"(caddr"
" ids+syms+rhs_488))))"
"(let-values(((just-rhs_493)"
"(if(lifted-parsed-begin?"
" exp-rhs_492)"
"(lifted-parsed-begin-last"
" exp-rhs_492)"
" exp-rhs_492)))"
"(let-values(((dv_494)"
"(parsed-define-values19.1"
" s_474"
"(car"
" ids+syms+rhs_488)"
"(cadr"
" ids+syms+rhs_488)"
" just-rhs_493)))"
"(if(lifted-parsed-begin?"
" exp-rhs_492)"
"(let-values()"
"(if(lifted-parsed-begin?"
" the-struct_495)"
"(let-values()"
"(lifted-parsed-begin30.1"
"(lifted-parsed-begin-seq"
" the-struct_495)"
" last168_496))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                               \"lifted-parsed-begin?\""
" the-struct_495)))"
" dv_494)))))"
" fold-var_490))))"
"(values fold-var_491)))))"
"(for-loop_485 fold-var_489(unsafe-cdr lst_487))))"
" fold-var_486))))"
" for-loop_485)"
" null"
" lst_484)))))"
" exp-s_473)))))))))"
"(define-values"
"(unpack70.1)"
"(lambda(given-kws_497 given-args_498 require-lifts65_499 lifts66_500 exp-s67_501 s68_502)"
"(let-values(((adjust-form63_503)(car given-args_498)))"
"(wrap-lifts-as-lifted-parsed-begin69.1 adjust-form63_503 require-lifts65_499 lifts66_500 exp-s67_501 s68_502))))"
"(define-values"
"(wrap-lifts-as-lifted-parsed-begin71.1)"
"(lifted/7.1$4"
"(lambda(given-kws_504 given-argc_505)"
"(if(= given-argc_505 6)"
"(let-values()(if(pair? l2_506)(if(eq?(car l2_506) '#:adjust-form)(null?(cdr l2_506)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_507 given-args_508 require-lifts_509 lifts_510 exp-s_511 s_512)"
"(unpack70.1 given-kws_507 given-args_508 require-lifts_509 lifts_510 exp-s_511 s_512)))"
" '(#:adjust-form)"
" '(#:adjust-form)))"
"(void)"
"(void)"
"(define-values"
"(do-dynamic-require)"
"(let-values(((do-dynamic-require6_1)"
"(lambda(who3_2 mod-path4_3 sym5_4 fail-k1_5 fail-k2_6)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((fail-k_10)(if fail-k2_6 fail-k1_5 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_15)(1/module-path? mod-path_8)))"
"(if or-part_15"
" or-part_15"
"(let-values(((or-part_16)(1/module-path-index? mod-path_8)))"
"(if or-part_16 or-part_16(1/resolved-module-path? mod-path_8)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_7"
"                                                 \"(or/c module-path? module-path-index? resolved-module-path?)\""
" mod-path_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_17)(symbol? sym_9)))"
"(if or-part_17"
" or-part_17"
"(let-values(((or-part_18)(not sym_9)))"
"(if or-part_18"
" or-part_18"
"(let-values(((or-part_19)(equal? sym_9 0)))"
"(if or-part_19 or-part_19(void? sym_9)))))))"
"(void)"
"(let-values()"
"                                                  (raise-argument-error who_7 \"(or/c symbol? #f 0 void?)\" sym_9)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(procedure? fail-k_10)"
"(procedure-arity-includes? fail-k_10 0)"
" #f)"
"(void)"
"                                                  (let-values () (raise-argument-error who_7 \"(-> any)\" fail-k_10)))"
"(values))))"
"(let-values(((ns_11)(1/current-namespace)))"
"(let-values(((mpi_12)"
"(if(1/module-path? mod-path_8)"
"(let-values()(1/module-path-index-join mod-path_8 #f))"
"(if(1/module-path-index? mod-path_8)"
"(let-values() mod-path_8)"
"(let-values()"
"(1/module-path-index-join"
"(resolved-module-path->module-path mod-path_8)"
" #f))))))"
"(let-values(((mod-name_13)(1/module-path-index-resolve mpi_12 #t)))"
"(let-values(((phase_14)(namespace-phase ns_11)))"
"(if(not sym_9)"
"(let-values()"
"(let-values(((temp24_25) #f))"
"(namespace-module-instantiate!94.1"
" temp24_25"
" #t"
" phase23_24"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns20_21"
" mpi21_22"
" phase22_23)))"
"(if(equal? sym_9 0)"
"(let-values()"
"(let-values()"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" phase28_30"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns25_27"
" mpi26_28"
" phase27_29)))"
"(if(void? sym_9)"
"(let-values()"
"(let-values()"
"(namespace-module-visit!102.1"
" phase32_35"
" #t"
" ns29_32"
" mpi30_33"
" phase31_34)))"
"(let-values()"
"(let-values(((m_36)(namespace->module ns_11 mod-name_13)))"
"(let-values((()"
"(begin"
"(if m_36"
"(void)"
"(let-values()"
"(raise-unknown-module-error"
" 'dynamic-require"
" mod-name_13)))"
"(values))))"
"(let-values(((binding/p_37)"
"(hash-ref"
"(hash-ref(module-provides m_36) 0 '#hasheq())"
" sym_9"
" #f)))"
"(if(not binding/p_37)"
"(let-values()"
"(if(eq? fail-k_10 default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                               \"name is not provided\""
"                                                               \"name\""
" sym_9"
"                                                               \"module\""
" mod-name_13)"
"(fail-k_10)))"
"(let-values()"
"(let-values(((binding_38)"
"(provided-as-binding binding/p_37)))"
"(let-values(((ex-sym_39)"
"(module-binding-sym binding_38)))"
"(let-values(((ex-phase_40)"
"(module-binding-phase binding_38)))"
"(let-values((()"
"(begin"
"(let-values()"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" phase36_50"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns33_47"
" mpi34_48"
" phase35_49))"
"(values))))"
"(let-values(((ex-mod-name_41)"
"(1/module-path-index-resolve"
"(module-path-index-shift"
"(module-binding-module binding_38)"
"(module-self m_36)"
" mpi_12))))"
"(let-values(((m-ns_42)"
"(let-values(((temp39_54)"
"(phase-"
" phase_14"
" ex-phase_40))"
"((temp40_55) #t))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" temp40_55"
" #t"
" #f"
" #f"
" ns37_52"
" ex-mod-name38_53"
" temp39_54))))"
"(let-values(((mi_43)"
"(namespace->module"
" ns_11"
" ex-mod-name_41)))"
"(let-values(((access_44)"
"(let-values(((or-part_56)"
"(module-access"
" m_36)))"
"(if or-part_56"
" or-part_56"
"(module-compute-access!"
" m_36)))))"
"(let-values((()"
"(begin"
"(if(if(not"
"(eq?"
" 'provided"
"(hash-ref"
" access_44"
" ex-sym_39"
" #f)))"
"(if(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector"
" m-ns_42)))"
"(not"
"(if(module-binding-extra-inspector"
" binding_38)"
"(inspector-superior?"
"(module-binding-extra-inspector"
" binding_38)"
"(namespace-inspector"
" m-ns_42))"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" 'dynamc-require"
"                                                                                                 \"name is protected\""
"                                                                                                 \"name\""
" sym_9"
"                                                                                                 \"module\""
" mod-name_13))"
"(void))"
"(values))))"
"(let-values(((fail_45)"
"(lambda()"
"(if(eq?"
" fail-k_10"
" default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                                                                 \"name's binding is missing\""
"                                                                                                 \"name\""
" sym_9"
"                                                                                                 \"module\""
" mod-name_13)"
"(fail-k_10)))))"
"(if(not"
"(provided-as-transformer?"
" binding/p_37))"
"(let-values()"
"(namespace-get-variable"
" m-ns_42"
" ex-phase_40"
" ex-sym_39"
" fail_45))"
"(let-values()"
"(let-values(((missing_57)"
"(gensym 'missing)))"
"(let-values((()"
"(begin"
"(let-values()"
"(namespace-module-visit!102.1"
" phase44_63"
" #t"
" ns41_60"
" mpi42_61"
" phase43_62))"
"(values))))"
"(let-values(((t_58)"
"(namespace-get-transformer"
" m-ns_42"
" ex-phase_40"
" ex-sym_39"
" missing_57)))"
"(if(eq? t_58 missing_57)"
"(let-values()(fail_45))"
"(let-values()"
"(let-values(((tmp-ns_64)"
"(let-values()"
"(new-namespace9.1"
" #f"
" #f"
" #f"
" #f"
" ns45_66"
" #t))))"
"(let-values(((mod-path_65)"
"(resolved-module-path->module-path"
" mod-name_13)))"
"(begin"
"(1/namespace-require"
" mod-path_65"
" tmp-ns_64)"
"(1/eval"
" sym_9"
" tmp-ns_64)))))))))))))))))))))))))))))))))))))))))))))"
"(case-lambda"
"((who_67 mod-path_68 sym_69)(do-dynamic-require6_1 who_67 mod-path_68 sym_69 #f #f))"
"((who_70 mod-path_71 sym_72 fail-k1_73)(do-dynamic-require6_1 who_70 mod-path_71 sym_72 fail-k1_73 #t)))))"
" (define-values (default-dynamic-require-fail-thunk) (lambda () (error \"failed\")))"
"(define-values"
"(1/dynamic-require)"
"(let-values(((dynamic-require12_74)"
"(lambda(mod-path10_75 sym11_76 fail-k8_77 fail-k9_78)"
"(let-values()"
"(let-values()"
"(let-values(((fail-k_81)(if fail-k9_78 fail-k8_77 default-dynamic-require-fail-thunk)))"
"(let-values()(do-dynamic-require 'dynamic-require mod-path_79 sym_80 fail-k_81))))))))"
"(case-lambda"
"((mod-path_82 sym_83)(dynamic-require12_74 mod-path_82 sym_83 #f #f))"
"((mod-path_84 sym_85 fail-k8_86)(dynamic-require12_74 mod-path_84 sym_85 fail-k8_86 #t)))))"
"(void)"
"(void)"
"(void)"
"(void)"
"(define-values"
"(1/module-declared?)"
"(let-values(((module-declared?4_6)"
"(lambda(mod3_7 load?1_8 load?2_9)"
"(let-values()"
"(let-values(((load?_11)(if load?2_9 load?1_8 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_10)"
"(void)"
"(let-values()"
"(raise-argument-error 'module-declared? module-reference-str mod_10)))"
"(values))))"
"(let-values(((ns_12)(1/current-namespace)))"
"(let-values(((name_13)"
"(let-values(((...space/api-module.rkt:28:15_14)"
" reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 load?36_16 mod35_15))))"
"(if(namespace->module ns_12 name_13) #t #f))))))))))"
"(case-lambda"
"((mod_17)(module-declared?4_6 mod_17 #f #f))"
"((mod_18 load?1_19)(module-declared?4_6 mod_18 load?1_19 #t)))))"
"(define-values"
"(module->)"
"(let-values(((module->11_27)"
"(lambda(extract8_28 who9_29 mod10_30 load?6_31 load?7_32)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((load?_36)(if load?7_32 load?6_31 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_35)"
"(void)"
"(let-values()(raise-argument-error who_34 module-reference-str mod_35)))"
"(values))))"
"(let-values(((m_37)"
"(namespace->module/complain"
" who_34"
"(1/current-namespace)"
"(let-values(((...space/api-module.rkt:44:40_38)"
" reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 load?40_40 mod39_39)))))"
"(extract_33 m_37)))))))))))"
"(case-lambda"
"((extract_41 who_42 mod_43)(module->11_27 extract_41 who_42 mod_43 #f #f))"
"((extract_44 who_45 mod_46 load?6_47)(module->11_27 extract_44 who_45 mod_46 load?6_47 #t)))))"
"(define-values"
"(1/module->language-info)"
"(let-values(((module->language-info16_48)"
"(lambda(mod15_49 load?13_50 load?14_51)"
"(let-values()"
"(let-values(((load?_53)(if load?14_51 load?13_50 #f)))"
"(let-values()(module-> module-language-info 'module->language-info mod_52 load?_53)))))))"
"(case-lambda"
"((mod_54)(module->language-info16_48 mod_54 #f #f))"
"((mod_55 load?13_56)(module->language-info16_48 mod_55 load?13_56 #t)))))"
"(define-values"
"(namespace->module/complain)"
"(lambda(who_112 ns_113 name_114)"
"(let-values(((or-part_115)(namespace->module ns_113 name_114)))"
"(if or-part_115"
" or-part_115"
"        (raise-arguments-error who_112 \"unknown module in the current namespace\" \"name\" name_114)))))"
"(define-values"
"(module-reference?)"
"(lambda(mod_116)"
"(let-values(((or-part_117)(1/module-path? mod_116)))"
"(if or-part_117"
" or-part_117"
"(let-values(((or-part_118)(1/module-path-index? mod_116)))"
"(if or-part_118 or-part_118(1/resolved-module-path? mod_116)))))))"
" (define-values (module-reference-str) \"(or/c module-path? module-path-index? resolved-module-path?)\")"
"(define-values"
"(lifted/1.1$5 lifted/2.1$5 lifted/3.1$4 lifted/4.1$4 lifted/5.1$4)"
"(make-struct-type"
" 'reference->resolved-module-path"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'reference->resolved-module-path"
"(case-lambda((self_119 mod_120)(apply missing-kw self_119 mod_120 null))))))"
"(current-inspector)"
"(case-lambda((self_121 mod_122)(apply missing-kw self_121 mod_122 null)))))"
"(define-values"
"(reference->resolved-module-path32.1)"
"(lambda(load?29_123 mod31_124)"
"(let-values()"
"(let-values()"
"(let-values()"
"(if(1/resolved-module-path? mod_125)"
"(let-values() mod_125)"
"(let-values()"
"(let-values(((mpi_127)"
"(if(1/module-path-index? mod_125) mod_125(1/module-path-index-join mod_125 #f))))"
"(1/module-path-index-resolve mpi_127 load?_126)))))))))"
"(define-values"
"(unpack33.1$1)"
"(lambda(given-kws_128 given-args_129 mod31_130)"
"(let-values(((load?29_131)(car given-args_129)))(reference->resolved-module-path32.1 load?29_131 mod31_130))))"
"(define-values"
"(reference->resolved-module-path34.1)"
"(lifted/2.1$5"
"(lambda(given-kws_132 given-argc_133)"
"(if(= given-argc_133 3)"
"(let-values()(if(pair? l2_134)(if(eq?(car l2_134) '#:load?)(null?(cdr l2_134)) #f) #f))"
" #f))"
"(case-lambda((given-kws_135 given-args_136 mod_137)(unpack33.1$1 given-kws_135 given-args_136 mod_137)))"
" '(#:load?)"
" '(#:load?)))"
"(void)"
"(void)"
"(define-values"
"(1/prop:missing-module 1/exn:missing-module? 1/exn:missing-module-accessor)"
"(make-struct-type-property"
" 'missing-module"
"(lambda(v_3 info_4)"
"(begin"
"(if(if(procedure? v_3)(procedure-arity-includes? v_3 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:missing-module \"(procedure-arity-includes/c 1)\" v_3)))"
" v_3))))"
"(define-values"
"(1/struct:exn:fail:filesystem:missing-module"
" 1/make-exn:fail:filesystem:missing-module"
" 1/exn:fail:filesystem:missing-module?"
" 1/exn:fail:filesystem:missing-module-path)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:filesystem:missing-module"
" struct:exn:fail:filesystem"
" 1"
" 0"
" #f"
"(list"
"(cons 1/prop:missing-module(lambda(e_26)(1/exn:fail:filesystem:missing-module-path e_26))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:filesystem:missing-module)))))"
"(values struct:_5 make-_6 ?_7(make-struct-field-accessor -ref_8 0 'path))))"
"(define-values"
"(1/struct:exn:fail:syntax:missing-module"
" 1/make-exn:fail:syntax:missing-module"
" 1/exn:fail:syntax:missing-module?"
" 1/exn:fail:syntax:missing-module-path)"
"(let-values(((struct:_27 make-_28 ?_29 -ref_30 -set!_31)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax:missing-module"
" 1/struct:exn:fail:syntax"
" 1"
" 0"
" #f"
"(list(cons 1/prop:missing-module(lambda(e_48)(1/exn:fail:syntax:missing-module-path e_48))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:syntax:missing-module)))))"
"(values struct:_27 make-_28 ?_29(make-struct-field-accessor -ref_30 0 'path))))"
"(define-values"
"(1/current-module-path-for-load)"
"(make-parameter"
" #f"
"(lambda(v_49)"
"(begin"
"(if(let-values(((or-part_50)(not v_49)))"
"(if or-part_50"
" or-part_50"
"(let-values(((or-part_51)(1/module-path? v_49)))"
"(if or-part_51 or-part_51(if(syntax?$1 v_49)(1/module-path?(syntax->datum$1 v_49)) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-path-for-load"
"(string-append"
"             \"(or/c module-path?\""
"             \" (and/c syntax? (lambda (stx) (module-path? (syntax->datum stx))))\""
"             \" #f)\")"
" v_49)))"
" v_49))))"
"(define-values"
"(maybe-raise-missing-module)"
"(lambda(name_52 filename_53 pre_54 rel_55 post_56 errstr_57)"
"(let-values(((path_58)(1/current-module-path-for-load)))"
"(if path_58"
"(let-values()"
"(begin"
"(if(syntax?$1 path_58)"
"(let-values()"
"(raise"
"(1/make-exn:fail:syntax:missing-module"
"(format"
"(string-append"
"                    \"~a: cannot open module file\\n\""
"                    \"  module path: ~a\\n\""
"                    \"  path: ~a~a~a~a\\n\""
"                    \"  system error: ~a\")"
"(if(syntax-srcloc path_58)(srcloc->string(syntax-srcloc path_58)) name_52)"
"(syntax->datum$1 path_58)"
" filename_53"
" pre_54"
" rel_55"
" post_56"
" errstr_57)"
"(current-continuation-marks)"
"(list path_58)"
"(syntax->datum$1 path_58))))"
"(void))"
"(raise"
"(1/make-exn:fail:filesystem:missing-module"
"(format"
"(string-append"
"                \"~a: cannot open module file\\n\""
"                \"  module path: ~a\\n\""
"                \"  path: ~a~a~a~a\\n\""
"                \"  system error: ~a\")"
" name_52"
" path_58"
" filename_53"
" pre_54"
" rel_55"
" post_56"
" errstr_57)"
"(current-continuation-marks)"
" path_58))))"
"(void)))))"
"(void)"
"(void)"
"(define-values"
"(1/local-expand)"
"(let-values(((local-expand6_1)"
"(lambda(s3_2 context4_3 stop-ids5_4 intdefs1_5 intdefs2_6)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((intdefs_10)(if intdefs2_6 intdefs1_5 #f)))"
"(let-values()"
"(let-values(((temp63_11) 'local-expand))"
"(do-local-expand60.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp63_11"
" s64_12"
" context65_13"
" stop-ids66_14"
" intdefs67_15"
" #t))))))))))"
"(case-lambda"
"((s_16 context_17 stop-ids_18)(local-expand6_1 s_16 context_17 stop-ids_18 #f #f))"
"((s_19 context_20 stop-ids_21 intdefs1_22)(local-expand6_1 s_19 context_20 stop-ids_21 intdefs1_22 #t)))))"
"(define-values"
"(1/local-expand/capture-lifts)"
"(let-values(((local-expand/capture-lifts15_23)"
"(lambda(s12_24 context13_25 stop-ids14_26 intdefs8_27 lift-key9_28 intdefs10_29 lift-key11_30)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((intdefs_34)(if intdefs10_29 intdefs8_27 #f)))"
"(let-values(((lift-key_35)(if lift-key11_30 lift-key9_28(generate-lift-key))))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:27:2_36) do-local-expand62.1)"
"((temp68_37) 'local-expand)"
"((temp73_42) #t))"
"(do-local-expand60.1"
" #f"
" #f"
" temp73_42"
" #t"
" lift-key74_43"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp68_37"
" s69_38"
" context70_39"
" stop-ids71_40"
" intdefs72_41"
" #t)))))))))))"
"(case-lambda"
"((s_44 context_45 stop-ids_46)(local-expand/capture-lifts15_23 s_44 context_45 stop-ids_46 #f #f #f #f))"
"((s_47 context_48 stop-ids_49 intdefs_50 lift-key9_51)"
"(local-expand/capture-lifts15_23 s_47 context_48 stop-ids_49 intdefs_50 lift-key9_51 #t #t))"
"((s_52 context_53 stop-ids_54 intdefs8_55)"
"(local-expand/capture-lifts15_23 s_52 context_53 stop-ids_54 intdefs8_55 #f #t #f)))))"
"(define-values"
"(1/local-transformer-expand)"
"(let-values(((local-transformer-expand22_56)"
"(lambda(s19_57 context20_58 stop-ids21_59 intdefs17_60 intdefs18_61)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((intdefs_65)(if intdefs18_61 intdefs17_60 #f)))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:32:2_66) do-local-expand62.1)"
"((temp75_67) 'local-expand)"
"((temp80_72) #t))"
"(do-local-expand60.1"
" temp80_72"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp75_67"
" s76_68"
" context77_69"
" stop-ids78_70"
" intdefs79_71"
" #t))))))))))"
"(case-lambda"
"((s_73 context_74 stop-ids_75)(local-transformer-expand22_56 s_73 context_74 stop-ids_75 #f #f))"
"((s_76 context_77 stop-ids_78 intdefs17_79)"
"(local-transformer-expand22_56 s_76 context_77 stop-ids_78 intdefs17_79 #t)))))"
"(define-values"
"(1/local-transformer-expand/capture-lifts)"
"(let-values(((local-transformer-expand/capture-lifts31_80)"
"(lambda(s28_81 context29_82 stop-ids30_83 intdefs24_84 lift-key25_85 intdefs26_86 lift-key27_87)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((intdefs_91)(if intdefs26_86 intdefs24_84 #f)))"
"(let-values(((lift-key_92)(if lift-key27_87 lift-key25_85(generate-lift-key))))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:36:2_93) do-local-expand62.1)"
"((temp81_94) 'local-expand)"
"((temp86_99) #t)"
"((temp87_100) #t))"
"(do-local-expand60.1"
" temp86_99"
" #t"
" temp87_100"
" #t"
" lift-key88_101"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_94"
" s82_95"
" context83_96"
" stop-ids84_97"
" intdefs85_98"
" #t)))))))))))"
"(case-lambda"
"((s_102 context_103 stop-ids_104)"
"(local-transformer-expand/capture-lifts31_80 s_102 context_103 stop-ids_104 #f #f #f #f))"
"((s_105 context_106 stop-ids_107 intdefs_108 lift-key25_109)"
"(local-transformer-expand/capture-lifts31_80 s_105 context_106 stop-ids_107 intdefs_108 lift-key25_109 #t #t))"
"((s_110 context_111 stop-ids_112 intdefs24_113)"
"(local-transformer-expand/capture-lifts31_80 s_110 context_111 stop-ids_112 intdefs24_113 #f #t #f)))))"
"(define-values"
"(do-syntax-local-expand-expression39.1)"
"(lambda(local-keys33_114 local-keys35_115 local-values34_116 local-values36_117 who37_118 s38_119)"
"(let-values()"
"(let-values()"
"(let-values(((local-keys_122)(if local-keys35_115 local-keys33_114 null)))"
"(let-values(((local-values_123)(if local-values36_117 local-values34_116 null)))"
"(let-values()"
"(let-values(((exp-s_124)"
"(let-values(((...and/local-expand.rkt:44:16_127) do-local-expand62.1)"
"((temp91_130) 'expression)"
"((null92_131) null)"
"((temp93_132) #f)"
"((temp94_133) #t))"
"(do-local-expand60.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" local-keys95_134"
" #t"
" local-values96_135"
" #t"
" temp94_133"
" #t"
" who89_128"
" s90_129"
" temp91_130"
" null92_131"
" temp93_132"
" #t))))"
"(let-values(((ctx_125)(let-values()(get-current-expand-context12.1 #f #f #f #f))))"
"(let-values(((ae_126)"
"(already-expanded1.1"
"(flip-introduction-scopes exp-s_124 ctx_125)"
"(expand-context-binding-layer ctx_125))))"
"(begin"
"(let-values(((obs_136)(expand-context-observer ctx_125)))"
"(if obs_136"
"(let-values()(let-values()(call-expand-observe obs_136 'opaque-expr ae_126)))"
"(void)))"
"(let-values(((obs_137)(expand-context-observer ctx_125)))"
"(if obs_137"
"(let-values()(let-values()(call-expand-observe obs_137 'exit-local exp-s_124)))"
"(void)))"
"(values exp-s_124(flip-introduction-scopes(datum->syntax$1 #f ae_126) ctx_125)))))))))))))"
"(define-values"
"(1/syntax-local-expand-expression)"
"(lambda(s_161)"
"(let-values(((temp97_162) 'syntax-local-expand-expression))"
"(do-syntax-local-expand-expression39.1 #f #f #f #f temp97_162 s98_163))))"
"(define-values"
"(1/syntax-local-expand-expression/extend-environment)"
"(lambda(s_164 keys_165 values_166)"
"(let-values(((temp99_168) 'syntax-local-expand-expression/extend-environment))"
"(do-syntax-local-expand-expression39.1 keys101_170 #t values102_171 #t temp99_168 s100_169))))"
"(define-values"
"(do-local-expand60.1)"
"(lambda(as-transformer?43_172"
" as-transformer?49_173"
" capture-lifts?42_174"
" capture-lifts?48_175"
" lift-key44_176"
" lift-key50_177"
" local-keys46_178"
" local-keys52_179"
" local-values47_180"
" local-values53_181"
" skip-log-exit?45_182"
" skip-log-exit?51_183"
" who56_184"
" s57_185"
" context58_186"
" stop-ids59_187"
" intdefs54_188"
" intdefs55_189)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((intdefs_194)(if intdefs55_189 intdefs54_188 #f)))"
"(let-values(((capture-lifts?_195)(if capture-lifts?48_175 capture-lifts?42_174 #f)))"
"(let-values(((as-transformer?_196)(if as-transformer?49_173 as-transformer?43_172 #f)))"
"(let-values(((lift-key_197)"
"(if lift-key50_177"
" lift-key44_176"
"(if(let-values()(if or-part_198 or-part_198 as-transformer?_196))"
"(generate-lift-key)"
" #f))))"
"(let-values(((skip-log-exit?_199)(if skip-log-exit?51_183 skip-log-exit?45_182 #f)))"
"(let-values(((local-keys_200)(if local-keys52_179 local-keys46_178 null)))"
"(let-values(((local-values_201)(if local-values53_181 local-values47_180 null)))"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_191)"
"(void)"
"                                                (let-values () (raise-argument-error who_190 \"syntax?\" s_191)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_209)(list? context_192)))"
"(if or-part_209"
" or-part_209"
"(memq"
" context_192"
"(if as-transformer?_196"
" '(expression top-level)"
" '(expression top-level module module-begin)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_190"
"(if as-transformer?_196"
"                                                       \"(or/c 'expression 'top-level list?)\""
"                                                       \"(or/c 'expression 'top-level 'module 'module-begin list?)\")"
" context_192)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_210)(not stop-ids_193)))"
"(if or-part_210"
" or-part_210"
"(if(list? stop-ids_193)"
"(andmap2 identifier? stop-ids_193)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_190"
"                                                       \"(or/c (listof identifier?) #f)\""
" stop-ids_193)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_211)(not intdefs_194)))"
"(if or-part_211"
" or-part_211"
"(let-values(((or-part_212)"
"(1/internal-definition-context? intdefs_194)))"
"(if or-part_212"
" or-part_212"
"(if(list? intdefs_194)"
"(andmap2 1/internal-definition-context? intdefs_194)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_190"
"                                                         \"(or/c #f internal-definitionc-context? (listof internal-definitionc-context?))\""
" intdefs_194)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(list? local-keys_200)"
"(void)"
"(let-values()"
"                                                          (raise-argument-error who_190 \"list?\" local-keys_200)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(list? local-values_201)"
"(void)"
"(let-values()"
"                                                            (raise-argument-error who_190 \"list?\" local-values_201)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(=(length local-keys_200)(length local-values_201))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_190"
"                                                               \"different lengths for list of keys and values for extending the environment\""
"                                                               \"keys\""
" local-keys_200"
"                                                               \"values\""
" local-values_201)))"
"(values))))"
"(let-values(((ctx_202)"
"(let-values()"
"(get-current-expand-context12.1 #f #f who103_213 #t))))"
"(let-values(((phase_203)"
"(if as-transformer?_196"
"(add1(expand-context-phase ctx_202))"
"(expand-context-phase ctx_202))))"
"(let-values(((base-local-ctx_204)"
"(let-values()"
"(make-local-expand-context33.1"
" context105_216"
" intdefs107_218"
" phase106_217"
" #t"
" stop-ids108_219"
" #t"
" ctx104_215))))"
"(let-values(((local-ctx_205)"
"(let-values()"
"(if(expand-context? the-struct_220)"
"(let-values(((user-env109_221)"
"(let-values()"
"(begin"
"(if(list? lst_222)"
"(void)"
"(let-values()"
"(in-list lst_222)))"
"(if(list? lst_223)"
"(void)"
"(let-values()"
"(in-list lst_223)))"
"((letrec-values(((for-loop_224)"
"(lambda(user-env_225"
" lst_226"
" lst_227)"
"(if(if(pair?"
" lst_226)"
"(pair?"
" lst_227)"
" #f)"
"(let-values(((key_228)"
"(unsafe-car"
" lst_226))"
"((value_229)"
"(unsafe-car"
" lst_227)))"
"(let-values(((user-env_230)"
"(let-values()"
"(let-values(((user-env_232)"
"(let-values()"
"(hash-set"
" user-env_231"
" key_228"
" value_229))))"
"(values"
" user-env_232)))))"
"(for-loop_224"
" user-env_230"
"(unsafe-cdr"
" lst_226)"
"(unsafe-cdr"
" lst_227))))"
" user-env_225))))"
" for-loop_224)"
"(expand-context-user-env"
" base-local-ctx_204)"
" lst_222"
" lst_223)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_220)"
"(root-expand-context-post-expansion-scope"
" the-struct_220)"
"(root-expand-context-top-level-bind-scope"
" the-struct_220)"
"(root-expand-context-all-scopes-stx"
" the-struct_220)"
"(root-expand-context-use-site-scopes"
" the-struct_220)"
"(root-expand-context-defined-syms the-struct_220)"
"(root-expand-context-frame-id the-struct_220)"
"(root-expand-context-counter the-struct_220)"
"(root-expand-context-lift-key the-struct_220)"
"(expand-context-to-parsed? the-struct_220)"
"(expand-context-context the-struct_220)"
"(expand-context-phase the-struct_220)"
"(expand-context-namespace the-struct_220)"
"(expand-context-env the-struct_220)"
" user-env109_221"
"(expand-context-post-expansion-scope-action"
" the-struct_220)"
"(expand-context-scopes the-struct_220)"
"(expand-context-def-ctx-scopes the-struct_220)"
"(expand-context-binding-layer the-struct_220)"
"(expand-context-reference-records the-struct_220)"
"(expand-context-only-immediate? the-struct_220)"
"(expand-context-just-once? the-struct_220)"
"(expand-context-module-begin-k the-struct_220)"
"(expand-context-need-eventually-defined"
" the-struct_220)"
"(expand-context-allow-unbound? the-struct_220)"
"(expand-context-in-local-expand? the-struct_220)"
"(expand-context-stops the-struct_220)"
"(expand-context-current-introduction-scopes"
" the-struct_220)"
"(expand-context-declared-submodule-names"
" the-struct_220)"
"(expand-context-lifts the-struct_220)"
"(expand-context-lift-envs the-struct_220)"
"(expand-context-module-lifts the-struct_220)"
"(expand-context-require-lifts the-struct_220)"
"(expand-context-to-module-lifts the-struct_220)"
"(expand-context-requires+provides the-struct_220)"
"(expand-context-name the-struct_220)"
"(expand-context-observer the-struct_220)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                     \"expand-context?\""
" the-struct_220)))))"
"(let-values(((input-s_206)"
"(let-values(((temp110_233)"
"(flip-introduction-scopes"
" s_191"
" ctx_202)))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" #f"
" #f"
" temp110_233"
" intdefs111_234))))"
"(let-values((()"
"(begin"
"(let-values(((obs_235)"
"(expand-context-observer"
" local-ctx_205)))"
"(if obs_235"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_235"
" 'enter-local)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if as-transformer?_196"
"(let-values()"
"(let-values(((obs_236)"
"(expand-context-observer"
" local-ctx_205)))"
"(if obs_236"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_236"
" 'phase-up)))"
"(void))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_237)"
"(expand-context-observer"
" local-ctx_205)))"
"(if obs_237"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_237"
" 'local-pre"
" input-s_206)"
"(call-expand-observe"
" obs_237"
" 'start-expand))))"
"(void)))"
"(values))))"
"(let-values(((output-s_207)"
"(if(if as-transformer?_196"
" capture-lifts?_195"
" #f)"
"(let-values()"
"(let-values(((temp115_242) #f)"
"((temp116_243) #t)"
"((temp118_245) #t))"
"(expand-transformer43.1"
" temp118_245"
" #t"
" temp116_243"
" #t"
" context114_241"
" #t"
" temp115_242"
" #t"
" lift-key117_244"
" #t"
" input-s112_239"
" local-ctx113_240)))"
"(if as-transformer?_196"
"(let-values()"
"(let-values(((temp122_250) #f)"
"((temp123_251)"
"(eq?"
" 'top-level"
" context_192)))"
"(expand-transformer43.1"
" #f"
" #f"
" temp123_251"
" #t"
" context121_249"
" #t"
" temp122_250"
" #t"
" lift-key124_252"
" #t"
" input-s119_247"
" local-ctx120_248)))"
"(if capture-lifts?_195"
"(let-values()"
"(let-values(((temp127_256) #t)"
"((temp129_258) #t))"
"(expand/capture-lifts28.1"
" temp129_258"
" #t"
" temp127_256"
" #t"
" #f"
" #f"
" lift-key128_257"
" #t"
" input-s125_254"
" local-ctx126_255)))"
"(let-values()"
"(let-values()"
"(expand5.1"
" #f"
" #f"
" input-s130_259"
" local-ctx131_260))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_261)"
"(expand-context-observer"
" local-ctx_205)))"
"(if obs_261"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_261"
" 'local-post"
" output-s_207)))"
"(void)))"
"(values))))"
"(let-values(((result-s_208)"
"(flip-introduction-scopes"
" output-s_207"
" ctx_202)))"
"(begin"
"(if skip-log-exit?_199"
"(void)"
"(let-values()"
"(let-values(((obs_262)"
"(expand-context-observer"
" local-ctx_205)))"
"(if obs_262"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_262"
" 'exit-local"
" result-s_208)))"
"(void)))))"
" result-s_208))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack61.1)"
"(lambda(given-kws_263 given-args_264 who56_265 s57_266 context58_267 stop-ids59_268 intdefs54_269 intdefs55_270)"
"(let-values(((as-transformer?49_271)(if(pair? given-kws_263)(eq? '#:as-transformer?(car given-kws_263)) #f)))"
"(let-values(((as-transformer?43_272)(if as-transformer?49_271(car given-args_264)(void)))"
"((given-kws_273)(if as-transformer?49_271(cdr given-kws_263) given-kws_263))"
"((given-args_274)(if as-transformer?49_271(cdr given-args_264) given-args_264)))"
"(let-values(((capture-lifts?48_275)(if(pair? given-kws_273)(eq? '#:capture-lifts?(car given-kws_273)) #f)))"
"(let-values(((capture-lifts?42_276)(if capture-lifts?48_275(car given-args_274)(void)))"
"((given-kws_277)(if capture-lifts?48_275(cdr given-kws_273) given-kws_273))"
"((given-args_278)(if capture-lifts?48_275(cdr given-args_274) given-args_274)))"
"(let-values(((lift-key50_279)(if(pair? given-kws_277)(eq? '#:lift-key(car given-kws_277)) #f)))"
"(let-values(((lift-key44_280)(if lift-key50_279(car given-args_278)(void)))"
"((given-kws_281)(if lift-key50_279(cdr given-kws_277) given-kws_277))"
"((given-args_282)(if lift-key50_279(cdr given-args_278) given-args_278)))"
"(let-values(((local-keys52_283)(if(pair? given-kws_281)(eq? '#:local-keys(car given-kws_281)) #f)))"
"(let-values(((local-keys46_284)(if local-keys52_283(car given-args_282)(void)))"
"((given-kws_285)(if local-keys52_283(cdr given-kws_281) given-kws_281))"
"((given-args_286)(if local-keys52_283(cdr given-args_282) given-args_282)))"
"(let-values(((local-values53_287)"
"(if(pair? given-kws_285)(eq? '#:local-values(car given-kws_285)) #f)))"
"(let-values(((local-values47_288)(if local-values53_287(car given-args_286)(void)))"
"((given-kws_289)(if local-values53_287(cdr given-kws_285) given-kws_285))"
"((given-args_290)(if local-values53_287(cdr given-args_286) given-args_286)))"
"(let-values(((skip-log-exit?51_291)(pair? given-kws_289)))"
"(let-values(((skip-log-exit?45_292)(if skip-log-exit?51_291(car given-args_290)(void))))"
"(do-local-expand60.1"
" as-transformer?43_272"
" as-transformer?49_271"
" capture-lifts?42_276"
" capture-lifts?48_275"
" lift-key44_280"
" lift-key50_279"
" local-keys46_284"
" local-keys52_283"
" local-values47_288"
" local-values53_287"
" skip-log-exit?45_292"
" skip-log-exit?51_291"
" who56_265"
" s57_266"
" context58_267"
" stop-ids59_268"
" intdefs54_269"
" intdefs55_270)))))))))))))))"
"(define-values"
"(do-local-expand62.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_293 given-argc_294)"
"(if(if(>= given-argc_294 6)(<= given-argc_294 7) #f)"
"(let-values()"
"(let-values(((l1_296)"
"(if(null? l1_295) l1_295(if(eq?(car l1_295) '#:as-transformer?)(cdr l1_295) l1_295))))"
"(let-values()"
"(let-values(((l1_298)"
"(if(null? l1_297) l1_297(if(eq?(car l1_297) '#:capture-lifts?)(cdr l1_297) l1_297))))"
"(let-values()"
"(let-values(((l1_300)"
"(if(null? l1_299) l1_299(if(eq?(car l1_299) '#:lift-key)(cdr l1_299) l1_299))))"
"(let-values()"
"(let-values(((l1_302)"
"(if(null? l1_301)"
" l1_301"
"(if(eq?(car l1_301) '#:local-keys)(cdr l1_301) l1_301))))"
"(let-values()"
"(let-values(((l1_304)"
"(if(null? l1_303)"
" l1_303"
"(if(eq?(car l1_303) '#:local-values)(cdr l1_303) l1_303))))"
"(let-values()"
"(let-values(((l1_306)"
"(if(null? l1_305)"
" l1_305"
"(if(eq?(car l1_305) '#:skip-log-exit?)(cdr l1_305) l1_305))))"
"(null? l1_306)))))))))))))"
" #f))"
"(case-lambda"
"((given-kws_307 given-args_308 who_309 s_310 context_311 stop-ids_312)"
"(unpack61.1 given-kws_307 given-args_308 who_309 s_310 context_311 stop-ids_312 #f #f))"
"((given-kws_313 given-args_314 who_315 s_316 context_317 stop-ids_318 intdefs54_319)"
"(unpack61.1 given-kws_313 given-args_314 who_315 s_316 context_317 stop-ids_318 intdefs54_319 #t)))"
" null"
" '(#:as-transformer? #:capture-lifts? #:lift-key #:local-keys #:local-values #:skip-log-exit?)"
"(let-values(((do-local-expand_320)"
"(case-lambda"
"((who_321 s_322 context_323 stop-ids_324)"
"(unpack61.1 null null who_321 s_322 context_323 stop-ids_324 #f #f))"
"((who_325 s_326 context_327 stop-ids_328 intdefs54_329)"
"(unpack61.1 null null who_325 s_326 context_327 stop-ids_328 intdefs54_329 #t)))))"
" do-local-expand_320)))"
"(void)"
"(void)"
"(define-values"
"(1/syntax-tainted?)"
"(lambda(s_1)"
"(begin"
"      (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-tainted? \"syntax?\" s_1)))"
"(syntax-tainted?$1 s_1))))"
"(define-values"
"(1/syntax-arm)"
"(let-values(((syntax-arm6_2)"
"(lambda(s5_3 maybe-insp1_4 use-mode?2_5 maybe-insp3_6 use-mode?4_7)"
"(let-values()"
"(let-values(((maybe-insp_9)(if maybe-insp3_6 maybe-insp1_4 #f)))"
"(let-values(((use-mode?_10)(if use-mode?4_7 use-mode?2_5 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_8)"
"(void)"
"                                            (let-values () (raise-argument-error 'syntax-arm \"syntax?\" s_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_12)(not maybe-insp_9)))"
"(if or-part_12 or-part_12(inspector? maybe-insp_9)))"
"(void)"
"(let-values()"
"                                                (raise-argument-error 'syntax-arm \"(or/c inspector? #f)\" maybe-insp_9)))"
"(values))))"
"(let-values(((insp_11)(inspector-for-taint maybe-insp_9)))"
"(if use-mode?_10"
"(let-values()"
"(taint-dispatch"
" s_8"
"(lambda(s_13)(syntax-arm$1 s_13 insp_11))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-arm$1 s_8 insp_11)))))))))))))"
"(case-lambda"
"((s_14)(syntax-arm6_2 s_14 #f #f #f #f))"
"((s_15 maybe-insp_16 use-mode?2_17)(syntax-arm6_2 s_15 maybe-insp_16 use-mode?2_17 #t #t))"
"((s_18 maybe-insp1_19)(syntax-arm6_2 s_18 maybe-insp1_19 #f #t #f)))))"
"(define-values"
"(1/syntax-disarm)"
"(lambda(s_20 maybe-insp_21)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_20) (void) (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_20)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_23)(not maybe-insp_21)))"
"(if or-part_23 or-part_23(inspector? maybe-insp_21)))"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-disarm \"(or/c inspector? #f)\" maybe-insp_21)))"
"(values))))"
"(let-values(((insp_22)(inspector-for-taint maybe-insp_21)))(syntax-disarm$1 s_20 insp_22))))))"
"(define-values"
"(1/syntax-rearm)"
"(let-values(((syntax-rearm12_24)"
"(lambda(s10_25 from-s11_26 use-mode?8_27 use-mode?9_28)"
"(let-values()"
"(let-values()"
"(let-values(((use-mode?_31)(if use-mode?9_28 use-mode?8_27 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_29)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_29)))"
"(if(syntax?$1 from-s_30)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" from-s_30)))"
"(if use-mode?_31"
"(let-values()"
"(taint-dispatch"
" s_29"
"(lambda(s_32)(syntax-rearm$1 s_32 from-s_30))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-rearm$1 s_29 from-s_30)))))))))))"
"(case-lambda"
"((s_33 from-s_34)(syntax-rearm12_24 s_33 from-s_34 #f #f))"
"((s_35 from-s_36 use-mode?8_37)(syntax-rearm12_24 s_35 from-s_36 use-mode?8_37 #t)))))"
"(define-values"
"(1/syntax-taint)"
"(lambda(s_38)"
"(begin"
"      (if (syntax?$1 s_38) (void) (let-values () (raise-argument-error 'syntax-taint \"syntax?\" s_38)))"
"(syntax-taint$1 s_38))))"
"(define-values"
"(inspector-for-taint)"
"(lambda(maybe-insp_39)"
"(let-values()"
"(if or-part_40"
" or-part_40"
"(let-values(((or-part_41)(current-module-code-inspector)))"
"(if or-part_41 or-part_41(current-code-inspector)))))))"
"(void)"
"(void)"
"(define-values"
"(1/variable-reference->empty-namespace)"
"(lambda(vr_1)"
"(begin"
"(if(1/variable-reference? vr_1)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->empty-namespace \"variable-reference?\" vr_1)))"
"(let-values(((temp1_2)(1/variable-reference->namespace vr_1)))(new-namespace9.1 #f #f #f #f temp1_2 #t)))))"
"(define-values"
"(1/variable-reference->namespace)"
"(lambda(vr_3)"
"(begin"
"(if(1/variable-reference? vr_3)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->namespace \"variable-reference?\" vr_3)))"
"(1/instance-data(1/variable-reference->instance vr_3)))))"
"(define-values"
"(1/variable-reference->module-path-index)"
"(lambda(vr_4)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_4)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->module-path-index \"variable-reference?\" vr_4)))"
"(values))))"
"(let-values(((mpi_5)(namespace-mpi(1/variable-reference->namespace vr_4))))"
"(if(top-level-module-path-index? mpi_5) #f mpi_5)))))"
"(define-values"
"(1/variable-reference->resolved-module-path)"
"(lambda(vr_6)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_6)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->resolved-module-path \"variable-reference?\" vr_6)))"
"(values))))"
"(let-values(((mpi_7)(1/variable-reference->module-path-index vr_6)))"
"(if mpi_7(1/module-path-index-resolve mpi_7) #f)))))"
"(define-values"
"(1/variable-reference->module-source)"
"(lambda(vr_8)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_8)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->module-source \"variable-reference?\" vr_8)))"
"(values))))"
"(let-values(((ns_9)(1/variable-reference->namespace vr_8)))(namespace-source-name ns_9)))))"
"(define-values"
"(1/variable-reference->phase)"
"(lambda(vr_10)"
"(begin"
"(if(1/variable-reference? vr_10)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->phase \"variable-reference?\" vr_10)))"
"(namespace-phase(1/variable-reference->namespace vr_10)))))"
"(define-values"
"(1/variable-reference->module-base-phase)"
"(lambda(vr_11)"
"(begin"
"(if(1/variable-reference? vr_11)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->module-base-phase \"variable-reference?\" vr_11)))"
"(namespace-0-phase(1/variable-reference->namespace vr_11)))))"
"(define-values"
"(1/variable-reference->module-declaration-inspector)"
"(lambda(vr_12)"
"(begin"
"(if(1/variable-reference? vr_12)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->base-phase \"variable-reference?\" vr_12)))"
"(let-values(((or-part_13)(namespace-declaration-inspector(1/variable-reference->namespace vr_12))))"
"(if or-part_13"
" or-part_13"
"(raise-arguments-error"
" 'variable-reference->module-declaration-inspector"
"           \"given variable reference is not from a module\"))))))"
"(void)"
"(void)"
"(define-values"
"(primitive-ids)"
"(seteq"
" 'syntax?"
" 'syntax-e"
" 'syntax->datum"
" 'datum->syntax"
" 'bound-identifier=?"
" 'free-identifier=?"
" 'free-transformer-identifier=?"
" 'free-template-identifier=?"
" 'free-label-identifier=?"
" 'identifier-binding"
" 'identifier-transformer-binding"
" 'identifier-template-binding"
" 'identifier-label-binding"
" 'identifier-binding-symbol"
" 'identifier-prune-lexical-context"
" 'syntax-debug-info"
" 'syntax-track-origin"
" 'syntax-shift-phase-level"
" 'syntax-source-module"
" 'identifier-prune-to-source-module"
" 'syntax-source"
" 'syntax-line"
" 'syntax-column"
" 'syntax-position"
" 'syntax-span"
" 'syntax->list"
" 'syntax-property"
" 'syntax-property-preserved?"
" 'syntax-property-symbol-keys"
" 'syntax-original?"
" 'syntax-tainted?"
" 'syntax-arm"
" 'syntax-disarm"
" 'syntax-rearm"
" 'syntax-taint"
" 'raise-syntax-error"
" 'struct:exn:fail:syntax"
" 'exn:fail:syntax"
" 'make-exn:fail:syntax"
" 'exn:fail:syntax?"
" 'exn:fail:syntax-exprs"
" 'struct:exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound"
" 'make-exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound?"
" 'current-module-path-for-load"
" 'prop:missing-module"
" 'exn:missing-module?"
" 'exn:missing-module-accessor"
" 'struct:exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module"
" 'make-exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module?"
" 'exn:fail:filesystem:missing-module-path"
" 'struct:exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module"
" 'make-exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module?"
" 'exn:fail:syntax:missing-module-path"
" 'read-syntax"
" 'read-syntax/recursive"
" 'syntax-transforming?"
" 'syntax-transforming-with-lifts?"
" 'syntax-transforming-module-expression?"
" 'syntax-local-transforming-module-provides?"
" 'syntax-local-context"
" 'syntax-local-introduce"
" 'syntax-local-identifier-as-binding"
" 'syntax-local-phase-level"
" 'syntax-local-name"
" 'make-syntax-introducer"
" 'make-syntax-delta-introducer"
" 'syntax-local-value"
" 'syntax-local-value/immediate"
" 'syntax-local-lift-expression"
" 'syntax-local-lift-values-expression"
" 'syntax-local-lift-context"
" 'syntax-local-lift-module"
" 'syntax-local-lift-require"
" 'syntax-local-lift-provide"
" 'syntax-local-lift-module-end-declaration"
" 'syntax-local-module-defined-identifiers"
" 'syntax-local-module-required-identifiers"
" 'syntax-local-module-exports"
" 'syntax-local-submodules"
" 'syntax-local-get-shadower"
" 'local-expand"
" 'local-expand/capture-lifts"
" 'local-transformer-expand"
" 'local-transformer-expand/capture-lifts"
" 'syntax-local-expand-expression"
" 'syntax-local-expand-expression/extend-environment"
" 'syntax-local-environment-ref"
" 'internal-definition-context?"
" 'syntax-local-make-definition-context"
" 'syntax-local-bind-syntaxes"
" 'internal-definition-context-binding-identifiers"
" 'internal-definition-context-introduce"
" 'internal-definition-context-seal"
" 'identifier-remove-from-definition-context"
" 'make-set!-transformer"
" 'prop:set!-transformer"
" 'set!-transformer?"
" 'set!-transformer-procedure"
" 'rename-transformer?"
" 'prop:rename-transformer"
" 'make-rename-transformer"
" 'rename-transformer-target"
" 'prop:liberal-define-context"
" 'liberal-define-context?"
" 'prop:expansion-contexts"
" 'module-path?"
" 'resolved-module-path?"
" 'make-resolved-module-path"
" 'resolved-module-path-name"
" 'module-path-index?"
" 'module-path-index-resolve"
" 'module-path-index-join"
" 'module-path-index-split"
" 'module-path-index-submodule"
" 'current-module-name-resolver"
" 'current-module-declare-name"
" 'current-module-declare-source"
" 'current-namespace"
" 'namespace-module-registry"
" 'namespace?"
" 'variable-reference->empty-namespace"
" 'variable-reference->namespace"
" 'variable-reference->resolved-module-path"
" 'variable-reference->module-path-index"
" 'variable-reference->module-source"
" 'variable-reference->phase"
" 'variable-reference->module-base-phase"
" 'variable-reference->module-declaration-inspector))"
"(call-with-values(lambda()(add-core-primitive! 'syntax? syntax?$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-e 1/syntax-e)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax->datum 1/syntax->datum)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'datum->syntax 1/datum->syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'bound-identifier=? 1/bound-identifier=?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'free-identifier=? 1/free-identifier=?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'free-transformer-identifier=? 1/free-transformer-identifier=?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'free-template-identifier=? 1/free-template-identifier=?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'free-label-identifier=? 1/free-label-identifier=?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'identifier-binding 1/identifier-binding)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-transformer-binding 1/identifier-transformer-binding))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-template-binding 1/identifier-template-binding))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'identifier-label-binding 1/identifier-label-binding)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-binding-symbol 1/identifier-binding-symbol))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-prune-lexical-context 1/identifier-prune-lexical-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-debug-info 1/syntax-debug-info)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-track-origin 1/syntax-track-origin)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-shift-phase-level 1/syntax-shift-phase-level)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-source-module 1/syntax-source-module)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-prune-to-source-module 1/identifier-prune-to-source-module))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-source 1/syntax-source)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-line 1/syntax-line)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-column 1/syntax-column)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-position 1/syntax-position)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-span 1/syntax-span)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax->list 1/syntax->list)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-property syntax-property$1)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-property-preserved? 1/syntax-property-preserved?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-property-symbol-keys 1/syntax-property-symbol-keys))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-original? 1/syntax-original?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-tainted? 1/syntax-tainted?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-arm 1/syntax-arm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-disarm 1/syntax-disarm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-rearm 1/syntax-rearm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-taint 1/syntax-taint)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'raise-syntax-error raise-syntax-error$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'struct:exn:fail:syntax 1/struct:exn:fail:syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax make-exn:fail:syntax$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-exn:fail:syntax make-exn:fail:syntax$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax? 1/exn:fail:syntax?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax-exprs 1/exn:fail:syntax-exprs)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'struct:exn:fail:syntax:unbound 1/struct:exn:fail:syntax:unbound))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax:unbound? 1/exn:fail:syntax:unbound?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-path-for-load 1/current-module-path-for-load))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:missing-module 1/prop:missing-module)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:missing-module? 1/exn:missing-module?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:missing-module-accessor 1/exn:missing-module-accessor))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'struct:exn:fail:filesystem:missing-module 1/struct:exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module 1/make-exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:filesystem:missing-module 1/make-exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module? 1/exn:fail:filesystem:missing-module?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module-path 1/exn:fail:filesystem:missing-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'struct:exn:fail:syntax:missing-module 1/struct:exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module 1/make-exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:syntax:missing-module 1/make-exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module? 1/exn:fail:syntax:missing-module?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module-path 1/exn:fail:syntax:missing-module-path))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'read-syntax 1/read-syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'read-syntax/recursive 1/read-syntax/recursive)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-transforming? 1/syntax-transforming?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-transforming-with-lifts? 1/syntax-transforming-with-lifts?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-transforming-module-expression? 1/syntax-transforming-module-expression?))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'syntax-local-transforming-module-provides? 1/syntax-local-transforming-module-provides?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-context 1/syntax-local-context)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-introduce 1/syntax-local-introduce)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-identifier-as-binding 1/syntax-local-identifier-as-binding))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-phase-level 1/syntax-local-phase-level)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-name 1/syntax-local-name)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-syntax-introducer 1/make-syntax-introducer)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-syntax-delta-introducer 1/make-syntax-delta-introducer))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-value 1/syntax-local-value)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-value/immediate 1/syntax-local-value/immediate))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-expression 1/syntax-local-lift-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-values-expression 1/syntax-local-lift-values-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-context 1/syntax-local-lift-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-lift-module 1/syntax-local-lift-module)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-require 1/syntax-local-lift-require))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-provide 1/syntax-local-lift-provide))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-module-end-declaration 1/syntax-local-lift-module-end-declaration))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-defined-identifiers 1/syntax-local-module-defined-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-required-identifiers 1/syntax-local-module-required-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-exports 1/syntax-local-module-exports))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-submodules 1/syntax-local-submodules)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-get-shadower 1/syntax-local-get-shadower))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'local-expand 1/local-expand)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'local-expand/capture-lifts 1/local-expand/capture-lifts))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'local-transformer-expand 1/local-transformer-expand)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'local-transformer-expand/capture-lifts 1/local-transformer-expand/capture-lifts))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-expand-expression 1/syntax-local-expand-expression))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'syntax-local-expand-expression/extend-environment"
" 1/syntax-local-expand-expression/extend-environment))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-environment-ref 1/syntax-local-environment-ref))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context? 1/internal-definition-context?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-make-definition-context 1/syntax-local-make-definition-context))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-bind-syntaxes 1/syntax-local-bind-syntaxes))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'internal-definition-context-binding-identifiers"
" 1/internal-definition-context-binding-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context-introduce 1/internal-definition-context-introduce))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context-seal 1/internal-definition-context-seal))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'identifier-remove-from-definition-context 1/identifier-remove-from-definition-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-set!-transformer 1/make-set!-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:set!-transformer 1/prop:set!-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'set!-transformer? 1/set!-transformer?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'set!-transformer-procedure 1/set!-transformer-procedure))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'rename-transformer? 1/rename-transformer?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:rename-transformer 1/prop:rename-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-rename-transformer 1/make-rename-transformer)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'rename-transformer-target 1/rename-transformer-target))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'prop:liberal-define-context 1/prop:liberal-define-context))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'liberal-define-context? has-liberal-define-context-property?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:expansion-contexts 1/prop:expansion-contexts)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path? 1/module-path?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'resolved-module-path? 1/resolved-module-path?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-resolved-module-path 1/make-resolved-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'resolved-module-path-name 1/resolved-module-path-name))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index? 1/module-path-index?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'module-path-index-resolve 1/module-path-index-resolve))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index-join 1/module-path-index-join)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index-split 1/module-path-index-split)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'module-path-index-submodule 1/module-path-index-submodule))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-name-resolver 1/current-module-name-resolver))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-declare-name 1/current-module-declare-name))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-declare-source 1/current-module-declare-source))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'current-namespace 1/current-namespace)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'namespace-module-registry 1/namespace-module-registry))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'namespace? 1/namespace?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->empty-namespace 1/variable-reference->empty-namespace))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->namespace 1/variable-reference->namespace))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->resolved-module-path 1/variable-reference->resolved-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-path-index 1/variable-reference->module-path-index))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-source 1/variable-reference->module-source))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->phase 1/variable-reference->phase))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-base-phase 1/variable-reference->module-base-phase))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'variable-reference->module-declaration-inspector"
" 1/variable-reference->module-declaration-inspector))"
" print-values)"
"(void)"
"(void)"
"(define-values"
"(declare-kernel-module!6.1)"
"(lambda(eval1_25 main-ids2_26 ns5_27)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(let-values(((...nder/boot/kernel.rkt:23:2_31) copy-runtime-module!26.1)"
"((temp51_32) '#%kernel)"
"((temp52_33) '#%runtime)"
"((temp53_34)(set-union primitive-ids main-ids_30))"
"((temp54_35)"
"(hasheq"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference-constant?"
" 1/variable-reference-constant?)))"
"(copy-runtime-module!24.1 #f #f temp54_35 #t ns55_36 #f #f #f #f temp53_34 #t temp52_33 #t temp51_32))"
"(let-values(((...nder/boot/kernel.rkt:30:2_37) declare-reexporting-module!50.1)"
"((temp56_38) '#%kernel)"
"((temp57_39) '(#%core #%runtime #%main)))"
"(declare-reexporting-module!48.1 ns58_40 #f #f temp56_38 temp57_39)))))))))"
"(define-values"
"(lifted/6.1$3 lifted/7.1$3 lifted/8.1$3 lifted/9.1$3 lifted/10.1$3)"
"(make-struct-type"
" 'copy-runtime-module!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'copy-runtime-module!(case-lambda((self_55 name_56)(apply missing-kw self_55 name_56 null))))))"
"(current-inspector)"
"(case-lambda((self_57 name_58)(apply missing-kw self_57 name_58 null)))))"
"(define-values"
"(copy-runtime-module!24.1)"
"(lambda(alts12_59"
" alts19_60"
" extras13_61"
" extras20_62"
" namespace10_63"
" primitive?14_64"
" primitive?21_65"
" protected?15_66"
" protected?22_67"
" skip11_68"
" skip18_69"
" to9_70"
" to16_71"
" name23_72)"
"(let-values()"
"(let-values(((to-name_74)(if to16_71 to9_70 name_73)))"
"(let-values()"
"(let-values(((skip-syms_76)(if skip18_69 skip11_68(seteq))))"
"(let-values(((alts_77)(if alts19_60 alts12_59 '#hasheq())))"
"(let-values(((extras_78)(if extras20_62 extras13_61 '#hasheq())))"
"(let-values(((primitive?_79)(if primitive?21_65 primitive?14_64 #t)))"
"(let-values(((protected?_80)(if protected?22_67 protected?15_66 #f)))"
"(let-values()"
"(let-values(((mod-name_81)(list 'quote name_73)))"
"(let-values(((prims_82)(1/primitive-table name_73)))"
"(let-values((()"
"(begin"
"(let-values()"
"(begin"
"(if((lambda(ht_86)(hash? ht_86)) ht_85)"
"(void)"
"(let-values()(default-in-hash-keys ht_85)))"
"((letrec-values(((for-loop_87)"
"(lambda(fold-var_88 i_89)"
"(if i_89"
"(let-values(((sym_90)"
"(hash-iterate-key ht_85 i_89)))"
"(let-values(((fold-var_91)"
"(let-values()"
"(let-values(((fold-var_93)"
"(let-values()"
"(begin"
"(let-values()"
"(register-built-in-symbol!"
" sym_90))"
"(void)))))"
"(values fold-var_93)))))"
"(for-loop_87"
" fold-var_91"
"(hash-iterate-next ht_85 i_89))))"
" fold-var_88))))"
" for-loop_87)"
"(void)"
"(hash-iterate-first ht_85))))"
"(values))))"
"(let-values(((ht_83)"
"(let-values()"
"(begin"
"(if((lambda(ht_95)(hash? ht_95)) ht_94)"
"(void)"
"(let-values()(default-in-hash ht_94)))"
"((letrec-values(((for-loop_96)"
"(lambda(table_97 i_98)"
"(if i_98"
"(let-values(((sym_99 val_100)"
"(hash-iterate-key+value ht_94 i_98)))"
"(let-values(((table_101)"
"(let-values()"
"(if(set-member?"
" skip-syms_76"
" sym_99)"
" table_102"
"(let-values()"
"(let-values(((table_104)"
"(let-values()"
"(let-values(((key_105"
" val_106)"
"(let-values()"
"(values"
" sym_99"
"(let-values(((or-part_107)"
"(hash-ref"
" alts_77"
" sym_99"
" #f)))"
"(if or-part_107"
" or-part_107"
" val_100))))))"
"(hash-set"
" table_103"
" key_105"
" val_106)))))"
"(values table_104)))))))"
"(for-loop_96"
" table_101"
"(hash-iterate-next ht_94 i_98))))"
" table_97))))"
" for-loop_96)"
" '#hasheq()"
"(hash-iterate-first ht_94))))))"
"(let-values(((ht+extras_84)"
"(let-values()"
"(begin"
"(if((lambda(ht_109)(hash? ht_109)) ht_108)"
"(void)"
"(let-values()(default-in-hash ht_108)))"
"((letrec-values(((for-loop_110)"
"(lambda(ht_111 i_112)"
"(if i_112"
"(let-values(((k_113 v_114)"
"(hash-iterate-key+value"
" ht_108"
" i_112)))"
"(let-values(((ht_115)"
"(let-values()"
"(let-values(((ht_117)"
"(let-values()"
"(hash-set"
" ht_116"
" k_113"
" v_114))))"
"(values ht_117)))))"
"(for-loop_110"
" ht_115"
"(hash-iterate-next ht_108 i_112))))"
" ht_111))))"
" for-loop_110)"
" ht_83"
"(hash-iterate-first ht_108))))))"
"(let-values(((...nder/boot/kernel.rkt:51:2_118) declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1"
" ns61_121"
" primitive?62_122"
" #t"
" #f"
" #f"
" protected?63_123"
" #t"
" #f"
" #f"
" to-name59_119"
" ht+extras60_120))))))))))))))))))"
"(define-values"
"(unpack25.1)"
"(lambda(given-kws_124 given-args_125 name23_126)"
"(let-values(((alts19_127)(if(pair? given-kws_124)(eq? '#:alts(car given-kws_124)) #f)))"
"(let-values(((alts12_128)(if alts19_127(car given-args_125)(void)))"
"((given-kws_129)(if alts19_127(cdr given-kws_124) given-kws_124))"
"((given-args_130)(if alts19_127(cdr given-args_125) given-args_125)))"
"(let-values(((extras20_131)(if(pair? given-kws_129)(eq? '#:extras(car given-kws_129)) #f)))"
"(let-values(((extras13_132)(if extras20_131(car given-args_130)(void)))"
"((given-kws_133)(if extras20_131(cdr given-kws_129) given-kws_129))"
"((given-args_134)(if extras20_131(cdr given-args_130) given-args_130)))"
"(let-values(((namespace10_135)(car given-args_134))"
"((given-kws_136)(cdr given-kws_133))"
"((given-args_137)(cdr given-args_134)))"
"(let-values(((primitive?21_138)(if(pair? given-kws_136)(eq? '#:primitive?(car given-kws_136)) #f)))"
"(let-values(((primitive?14_139)(if primitive?21_138(car given-args_137)(void)))"
"((given-kws_140)(if primitive?21_138(cdr given-kws_136) given-kws_136))"
"((given-args_141)(if primitive?21_138(cdr given-args_137) given-args_137)))"
"(let-values(((protected?22_142)"
"(if(pair? given-kws_140)(eq? '#:protected?(car given-kws_140)) #f)))"
"(let-values(((protected?15_143)(if protected?22_142(car given-args_141)(void)))"
"((given-kws_144)(if protected?22_142(cdr given-kws_140) given-kws_140))"
"((given-args_145)(if protected?22_142(cdr given-args_141) given-args_141)))"
"(let-values(((skip18_146)(if(pair? given-kws_144)(eq? '#:skip(car given-kws_144)) #f)))"
"(let-values(((skip11_147)(if skip18_146(car given-args_145)(void)))"
"((given-kws_148)(if skip18_146(cdr given-kws_144) given-kws_144))"
"((given-args_149)(if skip18_146(cdr given-args_145) given-args_145)))"
"(let-values(((to16_150)(pair? given-kws_148)))"
"(let-values(((to9_151)(if to16_150(car given-args_149)(void))))"
"(copy-runtime-module!24.1"
" alts12_128"
" alts19_127"
" extras13_132"
" extras20_131"
" namespace10_135"
" primitive?14_139"
" primitive?21_138"
" protected?15_143"
" protected?22_142"
" skip11_147"
" skip18_146"
" to9_151"
" to16_150"
" name23_126))))))))))))))))"
"(define-values"
"(copy-runtime-module!26.1)"
"(lifted/7.1$3"
"(lambda(given-kws_152 given-argc_153)"
"(if(= given-argc_153 3)"
"(subsets? '(#:namespace) given-kws_152 '(#:alts #:extras #:namespace #:primitive? #:protected? #:skip #:to))"
" #f))"
"(case-lambda((given-kws_154 given-args_155 name_156)(unpack25.1 given-kws_154 given-args_155 name_156)))"
" '(#:namespace)"
" '(#:alts #:extras #:namespace #:primitive? #:protected? #:skip #:to)))"
"(define-values"
"(lifted/11.1$2 lifted/12.1$2 lifted/13.1$2 lifted/14.1$2 lifted/15.1$2)"
"(make-struct-type"
" 'declare-hash-based-module!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'declare-hash-based-module!"
"(case-lambda((self_157 name_158 ht_159)(apply missing-kw self_157 name_158 ht_159 null))))))"
"(current-inspector)"
"(case-lambda((self_160 name_161 ht_162)(apply missing-kw self_160 name_161 ht_162 null)))))"
"(define-values"
"(declare-hash-based-module!39.1)"
"(lambda(namespace27_163"
" primitive?28_164"
" primitive?33_165"
" protected30_166"
" protected35_167"
" protected?29_168"
" protected?34_169"
" register-builtin?31_170"
" register-builtin?36_171"
" name37_172"
" ht38_173)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((primitive?_177)(if primitive?33_165 primitive?28_164 #f)))"
"(let-values(((protected?_178)(if protected?34_169 protected?29_168 #f)))"
"(let-values(((protected-syms_179)(if protected35_167 protected30_166 null)))"
"(let-values(((register-builtin?_180)(if register-builtin?36_171 register-builtin?31_170 #f)))"
"(let-values()"
"(let-values(((mpi_181)(1/module-path-index-join(list 'quote name_174) #f)))"
"(let-values(((temp65_183)"
"(let-values(((temp67_186) #t)"
"((temp69_188) #t)"
"((temp70_189)(not protected?_178))"
"((temp72_191)"
"(hasheqv"
" 0"
"(let-values()"
"(begin"
"(if((lambda(ht_194)(hash? ht_194)) ht_193)"
"(void)"
"(let-values()(default-in-hash-keys ht_193)))"
"((letrec-values(((for-loop_195)"
"(lambda(table_196 i_197)"
"(if i_197"
"(let-values(((sym_198)"
"(hash-iterate-key"
" ht_193"
" i_197)))"
"(let-values(((table_199)"
"(let-values()"
"(let-values(((table_201)"
"(let-values()"
"(let-values(((key_202"
" val_203)"
"(let-values()"
"(let-values((()"
"(begin"
"(if register-builtin?_180"
"(let-values()"
"(register-built-in-symbol!"
" sym_198))"
"(void))"
"(values))))"
"(let-values(((binding_204)"
"(let-values(((temp75_206)"
" 0))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi74_205"
" temp75_206"
" sym76_207))))"
"(values"
" sym_198"
"(if(let-values()"
"(if or-part_208"
" or-part_208"
"(member"
" sym_198"
" protected-syms_179)))"
"(provided1.1"
" binding_204"
" #t"
" #f)"
" binding_204)))))))"
"(hash-set"
" table_200"
" key_202"
" val_203)))))"
"(values table_201)))))"
"(for-loop_195"
" table_199"
"(hash-iterate-next ht_193 i_197))))"
" table_196))))"
" for-loop_195)"
" '#hash()"
"(hash-iterate-first ht_193))))))"
"((temp73_192)"
"(lambda(data-box_209"
" ns_210"
" phase-shift_211"
" phase-level_212"
" self_213"
" bulk-binding-registry_214"
" insp_215)"
"(if(= 0 phase-level_212)"
"(let-values()"
"(let-values()"
"(begin"
"(if((lambda(ht_217)(hash? ht_217)) ht_216)"
"(void)"
"(let-values()(default-in-hash ht_216)))"
"((letrec-values(((for-loop_218)"
"(lambda(fold-var_219 i_220)"
"(if i_220"
"(let-values(((sym_221 val_222)"
"(hash-iterate-key+value"
" ht_216"
" i_220)))"
"(let-values(((fold-var_223)"
"(let-values()"
"(let-values(((fold-var_225)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" ns_210"
" 0"
" sym_221"
" val_222))"
"(void)))))"
"(values"
" fold-var_225)))))"
"(for-loop_218"
" fold-var_223"
"(hash-iterate-next"
" ht_216"
" i_220))))"
" fold-var_219))))"
" for-loop_218)"
"(void)"
"(hash-iterate-first ht_216)))))"
"(void)))))"
"(make-module37.1"
" temp67_186"
" #t"
" #f"
" #f"
" temp73_192"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp70_189"
" #t"
" #f"
" #f"
" temp69_188"
" #t"
" #f"
" #f"
" primitive?68_187"
" #t"
" temp72_191"
" #f"
" #f"
" mpi71_190"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)))"
"((temp66_184)(1/module-path-index-resolve mpi_181)))"
"(declare-module!56.1 #f #f ns64_182 temp65_183 temp66_184)))))))))))))"
"(define-values"
"(unpack40.1)"
"(lambda(given-kws_226 given-args_227 name37_228 ht38_229)"
"(let-values(((namespace27_230)(car given-args_227))"
"((given-kws_231)(cdr given-kws_226))"
"((given-args_232)(cdr given-args_227)))"
"(let-values(((primitive?33_233)(if(pair? given-kws_231)(eq? '#:primitive?(car given-kws_231)) #f)))"
"(let-values(((primitive?28_234)(if primitive?33_233(car given-args_232)(void)))"
"((given-kws_235)(if primitive?33_233(cdr given-kws_231) given-kws_231))"
"((given-args_236)(if primitive?33_233(cdr given-args_232) given-args_232)))"
"(let-values(((protected35_237)(if(pair? given-kws_235)(eq? '#:protected(car given-kws_235)) #f)))"
"(let-values(((protected30_238)(if protected35_237(car given-args_236)(void)))"
"((given-kws_239)(if protected35_237(cdr given-kws_235) given-kws_235))"
"((given-args_240)(if protected35_237(cdr given-args_236) given-args_236)))"
"(let-values(((protected?34_241)(if(pair? given-kws_239)(eq? '#:protected?(car given-kws_239)) #f)))"
"(let-values(((protected?29_242)(if protected?34_241(car given-args_240)(void)))"
"((given-kws_243)(if protected?34_241(cdr given-kws_239) given-kws_239))"
"((given-args_244)(if protected?34_241(cdr given-args_240) given-args_240)))"
"(let-values(((register-builtin?36_245)(pair? given-kws_243)))"
"(let-values(((register-builtin?31_246)(if register-builtin?36_245(car given-args_244)(void))))"
"(declare-hash-based-module!39.1"
" namespace27_230"
" primitive?28_234"
" primitive?33_233"
" protected30_238"
" protected35_237"
" protected?29_242"
" protected?34_241"
" register-builtin?31_246"
" register-builtin?36_245"
" name37_228"
" ht38_229))))))))))))"
"(define-values"
"(declare-hash-based-module!41.1)"
"(lifted/12.1$2"
"(lambda(given-kws_247 given-argc_248)"
"(if(= given-argc_248 4)"
"(subsets? '(#:namespace) given-kws_247 '(#:namespace #:primitive? #:protected #:protected? #:register-builtin?))"
" #f))"
"(case-lambda"
"((given-kws_249 given-args_250 name_251 ht_252)(unpack40.1 given-kws_249 given-args_250 name_251 ht_252)))"
" '(#:namespace)"
" '(#:namespace #:primitive? #:protected #:protected? #:register-builtin?)))"
"(define-values"
"(lifted/16.1$1 lifted/17.1$1 lifted/18.1$1 lifted/19.1$1 lifted/20.1$1)"
"(make-struct-type"
" 'declare-reexporting-module!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'declare-reexporting-module!"
"(case-lambda"
"((self_253 name_254 require-names_255)(apply missing-kw self_253 name_254 require-names_255 null))))))"
"(current-inspector)"
"(case-lambda((self_256 name_257 require-names_258)(apply missing-kw self_256 name_257 require-names_258 null)))))"
"(define-values"
"(declare-reexporting-module!48.1)"
"(lambda(namespace43_259 reexport?42_260 reexport?44_261 name46_262 require-names47_263)"
"(let-values()"
"(let-values()"
"(let-values(((reexport?_266)(if reexport?44_261 reexport?42_260 #t)))"
"(let-values()"
"(let-values()"
"(let-values(((mpi_268)(1/module-path-index-join(list 'quote name_264) #f)))"
"(let-values(((require-mpis_269)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_270)(void)(let-values()(in-list lst_270)))"
"((letrec-values(((for-loop_271)"
"(lambda(fold-var_272 lst_273)"
"(if(pair? lst_273)"
"(let-values(((require-name_274)(unsafe-car lst_273)))"
"(let-values(((fold-var_275)"
"(let-values()"
"(let-values(((fold-var_277)"
"(let-values()"
"(cons"
"(let-values()"
"(1/module-path-index-join"
"(list"
" 'quote"
" require-name_274)"
" #f))"
" fold-var_276))))"
"(values fold-var_277)))))"
"(for-loop_271 fold-var_275(unsafe-cdr lst_273))))"
" fold-var_272))))"
" for-loop_271)"
" null"
" lst_270))))))"
"(let-values(((temp78_279)"
"(let-values(((temp80_282) #t)"
"((temp81_283) #t)"
"((temp83_285)(list(cons 0 require-mpis_269)))"
"((temp84_286)"
"(if reexport?_266"
"(hasheqv"
" 0"
"(let-values()"
"(begin"
"(if(list? lst_288)(void)(let-values()(in-list lst_288)))"
"((letrec-values(((for-loop_289)"
"(lambda(table_290 lst_291)"
"(if(pair? lst_291)"
"(let-values(((require-mpi_292)"
"(unsafe-car lst_291)))"
"(let-values(((table_293)"
"(let-values(((m_294)"
"(namespace->module"
" ns_267"
"(1/module-path-index-resolve"
" require-mpi_292))))"
"(begin"
" #t"
"((letrec-values(((for-loop_295)"
"(lambda(table_296)"
"(let-values()"
"(let-values(((table_297)"
"(let-values(((ht_298)"
"(hash-ref"
"(shift-provides-module-path-index"
"(module-provides"
" m_294)"
"(module-self"
" m_294)"
" require-mpi_292)"
" 0)))"
"(begin"
"(if((lambda(ht_299)"
"(hash?"
" ht_299))"
" ht_298)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_298)))"
"((letrec-values(((for-loop_300)"
"(lambda(table_301"
" i_302)"
"(if i_302"
"(let-values(((sym_303"
" binding_304)"
"(hash-iterate-key+value"
" ht_298"
" i_302)))"
"(let-values(((table_305)"
"(let-values()"
"(let-values(((table_307)"
"(let-values()"
"(let-values(((key_308"
" val_309)"
"(let-values()"
"(values"
" sym_303"
" binding_304))))"
"(hash-set"
" table_306"
" key_308"
" val_309)))))"
"(values"
" table_307)))))"
"(for-loop_300"
" table_305"
"(hash-iterate-next"
" ht_298"
" i_302))))"
" table_301))))"
" for-loop_300)"
" table_296"
"(hash-iterate-first"
" ht_298))))))"
" table_297)))))"
" for-loop_295)"
" table_290)))))"
"(for-loop_289"
" table_293"
"(unsafe-cdr lst_291))))"
" table_290))))"
" for-loop_289)"
" '#hash()"
" lst_288))))"
" '#hasheqv()))"
"((void85_287) void))"
"(make-module37.1"
" temp80_282"
" #t"
" #f"
" #f"
" void85_287"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_283"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp84_286"
" temp83_285"
" #t"
" mpi82_284"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)))"
"((temp79_280)(1/module-path-index-resolve mpi_268)))"
"(declare-module!56.1 #f #f ns77_278 temp78_279 temp79_280)))))))))))"
"(define-values"
"(unpack49.1)"
"(lambda(given-kws_310 given-args_311 name46_312 require-names47_313)"
"(let-values(((namespace43_314)(car given-args_311))"
"((given-kws_315)(cdr given-kws_310))"
"((given-args_316)(cdr given-args_311)))"
"(let-values(((reexport?44_317)(pair? given-kws_315)))"
"(let-values(((reexport?42_318)(if reexport?44_317(car given-args_316)(void))))"
"(declare-reexporting-module!48.1"
" namespace43_314"
" reexport?42_318"
" reexport?44_317"
" name46_312"
" require-names47_313))))))"
"(define-values"
"(declare-reexporting-module!50.1)"
"(lifted/17.1$1"
"(lambda(given-kws_319 given-argc_320)"
"(if(= given-argc_320 4)(subsets? '(#:namespace) given-kws_319 '(#:namespace #:reexport?)) #f))"
"(case-lambda"
"((given-kws_321 given-args_322 name_323 require-names_324)"
"(unpack49.1 given-kws_321 given-args_322 name_323 require-names_324)))"
" '(#:namespace)"
" '(#:namespace #:reexport?)))"
"(void)"
"(void)"
"(void)"
"(void)"
"(void)"
"(void)"
"(void)"
"(void)"
"(void)"
"(void)"
"(define-values"
"(linklet-primitives)"
"(hasheq"
" 'primitive-table"
" 1/primitive-table"
" 'primitive->compiled-position"
" 1/primitive->compiled-position"
" 'compiled-position->primitive"
" 1/compiled-position->primitive"
" 'linklet?"
" 1/linklet?"
" 'compile-linklet"
" 1/compile-linklet"
" 'recompile-linklet"
" 1/recompile-linklet"
" 'eval-linklet"
" 1/eval-linklet"
" 'instantiate-linklet"
" 1/instantiate-linklet"
" 'linklet-import-variables"
" 1/linklet-import-variables"
" 'linklet-export-variables"
" 1/linklet-export-variables"
" 'instance?"
" 1/instance?"
" 'make-instance"
" 1/make-instance"
" 'instance-name"
" 1/instance-name"
" 'instance-data"
" 1/instance-data"
" 'instance-variable-names"
" 1/instance-variable-names"
" 'instance-variable-value"
" 1/instance-variable-value"
" 'instance-set-variable-value!"
" 1/instance-set-variable-value!"
" 'instance-unset-variable!"
" 1/instance-unset-variable!"
" 'linklet-directory?"
" 1/linklet-directory?"
" 'hash->linklet-directory"
" 1/hash->linklet-directory"
" 'linklet-directory->hash"
" 1/linklet-directory->hash"
" 'linklet-bundle?"
" 1/linklet-bundle?"
" 'hash->linklet-bundle"
" 1/hash->linklet-bundle"
" 'linklet-bundle->hash"
" 1/linklet-bundle->hash"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference->instance"
" 1/variable-reference->instance"
" 'variable-reference-constant?"
" 1/variable-reference-constant?))"
"(void)"
"(void)"
"(define-values"
"(with-module-reading-parameterization)"
"(lambda(thunk_1)"
"(call-with-default-reading-parameterization"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t"
" read-accept-compiled"
" #t)"
"(let-values()(thunk_1)))))))"
"(define-values"
"(check-module-form)"
"(lambda(exp_5 filename_6)"
"(if(let-values(((or-part_7)(eof-object? exp_5)))(if or-part_7 or-part_7(eof-object?(1/syntax-e exp_5))))"
"(let-values()"
"(if filename_6"
"(error"
" 'load-handler"
"           (string-append \"expected a `module' declaration, but found end-of-file\\n\" \"  file: ~a\")"
" filename_6)"
" #f))"
"(if(1/compiled-module-expression?(1/syntax-e exp_5))"
"(let-values() exp_5)"
"(if(if(syntax?$1 exp_5)"
"(if(pair?(1/syntax-e exp_5))"
"(if(eq? 'module(1/syntax-e(car(1/syntax-e exp_5))))"
"(let-values(((r_8)(cdr(1/syntax-e exp_5))))"
"(let-values(((r_9)(if(syntax?$1 r_8)(1/syntax-e r_8) r_8)))"
"(if(pair? r_9)(identifier?(car r_9)) #f)))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(1/datum->syntax exp_5(cons(1/namespace-module-identifier)(cdr(1/syntax-e exp_5))) exp_5 exp_5))"
"(let-values()"
"(if filename_6"
"(error"
" 'default-load-handler"
"               (string-append \"expected a `module' declaration, but found something else\\n\" \"  file: ~a\")"
" filename_6)"
" #f)))))))"
"(void)"
"(void)"
"(define-values"
"(default-load-handler)"
"(lambda(path_1 expected-mod_2)"
"(begin"
"(if(path-string? path_1)"
"(void)"
"        (let-values () (raise-argument-error 'default-load-handler \"path-string?\" path_1)))"
"(if(let-values(((or-part_3)(not expected-mod_2)))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(symbol? expected-mod_2)))"
"(if or-part_4"
" or-part_4"
"(if(pair? expected-mod_2)"
"(if(list? expected-mod_2)"
"(if(let-values(((or-part_5)(not(car expected-mod_2))))"
"(if or-part_5 or-part_5(symbol?(car expected-mod_2))))"
"(andmap2 symbol?(cdr expected-mod_2))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'default-load-handler"
"           \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" expected-mod_2)))"
"(if expected-mod_2"
"(let-values()"
"((call-with-input-module-file"
" path_1"
"(lambda(i_6)"
"(begin"
"                (if (regexp-match? '#rx\"[.]zo$\" path_1) (void) (let-values () (port-count-lines! i_6)))"
"(with-module-reading-parameterization+delay-source"
" path_1"
"(lambda()"
"(let-values(((c1_7)(linklet-directory-start i_6)))"
"(if c1_7"
"((lambda(pos_8)"
"(let-values(((b-pos_9)(search-directory i_6 pos_8(encode-symbols expected-mod_2))))"
"(if b-pos_9"
"(let-values()"
"(begin"
"(file-position i_6 b-pos_9)"
"(let-values(((or-part_10)(cached-bundle i_6)))"
"(if or-part_10"
" or-part_10"
"(let-values(((v_11)(read i_6)))"
"(if(1/compiled-module-expression? v_11)"
"(lambda()((current-eval) v_11))"
"(error"
" 'default-load-handler"
"                                           (string-append \"expected a compiled module\\n\" \"  in: ~e\\n\" \"  found: ~e\")"
"(object-name i_6)"
" v_11)))))))"
"(if(pair? expected-mod_2)"
"(let-values() void)"
"(let-values()"
"(error"
" 'default-load-handler"
"                                   (string-append \"could not find main module\\n\" \"  in: ~e\")"
"(object-name i_6)))))))"
" c1_7)"
"(let-values(((c2_12)(cached-bundle i_6)))"
"(if c2_12"
"((lambda(thunk_13) thunk_13) c2_12)"
"(if(if(pair? expected-mod_2)(not(car expected-mod_2)) #f)"
"(let-values() void)"
"(let-values()"
"(let-values(((s_14)(1/read-syntax(object-name i_6) i_6)))"
"(let-values((()"
"(begin"
"(if(eof-object? s_14)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                                       \"expected a `module' declaration;\\n\""
"                                                       \" found end-of-file\\n\""
"                                                       \"  in: ~e\")"
"(object-name i_6)))"
"(void))"
"(values))))"
"(let-values(((m-s_15)(check-module-form s_14 path_1)))"
"(let-values(((s2_16)(1/read-syntax(object-name i_6) i_6)))"
"(begin"
"(if(eof-object? s2_16)"
"(void)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                               \"expected a `module' declaration;\\n\""
"                                               \" found an extra form\\n\""
"                                               \"  in: ~e\\n\""
"                                               \"  found: ~.s\")"
"(object-name i_6)"
" s2_16)))"
"(lambda()((current-eval) m-s_15))))))))))))))))))))"
"(let-values()"
"(let-values(((add-top-interaction_17)"
"(lambda(s_18)"
"(1/namespace-syntax-introduce(1/datum->syntax #f(cons '#%top-interaction s_18))))))"
"(let-values(((temp2_20)"
"(lambda(i_21)"
"(begin"
"(port-count-lines! i_21)"
"((letrec-values(((loop_22)"
"(lambda(vals_23)"
"(let-values(((s_24)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-compiled"
" #t"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t)"
"(let-values()"
"(if(load-on-demand-enabled)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" read-on-demand-source"
"(path->complete-path path_1))"
"(let-values()"
"(1/read-syntax(object-name i_21) i_21)))"
"(1/read-syntax(object-name i_21) i_21))))))"
"(if(eof-object? s_24)"
"(apply values vals_23)"
"(loop_22"
"(call-with-continuation-prompt"
"(lambda()"
"(call-with-values"
"(lambda()((current-eval)(add-top-interaction_17 s_24)))"
" list))"
"(default-continuation-prompt-tag)"
"(lambda args_25"
"(apply"
" abort-current-continuation"
"(default-continuation-prompt-tag)"
" args_25)))))))))"
" loop_22)"
"(list(void)))))))"
"(call-with-input-file*61.1 #f #f path1_19 temp2_20))))))))"
"(define-values"
"(linklet-bundle-or-directory-start)"
"(lambda(i_26 tag_27)"
"(let-values(((version-length_28)(string-length(version))))"
"(if(equal?(peek-byte i_26)(char->integer '#\\#))"
"(if(equal?(peek-byte i_26 1)(char->integer '#\\~))"
"(if(equal?(peek-byte i_26 2) version-length_28)"
"(if(equal?(peek-bytes version-length_28 3 i_26)(string->bytes/utf-8(version)))"
"(if(equal?(peek-byte i_26(+ 3 version-length_28))(char->integer tag_27))(+ version-length_28 4) #f)"
" #f)"
" #f)"
" #f)"
" #f))))"
"(define-values"
"(linklet-directory-start)"
"(lambda(i_29)(let-values(((pos_30)(linklet-bundle-or-directory-start i_29 '#\\D)))(if pos_30(+ pos_30 4) #f))))"
"(define-values"
"(linklet-bundle-hash-code)"
"(lambda(i_31)"
"(let-values(((pos_32)(linklet-bundle-or-directory-start i_31 '#\\B)))"
"(let-values(((hash-code_33)(if pos_32(peek-bytes 20 pos_32 i_31) #f)))"
"(if(bytes? hash-code_33)"
"(if(= 20(bytes-length hash-code_33))"
"(if(let-values(((vec_34 len_35)"
"(let-values()"
"(begin"
"(if(bytes? vec_36)(void)(let-values()(in-bytes vec_36)))"
"(values vec_36(bytes-length vec_36))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_37)"
"(lambda(result_38 pos_39)"
"(if(unsafe-fx< pos_39 len_35)"
"(let-values(((c_40)(bytes-ref vec_34 pos_39)))"
"(let-values(((result_41)"
"(let-values()"
"(let-values(((result_43)"
"(let-values()"
"(let-values()(not(eq? c_40 0))))))"
"(values result_43)))))"
"(if(not((lambda x_44 result_41) c_40))"
"(for-loop_37 result_41(unsafe-fx+ 1 pos_39))"
" result_41)))"
" result_38))))"
" for-loop_37)"
" #f"
" 0)))"
" hash-code_33"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(cached-bundle)"
"(lambda(i_45)"
"(let-values(((c3_46)(module-cache-ref(make-module-cache-key(linklet-bundle-hash-code i_45)))))"
"(if c3_46"
"((lambda(declare-module_47)(lambda()(declare-module_47(1/current-namespace)))) c3_46)"
"(let-values() #f)))))"
"(define-values"
"(read-number)"
"(lambda(i_48)"
"(let-values(((read-byte/not-eof_49)"
"(lambda(i_50)(let-values(((v_51)(read-byte i_50)))(if(eof-object? v_51) 0 v_51)))))"
"(bitwise-ior"
"(read-byte/not-eof_49 i_48)"
"(arithmetic-shift(read-byte/not-eof_49 i_48) 8)"
"(arithmetic-shift(read-byte/not-eof_49 i_48) 16)"
"(arithmetic-shift(read-byte/not-eof_49 i_48) 24)))))"
"(define-values"
"(search-directory)"
"(lambda(i_52 pos_53 bstr_54)"
"(if(zero? pos_53)"
"(let-values() #f)"
"(let-values()"
"(let-values((()(begin(file-position i_52 pos_53)(values))))"
"(let-values(((name-len_55)(read-number i_52)))"
"(let-values(((v_56)(read-bytes name-len_55 i_52)))"
"(begin"
"(if(if(bytes? v_56)(=(bytes-length v_56) name-len_55) #f)"
"(void)"
"(let-values()"
"(error"
" 'deafult-load-handler"
"(string-append"
"                      \"failure getting submodule path\\n\""
"                      \"  in: ~e\\n\""
"                      \"  at position: ~a\\n\""
"                      \"  expected bytes: ~a\\n\""
"                      \"  read bytes: ~e\")"
"(object-name i_52)"
" pos_53"
" name-len_55"
" v_56)))"
"(if(bytes=? bstr_54 v_56)"
"(let-values()(read-number i_52))"
"(if(bytes<? bstr_54 v_56)"
"(let-values()"
"(begin(read-number i_52)(read-number i_52)(search-directory i_52(read-number i_52) bstr_54)))"
"(let-values()"
"(begin"
"(read-number i_52)"
"(read-number i_52)"
"(read-number i_52)"
"(search-directory i_52(read-number i_52) bstr_54)))))))))))))"
"(define-values"
"(encode-symbols)"
"(lambda(expected-mod_57)"
"(if(symbol? expected-mod_57)"
"      (let-values () #\"\")"
"(let-values()"
"(apply"
" bytes-append"
"(alt-reverse"
"(let-values(((lst_58)(cdr expected-mod_57)))"
"(begin"
"(if(list? lst_58)(void)(let-values()(in-list lst_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(fold-var_60 lst_61)"
"(if(pair? lst_61)"
"(let-values(((s_62)(unsafe-car lst_61)))"
"(let-values(((fold-var_63)"
"(let-values()"
"(let-values(((fold-var_65)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((bstr_66)"
"(string->bytes/utf-8"
"(symbol->string s_62))))"
"(let-values(((len_67)"
"(bytes-length bstr_66)))"
"(if(< len_67 255)"
"(let-values()"
"(bytes-append(bytes len_67) bstr_66))"
"(let-values()"
"(bytes-append"
" 255"
"(integer->integer-bytes"
" len_67"
" 4"
" #f"
" #f)"
" bstr_66))))))"
" fold-var_64))))"
"(values fold-var_65)))))"
"(for-loop_59 fold-var_63(unsafe-cdr lst_61))))"
" fold-var_60))))"
" for-loop_59)"
" null"
" lst_58)))))))))"
"(define-values"
"(with-module-reading-parameterization+delay-source)"
"(lambda(path_68 thunk_69)"
"(if(load-on-demand-enabled)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-on-demand-source"
"(path->complete-path path_68))"
"(let-values()(with-module-reading-parameterization thunk_69)))"
"(with-module-reading-parameterization thunk_69))))"
"(define-values"
"(call-with-input-module-file)"
"(lambda(path_70 proc_71)"
"(let-values(((i_72) #f))"
"(dynamic-wind"
"(lambda()(set! i_72(let-values(((temp4_75) #t))(open-input-file6.1 temp4_75 #t #f #f path3_74))))"
"(lambda()(proc_71 i_72))"
"(lambda()(close-input-port i_72))))))"
"(void)"
"(void)"
"(define-values(dll-suffix)(system-type 'so-suffix))"
"(define-values"
"(default-load/use-compiled)"
"(let-values(((resolve_1)"
"(lambda(s_2)"
"(if(complete-path? s_2)"
" s_2"
"(let-values(((d_3)(current-load-relative-directory)))"
"(if d_3(path->complete-path s_2 d_3) s_2))))))"
"(let-values(((date-of-1_4)"
"(lambda(a_5)"
"(let-values(((v_6)(file-or-directory-modify-seconds a_5 #f(lambda() #f))))"
"(if v_6(cons a_5 v_6) #f)))))"
"(let-values(((date-of_7)"
"(lambda(a_8 modes_9 roots_10)"
"(ormap2"
"(lambda(root-dir_11)"
"(ormap2"
"(lambda(compiled-dir_12)"
"(let-values(((a_13)(a_8 root-dir_11 compiled-dir_12)))(date-of-1_4 a_13)))"
" modes_9))"
" roots_10))))"
"(let-values(((date>=?_14)"
"(lambda(modes_15 roots_16 a_17 bm_18)"
"(if a_17"
"(let-values(((am_19)(date-of_7 a_17 modes_15 roots_16)))"
"(let-values(((or-part_20)(if(not bm_18) am_19 #f)))"
"(if or-part_20"
" or-part_20"
"(if am_19(if bm_18(if(>=(cdr am_19)(cdr bm_18)) am_19 #f) #f) #f))))"
" #f))))"
"(let-values(((with-dir*_21)"
"(lambda(base_22 t_23)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-load-relative-directory"
"(if(path? base_22) base_22(current-directory)))"
"(let-values()(t_23))))))"
"(lambda(path_24 expect-module_25)"
"(let-values((()"
"(begin"
"(if(path-string? path_24)"
"(void)"
"                                (let-values () (raise-argument-error 'load/use-compiled \"path-string?\" path_24)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_29)(not expect-module_25)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)(symbol? expect-module_25)))"
"(if or-part_30"
" or-part_30"
"(if(list? expect-module_25)"
"(if(>(length expect-module_25) 1)"
"(if(let-values(((or-part_31)(symbol?(car expect-module_25))))"
"(if or-part_31 or-part_31(not(car expect-module_25))))"
"(andmap2 symbol?(cdr expect-module_25))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'load/use-compiled"
"                                     \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" path_24)))"
"(values))))"
"(let-values(((name_26)(if expect-module_25(1/current-module-declare-name) #f)))"
"(let-values(((ns-hts_27)"
"(if name_26"
"(hash-ref"
" -module-hash-table-table"
"(1/namespace-module-registry(1/current-namespace))"
" #f)"
" #f)))"
"(let-values(((use-path/src_28)(if ns-hts_27(hash-ref(cdr ns-hts_27) name_26 #f) #f)))"
"(if use-path/src_28"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-module-declare-source"
"(cadr use-path/src_28))"
"(let-values()"
"(with-dir*_21"
"(caddr use-path/src_28)"
"(lambda()((current-load)(car use-path/src_28) expect-module_25)))))"
"(let-values(((orig-path_32)(resolve_1 path_24)))"
"(let-values(((base_33 orig-file_34 dir?_35)(split-path path_24)))"
"(let-values(((file_36 alt-file_37)"
"(if expect-module_25"
"(let-values(((b_38)(path->bytes orig-file_34)))"
"(let-values(((len_39)(bytes-length b_38)))"
"(if(if(>= len_39 4)"
"                                                        (bytes=? #\".rkt\" (subbytes b_38 (- len_39 4)))"
" #f)"
"(let-values()"
"(values"
" orig-file_34"
"(bytes->path"
"                                                        (bytes-append (subbytes b_38 0 (- len_39 4)) #\".ss\"))))"
"(let-values()(values orig-file_34 #f)))))"
"(values orig-file_34 #f))))"
"(let-values(((path_40)"
"(if(eq? file_36 orig-file_34)"
" orig-path_32"
"(build-path base_33 file_36))))"
"(let-values(((alt-path_41)"
"(if alt-file_37"
"(if(eq? alt-file_37 orig-file_34)"
" orig-path_32"
"(build-path base_33 alt-file_37))"
" #f)))"
"(let-values(((base_42)(if(eq? base_33 'relative) 'same base_33)))"
"(let-values(((modes_43)(use-compiled-file-paths)))"
"(let-values(((roots_44)(current-compiled-file-roots)))"
"(let-values(((reroot_45)"
"(lambda(p_46 d_47)"
"(if(eq? d_47 'same)"
"(let-values() p_46)"
"(if(relative-path? d_47)"
"(let-values()(build-path p_46 d_47))"
"(let-values()(reroot-path p_46 d_47)))))))"
"(let-values(((main-path-d_48)(date-of-1_4 path_40)))"
"(let-values(((alt-path-d_49)"
"(if alt-path_41"
"(if(not main-path-d_48)(date-of-1_4 alt-path_41) #f)"
" #f)))"
"(let-values(((path-d_50)"
"(let-values()(if or-part_51 or-part_51 alt-path-d_49))))"
"(let-values(((get-so_52)"
"(lambda(file_53 rep-sfx?_54)"
"(lambda(root-dir_55 compiled-dir_56)"
"(build-path"
"(reroot_45 base_42 root-dir_55)"
" compiled-dir_56"
"                                                                     \"native\""
"(system-library-subpath)"
"(if rep-sfx?_54"
"(path-add-extension file_53 dll-suffix)"
" file_53))))))"
"(let-values(((zo_57)"
"(lambda(root-dir_58 compiled-dir_59)"
"(build-path"
"(reroot_45 base_42 root-dir_58)"
" compiled-dir_59"
"                                                                     (path-add-extension file_36 #\".zo\")))))"
"(let-values(((alt-zo_60)"
"(lambda(root-dir_61 compiled-dir_62)"
"(build-path"
"(reroot_45 base_42 root-dir_61)"
" compiled-dir_62"
"                                                                       (path-add-extension alt-file_37 #\".zo\")))))"
"(let-values(((so_63)(get-so_52 file_36 #t)))"
"(let-values(((alt-so_64)(get-so_52 alt-file_37 #t)))"
"(let-values(((try-main?_65)"
"(let-values()"
"(if or-part_66"
" or-part_66"
"(not alt-path-d_49)))))"
"(let-values(((try-alt?_67)"
"(if alt-file_37"
"(let-values()"
"(if or-part_68"
" or-part_68"
"(not main-path-d_48)))"
" #f)))"
"(let-values(((with-dir_69)"
"(lambda(t_70)"
"(with-dir*_21 base_42 t_70))))"
"(let-values(((c1_71)"
"(if try-main?_65"
"(date>=?_14"
" modes_43"
" roots_44"
" so_63"
" path-d_50)"
" #f)))"
"(if c1_71"
"((lambda(so-d_72)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load-extension)"
"(car so-d_72)"
" expect-module_25))))))"
" c1_71)"
"(let-values(((c2_73)"
"(if try-alt?_67"
"(date>=?_14"
" modes_43"
" roots_44"
" alt-so_64"
" alt-path-d_49)"
" #f)))"
"(if c2_73"
"((lambda(so-d_74)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_41)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load-extension)"
"(car so-d_74)"
" expect-module_25))))))"
" c2_73)"
"(let-values(((c3_75)"
"(if try-main?_65"
"(date>=?_14"
" modes_43"
" roots_44"
" zo_57"
" path-d_50)"
" #f)))"
"(if c3_75"
"((lambda(zo-d_76)"
"(begin"
"(register-zo-path"
" name_26"
" ns-hts_27"
"(car zo-d_76)"
" #f"
" base_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
"(car zo-d_76)"
" expect-module_25)))))))"
" c3_75)"
"(let-values(((c4_77)"
"(if try-alt?_67"
"(date>=?_14"
" modes_43"
" roots_44"
" alt-zo_60"
" path-d_50)"
" #f)))"
"(if c4_77"
"((lambda(zo-d_78)"
"(begin"
"(register-zo-path"
" name_26"
" ns-hts_27"
"(car zo-d_78)"
" alt-path_41"
" base_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_41)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
"(car zo-d_78)"
" expect-module_25)))))))"
" c4_77)"
"(if(let-values(((or-part_79)"
"(not"
"(pair?"
" expect-module_25))))"
"(if or-part_79"
" or-part_79"
"(car expect-module_25)))"
"(let-values()"
"(let-values(((p_80)"
"(if try-main?_65"
" path_40"
" alt-path_41)))"
"(if(if(pair? expect-module_25)"
"(not(file-exists? p_80))"
" #f)"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
"(if expect-module_25"
"(if(not try-main?_65)"
" p_80"
" #f)"
" #f))"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
" p_80"
" expect-module_25)))))))))"
"(void)))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(register-zo-path)"
"(lambda(name_81 ns-hts_82 path_83 src-path_84 base_85)"
"(if ns-hts_82(let-values()(hash-set!(cdr ns-hts_82) name_81(list path_83 src-path_84 base_85)))(void))))"
"(define-values(default-reader-guard)(lambda(path_86) path_86))"
"(define-values(-module-hash-table-table)(make-weak-hasheq))"
"(define-values(CACHE-N) 512)"
"(define-values(-path-cache)(make-vector CACHE-N #f))"
"(define-values"
"(path-cache-get)"
"(lambda(p_87)"
"(let-values(((i_88)(modulo(abs(equal-hash-code p_87)) CACHE-N)))"
"(let-values(((w_89)(vector-ref -path-cache i_88)))"
"(let-values(((l_90)(if w_89(weak-box-value w_89) #f)))"
"(if l_90(let-values(((a_91)(1/assoc p_87 l_90)))(if a_91(cdr a_91) #f)) #f))))))"
"(define-values"
"(path-cache-set!)"
"(lambda(p_92 v_93)"
"(let-values(((i_94)(modulo(abs(equal-hash-code p_92)) CACHE-N)))"
"(let-values(((w_95)(vector-ref -path-cache i_94)))"
"(let-values(((l_96)(if w_95(weak-box-value w_95) #f)))"
"(vector-set!"
" -path-cache"
" i_94"
"(make-weak-box(cons(cons p_92 v_93)(let-values()(if or-part_97 or-part_97 null))))))))))"
"(define-values(-loading-filename)(gensym))"
"(define-values(-loading-prompt-tag)(make-continuation-prompt-tag 'module-loading))"
"(define-values(-prev-relto) #f)"
"(define-values(-prev-relto-dir) #f)"
"(define-values"
"(split-relative-string)"
"(lambda(s_98 coll-mode?_99)"
"(let-values(((l_100)"
"((letrec-values(((loop_101)"
"(lambda(s_102)"
"(let-values(((len_103)(string-length s_102)))"
"((letrec-values(((iloop_104)"
"(lambda(i_105)"
"(if(= i_105 len_103)"
"(let-values()(list s_102))"
"(if(char=? '#\\/(string-ref s_102 i_105))"
"(let-values()"
"(cons"
"(substring s_102 0 i_105)"
"(loop_101(substring s_102(add1 i_105)))))"
"(let-values()(iloop_104(add1 i_105))))))))"
" iloop_104)"
" 0)))))"
" loop_101)"
" s_98)))"
"(if coll-mode?_99"
" l_100"
"((letrec-values(((loop_106)"
"(lambda(l_107)"
"(if(null?(cdr l_107))"
"(values null(car l_107))"
"(let-values(((c_108 f_109)(loop_106(cdr l_107))))"
"(values(cons(car l_107) c_108) f_109))))))"
" loop_106)"
" l_100)))))"
"(define-values"
"(format-source-location)"
"(lambda(stx_110)"
"(srcloc->string"
"(srcloc"
"(1/syntax-source stx_110)"
"(1/syntax-line stx_110)"
"(1/syntax-column stx_110)"
"(1/syntax-position stx_110)"
"(1/syntax-span stx_110)))))"
"(define-values(orig-paramz) #f)"
"(define-values"
"(standard-module-name-resolver)"
"(let-values()"
"(let-values(((planet-resolver_111) #f))"
"(let-values(((prep-planet-resolver!_112)"
"(lambda()"
"(if planet-resolver_111"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
" orig-paramz"
"(set! planet-resolver_111"
"                             (1/dynamic-require '(lib \"planet/resolver.rkt\") 'planet-module-name-resolver))))))))"
"(letrec-values(((standard-module-name-resolver_113)"
"(case-lambda"
"((s_114 from-namespace_115)"
"(begin"
"(if(1/resolved-module-path? s_114)"
"(void)"
"(let-values()"
"                                 (raise-argument-error 'standard-module-name-resolver \"resolved-module-path?\" s_114)))"
"(if(let-values(((or-part_116)(not from-namespace_115)))"
"(if or-part_116 or-part_116(1/namespace? from-namespace_115)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                  \"(or/c #f namespace?)\""
" from-namespace_115)))"
"(if planet-resolver_111(let-values()(planet-resolver_111 s_114))(void))"
"(let-values(((hts_117)"
"(let-values(((or-part_118)"
"(hash-ref"
" -module-hash-table-table"
"(1/namespace-module-registry(1/current-namespace))"
" #f)))"
"(if or-part_118"
" or-part_118"
"(let-values(((hts_119)(cons(make-hasheq)(make-hasheq))))"
"(begin"
"(hash-set!"
" -module-hash-table-table"
"(1/namespace-module-registry(1/current-namespace))"
" hts_119)"
" hts_119))))))"
"(begin"
"(hash-set!(car hts_117) s_114 'declared)"
"(if from-namespace_115"
"(let-values()"
"(let-values(((root-name_120)"
"(if(pair?(1/resolved-module-path-name s_114))"
"(1/make-resolved-module-path"
"(car(1/resolved-module-path-name s_114)))"
" s_114))"
"((from-hts_121)"
"(hash-ref"
" -module-hash-table-table"
"(1/namespace-module-registry from-namespace_115)"
" #f)))"
"(if from-hts_121"
"(let-values()"
"(let-values(((use-path/src_122)"
"(hash-ref(cdr from-hts_121) root-name_120 #f)))"
"(if use-path/src_122"
"(let-values()(hash-set!(cdr hts_117) root-name_120 use-path/src_122))"
"(void))))"
"(void))))"
"(void))))))"
"((s_123 relto_124 stx_125)"
"(begin"
"(log-message"
"(current-logger)"
" 'error"
"                              \"default module name resolver called with three arguments (deprecated)\""
" #f)"
"(standard-module-name-resolver_113 s_123 relto_124 stx_125 #t)))"
"((s_126 relto_127 stx_128 load?_129)"
"(let-values((()"
"(begin"
"(if(1/module-path? s_126)"
"(void)"
"(let-values()"
"(if(syntax?$1 stx_128)"
"                                                 (raise-syntax-error$1 #f \"bad module path\" stx_128)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"module-path?\""
" s_126))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_131)(not relto_127)))"
"(if or-part_131 or-part_131(1/resolved-module-path? relto_127)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"(or/c #f resolved-module-path?)\""
" relto_127)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_132)(not stx_128)))"
"(if or-part_132 or-part_132(syntax?$1 stx_128)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                    \"(or/c #f syntax?)\""
" stx_128)))"
"(values))))"
"(let-values(((flatten-sub-path_130)"
"(lambda(base_133 orig-l_134)"
"((letrec-values(((loop_135)"
"(lambda(a_136 l_137)"
"(if(null? l_137)"
"(let-values()"
"(if(null? a_136)"
" base_133"
"(cons base_133(alt-reverse a_136))))"
"                                                                       (if (equal? (car l_137) \"..\")"
"(let-values()"
"(if(null? a_136)"
"(error"
" 'standard-module-name-resolver"
"                                                                              \"too many \\\"..\\\"s in submodule path: ~.s\""
"(list*"
" 'submod"
"                                                                               (if (equal? base_133 \".\")"
" base_133"
"(if(path? base_133)"
" base_133"
"(list"
"(if(symbol? base_133) 'quote 'file)"
" base_133)))"
" orig-l_134))"
"(loop_135(cdr a_136)(cdr l_137))))"
"(let-values()"
"(loop_135"
"(cons(car l_137) a_136)"
"(cdr l_137))))))))"
" loop_135)"
" null"
" orig-l_134))))"
"(if(if(pair? s_126)(eq?(car s_126) 'quote) #f)"
"(let-values()(1/make-resolved-module-path(cadr s_126)))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"(if(pair?(cadr s_126))(eq?(caadr s_126) 'quote) #f)"
" #f)"
" #f)"
"(let-values()"
"(1/make-resolved-module-path"
"(flatten-sub-path_130(cadadr s_126)(cddr s_126))))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"                                               (if (let-values (((or-part_138) (equal? (cadr s_126) \".\")))"
"                                                     (if or-part_138 or-part_138 (equal? (cadr s_126) \"..\")))"
"(if relto_127"
"(let-values(((p_139)(1/resolved-module-path-name relto_127)))"
"(let-values(((or-part_140)(symbol? p_139)))"
"(if or-part_140"
" or-part_140"
"(if(pair? p_139)(symbol?(car p_139)) #f))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((rp_141)(1/resolved-module-path-name relto_127)))"
"(1/make-resolved-module-path"
"(flatten-sub-path_130"
"(if(pair? rp_141)(car rp_141) rp_141)"
"(let-values(((r_142)"
"                                                             (if (equal? (cadr s_126) \"..\") (cdr s_126) (cddr s_126))))"
"(if(pair? rp_141)(append(cdr rp_141) r_142) r_142))))))"
"(if(if(pair? s_126)(eq?(car s_126) 'planet) #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_112)"
"(planet-resolver_111 s_126 relto_127 stx_128 load?_129 #f orig-paramz)))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"(if(pair?(cadr s_126))(eq?(caadr s_126) 'planet) #f)"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_112)"
"(planet-resolver_111"
"(cadr s_126)"
" relto_127"
" stx_128"
" load?_129"
"(cddr s_126)"
" orig-paramz)))"
"(let-values()"
"(let-values(((get-dir_143)"
"(lambda()"
"(let-values(((or-part_150)"
"(if relto_127"
"(if(eq? relto_127 -prev-relto)"
" -prev-relto-dir"
"(let-values(((p_151)"
"(1/resolved-module-path-name"
" relto_127)))"
"(let-values(((p_152)"
"(if(pair? p_151)"
"(car p_151)"
" p_151)))"
"(if(path? p_152)"
"(let-values(((base_153"
" n_154"
" d?_155)"
"(split-path"
" p_152)))"
"(begin"
"(set! -prev-relto relto_127)"
"(set! -prev-relto-dir"
" base_153)"
" base_153))"
" #f))))"
" #f)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_156)"
"(current-load-relative-directory)))"
"(if or-part_156"
" or-part_156"
"(current-directory)))))))"
"((get-reg_144)"
"(lambda()"
"(1/namespace-module-registry(1/current-namespace))))"
"((show-collection-err_145)"
"(lambda(msg_157)"
"(let-values(((msg_158)"
"(string-append"
"(let-values(((or-part_159)"
"(if stx_128"
"(if(error-print-source-location)"
"(format-source-location"
" stx_128)"
" #f)"
" #f)))"
"(if or-part_159"
" or-part_159"
"                                                                                  \"standard-module-name-resolver\"))"
"                                                                              \": \""
"(regexp-replace"
"                                                                               '#rx\"\\n\""
" msg_157"
"(format"
"                                                                                \"\\n  for module path: ~s\\n\""
" s_126)))))"
"(raise"
"(if stx_128"
"(1/make-exn:fail:syntax:missing-module"
" msg_158"
"(current-continuation-marks)"
"(list stx_128)"
" s_126)"
"(1/make-exn:fail:filesystem:missing-module"
" msg_158"
"(current-continuation-marks)"
" s_126))))))"
"((ss->rkt_146)"
"(lambda(s_160)"
"(let-values(((len_161)(string-length s_160)))"
"(if(if(>= len_161 3)"
"(if(equal?"
" '#\\."
"(string-ref s_160(- len_161 3)))"
"(if(equal?"
" '#\\s"
"(string-ref s_160(- len_161 2)))"
"(equal?"
" '#\\s"
"(string-ref s_160(- len_161 1)))"
" #f)"
" #f)"
" #f)"
"(string-append"
"(substring s_160 0(- len_161 3))"
"                                                                    \".rkt\")"
" s_160))))"
"((path-ss->rkt_147)"
"(lambda(p_162)"
"(let-values(((base_163 name_164 dir?_165)"
"(split-path p_162)))"
"                                                                 (if (regexp-match '#rx\"[.]ss$\" (path->bytes name_164))"
"                                                                   (path-replace-extension p_162 #\".rkt\")"
" p_162))))"
"((s_148)"
"(if(if(pair? s_126)(eq? 'submod(car s_126)) #f)"
"(let-values(((v_166)(cadr s_126)))"
"                                                                 (if (let-values (((or-part_167) (equal? v_166 \".\")))"
"                                                                       (if or-part_167 or-part_167 (equal? v_166 \"..\")))"
"(if relto_127"
"(let-values(((p_168)"
"(1/resolved-module-path-name"
" relto_127)))"
"(if(pair? p_168)(car p_168) p_168))"
"(error"
" 'standard-module-name-resolver"
"                                                                      \"no base path for relative submodule path: ~.s\""
" s_126))"
" v_166))"
" s_126))"
"((subm-path_149)"
"(if(if(pair? s_126)(eq? 'submod(car s_126)) #f)"
"(let-values(((p_169)"
"(if(if(let-values(((or-part_170)"
"(equal?"
"(cadr s_126)"
"                                                                                                    \".\")))"
"(if or-part_170"
" or-part_170"
"                                                                                         (equal? (cadr s_126) \"..\")))"
" relto_127"
" #f)"
"(let-values(((p_171)"
"(1/resolved-module-path-name"
" relto_127))"
"((r_172)"
"(if(equal?"
"(cadr s_126)"
"                                                                                                  \"..\")"
"(cdr s_126)"
"(cddr s_126))))"
"(if(pair? p_171)"
"(flatten-sub-path_130"
"(car p_171)"
"(append(cdr p_171) r_172))"
"(flatten-sub-path_130 p_171 r_172)))"
"(flatten-sub-path_130"
"                                                                                \".\""
"                                                                                (if (equal? (cadr s_126) \"..\")"
"(cdr s_126)"
"(cddr s_126))))))"
"(if(pair? p_169)(cdr p_169) #f))"
" #f)))"
"(let-values(((s-parsed_173)"
"(if(symbol? s_148)"
"(let-values()"
"(let-values(((or-part_174)"
"(path-cache-get"
"(cons s_148(get-reg_144)))))"
"(if or-part_174"
" or-part_174"
"(let-values(((cols_175 file_176)"
"(split-relative-string"
"(symbol->string s_148)"
" #f)))"
"(let-values(((f-file_177)"
"(if(null? cols_175)"
"                                                                                         \"main.rkt\""
"(string-append"
" file_176"
"                                                                                          \".rkt\"))))"
"(find-col-file"
" show-collection-err_145"
"(if(null? cols_175)"
" file_176"
"(car cols_175))"
"(if(null? cols_175) null(cdr cols_175))"
" f-file_177"
" #t))))))"
"(if(string? s_148)"
"(let-values()"
"(let-values(((dir_178)(get-dir_143)))"
"(let-values(((or-part_179)"
"(path-cache-get"
"(cons s_148 dir_178))))"
"(if or-part_179"
" or-part_179"
"(let-values(((cols_180 file_181)"
"(split-relative-string"
" s_148"
" #f)))"
"(if(null? cols_180)"
"(build-path"
" dir_178"
"(ss->rkt_146 file_181))"
"(apply"
" build-path"
" dir_178"
"(append"
"(map2"
"(lambda(s_182)"
"                                                                                    (if (string=? s_182 \".\")"
"(let-values() 'same)"
"                                                                                      (if (string=? s_182 \"..\")"
"(let-values() 'up)"
"(let-values() s_182))))"
" cols_180)"
"(list(ss->rkt_146 file_181))))))))))"
"(if(path? s_148)"
"(let-values()"
"(path-ss->rkt_147"
"(simplify-path"
"(if(complete-path? s_148)"
" s_148"
"(path->complete-path s_148(get-dir_143))))))"
"(if(eq?(car s_148) 'lib)"
"(let-values()"
"(let-values(((or-part_183)"
"(path-cache-get"
"(cons s_148(get-reg_144)))))"
"(if or-part_183"
" or-part_183"
"(let-values(((cols_184 file_185)"
"(split-relative-string"
"(cadr s_148)"
" #f)))"
"(let-values(((old-style?_186)"
"(if(null?(cddr s_148))"
"(if(null? cols_184)"
"(regexp-match?"
"                                                                                                  '#rx\"[.]\""
" file_185)"
" #f)"
" #t)))"
"(let-values(((f-file_187)"
"(if old-style?_186"
"(ss->rkt_146 file_185)"
"(if(null? cols_184)"
"                                                                                                   \"main.rkt\""
"(if(regexp-match?"
"                                                                                                        '#rx\"[.]\""
" file_185)"
"(ss->rkt_146"
" file_185)"
"(string-append"
" file_185"
"                                                                                                      \".rkt\"))))))"
"(let-values(((cols_188)"
"(if old-style?_186"
"(append"
"(if(null?"
"(cddr s_148))"
"                                                                                                      '(\"mzlib\")"
"(apply"
" append"
"(map2"
"(lambda(p_189)"
"(split-relative-string"
" p_189"
" #t))"
"(cddr s_148))))"
" cols_184)"
"(if(null? cols_184)"
"(list file_185)"
" cols_184))))"
"(find-col-file"
" show-collection-err_145"
"(car cols_188)"
"(cdr cols_188)"
" f-file_187"
" #t))))))))"
"(if(eq?(car s_148) 'file)"
"(let-values()"
"(path-ss->rkt_147"
"(simplify-path"
"(path->complete-path"
"(expand-user-path(cadr s_148))"
"(get-dir_143)))))"
"(void))))))))"
"(begin"
"(if(let-values(((or-part_190)(path? s-parsed_173)))"
"(if or-part_190 or-part_190(vector? s-parsed_173)))"
"(void)"
"(let-values()"
"(if stx_128"
"(raise-syntax-error$1"
" 'require"
"(format"
"                                                             \"bad module path~a\""
"                                                             (if s-parsed_173 (car s-parsed_173) \"\"))"
" stx_128)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                            \"module-path?\""
" s_148))))"
"(let-values(((filename_191)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 0)"
"(simplify-path(cleanse-path s-parsed_173) #f))))"
"(let-values(((normal-filename_192)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 1)"
"(normal-case-path filename_191))))"
"(let-values(((base_193 name_194 dir?_195)"
"(if(vector? s-parsed_173)"
"(values"
" 'ignored"
"(vector-ref s-parsed_173 2)"
" 'ignored)"
"(split-path filename_191))))"
"(let-values(((no-sfx_196)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 3)"
"                                                                           (path-replace-extension name_194 #\"\"))))"
"(let-values(((root-modname_197)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 4)"
"(1/make-resolved-module-path"
" filename_191))))"
"(let-values(((hts_198)"
"(let-values(((or-part_199)"
"(hash-ref"
" -module-hash-table-table"
"(get-reg_144)"
" #f)))"
"(if or-part_199"
" or-part_199"
"(let-values(((hts_200)"
"(cons"
"(make-hasheq)"
"(make-hasheq))))"
"(begin"
"(hash-set!"
" -module-hash-table-table"
"(get-reg_144)"
" hts_200)"
" hts_200))))))"
"(let-values(((modname_201)"
"(if subm-path_149"
"(1/make-resolved-module-path"
"(cons"
"(1/resolved-module-path-name"
" root-modname_197)"
" subm-path_149))"
" root-modname_197)))"
"(begin"
"(if load?_129"
"(let-values()"
"(let-values(((got_202)"
"(hash-ref"
"(car hts_198)"
" modname_201"
" #f)))"
"(if got_202"
"(void)"
"(let-values()"
"(let-values(((loading_203)"
"(let-values(((tag_205)"
"(if(continuation-prompt-available?"
" -loading-prompt-tag)"
" -loading-prompt-tag"
"(default-continuation-prompt-tag))))"
"(continuation-mark-set-first"
" #f"
" -loading-filename"
" null"
" tag_205)))"
"((nsr_204)(get-reg_144)))"
"(begin"
"(for-each2"
"(lambda(s_206)"
"(if(if(equal?"
"(cdr s_206)"
" normal-filename_192)"
"(eq?(car s_206) nsr_204)"
" #f)"
"(let-values()"
"(error"
" 'standard-module-name-resolver"
"                                                                                           \"cycle in loading\\n  at path: ~a\\n  paths:~a\""
" filename_191"
"(apply"
" string-append"
"((letrec-values(((loop_207)"
"(lambda(l_208)"
"(if(null?"
" l_208)"
" '()"
"(list*"
"                                                                                                                   \"\\n   \""
"(path->string"
"(cdar"
" l_208))"
"(loop_207"
"(cdr"
" l_208)))))))"
" loop_207)"
"(alt-reverse"
" loading_203)))))"
"(void)))"
" loading_203)"
"((if(continuation-prompt-available?"
" -loading-prompt-tag)"
"(lambda(f_209)(f_209))"
"(lambda(f_210)"
"(call-with-continuation-prompt"
" f_210"
" -loading-prompt-tag)))"
"(lambda()"
"(with-continuation-mark"
" -loading-filename"
"(cons"
"(cons"
" nsr_204"
" normal-filename_192)"
" loading_203)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-name"
" root-modname_197"
" 1/current-module-path-for-load"
"((if stx_128"
"(lambda(p_211)"
"(1/datum->syntax"
" #f"
" p_211"
" stx_128))"
" values)"
"(if(symbol? s_148)"
"(let-values() s_148)"
"(if(if(pair? s_148)"
"(eq?(car s_148) 'lib)"
" #f)"
"(let-values() s_148)"
"(let-values()"
"(if(1/resolved-module-path?"
" root-modname_197)"
"(let-values(((src_212)"
"(1/resolved-module-path-name"
" root-modname_197)))"
"(if(symbol?"
" src_212)"
"(list"
" 'quote"
" src_212)"
" src_212))"
" root-modname_197))))))"
"(let-values()"
"((current-load/use-compiled)"
" filename_191"
"(let-values(((sym_213)"
"(string->symbol"
"(path->string"
" no-sfx_196))))"
"(if subm-path_149"
"(if(hash-ref"
"(car hts_198)"
" root-modname_197"
" #f)"
"(cons #f subm-path_149)"
"(cons"
" sym_213"
" subm-path_149))"
" sym_213))))))))))))))"
"(void))"
"(if(if(not(vector? s-parsed_173))"
"(if load?_129"
"(let-values(((or-part_214)"
"(string? s_148)))"
"(if or-part_214"
" or-part_214"
"(let-values(((or-part_215)"
"(symbol? s_148)))"
"(if or-part_215"
" or-part_215"
"(if(pair? s_148)"
"(eq?(car s_148) 'lib)"
" #f)))))"
" #f)"
" #f)"
"(let-values()"
"(path-cache-set!"
"(if(string? s_148)"
"(cons s_148(get-dir_143))"
"(cons s_148(get-reg_144)))"
"(vector"
" filename_191"
" normal-filename_192"
" name_194"
" no-sfx_196"
" root-modname_197)))"
"(void))"
" modname_201)))))))))))))))))))))))))"
" standard-module-name-resolver_113)))))"
"(define-values"
"(default-eval-handler)"
"(lambda(s_216)"
"(1/eval"
" s_216"
"(1/current-namespace)"
"(let-values(((c_217)(current-compile)))"
"(lambda(e_218 ns_219)"
"(if(eq? ns_219(1/current-namespace))"
"(c_217 e_218 #t)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_219)"
"(let-values()(c_217 e_218 #t)))))))))"
"(define-values"
"(default-compile-handler)"
"(lambda(s_220 immediate-eval?_221)(1/compile s_220(1/current-namespace)(not immediate-eval?_221))))"
"(define-values"
"(default-read-interaction)"
"(lambda(src_222 in_223)"
"(begin"
"(if(input-port? in_223)"
"(void)"
"        (let-values () (raise-argument-error 'default-read-interaction \"input-port?\" in_223)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-reader"
" #t"
" read-accept-lang"
" #f)"
"(let-values()(1/read-syntax src_222 in_223))))))"
"(define-values"
"(boot)"
"(lambda()"
"(begin"
"(seal)"
"(1/current-module-name-resolver standard-module-name-resolver)"
"(current-load/use-compiled default-load/use-compiled)"
"(current-reader-guard default-reader-guard)"
"(current-eval default-eval-handler)"
"(current-compile default-compile-handler)"
"(current-load default-load-handler)"
"(current-read-interaction default-read-interaction))))"
"(define-values"
"(seal)"
"(lambda()(set! orig-paramz(reparameterize(continuation-mark-set-first #f parameterization-key)))))"
"(void)"
"(void)"
"(define-values"
"(dynamic-require-reader)"
"(let-values(((dynamic-require-reader5_1)"
"(lambda(mod-path3_2 sym4_3 fail-thunk1_4 fail-thunk2_5)"
"(let-values()"
"(let-values()"
"(let-values(((fail-thunk_8)(if fail-thunk2_5 fail-thunk1_4 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(let-values(((root-ns_9)(namespace-root-namespace(1/current-namespace))))"
"(let-values(((proc_10)"
"(if root-ns_9"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" root-ns_9)"
"(let-values()(1/dynamic-require mod-path_6 sym_7 fail-thunk_8)))"
"(1/dynamic-require mod-path_6 sym_7 fail-thunk_8))))"
"(if(if(eq? sym_7 'read-syntax)"
"(if(procedure? proc_10)(procedure-arity-includes? proc_10 6) #f)"
" #f)"
"(let-values()"
"(lambda(name_11 input_12 mod-s_13 line_14 column_15 position_16)"
"(proc_10"
" name_11"
" input_12"
"(reader-syntax->syntax mod-s_13)"
" line_14"
" column_15"
" position_16)))"
"(let-values() proc_10)))))))))))"
"(case-lambda"
"((mod-path_17 sym_18)(dynamic-require-reader5_1 mod-path_17 sym_18 #f #f))"
"((mod-path_19 sym_20 fail-thunk1_21)(dynamic-require-reader5_1 mod-path_19 sym_20 fail-thunk1_21 #t)))))"
"(void)"
"(void)"
"(define-values"
"(expand-body7.1)"
"(lambda(source1_22 stratified?2_23 stratified?4_24 bodys5_25 ctx6_26)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((stratified?_30)(if stratified?4_24 stratified?2_23 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_39)(expand-context-observer ctx_28)))"
"(if obs_39"
"(let-values()(let-values()(call-expand-observe obs_39 'enter-block)))"
"(void)))"
"(values))))"
"(let-values(((inside-sc_31)(new-scope 'intdef)))"
"(let-values(((init-bodys_32)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_40)(void)(let-values()(in-list lst_40)))"
"((letrec-values(((for-loop_41)"
"(lambda(fold-var_42 lst_43)"
"(if(pair? lst_43)"
"(let-values(((body_44)(unsafe-car lst_43)))"
"(let-values(((fold-var_45)"
"(let-values()"
"(let-values(((fold-var_47)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_44"
" inside-sc_31))"
" fold-var_46))))"
"(values fold-var_47)))))"
"(for-loop_41 fold-var_45(unsafe-cdr lst_43))))"
" fold-var_42))))"
" for-loop_41)"
" null"
" lst_40))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_48)(expand-context-observer ctx_28)))"
"(if obs_48"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_48"
" 'block-renames"
"(datum->syntax$1 #f init-bodys_32)"
"(datum->syntax$1 #f bodys_27))))"
"(void)))"
"(values))))"
"(let-values(((phase_33)(expand-context-phase ctx_28)))"
"(let-values(((frame-id_34)(make-reference-record)))"
"(let-values(((def-ctx-scopes_35)(box null)))"
"(let-values(((body-ctx_36)"
"(let-values()"
"(if(expand-context? the-struct_49)"
"(let-values(((context48_50)(list(make-liberal-define-context)))"
"((name49_51) #f)"
"((only-immediate?50_52) #t)"
"((scopes54_56)"
"(cons inside-sc_31(expand-context-scopes ctx_28)))"
"((use-site-scopes55_57)(box null))"
"((reference-records57_59)"
"(cons"
" frame-id_34"
"(expand-context-reference-records ctx_28))))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_49)"
" post-expansion-scope52_54"
"(root-expand-context-top-level-bind-scope the-struct_49)"
"(root-expand-context-all-scopes-stx the-struct_49)"
" use-site-scopes55_57"
"(root-expand-context-defined-syms the-struct_49)"
" frame-id56_58"
"(root-expand-context-counter the-struct_49)"
"(root-expand-context-lift-key the-struct_49)"
"(expand-context-to-parsed? the-struct_49)"
" context48_50"
"(expand-context-phase the-struct_49)"
"(expand-context-namespace the-struct_49)"
"(expand-context-env the-struct_49)"
"(expand-context-user-env the-struct_49)"
" post-expansion-scope-action53_55"
" scopes54_56"
" def-ctx-scopes51_53"
"(expand-context-binding-layer the-struct_49)"
" reference-records57_59"
" only-immediate?50_52"
"(expand-context-just-once? the-struct_49)"
"(expand-context-module-begin-k the-struct_49)"
"(expand-context-need-eventually-defined the-struct_49)"
"(expand-context-allow-unbound? the-struct_49)"
"(expand-context-in-local-expand? the-struct_49)"
"(expand-context-stops the-struct_49)"
"(expand-context-current-introduction-scopes the-struct_49)"
"(expand-context-declared-submodule-names the-struct_49)"
"(expand-context-lifts the-struct_49)"
"(expand-context-lift-envs the-struct_49)"
"(expand-context-module-lifts the-struct_49)"
"(expand-context-require-lifts the-struct_49)"
"(expand-context-to-module-lifts the-struct_49)"
"(expand-context-requires+provides the-struct_49)"
" name49_51"
"(expand-context-observer the-struct_49)))"
"                                              (raise-argument-error 'struct-copy \"expand-context?\" the-struct_49)))))"
"(let-values(((maybe-increment-binding-layer_37)"
"(lambda(ids_60 body-ctx_61)"
"(if(eq?"
"(expand-context-binding-layer body-ctx_61)"
"(expand-context-binding-layer ctx_28))"
"(increment-binding-layer ids_60 body-ctx_61 inside-sc_31)"
"(expand-context-binding-layer body-ctx_61)))))"
"(let-values(((name_38)(expand-context-name ctx_28)))"
"((letrec-values(((loop_62)"
"(lambda(body-ctx_63"
" bodys_64"
" done-bodys_65"
" val-idss_66"
" val-keyss_67"
" val-rhss_68"
" track-stxs_69"
" trans-idss_70"
" dups_71)"
"(if(null? bodys_64)"
"(let-values()"
"(begin"
"(let-values(((obs_72)"
"(expand-context-observer body-ctx_63)))"
"(if obs_72"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_72"
"(if(null? val-idss_66)"
" 'block->list"
" 'block->letrec))))"
"(void)))"
"(let-values(((...nder/expand/body.rkt:83:6_73)"
" finish-expanding-body28.1)"
"((temp61_77)(alt-reverse val-idss_66))"
"((temp62_78)(alt-reverse val-keyss_67))"
"((temp63_79)(alt-reverse val-rhss_68))"
"((temp64_80)(alt-reverse track-stxs_69))"
"((temp65_81)(alt-reverse done-bodys_65))"
"((temp69_85)(alt-reverse trans-idss_70)))"
"(finish-expanding-body26.1"
" temp69_85"
" name68_84"
" s66_82"
" stratified?67_83"
" body-ctx58_74"
" frame-id59_75"
" def-ctx-scopes60_76"
" temp61_77"
" temp62_78"
" temp63_79"
" temp64_80"
" temp65_81))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_88)"
"(expand-context-observer"
" body-ctx_63)))"
"(if obs_88"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_88 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_86)"
"(let-values(((temp70_89)(car bodys_64))"
"((temp71_90)"
"(if(if name_38"
"(null?(cdr bodys_64))"
" #f)"
"(let-values()"
"(if(expand-context?"
" the-struct_91)"
"(let-values()"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_91)"
"(root-expand-context-post-expansion-scope"
" the-struct_91)"
"(root-expand-context-top-level-bind-scope"
" the-struct_91)"
"(root-expand-context-all-scopes-stx"
" the-struct_91)"
"(root-expand-context-use-site-scopes"
" the-struct_91)"
"(root-expand-context-defined-syms"
" the-struct_91)"
"(root-expand-context-frame-id"
" the-struct_91)"
"(root-expand-context-counter"
" the-struct_91)"
"(root-expand-context-lift-key"
" the-struct_91)"
"(expand-context-to-parsed?"
" the-struct_91)"
"(expand-context-context"
" the-struct_91)"
"(expand-context-phase"
" the-struct_91)"
"(expand-context-namespace"
" the-struct_91)"
"(expand-context-env"
" the-struct_91)"
"(expand-context-user-env"
" the-struct_91)"
"(expand-context-post-expansion-scope-action"
" the-struct_91)"
"(expand-context-scopes"
" the-struct_91)"
"(expand-context-def-ctx-scopes"
" the-struct_91)"
"(expand-context-binding-layer"
" the-struct_91)"
"(expand-context-reference-records"
" the-struct_91)"
"(expand-context-only-immediate?"
" the-struct_91)"
"(expand-context-just-once?"
" the-struct_91)"
"(expand-context-module-begin-k"
" the-struct_91)"
"(expand-context-need-eventually-defined"
" the-struct_91)"
"(expand-context-allow-unbound?"
" the-struct_91)"
"(expand-context-in-local-expand?"
" the-struct_91)"
"(expand-context-stops"
" the-struct_91)"
"(expand-context-current-introduction-scopes"
" the-struct_91)"
"(expand-context-declared-submodule-names"
" the-struct_91)"
"(expand-context-lifts"
" the-struct_91)"
"(expand-context-lift-envs"
" the-struct_91)"
"(expand-context-module-lifts"
" the-struct_91)"
"(expand-context-require-lifts"
" the-struct_91)"
"(expand-context-to-module-lifts"
" the-struct_91)"
"(expand-context-requires+provides"
" the-struct_91)"
" name72_92"
"(expand-context-observer"
" the-struct_91)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                               \"expand-context?\""
" the-struct_91)))"
" body-ctx_63)))"
"(expand5.1 #f #f temp70_89 temp71_90))))"
"(let-values(((disarmed-exp-body_87)"
"(syntax-disarm$1 exp-body_86)))"
"(let-values(((tmp_93)"
"(core-form-sym"
" disarmed-exp-body_87"
" phase_33)))"
"(if(equal? tmp_93 'begin)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_109)"
"(expand-context-observer"
" body-ctx_63)))"
"(if obs_109"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_109"
" 'prim-begin)))"
"(void)))"
"(values))))"
"(let-values(((ok?_94 begin73_95 e74_96)"
"(let-values()"
"(let-values()"
"(let-values(((begin73_112"
" e74_113)"
"(let-values(((s_114)"
"(if(syntax?$1"
" s_110)"
"(syntax-e$1"
" s_110)"
" s_110)))"
"(if(pair?"
" s_114)"
"(let-values(((begin75_115)"
"(let-values(((s_117)"
"(car"
" s_114)))"
" s_117))"
"((e76_116)"
"(let-values(((s_118)"
"(cdr"
" s_114)))"
"(let-values(((s_119)"
"(if(syntax?$1"
" s_118)"
"(syntax-e$1"
" s_118)"
" s_118)))"
"(let-values(((flat-s_120)"
"(to-syntax-list.1"
" s_119)))"
"(if(not"
" flat-s_120)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_111))"
"(let-values()"
" flat-s_120)))))))"
"(values"
" begin75_115"
" e76_116))"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_111)))))"
"(values"
" #t"
" begin73_112"
" e74_113))))))"
"(let-values(((track_107)"
"(lambda(e_121)"
"(syntax-track-origin$1"
" e_121"
" exp-body_86))))"
"(let-values(((splice-bodys_108)"
"(append"
"(map2 track_107 e74_96)"
"(cdr bodys_64))))"
"(begin"
"(let-values(((obs_122)"
"(expand-context-observer"
" body-ctx_63)))"
"(if obs_122"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_122"
" 'splice"
" splice-bodys_108)))"
"(void)))"
"(loop_62"
" body-ctx_63"
" splice-bodys_108"
" done-bodys_65"
" val-idss_66"
" val-keyss_67"
" val-rhss_68"
" track-stxs_69"
" trans-idss_70"
" dups_71)))))))"
"(if(equal? tmp_93 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_144)"
"(expand-context-observer"
" body-ctx_63)))"
"(if obs_144"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_144"
" 'prim-define-values)))"
"(void)))"
"(values))))"
"(let-values(((ok?_123"
" define-values77_124"
" id78_125"
" rhs79_126)"
"(let-values()"
"(let-values()"
"(let-values(((define-values77_147"
" id78_148"
" rhs79_149)"
"(let-values(((s_150)"
"(if(syntax?$1"
" s_145)"
"(syntax-e$1"
" s_145)"
" s_145)))"
"(if(pair?"
" s_150)"
"(let-values(((define-values80_151)"
"(let-values(((s_154)"
"(car"
" s_150)))"
" s_154))"
"((id81_152"
" rhs82_153)"
"(let-values(((s_155)"
"(cdr"
" s_150)))"
"(let-values(((s_156)"
"(if(syntax?$1"
" s_155)"
"(syntax-e$1"
" s_155)"
" s_155)))"
"(if(pair?"
" s_156)"
"(let-values(((id83_157)"
"(let-values(((s_159)"
"(car"
" s_156)))"
"(let-values(((s_160)"
"(if(syntax?$1"
" s_159)"
"(syntax-e$1"
" s_159)"
" s_159)))"
"(let-values(((flat-s_161)"
"(to-syntax-list.1"
" s_160)))"
"(if(not"
" flat-s_161)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_146))"
"(let-values()"
"(let-values(((id_162)"
"(let-values()"
"(begin"
"(if(list?"
" lst_163)"
"(void)"
"(let-values()"
"(in-list"
" lst_163)))"
"((letrec-values(((for-loop_164)"
"(lambda(id_165"
" lst_166)"
"(if(pair?"
" lst_166)"
"(let-values(((s_167)"
"(unsafe-car"
" lst_166)))"
"(let-values(((id_168)"
"(let-values()"
"(let-values(((id_170)"
"(let-values()"
"(let-values(((id86_171)"
"(let-values()"
"(if(let-values(((or-part_172)"
"(if(syntax?$1"
" s_167)"
"(symbol?"
"(syntax-e$1"
" s_167))"
" #f)))"
"(if or-part_172"
" or-part_172"
"(symbol?"
" s_167)))"
" s_167"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_146"
" s_167)))))"
"(cons"
" id86_171"
" id_169)))))"
"(values"
" id_170)))))"
"(for-loop_164"
" id_168"
"(unsafe-cdr"
" lst_166))))"
" id_165))))"
" for-loop_164)"
" null"
" lst_163)))))"
"(alt-reverse"
" id_162))))))))"
"((rhs84_158)"
"(let-values(((s_173)"
"(cdr"
" s_156)))"
"(let-values(((s_174)"
"(if(syntax?$1"
" s_173)"
"(syntax-e$1"
" s_173)"
" s_173)))"
"(if(pair?"
" s_174)"
"(let-values(((rhs85_175)"
"(let-values(((s_176)"
"(car"
" s_174)))"
" s_176))"
"(()"
"(let-values(((s_177)"
"(cdr"
" s_174)))"
"(let-values(((s_178)"
"(if(syntax?$1"
" s_177)"
"(syntax-e$1"
" s_177)"
" s_177)))"
"(if(null?"
" s_178)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                           \"bad syntax\""
" orig-s_146))))))"
"(values"
" rhs85_175))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                       \"bad syntax\""
" orig-s_146))))))"
"(values"
" id83_157"
" rhs84_158))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_146))))))"
"(values"
" define-values80_151"
" id81_152"
" rhs82_153))"
"(raise-syntax-error$1"
" #f"
"                                                                                                               \"bad syntax\""
" orig-s_146)))))"
"(values"
" #t"
" define-values77_147"
" id78_148"
" rhs79_149))))))"
"(let-values(((ids_139)"
"(remove-use-site-scopes"
" id78_125"
" body-ctx_63)))"
"(let-values((()"
"(begin"
"(let-values(((obs_179)"
"(expand-context-observer"
" body-ctx_63)))"
"(if obs_179"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_179"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_139"
" rhs79_126)))))"
"(void)))"
"(values))))"
"(let-values(((new-dups_140)"
"(let-values()"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids87_180"
" phase88_181"
" exp-body89_182"
" dups90_183"
" #t))))"
"(let-values(((counter_141)"
"(root-expand-context-counter"
" ctx_28)))"
"(let-values(((keys_142)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list?"
" lst_184)"
"(void)"
"(let-values()"
"(in-list"
" lst_184)))"
"((letrec-values(((for-loop_185)"
"(lambda(fold-var_186"
" lst_187)"
"(if(pair?"
" lst_187)"
"(let-values(((id_188)"
"(unsafe-car"
" lst_187)))"
"(let-values(((fold-var_189)"
"(let-values()"
"(let-values(((fold-var_191)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values()"
"(add-local-binding!35.1"
" frame-id94_196"
" #t"
" exp-body95_197"
" #t"
" id91_193"
" phase92_194"
" counter93_195)))"
" fold-var_190))))"
"(values"
" fold-var_191)))))"
"(for-loop_185"
" fold-var_189"
"(unsafe-cdr"
" lst_187))))"
" fold-var_186))))"
" for-loop_185)"
" null"
" lst_184))))))"
"(let-values(((extended-env_143)"
"(let-values()"
"(begin"
"(if(list?"
" lst_198)"
"(void)"
"(let-values()"
"(in-list"
" lst_198)))"
"(if(list?"
" lst_199)"
"(void)"
"(let-values()"
"(in-list"
" lst_199)))"
"((letrec-values(((for-loop_200)"
"(lambda(env_201"
" lst_202"
" lst_203)"
"(if(if(pair?"
" lst_202)"
"(pair?"
" lst_203)"
" #f)"
"(let-values(((key_204)"
"(unsafe-car"
" lst_202))"
"((id_205)"
"(unsafe-car"
" lst_203)))"
"(let-values(((env_206)"
"(let-values()"
"(let-values(((env_208)"
"(let-values()"
"(env-extend"
" env_207"
" key_204"
"(local-variable1.1"
" id_205)))))"
"(values"
" env_208)))))"
"(for-loop_200"
" env_206"
"(unsafe-cdr"
" lst_202)"
"(unsafe-cdr"
" lst_203))))"
" env_201))))"
" for-loop_200)"
"(expand-context-env"
" body-ctx_63)"
" lst_198"
" lst_199)))))"
"(loop_62"
"(let-values()"
"(if(expand-context?"
" the-struct_209)"
"(let-values(((binding-layer97_211)"
"(maybe-increment-binding-layer_37"
" ids_139"
" body-ctx_63)))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_209)"
"(root-expand-context-post-expansion-scope"
" the-struct_209)"
"(root-expand-context-top-level-bind-scope"
" the-struct_209)"
"(root-expand-context-all-scopes-stx"
" the-struct_209)"
"(root-expand-context-use-site-scopes"
" the-struct_209)"
"(root-expand-context-defined-syms"
" the-struct_209)"
"(root-expand-context-frame-id"
" the-struct_209)"
"(root-expand-context-counter"
" the-struct_209)"
"(root-expand-context-lift-key"
" the-struct_209)"
"(expand-context-to-parsed?"
" the-struct_209)"
"(expand-context-context"
" the-struct_209)"
"(expand-context-phase"
" the-struct_209)"
"(expand-context-namespace"
" the-struct_209)"
" env96_210"
"(expand-context-user-env"
" the-struct_209)"
"(expand-context-post-expansion-scope-action"
" the-struct_209)"
"(expand-context-scopes"
" the-struct_209)"
"(expand-context-def-ctx-scopes"
" the-struct_209)"
" binding-layer97_211"
"(expand-context-reference-records"
" the-struct_209)"
"(expand-context-only-immediate?"
" the-struct_209)"
"(expand-context-just-once?"
" the-struct_209)"
"(expand-context-module-begin-k"
" the-struct_209)"
"(expand-context-need-eventually-defined"
" the-struct_209)"
"(expand-context-allow-unbound?"
" the-struct_209)"
"(expand-context-in-local-expand?"
" the-struct_209)"
"(expand-context-stops"
" the-struct_209)"
"(expand-context-current-introduction-scopes"
" the-struct_209)"
"(expand-context-declared-submodule-names"
" the-struct_209)"
"(expand-context-lifts"
" the-struct_209)"
"(expand-context-lift-envs"
" the-struct_209)"
"(expand-context-module-lifts"
" the-struct_209)"
"(expand-context-require-lifts"
" the-struct_209)"
"(expand-context-to-module-lifts"
" the-struct_209)"
"(expand-context-requires+provides"
" the-struct_209)"
"(expand-context-name"
" the-struct_209)"
"(expand-context-observer"
" the-struct_209)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                              \"expand-context?\""
" the-struct_209)))"
"(cdr bodys_64)"
" null"
"(cons"
" ids_139"
"(append"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_212)"
"(void)"
"(let-values()"
"(in-list lst_212)))"
"((letrec-values(((for-loop_213)"
"(lambda(fold-var_214"
" lst_215)"
"(if(pair?"
" lst_215)"
"(let-values(((done-body_216)"
"(unsafe-car"
" lst_215)))"
"(let-values(((fold-var_217)"
"(let-values()"
"(let-values(((fold-var_219)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_218))))"
"(values"
" fold-var_219)))))"
"(for-loop_213"
" fold-var_217"
"(unsafe-cdr"
" lst_215))))"
" fold-var_214))))"
" for-loop_213)"
" null"
" lst_212))))"
" val-idss_66))"
"(cons"
" keys_142"
"(append"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_220)"
"(void)"
"(let-values()"
"(in-list lst_220)))"
"((letrec-values(((for-loop_221)"
"(lambda(fold-var_222"
" lst_223)"
"(if(pair?"
" lst_223)"
"(let-values(((done-body_224)"
"(unsafe-car"
" lst_223)))"
"(let-values(((fold-var_225)"
"(let-values()"
"(let-values(((fold-var_227)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_226))))"
"(values"
" fold-var_227)))))"
"(for-loop_221"
" fold-var_225"
"(unsafe-cdr"
" lst_223))))"
" fold-var_222))))"
" for-loop_221)"
" null"
" lst_220))))"
" val-keyss_67))"
"(cons"
" rhs79_126"
"(append"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_228)"
"(void)"
"(let-values()"
"(in-list lst_228)))"
"((letrec-values(((for-loop_229)"
"(lambda(fold-var_230"
" lst_231)"
"(if(pair?"
" lst_231)"
"(let-values(((done-body_232)"
"(unsafe-car"
" lst_231)))"
"(let-values(((fold-var_233)"
"(let-values()"
"(let-values(((fold-var_235)"
"(let-values()"
"(cons"
"(let-values()"
"(no-binds"
" done-body_232"
" s_29"
" phase_33))"
" fold-var_234))))"
"(values"
" fold-var_235)))))"
"(for-loop_229"
" fold-var_233"
"(unsafe-cdr"
" lst_231))))"
" fold-var_230))))"
" for-loop_229)"
" null"
" lst_228))))"
" val-rhss_68))"
"(cons"
" exp-body_86"
"(append"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_236)"
"(void)"
"(let-values()"
"(in-list lst_236)))"
"((letrec-values(((for-loop_237)"
"(lambda(fold-var_238"
" lst_239)"
"(if(pair?"
" lst_239)"
"(let-values(((done-body_240)"
"(unsafe-car"
" lst_239)))"
"(let-values(((fold-var_241)"
"(let-values()"
"(let-values(((fold-var_243)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_242))))"
"(values"
" fold-var_243)))))"
"(for-loop_237"
" fold-var_241"
"(unsafe-cdr"
" lst_239))))"
" fold-var_238))))"
" for-loop_237)"
" null"
" lst_236))))"
" track-stxs_69))"
" trans-idss_70"
" new-dups_140))))))))))"
"(if(equal? tmp_93 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_266)"
"(expand-context-observer"
" body-ctx_63)))"
"(if obs_266"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_266"
" 'prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values(((ok?_244"
" define-syntaxes98_245"
" id99_246"
" rhs100_247)"
"(let-values()"
"(let-values()"
"(let-values(((define-syntaxes98_269"
" id99_270"
" rhs100_271)"
"(let-values(((s_272)"
"(if(syntax?$1"
" s_267)"
"(syntax-e$1"
" s_267)"
" s_267)))"
"(if(pair?"
" s_272)"
"(let-values(((define-syntaxes101_273)"
"(let-values(((s_276)"
"(car"
" s_272)))"
" s_276))"
"((id102_274"
" rhs103_275)"
"(let-values(((s_277)"
"(cdr"
" s_272)))"
"(let-values(((s_278)"
"(if(syntax?$1"
" s_277)"
"(syntax-e$1"
" s_277)"
" s_277)))"
"(if(pair?"
" s_278)"
"(let-values(((id104_279)"
"(let-values(((s_281)"
"(car"
" s_278)))"
"(let-values(((s_282)"
"(if(syntax?$1"
" s_281)"
"(syntax-e$1"
" s_281)"
" s_281)))"
"(let-values(((flat-s_283)"
"(to-syntax-list.1"
" s_282)))"
"(if(not"
" flat-s_283)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_268))"
"(let-values()"
"(let-values(((id_284)"
"(let-values()"
"(begin"
"(if(list?"
" lst_285)"
"(void)"
"(let-values()"
"(in-list"
" lst_285)))"
"((letrec-values(((for-loop_286)"
"(lambda(id_287"
" lst_288)"
"(if(pair?"
" lst_288)"
"(let-values(((s_289)"
"(unsafe-car"
" lst_288)))"
"(let-values(((id_290)"
"(let-values()"
"(let-values(((id_292)"
"(let-values()"
"(let-values(((id107_293)"
"(let-values()"
"(if(let-values(((or-part_294)"
"(if(syntax?$1"
" s_289)"
"(symbol?"
"(syntax-e$1"
" s_289))"
" #f)))"
"(if or-part_294"
" or-part_294"
"(symbol?"
" s_289)))"
" s_289"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_268"
" s_289)))))"
"(cons"
" id107_293"
" id_291)))))"
"(values"
" id_292)))))"
"(for-loop_286"
" id_290"
"(unsafe-cdr"
" lst_288))))"
" id_287))))"
" for-loop_286)"
" null"
" lst_285)))))"
"(alt-reverse"
" id_284))))))))"
"((rhs105_280)"
"(let-values(((s_295)"
"(cdr"
" s_278)))"
"(let-values(((s_296)"
"(if(syntax?$1"
" s_295)"
"(syntax-e$1"
" s_295)"
" s_295)))"
"(if(pair?"
" s_296)"
"(let-values(((rhs106_297)"
"(let-values(((s_298)"
"(car"
" s_296)))"
" s_298))"
"(()"
"(let-values(((s_299)"
"(cdr"
" s_296)))"
"(let-values(((s_300)"
"(if(syntax?$1"
" s_299)"
"(syntax-e$1"
" s_299)"
" s_299)))"
"(if(null?"
" s_300)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_268))))))"
"(values"
" rhs106_297))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_268))))))"
"(values"
" id104_279"
" rhs105_280))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_268))))))"
"(values"
" define-syntaxes101_273"
" id102_274"
" rhs103_275))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_268)))))"
"(values"
" #t"
" define-syntaxes98_269"
" id99_270"
" rhs100_271))))))"
"(let-values(((ids_260)"
"(remove-use-site-scopes"
" id99_246"
" body-ctx_63)))"
"(let-values((()"
"(begin"
"(let-values(((obs_301)"
"(expand-context-observer"
" body-ctx_63)))"
"(if obs_301"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_301"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_260"
" rhs100_247)))))"
"(void)))"
"(values))))"
"(let-values(((new-dups_261)"
"(let-values()"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids108_302"
" phase109_303"
" exp-body110_304"
" dups111_305"
" #t))))"
"(let-values(((counter_262)"
"(root-expand-context-counter"
" ctx_28)))"
"(let-values(((keys_263)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list?"
" lst_306)"
"(void)"
"(let-values()"
"(in-list"
" lst_306)))"
"((letrec-values(((for-loop_307)"
"(lambda(fold-var_308"
" lst_309)"
"(if(pair?"
" lst_309)"
"(let-values(((id_310)"
"(unsafe-car"
" lst_309)))"
"(let-values(((fold-var_311)"
"(let-values()"
"(let-values(((fold-var_313)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values()"
"(add-local-binding!35.1"
" frame-id115_318"
" #t"
" exp-body116_319"
" #t"
" id112_315"
" phase113_316"
" counter114_317)))"
" fold-var_312))))"
"(values"
" fold-var_313)))))"
"(for-loop_307"
" fold-var_311"
"(unsafe-cdr"
" lst_309))))"
" fold-var_308))))"
" for-loop_307)"
" null"
" lst_306))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_320)"
"(expand-context-observer"
" body-ctx_63)))"
"(if obs_320"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_320"
" 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values(((vals_264)"
"(eval-for-syntaxes-binding"
" rhs100_247"
" ids_260"
" body-ctx_63)))"
"(let-values(((extended-env_265)"
"(let-values()"
"(begin"
"(if(list?"
" lst_321)"
"(void)"
"(let-values()"
"(in-list"
" lst_321)))"
"(if(list?"
" lst_322)"
"(void)"
"(let-values()"
"(in-list"
" lst_322)))"
"(if(list?"
" lst_323)"
"(void)"
"(let-values()"
"(in-list"
" lst_323)))"
"((letrec-values(((for-loop_324)"
"(lambda(env_325"
" lst_326"
" lst_327"
" lst_328)"
"(if(if(pair?"
" lst_326)"
"(if(pair?"
" lst_327)"
"(pair?"
" lst_328)"
" #f)"
" #f)"
"(let-values(((key_329)"
"(unsafe-car"
" lst_326))"
"((val_330)"
"(unsafe-car"
" lst_327))"
"((id_331)"
"(unsafe-car"
" lst_328)))"
"(let-values(((env_332)"
"(let-values()"
"(let-values(((env_334)"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_330"
" id_331"
" phase_33)"
"(env-extend"
" env_333"
" key_329"
" val_330)))))"
"(values"
" env_334)))))"
"(for-loop_324"
" env_332"
"(unsafe-cdr"
" lst_326)"
"(unsafe-cdr"
" lst_327)"
"(unsafe-cdr"
" lst_328))))"
" env_325))))"
" for-loop_324)"
"(expand-context-env"
" body-ctx_63)"
" lst_321"
" lst_322"
" lst_323)))))"
"(loop_62"
"(let-values()"
"(if(expand-context?"
" the-struct_335)"
"(let-values(((binding-layer118_337)"
"(maybe-increment-binding-layer_37"
" ids_260"
" body-ctx_63)))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_335)"
"(root-expand-context-post-expansion-scope"
" the-struct_335)"
"(root-expand-context-top-level-bind-scope"
" the-struct_335)"
"(root-expand-context-all-scopes-stx"
" the-struct_335)"
"(root-expand-context-use-site-scopes"
" the-struct_335)"
"(root-expand-context-defined-syms"
" the-struct_335)"
"(root-expand-context-frame-id"
" the-struct_335)"
"(root-expand-context-counter"
" the-struct_335)"
"(root-expand-context-lift-key"
" the-struct_335)"
"(expand-context-to-parsed?"
" the-struct_335)"
"(expand-context-context"
" the-struct_335)"
"(expand-context-phase"
" the-struct_335)"
"(expand-context-namespace"
" the-struct_335)"
" env117_336"
"(expand-context-user-env"
" the-struct_335)"
"(expand-context-post-expansion-scope-action"
" the-struct_335)"
"(expand-context-scopes"
" the-struct_335)"
"(expand-context-def-ctx-scopes"
" the-struct_335)"
" binding-layer118_337"
"(expand-context-reference-records"
" the-struct_335)"
"(expand-context-only-immediate?"
" the-struct_335)"
"(expand-context-just-once?"
" the-struct_335)"
"(expand-context-module-begin-k"
" the-struct_335)"
"(expand-context-need-eventually-defined"
" the-struct_335)"
"(expand-context-allow-unbound?"
" the-struct_335)"
"(expand-context-in-local-expand?"
" the-struct_335)"
"(expand-context-stops"
" the-struct_335)"
"(expand-context-current-introduction-scopes"
" the-struct_335)"
"(expand-context-declared-submodule-names"
" the-struct_335)"
"(expand-context-lifts"
" the-struct_335)"
"(expand-context-lift-envs"
" the-struct_335)"
"(expand-context-module-lifts"
" the-struct_335)"
"(expand-context-require-lifts"
" the-struct_335)"
"(expand-context-to-module-lifts"
" the-struct_335)"
"(expand-context-requires+provides"
" the-struct_335)"
"(expand-context-name"
" the-struct_335)"
"(expand-context-observer"
" the-struct_335)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                    \"expand-context?\""
" the-struct_335)))"
"(cdr bodys_64)"
" done-bodys_65"
" val-idss_66"
" val-keyss_67"
" val-rhss_68"
" track-stxs_69"
"(cons"
" ids_260"
" trans-idss_70)"
" new-dups_261))))))))))))"
"(let-values()"
"(if stratified?_30"
"(let-values()"
"(loop_62"
" body-ctx_63"
" null"
"(append"
"(alt-reverse bodys_64)"
"(cons exp-body_86 done-bodys_65))"
" val-idss_66"
" val-keyss_67"
" val-rhss_68"
" track-stxs_69"
" trans-idss_70"
" dups_71))"
"(let-values()"
"(loop_62"
" body-ctx_63"
"(cdr bodys_64)"
"(cons exp-body_86 done-bodys_65)"
" val-idss_66"
" val-keyss_67"
" val-rhss_68"
" track-stxs_69"
" trans-idss_70"
" dups_71))))))))))))))))"
" loop_62)"
" body-ctx_36"
" init-bodys_32"
" null"
" null"
" null"
" null"
" null"
" null"
"(make-check-no-duplicate-table)))))))))))))))))))"
"(define-values"
"(lifted/6.1$2 lifted/7.1$2 lifted/8.1$2 lifted/9.1$2 lifted/10.1$2)"
"(make-struct-type"
" 'finish-expanding-body"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'finish-expanding-body"
"(case-lambda"
"((self_353"
" body-ctx_354"
" frame-id_355"
" def-ctx-scopes_356"
" val-idss_357"
" val-keyss_358"
" val-rhss_359"
" track-stxs_360"
" done-bodys_361)"
"(apply"
" missing-kw"
" self_353"
" body-ctx_354"
" frame-id_355"
" def-ctx-scopes_356"
" val-idss_357"
" val-keyss_358"
" val-rhss_359"
" track-stxs_360"
" done-bodys_361"
" null))))))"
"(current-inspector)"
"(case-lambda"
"((self_362"
" body-ctx_363"
" frame-id_364"
" def-ctx-scopes_365"
" val-idss_366"
" val-keyss_367"
" val-rhss_368"
" track-stxs_369"
" done-bodys_370)"
"(apply"
" missing-kw"
" self_362"
" body-ctx_363"
" frame-id_364"
" def-ctx-scopes_365"
" val-idss_366"
" val-keyss_367"
" val-rhss_368"
" track-stxs_369"
" done-bodys_370"
" null)))))"
"(define-values"
"(finish-expanding-body26.1)"
"(lambda(disappeared-transformer-bindings13_371"
" name12_372"
" source10_373"
" stratified?11_374"
" body-ctx18_375"
" frame-id19_376"
" def-ctx-scopes20_377"
" val-idss21_378"
" val-keyss22_379"
" val-rhss23_380"
" track-stxs24_381"
" done-bodys25_382)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(null? done-bodys_390)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                   \"no expression after a sequence of internal definitions\""
" s_391))"
"(void))"
"(values))))"
"(let-values(((finish-ctx_395)"
"(let-values(((the-struct_397)"
"(accumulate-def-ctx-scopes"
" body-ctx_383"
" def-ctx-scopes_385)))"
"(if(expand-context? the-struct_397)"
"(let-values(((context119_398) 'expression)"
"((use-site-scopes120_399)(box null))"
"((scopes121_400)"
"(append"
"(unbox"
"(root-expand-context-use-site-scopes body-ctx_383))"
"(expand-context-scopes body-ctx_383)))"
"((only-immediate?122_401) #f)"
"((def-ctx-scopes123_402) #f)"
"((post-expansion-scope124_403) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_397)"
" post-expansion-scope124_403"
"(root-expand-context-top-level-bind-scope the-struct_397)"
"(root-expand-context-all-scopes-stx the-struct_397)"
" use-site-scopes120_399"
"(root-expand-context-defined-syms the-struct_397)"
"(root-expand-context-frame-id the-struct_397)"
"(root-expand-context-counter the-struct_397)"
"(root-expand-context-lift-key the-struct_397)"
"(expand-context-to-parsed? the-struct_397)"
" context119_398"
"(expand-context-phase the-struct_397)"
"(expand-context-namespace the-struct_397)"
"(expand-context-env the-struct_397)"
"(expand-context-user-env the-struct_397)"
"(expand-context-post-expansion-scope-action the-struct_397)"
" scopes121_400"
" def-ctx-scopes123_402"
"(expand-context-binding-layer the-struct_397)"
"(expand-context-reference-records the-struct_397)"
" only-immediate?122_401"
"(expand-context-just-once? the-struct_397)"
"(expand-context-module-begin-k the-struct_397)"
"(expand-context-need-eventually-defined the-struct_397)"
"(expand-context-allow-unbound? the-struct_397)"
"(expand-context-in-local-expand? the-struct_397)"
"(expand-context-stops the-struct_397)"
"(expand-context-current-introduction-scopes the-struct_397)"
"(expand-context-declared-submodule-names the-struct_397)"
"(expand-context-lifts the-struct_397)"
"(expand-context-lift-envs the-struct_397)"
"(expand-context-module-lifts the-struct_397)"
"(expand-context-require-lifts the-struct_397)"
"(expand-context-to-module-lifts the-struct_397)"
"(expand-context-requires+provides the-struct_397)"
"(expand-context-name the-struct_397)"
"(expand-context-observer the-struct_397)))"
"(raise-argument-error"
" 'struct-copy"
"                                                   \"expand-context?\""
" the-struct_397)))))"
"(let-values(((finish-bodys_396)"
"(lambda()"
"(let-values(((block->list?_404)(null? val-idss_386)))"
"(let-values((()"
"(begin"
"(if block->list?_404"
"(void)"
"(let-values()"
"(let-values(((obs_407)"
"(expand-context-observer"
" body-ctx_383)))"
"(if obs_407"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_407"
" 'next-group)))"
"(void)))))"
"(values))))"
"(let-values((()"
"(begin"
"(if block->list?_404"
"(void)"
"(let-values()"
"(let-values(((obs_408)"
"(expand-context-observer"
" body-ctx_383)))"
"(if obs_408"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_408"
" 'prim-begin)))"
"(void)))))"
"(values))))"
"(let-values(((last-i_405)(sub1(length done-bodys_390))))"
"(let-values((()"
"(begin"
"(let-values(((obs_409)"
"(expand-context-observer"
" body-ctx_383)))"
"(if obs_409"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_409"
" 'enter-list"
" done-bodys_390)))"
"(void)))"
"(values))))"
"(let-values(((exp-bodys_406)"
"((letrec-values(((loop_410)"
"(lambda(done-bodys_411)"
"(if(null? done-bodys_411)"
"(let-values() null)"
"(let-values()"
"(let-values(((rest-done-bodys_412)"
"(cdr"
" done-bodys_411)))"
"(begin"
"(let-values(((obs_413)"
"(expand-context-observer"
" body-ctx_383)))"
"(if obs_413"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_413"
" 'next)))"
"(void)))"
"(cons"
"(let-values(((temp125_414)"
"(car"
" done-bodys_411))"
"((temp126_415)"
"(if(if name_393"
"(null?"
" rest-done-bodys_412)"
" #f)"
"(let-values()"
"(if(expand-context?"
" the-struct_416)"
"(let-values()"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_416)"
"(root-expand-context-post-expansion-scope"
" the-struct_416)"
"(root-expand-context-top-level-bind-scope"
" the-struct_416)"
"(root-expand-context-all-scopes-stx"
" the-struct_416)"
"(root-expand-context-use-site-scopes"
" the-struct_416)"
"(root-expand-context-defined-syms"
" the-struct_416)"
"(root-expand-context-frame-id"
" the-struct_416)"
"(root-expand-context-counter"
" the-struct_416)"
"(root-expand-context-lift-key"
" the-struct_416)"
"(expand-context-to-parsed?"
" the-struct_416)"
"(expand-context-context"
" the-struct_416)"
"(expand-context-phase"
" the-struct_416)"
"(expand-context-namespace"
" the-struct_416)"
"(expand-context-env"
" the-struct_416)"
"(expand-context-user-env"
" the-struct_416)"
"(expand-context-post-expansion-scope-action"
" the-struct_416)"
"(expand-context-scopes"
" the-struct_416)"
"(expand-context-def-ctx-scopes"
" the-struct_416)"
"(expand-context-binding-layer"
" the-struct_416)"
"(expand-context-reference-records"
" the-struct_416)"
"(expand-context-only-immediate?"
" the-struct_416)"
"(expand-context-just-once?"
" the-struct_416)"
"(expand-context-module-begin-k"
" the-struct_416)"
"(expand-context-need-eventually-defined"
" the-struct_416)"
"(expand-context-allow-unbound?"
" the-struct_416)"
"(expand-context-in-local-expand?"
" the-struct_416)"
"(expand-context-stops"
" the-struct_416)"
"(expand-context-current-introduction-scopes"
" the-struct_416)"
"(expand-context-declared-submodule-names"
" the-struct_416)"
"(expand-context-lifts"
" the-struct_416)"
"(expand-context-lift-envs"
" the-struct_416)"
"(expand-context-module-lifts"
" the-struct_416)"
"(expand-context-require-lifts"
" the-struct_416)"
"(expand-context-to-module-lifts"
" the-struct_416)"
"(expand-context-requires+provides"
" the-struct_416)"
" name127_417"
"(expand-context-observer"
" the-struct_416)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                            \"expand-context?\""
" the-struct_416)))"
" finish-ctx_395)))"
"(expand5.1"
" #f"
" #f"
" temp125_414"
" temp126_415))"
"(loop_410"
" rest-done-bodys_412)))))))))"
" loop_410)"
" done-bodys_390)))"
"(begin"
"(let-values(((obs_418)"
"(expand-context-observer body-ctx_383)))"
"(if obs_418"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_418"
" 'exit-list"
" exp-bodys_406)))"
"(void)))"
"(reference-record-clear! frame-id_384)"
" exp-bodys_406))))))))))"
"(if(if(null? val-idss_386)(null? disappeared-transformer-bindings_394) #f)"
"(let-values()(finish-bodys_396))"
"(let-values()"
"(let-values(((exp-s_419)"
"(let-values(((...nder/expand/body.rkt:264:18_420)"
" expand-and-split-bindings-by-reference47.1)"
"((temp132_425)(not stratified?_392))"
"((temp137_430) #f))"
"(expand-and-split-bindings-by-reference45.1"
" finish-ctx134_427"
" frame-id133_426"
" finish-bodys136_429"
" s135_428"
" temp132_425"
" temp137_430"
" val-idss128_421"
" val-keyss129_422"
" val-rhss130_423"
" track-stxs131_424))))"
"(if(expand-context-to-parsed? body-ctx_383)"
"(list exp-s_419)"
"(list"
"(attach-disappeared-transformer-bindings"
" exp-s_419"
" disappeared-transformer-bindings_394))))))))))))))))))))))))"
"(define-values"
"(unpack27.1)"
"(lambda(given-kws_431"
" given-args_432"
" body-ctx18_433"
" frame-id19_434"
" def-ctx-scopes20_435"
" val-idss21_436"
" val-keyss22_437"
" val-rhss23_438"
" track-stxs24_439"
" done-bodys25_440)"
"(let-values(((disappeared-transformer-bindings13_441)(car given-args_432))"
"((given-kws_442)(cdr given-kws_431))"
"((given-args_443)(cdr given-args_432)))"
"(let-values(((name12_444)(car given-args_443))"
"((given-kws_445)(cdr given-kws_442))"
"((given-args_446)(cdr given-args_443)))"
"(let-values(((source10_447)(car given-args_446))"
"((given-kws_448)(cdr given-kws_445))"
"((given-args_449)(cdr given-args_446)))"
"(let-values(((stratified?11_450)(car given-args_449)))"
"(finish-expanding-body26.1"
" disappeared-transformer-bindings13_441"
" name12_444"
" source10_447"
" stratified?11_450"
" body-ctx18_433"
" frame-id19_434"
" def-ctx-scopes20_435"
" val-idss21_436"
" val-keyss22_437"
" val-rhss23_438"
" track-stxs24_439"
" done-bodys25_440)))))))"
"(define-values"
"(finish-expanding-body28.1)"
"(lifted/7.1$2"
"(lambda(given-kws_451 given-argc_452)"
"(if(= given-argc_452 10)"
"(let-values()"
"(if(pair? l2_453)"
"(if(eq?(car l2_453) '#:disappeared-transformer-bindings)"
"(let-values(((l2_454)(cdr l2_453)))"
"(if(pair? l2_454)"
"(if(eq?(car l2_454) '#:name)"
"(let-values(((l2_455)(cdr l2_454)))"
"(if(pair? l2_455)"
"(if(eq?(car l2_455) '#:source)"
"(let-values(((l2_456)(cdr l2_455)))"
"(if(pair? l2_456)(if(eq?(car l2_456) '#:stratified?)(null?(cdr l2_456)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_457"
" given-args_458"
" body-ctx_459"
" frame-id_460"
" def-ctx-scopes_461"
" val-idss_462"
" val-keyss_463"
" val-rhss_464"
" track-stxs_465"
" done-bodys_466)"
"(unpack27.1"
" given-kws_457"
" given-args_458"
" body-ctx_459"
" frame-id_460"
" def-ctx-scopes_461"
" val-idss_462"
" val-keyss_463"
" val-rhss_464"
" track-stxs_465"
" done-bodys_466)))"
" '(#:disappeared-transformer-bindings #:name #:source #:stratified?)"
" '(#:disappeared-transformer-bindings #:name #:source #:stratified?)))"
"(define-values"
"(lifted/11.1$1 lifted/12.1$1 lifted/13.1$1 lifted/14.1$1 lifted/15.1$1)"
"(make-struct-type"
" 'expand-and-split-bindings-by-reference"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'expand-and-split-bindings-by-reference"
"(case-lambda"
"((self_467 idss_468 keyss_469 rhss_470 track-stxs_471)"
"(apply missing-kw self_467 idss_468 keyss_469 rhss_470 track-stxs_471 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_472 idss_473 keyss_474 rhss_475 track-stxs_476)"
"(apply missing-kw self_472 idss_473 keyss_474 rhss_475 track-stxs_476 null)))))"
"(define-values"
"(expand-and-split-bindings-by-reference45.1)"
"(lambda(ctx31_477"
" frame-id30_478"
" get-body33_479"
" source32_480"
" split?29_481"
" track?34_482"
" idss41_483"
" keyss42_484"
" rhss43_485"
" track-stxs44_486)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((phase_497)(expand-context-phase ctx_493)))"
"((letrec-values(((loop_498)"
"(lambda(idss_499"
" keyss_500"
" rhss_501"
" track-stxs_502"
" accum-idss_503"
" accum-keyss_504"
" accum-rhss_505"
" accum-track-stxs_506"
" track?_507"
" get-list?_508)"
"(if(null? idss_499)"
"(let-values()"
"(if(if(null? accum-idss_503) get-list?_508 #f)"
"(let-values()(get-body_495))"
"(let-values()"
"(let-values(((exp-body_509)(get-body_495)))"
"(let-values(((result-s_510)"
"(if(expand-context-to-parsed? ctx_493)"
"(if(null? accum-idss_503)"
"(parsed-let-values17.1"
"(keep-properties-only s_494)"
" null"
" null"
" exp-body_509)"
"(parsed-letrec-values18.1"
"(keep-properties-only s_494)"
"(alt-reverse accum-idss_503)"
"(alt-reverse"
"(map2"
" list"
" accum-keyss_504"
" accum-rhss_505))"
" exp-body_509))"
"(let-values(((temp140_514)"
"(list*"
"(if(null? accum-idss_503)"
"(core-id"
" 'let-values"
" phase_497)"
"(core-id"
" 'letrec-values"
" phase_497))"
"(build-clauses"
" accum-idss_503"
" accum-rhss_505"
" accum-track-stxs_506)"
" exp-body_509)))"
"(rebuild62.1"
" track?138_512"
" #t"
" s139_513"
" temp140_514)))))"
"(begin"
"(if track?_507"
"(let-values()"
"(let-values(((obs_515)"
"(expand-context-observer ctx_493)))"
"(if obs_515"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_515"
" 'tag"
" result-s_510)))"
"(void))))"
"(void))"
"(if get-list?_508(list result-s_510) result-s_510)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_521)"
"(expand-context-observer ctx_493)))"
"(if obs_521"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_521 'next)))"
"(void)))"
"(values))))"
"(let-values(((ids_516)(car idss_499)))"
"(let-values(((expanded-rhs_517)"
"(let-values(((temp141_522)(car rhss_501))"
"((temp142_523)"
"(as-named-context ctx_493 ids_516)))"
"(expand5.1 #f #f temp141_522 temp142_523))))"
"(let-values(((track-stx_518)(car track-stxs_502)))"
"(let-values(((local-or-forward-references?_519)"
"(reference-record-forward-references?"
" frame-id_492)))"
"(let-values((()"
"(begin"
"(reference-record-bound!"
" frame-id_492"
"(car keyss_500))"
"(values))))"
"(let-values(((forward-references?_520)"
"(reference-record-forward-references?"
" frame-id_492)))"
"(if(if(not local-or-forward-references?_519)"
" split?_491"
" #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(null? accum-idss_503)"
"(void)"
"(let-values()"
"(error"
"                                                                                           \"internal error: accumulated ids not empty\")))"
"(values))))"
"(let-values(((exp-rest_524)"
"(loop_498"
"(cdr idss_499)"
"(cdr keyss_500)"
"(cdr rhss_501)"
"(cdr track-stxs_502)"
" null"
" null"
" null"
" null"
" #f"
" #t)))"
"((if get-list?_508 list values)"
"(if(expand-context-to-parsed? ctx_493)"
"(parsed-let-values17.1"
"(keep-properties-only s_494)"
"(list ids_516)"
"(list"
"(list(car keyss_500) expanded-rhs_517))"
" exp-rest_524)"
"(let-values(((temp145_528)"
"(list*"
"(core-id"
" 'let-values"
" phase_497)"
"(list"
"(build-clause"
" ids_516"
" expanded-rhs_517"
" track-stx_518))"
" exp-rest_524)))"
"(rebuild62.1"
" track?143_526"
" #t"
" s144_527"
" temp145_528)))))))"
"(if(if(not forward-references?_520)"
"(let-values()"
"(if or-part_529"
" or-part_529"
"(null?(cdr idss_499))))"
" #f)"
"(let-values()"
"(let-values(((exp-rest_530)"
"(loop_498"
"(cdr idss_499)"
"(cdr keyss_500)"
"(cdr rhss_501)"
"(cdr track-stxs_502)"
" null"
" null"
" null"
" null"
" #f"
" #t)))"
"((if get-list?_508 list values)"
"(if(expand-context-to-parsed? ctx_493)"
"(parsed-letrec-values18.1"
"(keep-properties-only s_494)"
"(alt-reverse"
"(cons ids_516 accum-idss_503))"
"(alt-reverse"
"(cons"
"(list(car keyss_500) expanded-rhs_517)"
"(map2"
" list"
" accum-keyss_504"
" accum-rhss_505)))"
" exp-rest_530)"
"(let-values(((temp148_534)"
"(list*"
"(core-id"
" 'letrec-values"
" phase_497)"
"(build-clauses"
"(cons"
" ids_516"
" accum-idss_503)"
"(cons"
" expanded-rhs_517"
" accum-rhss_505)"
"(cons"
" track-stx_518"
" accum-track-stxs_506))"
" exp-rest_530)))"
"(rebuild62.1"
" track?146_532"
" #t"
" s147_533"
" temp148_534))))))"
"(let-values()"
"(loop_498"
"(cdr idss_499)"
"(cdr keyss_500)"
"(cdr rhss_501)"
"(cdr track-stxs_502)"
"(cons ids_516 accum-idss_503)"
"(cons(car keyss_500) accum-keyss_504)"
"(cons expanded-rhs_517 accum-rhss_505)"
"(cons track-stx_518 accum-track-stxs_506)"
" track?_507"
" get-list?_508))))))))))))))))"
" loop_498)"
" idss_487"
" keyss_488"
" rhss_489"
" track-stxs_490"
" null"
" null"
" null"
" null"
" track?_496"
" #f)))))))))))))))"
"(define-values"
"(unpack46.1)"
"(lambda(given-kws_535 given-args_536 idss41_537 keyss42_538 rhss43_539 track-stxs44_540)"
"(let-values(((ctx31_541)(car given-args_536))"
"((given-kws_542)(cdr given-kws_535))"
"((given-args_543)(cdr given-args_536)))"
"(let-values(((frame-id30_544)(car given-args_543))"
"((given-kws_545)(cdr given-kws_542))"
"((given-args_546)(cdr given-args_543)))"
"(let-values(((get-body33_547)(car given-args_546))"
"((given-kws_548)(cdr given-kws_545))"
"((given-args_549)(cdr given-args_546)))"
"(let-values(((source32_550)(car given-args_549))"
"((given-kws_551)(cdr given-kws_548))"
"((given-args_552)(cdr given-args_549)))"
"(let-values(((split?29_553)(car given-args_552))"
"((given-kws_554)(cdr given-kws_551))"
"((given-args_555)(cdr given-args_552)))"
"(let-values(((track?34_556)(car given-args_555)))"
"(expand-and-split-bindings-by-reference45.1"
" ctx31_541"
" frame-id30_544"
" get-body33_547"
" source32_550"
" split?29_553"
" track?34_556"
" idss41_537"
" keyss42_538"
" rhss43_539"
" track-stxs44_540)))))))))"
"(define-values"
"(expand-and-split-bindings-by-reference47.1)"
"(lifted/12.1$1"
"(lambda(given-kws_557 given-argc_558)"
"(if(= given-argc_558 6)"
"(let-values()"
"(if(pair? l2_559)"
"(if(eq?(car l2_559) '#:ctx)"
"(let-values(((l2_560)(cdr l2_559)))"
"(if(pair? l2_560)"
"(if(eq?(car l2_560) '#:frame-id)"
"(let-values(((l2_561)(cdr l2_560)))"
"(if(pair? l2_561)"
"(if(eq?(car l2_561) '#:get-body)"
"(let-values(((l2_562)(cdr l2_561)))"
"(if(pair? l2_562)"
"(if(eq?(car l2_562) '#:source)"
"(let-values(((l2_563)(cdr l2_562)))"
"(if(pair? l2_563)"
"(if(eq?(car l2_563) '#:split?)"
"(let-values(((l2_564)(cdr l2_563)))"
"(if(pair? l2_564)(if(eq?(car l2_564) '#:track?)(null?(cdr l2_564)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_565 given-args_566 idss_567 keyss_568 rhss_569 track-stxs_570)"
"(unpack46.1 given-kws_565 given-args_566 idss_567 keyss_568 rhss_569 track-stxs_570)))"
" '(#:ctx #:frame-id #:get-body #:source #:split? #:track?)"
" '(#:ctx #:frame-id #:get-body #:source #:split? #:track?)))"
"(define-values"
"(build-clauses)"
"(lambda(accum-idss_571 accum-rhss_572 accum-track-stxs_573)"
"(map2 build-clause(alt-reverse accum-idss_571)(alt-reverse accum-rhss_572)(alt-reverse accum-track-stxs_573))))"
"(define-values"
"(build-clause)"
"(lambda(ids_574 rhs_575 track-stx_576)"
"(let-values(((clause_577)(datum->syntax$1 #f(list ids_574 rhs_575))))"
"(if track-stx_576(syntax-track-origin$1 clause_577 track-stx_576) clause_577))))"
"(define-values"
"(no-binds)"
"(lambda(expr_578 s_579 phase_580)"
"(let-values(((s-runtime-stx_581)(syntax-shift-phase-level$1 runtime-stx phase_580)))"
"(datum->syntax$1"
" #f"
"(list"
"(core-id 'begin phase_580)"
" expr_578"
"(list(core-id '#%app phase_580)(datum->syntax$1 s-runtime-stx_581 'values)))"
" s_579))))"
"(void)"
"(void)"
"(define-values"
"(lambda-clause-expander)"
"(lambda(s_11 disarmed-s_12 formals_13 bodys_14 ctx_15 log-renames-tag_16)"
"(let-values(((sc_17)(new-scope 'local)))"
"(let-values(((phase_18)(expand-context-phase ctx_15)))"
"(let-values(((ids_19)(parse-and-flatten-formals formals_13 sc_17 disarmed-s_12)))"
"(let-values((()"
"(begin"
"                          (let-values (((temp37_31) \"argument name\"))"
"(check-no-duplicate-ids8.1 temp37_31 #t ids34_28 phase35_29 s36_30 #f #f))"
"(values))))"
"(let-values(((counter_20)(root-expand-context-counter ctx_15)))"
"(let-values(((keys_21)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_32)(void)(let-values()(in-list lst_32)))"
"((letrec-values(((for-loop_33)"
"(lambda(fold-var_34 lst_35)"
"(if(pair? lst_35)"
"(let-values(((id_36)(unsafe-car lst_35)))"
"(let-values(((fold-var_37)"
"(let-values()"
"(let-values(((fold-var_39)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values()"
"(add-local-binding!35.1"
" #f"
" #f"
" s41_44"
" #t"
" id38_41"
" phase39_42"
" counter40_43)))"
" fold-var_38))))"
"(values fold-var_39)))))"
"(for-loop_33 fold-var_37(unsafe-cdr lst_35))))"
" fold-var_34))))"
" for-loop_33)"
" null"
" lst_32))))))"
"(let-values(((body-env_22)"
"(let-values()"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"(if(list? lst_46)(void)(let-values()(in-list lst_46)))"
"((letrec-values(((for-loop_47)"
"(lambda(env_48 lst_49 lst_50)"
"(if(if(pair? lst_49)(pair? lst_50) #f)"
"(let-values(((key_51)(unsafe-car lst_49))"
"((id_52)(unsafe-car lst_50)))"
"(let-values(((env_53)"
"(let-values()"
"(let-values(((env_55)"
"(let-values()"
"(env-extend"
" env_54"
" key_51"
"(local-variable1.1 id_52)))))"
"(values env_55)))))"
"(for-loop_47"
" env_53"
"(unsafe-cdr lst_49)"
"(unsafe-cdr lst_50))))"
" env_48))))"
" for-loop_47)"
"(expand-context-env ctx_15)"
" lst_45"
" lst_46)))))"
"(let-values(((sc-formals_23)(add-scope formals_13 sc_17)))"
"(let-values(((sc-bodys_24)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_56)(void)(let-values()(in-list lst_56)))"
"((letrec-values(((for-loop_57)"
"(lambda(fold-var_58 lst_59)"
"(if(pair? lst_59)"
"(let-values(((body_60)(unsafe-car lst_59)))"
"(let-values(((fold-var_61)"
"(let-values()"
"(let-values(((fold-var_63)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_60"
" sc_17))"
" fold-var_62))))"
"(values fold-var_63)))))"
"(for-loop_57 fold-var_61(unsafe-cdr lst_59))))"
" fold-var_58))))"
" for-loop_57)"
" null"
" lst_56))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_64)(expand-context-observer ctx_15)))"
"(if obs_64"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_64"
" log-renames-tag_16"
" sc-formals_23"
"(datum->syntax$1 #f sc-bodys_24))))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_25)"
"(let-values()"
"(if(expand-context? the-struct_65)"
"(let-values(((scopes43_67)(cons sc_17(expand-context-scopes ctx_15)))"
"((binding-layer44_68)"
"(increment-binding-layer ids_19 ctx_15 sc_17))"
"((frame-id45_69) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_65)"
"(root-expand-context-post-expansion-scope the-struct_65)"
"(root-expand-context-top-level-bind-scope the-struct_65)"
"(root-expand-context-all-scopes-stx the-struct_65)"
"(root-expand-context-use-site-scopes the-struct_65)"
"(root-expand-context-defined-syms the-struct_65)"
" frame-id45_69"
"(root-expand-context-counter the-struct_65)"
"(root-expand-context-lift-key the-struct_65)"
"(expand-context-to-parsed? the-struct_65)"
"(expand-context-context the-struct_65)"
"(expand-context-phase the-struct_65)"
"(expand-context-namespace the-struct_65)"
" env42_66"
"(expand-context-user-env the-struct_65)"
"(expand-context-post-expansion-scope-action the-struct_65)"
" scopes43_67"
"(expand-context-def-ctx-scopes the-struct_65)"
" binding-layer44_68"
"(expand-context-reference-records the-struct_65)"
"(expand-context-only-immediate? the-struct_65)"
"(expand-context-just-once? the-struct_65)"
"(expand-context-module-begin-k the-struct_65)"
"(expand-context-need-eventually-defined the-struct_65)"
"(expand-context-allow-unbound? the-struct_65)"
"(expand-context-in-local-expand? the-struct_65)"
"(expand-context-stops the-struct_65)"
"(expand-context-current-introduction-scopes the-struct_65)"
"(expand-context-declared-submodule-names the-struct_65)"
"(expand-context-lifts the-struct_65)"
"(expand-context-lift-envs the-struct_65)"
"(expand-context-module-lifts the-struct_65)"
"(expand-context-require-lifts the-struct_65)"
"(expand-context-to-module-lifts the-struct_65)"
"(expand-context-requires+provides the-struct_65)"
"(expand-context-name the-struct_65)"
"(expand-context-observer the-struct_65)))"
"                                          (raise-argument-error 'struct-copy \"expand-context?\" the-struct_65)))))"
"(let-values(((exp-body_26)"
"(let-values(((temp48_73)"
"(let-values()(keep-as-needed55.1 #f #f ctx49_74 s50_75))))"
"(expand-body7.1 temp48_73 #f #f sc-bodys46_71 body-ctx47_72))))"
"(values"
"(if(expand-context-to-parsed? ctx_15)"
"(unflatten-like-formals keys_21 formals_13)"
" sc-formals_23)"
" exp-body_26)))))))))))))))"
"(define-values"
"(make-expand-lambda)"
"(lambda(get-lambda_76)"
"(lambda(s_77 ctx_78)"
"(let-values((()"
"(begin"
"(let-values(((obs_99)(expand-context-observer ctx_78)))"
"(if obs_99(let-values()(let-values()(call-expand-observe obs_99 'prim-lambda)))(void)))"
"(values))))"
"(let-values(((disarmed-s_79)(syntax-disarm$1 s_77)))"
"(let-values(((ok?_80 lambda51_81 formals52_82 body53_83)"
"(let-values()"
"(let-values()"
"(let-values(((lambda51_102 formals52_103 body53_104)"
"(let-values(((s_105)(if(syntax?$1 s_100)(syntax-e$1 s_100) s_100)))"
"(if(pair? s_105)"
"(let-values(((lambda54_106)(let-values(((s_109)(car s_105))) s_109))"
"((formals55_107 body56_108)"
"(let-values(((s_110)(cdr s_105)))"
"(let-values(((s_111)"
"(if(syntax?$1 s_110)"
"(syntax-e$1 s_110)"
" s_110)))"
"(if(pair? s_111)"
"(let-values(((formals57_112)"
"(let-values(((s_114)(car s_111)))"
" s_114))"
"((body58_113)"
"(let-values(((s_115)(cdr s_111)))"
"(let-values(((s_116)"
"(if(syntax?$1 s_115)"
"(syntax-e$1 s_115)"
" s_115)))"
"(let-values(((flat-s_117)"
"(to-syntax-list.1"
" s_116)))"
"(if(not flat-s_117)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_101))"
"(if(null? flat-s_117)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_101))"
"(let-values()"
" flat-s_117))))))))"
"(values formals57_112 body58_113))"
"                                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_101))))))"
"(values lambda54_106 formals55_107 body56_108))"
"                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_101)))))"
"(values #t lambda51_102 formals52_103 body53_104))))))"
"(let-values(((rebuild-s_96)(let-values()(keep-as-needed55.1 #f #f ctx59_118 s60_119))))"
"(let-values(((formals_97 body_98)"
"(lambda-clause-expander s_77 disarmed-s_79 formals52_82 body53_83 ctx_78 'lambda-renames)))"
"(if(expand-context-to-parsed? ctx_78)"
"(parsed-lambda5.1 rebuild-s_96 formals_97 body_98)"
"(let-values(((temp62_121)(list*(get-lambda_76 ctx_78 lambda51_81) formals_97 body_98)))"
"(rebuild62.1 #f #f rebuild-s61_120 temp62_121)))))))))))"
"(call-with-values"
"(lambda()(add-core-form! 'lambda(make-expand-lambda(lambda(ctx_122 lam-id_123) lam-id_123))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'λ"
"(make-expand-lambda"
"(lambda(ctx_124 lam-id_125)"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase ctx_124))"
" 'lambda"
" lam-id_125"
" lam-id_125)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'case-lambda"
"(lambda(s_126 ctx_127)"
"(let-values((()"
"(begin"
"(let-values(((obs_160)(expand-context-observer ctx_127)))"
"(if obs_160"
"(let-values()(let-values()(call-expand-observe obs_160 'prim-case-lambda)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_128)(syntax-disarm$1 s_126)))"
"(let-values(((ok?_129 case-lambda63_130 formals64_131 body65_132)"
"(let-values()"
"(let-values()"
"(let-values(((case-lambda63_163 formals64_164 body65_165)"
"(let-values(((s_166)(if(syntax?$1 s_161)(syntax-e$1 s_161) s_161)))"
"(if(pair? s_166)"
"(let-values(((case-lambda66_167)"
"(let-values(((s_170)(car s_166))) s_170))"
"((formals67_168 body68_169)"
"(let-values(((s_171)(cdr s_166)))"
"(let-values(((s_172)"
"(if(syntax?$1 s_171)"
"(syntax-e$1 s_171)"
" s_171)))"
"(let-values(((flat-s_173)(to-syntax-list.1 s_172)))"
"(if(not flat-s_173)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_162))"
"(let-values()"
"(let-values(((formals_174 body_175)"
"(let-values()"
"(begin"
"(if(list? lst_176)"
"(void)"
"(let-values()"
"(in-list lst_176)))"
"((letrec-values(((for-loop_177)"
"(lambda(formals_178"
" body_179"
" lst_180)"
"(if(pair?"
" lst_180)"
"(let-values(((s_181)"
"(unsafe-car"
" lst_180)))"
"(let-values(((formals_182"
" body_183)"
"(let-values()"
"(let-values(((formals_186"
" body_187)"
"(let-values()"
"(let-values(((formals75_188"
" body76_189)"
"(let-values()"
"(let-values(((s_190)"
"(if(syntax?$1"
" s_181)"
"(syntax-e$1"
" s_181)"
" s_181)))"
"(if(pair?"
" s_190)"
"(let-values(((formals69_191)"
"(let-values(((s_193)"
"(car"
" s_190)))"
" s_193))"
"((body70_192)"
"(let-values(((s_194)"
"(cdr"
" s_190)))"
"(let-values(((s_195)"
"(if(syntax?$1"
" s_194)"
"(syntax-e$1"
" s_194)"
" s_194)))"
"(let-values(((flat-s_196)"
"(to-syntax-list.1"
" s_195)))"
"(if(not"
" flat-s_196)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                              \"bad syntax\""
" orig-s_162))"
"(if(null?"
" flat-s_196)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                \"bad syntax\""
" orig-s_162))"
"(let-values()"
" flat-s_196))))))))"
"(values"
" formals69_191"
" body70_192))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                      \"bad syntax\""
" orig-s_162))))))"
"(values"
"(cons"
" formals75_188"
" formals_184)"
"(cons"
" body76_189"
" body_185))))))"
"(values"
" formals_186"
" body_187)))))"
"(for-loop_177"
" formals_182"
" body_183"
"(unsafe-cdr"
" lst_180))))"
"(values"
" formals_178"
" body_179)))))"
" for-loop_177)"
" null"
" null"
" lst_176)))))"
"(values"
"(alt-reverse formals_174)"
"(alt-reverse body_175))))))))))"
"(values case-lambda66_167 formals67_168 body68_169))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_162)))))"
"(values #t case-lambda63_163 formals64_164 body65_165))))))"
"(let-values(((ok?_145 case-lambda71_146 clause72_147)"
"(let-values()"
"(let-values()"
"(let-values(((case-lambda71_199 clause72_200)"
"(let-values(((s_201)(if(syntax?$1 s_197)(syntax-e$1 s_197) s_197)))"
"(if(pair? s_201)"
"(let-values(((case-lambda73_202)"
"(let-values(((s_204)(car s_201))) s_204))"
"((clause74_203)"
"(let-values(((s_205)(cdr s_201)))"
"(let-values(((s_206)"
"(if(syntax?$1 s_205)"
"(syntax-e$1 s_205)"
" s_205)))"
"(let-values(((flat-s_207)(to-syntax-list.1 s_206)))"
"(if(not flat-s_207)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_198))"
"(let-values() flat-s_207)))))))"
"(values case-lambda73_202 clause74_203))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_198)))))"
"(values #t case-lambda71_199 clause72_200))))))"
"(let-values(((rebuild-s_158)(let-values()(keep-as-needed55.1 #f #f ctx77_208 s78_209))))"
"(let-values(((clauses_159)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_210)(void)(let-values()(in-list lst_210)))"
"(if(list? lst_211)(void)(let-values()(in-list lst_211)))"
"(if(list? lst_212)(void)(let-values()(in-list lst_212)))"
"((letrec-values(((for-loop_213)"
"(lambda(fold-var_214 lst_215 lst_216 lst_217)"
"(if(if(pair? lst_215)"
"(if(pair? lst_216)(pair? lst_217) #f)"
" #f)"
"(let-values(((formals_218)(unsafe-car lst_215))"
"((body_219)(unsafe-car lst_216))"
"((clause_220)(unsafe-car lst_217)))"
"(let-values(((fold-var_221)"
"(let-values()"
"(let-values(((fold-var_223)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_226)"
"(expand-context-observer"
" ctx_127)))"
"(if obs_226"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_226"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-formals_224"
" exp-body_225)"
"(lambda-clause-expander"
" s_126"
" disarmed-s_128"
" formals_218"
" body_219"
" ctx_127"
" 'case-lambda-renames)))"
"(if(expand-context-to-parsed?"
" ctx_127)"
"(list"
" exp-formals_224"
" exp-body_225)"
"(let-values(((temp80_228)"
"(list*"
" exp-formals_224"
" exp-body_225)))"
"(rebuild62.1"
" #f"
" #f"
" clause79_227"
" temp80_228))))))"
" fold-var_222))))"
"(values fold-var_223)))))"
"(for-loop_213"
" fold-var_221"
"(unsafe-cdr lst_215)"
"(unsafe-cdr lst_216)"
"(unsafe-cdr lst_217))))"
" fold-var_214))))"
" for-loop_213)"
" null"
" lst_210"
" lst_211"
" lst_212))))))"
"(if(expand-context-to-parsed? ctx_127)"
"(parsed-case-lambda6.1 rebuild-s_158 clauses_159)"
"(let-values(((temp82_230)(list* case-lambda63_130 clauses_159)))"
"(rebuild62.1 #f #f rebuild-s81_229 temp82_230))))))))))))"
" print-values)"
"(define-values"
"(parse-and-flatten-formals)"
"(lambda(all-formals_231 sc_232 s_233)"
"((letrec-values(((loop_234)"
"(lambda(formals_235)"
"(if(identifier? formals_235)"
"(let-values()(list(add-scope formals_235 sc_232)))"
"(if(syntax?$1 formals_235)"
"(let-values()"
"(let-values(((p_236)(syntax-e$1 formals_235)))"
"(if(pair? p_236)"
"(let-values()(loop_234 p_236))"
"(if(null? p_236)"
"(let-values() null)"
"                                    (let-values () (raise-syntax-error$1 #f \"not an identifier\" s_233 p_236))))))"
"(if(pair? formals_235)"
"(let-values()"
"(begin"
"(if(identifier?(car formals_235))"
"(void)"
"(let-values()"
"                                      (raise-syntax-error$1 #f \"not an identifier\" s_233 (car formals_235))))"
"(cons(add-scope(car formals_235) sc_232)(loop_234(cdr formals_235)))))"
"(if(null? formals_235)"
"(let-values() null)"
"(let-values()"
"                                  (raise-syntax-error$1 \"bad argument sequence\" s_233 all-formals_231)))))))))"
" loop_234)"
" all-formals_231)))"
"(define-values"
"(unflatten-like-formals)"
"(lambda(keys_237 formals_238)"
"((letrec-values(((loop_239)"
"(lambda(keys_240 formals_241)"
"(if(null? formals_241)"
"(let-values() null)"
"(if(pair? formals_241)"
"(let-values()(cons(car keys_240)(loop_239(cdr keys_240)(cdr formals_241))))"
"(if(syntax?$1 formals_241)"
"(let-values()(loop_239 keys_240(syntax-e$1 formals_241)))"
"(let-values()(car keys_240))))))))"
" loop_239)"
" keys_237"
" formals_238)))"
"(define-values"
"(make-let-values-form11.1)"
"(lambda(log-tag1_244"
" rec?3_245"
" rec?8_246"
" renames-log-tag5_247"
" renames-log-tag10_248"
" split-by-reference?4_249"
" split-by-reference?9_250"
" syntaxes?2_251"
" syntaxes?7_252)"
"(let-values()"
"(let-values(((syntaxes?_254)(if syntaxes?7_252 syntaxes?2_251 #f)))"
"(let-values(((rec?_255)(if rec?8_246 rec?3_245 #f)))"
"(let-values(((split-by-reference?_256)(if split-by-reference?9_250 split-by-reference?4_249 #f)))"
"(let-values(((renames-log-tag_257)(if renames-log-tag10_248 renames-log-tag5_247 'let-renames)))"
"(let-values()"
"(lambda(s_258 ctx_259)"
"(let-values((()"
"(begin"
"(let-values(((obs_325)(expand-context-observer ctx_259)))"
"(if obs_325"
"(let-values()(let-values()(call-expand-observe obs_325 log-tag_253)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_260)(syntax-disarm$1 s_258)))"
"(let-values(((ok?_261"
" letrec-syntaxes+values83_262"
" id:trans84_263"
" trans-rhs85_264"
" id:val86_265"
" val-rhs87_266"
" body88_267)"
"(let-values()"
"(if(if syntaxes?_254 #t #f)"
"(let-values()"
"(let-values(((letrec-syntaxes+values83_328"
" id:trans84_329"
" trans-rhs85_330"
" id:val86_331"
" val-rhs87_332"
" body88_333)"
"(let-values(((s_334)"
"(if(syntax?$1 s_326)(syntax-e$1 s_326) s_326)))"
"(if(pair? s_334)"
"(let-values(((letrec-syntaxes+values89_335)"
"(let-values(((s_341)(car s_334))) s_341))"
"((id:trans90_336"
" trans-rhs91_337"
" id:val92_338"
" val-rhs93_339"
" body94_340)"
"(let-values(((s_342)(cdr s_334)))"
"(let-values(((s_343)"
"(if(syntax?$1 s_342)"
"(syntax-e$1 s_342)"
" s_342)))"
"(if(pair? s_343)"
"(let-values(((id:trans95_344"
" trans-rhs96_345)"
"(let-values(((s_349)"
"(car"
" s_343)))"
"(let-values(((s_350)"
"(if(syntax?$1"
" s_349)"
"(syntax-e$1"
" s_349)"
" s_349)))"
"(let-values(((flat-s_351)"
"(to-syntax-list.1"
" s_350)))"
"(if(not flat-s_351)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_327))"
"(let-values()"
"(let-values(((id:trans_352"
" trans-rhs_353)"
"(let-values()"
"(begin"
"(if(list?"
" lst_354)"
"(void)"
"(let-values()"
"(in-list"
" lst_354)))"
"((letrec-values(((for-loop_355)"
"(lambda(id:trans_356"
" trans-rhs_357"
" lst_358)"
"(if(pair?"
" lst_358)"
"(let-values(((s_359)"
"(unsafe-car"
" lst_358)))"
"(let-values(((id:trans_360"
" trans-rhs_361)"
"(let-values()"
"(let-values(((id:trans_364"
" trans-rhs_365)"
"(let-values()"
"(let-values(((id:trans126_366"
" trans-rhs127_367)"
"(let-values()"
"(let-values(((s_368)"
"(if(syntax?$1"
" s_359)"
"(syntax-e$1"
" s_359)"
" s_359)))"
"(if(pair?"
" s_368)"
"(let-values(((id:trans100_369)"
"(let-values(((s_371)"
"(car"
" s_368)))"
"(let-values(((s_372)"
"(if(syntax?$1"
" s_371)"
"(syntax-e$1"
" s_371)"
" s_371)))"
"(let-values(((flat-s_373)"
"(to-syntax-list.1"
" s_372)))"
"(if(not"
" flat-s_373)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_327))"
"(let-values()"
"(let-values(((id:trans_374)"
"(let-values()"
"(begin"
"(if(list?"
" lst_375)"
"(void)"
"(let-values()"
"(in-list"
" lst_375)))"
"((letrec-values(((for-loop_376)"
"(lambda(id:trans_377"
" lst_378)"
"(if(pair?"
" lst_378)"
"(let-values(((s_379)"
"(unsafe-car"
" lst_378)))"
"(let-values(((id:trans_380)"
"(let-values()"
"(let-values(((id:trans_382)"
"(let-values()"
"(let-values(((id:trans128_383)"
"(let-values()"
"(if(let-values(((or-part_384)"
"(if(syntax?$1"
" s_379)"
"(symbol?"
"(syntax-e$1"
" s_379))"
" #f)))"
"(if or-part_384"
" or-part_384"
"(symbol?"
" s_379)))"
" s_379"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_327"
" s_379)))))"
"(cons"
" id:trans128_383"
" id:trans_381)))))"
"(values"
" id:trans_382)))))"
"(for-loop_376"
" id:trans_380"
"(unsafe-cdr"
" lst_378))))"
" id:trans_377))))"
" for-loop_376)"
" null"
" lst_375)))))"
"(alt-reverse"
" id:trans_374))))))))"
"((trans-rhs101_370)"
"(let-values(((s_385)"
"(cdr"
" s_368)))"
"(let-values(((s_386)"
"(if(syntax?$1"
" s_385)"
"(syntax-e$1"
" s_385)"
" s_385)))"
"(if(pair?"
" s_386)"
"(let-values(((trans-rhs102_387)"
"(let-values(((s_388)"
"(car"
" s_386)))"
" s_388))"
"(()"
"(let-values(((s_389)"
"(cdr"
" s_386)))"
"(let-values(((s_390)"
"(if(syntax?$1"
" s_389)"
"(syntax-e$1"
" s_389)"
" s_389)))"
"(if(null?"
" s_390)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_327))))))"
"(values"
" trans-rhs102_387))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_327))))))"
"(values"
" id:trans100_369"
" trans-rhs101_370))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_327))))))"
"(values"
"(cons"
" id:trans126_366"
" id:trans_362)"
"(cons"
" trans-rhs127_367"
" trans-rhs_363))))))"
"(values"
" id:trans_364"
" trans-rhs_365)))))"
"(for-loop_355"
" id:trans_360"
" trans-rhs_361"
"(unsafe-cdr"
" lst_358))))"
"(values"
" id:trans_356"
" trans-rhs_357)))))"
" for-loop_355)"
" null"
" null"
" lst_354)))))"
"(values"
"(alt-reverse"
" id:trans_352)"
"(alt-reverse"
" trans-rhs_353)))))))))"
"((id:val97_346"
" val-rhs98_347"
" body99_348)"
"(let-values(((s_391)"
"(cdr"
" s_343)))"
"(let-values(((s_392)"
"(if(syntax?$1"
" s_391)"
"(syntax-e$1"
" s_391)"
" s_391)))"
"(if(pair? s_392)"
"(let-values(((id:val103_393"
" val-rhs104_394)"
"(let-values(((s_396)"
"(car"
" s_392)))"
"(let-values(((s_397)"
"(if(syntax?$1"
" s_396)"
"(syntax-e$1"
" s_396)"
" s_396)))"
"(let-values(((flat-s_398)"
"(to-syntax-list.1"
" s_397)))"
"(if(not"
" flat-s_398)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_327))"
"(let-values()"
"(let-values(((id:val_399"
" val-rhs_400)"
"(let-values()"
"(begin"
"(if(list?"
" lst_401)"
"(void)"
"(let-values()"
"(in-list"
" lst_401)))"
"((letrec-values(((for-loop_402)"
"(lambda(id:val_403"
" val-rhs_404"
" lst_405)"
"(if(pair?"
" lst_405)"
"(let-values(((s_406)"
"(unsafe-car"
" lst_405)))"
"(let-values(((id:val_407"
" val-rhs_408)"
"(let-values()"
"(let-values(((id:val_411"
" val-rhs_412)"
"(let-values()"
"(let-values(((id:val129_413"
" val-rhs130_414)"
"(let-values()"
"(let-values(((s_415)"
"(if(syntax?$1"
" s_406)"
"(syntax-e$1"
" s_406)"
" s_406)))"
"(if(pair?"
" s_415)"
"(let-values(((id:val106_416)"
"(let-values(((s_418)"
"(car"
" s_415)))"
"(let-values(((s_419)"
"(if(syntax?$1"
" s_418)"
"(syntax-e$1"
" s_418)"
" s_418)))"
"(let-values(((flat-s_420)"
"(to-syntax-list.1"
" s_419)))"
"(if(not"
" flat-s_420)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_327))"
"(let-values()"
"(let-values(((id:val_421)"
"(let-values()"
"(begin"
"(if(list?"
" lst_422)"
"(void)"
"(let-values()"
"(in-list"
" lst_422)))"
"((letrec-values(((for-loop_423)"
"(lambda(id:val_424"
" lst_425)"
"(if(pair?"
" lst_425)"
"(let-values(((s_426)"
"(unsafe-car"
" lst_425)))"
"(let-values(((id:val_427)"
"(let-values()"
"(let-values(((id:val_429)"
"(let-values()"
"(let-values(((id:val131_430)"
"(let-values()"
"(if(let-values(((or-part_431)"
"(if(syntax?$1"
" s_426)"
"(symbol?"
"(syntax-e$1"
" s_426))"
" #f)))"
"(if or-part_431"
" or-part_431"
"(symbol?"
" s_426)))"
" s_426"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_327"
" s_426)))))"
"(cons"
" id:val131_430"
" id:val_428)))))"
"(values"
" id:val_429)))))"
"(for-loop_423"
" id:val_427"
"(unsafe-cdr"
" lst_425))))"
" id:val_424))))"
" for-loop_423)"
" null"
" lst_422)))))"
"(alt-reverse"
" id:val_421))))))))"
"((val-rhs107_417)"
"(let-values(((s_432)"
"(cdr"
" s_415)))"
"(let-values(((s_433)"
"(if(syntax?$1"
" s_432)"
"(syntax-e$1"
" s_432)"
" s_432)))"
"(if(pair?"
" s_433)"
"(let-values(((val-rhs108_434)"
"(let-values(((s_435)"
"(car"
" s_433)))"
" s_435))"
"(()"
"(let-values(((s_436)"
"(cdr"
" s_433)))"
"(let-values(((s_437)"
"(if(syntax?$1"
" s_436)"
"(syntax-e$1"
" s_436)"
" s_436)))"
"(if(null?"
" s_437)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_327))))))"
"(values"
" val-rhs108_434))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_327))))))"
"(values"
" id:val106_416"
" val-rhs107_417))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_327))))))"
"(values"
"(cons"
" id:val129_413"
" id:val_409)"
"(cons"
" val-rhs130_414"
" val-rhs_410))))))"
"(values"
" id:val_411"
" val-rhs_412)))))"
"(for-loop_402"
" id:val_407"
" val-rhs_408"
"(unsafe-cdr"
" lst_405))))"
"(values"
" id:val_403"
" val-rhs_404)))))"
" for-loop_402)"
" null"
" null"
" lst_401)))))"
"(values"
"(alt-reverse"
" id:val_399)"
"(alt-reverse"
" val-rhs_400)))))))))"
"((body105_395)"
"(let-values(((s_438)"
"(cdr"
" s_392)))"
"(let-values(((s_439)"
"(if(syntax?$1"
" s_438)"
"(syntax-e$1"
" s_438)"
" s_438)))"
"(let-values(((flat-s_440)"
"(to-syntax-list.1"
" s_439)))"
"(if(not"
" flat-s_440)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_327))"
"(if(null?"
" flat-s_440)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_327))"
"(let-values()"
" flat-s_440))))))))"
"(values"
" id:val103_393"
" val-rhs104_394"
" body105_395))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_327))))))"
"(values"
" id:trans95_344"
" trans-rhs96_345"
" id:val97_346"
" val-rhs98_347"
" body99_348))"
"(raise-syntax-error$1"
" #f"
"                                                                                 \"bad syntax\""
" orig-s_327))))))"
"(values"
" letrec-syntaxes+values89_335"
" id:trans90_336"
" trans-rhs91_337"
" id:val92_338"
" val-rhs93_339"
" body94_340))"
"                                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_327)))))"
"(values"
" #t"
" letrec-syntaxes+values83_328"
" id:trans84_329"
" trans-rhs85_330"
" id:val86_331"
" val-rhs87_332"
" body88_333)))"
"(values #f #f #f #f #f #f #f)))))"
"(let-values(((ok?_286 let-values109_287 id:val110_288 val-rhs111_289 body112_290)"
"(let-values()"
"(if(if(not syntaxes?_254) #t #f)"
"(let-values()"
"(let-values(((let-values109_443 id:val110_444 val-rhs111_445 body112_446)"
"(let-values(((s_447)"
"(if(syntax?$1 s_441)"
"(syntax-e$1 s_441)"
" s_441)))"
"(if(pair? s_447)"
"(let-values(((let-values113_448)"
"(let-values(((s_452)(car s_447))) s_452))"
"((id:val114_449 val-rhs115_450 body116_451)"
"(let-values(((s_453)(cdr s_447)))"
"(let-values(((s_454)"
"(if(syntax?$1 s_453)"
"(syntax-e$1 s_453)"
" s_453)))"
"(if(pair? s_454)"
"(let-values(((id:val117_455"
" val-rhs118_456)"
"(let-values(((s_458)"
"(car"
" s_454)))"
"(let-values(((s_459)"
"(if(syntax?$1"
" s_458)"
"(syntax-e$1"
" s_458)"
" s_458)))"
"(let-values(((flat-s_460)"
"(to-syntax-list.1"
" s_459)))"
"(if(not"
" flat-s_460)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_442))"
"(let-values()"
"(let-values(((id:val_461"
" val-rhs_462)"
"(let-values()"
"(begin"
"(if(list?"
" lst_463)"
"(void)"
"(let-values()"
"(in-list"
" lst_463)))"
"((letrec-values(((for-loop_464)"
"(lambda(id:val_465"
" val-rhs_466"
" lst_467)"
"(if(pair?"
" lst_467)"
"(let-values(((s_468)"
"(unsafe-car"
" lst_467)))"
"(let-values(((id:val_469"
" val-rhs_470)"
"(let-values()"
"(let-values(((id:val_473"
" val-rhs_474)"
"(let-values()"
"(let-values(((id:val132_475"
" val-rhs133_476)"
"(let-values()"
"(let-values(((s_477)"
"(if(syntax?$1"
" s_468)"
"(syntax-e$1"
" s_468)"
" s_468)))"
"(if(pair?"
" s_477)"
"(let-values(((id:val120_478)"
"(let-values(((s_480)"
"(car"
" s_477)))"
"(let-values(((s_481)"
"(if(syntax?$1"
" s_480)"
"(syntax-e$1"
" s_480)"
" s_480)))"
"(let-values(((flat-s_482)"
"(to-syntax-list.1"
" s_481)))"
"(if(not"
" flat-s_482)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_442))"
"(let-values()"
"(let-values(((id:val_483)"
"(let-values()"
"(begin"
"(if(list?"
" lst_484)"
"(void)"
"(let-values()"
"(in-list"
" lst_484)))"
"((letrec-values(((for-loop_485)"
"(lambda(id:val_486"
" lst_487)"
"(if(pair?"
" lst_487)"
"(let-values(((s_488)"
"(unsafe-car"
" lst_487)))"
"(let-values(((id:val_489)"
"(let-values()"
"(let-values(((id:val_491)"
"(let-values()"
"(let-values(((id:val134_492)"
"(let-values()"
"(if(let-values(((or-part_493)"
"(if(syntax?$1"
" s_488)"
"(symbol?"
"(syntax-e$1"
" s_488))"
" #f)))"
"(if or-part_493"
" or-part_493"
"(symbol?"
" s_488)))"
" s_488"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_442"
" s_488)))))"
"(cons"
" id:val134_492"
" id:val_490)))))"
"(values"
" id:val_491)))))"
"(for-loop_485"
" id:val_489"
"(unsafe-cdr"
" lst_487))))"
" id:val_486))))"
" for-loop_485)"
" null"
" lst_484)))))"
"(alt-reverse"
" id:val_483))))))))"
"((val-rhs121_479)"
"(let-values(((s_494)"
"(cdr"
" s_477)))"
"(let-values(((s_495)"
"(if(syntax?$1"
" s_494)"
"(syntax-e$1"
" s_494)"
" s_494)))"
"(if(pair?"
" s_495)"
"(let-values(((val-rhs122_496)"
"(let-values(((s_497)"
"(car"
" s_495)))"
" s_497))"
"(()"
"(let-values(((s_498)"
"(cdr"
" s_495)))"
"(let-values(((s_499)"
"(if(syntax?$1"
" s_498)"
"(syntax-e$1"
" s_498)"
" s_498)))"
"(if(null?"
" s_499)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_442))))))"
"(values"
" val-rhs122_496))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_442))))))"
"(values"
" id:val120_478"
" val-rhs121_479))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_442))))))"
"(values"
"(cons"
" id:val132_475"
" id:val_471)"
"(cons"
" val-rhs133_476"
" val-rhs_472))))))"
"(values"
" id:val_473"
" val-rhs_474)))))"
"(for-loop_464"
" id:val_469"
" val-rhs_470"
"(unsafe-cdr"
" lst_467))))"
"(values"
" id:val_465"
" val-rhs_466)))))"
" for-loop_464)"
" null"
" null"
" lst_463)))))"
"(values"
"(alt-reverse"
" id:val_461)"
"(alt-reverse"
" val-rhs_462)))))))))"
"((body119_457)"
"(let-values(((s_500)"
"(cdr"
" s_454)))"
"(let-values(((s_501)"
"(if(syntax?$1"
" s_500)"
"(syntax-e$1"
" s_500)"
" s_500)))"
"(let-values(((flat-s_502)"
"(to-syntax-list.1"
" s_501)))"
"(if(not"
" flat-s_502)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_442))"
"(if(null?"
" flat-s_502)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_442))"
"(let-values()"
" flat-s_502))))))))"
"(values"
" id:val117_455"
" val-rhs118_456"
" body119_457))"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_442))))))"
"(values"
" let-values113_448"
" id:val114_449"
" val-rhs115_450"
" body116_451))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_442)))))"
"(values #t let-values109_443 id:val110_444 val-rhs111_445 body112_446)))"
"(values #f #f #f #f #f)))))"
"(let-values(((sc_305)(new-scope 'local)))"
"(let-values(((phase_306)(expand-context-phase ctx_259)))"
"(let-values(((frame-id_307)(if syntaxes?_254(make-reference-record) #f)))"
"(let-values(((trans-idss_308)"
"(alt-reverse"
"(let-values(((lst_503)(if syntaxes?_254 id:trans84_263 null)))"
"(begin"
"(if(list? lst_503)(void)(let-values()(in-list lst_503)))"
"((letrec-values(((for-loop_504)"
"(lambda(fold-var_505 lst_506)"
"(if(pair? lst_506)"
"(let-values(((ids_507)(unsafe-car lst_506)))"
"(let-values(((fold-var_508)"
"(let-values()"
"(let-values(((fold-var_510)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list?"
" lst_511)"
"(void)"
"(let-values()"
"(in-list"
" lst_511)))"
"((letrec-values(((for-loop_512)"
"(lambda(fold-var_513"
" lst_514)"
"(if(pair?"
" lst_514)"
"(let-values(((id_515)"
"(unsafe-car"
" lst_514)))"
"(let-values(((fold-var_516)"
"(let-values()"
"(let-values(((fold-var_518)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_515"
" sc_305))"
" fold-var_517))))"
"(values"
" fold-var_518)))))"
"(for-loop_512"
" fold-var_516"
"(unsafe-cdr"
" lst_514))))"
" fold-var_513))))"
" for-loop_512)"
" null"
" lst_511)))))"
" fold-var_509))))"
"(values fold-var_510)))))"
"(for-loop_504"
" fold-var_508"
"(unsafe-cdr lst_506))))"
" fold-var_505))))"
" for-loop_504)"
" null"
" lst_503))))))"
"(let-values(((val-idss_309)"
"(alt-reverse"
"(let-values(((lst_519)(if syntaxes?_254 id:val86_265 id:val110_288)))"
"(begin"
"(if(list? lst_519)(void)(let-values()(in-list lst_519)))"
"((letrec-values(((for-loop_520)"
"(lambda(fold-var_521 lst_522)"
"(if(pair? lst_522)"
"(let-values(((ids_523)"
"(unsafe-car lst_522)))"
"(let-values(((fold-var_524)"
"(let-values()"
"(let-values(((fold-var_526)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list?"
" lst_527)"
"(void)"
"(let-values()"
"(in-list"
" lst_527)))"
"((letrec-values(((for-loop_528)"
"(lambda(fold-var_529"
" lst_530)"
"(if(pair?"
" lst_530)"
"(let-values(((id_531)"
"(unsafe-car"
" lst_530)))"
"(let-values(((fold-var_532)"
"(let-values()"
"(let-values(((fold-var_534)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_531"
" sc_305))"
" fold-var_533))))"
"(values"
" fold-var_534)))))"
"(for-loop_528"
" fold-var_532"
"(unsafe-cdr"
" lst_530))))"
" fold-var_529))))"
" for-loop_528)"
" null"
" lst_527)))))"
" fold-var_525))))"
"(values fold-var_526)))))"
"(for-loop_520"
" fold-var_524"
"(unsafe-cdr lst_522))))"
" fold-var_521))))"
" for-loop_520)"
" null"
" lst_519))))))"
"(let-values((()"
"(begin"
"(let-values(((temp123_535)(list trans-idss_308 val-idss_309)))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" temp123_535"
" phase124_536"
" s125_537"
" #f"
" #f))"
"(values))))"
"(let-values(((counter_310)(root-expand-context-counter ctx_259)))"
"(let-values(((trans-keyss_311)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_538)(void)(let-values()(in-list lst_538)))"
"((letrec-values(((for-loop_539)"
"(lambda(fold-var_540 lst_541)"
"(if(pair? lst_541)"
"(let-values(((ids_542)"
"(unsafe-car lst_541)))"
"(let-values(((fold-var_543)"
"(let-values()"
"(let-values(((fold-var_545)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list?"
" lst_546)"
"(void)"
"(let-values()"
"(in-list"
" lst_546)))"
"((letrec-values(((for-loop_547)"
"(lambda(fold-var_548"
" lst_549)"
"(if(pair?"
" lst_549)"
"(let-values(((id_550)"
"(unsafe-car"
" lst_549)))"
"(let-values(((fold-var_551)"
"(let-values()"
"(let-values(((fold-var_553)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values()"
"(add-local-binding!35.1"
" frame-id138_558"
" #t"
" s139_559"
" #t"
" id135_555"
" phase136_556"
" counter137_557)))"
" fold-var_552))))"
"(values"
" fold-var_553)))))"
"(for-loop_547"
" fold-var_551"
"(unsafe-cdr"
" lst_549))))"
" fold-var_548))))"
" for-loop_547)"
" null"
" lst_546)))))"
" fold-var_544))))"
"(values"
" fold-var_545)))))"
"(for-loop_539"
" fold-var_543"
"(unsafe-cdr lst_541))))"
" fold-var_540))))"
" for-loop_539)"
" null"
" lst_538))))))"
"(let-values(((val-keyss_312)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_560)"
"(void)"
"(let-values()(in-list lst_560)))"
"((letrec-values(((for-loop_561)"
"(lambda(fold-var_562 lst_563)"
"(if(pair? lst_563)"
"(let-values(((ids_564)"
"(unsafe-car lst_563)))"
"(let-values(((fold-var_565)"
"(let-values()"
"(let-values(((fold-var_567)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list?"
" lst_568)"
"(void)"
"(let-values()"
"(in-list"
" lst_568)))"
"((letrec-values(((for-loop_569)"
"(lambda(fold-var_570"
" lst_571)"
"(if(pair?"
" lst_571)"
"(let-values(((id_572)"
"(unsafe-car"
" lst_571)))"
"(let-values(((fold-var_573)"
"(let-values()"
"(let-values(((fold-var_575)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values()"
"(add-local-binding!35.1"
" frame-id143_580"
" #t"
" s144_581"
" #t"
" id140_577"
" phase141_578"
" counter142_579)))"
" fold-var_574))))"
"(values"
" fold-var_575)))))"
"(for-loop_569"
" fold-var_573"
"(unsafe-cdr"
" lst_571))))"
" fold-var_570))))"
" for-loop_569)"
" null"
" lst_568)))))"
" fold-var_566))))"
"(values"
" fold-var_567)))))"
"(for-loop_561"
" fold-var_565"
"(unsafe-cdr lst_563))))"
" fold-var_562))))"
" for-loop_561)"
" null"
" lst_560))))))"
"(let-values(((bodys_313)"
"(alt-reverse"
"(let-values(((lst_582)"
"(if syntaxes?_254 body88_267 body112_290)))"
"(begin"
"(if(list? lst_582)"
"(void)"
"(let-values()(in-list lst_582)))"
"((letrec-values(((for-loop_583)"
"(lambda(fold-var_584 lst_585)"
"(if(pair? lst_585)"
"(let-values(((body_586)"
"(unsafe-car"
" lst_585)))"
"(let-values(((fold-var_587)"
"(let-values()"
"(let-values(((fold-var_589)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_586"
" sc_305))"
" fold-var_588))))"
"(values"
" fold-var_589)))))"
"(for-loop_583"
" fold-var_587"
"(unsafe-cdr lst_585))))"
" fold-var_584))))"
" for-loop_583)"
" null"
" lst_582))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_590)"
"(expand-context-observer ctx_259)))"
"(if obs_590"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_590"
" renames-log-tag_257"
" val-idss_309"
"(datum->syntax$1 #f bodys_313))))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if syntaxes?_254"
"(let-values()"
"(begin"
"(let-values(((obs_591)"
"(expand-context-observer ctx_259)))"
"(if obs_591"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_591"
" 'prepare-env)))"
"(void)))"
"(let-values(((obs_592)"
"(expand-context-observer ctx_259)))"
"(if obs_592"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_592"
" 'enter-bind)))"
"(void)))))"
"(void))"
"(values))))"
"(let-values(((trans-valss_314)"
"(alt-reverse"
"(let-values(((lst_593)"
"(if syntaxes?_254 trans-rhs85_264 '())))"
"(begin"
"(if(list? lst_593)"
"(void)"
"(let-values()(in-list lst_593)))"
"(if(list? lst_594)"
"(void)"
"(let-values()(in-list lst_594)))"
"((letrec-values(((for-loop_595)"
"(lambda(fold-var_596"
" lst_597"
" lst_598)"
"(if(if(pair? lst_597)"
"(pair? lst_598)"
" #f)"
"(let-values(((rhs_599)"
"(unsafe-car"
" lst_597))"
"((ids_600)"
"(unsafe-car"
" lst_598)))"
"(let-values(((fold-var_601)"
"(let-values()"
"(let-values(((fold-var_603)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_604)"
"(expand-context-observer"
" ctx_259)))"
"(if obs_604"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_604"
" 'next)))"
"(void)))"
"(eval-for-syntaxes-binding"
"(add-scope"
" rhs_599"
" sc_305)"
" ids_600"
" ctx_259)))"
" fold-var_602))))"
"(values"
" fold-var_603)))))"
"(for-loop_595"
" fold-var_601"
"(unsafe-cdr lst_597)"
"(unsafe-cdr lst_598))))"
" fold-var_596))))"
" for-loop_595)"
" null"
" lst_593"
" lst_594))))))"
"(let-values(((rec-val-env_315)"
"(let-values()"
"(begin"
"(if(list? lst_605)"
"(void)"
"(let-values()(in-list lst_605)))"
"(if(list? lst_606)"
"(void)"
"(let-values()(in-list lst_606)))"
"((letrec-values(((for-loop_607)"
"(lambda(env_608"
" lst_609"
" lst_610)"
"(if(if(pair? lst_609)"
"(pair? lst_610)"
" #f)"
"(let-values(((keys_611)"
"(unsafe-car"
" lst_609))"
"((ids_612)"
"(unsafe-car"
" lst_610)))"
"(let-values(((env_613)"
"(let-values()"
"(let-values()"
"(begin"
"(if(list?"
" lst_615)"
"(void)"
"(let-values()"
"(in-list"
" lst_615)))"
"(if(list?"
" lst_616)"
"(void)"
"(let-values()"
"(in-list"
" lst_616)))"
"((letrec-values(((for-loop_617)"
"(lambda(env_618"
" lst_619"
" lst_620)"
"(if(if(pair?"
" lst_619)"
"(pair?"
" lst_620)"
" #f)"
"(let-values(((key_621)"
"(unsafe-car"
" lst_619))"
"((id_622)"
"(unsafe-car"
" lst_620)))"
"(let-values(((env_623)"
"(let-values()"
"(let-values(((env_625)"
"(let-values()"
"(env-extend"
" env_624"
" key_621"
"(local-variable1.1"
" id_622)))))"
"(values"
" env_625)))))"
"(for-loop_617"
" env_623"
"(unsafe-cdr"
" lst_619)"
"(unsafe-cdr"
" lst_620))))"
" env_618))))"
" for-loop_617)"
" env_614"
" lst_615"
" lst_616))))))"
"(for-loop_607"
" env_613"
"(unsafe-cdr lst_609)"
"(unsafe-cdr lst_610))))"
" env_608))))"
" for-loop_607)"
"(expand-context-env ctx_259)"
" lst_605"
" lst_606)))))"
"(let-values(((rec-env_316)"
"(let-values()"
"(begin"
"(if(list? lst_626)"
"(void)"
"(let-values()(in-list lst_626)))"
"(if(list? lst_627)"
"(void)"
"(let-values()(in-list lst_627)))"
"(if(list? lst_628)"
"(void)"
"(let-values()(in-list lst_628)))"
"((letrec-values(((for-loop_629)"
"(lambda(env_630"
" lst_631"
" lst_632"
" lst_633)"
"(if(if(pair? lst_631)"
"(if(pair? lst_632)"
"(pair? lst_633)"
" #f)"
" #f)"
"(let-values(((keys_634)"
"(unsafe-car"
" lst_631))"
"((vals_635)"
"(unsafe-car"
" lst_632))"
"((ids_636)"
"(unsafe-car"
" lst_633)))"
"(let-values(((env_637)"
"(let-values()"
"(let-values(((env_639)"
"(let-values()"
"(let-values()"
"(begin"
"(if(list?"
" lst_640)"
"(void)"
"(let-values()"
"(in-list"
" lst_640)))"
"(if(list?"
" lst_641)"
"(void)"
"(let-values()"
"(in-list"
" lst_641)))"
"(if(list?"
" lst_642)"
"(void)"
"(let-values()"
"(in-list"
" lst_642)))"
"((letrec-values(((for-loop_643)"
"(lambda(env_644"
" lst_645"
" lst_646"
" lst_647)"
"(if(if(pair?"
" lst_645)"
"(if(pair?"
" lst_646)"
"(pair?"
" lst_647)"
" #f)"
" #f)"
"(let-values(((key_648)"
"(unsafe-car"
" lst_645))"
"((val_649)"
"(unsafe-car"
" lst_646))"
"((id_650)"
"(unsafe-car"
" lst_647)))"
"(let-values(((env_651)"
"(let-values()"
"(let-values(((env_653)"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_649"
" id_650"
" phase_306)"
"(env-extend"
" env_652"
" key_648"
" val_649)))))"
"(values"
" env_653)))))"
"(for-loop_643"
" env_651"
"(unsafe-cdr"
" lst_645)"
"(unsafe-cdr"
" lst_646)"
"(unsafe-cdr"
" lst_647))))"
" env_644))))"
" for-loop_643)"
" env_638"
" lst_640"
" lst_641"
" lst_642))))))"
"(values"
" env_639)))))"
"(for-loop_629"
" env_637"
"(unsafe-cdr lst_631)"
"(unsafe-cdr lst_632)"
"(unsafe-cdr"
" lst_633))))"
" env_630))))"
" for-loop_629)"
" rec-val-env_315"
" lst_626"
" lst_627"
" lst_628)))))"
"(let-values((()"
"(begin"
"(if syntaxes?_254"
"(let-values()"
"(let-values(((obs_654)"
"(expand-context-observer"
" ctx_259)))"
"(if obs_654"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_654"
" 'exit-bind)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((expr-ctx_317)(as-expression-context ctx_259)))"
"(let-values(((orig-rrs_318)"
"(expand-context-reference-records"
" expr-ctx_317)))"
"(let-values(((rec-ctx_319)"
"(let-values()"
"(if(expand-context? the-struct_655)"
"(let-values(((scopes146_657)"
"(cons"
" sc_305"
"(expand-context-scopes"
" ctx_259)))"
"((reference-records147_658)"
"(if split-by-reference?_256"
"(cons"
" frame-id_307"
" orig-rrs_318)"
" orig-rrs_318))"
"((binding-layer148_659)"
"(increment-binding-layer"
"(cons"
" trans-idss_308"
" val-idss_309)"
" ctx_259"
" sc_305)))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_655)"
"(root-expand-context-post-expansion-scope"
" the-struct_655)"
"(root-expand-context-top-level-bind-scope"
" the-struct_655)"
"(root-expand-context-all-scopes-stx"
" the-struct_655)"
"(root-expand-context-use-site-scopes"
" the-struct_655)"
"(root-expand-context-defined-syms"
" the-struct_655)"
"(root-expand-context-frame-id"
" the-struct_655)"
"(root-expand-context-counter"
" the-struct_655)"
"(root-expand-context-lift-key"
" the-struct_655)"
"(expand-context-to-parsed?"
" the-struct_655)"
"(expand-context-context"
" the-struct_655)"
"(expand-context-phase the-struct_655)"
"(expand-context-namespace"
" the-struct_655)"
" env145_656"
"(expand-context-user-env"
" the-struct_655)"
"(expand-context-post-expansion-scope-action"
" the-struct_655)"
" scopes146_657"
"(expand-context-def-ctx-scopes"
" the-struct_655)"
" binding-layer148_659"
" reference-records147_658"
"(expand-context-only-immediate?"
" the-struct_655)"
"(expand-context-just-once?"
" the-struct_655)"
"(expand-context-module-begin-k"
" the-struct_655)"
"(expand-context-need-eventually-defined"
" the-struct_655)"
"(expand-context-allow-unbound?"
" the-struct_655)"
"(expand-context-in-local-expand?"
" the-struct_655)"
"(expand-context-stops the-struct_655)"
"(expand-context-current-introduction-scopes"
" the-struct_655)"
"(expand-context-declared-submodule-names"
" the-struct_655)"
"(expand-context-lifts the-struct_655)"
"(expand-context-lift-envs"
" the-struct_655)"
"(expand-context-module-lifts"
" the-struct_655)"
"(expand-context-require-lifts"
" the-struct_655)"
"(expand-context-to-module-lifts"
" the-struct_655)"
"(expand-context-requires+provides"
" the-struct_655)"
"(expand-context-name the-struct_655)"
"(expand-context-observer"
" the-struct_655)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                 \"expand-context?\""
" the-struct_655)))))"
"(let-values(((letrec-values-id_320)"
"(if(not"
"(expand-context-to-parsed? ctx_259))"
"(if syntaxes?_254"
"(core-id 'letrec-values phase_306)"
" let-values109_287)"
" #f)))"
"(let-values(((rebuild-s_321)"
"(let-values()"
"(keep-as-needed55.1"
" #f"
" #f"
" ctx149_660"
" s150_661))))"
"(let-values(((val-name-idss_322)"
"(if(expand-context-to-parsed?"
" ctx_259)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_662)"
"(void)"
"(let-values()"
"(in-list lst_662)))"
"((letrec-values(((for-loop_663)"
"(lambda(fold-var_664"
" lst_665)"
"(if(pair?"
" lst_665)"
"(let-values(((val-ids_666)"
"(unsafe-car"
" lst_665)))"
"(let-values(((fold-var_667)"
"(let-values()"
"(let-values(((fold-var_669)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list?"
" lst_670)"
"(void)"
"(let-values()"
"(in-list"
" lst_670)))"
"((letrec-values(((for-loop_671)"
"(lambda(fold-var_672"
" lst_673)"
"(if(pair?"
" lst_673)"
"(let-values(((val-id_674)"
"(unsafe-car"
" lst_673)))"
"(let-values(((fold-var_675)"
"(let-values()"
"(let-values(((fold-var_677)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1"
" #f"
"(syntax-e$1"
" val-id_674)"
" val-id_674"
" val-id_674))"
" fold-var_676))))"
"(values"
" fold-var_677)))))"
"(for-loop_671"
" fold-var_675"
"(unsafe-cdr"
" lst_673))))"
" fold-var_672))))"
" for-loop_671)"
" null"
" lst_670)))))"
" fold-var_668))))"
"(values"
" fold-var_669)))))"
"(for-loop_663"
" fold-var_667"
"(unsafe-cdr"
" lst_665))))"
" fold-var_664))))"
" for-loop_663)"
" null"
" lst_662))))"
" val-idss_309)))"
"(let-values(((get-body_323)"
"(lambda()"
"(let-values((()"
"(begin"
"(let-values(((obs_679)"
"(expand-context-observer"
" ctx_259)))"
"(if obs_679"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_679"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_678)"
"(let-values()"
"(if(expand-context?"
" the-struct_680)"
"(let-values()"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_680)"
"(root-expand-context-post-expansion-scope"
" the-struct_680)"
"(root-expand-context-top-level-bind-scope"
" the-struct_680)"
"(root-expand-context-all-scopes-stx"
" the-struct_680)"
"(root-expand-context-use-site-scopes"
" the-struct_680)"
"(root-expand-context-defined-syms"
" the-struct_680)"
"(root-expand-context-frame-id"
" the-struct_680)"
"(root-expand-context-counter"
" the-struct_680)"
"(root-expand-context-lift-key"
" the-struct_680)"
"(expand-context-to-parsed?"
" the-struct_680)"
"(expand-context-context"
" the-struct_680)"
"(expand-context-phase"
" the-struct_680)"
"(expand-context-namespace"
" the-struct_680)"
"(expand-context-env"
" the-struct_680)"
"(expand-context-user-env"
" the-struct_680)"
"(expand-context-post-expansion-scope-action"
" the-struct_680)"
"(expand-context-scopes"
" the-struct_680)"
"(expand-context-def-ctx-scopes"
" the-struct_680)"
"(expand-context-binding-layer"
" the-struct_680)"
" reference-records154_681"
"(expand-context-only-immediate?"
" the-struct_680)"
"(expand-context-just-once?"
" the-struct_680)"
"(expand-context-module-begin-k"
" the-struct_680)"
"(expand-context-need-eventually-defined"
" the-struct_680)"
"(expand-context-allow-unbound?"
" the-struct_680)"
"(expand-context-in-local-expand?"
" the-struct_680)"
"(expand-context-stops"
" the-struct_680)"
"(expand-context-current-introduction-scopes"
" the-struct_680)"
"(expand-context-declared-submodule-names"
" the-struct_680)"
"(expand-context-lifts"
" the-struct_680)"
"(expand-context-lift-envs"
" the-struct_680)"
"(expand-context-module-lifts"
" the-struct_680)"
"(expand-context-require-lifts"
" the-struct_680)"
"(expand-context-to-module-lifts"
" the-struct_680)"
"(expand-context-requires+provides"
" the-struct_680)"
"(expand-context-name"
" the-struct_680)"
"(expand-context-observer"
" the-struct_680)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                           \"expand-context?\""
" the-struct_680)))))"
"(let-values(((temp152_684)"
"(let-values()"
"(as-tail-context18.1"
" ctx156_688"
" body-ctx155_687))))"
"(expand-body7.1"
" rebuild-s153_685"
" #f"
" #f"
" bodys151_683"
" temp152_684)))))))"
"(let-values(((result-s_324)"
"(if(not split-by-reference?_256)"
"(let-values()"
"(let-values(((clauses_689)"
"(alt-reverse"
"(let-values(((lst_693)"
"(if syntaxes?_254"
" val-rhs87_266"
" val-rhs111_289)))"
"(begin"
"(if(list?"
" lst_691)"
"(void)"
"(let-values()"
"(in-list"
" lst_691)))"
"(if(list?"
" lst_692)"
"(void)"
"(let-values()"
"(in-list"
" lst_692)))"
"(if(list?"
" lst_693)"
"(void)"
"(let-values()"
"(in-list"
" lst_693)))"
"((letrec-values(((for-loop_694)"
"(lambda(fold-var_695"
" lst_696"
" lst_697"
" lst_698)"
"(if(if(pair?"
" lst_696)"
"(if(pair?"
" lst_697)"
"(pair?"
" lst_698)"
" #f)"
" #f)"
"(let-values(((ids_699)"
"(unsafe-car"
" lst_696))"
"((keys_700)"
"(unsafe-car"
" lst_697))"
"((rhs_701)"
"(unsafe-car"
" lst_698)))"
"(let-values(((fold-var_702)"
"(let-values()"
"(let-values(((fold-var_704)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_706)"
"(expand-context-observer"
" ctx_259)))"
"(if obs_706"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_706"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-rhs_705)"
"(if rec?_255"
"(let-values(((temp157_707)"
"(add-scope"
" rhs_701"
" sc_305))"
"((temp158_708)"
"(as-named-context"
" rec-ctx_319"
" ids_699)))"
"(expand5.1"
" #f"
" #f"
" temp157_707"
" temp158_708))"
"(let-values(((temp160_710)"
"(as-named-context"
" expr-ctx_317"
" ids_699)))"
"(expand5.1"
" #f"
" #f"
" rhs159_709"
" temp160_710)))))"
"(if(expand-context-to-parsed?"
" ctx_259)"
"(list"
" keys_700"
" exp-rhs_705)"
"(list"
" ids_699"
" exp-rhs_705)))))"
" fold-var_703))))"
"(values"
" fold-var_704)))))"
"(for-loop_694"
" fold-var_702"
"(unsafe-cdr"
" lst_696)"
"(unsafe-cdr"
" lst_697)"
"(unsafe-cdr"
" lst_698))))"
" fold-var_695))))"
" for-loop_694)"
" null"
" lst_691"
" lst_692"
" lst_693))))))"
"(let-values(((exp-body_690)"
"(get-body_323)))"
"(begin"
"(if frame-id_307"
"(let-values()"
"(reference-record-clear!"
" frame-id_307))"
"(void))"
"(if(expand-context-to-parsed?"
" ctx_259)"
"(if rec?_255"
"(parsed-letrec-values18.1"
" rebuild-s_321"
" val-name-idss_322"
" clauses_689"
" exp-body_690)"
"(parsed-let-values17.1"
" rebuild-s_321"
" val-name-idss_322"
" clauses_689"
" exp-body_690))"
"(let-values(((temp162_712)"
"(list*"
" letrec-values-id_320"
" clauses_689"
" exp-body_690)))"
"(rebuild62.1"
" #f"
" #f"
" rebuild-s161_711"
" temp162_712)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_714)"
"(expand-context-observer"
" ctx_259)))"
"(if obs_714"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_714"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_715)"
"(expand-context-observer"
" ctx_259)))"
"(if obs_715"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_715"
" 'letrec-values)))"
"(void)))"
"(values))))"
"(let-values(((val-rhss_713)"
"(alt-reverse"
"(let-values(((lst_716)"
"(if syntaxes?_254"
" val-rhs87_266"
" val-rhs111_289)))"
"(begin"
"(if(list?"
" lst_716)"
"(void)"
"(let-values()"
"(in-list"
" lst_716)))"
"((letrec-values(((for-loop_717)"
"(lambda(fold-var_718"
" lst_719)"
"(if(pair?"
" lst_719)"
"(let-values(((rhs_720)"
"(unsafe-car"
" lst_719)))"
"(let-values(((fold-var_721)"
"(let-values()"
"(let-values(((fold-var_723)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" rhs_720"
" sc_305))"
" fold-var_722))))"
"(values"
" fold-var_723)))))"
"(for-loop_717"
" fold-var_721"
"(unsafe-cdr"
" lst_719))))"
" fold-var_718))))"
" for-loop_717)"
" null"
" lst_716))))))"
"(let-values(((temp166_728)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list?"
" lst_735)"
"(void)"
"(let-values()"
"(in-list"
" lst_735)))"
"((letrec-values(((for-loop_736)"
"(lambda(fold-var_737"
" lst_738)"
"(if(pair?"
" lst_738)"
"(let-values(((rhs_739)"
"(unsafe-car"
" lst_738)))"
"(let-values(((fold-var_740)"
"(let-values()"
"(let-values(((fold-var_742)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_741))))"
"(values"
" fold-var_742)))))"
"(for-loop_736"
" fold-var_740"
"(unsafe-cdr"
" lst_738))))"
" fold-var_737))))"
" for-loop_736)"
" null"
" lst_735)))))"
"((temp167_729)"
" #t)"
"((temp172_734)"
" #t))"
"(expand-and-split-bindings-by-reference45.1"
" rec-ctx169_731"
" frame-id168_730"
" get-body171_733"
" rebuild-s170_732"
" temp167_729"
" temp172_734"
" val-idss163_725"
" val-keyss164_726"
" val-rhss165_727"
" temp166_728)))))))))"
"(if(expand-context-to-parsed? ctx_259)"
" result-s_324"
"(attach-disappeared-transformer-bindings"
" result-s_324"
" trans-idss_308)))))))))))))))))))))))))))))))))))))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'let-values"
"(let-values(((temp173_767) 'prim-let-values))(make-let-values-form11.1 temp173_767 #f #f #f #f #f #f #f #f))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'letrec-values"
"(let-values(((temp174_769) #t)((temp175_770) 'prim-letrec-values))"
"(make-let-values-form11.1 temp175_770 temp174_769 #t #f #f #f #f #f #f))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'letrec-syntaxes+values"
"(let-values(((temp176_772) #t)"
"((temp177_773) #t)"
"((temp178_774) #t)"
"((temp179_775) 'prim-letrec-syntaxes+values)"
"((temp180_776) 'letrec-syntaxes-renames))"
"(make-let-values-form11.1 temp179_775 temp177_773 #t temp180_776 #t temp178_774 #t temp176_772 #t))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%stratified-body"
"(lambda(s_777 ctx_778)"
"(let-values((()"
"(begin"
"(let-values(((obs_795)(expand-context-observer ctx_778)))"
"(if obs_795"
"(let-values()(let-values()(call-expand-observe obs_795 'prim-#%stratified)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_779)(syntax-disarm$1 s_777)))"
"(let-values(((ok?_780 #%stratified-body181_781 body182_782)"
"(let-values()"
"(let-values()"
"(let-values(((#%stratified-body181_798 body182_799)"
"(let-values(((s_800)(if(syntax?$1 s_796)(syntax-e$1 s_796) s_796)))"
"(if(pair? s_800)"
"(let-values(((#%stratified-body183_801)"
"(let-values(((s_803)(car s_800))) s_803))"
"((body184_802)"
"(let-values(((s_804)(cdr s_800)))"
"(let-values(((s_805)"
"(if(syntax?$1 s_804)"
"(syntax-e$1 s_804)"
" s_804)))"
"(let-values(((flat-s_806)(to-syntax-list.1 s_805)))"
"(if(not flat-s_806)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_797))"
"(if(null? flat-s_806)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_797))"
"(let-values() flat-s_806))))))))"
"(values #%stratified-body183_801 body184_802))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_797)))))"
"(values #t #%stratified-body181_798 body182_799))))))"
"(let-values(((rebuild-s_793)(let-values()(keep-as-needed55.1 #f #f ctx185_807 s186_808))))"
"(let-values(((exp-body_794)"
"(let-values(((temp189_812) #t))"
"(expand-body7.1 rebuild-s190_813 temp189_812 #t temp187_810 ctx188_811))))"
"(if(expand-context-to-parsed? ctx_778)"
"(parsed-begin12.1 rebuild-s_793 exp-body_794)"
"(let-values(((temp192_815)(list*(core-id 'begin(expand-context-phase ctx_778)) exp-body_794)))"
"(rebuild62.1 #f #f rebuild-s191_814 temp192_815)))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%datum"
"(lambda(s_816 ctx_817)"
"(let-values((()"
"(begin"
"(let-values(((obs_834)(expand-context-observer ctx_817)))"
"(if obs_834"
"(let-values()(let-values()(call-expand-observe obs_834 'prim-#%datum)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_818)(syntax-disarm$1 s_816)))"
"(let-values(((ok?_819 #%datum193_820 datum194_821)"
"(let-values()"
"(let-values()"
"(let-values(((#%datum193_837 datum194_838)"
"(let-values(((s_839)(if(syntax?$1 s_835)(syntax-e$1 s_835) s_835)))"
"(if(pair? s_839)"
"(let-values(((#%datum195_840)"
"(let-values(((s_842)(car s_839))) s_842))"
"((datum196_841)(let-values(((s_843)(cdr s_839))) s_843)))"
"(values #%datum195_840 datum196_841))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_836)))))"
"(values #t #%datum193_837 datum194_838))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(if(syntax?$1 datum_832)(keyword?(syntax-e$1 datum_832)) #f)"
"(let-values()"
"                                   (raise-syntax-error$1 '#%datum \"keyword misused as an expression\" #f datum_832))"
"(void))"
"(values))))"
"(let-values(((phase_833)(expand-context-phase ctx_817)))"
"(if(expand-context-to-parsed? ctx_817)"
"(parsed-quote14.1(keep-properties-only s_816)(syntax->datum$1 datum_832))"
"(let-values(((temp198_845)(list(core-id 'quote phase_833) datum_832)))"
"(rebuild62.1 #f #f s197_844 temp198_845))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%app"
"(lambda(s_846 ctx_847)"
"(let-values((()"
"(begin"
"(let-values(((obs_863)(expand-context-observer ctx_847)))"
"(if obs_863(let-values()(let-values()(call-expand-observe obs_863 'prim-#%app)))(void)))"
"(values))))"
"(let-values(((disarmed-s_848)(syntax-disarm$1 s_846)))"
"(let-values(((ok?_849 #%app199_850 e200_851)"
"(let-values()"
"(let-values()"
"(let-values(((#%app199_866 e200_867)"
"(let-values(((s_868)(if(syntax?$1 s_864)(syntax-e$1 s_864) s_864)))"
"(if(pair? s_868)"
"(let-values(((#%app201_869)(let-values(((s_871)(car s_868))) s_871))"
"((e202_870)"
"(let-values(((s_872)(cdr s_868)))"
"(let-values(((s_873)"
"(if(syntax?$1 s_872)"
"(syntax-e$1 s_872)"
" s_872)))"
"(let-values(((flat-s_874)(to-syntax-list.1 s_873)))"
"(if(not flat-s_874)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_865))"
"(let-values() flat-s_874)))))))"
"(values #%app201_869 e202_870))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_865)))))"
"(values #t #%app199_866 e200_867))))))"
"(let-values()"
"(if(null? es_862)"
"(let-values()"
"(let-values(((phase_875)(expand-context-phase ctx_847)))"
"(if(expand-context-to-parsed? ctx_847)"
"(parsed-quote14.1(keep-properties-only s_846) null)"
"(let-values(((temp204_877)(list(core-id 'quote phase_875) null)))"
"(rebuild62.1 #f #f s203_876 temp204_877)))))"
"(let-values()"
"(let-values(((expr-ctx_878)(as-expression-context ctx_847)))"
"(let-values(((exp-es_879)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_881)(void)(let-values()(in-list lst_881)))"
"((letrec-values(((for-loop_882)"
"(lambda(fold-var_883 lst_884)"
"(if(pair? lst_884)"
"(let-values(((e_885)(unsafe-car lst_884)))"
"(let-values(((fold-var_886)"
"(let-values()"
"(let-values(((fold-var_888)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values()"
"(expand5.1"
" #f"
" #f"
" e205_889"
" expr-ctx206_890)))"
" fold-var_887))))"
"(values fold-var_888)))))"
"(for-loop_882 fold-var_886(unsafe-cdr lst_884))))"
" fold-var_883))))"
" for-loop_882)"
" null"
" lst_881))))))"
"(let-values(((prefixless_880)(cdr(syntax-e$1 disarmed-s_848))))"
"(if(expand-context-to-parsed? ctx_847)"
"(parsed-app7.1"
"(keep-properties-only(if(syntax?$1 prefixless_880) prefixless_880 s_846))"
" exp-es_879)"
"(let-values(((temp208_892)"
"(cons"
" #%app199_850"
"(if(syntax?$1 prefixless_880)"
"(let-values()(rebuild62.1 #f #f prefixless209_893 exp-es210_894))"
" exp-es_879))))"
"(rebuild62.1 #f #f s207_891 temp208_892)))))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'quote"
"(lambda(s_895 ctx_896)"
"(let-values((()"
"(begin"
"(let-values(((obs_910)(expand-context-observer ctx_896)))"
"(if obs_910(let-values()(let-values()(call-expand-observe obs_910 'prim-quote)))(void)))"
"(values))))"
"(let-values(((ok?_897 quote211_898 datum212_899)"
"(let-values(((s_911)(syntax-disarm$1 s_895)))"
"(let-values()"
"(let-values(((quote211_913 datum212_914)"
"(let-values(((s_915)(if(syntax?$1 s_911)(syntax-e$1 s_911) s_911)))"
"(if(pair? s_915)"
"(let-values(((quote213_916)(let-values(((s_918)(car s_915))) s_918))"
"((datum214_917)"
"(let-values(((s_919)(cdr s_915)))"
"(let-values(((s_920)"
"(if(syntax?$1 s_919)"
"(syntax-e$1 s_919)"
" s_919)))"
"(if(pair? s_920)"
"(let-values(((datum215_921)"
"(let-values(((s_922)(car s_920)))"
" s_922))"
"(()"
"(let-values(((s_923)(cdr s_920)))"
"(let-values(((s_924)"
"(if(syntax?$1 s_923)"
"(syntax-e$1 s_923)"
" s_923)))"
"(if(null? s_924)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"bad syntax\""
" orig-s_912))))))"
"(values datum215_921))"
"                                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_912))))))"
"(values quote213_916 datum214_917))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_912)))))"
"(values #t quote211_913 datum212_914))))))"
"(if(expand-context-to-parsed? ctx_896)"
"(parsed-quote14.1(keep-properties-only s_895)(syntax->datum$1 datum212_899))"
" s_895))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'quote-syntax"
"(lambda(s_925 ctx_926)"
"(let-values((()"
"(begin"
"(let-values(((obs_954)(expand-context-observer ctx_926)))"
"(if obs_954"
"(let-values()(let-values()(call-expand-observe obs_954 'prim-quote-syntax)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_927)(syntax-disarm$1 s_925)))"
"(let-values(((ok?_928 quote-syntax216_929 datum217_930)"
"(let-values()"
"(if(let-values(((s_956)(if(syntax?$1 s_955)(syntax-e$1 s_955) s_955)))"
"(if(pair? s_956)"
"(if(let-values(((s_957)(car s_956))) #t)"
"(let-values(((s_958)(cdr s_956)))"
"(let-values(((s_959)(if(syntax?$1 s_958)(syntax-e$1 s_958) s_958)))"
"(if(pair? s_959)"
"(if(let-values(((s_960)(car s_959))) #t)"
"(let-values(((s_961)(cdr s_959)))"
"(let-values(((s_962)(if(syntax?$1 s_961)(syntax-e$1 s_961) s_961)))"
"(if(pair? s_962)"
"(if(let-values(((s_963)(car s_962)))"
"(let-values(((s_964)"
"(if(syntax?$1 s_963)(syntax-e$1 s_963) s_963)))"
"(eq? '#:local s_964)))"
"(let-values(((s_965)(cdr s_962)))"
"(let-values(((s_966)"
"(if(syntax?$1 s_965)(syntax-e$1 s_965) s_965)))"
"(null? s_966)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((quote-syntax216_968 datum217_969)"
"(let-values(((s_970)(if(syntax?$1 s_955)(syntax-e$1 s_955) s_955)))"
"(let-values(((quote-syntax218_971)"
"(let-values(((s_973)(car s_970))) s_973))"
"((datum219_972)"
"(let-values(((s_974)(cdr s_970)))"
"(let-values(((s_975)"
"(if(syntax?$1 s_974)"
"(syntax-e$1 s_974)"
" s_974)))"
"(let-values(((datum220_976)"
"(let-values(((s_977)(car s_975)))"
" s_977))"
"(()"
"(let-values(((s_978)(cdr s_975)))"
"(let-values(((s_979)"
"(if(syntax?$1 s_978)"
"(syntax-e$1 s_978)"
" s_978)))"
"(let-values((()"
"(let-values(((s_980)"
"(car"
" s_979)))"
"(let-values(((s_981)"
"(if(syntax?$1"
" s_980)"
"(syntax-e$1"
" s_980)"
" s_980)))"
"(values))))"
"(()"
"(let-values(((s_982)"
"(cdr"
" s_979)))"
"(let-values(((s_983)"
"(if(syntax?$1"
" s_982)"
"(syntax-e$1"
" s_982)"
" s_982)))"
"(values)))))"
"(values))))))"
"(values datum220_976))))))"
"(values quote-syntax218_971 datum219_972)))))"
"(values #t quote-syntax216_968 datum217_969)))"
"(values #f #f #f)))))"
"(let-values(((ok?_941 quote-syntax221_942 datum222_943)"
"(let-values()"
"(if(if(not ok?_928) #t #f)"
"(let-values()"
"(let-values(((quote-syntax221_986 datum222_987)"
"(let-values(((s_988)(if(syntax?$1 s_984)(syntax-e$1 s_984) s_984)))"
"(if(pair? s_988)"
"(let-values(((quote-syntax223_989)"
"(let-values(((s_991)(car s_988))) s_991))"
"((datum224_990)"
"(let-values(((s_992)(cdr s_988)))"
"(let-values(((s_993)"
"(if(syntax?$1 s_992)"
"(syntax-e$1 s_992)"
" s_992)))"
"(if(pair? s_993)"
"(let-values(((datum225_994)"
"(let-values(((s_995)(car s_993)))"
" s_995))"
"(()"
"(let-values(((s_996)(cdr s_993)))"
"(let-values(((s_997)"
"(if(syntax?$1"
" s_996)"
"(syntax-e$1"
" s_996)"
" s_996)))"
"(if(null? s_997)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_985))))))"
"(values datum225_994))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_985))))))"
"(values quote-syntax223_989 datum224_990))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_985)))))"
"(values #t quote-syntax221_986 datum222_987)))"
"(values #f #f #f)))))"
"(if ok?_928"
"(let-values()"
"(let-values((()"
"(begin"
"(reference-records-all-used!(expand-context-reference-records ctx_926))"
"(values))))"
"(let-values(((ok?_998 _226_999 _227_1000 kw228_1001)"
"(let-values()"
"(let-values()"
"(let-values(((_226_1016 _227_1017 kw228_1018)"
"(let-values(((s_1019)"
"(if(syntax?$1 s_1014)(syntax-e$1 s_1014) s_1014)))"
"(if(pair? s_1019)"
"(let-values(((_229_1020)"
"(let-values(((s_1023)(car s_1019))) s_1023))"
"((_230_1021 kw231_1022)"
"(let-values(((s_1024)(cdr s_1019)))"
"(let-values(((s_1025)"
"(if(syntax?$1 s_1024)"
"(syntax-e$1 s_1024)"
" s_1024)))"
"(if(pair? s_1025)"
"(let-values(((_232_1026)"
"(let-values(((s_1028)"
"(car s_1025)))"
" s_1028))"
"((kw233_1027)"
"(let-values(((s_1029)"
"(cdr s_1025)))"
"(let-values(((s_1030)"
"(if(syntax?$1"
" s_1029)"
"(syntax-e$1"
" s_1029)"
" s_1029)))"
"(if(pair? s_1030)"
"(let-values(((kw234_1031)"
"(let-values(((s_1032)"
"(car"
" s_1030)))"
" s_1032))"
"(()"
"(let-values(((s_1033)"
"(cdr"
" s_1030)))"
"(let-values(((s_1034)"
"(if(syntax?$1"
" s_1033)"
"(syntax-e$1"
" s_1033)"
" s_1033)))"
"(if(null?"
" s_1034)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                      \"bad syntax\""
" orig-s_1015))))))"
"(values kw234_1031))"
"(raise-syntax-error$1"
" #f"
"                                                                                                  \"bad syntax\""
" orig-s_1015))))))"
"(values _232_1026 kw233_1027))"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_1015))))))"
"(values _229_1020 _230_1021 kw231_1022))"
"                                                         (raise-syntax-error$1 #f \"bad syntax\" orig-s_1015)))))"
"(values #t _226_1016 _227_1017 kw228_1018))))))"
"(if(expand-context-to-parsed? ctx_926)"
"(parsed-quote-syntax15.1(keep-properties-only s_925) datum217_930)"
"(let-values(((temp236_1036)(list quote-syntax216_929 datum217_930 kw228_1001)))"
"(rebuild62.1 #f #f s235_1035 temp236_1036))))))"
"(let-values()"
"(let-values(((datum-s_1037)(remove-scopes datum222_943(expand-context-scopes ctx_926))))"
"(if(expand-context-to-parsed? ctx_926)"
"(parsed-quote-syntax15.1(keep-properties-only s_925) datum-s_1037)"
"(let-values(((temp238_1039)(list quote-syntax221_942 datum-s_1037)))"
"(rebuild62.1 #f #f s237_1038 temp238_1039)))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'if"
"(lambda(s_1040 ctx_1041)"
"(let-values((()"
"(begin"
"(let-values(((obs_1068)(expand-context-observer ctx_1041)))"
"(if obs_1068(let-values()(let-values()(call-expand-observe obs_1068 'prim-if)))(void)))"
"(values))))"
"(let-values(((disarmed-s_1042)(syntax-disarm$1 s_1040)))"
"(let-values(((ok?_1043 if239_1044 tst240_1045 thn241_1046 els242_1047)"
"(let-values()"
"(let-values()"
"(let-values(((if239_1071 tst240_1072 thn241_1073 els242_1074)"
"(let-values(((s_1075)(if(syntax?$1 s_1069)(syntax-e$1 s_1069) s_1069)))"
"(if(pair? s_1075)"
"(let-values(((if243_1076)(let-values(((s_1080)(car s_1075))) s_1080))"
"((tst244_1077 thn245_1078 els246_1079)"
"(let-values(((s_1081)(cdr s_1075)))"
"(let-values(((s_1082)"
"(if(syntax?$1 s_1081)"
"(syntax-e$1 s_1081)"
" s_1081)))"
"(if(pair? s_1082)"
"(let-values(((tst247_1083)"
"(let-values(((s_1086)(car s_1082)))"
" s_1086))"
"((thn248_1084 els249_1085)"
"(let-values(((s_1087)(cdr s_1082)))"
"(let-values(((s_1088)"
"(if(syntax?$1 s_1087)"
"(syntax-e$1 s_1087)"
" s_1087)))"
"(if(pair? s_1088)"
"(let-values(((thn250_1089)"
"(let-values(((s_1091)"
"(car"
" s_1088)))"
" s_1091))"
"((els251_1090)"
"(let-values(((s_1092)"
"(cdr"
" s_1088)))"
"(let-values(((s_1093)"
"(if(syntax?$1"
" s_1092)"
"(syntax-e$1"
" s_1092)"
" s_1092)))"
"(if(pair?"
" s_1093)"
"(let-values(((els252_1094)"
"(let-values(((s_1095)"
"(car"
" s_1093)))"
" s_1095))"
"(()"
"(let-values(((s_1096)"
"(cdr"
" s_1093)))"
"(let-values(((s_1097)"
"(if(syntax?$1"
" s_1096)"
"(syntax-e$1"
" s_1096)"
" s_1096)))"
"(if(null?"
" s_1097)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_1070))))))"
"(values"
" els252_1094))"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_1070))))))"
"(values"
" thn250_1089"
" els251_1090))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1070))))))"
"(values tst247_1083 thn248_1084 els249_1085))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_1070))))))"
"(values if243_1076 tst244_1077 thn245_1078 els246_1079))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1070)))))"
"(values #t if239_1071 tst240_1072 thn241_1073 els242_1074))))))"
"(let-values(((expr-ctx_1062)(as-expression-context ctx_1041)))"
"(let-values(((tail-ctx_1063)(let-values()(as-tail-context18.1 ctx254_1100 expr-ctx253_1099))))"
"(let-values(((rebuild-s_1064)(let-values()(keep-as-needed55.1 #f #f ctx255_1101 s256_1102))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1103)(expand-context-observer ctx_1041)))"
"(if obs_1103"
"(let-values()(let-values()(call-expand-observe obs_1103 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((exp-tst_1065)(let-values()(expand5.1 #f #f temp257_1104 expr-ctx258_1105))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1106)(expand-context-observer ctx_1041)))"
"(if obs_1106"
"(let-values()(let-values()(call-expand-observe obs_1106 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-thn_1066)(let-values()(expand5.1 #f #f temp259_1107 tail-ctx260_1108))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1109)(expand-context-observer ctx_1041)))"
"(if obs_1109"
"(let-values()(let-values()(call-expand-observe obs_1109 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-els_1067)"
"(let-values()(expand5.1 #f #f temp261_1110 tail-ctx262_1111))))"
"(if(expand-context-to-parsed? ctx_1041)"
"(parsed-if8.1 rebuild-s_1064 exp-tst_1065 exp-thn_1066 exp-els_1067)"
"(let-values(((temp264_1113)(list if239_1044 exp-tst_1065 exp-thn_1066 exp-els_1067)))"
"(rebuild62.1 #f #f rebuild-s263_1112 temp264_1113))))))))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'with-continuation-mark"
"(lambda(s_1114 ctx_1115)"
"(let-values((()"
"(begin"
"(let-values(((obs_1141)(expand-context-observer ctx_1115)))"
"(if obs_1141"
"(let-values()(let-values()(call-expand-observe obs_1141 'prim-with-continuation-mark)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1116)(syntax-disarm$1 s_1114)))"
"(let-values(((ok?_1117 with-continuation-mark265_1118 key266_1119 val267_1120 body268_1121)"
"(let-values()"
"(let-values()"
"(let-values(((with-continuation-mark265_1144 key266_1145 val267_1146 body268_1147)"
"(let-values(((s_1148)(if(syntax?$1 s_1142)(syntax-e$1 s_1142) s_1142)))"
"(if(pair? s_1148)"
"(let-values(((with-continuation-mark269_1149)"
"(let-values(((s_1153)(car s_1148))) s_1153))"
"((key270_1150 val271_1151 body272_1152)"
"(let-values(((s_1154)(cdr s_1148)))"
"(let-values(((s_1155)"
"(if(syntax?$1 s_1154)"
"(syntax-e$1 s_1154)"
" s_1154)))"
"(if(pair? s_1155)"
"(let-values(((key273_1156)"
"(let-values(((s_1159)(car s_1155)))"
" s_1159))"
"((val274_1157 body275_1158)"
"(let-values(((s_1160)(cdr s_1155)))"
"(let-values(((s_1161)"
"(if(syntax?$1 s_1160)"
"(syntax-e$1 s_1160)"
" s_1160)))"
"(if(pair? s_1161)"
"(let-values(((val276_1162)"
"(let-values(((s_1164)"
"(car"
" s_1161)))"
" s_1164))"
"((body277_1163)"
"(let-values(((s_1165)"
"(cdr"
" s_1161)))"
"(let-values(((s_1166)"
"(if(syntax?$1"
" s_1165)"
"(syntax-e$1"
" s_1165)"
" s_1165)))"
"(if(pair?"
" s_1166)"
"(let-values(((body278_1167)"
"(let-values(((s_1168)"
"(car"
" s_1166)))"
" s_1168))"
"(()"
"(let-values(((s_1169)"
"(cdr"
" s_1166)))"
"(let-values(((s_1170)"
"(if(syntax?$1"
" s_1169)"
"(syntax-e$1"
" s_1169)"
" s_1169)))"
"(if(null?"
" s_1170)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_1143))))))"
"(values"
" body278_1167))"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_1143))))))"
"(values"
" val276_1162"
" body277_1163))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1143))))))"
"(values key273_1156 val274_1157 body275_1158))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_1143))))))"
"(values"
" with-continuation-mark269_1149"
" key270_1150"
" val271_1151"
" body272_1152))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1143)))))"
"(values #t with-continuation-mark265_1144 key266_1145 val267_1146 body268_1147))))))"
"(let-values(((expr-ctx_1136)(as-expression-context ctx_1115)))"
"(let-values(((rebuild-s_1137)(let-values()(keep-as-needed55.1 #f #f ctx279_1171 s280_1172))))"
"(let-values(((exp-key_1138)(let-values()(expand5.1 #f #f temp281_1173 expr-ctx282_1174))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1175)(expand-context-observer ctx_1115)))"
"(if obs_1175"
"(let-values()(let-values()(call-expand-observe obs_1175 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-val_1139)(let-values()(expand5.1 #f #f temp283_1176 expr-ctx284_1177))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1178)(expand-context-observer ctx_1115)))"
"(if obs_1178"
"(let-values()(let-values()(call-expand-observe obs_1178 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_1140)"
"(let-values(((temp286_1180)"
"(let-values()"
"(as-tail-context18.1 ctx288_1183 expr-ctx287_1182))))"
"(expand5.1 #f #f temp285_1179 temp286_1180))))"
"(if(expand-context-to-parsed? ctx_1115)"
"(parsed-with-continuation-mark10.1 rebuild-s_1137 exp-key_1138 exp-val_1139 exp-body_1140)"
"(let-values(((temp290_1185)"
"(list"
" with-continuation-mark265_1118"
" exp-key_1138"
" exp-val_1139"
" exp-body_1140)))"
"(rebuild62.1 #f #f rebuild-s289_1184 temp290_1185))))))))))))))))"
" print-values)"
"(define-values"
"(make-begin20.1)"
"(lambda(last-is-tail?15_1192 list-start-index14_1193 log-tag18_1194 parsed-begin19_1195)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(lambda(s_1200 ctx_1201)"
"(let-values((()"
"(begin"
"(let-values(((obs_1221)(expand-context-observer ctx_1201)))"
"(if obs_1221"
"(let-values()(let-values()(call-expand-observe obs_1221 log-tag_1196)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1202)(syntax-disarm$1 s_1200)))"
"(let-values(((ok?_1203 begin291_1204 e292_1205)"
"(let-values()"
"(let-values()"
"(let-values(((begin291_1224 e292_1225)"
"(let-values(((s_1226)"
"(if(syntax?$1 s_1222)(syntax-e$1 s_1222) s_1222)))"
"(if(pair? s_1226)"
"(let-values(((begin293_1227)"
"(let-values(((s_1229)(car s_1226))) s_1229))"
"((e294_1228)"
"(let-values(((s_1230)(cdr s_1226)))"
"(let-values(((s_1231)"
"(if(syntax?$1 s_1230)"
"(syntax-e$1 s_1230)"
" s_1230)))"
"(let-values(((flat-s_1232)"
"(to-syntax-list.1 s_1231)))"
"(if(not flat-s_1232)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                 \"bad syntax\""
" orig-s_1223))"
"(if(null? flat-s_1232)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_1223))"
"(let-values() flat-s_1232))))))))"
"(values begin293_1227 e294_1228))"
"                                                        (raise-syntax-error$1 #f \"bad syntax\" orig-s_1223)))))"
"(values #t begin291_1224 e292_1225))))))"
"(let-values(((expr-ctx_1216)"
"(if last-is-tail?_1199"
"(as-begin-expression-context ctx_1201)"
"(as-expression-context ctx_1201))))"
"(let-values(((rebuild-s_1217)"
"(let-values()(keep-as-needed55.1 #f #f ctx295_1233 s296_1234))))"
"(let-values()"
"(let-values(((last-i_1219)(sub1(length es_1218))))"
"(let-values(((exp-es_1220)"
"(alt-reverse"
"(let-values(((start_1236) 0))"
"(begin"
"(if(list? lst_1235)(void)(let-values()(in-list lst_1235)))"
"(if(exact-nonnegative-integer? start_1236)"
"(void)"
"(let-values()(in-naturals start_1236)))"
"((letrec-values(((for-loop_1237)"
"(lambda(fold-var_1238 lst_1239 pos_1240)"
"(if(if(pair? lst_1239) #t #f)"
"(let-values(((e_1241)(unsafe-car lst_1239)))"
"(let-values(((fold-var_1243)"
"(let-values()"
"(let-values(((fold-var_1245)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(if(="
" i_1242"
" list-start-index_1198)"
"(let-values()"
"(let-values(((obs_1246)"
"(expand-context-observer"
" ctx_1201)))"
"(if obs_1246"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1246"
" 'enter-list"
"(list-tail"
" es_1218"
" i_1242))))"
"(void))))"
"(void))"
"(let-values(((obs_1247)"
"(expand-context-observer"
" ctx_1201)))"
"(if obs_1247"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1247"
" 'next)))"
"(void)))"
"(let-values(((temp298_1249)"
"(if(if last-is-tail?_1199"
"(="
" i_1242"
" last-i_1219)"
" #f)"
"(let-values()"
"(as-tail-context18.1"
" ctx300_1252"
" expr-ctx299_1251))"
" expr-ctx_1216)))"
"(expand5.1"
" #f"
" #f"
" e297_1248"
" temp298_1249))))"
" fold-var_1244))))"
"(values fold-var_1245)))))"
"(for-loop_1237"
" fold-var_1243"
"(unsafe-cdr lst_1239)"
"(+ pos_1240 1))))"
" fold-var_1238))))"
" for-loop_1237)"
" null"
" lst_1235"
" start_1236))))))"
"(begin"
"(if(if(= 1 list-start-index_1198)(null?(cdr es_1218)) #f)"
"(let-values()"
"(let-values(((obs_1253)(expand-context-observer ctx_1201)))"
"(if obs_1253"
"(let-values()"
"(let-values()(call-expand-observe obs_1253 'enter-list(cdr es_1218))))"
"(void))))"
"(void))"
"(let-values(((obs_1254)(expand-context-observer ctx_1201)))"
"(if obs_1254"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1254"
" 'exit-list"
"(list-tail exp-es_1220 list-start-index_1198))))"
"(void)))"
"(if(expand-context-to-parsed? ctx_1201)"
"(parsed-begin_1197 rebuild-s_1217 exp-es_1220)"
"(let-values(((temp302_1256)(cons begin291_1204 exp-es_1220)))"
"(rebuild62.1 #f #f rebuild-s301_1255 temp302_1256))))))))))))))))))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin"
"(let-values(((nonempty-begin_1273)"
"(let-values(((temp303_1275) 'prim-begin0)((temp305_1277) 0)((temp306_1278) #t))"
"(make-begin20.1 temp306_1278 temp305_1277 temp303_1275 parsed-begin304_1276))))"
"(lambda(s_1279 ctx_1280)"
"(let-values(((context_1281)(expand-context-context ctx_1280)))"
"(if(let-values(((or-part_1282)(eq? context_1281 'top-level)))"
"(if or-part_1282 or-part_1282(eq? context_1281 'module)))"
"(let-values()"
"(let-values(((disarmed-s_1283)(syntax-disarm$1 s_1279)))"
"(let-values(((ok?_1284 begin307_1285)"
"(let-values()"
"(if(let-values(((s_1295)(if(syntax?$1 s_1294)(syntax-e$1 s_1294) s_1294)))"
"(if(pair? s_1295)"
"(if(let-values(((s_1296)(car s_1295))) #t)"
"(let-values(((s_1297)(cdr s_1295)))"
"(let-values(((s_1298)(if(syntax?$1 s_1297)(syntax-e$1 s_1297) s_1297)))"
"(null? s_1298)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((begin307_1300)"
"(let-values(((s_1301)"
"(if(syntax?$1 s_1294)(syntax-e$1 s_1294) s_1294)))"
"(let-values(((begin308_1302)"
"(let-values(((s_1303)(car s_1301))) s_1303))"
"(()"
"(let-values(((s_1304)(cdr s_1301)))"
"(let-values(((s_1305)"
"(if(syntax?$1 s_1304)"
"(syntax-e$1 s_1304)"
" s_1304)))"
"(values)))))"
"(values begin308_1302)))))"
"(values #t begin307_1300)))"
"(values #f #f)))))"
"(if ok?_1284 s_1279(nonempty-begin_1273 s_1279 ctx_1280)))))"
"(let-values()(nonempty-begin_1273 s_1279 ctx_1280))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin0"
"(let-values(((temp309_1307) 'prim-begin0)((temp311_1309) 1)((temp312_1310) #f))"
"(make-begin20.1 temp312_1310 temp311_1309 temp309_1307 parsed-begin0310_1308))))"
" print-values)"
"(define-values"
"(register-eventual-variable!?)"
"(lambda(id_1311 ctx_1312)"
"(if(if(expand-context-need-eventually-defined ctx_1312)(>=(expand-context-phase ctx_1312) 1) #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(expand-context-need-eventually-defined ctx_1312)"
"(expand-context-phase ctx_1312)"
"(lambda(l_1313)(cons id_1311 l_1313))"
" null)"
" #t))"
"(let-values() #f))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%top"
"(let-values(((core317_1314)"
"(lambda(s315_1315 ctx316_1316 implicit-omitted?313_1317 implicit-omitted?314_1318)"
"(let-values()"
"(let-values()"
"(let-values(((implicit-omitted?_1321)"
"(if implicit-omitted?314_1318 implicit-omitted?313_1317 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1325)(expand-context-observer ctx_1320)))"
"(if obs_1325"
"(let-values()"
"(let-values()(call-expand-observe obs_1325 'prim-#%top)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1322)(syntax-disarm$1 s_1319)))"
"(let-values(((id_1323)"
"(if implicit-omitted?_1321"
"(let-values() s_1319)"
"(let-values()"
"(let-values(((ok?_1326 #%top319_1327 id320_1328)"
"(let-values()"
"(let-values()"
"(let-values(((#%top319_1341 id320_1342)"
"(let-values(((s_1343)"
"(if(syntax?$1 s_1339)"
"(syntax-e$1 s_1339)"
" s_1339)))"
"(if(pair? s_1343)"
"(let-values(((#%top321_1344)"
"(let-values(((s_1346)"
"(car"
" s_1343)))"
" s_1346))"
"((id322_1345)"
"(let-values(((s_1347)"
"(cdr"
" s_1343)))"
"(if(let-values(((or-part_1348)"
"(if(syntax?$1"
" s_1347)"
"(symbol?"
"(syntax-e$1"
" s_1347))"
" #f)))"
"(if or-part_1348"
" or-part_1348"
"(symbol?"
" s_1347)))"
" s_1347"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"not an identifier\""
" orig-s_1340"
" s_1347)))))"
"(values"
" #%top321_1344"
" id322_1345))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1340)))))"
"(values #t #%top319_1341 id320_1342))))))"
" id320_1328)))))"
"(let-values(((b_1324)"
"(let-values(((temp324_1351)(expand-context-phase ctx_1320))"
"((temp325_1352) 'ambiguous))"
"(resolve+shift30.1"
" temp325_1352"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id323_1350"
" temp324_1351))))"
"(if(eq? b_1324 'ambiguous)"
"(let-values()(raise-ambiguous-error id_1323 ctx_1320))"
"(if(if b_1324"
"(if(module-binding? b_1324)"
"(eq?"
"(module-binding-module b_1324)"
"(namespace-mpi(expand-context-namespace ctx_1320)))"
" #f)"
" #f)"
"(let-values()"
"(if(expand-context-to-parsed? ctx_1320)"
"(parsed-id2.1 id_1323 b_1324)"
"(if(top-level-module-path-index?(module-binding-module b_1324))"
"(let-values() s_1319)"
"(let-values() id_1323))))"
"(if(register-eventual-variable!? id_1323 ctx_1320)"
"(let-values()"
"(if(expand-context-to-parsed? ctx_1320)"
"(parsed-id2.1 id_1323 b_1324)"
" id_1323))"
"(let-values()"
"(if(not(expand-context-allow-unbound? ctx_1320))"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" id_1323"
" #f"
" null"
"(syntax-debug-info-string id_1323 ctx_1320)))"
"(let-values()"
"(let-values(((tl-id_1353)"
"(add-scope"
" id_1323"
"(root-expand-context-top-level-bind-scope ctx_1320))))"
"(let-values(((tl-b_1354)"
"(let-values(((temp327_1356)"
"(expand-context-phase ctx_1320)))"
"(resolve29.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" tl-id326_1355"
" temp327_1356))))"
"(if tl-b_1354"
"(let-values()"
"(if(expand-context-to-parsed? ctx_1320)"
"(parsed-top-id4.1 tl-id_1353 tl-b_1354)"
"(if implicit-omitted?_1321"
"(let-values() id_1323)"
"(let-values()"
"(let-values(((ok?_1357 #%top328_1358 id329_1359)"
"(let-values()"
"(let-values()"
"(let-values(((#%top328_1372"
" id329_1373)"
"(let-values(((s_1374)"
"(if(syntax?$1"
" s_1370)"
"(syntax-e$1"
" s_1370)"
" s_1370)))"
"(if(pair? s_1374)"
"(let-values(((#%top330_1375)"
"(let-values(((s_1377)"
"(car"
" s_1374)))"
" s_1377))"
"((id331_1376)"
"(let-values(((s_1378)"
"(cdr"
" s_1374)))"
"(if(let-values(((or-part_1379)"
"(if(syntax?$1"
" s_1378)"
"(symbol?"
"(syntax-e$1"
" s_1378))"
" #f)))"
"(if or-part_1379"
" or-part_1379"
"(symbol?"
" s_1378)))"
" s_1378"
"(raise-syntax-error$1"
" #f"
"                                                                                                                      \"not an identifier\""
" orig-s_1371"
" s_1378)))))"
"(values"
" #%top330_1375"
" id331_1376))"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_1371)))))"
"(values"
" #t"
" #%top328_1372"
" id329_1373))))))"
"(let-values(((temp333_1381)"
"(cons #%top328_1358 id_1323)))"
"(rebuild62.1 #f #f s332_1380 temp333_1381)))))))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_1320)"
"(parsed-top-id4.1 id_1323 b_1324)"
" s_1319))))))))))))))))))))))"
"(case-lambda"
"((s_1382 ctx_1383)(core317_1314 s_1382 ctx_1383 #f #f))"
"((s_1384 ctx_1385 implicit-omitted?313_1386)(core317_1314 s_1384 ctx_1385 implicit-omitted?313_1386 #t))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'set!"
"(lambda(s_1387 ctx_1388)"
"(let-values((()"
"(begin"
"(let-values(((obs_1407)(expand-context-observer ctx_1388)))"
"(if obs_1407(let-values()(let-values()(call-expand-observe obs_1407 'prim-set!)))(void)))"
"(values))))"
"(let-values(((disarmed-s_1389)(syntax-disarm$1 s_1387)))"
"(let-values(((ok?_1390 set!334_1391 id335_1392 rhs336_1393)"
"(let-values()"
"(let-values()"
"(let-values(((set!334_1410 id335_1411 rhs336_1412)"
"(let-values(((s_1413)(if(syntax?$1 s_1408)(syntax-e$1 s_1408) s_1408)))"
"(if(pair? s_1413)"
"(let-values(((set!337_1414)"
"(let-values(((s_1417)(car s_1413))) s_1417))"
"((id338_1415 rhs339_1416)"
"(let-values(((s_1418)(cdr s_1413)))"
"(let-values(((s_1419)"
"(if(syntax?$1 s_1418)"
"(syntax-e$1 s_1418)"
" s_1418)))"
"(if(pair? s_1419)"
"(let-values(((id340_1420)"
"(let-values(((s_1422)(car s_1419)))"
"(if(let-values(((or-part_1423)"
"(if(syntax?$1"
" s_1422)"
"(symbol?"
"(syntax-e$1"
" s_1422))"
" #f)))"
"(if or-part_1423"
" or-part_1423"
"(symbol? s_1422)))"
" s_1422"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"not an identifier\""
" orig-s_1409"
" s_1422))))"
"((rhs341_1421)"
"(let-values(((s_1424)(cdr s_1419)))"
"(let-values(((s_1425)"
"(if(syntax?$1 s_1424)"
"(syntax-e$1 s_1424)"
" s_1424)))"
"(if(pair? s_1425)"
"(let-values(((rhs342_1426)"
"(let-values(((s_1427)"
"(car"
" s_1425)))"
" s_1427))"
"(()"
"(let-values(((s_1428)"
"(cdr"
" s_1425)))"
"(let-values(((s_1429)"
"(if(syntax?$1"
" s_1428)"
"(syntax-e$1"
" s_1428)"
" s_1428)))"
"(if(null?"
" s_1429)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_1409))))))"
"(values rhs342_1426))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1409))))))"
"(values id340_1420 rhs341_1421))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_1409))))))"
"(values set!337_1414 id338_1415 rhs339_1416))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1409)))))"
"(values #t set!334_1410 id335_1411 rhs336_1412))))))"
"(let-values()"
"((letrec-values(((rename-loop_1430)"
"(lambda(id_1431 from-rename?_1432)"
"(let-values(((binding_1433)"
"(let-values(((temp344_1439)(expand-context-phase ctx_1388))"
"((temp345_1440) 'ambiguous)"
"((temp346_1441) #t))"
"(resolve+shift30.1"
" temp345_1440"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp346_1441"
" #t"
" #f"
" #f"
" id343_1438"
" temp344_1439))))"
"(let-values((()"
"(begin"
"(if(eq? binding_1433 'ambiguous)"
"(let-values()(raise-ambiguous-error id_1431 ctx_1388))"
"(void))"
"(values))))"
"(let-values(((t_1434 primitive?_1435 insp_1436)"
"(if binding_1433"
"(let-values()"
"(lookup15.1 #f #f #f #f binding347_1442 ctx348_1443 s349_1444))"
"(values #f #f #f))))"
"(begin"
"(let-values(((obs_1445)(expand-context-observer ctx_1388)))"
"(if obs_1445"
"(let-values()"
"(let-values()(call-expand-observe obs_1445 'resolve id_1431)))"
"(void)))"
"(if(let-values(((or-part_1446)(variable? t_1434)))"
"(if or-part_1446"
" or-part_1446"
"(if(not binding_1433)"
"(let-values(((or-part_1447)"
"(register-eventual-variable!? id_1431 ctx_1388)))"
"(if or-part_1447"
" or-part_1447"
"(expand-context-allow-unbound? ctx_1388)))"
" #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(if(module-binding? binding_1433)"
"(not"
"(eq?"
"(module-binding-module binding_1433)"
"(namespace-mpi"
"(expand-context-namespace ctx_1388))))"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                    \"cannot mutate module-required identifier\""
" s_1387"
" id_1431))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1450)"
"(expand-context-observer ctx_1388)))"
"(if obs_1450"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_1450 'next)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(register-variable-referenced-if-local! binding_1433)"
"(values))))"
"(let-values(((rebuild-s_1448)"
"(let-values()"
"(keep-as-needed55.1 #f #f ctx350_1451 s351_1452))))"
"(let-values(((exp-rhs_1449)"
"(let-values(((temp353_1454)"
"(as-expression-context ctx_1388)))"
"(expand5.1 #f #f temp352_1453 temp353_1454))))"
"(if(expand-context-to-parsed? ctx_1388)"
"(parsed-set!9.1"
" rebuild-s_1448"
"(parsed-id2.1 id_1431 binding_1433)"
" exp-rhs_1449)"
"(let-values(((temp355_1456)"
"(list"
" set!334_1391"
"(let-values(((temp358_1460)"
"(free-id-set-empty-or-just-module*?"
"(expand-context-stops"
" ctx_1388))))"
"(substitute-variable6.1"
" temp358_1460"
" id356_1458"
" t357_1459))"
" exp-rhs_1449)))"
"(rebuild62.1 #f #f rebuild-s354_1455 temp355_1456)))))))))"
"(if(not binding_1433)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" s_1387"
" id_1431"
" null"
"(syntax-debug-info-string id_1431 ctx_1388)))"
"(if(1/set!-transformer? t_1434)"
"(let-values()"
"(if(not-in-this-expand-context? t_1434 ctx_1388)"
"(let-values()"
"(let-values(((temp359_1461)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_1387"
" disarmed-s_1389"
" set!334_1391"
" rhs336_1393"
" id_1431"
" from-rename?_1432"
" ctx_1388)"
" t_1434"
" ctx_1388)))"
"(expand5.1 #f #f temp359_1461 ctx360_1462)))"
"(let-values()"
"(let-values(((exp-s_1463 re-ctx_1464)"
"(apply-transformer"
" t_1434"
" insp_1436"
" s_1387"
" id_1431"
" ctx_1388"
" binding_1433)))"
"(if(expand-context-just-once? ctx_1388)"
"(let-values() exp-s_1463)"
"(let-values()"
"(let-values()"
"(expand5.1 #f #f exp-s361_1465 re-ctx362_1466))))))))"
"(if(1/rename-transformer? t_1434)"
"(let-values()"
"(if(not-in-this-expand-context? t_1434 ctx_1388)"
"(let-values()"
"(let-values(((temp363_1467)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_1387"
" disarmed-s_1389"
" set!334_1391"
" rhs336_1393"
" id_1431"
" from-rename?_1432"
" ctx_1388"
" t_1434)"
" t_1434"
" ctx_1388)))"
"(expand5.1 #f #f temp363_1467 ctx364_1468)))"
"(let-values()"
"(rename-loop_1430"
"(rename-transformer-target-in-context t_1434 ctx_1388)"
" #t))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                      \"cannot mutate syntax identifier\""
" s_1387"
" id_1431)))))))))))))"
" rename-loop_1430)"
" id_1406"
" #f))))))))"
" print-values)"
"(define-values"
"(substitute-set!-rename)"
"(let-values(((substitute-set!-rename32_1469)"
"(lambda(s25_1470"
" disarmed-s26_1471"
" set!-id27_1472"
" id28_1473"
" rhs-s29_1474"
" from-rename?30_1475"
" ctx31_1476"
" t23_1477"
" t24_1478)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((t_1486)(if t24_1478 t23_1477 #f)))"
"(let-values()"
"(if(let-values()(if or-part_1487 or-part_1487 from-rename?_1484))"
"(let-values()"
"(let-values(((new-id_1488)"
"(if t_1486"
"(rename-transformer-target-in-context t_1486 ctx_1485)"
" id_1482)))"
"(syntax-rearm$1"
"(datum->syntax$1"
" disarmed-s_1480"
"(list set!-id_1481 new-id_1488 rhs-s_1483)"
" disarmed-s_1480"
" disarmed-s_1480)"
" s_1479)))"
"(let-values() s_1479))))))))))))))"
"(case-lambda"
"((s_1489 disarmed-s_1490 set!-id_1491 id_1492 rhs-s_1493 from-rename?_1494 ctx_1495)"
"(substitute-set!-rename32_1469"
" s_1489"
" disarmed-s_1490"
" set!-id_1491"
" id_1492"
" rhs-s_1493"
" from-rename?_1494"
" ctx_1495"
" #f"
" #f))"
"((s_1496 disarmed-s_1497 set!-id_1498 id_1499 rhs-s_1500 from-rename?_1501 ctx_1502 t23_1503)"
"(substitute-set!-rename32_1469"
" s_1496"
" disarmed-s_1497"
" set!-id_1498"
" id_1499"
" rhs-s_1500"
" from-rename?_1501"
" ctx_1502"
" t23_1503"
" #t)))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%variable-reference"
"(lambda(s_1504 ctx_1505)"
"(let-values((()"
"(begin"
"(let-values(((obs_1546)(expand-context-observer ctx_1505)))"
"(if obs_1546"
"(let-values()(let-values()(call-expand-observe obs_1546 'prim-#%variable-reference)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1506)(syntax-disarm$1 s_1504)))"
"(let-values(((ok?_1507 #%variable-reference365_1508 id366_1509)"
"(let-values()"
"(if(let-values(((s_1548)(if(syntax?$1 s_1547)(syntax-e$1 s_1547) s_1547)))"
"(if(pair? s_1548)"
"(if(let-values(((s_1549)(car s_1548))) #t)"
"(let-values(((s_1550)(cdr s_1548)))"
"(let-values(((s_1551)(if(syntax?$1 s_1550)(syntax-e$1 s_1550) s_1550)))"
"(if(pair? s_1551)"
"(if(let-values(((s_1552)(car s_1551)))"
"(if(syntax?$1 s_1552)(symbol?(syntax-e$1 s_1552)) #f))"
"(let-values(((s_1553)(cdr s_1551)))"
"(let-values(((s_1554)"
"(if(syntax?$1 s_1553)(syntax-e$1 s_1553) s_1553)))"
"(null? s_1554)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((#%variable-reference365_1556 id366_1557)"
"(let-values(((s_1558)(if(syntax?$1 s_1547)(syntax-e$1 s_1547) s_1547)))"
"(let-values(((#%variable-reference367_1559)"
"(let-values(((s_1561)(car s_1558))) s_1561))"
"((id368_1560)"
"(let-values(((s_1562)(cdr s_1558)))"
"(let-values(((s_1563)"
"(if(syntax?$1 s_1562)"
"(syntax-e$1 s_1562)"
" s_1562)))"
"(let-values(((id369_1564)"
"(let-values(((s_1565)(car s_1563)))"
" s_1565))"
"(()"
"(let-values(((s_1566)(cdr s_1563)))"
"(let-values(((s_1567)"
"(if(syntax?$1 s_1566)"
"(syntax-e$1 s_1566)"
" s_1566)))"
"(values)))))"
"(values id369_1564))))))"
"(values #%variable-reference367_1559 id368_1560)))))"
"(values #t #%variable-reference365_1556 id366_1557)))"
"(values #f #f #f)))))"
"(let-values(((ok?_1520 #%variable-reference370_1521 #%top371_1522 id372_1523)"
"(let-values()"
"(if(if(not ok?_1507)"
"(let-values(((s_1569)(if(syntax?$1 s_1568)(syntax-e$1 s_1568) s_1568)))"
"(if(pair? s_1569)"
"(if(let-values(((s_1570)(car s_1569))) #t)"
"(let-values(((s_1571)(cdr s_1569)))"
"(let-values(((s_1572)(if(syntax?$1 s_1571)(syntax-e$1 s_1571) s_1571)))"
"(if(pair? s_1572)"
"(if(let-values(((s_1573)(car s_1572)))"
"(let-values(((s_1574)"
"(if(syntax?$1 s_1573)(syntax-e$1 s_1573) s_1573)))"
"(if(pair? s_1574)"
"(if(let-values(((s_1575)(car s_1574))) #t)"
"(let-values(((s_1576)(cdr s_1574)))"
"(if(syntax?$1 s_1576)(symbol?(syntax-e$1 s_1576)) #f))"
" #f)"
" #f)))"
"(let-values(((s_1577)(cdr s_1572)))"
"(let-values(((s_1578)"
"(if(syntax?$1 s_1577)(syntax-e$1 s_1577) s_1577)))"
"(null? s_1578)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values()"
"(let-values(((#%variable-reference370_1580 #%top371_1581 id372_1582)"
"(let-values(((s_1583)"
"(if(syntax?$1 s_1568)(syntax-e$1 s_1568) s_1568)))"
"(let-values(((#%variable-reference373_1584)"
"(let-values(((s_1587)(car s_1583))) s_1587))"
"((#%top374_1585 id375_1586)"
"(let-values(((s_1588)(cdr s_1583)))"
"(let-values(((s_1589)"
"(if(syntax?$1 s_1588)"
"(syntax-e$1 s_1588)"
" s_1588)))"
"(let-values(((#%top376_1590 id377_1591)"
"(let-values(((s_1592)(car s_1589)))"
"(let-values(((s_1593)"
"(if(syntax?$1 s_1592)"
"(syntax-e$1 s_1592)"
" s_1592)))"
"(let-values(((#%top378_1594)"
"(let-values(((s_1596)"
"(car"
" s_1593)))"
" s_1596))"
"((id379_1595)"
"(let-values(((s_1597)"
"(cdr"
" s_1593)))"
" s_1597)))"
"(values"
" #%top378_1594"
" id379_1595)))))"
"(()"
"(let-values(((s_1598)(cdr s_1589)))"
"(let-values(((s_1599)"
"(if(syntax?$1 s_1598)"
"(syntax-e$1 s_1598)"
" s_1598)))"
"(values)))))"
"(values #%top376_1590 id377_1591))))))"
"(values #%variable-reference373_1584 #%top374_1585 id375_1586)))))"
"(values #t #%variable-reference370_1580 #%top371_1581 id372_1582)))"
"(values #f #f #f #f)))))"
"(let-values(((ok?_1536 #%variable-reference380_1537)"
"(let-values()"
"(if(if(not(let-values()(if or-part_1601 or-part_1601 ok?_1520))) #t #f)"
"(let-values()"
"(let-values(((#%variable-reference380_1603)"
"(let-values(((s_1604)"
"(if(syntax?$1 s_1600)(syntax-e$1 s_1600) s_1600)))"
"(if(pair? s_1604)"
"(let-values(((#%variable-reference381_1605)"
"(let-values(((s_1606)(car s_1604))) s_1606))"
"(()"
"(let-values(((s_1607)(cdr s_1604)))"
"(let-values(((s_1608)"
"(if(syntax?$1 s_1607)"
"(syntax-e$1 s_1607)"
" s_1607)))"
"(if(null? s_1608)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_1602))))))"
"(values #%variable-reference381_1605))"
"                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_1602)))))"
"(values #t #%variable-reference380_1603)))"
"(values #f #f)))))"
"(if(let-values()(if or-part_1609 or-part_1609 ok?_1520))"
"(let-values()"
"(let-values(((var-id_1610)(if ok?_1507 id366_1509 id372_1523)))"
"(let-values(((binding_1611)"
"(let-values(((temp383_1614)(expand-context-phase ctx_1505))"
"((temp384_1615) 'ambiguous))"
"(resolve+shift30.1"
" temp384_1615"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" var-id382_1613"
" temp383_1614))))"
"(begin"
"(if(eq? binding_1611 'ambiguous)"
"(let-values()(raise-ambiguous-error var-id_1610 ctx_1505))"
"(void))"
"(if binding_1611"
"(void)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                \"unbound identifier\""
" s_1504"
" var-id_1610"
" null"
"(syntax-debug-info-string var-id_1610 ctx_1505))))"
"(if(expand-context-to-parsed? ctx_1505)"
"(parsed-#%variable-reference11.1"
"(keep-properties-only s_1504)"
"(if ok?_1520"
"(parsed-top-id4.1 var-id_1610 binding_1611)"
"(parsed-id2.1 var-id_1610 binding_1611)))"
" s_1504)))))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_1505)"
"(parsed-#%variable-reference11.1(keep-properties-only s_1504) #f)"
" s_1504)))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%expression"
"(lambda(s_1616 ctx_1617)"
"(let-values((()"
"(begin"
"(let-values(((obs_1634)(expand-context-observer ctx_1617)))"
"(if obs_1634"
"(let-values()(let-values()(call-expand-observe obs_1634 'prim-#%expression)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1618)(syntax-disarm$1 s_1616)))"
"(let-values(((ok?_1619 #%expression385_1620 e386_1621)"
"(let-values()"
"(let-values()"
"(let-values(((#%expression385_1637 e386_1638)"
"(let-values(((s_1639)(if(syntax?$1 s_1635)(syntax-e$1 s_1635) s_1635)))"
"(if(pair? s_1639)"
"(let-values(((#%expression387_1640)"
"(let-values(((s_1642)(car s_1639))) s_1642))"
"((e388_1641)"
"(let-values(((s_1643)(cdr s_1639)))"
"(let-values(((s_1644)"
"(if(syntax?$1 s_1643)"
"(syntax-e$1 s_1643)"
" s_1643)))"
"(if(pair? s_1644)"
"(let-values(((e389_1645)"
"(let-values(((s_1646)(car s_1644)))"
" s_1646))"
"(()"
"(let-values(((s_1647)(cdr s_1644)))"
"(let-values(((s_1648)"
"(if(syntax?$1 s_1647)"
"(syntax-e$1 s_1647)"
" s_1647)))"
"(if(null? s_1648)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1636))))))"
"(values e389_1645))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_1636))))))"
"(values #%expression387_1640 e388_1641))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1636)))))"
"(values #t #%expression385_1637 e386_1638))))))"
"(let-values(((rebuild-s_1632)"
"(let-values(((temp392_1652) #t))"
"(keep-as-needed55.1 temp392_1652 #t ctx390_1650 s391_1651))))"
"(let-values(((exp-e_1633)"
"(let-values(((temp394_1654)"
"(let-values(((temp395_1656)(as-expression-context ctx_1617)))"
"(as-tail-context18.1 ctx396_1657 temp395_1656))))"
"(expand5.1 #f #f temp393_1653 temp394_1654))))"
"(if(expand-context-to-parsed? ctx_1617)"
" exp-e_1633"
"(let-values(((tmp_1658)"
"(if(not(expand-context-in-local-expand? ctx_1617))"
"(expand-context-context ctx_1617)"
" #f)))"
"(if(equal? tmp_1658 'expression)"
"(let-values()"
"(let-values(((result-s_1659)(syntax-track-origin$1 exp-e_1633 rebuild-s_1632)))"
"(begin"
"(let-values(((obs_1660)(expand-context-observer ctx_1617)))"
"(if obs_1660"
"(let-values()(let-values()(call-expand-observe obs_1660 'tag result-s_1659)))"
"(void)))"
" result-s_1659)))"
"(let-values()"
"(let-values(((temp398_1662)(list #%expression385_1620 exp-e_1633)))"
"(rebuild62.1 #f #f rebuild-s397_1661 temp398_1662))))))))))))))"
" print-values)"
"(call-with-values"
"  (lambda () (add-core-form! 'unquote (lambda (s_1663 ctx_1664) (raise-syntax-error$1 #f \"not in quasiquote\" s_1663))))"
" print-values)"
"(call-with-values"
"(lambda()"
"    (add-core-form! 'unquote-splicing (lambda (s_1665 ctx_1666) (raise-syntax-error$1 #f \"not in quasiquote\" s_1665))))"
" print-values)"
"(void)"
"(void)"
"(define-values"
"(binding-for-transformer?)"
"(lambda(b_1 id_2 at-phase_3 ns_4)"
"(if(not at-phase_3)"
"(let-values()"
"(let-values(((m_5)(namespace->module ns_4(1/module-path-index-resolve(module-binding-nominal-module b_1)))))"
"(let-values(((b/p_6)"
"(hash-ref"
"(hash-ref(module-provides m_5)(module-binding-nominal-phase b_1) '#hasheq())"
"(module-binding-nominal-sym b_1)"
" #f)))"
"(provided-as-transformer? b/p_6))))"
"(let-values()"
"(let-values(((val_7 primitive?_8 insp_9)"
"(let-values(((null3_12) null))"
"(binding-lookup48.1 #f #f #f #f b1_10 empty-env2_11 null3_12 ns4_13 at-phase5_14 id6_15))))"
"(not(variable? val_7)))))))"
"(void)"
"(void)"
"(define-values(layers) '(raw phaseless id))"
"(define-values(provide-form-name) 'provide)"
"(define-values"
"(parse-and-expand-provides!)"
"(lambda(specs_1 orig-s_2 rp_3 self_4 phase_5 ctx_6)"
"(let-values(((ns_7)(expand-context-namespace ctx_6)))"
"((letrec-values(((loop_8)"
"(lambda(specs_9 at-phase_10 protected?_11 layer_12)"
"(let-values(((track-stxess_13 exp-specss_14)"
"(let-values(((track-stxes_15 exp-specs_16)"
"(let-values()"
"(begin"
"(if(list? lst_17)(void)(let-values()(in-list lst_17)))"
"((letrec-values(((for-loop_18)"
"(lambda(track-stxes_19 exp-specs_20 lst_21)"
"(if(pair? lst_21)"
"(let-values(((spec_22)"
"(unsafe-car lst_21)))"
"(let-values(((track-stxes_23"
" exp-specs_24)"
"(let-values()"
"(let-values(((track-stxes_27"
" exp-specs_28)"
"(let-values()"
"(let-values(((track-stxes1_29"
" exp-specs2_30)"
"(let-values()"
"(let-values(((disarmed-spec_31)"
"(syntax-disarm$1"
" spec_22)))"
"(let-values(((fm_32)"
"(if(pair?"
"(syntax-e$1"
" disarmed-spec_31))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" disarmed-spec_31)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" disarmed-spec_31)))"
" #f)"
" #f)))"
"(let-values(((check-nested_33)"
"(lambda(want-layer_34)"
"(if(member"
" want-layer_34"
"(member"
" layer_12"
" layers))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"                                                                                                                                                            \"nested `~a' not allowed\""
" fm_32)"
" orig-s_2"
" spec_22))))))"
"(let-values()"
"(let-values(((index_36)"
"(if(symbol?"
" tmp_35)"
"(hash-ref"
" '#hasheq((rename ."
" 5)"
"(all-from-except"
" ."
" 8)"
"(for-meta"
" ."
" 1)"
"(all-defined-except"
" ."
" 10)"
"(for-syntax"
" ."
" 2)"
"(all-from"
" ."
" 7)"
"(prefix-all-defined"
" ."
" 11)"
"(protect"
" ."
" 4)"
"(prefix-all-defined-except"
" ."
" 12)"
"(struct"
" ."
" 6)"
"(all-defined"
" ."
" 9)"
"(expand"
" ."
" 13)"
"(for-label"
" ."
" 3))"
" tmp_35"
"(lambda()"
" 0))"
" 0)))"
"(if(unsafe-fx<"
" index_36"
" 6)"
"(if(unsafe-fx<"
" index_36"
" 2)"
"(if(unsafe-fx<"
" index_36"
" 1)"
"(let-values()"
"(if(identifier?"
" spec_22)"
"(let-values()"
"(begin"
"(parse-identifier!"
" spec_22"
" orig-s_2"
"(syntax-e$1"
" spec_22)"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                         \"bad syntax\""
" orig-s_2"
" spec_22))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'raw)"
"(values))))"
"(let-values(((ok?_37"
" for-meta3_38"
" phase-level4_39"
" spec5_40)"
"(let-values()"
"(let-values()"
"(let-values(((for-meta3_58"
" phase-level4_59"
" spec5_60)"
"(let-values(((s_61)"
"(if(syntax?$1"
" s_56)"
"(syntax-e$1"
" s_56)"
" s_56)))"
"(if(pair?"
" s_61)"
"(let-values(((for-meta6_62)"
"(let-values(((s_65)"
"(car"
" s_61)))"
" s_65))"
"((phase-level7_63"
" spec8_64)"
"(let-values(((s_66)"
"(cdr"
" s_61)))"
"(let-values(((s_67)"
"(if(syntax?$1"
" s_66)"
"(syntax-e$1"
" s_66)"
" s_66)))"
"(if(pair?"
" s_67)"
"(let-values(((phase-level9_68)"
"(let-values(((s_70)"
"(car"
" s_67)))"
" s_70))"
"((spec10_69)"
"(let-values(((s_71)"
"(cdr"
" s_67)))"
"(let-values(((s_72)"
"(if(syntax?$1"
" s_71)"
"(syntax-e$1"
" s_71)"
" s_71)))"
"(let-values(((flat-s_73)"
"(to-syntax-list.1"
" s_72)))"
"(if(not"
" flat-s_73)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_57))"
"(let-values()"
" flat-s_73)))))))"
"(values"
" phase-level9_68"
" spec10_69))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_57))))))"
"(values"
" for-meta6_62"
" phase-level7_63"
" spec8_64))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_57)))))"
"(values"
" #t"
" for-meta3_58"
" phase-level4_59"
" spec5_60))))))"
"(let-values(((p_53)"
"(syntax-e$1"
" phase-level4_39)))"
"(let-values((()"
"(begin"
"(if(phase?"
" p_53)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                               \"bad `for-meta' phase\""
" orig-s_2"
" spec_22)))"
"(values))))"
"(let-values(((track-stxes_54"
" exp-specs_55)"
"(loop_8"
" spec5_40"
"(phase+"
" p_53"
" at-phase_10)"
" protected?_11"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_54"
"(let-values(((temp12_75)"
"(list*"
" for-meta3_38"
" phase-level4_39"
" exp-specs_55)))"
"(rebuild62.1"
" #f"
" #f"
" spec11_74"
" temp12_75))))))))))))"
"(if(unsafe-fx<"
" index_36"
" 3)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'raw)"
"(values))))"
"(let-values(((ok?_76"
" for-syntax13_77"
" spec14_78)"
"(let-values()"
"(let-values()"
"(let-values(((for-syntax13_93"
" spec14_94)"
"(let-values(((s_95)"
"(if(syntax?$1"
" s_91)"
"(syntax-e$1"
" s_91)"
" s_91)))"
"(if(pair?"
" s_95)"
"(let-values(((for-syntax15_96)"
"(let-values(((s_98)"
"(car"
" s_95)))"
" s_98))"
"((spec16_97)"
"(let-values(((s_99)"
"(cdr"
" s_95)))"
"(let-values(((s_100)"
"(if(syntax?$1"
" s_99)"
"(syntax-e$1"
" s_99)"
" s_99)))"
"(let-values(((flat-s_101)"
"(to-syntax-list.1"
" s_100)))"
"(if(not"
" flat-s_101)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_92))"
"(let-values()"
" flat-s_101)))))))"
"(values"
" for-syntax15_96"
" spec16_97))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_92)))))"
"(values"
" #t"
" for-syntax13_93"
" spec14_94))))))"
"(let-values(((track-stxes_89"
" exp-specs_90)"
"(loop_8"
" spec14_78"
"(phase+"
" 1"
" at-phase_10)"
" protected?_11"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_89"
"(let-values(((temp18_103)"
"(list*"
" for-syntax13_77"
" exp-specs_90)))"
"(rebuild62.1"
" #f"
" #f"
" spec17_102"
" temp18_103)))))))))"
"(if(unsafe-fx<"
" index_36"
" 4)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'raw)"
"(values))))"
"(let-values(((ok?_104"
" for-label19_105"
" spec20_106)"
"(let-values()"
"(let-values()"
"(let-values(((for-label19_121"
" spec20_122)"
"(let-values(((s_123)"
"(if(syntax?$1"
" s_119)"
"(syntax-e$1"
" s_119)"
" s_119)))"
"(if(pair?"
" s_123)"
"(let-values(((for-label21_124)"
"(let-values(((s_126)"
"(car"
" s_123)))"
" s_126))"
"((spec22_125)"
"(let-values(((s_127)"
"(cdr"
" s_123)))"
"(let-values(((s_128)"
"(if(syntax?$1"
" s_127)"
"(syntax-e$1"
" s_127)"
" s_127)))"
"(let-values(((flat-s_129)"
"(to-syntax-list.1"
" s_128)))"
"(if(not"
" flat-s_129)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_120))"
"(let-values()"
" flat-s_129)))))))"
"(values"
" for-label21_124"
" spec22_125))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_120)))))"
"(values"
" #t"
" for-label19_121"
" spec20_122))))))"
"(let-values(((track-stxes_117"
" exp-specs_118)"
"(loop_8"
" spec20_106"
" #f"
" protected?_11"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_117"
"(let-values(((temp24_131)"
"(list*"
" for-label19_105"
" exp-specs_118)))"
"(rebuild62.1"
" #f"
" #f"
" spec23_130"
" temp24_131)))))))))"
"(if(unsafe-fx<"
" index_36"
" 5)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values((()"
"(begin"
"(if protected?_11"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                               \"nested `protect' not allowed\""
" orig-s_2"
" spec_22))"
"(void))"
"(values))))"
"(let-values(((ok?_132"
" protect25_133"
" p-spec26_134)"
"(let-values()"
"(let-values()"
"(let-values(((protect25_149"
" p-spec26_150)"
"(let-values(((s_151)"
"(if(syntax?$1"
" s_147)"
"(syntax-e$1"
" s_147)"
" s_147)))"
"(if(pair?"
" s_151)"
"(let-values(((protect27_152)"
"(let-values(((s_154)"
"(car"
" s_151)))"
" s_154))"
"((p-spec28_153)"
"(let-values(((s_155)"
"(cdr"
" s_151)))"
"(let-values(((s_156)"
"(if(syntax?$1"
" s_155)"
"(syntax-e$1"
" s_155)"
" s_155)))"
"(let-values(((flat-s_157)"
"(to-syntax-list.1"
" s_156)))"
"(if(not"
" flat-s_157)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_148))"
"(let-values()"
" flat-s_157)))))))"
"(values"
" protect27_152"
" p-spec28_153))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_148)))))"
"(values"
" #t"
" protect25_149"
" p-spec26_150))))))"
"(let-values(((track-stxes_145"
" exp-specs_146)"
"(loop_8"
" p-spec26_134"
" at-phase_10"
" #t"
" layer_12)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_145"
"(let-values(((temp30_159)"
"(list*"
" protect25_133"
" exp-specs_146)))"
"(rebuild62.1"
" #f"
" #f"
" spec29_158"
" temp30_159))))))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_160"
" rename31_161"
" id:from32_162"
" id:to33_163)"
"(let-values()"
"(let-values()"
"(let-values(((rename31_178"
" id:from32_179"
" id:to33_180)"
"(let-values(((s_181)"
"(if(syntax?$1"
" s_176)"
"(syntax-e$1"
" s_176)"
" s_176)))"
"(if(pair?"
" s_181)"
"(let-values(((rename34_182)"
"(let-values(((s_185)"
"(car"
" s_181)))"
" s_185))"
"((id:from35_183"
" id:to36_184)"
"(let-values(((s_186)"
"(cdr"
" s_181)))"
"(let-values(((s_187)"
"(if(syntax?$1"
" s_186)"
"(syntax-e$1"
" s_186)"
" s_186)))"
"(if(pair?"
" s_187)"
"(let-values(((id:from37_188)"
"(let-values(((s_190)"
"(car"
" s_187)))"
"(if(let-values(((or-part_191)"
"(if(syntax?$1"
" s_190)"
"(symbol?"
"(syntax-e$1"
" s_190))"
" #f)))"
"(if or-part_191"
" or-part_191"
"(symbol?"
" s_190)))"
" s_190"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_177"
" s_190))))"
"((id:to38_189)"
"(let-values(((s_192)"
"(cdr"
" s_187)))"
"(let-values(((s_193)"
"(if(syntax?$1"
" s_192)"
"(syntax-e$1"
" s_192)"
" s_192)))"
"(if(pair?"
" s_193)"
"(let-values(((id:to39_194)"
"(let-values(((s_195)"
"(car"
" s_193)))"
"(if(let-values(((or-part_196)"
"(if(syntax?$1"
" s_195)"
"(symbol?"
"(syntax-e$1"
" s_195))"
" #f)))"
"(if or-part_196"
" or-part_196"
"(symbol?"
" s_195)))"
" s_195"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_177"
" s_195))))"
"(()"
"(let-values(((s_197)"
"(cdr"
" s_193)))"
"(let-values(((s_198)"
"(if(syntax?$1"
" s_197)"
"(syntax-e$1"
" s_197)"
" s_197)))"
"(if(null?"
" s_198)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_177))))))"
"(values"
" id:to39_194))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_177))))))"
"(values"
" id:from37_188"
" id:to38_189))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_177))))))"
"(values"
" rename34_182"
" id:from35_183"
" id:to36_184))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_177)))))"
"(values"
" #t"
" rename31_178"
" id:from32_179"
" id:to33_180))))))"
"(begin"
"(parse-identifier!"
" id:from32_162"
" orig-s_2"
"(syntax-e$1"
" id:to33_163)"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))))))"
"(if(unsafe-fx<"
" index_36"
" 9)"
"(if(unsafe-fx<"
" index_36"
" 7)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_199"
" struct40_200"
" id:struct41_201"
" id:field42_202)"
"(let-values()"
"(let-values()"
"(let-values(((struct40_217"
" id:struct41_218"
" id:field42_219)"
"(let-values(((s_220)"
"(if(syntax?$1"
" s_215)"
"(syntax-e$1"
" s_215)"
" s_215)))"
"(if(pair?"
" s_220)"
"(let-values(((struct43_221)"
"(let-values(((s_224)"
"(car"
" s_220)))"
" s_224))"
"((id:struct44_222"
" id:field45_223)"
"(let-values(((s_225)"
"(cdr"
" s_220)))"
"(let-values(((s_226)"
"(if(syntax?$1"
" s_225)"
"(syntax-e$1"
" s_225)"
" s_225)))"
"(if(pair?"
" s_226)"
"(let-values(((id:struct46_227)"
"(let-values(((s_229)"
"(car"
" s_226)))"
"(if(let-values(((or-part_230)"
"(if(syntax?$1"
" s_229)"
"(symbol?"
"(syntax-e$1"
" s_229))"
" #f)))"
"(if or-part_230"
" or-part_230"
"(symbol?"
" s_229)))"
" s_229"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_216"
" s_229))))"
"((id:field47_228)"
"(let-values(((s_231)"
"(cdr"
" s_226)))"
"(let-values(((s_232)"
"(if(syntax?$1"
" s_231)"
"(syntax-e$1"
" s_231)"
" s_231)))"
"(if(pair?"
" s_232)"
"(let-values(((id:field48_233)"
"(let-values(((s_234)"
"(car"
" s_232)))"
"(let-values(((s_235)"
"(if(syntax?$1"
" s_234)"
"(syntax-e$1"
" s_234)"
" s_234)))"
"(let-values(((flat-s_236)"
"(to-syntax-list.1"
" s_235)))"
"(if(not"
" flat-s_236)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_216))"
"(let-values()"
"(let-values(((id:field_237)"
"(let-values()"
"(begin"
"(if(list?"
" lst_238)"
"(void)"
"(let-values()"
"(in-list"
" lst_238)))"
"((letrec-values(((for-loop_239)"
"(lambda(id:field_240"
" lst_241)"
"(if(pair?"
" lst_241)"
"(let-values(((s_242)"
"(unsafe-car"
" lst_241)))"
"(let-values(((id:field_243)"
"(let-values()"
"(let-values(((id:field_245)"
"(let-values()"
"(let-values(((id:field49_246)"
"(let-values()"
"(if(let-values(((or-part_247)"
"(if(syntax?$1"
" s_242)"
"(symbol?"
"(syntax-e$1"
" s_242))"
" #f)))"
"(if or-part_247"
" or-part_247"
"(symbol?"
" s_242)))"
" s_242"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_216"
" s_242)))))"
"(cons"
" id:field49_246"
" id:field_244)))))"
"(values"
" id:field_245)))))"
"(for-loop_239"
" id:field_243"
"(unsafe-cdr"
" lst_241))))"
" id:field_240))))"
" for-loop_239)"
" null"
" lst_238)))))"
"(alt-reverse"
" id:field_237))))))))"
"(()"
"(let-values(((s_248)"
"(cdr"
" s_232)))"
"(let-values(((s_249)"
"(if(syntax?$1"
" s_248)"
"(syntax-e$1"
" s_248)"
" s_248)))"
"(if(null?"
" s_249)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_216))))))"
"(values"
" id:field48_233))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_216))))))"
"(values"
" id:struct46_227"
" id:field47_228))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_216))))))"
"(values"
" struct43_221"
" id:struct44_222"
" id:field45_223))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_216)))))"
"(values"
" #t"
" struct40_217"
" id:struct41_218"
" id:field42_219))))))"
"(begin"
"(parse-struct!"
" id:struct41_201"
" orig-s_2"
" id:field42_202"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))"
"(if(unsafe-fx<"
" index_36"
" 8)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_250"
" all-from50_251"
" mod-path51_252)"
"(let-values()"
"(let-values()"
"(let-values(((all-from50_265"
" mod-path51_266)"
"(let-values(((s_267)"
"(if(syntax?$1"
" s_263)"
"(syntax-e$1"
" s_263)"
" s_263)))"
"(if(pair?"
" s_267)"
"(let-values(((all-from52_268)"
"(let-values(((s_270)"
"(car"
" s_267)))"
" s_270))"
"((mod-path53_269)"
"(let-values(((s_271)"
"(cdr"
" s_267)))"
"(let-values(((s_272)"
"(if(syntax?$1"
" s_271)"
"(syntax-e$1"
" s_271)"
" s_271)))"
"(if(pair?"
" s_272)"
"(let-values(((mod-path54_273)"
"(let-values(((s_274)"
"(car"
" s_272)))"
" s_274))"
"(()"
"(let-values(((s_275)"
"(cdr"
" s_272)))"
"(let-values(((s_276)"
"(if(syntax?$1"
" s_275)"
"(syntax-e$1"
" s_275)"
" s_275)))"
"(if(null?"
" s_276)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_264))))))"
"(values"
" mod-path54_273))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_264))))))"
"(values"
" all-from52_268"
" mod-path53_269))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_264)))))"
"(values"
" #t"
" all-from50_265"
" mod-path51_266))))))"
"(begin"
"(parse-all-from"
" mod-path51_252"
" orig-s_2"
" self_4"
" null"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11"
" ctx_6)"
"(values"
" null"
"(list"
" spec_22))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_277"
" all-from-except55_278"
" mod-path56_279"
" id57_280)"
"(let-values()"
"(let-values()"
"(let-values(((all-from-except55_295"
" mod-path56_296"
" id57_297)"
"(let-values(((s_298)"
"(if(syntax?$1"
" s_293)"
"(syntax-e$1"
" s_293)"
" s_293)))"
"(if(pair?"
" s_298)"
"(let-values(((all-from-except58_299)"
"(let-values(((s_302)"
"(car"
" s_298)))"
" s_302))"
"((mod-path59_300"
" id60_301)"
"(let-values(((s_303)"
"(cdr"
" s_298)))"
"(let-values(((s_304)"
"(if(syntax?$1"
" s_303)"
"(syntax-e$1"
" s_303)"
" s_303)))"
"(if(pair?"
" s_304)"
"(let-values(((mod-path61_305)"
"(let-values(((s_307)"
"(car"
" s_304)))"
" s_307))"
"((id62_306)"
"(let-values(((s_308)"
"(cdr"
" s_304)))"
"(let-values(((s_309)"
"(if(syntax?$1"
" s_308)"
"(syntax-e$1"
" s_308)"
" s_308)))"
"(let-values(((flat-s_310)"
"(to-syntax-list.1"
" s_309)))"
"(if(not"
" flat-s_310)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_294))"
"(let-values()"
"(let-values(((id_311)"
"(let-values()"
"(begin"
"(if(list?"
" lst_312)"
"(void)"
"(let-values()"
"(in-list"
" lst_312)))"
"((letrec-values(((for-loop_313)"
"(lambda(id_314"
" lst_315)"
"(if(pair?"
" lst_315)"
"(let-values(((s_316)"
"(unsafe-car"
" lst_315)))"
"(let-values(((id_317)"
"(let-values()"
"(let-values(((id_319)"
"(let-values()"
"(let-values(((id63_320)"
"(let-values()"
"(if(let-values(((or-part_321)"
"(if(syntax?$1"
" s_316)"
"(symbol?"
"(syntax-e$1"
" s_316))"
" #f)))"
"(if or-part_321"
" or-part_321"
"(symbol?"
" s_316)))"
" s_316"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_294"
" s_316)))))"
"(cons"
" id63_320"
" id_318)))))"
"(values"
" id_319)))))"
"(for-loop_313"
" id_317"
"(unsafe-cdr"
" lst_315))))"
" id_314))))"
" for-loop_313)"
" null"
" lst_312)))))"
"(alt-reverse"
" id_311)))))))))"
"(values"
" mod-path61_305"
" id62_306))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_294))))))"
"(values"
" all-from-except58_299"
" mod-path59_300"
" id60_301))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_294)))))"
"(values"
" #t"
" all-from-except55_295"
" mod-path56_296"
" id57_297))))))"
"(begin"
"(parse-all-from"
" mod-path56_279"
" orig-s_2"
" self_4"
" id57_280"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11"
" ctx_6)"
"(values"
" null"
"(list"
" spec_22))))))))"
"(if(unsafe-fx<"
" index_36"
" 11)"
"(if(unsafe-fx<"
" index_36"
" 10)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_322"
" all-defined64_323)"
"(let-values()"
"(let-values()"
"(let-values(((all-defined64_334)"
"(let-values(((s_335)"
"(if(syntax?$1"
" s_332)"
"(syntax-e$1"
" s_332)"
" s_332)))"
"(if(pair?"
" s_335)"
"(let-values(((all-defined65_336)"
"(let-values(((s_337)"
"(car"
" s_335)))"
" s_337))"
"(()"
"(let-values(((s_338)"
"(cdr"
" s_335)))"
"(let-values(((s_339)"
"(if(syntax?$1"
" s_338)"
"(syntax-e$1"
" s_338)"
" s_338)))"
"(if(null?"
" s_339)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_333))))))"
"(values"
" all-defined65_336))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_333)))))"
"(values"
" #t"
" all-defined64_334))))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_22"
" orig-s_2"
" null"
" #f"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_340"
" all-defined-except66_341"
" id67_342)"
"(let-values()"
"(let-values()"
"(let-values(((all-defined-except66_355"
" id67_356)"
"(let-values(((s_357)"
"(if(syntax?$1"
" s_353)"
"(syntax-e$1"
" s_353)"
" s_353)))"
"(if(pair?"
" s_357)"
"(let-values(((all-defined-except68_358)"
"(let-values(((s_360)"
"(car"
" s_357)))"
" s_360))"
"((id69_359)"
"(let-values(((s_361)"
"(cdr"
" s_357)))"
"(let-values(((s_362)"
"(if(syntax?$1"
" s_361)"
"(syntax-e$1"
" s_361)"
" s_361)))"
"(let-values(((flat-s_363)"
"(to-syntax-list.1"
" s_362)))"
"(if(not"
" flat-s_363)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_354))"
"(let-values()"
"(let-values(((id_364)"
"(let-values()"
"(begin"
"(if(list?"
" lst_365)"
"(void)"
"(let-values()"
"(in-list"
" lst_365)))"
"((letrec-values(((for-loop_366)"
"(lambda(id_367"
" lst_368)"
"(if(pair?"
" lst_368)"
"(let-values(((s_369)"
"(unsafe-car"
" lst_368)))"
"(let-values(((id_370)"
"(let-values()"
"(let-values(((id_372)"
"(let-values()"
"(let-values(((id70_373)"
"(let-values()"
"(if(let-values(((or-part_374)"
"(if(syntax?$1"
" s_369)"
"(symbol?"
"(syntax-e$1"
" s_369))"
" #f)))"
"(if or-part_374"
" or-part_374"
"(symbol?"
" s_369)))"
" s_369"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_354"
" s_369)))))"
"(cons"
" id70_373"
" id_371)))))"
"(values"
" id_372)))))"
"(for-loop_366"
" id_370"
"(unsafe-cdr"
" lst_368))))"
" id_367))))"
" for-loop_366)"
" null"
" lst_365)))))"
"(alt-reverse"
" id_364)))))))))"
"(values"
" all-defined-except68_358"
" id69_359))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_354)))))"
"(values"
" #t"
" all-defined-except66_355"
" id67_356))))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_22"
" orig-s_2"
" id67_342"
" #f"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22)))))))"
"(if(unsafe-fx<"
" index_36"
" 12)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_375"
" prefix-all-defined71_376"
" id:prefix72_377)"
"(let-values()"
"(let-values()"
"(let-values(((prefix-all-defined71_390"
" id:prefix72_391)"
"(let-values(((s_392)"
"(if(syntax?$1"
" s_388)"
"(syntax-e$1"
" s_388)"
" s_388)))"
"(if(pair?"
" s_392)"
"(let-values(((prefix-all-defined73_393)"
"(let-values(((s_395)"
"(car"
" s_392)))"
" s_395))"
"((id:prefix74_394)"
"(let-values(((s_396)"
"(cdr"
" s_392)))"
"(let-values(((s_397)"
"(if(syntax?$1"
" s_396)"
"(syntax-e$1"
" s_396)"
" s_396)))"
"(if(pair?"
" s_397)"
"(let-values(((id:prefix75_398)"
"(let-values(((s_399)"
"(car"
" s_397)))"
"(if(let-values(((or-part_400)"
"(if(syntax?$1"
" s_399)"
"(symbol?"
"(syntax-e$1"
" s_399))"
" #f)))"
"(if or-part_400"
" or-part_400"
"(symbol?"
" s_399)))"
" s_399"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_389"
" s_399))))"
"(()"
"(let-values(((s_401)"
"(cdr"
" s_397)))"
"(let-values(((s_402)"
"(if(syntax?$1"
" s_401)"
"(syntax-e$1"
" s_401)"
" s_401)))"
"(if(null?"
" s_402)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_389))))))"
"(values"
" id:prefix75_398))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_389))))))"
"(values"
" prefix-all-defined73_393"
" id:prefix74_394))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_389)))))"
"(values"
" #t"
" prefix-all-defined71_390"
" id:prefix72_391))))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_22"
" orig-s_2"
" null"
"(syntax-e$1"
" id:prefix72_377)"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))"
"(if(unsafe-fx<"
" index_36"
" 13)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_403"
" prefix-all-defined-except76_404"
" id:prefix77_405"
" id78_406)"
"(let-values()"
"(let-values()"
"(let-values(((prefix-all-defined-except76_421"
" id:prefix77_422"
" id78_423)"
"(let-values(((s_424)"
"(if(syntax?$1"
" s_419)"
"(syntax-e$1"
" s_419)"
" s_419)))"
"(if(pair?"
" s_424)"
"(let-values(((prefix-all-defined-except79_425)"
"(let-values(((s_428)"
"(car"
" s_424)))"
" s_428))"
"((id:prefix80_426"
" id81_427)"
"(let-values(((s_429)"
"(cdr"
" s_424)))"
"(let-values(((s_430)"
"(if(syntax?$1"
" s_429)"
"(syntax-e$1"
" s_429)"
" s_429)))"
"(if(pair?"
" s_430)"
"(let-values(((id:prefix82_431)"
"(let-values(((s_433)"
"(car"
" s_430)))"
"(if(let-values(((or-part_434)"
"(if(syntax?$1"
" s_433)"
"(symbol?"
"(syntax-e$1"
" s_433))"
" #f)))"
"(if or-part_434"
" or-part_434"
"(symbol?"
" s_433)))"
" s_433"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_420"
" s_433))))"
"((id83_432)"
"(let-values(((s_435)"
"(cdr"
" s_430)))"
"(let-values(((s_436)"
"(if(syntax?$1"
" s_435)"
"(syntax-e$1"
" s_435)"
" s_435)))"
"(let-values(((flat-s_437)"
"(to-syntax-list.1"
" s_436)))"
"(if(not"
" flat-s_437)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_420))"
"(let-values()"
"(let-values(((id_438)"
"(let-values()"
"(begin"
"(if(list?"
" lst_439)"
"(void)"
"(let-values()"
"(in-list"
" lst_439)))"
"((letrec-values(((for-loop_440)"
"(lambda(id_441"
" lst_442)"
"(if(pair?"
" lst_442)"
"(let-values(((s_443)"
"(unsafe-car"
" lst_442)))"
"(let-values(((id_444)"
"(let-values()"
"(let-values(((id_446)"
"(let-values()"
"(let-values(((id84_447)"
"(let-values()"
"(if(let-values(((or-part_448)"
"(if(syntax?$1"
" s_443)"
"(symbol?"
"(syntax-e$1"
" s_443))"
" #f)))"
"(if or-part_448"
" or-part_448"
"(symbol?"
" s_443)))"
" s_443"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_420"
" s_443)))))"
"(cons"
" id84_447"
" id_445)))))"
"(values"
" id_446)))))"
"(for-loop_440"
" id_444"
"(unsafe-cdr"
" lst_442))))"
" id_441))))"
" for-loop_440)"
" null"
" lst_439)))))"
"(alt-reverse"
" id_438)))))))))"
"(values"
" id:prefix82_431"
" id83_432))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_420))))))"
"(values"
" prefix-all-defined-except79_425"
" id:prefix80_426"
" id81_427))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_420)))))"
"(values"
" #t"
" prefix-all-defined-except76_421"
" id:prefix77_422"
" id78_423))))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_22"
" orig-s_2"
" id78_406"
"(syntax-e$1"
" id:prefix77_405)"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))"
"(let-values()"
"(let-values(((ok?_449"
" expand85_450"
" id86_451"
" datum87_452)"
"(let-values()"
"(let-values()"
"(let-values(((expand85_496"
" id86_497"
" datum87_498)"
"(let-values(((s_499)"
"(if(syntax?$1"
" s_494)"
"(syntax-e$1"
" s_494)"
" s_494)))"
"(if(pair?"
" s_499)"
"(let-values(((expand88_500)"
"(let-values(((s_503)"
"(car"
" s_499)))"
" s_503))"
"((id89_501"
" datum90_502)"
"(let-values(((s_504)"
"(cdr"
" s_499)))"
"(let-values(((s_505)"
"(if(syntax?$1"
" s_504)"
"(syntax-e$1"
" s_504)"
" s_504)))"
"(if(pair?"
" s_505)"
"(let-values(((id91_506"
" datum92_507)"
"(let-values(((s_508)"
"(car"
" s_505)))"
"(let-values(((s_509)"
"(if(syntax?$1"
" s_508)"
"(syntax-e$1"
" s_508)"
" s_508)))"
"(if(pair?"
" s_509)"
"(let-values(((id93_510)"
"(let-values(((s_512)"
"(car"
" s_509)))"
"(if(let-values(((or-part_513)"
"(if(syntax?$1"
" s_512)"
"(symbol?"
"(syntax-e$1"
" s_512))"
" #f)))"
"(if or-part_513"
" or-part_513"
"(symbol?"
" s_512)))"
" s_512"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_495"
" s_512))))"
"((datum94_511)"
"(let-values(((s_514)"
"(cdr"
" s_509)))"
" s_514)))"
"(values"
" id93_510"
" datum94_511))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_495)))))"
"(()"
"(let-values(((s_515)"
"(cdr"
" s_505)))"
"(let-values(((s_516)"
"(if(syntax?$1"
" s_515)"
"(syntax-e$1"
" s_515)"
" s_515)))"
"(if(null?"
" s_516)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_495))))))"
"(values"
" id91_506"
" datum92_507))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_495))))))"
"(values"
" expand88_500"
" id89_501"
" datum90_502))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_495)))))"
"(values"
" #t"
" expand85_496"
" id86_497"
" datum87_498))))))"
"(let-values(((ok?_465"
" expand95_466"
" form96_467)"
"(let-values()"
"(let-values()"
"(let-values(((expand95_519"
" form96_520)"
"(let-values(((s_521)"
"(if(syntax?$1"
" s_517)"
"(syntax-e$1"
" s_517)"
" s_517)))"
"(if(pair?"
" s_521)"
"(let-values(((expand97_522)"
"(let-values(((s_524)"
"(car"
" s_521)))"
" s_524))"
"((form98_523)"
"(let-values(((s_525)"
"(cdr"
" s_521)))"
"(let-values(((s_526)"
"(if(syntax?$1"
" s_525)"
"(syntax-e$1"
" s_525)"
" s_525)))"
"(if(pair?"
" s_526)"
"(let-values(((form99_527)"
"(let-values(((s_528)"
"(car"
" s_526)))"
" s_528))"
"(()"
"(let-values(((s_529)"
"(cdr"
" s_526)))"
"(let-values(((s_530)"
"(if(syntax?$1"
" s_529)"
"(syntax-e$1"
" s_529)"
" s_529)))"
"(if(null?"
" s_530)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_518))))))"
"(values"
" form99_527))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_518))))))"
"(values"
" expand97_522"
" form98_523))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_518)))))"
"(values"
" #t"
" expand95_519"
" form96_520))))))"
"(let-values(((exp-spec_478)"
"(let-values(((temp105_532)"
"(let-values()"
"(if(expand-context?"
" the-struct_533)"
"(let-values(((only-immediate?106_534)"
" #t)"
"((def-ctx-scopes107_535)"
"(box"
" null)))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_533)"
"(root-expand-context-post-expansion-scope"
" the-struct_533)"
"(root-expand-context-top-level-bind-scope"
" the-struct_533)"
"(root-expand-context-all-scopes-stx"
" the-struct_533)"
"(root-expand-context-use-site-scopes"
" the-struct_533)"
"(root-expand-context-defined-syms"
" the-struct_533)"
"(root-expand-context-frame-id"
" the-struct_533)"
"(root-expand-context-counter"
" the-struct_533)"
"(root-expand-context-lift-key"
" the-struct_533)"
"(expand-context-to-parsed?"
" the-struct_533)"
"(expand-context-context"
" the-struct_533)"
"(expand-context-phase"
" the-struct_533)"
"(expand-context-namespace"
" the-struct_533)"
"(expand-context-env"
" the-struct_533)"
"(expand-context-user-env"
" the-struct_533)"
"(expand-context-post-expansion-scope-action"
" the-struct_533)"
"(expand-context-scopes"
" the-struct_533)"
" def-ctx-scopes107_535"
"(expand-context-binding-layer"
" the-struct_533)"
"(expand-context-reference-records"
" the-struct_533)"
" only-immediate?106_534"
"(expand-context-just-once?"
" the-struct_533)"
"(expand-context-module-begin-k"
" the-struct_533)"
"(expand-context-need-eventually-defined"
" the-struct_533)"
"(expand-context-allow-unbound?"
" the-struct_533)"
"(expand-context-in-local-expand?"
" the-struct_533)"
"(expand-context-stops"
" the-struct_533)"
"(expand-context-current-introduction-scopes"
" the-struct_533)"
"(expand-context-declared-submodule-names"
" the-struct_533)"
"(expand-context-lifts"
" the-struct_533)"
"(expand-context-lift-envs"
" the-struct_533)"
"(expand-context-module-lifts"
" the-struct_533)"
"(expand-context-require-lifts"
" the-struct_533)"
"(expand-context-to-module-lifts"
" the-struct_533)"
"(expand-context-requires+provides"
" the-struct_533)"
"(expand-context-name"
" the-struct_533)"
"(expand-context-observer"
" the-struct_533)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                             \"expand-context?\""
" the-struct_533)))))"
"(expand5.1"
" #f"
" #f"
" temp104_531"
" temp105_532))))"
"(let-values((()"
"(begin"
"(if(if(pair?"
"(syntax-e$1"
" exp-spec_478))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" exp-spec_478)))"
"(eq?"
" 'begin"
"(core-form-sym"
" exp-spec_478"
" at-phase_10))"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                                   \"expansion was not a `begin' sequence\""
" orig-s_2"
" spec_22)))"
"(values))))"
"(let-values(((ok?_479"
" begin100_480"
" spec101_481)"
"(let-values()"
"(let-values()"
"(let-values(((begin100_538"
" spec101_539)"
"(let-values(((s_540)"
"(if(syntax?$1"
" s_536)"
"(syntax-e$1"
" s_536)"
" s_536)))"
"(if(pair?"
" s_540)"
"(let-values(((begin102_541)"
"(let-values(((s_543)"
"(car"
" s_540)))"
" s_543))"
"((spec103_542)"
"(let-values(((s_544)"
"(cdr"
" s_540)))"
"(let-values(((s_545)"
"(if(syntax?$1"
" s_544)"
"(syntax-e$1"
" s_544)"
" s_544)))"
"(let-values(((flat-s_546)"
"(to-syntax-list.1"
" s_545)))"
"(if(not"
" flat-s_546)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_537))"
"(let-values()"
" flat-s_546)))))))"
"(values"
" begin102_541"
" spec103_542))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_537)))))"
"(values"
" #t"
" begin100_538"
" spec101_539))))))"
"(let-values(((track-stxes_492"
" exp-specs_493)"
"(loop_8"
" spec101_481"
" at-phase_10"
" protected?_11"
" layer_12)))"
"(values"
"(list*"
" spec_22"
" exp-spec_478"
" track-stxes_492)"
" exp-specs_493)))))))))))))))))))))"
"(values"
"(cons"
" track-stxes1_29"
" track-stxes_25)"
"(cons"
" exp-specs2_30"
" exp-specs_26))))))"
"(values"
" track-stxes_27"
" exp-specs_28)))))"
"(for-loop_18"
" track-stxes_23"
" exp-specs_24"
"(unsafe-cdr lst_21))))"
"(values track-stxes_19 exp-specs_20)))))"
" for-loop_18)"
" null"
" null"
" lst_17)))))"
"(values(alt-reverse track-stxes_15)(alt-reverse exp-specs_16)))))"
"(values(apply append track-stxess_13)(apply append exp-specss_14))))))"
" loop_8)"
" specs_1"
" phase_5"
" #f"
" 'raw))))"
"(define-values"
"(parse-identifier!)"
"(lambda(spec_547 orig-s_548 sym_549 at-phase_550 ns_551 rp_552 protected?_553)"
"(let-values(((b_554)(resolve+shift/extra-inspector spec_547 at-phase_550 ns_551)))"
"(let-values((()"
"(begin"
"(if b_554"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                           \"provided identifier is not defined or required\""
" orig-s_548"
" spec_547)))"
"(values))))"
"(let-values(((as-transformer?_555)(binding-for-transformer? b_554 spec_547 at-phase_550 ns_551)))"
"(let-values(((immed-b_556)"
"(let-values(((temp119_560) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f temp119_560 #t #f #f spec117_558 at-phase118_559))))"
"(let-values()"
"(add-provide!101.1"
" protected?115_569"
" as-transformer?116_570"
" rp108_562"
" sym109_563"
" at-phase110_564"
" b111_565"
" immed-b112_566"
" spec113_567"
" orig-s114_568))))))))"
"(define-values"
"(parse-struct!)"
"(lambda(id:struct_571 orig-s_572 fields_573 at-phase_574 ns_575 rp_576 protected?_577)"
"(let-values(((mk_578)"
"(lambda(fmt_580)"
"(let-values(((sym_581)(string->symbol(format fmt_580(syntax-e$1 id:struct_571)))))"
"(datum->syntax$1 id:struct_571 sym_581 id:struct_571)))))"
"(let-values(((mk2_579)"
"(lambda(fmt_582 field-id_583)"
"(let-values(((sym_584)"
"(string->symbol"
"(format fmt_582(syntax-e$1 id:struct_571)(syntax-e$1 field-id_583)))))"
"(datum->syntax$1 id:struct_571 sym_584 id:struct_571)))))"
"(begin"
"(let-values(((pos->vals_585 pos-next_586 init_587 pos-cont?_588 val-cont?_589 all-cont?_590)"
"                        (make-sequence '(fmt) (list \"~a\" \"make-~a\" \"struct:~a\" \"~a?\"))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_591)"
"(lambda(fold-var_592 pos_593)"
"(if(if pos-cont?_588(pos-cont?_588 pos_593) #t)"
"(let-values(((fmt_594)(pos->vals_585 pos_593)))"
"(if(if val-cont?_589(val-cont?_589 fmt_594) #t)"
"(let-values(((fold-var_595)"
"(let-values()"
"(let-values(((fold-var_597)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_598)(mk_578 fmt_594)))"
"(parse-identifier!"
" id_598"
" orig-s_572"
"(syntax-e$1 id_598)"
" at-phase_574"
" ns_575"
" rp_576"
" protected?_577)))"
"(void)))))"
"(values fold-var_597)))))"
"(if(if all-cont?_590(all-cont?_590 pos_593 fmt_594) #t)"
"(for-loop_591 fold-var_595(pos-next_586 pos_593))"
" fold-var_595))"
" fold-var_592))"
" fold-var_592))))"
" for-loop_591)"
"(void)"
" init_587)))"
"(let-values()"
"(begin"
"(if(list? lst_599)(void)(let-values()(in-list lst_599)))"
"((letrec-values(((for-loop_600)"
"(lambda(fold-var_601 lst_602)"
"(if(pair? lst_602)"
"(let-values(((field_603)(unsafe-car lst_602)))"
"(let-values(((fold-var_604)"
"(let-values()"
"(let-values(((fold-var_606)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((get-id_607)"
"                                                                                        (mk2_579 \"~a-~a\" field_603)))"
"(let-values(((set-id_608)"
"(mk2_579"
"                                                                                           \"set-~a-~a!\""
" field_603)))"
"(begin"
"(parse-identifier!"
" get-id_607"
" orig-s_572"
"(syntax-e$1 get-id_607)"
" at-phase_574"
" ns_575"
" rp_576"
" protected?_577)"
"(parse-identifier!"
" set-id_608"
" orig-s_572"
"(syntax-e$1 set-id_608)"
" at-phase_574"
" ns_575"
" rp_576"
" protected?_577)))))"
"(void)))))"
"(values fold-var_606)))))"
"(for-loop_600 fold-var_604(unsafe-cdr lst_602))))"
" fold-var_601))))"
" for-loop_600)"
"(void)"
" lst_599))))))))"
"(define-values"
"(parse-all-from)"
"(lambda(mod-path-stx_609 orig-s_610 self_611 except-ids_612 at-phase_613 ns_614 rp_615 protected?_616 ctx_617)"
"(let-values(((mod-path_618)(syntax->datum$1 mod-path-stx_609)))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod-path_618)"
"(void)"
"(let-values()"
"                          (raise-syntax-error$1 provide-form-name \"not a module path\" orig-s_610 mod-path-stx_609)))"
"(values))))"
"(let-values(((mpi_619)(module-path->mpi/context mod-path_618 ctx_617)))"
"(parse-all-from-module mpi_619 #f orig-s_610 except-ids_612 #f at-phase_613 ns_614 rp_615 protected?_616))))))"
"(define-values"
"(parse-all-from-module)"
"(lambda(mpi_620 matching-stx_621 orig-s_622 except-ids_623 prefix-sym_624 at-phase_625 ns_626 rp_627 protected?_628)"
"(let-values(((requireds_629)(extract-module-requires rp_627 mpi_620 at-phase_625)))"
"(let-values(((phase-desc_630)"
"(lambda()"
"(if(zero-phase? at-phase_625)"
"                        (let-values () \"\")"
"(if(label-phase? at-phase_625)"
"                          (let-values () \" for-label\")"
"                          (let-values () (format \" for phase ~a\" at-phase_625)))))))"
"(let-values((()"
"(begin"
"(if requireds_629"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                             (format \"cannot provide from a module without a matching require~a\" (phase-desc_630))"
" orig-s_622"
" matching-stx_621)))"
"(values))))"
"(let-values(((add-prefix_631)"
"(lambda(sym_633)"
"                          (if prefix-sym_624 (string->symbol (format \"~a~a\" prefix-sym_624 sym_633)) sym_633))))"
"(let-values(((found_632)(make-hasheq)))"
"(begin"
"(let-values()"
"(begin"
"(if(list? lst_634)(void)(let-values()(in-list lst_634)))"
"((letrec-values(((for-loop_635)"
"(lambda(fold-var_636 lst_637)"
"(if(pair? lst_637)"
"(let-values(((i_638)(unsafe-car lst_637)))"
"(let-values(((fold-var_639)"
"(let-values()"
"(let-values(((fold-var_641)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_642)"
"(required-id i_638)))"
"(let-values(((phase_643)"
"(required-phase i_638)))"
"(if(let-values(((or-part_644)"
"(if matching-stx_621"
"(not"
"(if(eqv?"
" phase_643"
" at-phase_625)"
"(free-identifier=?$1"
" id_642"
"(datum->syntax$1"
" matching-stx_621"
"(syntax-e$1"
" id_642))"
" phase_643"
" phase_643)"
" #f))"
" #f)))"
"(if or-part_644"
" or-part_644"
"(let-values()"
"(begin"
"(if(list? lst_645)"
"(void)"
"(let-values()"
"(in-list lst_645)))"
"((letrec-values(((for-loop_646)"
"(lambda(result_647"
" lst_648)"
"(if(pair?"
" lst_648)"
"(let-values(((except-id_649)"
"(unsafe-car"
" lst_648)))"
"(let-values(((result_650)"
"(let-values()"
"(let-values(((result_652)"
"(let-values()"
"(let-values()"
"(if(free-identifier=?$1"
" id_642"
" except-id_649"
" phase_643"
" phase_643)"
"(hash-set!"
" found_632"
" except-id_649"
" #t)"
" #f)))))"
"(values"
" result_652)))))"
"(if(not"
"((lambda x_653"
" result_650)"
" except-id_649))"
"(for-loop_646"
" result_650"
"(unsafe-cdr"
" lst_648))"
" result_650)))"
" result_647))))"
" for-loop_646)"
" #f"
" lst_645)))))"
"(void)"
"(let-values()"
"(let-values(((b_654)"
"(resolve+shift/extra-inspector"
" id_642"
" phase_643"
" ns_626)))"
"(let-values(((immed-b_655)"
"(let-values(((temp131_659)"
" #t))"
"(resolve+shift30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp131_659"
" #t"
" #f"
" #f"
" id129_657"
" phase130_658))))"
"(let-values(((temp121_662)"
"(add-prefix_631"
"(syntax-e$1"
" id_642)))"
"((temp128_669)"
"(required-as-transformer?"
" i_638)))"
"(add-provide!101.1"
" protected?127_668"
" temp128_669"
" rp120_661"
" temp121_662"
" phase122_663"
" b123_664"
" immed-b124_665"
" id125_666"
" orig-s126_667)))))))))"
"(void)))))"
"(values fold-var_641)))))"
"(for-loop_635 fold-var_639(unsafe-cdr lst_637))))"
" fold-var_636))))"
" for-loop_635)"
"(void)"
" lst_634)))"
"(if(=(hash-count found_632)(length except-ids_623))"
"(void)"
"(let-values()"
"(let-values()"
"(begin"
"(if(list? lst_670)(void)(let-values()(in-list lst_670)))"
"((letrec-values(((for-loop_671)"
"(lambda(fold-var_672 lst_673)"
"(if(pair? lst_673)"
"(let-values(((except-id_674)(unsafe-car lst_673)))"
"(let-values(((fold-var_675)"
"(let-values()"
"(let-values(((fold-var_677)"
"(let-values()"
"(begin"
"(let-values()"
"(if(let-values(((or-part_678)"
"(hash-ref"
" found_632"
" except-id_674"
" #f)))"
"(if or-part_678"
" or-part_678"
"(let-values()"
"(begin"
"(if(list? lst_679)"
"(void)"
"(let-values()"
"(in-list lst_679)))"
"((letrec-values(((for-loop_680)"
"(lambda(result_681"
" lst_682)"
"(if(pair?"
" lst_682)"
"(let-values(((i_683)"
"(unsafe-car"
" lst_682)))"
"(let-values(((result_684)"
"(let-values()"
"(let-values(((result_686)"
"(let-values()"
"(let-values()"
"(let-values(((id_687)"
"(required-id"
" i_683)))"
"(let-values(((phase_688)"
"(required-phase"
" i_683)))"
"(free-identifier=?$1"
" id_687"
" except-id_674"
" phase_688"
" phase_688)))))))"
"(values"
" result_686)))))"
"(if(not"
"((lambda x_689"
" result_684)"
" i_683))"
"(for-loop_680"
" result_684"
"(unsafe-cdr"
" lst_682))"
" result_684)))"
" result_681))))"
" for-loop_680)"
" #f"
" lst_679)))))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"(if matching-stx_621"
"                                                                                            \"excluded identifier was not defined or required in the module~a\""
"                                                                                            \"excluded identifier was not required from the specified module~a\")"
"(phase-desc_630))"
" orig-s_622"
" except-id_674))))"
"(void)))))"
"(values fold-var_677)))))"
"(for-loop_671 fold-var_675(unsafe-cdr lst_673))))"
" fold-var_672))))"
" for-loop_671)"
"(void)"
" lst_670)))))))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:expanded+parsed expanded+parsed1.1 expanded+parsed? expanded+parsed-s expanded+parsed-parsed)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expanded+parsed"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'expanded+parsed)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 's)"
"(make-struct-field-accessor -ref_4 1 'parsed))))"
"(define-values"
"(struct:semi-parsed-define-values"
" semi-parsed-define-values2.1"
" semi-parsed-define-values?"
" semi-parsed-define-values-s"
" semi-parsed-define-values-syms"
" semi-parsed-define-values-ids"
" semi-parsed-define-values-rhs)"
"(let-values(((struct:_26 make-_27 ?_28 -ref_29 -set!_30)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'semi-parsed-define-values"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'semi-parsed-define-values)))))"
"(values"
" struct:_26"
" make-_27"
" ?_28"
"(make-struct-field-accessor -ref_29 0 's)"
"(make-struct-field-accessor -ref_29 1 'syms)"
"(make-struct-field-accessor -ref_29 2 'ids)"
"(make-struct-field-accessor -ref_29 3 'rhs))))"
"(define-values"
"(struct:semi-parsed-begin-for-syntax"
" semi-parsed-begin-for-syntax3.1"
" semi-parsed-begin-for-syntax?"
" semi-parsed-begin-for-syntax-s"
" semi-parsed-begin-for-syntax-body)"
"(let-values(((struct:_61 make-_62 ?_63 -ref_64 -set!_65)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'semi-parsed-begin-for-syntax"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'semi-parsed-begin-for-syntax)))))"
"(values"
" struct:_61"
" make-_62"
" ?_63"
"(make-struct-field-accessor -ref_64 0 's)"
"(make-struct-field-accessor -ref_64 1 'body))))"
"(define-values"
"(parsed-only)"
"(lambda(l_86)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_87)(void)(let-values()(in-list lst_87)))"
"((letrec-values(((for-loop_88)"
"(lambda(fold-var_89 lst_90)"
"(if(pair? lst_90)"
"(let-values(((i_91)(unsafe-car lst_90)))"
"(let-values(((fold-var_92)"
"(let-values()"
"(if(let-values(((or-part_94)(parsed? i_91)))"
"(if or-part_94"
" or-part_94"
"(let-values(((or-part_95)(expanded+parsed? i_91)))"
"(if or-part_95"
" or-part_95"
"(semi-parsed-begin-for-syntax? i_91)))))"
"(let-values()"
"(let-values(((fold-var_97)"
"(let-values()"
"(cons"
"(let-values()"
"(if(expanded+parsed? i_91)"
"(let-values()(expanded+parsed-parsed i_91))"
"(if(semi-parsed-begin-for-syntax? i_91)"
"(let-values()"
"(parsed-begin-for-syntax21.1"
"(semi-parsed-begin-for-syntax-s i_91)"
"(parsed-only"
"(semi-parsed-begin-for-syntax-body"
" i_91))))"
"(let-values() i_91))))"
" fold-var_96))))"
"(values fold-var_97)))"
" fold-var_93))))"
"(for-loop_88 fold-var_92(unsafe-cdr lst_90))))"
" fold-var_89))))"
" for-loop_88)"
" null"
" lst_87))))))"
"(define-values"
"(syntax-only)"
"(lambda(l_98)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_99)(void)(let-values()(in-list lst_99)))"
"((letrec-values(((for-loop_100)"
"(lambda(fold-var_101 lst_102)"
"(if(pair? lst_102)"
"(let-values(((i_103)(unsafe-car lst_102)))"
"(let-values(((fold-var_104)"
"(let-values()"
"(if(let-values(((or-part_106)(syntax?$1 i_103)))"
"(if or-part_106"
" or-part_106"
"(let-values(((or-part_107)(expanded+parsed? i_103)))"
"(if or-part_107"
" or-part_107"
"(semi-parsed-begin-for-syntax? i_103)))))"
"(let-values()"
"(let-values(((fold-var_109)"
"(let-values()"
"(cons"
"(let-values()"
"(if(expanded+parsed? i_103)"
"(let-values()(expanded+parsed-s i_103))"
"(if(semi-parsed-begin-for-syntax? i_103)"
"(let-values()"
"(let-values(((s_110)"
"(semi-parsed-begin-for-syntax-s"
" i_103)))"
"(let-values(((nested-bodys_111)"
"(semi-parsed-begin-for-syntax-body"
" i_103)))"
"(let-values(((disarmed-s_112)"
"(syntax-disarm$1"
" s_110)))"
"(let-values(((ok?_113"
" begin-for-syntax7_114"
" _8_115)"
"(let-values()"
"(let-values()"
"(let-values(((begin-for-syntax7_128"
" _8_129)"
"(let-values(((s_130)"
"(if(syntax?$1"
" s_126)"
"(syntax-e$1"
" s_126)"
" s_126)))"
"(if(pair?"
" s_130)"
"(let-values(((begin-for-syntax9_131)"
"(let-values(((s_133)"
"(car"
" s_130)))"
" s_133))"
"((_10_132)"
"(let-values(((s_134)"
"(cdr"
" s_130)))"
"(let-values(((s_135)"
"(if(syntax?$1"
" s_134)"
"(syntax-e$1"
" s_134)"
" s_134)))"
"(let-values(((flat-s_136)"
"(to-syntax-list.1"
" s_135)))"
"(if(not"
" flat-s_136)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                 \"bad syntax\""
" orig-s_127))"
"(let-values()"
" flat-s_136)))))))"
"(values"
" begin-for-syntax9_131"
" _10_132))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_127)))))"
"(values"
" #t"
" begin-for-syntax7_128"
" _8_129))))))"
"(let-values(((temp12_138)"
"(list*"
" begin-for-syntax7_114"
"(syntax-only"
" nested-bodys_111))))"
"(rebuild62.1"
" #f"
" #f"
" s11_137"
" temp12_138)))))))"
"(let-values() i_103))))"
" fold-var_108))))"
"(values fold-var_109)))"
" fold-var_105))))"
"(for-loop_100 fold-var_104(unsafe-cdr lst_102))))"
" fold-var_101))))"
" for-loop_100)"
" null"
" lst_99))))))"
"(void)"
"(void)"
"(define-values(check-cross-phase-persistent-form)(lambda(bodys_1)(check-body bodys_1)))"
"(define-values"
"(check-body)"
"(lambda(bodys_2)"
"(let-values()"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(fold-var_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((body_7)(unsafe-car lst_6)))"
"(let-values(((fold-var_8)"
"(let-values()"
"(let-values(((fold-var_10)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((p_11)"
"(if(expanded+parsed? body_7)"
"(expanded+parsed-parsed body_7)"
" body_7)))"
"(if(parsed-define-values? p_11)"
"(let-values()"
"(check-expr"
"(parsed-define-values-rhs p_11)"
"(length(parsed-define-values-syms p_11))"
" p_11))"
"(if(let-values(((or-part_12)"
"(parsed-#%declare? p_11)))"
"(if or-part_12"
" or-part_12"
"(let-values(((or-part_13)"
"(parsed-module? p_11)))"
"(if or-part_13"
" or-part_13"
"(syntax?$1 p_11)))))"
"(let-values()(void))"
"(let-values()(disallow p_11))))))"
"(void)))))"
"(values fold-var_10)))))"
"(for-loop_4 fold-var_8(unsafe-cdr lst_6))))"
" fold-var_5))))"
" for-loop_4)"
"(void)"
" lst_3)))))"
"(define-values"
"(check-expr)"
"(lambda(e_14 num-results_15 enclosing_16)"
"(if(let-values(((or-part_17)(parsed-lambda? e_14)))(if or-part_17 or-part_17(parsed-case-lambda? e_14)))"
"(let-values()(check-count 1 num-results_15 enclosing_16))"
"(if(parsed-quote? e_14)"
"(let-values()(begin(check-datum(parsed-quote-datum e_14) e_14)(check-count 1 num-results_15 enclosing_16)))"
"(if(parsed-app? e_14)"
"(let-values()"
"(let-values(((rands_18)(cdr(parsed-app-rator+rands e_14))))"
"(begin"
"(let-values()"
"(begin"
"(if(list? lst_19)(void)(let-values()(in-list lst_19)))"
"((letrec-values(((for-loop_20)"
"(lambda(fold-var_21 lst_22)"
"(if(pair? lst_22)"
"(let-values(((rand_23)(unsafe-car lst_22)))"
"(let-values(((fold-var_24)"
"(let-values()"
"(let-values(((fold-var_26)"
"(let-values()"
"(begin"
"(let-values()"
"(check-expr rand_23 1 e_14))"
"(void)))))"
"(values fold-var_26)))))"
"(for-loop_20 fold-var_24(unsafe-cdr lst_22))))"
" fold-var_21))))"
" for-loop_20)"
"(void)"
" lst_19)))"
"(let-values(((tmp_27)(cross-phase-primitive-name(car(parsed-app-rator+rands e_14)))))"
"(if(if(equal? tmp_27 'cons) #t(equal? tmp_27 'list))"
"(let-values()(check-count 1 num-results_15 enclosing_16))"
"(if(equal? tmp_27 'make-struct-type)"
"(let-values()(check-count 5 num-results_15 enclosing_16))"
"(if(equal? tmp_27 'make-struct-type-property)"
"(let-values()(check-count 3 num-results_15 enclosing_16))"
"(if(equal? tmp_27 'gensym)"
"(let-values()"
"(if(let-values(((or-part_28)(= 0(length rands_18))))"
"(if or-part_28"
" or-part_28"
"(if(= 1(length rands_18))(quoted-string?(car rands_18)) #f)))"
"(void)"
"(let-values()(disallow e_14))))"
"(if(equal? tmp_27 'string->uninterned-symbol)"
"(let-values()"
"(if(if(= 1(length rands_18))(quoted-string?(car rands_18)) #f)"
"(void)"
"(let-values()(disallow e_14))))"
"(let-values()(disallow e_14)))))))))))"
"(void))))))"
"(define-values"
"(check-count)"
"(lambda(is-num_29 expected-num_30 enclosing_31)"
"(if(= is-num_29 expected-num_30)(void)(let-values()(disallow enclosing_31)))))"
"(define-values"
"(check-datum)"
"(lambda(d_32 e_33)"
"(if(let-values(((or-part_34)(number? d_32)))"
"(if or-part_34"
" or-part_34"
"(let-values(((or-part_35)(boolean? d_32)))"
"(if or-part_35"
" or-part_35"
"(let-values(((or-part_36)(symbol? d_32)))"
"(if or-part_36"
" or-part_36"
"(let-values(((or-part_37)(string? d_32)))(if or-part_37 or-part_37(bytes? d_32)))))))))"
"(let-values()(void))"
"(let-values()(disallow e_33)))))"
"(define-values(quoted-string?)(lambda(e_38)(if(parsed-quote? e_38)(string?(parsed-quote-datum e_38)) #f)))"
"(define-values"
"(cross-phase-primitive-name)"
"(lambda(id_39)"
"(if(parsed-id? id_39)"
"(let-values()"
"(let-values(((b_40)(parsed-id-binding id_39)))"
"(if(module-binding? b_40)"
"(if(eq? runtime-module-name(1/module-path-index-resolve(module-binding-module b_40)))"
"(module-binding-sym b_40)"
" #f)"
" #f)))"
"(let-values() #f))))"
"(define-values"
"(disallow)"
"(lambda(body_41)"
"(raise-syntax-error$1"
" 'module"
"     \"not allowed in a cross-phase persistent module\""
"(if(parsed? body_41)(datum->syntax$1 #f body_41(parsed-s body_41)) body_41))))"
"(void)"
"(void)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'module"
"(lambda(s_51 ctx_52)"
"(begin"
"(if(eq?(expand-context-context ctx_52) 'top-level)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((obs_53)(expand-context-observer ctx_52)))"
"(if obs_53(let-values()(let-values()(call-expand-observe obs_53 'prim-module)))(void)))"
"               (raise-syntax-error$1 #f \"allowed only at the top level\" s_51))))"
"(let-values()"
"(let-values(((temp205_56) #f))"
"(expand-module16.1 #f #f #f #f #f #f #f #f #f #f #f #f s203_54 ctx204_55 temp205_56)))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'module*"
"(lambda(s_57 ctx_58)"
"(begin"
"(let-values(((obs_59)(expand-context-observer ctx_58)))"
"(if obs_59(let-values()(let-values()(call-expand-observe obs_59 'prim-module)))(void)))"
"         (raise-syntax-error$1 #f \"illegal use (not in a module top-level)\" s_57)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%module-begin"
"(lambda(s_60 ctx_61)"
"(begin"
"(let-values(((obs_62)(expand-context-observer ctx_61)))"
"(if obs_62(let-values()(let-values()(call-expand-observe obs_62 'prim-module-begin)))(void)))"
"(if(eq?(expand-context-context ctx_61) 'module-begin)"
"(void)"
"           (let-values () (raise-syntax-error$1 #f \"not in a module-definition context\" s_60)))"
"(if(expand-context-module-begin-k ctx_61)"
"(void)"
"           (let-values () (raise-syntax-error$1 #f \"not currently transforming a module\" s_60)))"
"((expand-context-module-begin-k ctx_61)"
" s_60"
"(let-values()"
"(if(expand-context? the-struct_63)"
"(let-values(((module-begin-k206_64) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_63)"
"(root-expand-context-post-expansion-scope the-struct_63)"
"(root-expand-context-top-level-bind-scope the-struct_63)"
"(root-expand-context-all-scopes-stx the-struct_63)"
"(root-expand-context-use-site-scopes the-struct_63)"
"(root-expand-context-defined-syms the-struct_63)"
"(root-expand-context-frame-id the-struct_63)"
"(root-expand-context-counter the-struct_63)"
"(root-expand-context-lift-key the-struct_63)"
"(expand-context-to-parsed? the-struct_63)"
"(expand-context-context the-struct_63)"
"(expand-context-phase the-struct_63)"
"(expand-context-namespace the-struct_63)"
"(expand-context-env the-struct_63)"
"(expand-context-user-env the-struct_63)"
"(expand-context-post-expansion-scope-action the-struct_63)"
"(expand-context-scopes the-struct_63)"
"(expand-context-def-ctx-scopes the-struct_63)"
"(expand-context-binding-layer the-struct_63)"
"(expand-context-reference-records the-struct_63)"
"(expand-context-only-immediate? the-struct_63)"
"(expand-context-just-once? the-struct_63)"
" module-begin-k206_64"
"(expand-context-need-eventually-defined the-struct_63)"
"(expand-context-allow-unbound? the-struct_63)"
"(expand-context-in-local-expand? the-struct_63)"
"(expand-context-stops the-struct_63)"
"(expand-context-current-introduction-scopes the-struct_63)"
"(expand-context-declared-submodule-names the-struct_63)"
"(expand-context-lifts the-struct_63)"
"(expand-context-lift-envs the-struct_63)"
"(expand-context-module-lifts the-struct_63)"
"(expand-context-require-lifts the-struct_63)"
"(expand-context-to-module-lifts the-struct_63)"
"(expand-context-requires+provides the-struct_63)"
"(expand-context-name the-struct_63)"
"(expand-context-observer the-struct_63)))"
"              (raise-argument-error 'struct-copy \"expand-context?\" the-struct_63))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%declare"
"(lambda(s_65 ctx_66)"
"(begin"
"(let-values(((obs_67)(expand-context-observer ctx_66)))"
"(if obs_67(let-values()(let-values()(call-expand-observe obs_67 'prim-declare)))(void)))"
"         (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_65)))))"
" print-values)"
"(define-values"
"(expand-module16.1)"
"(lambda(always-produce-compiled?1_68"
" always-produce-compiled?7_69"
" enclosing-all-scopes-stx3_70"
" enclosing-all-scopes-stx9_71"
" enclosing-is-cross-phase-persistent?4_72"
" enclosing-is-cross-phase-persistent?10_73"
" enclosing-requires+provides5_74"
" enclosing-requires+provides11_75"
" keep-enclosing-scope-at-phase2_76"
" keep-enclosing-scope-at-phase8_77"
" mpis-for-enclosing-reset6_78"
" mpis-for-enclosing-reset12_79"
" s13_80"
" init-ctx14_81"
" enclosing-self15_82)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((always-produce-compiled?_86)"
"(if always-produce-compiled?7_69 always-produce-compiled?1_68 #f)))"
"(let-values(((keep-enclosing-scope-at-phase_87)"
"(if keep-enclosing-scope-at-phase8_77 keep-enclosing-scope-at-phase2_76 #f)))"
"(let-values(((enclosing-all-scopes-stx_88)"
"(if enclosing-all-scopes-stx9_71 enclosing-all-scopes-stx3_70 #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_89)"
"(if enclosing-is-cross-phase-persistent?10_73"
" enclosing-is-cross-phase-persistent?4_72"
" #f)))"
"(let-values(((enclosing-r+p_90)"
"(if enclosing-requires+provides11_75 enclosing-requires+provides5_74 #f)))"
"(let-values(((mpis-for-enclosing-reset_91)"
"(if mpis-for-enclosing-reset12_79 mpis-for-enclosing-reset6_78 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_142)(expand-context-observer init-ctx_84)))"
"(if obs_142"
"(let-values()(let-values()(call-expand-observe obs_142 'prim-module)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_92)(syntax-disarm$1 s_83)))"
"(let-values(((ok?_93 module207_94 id:module-name208_95 initial-require209_96 body210_97)"
"(let-values()"
"(let-values()"
"(let-values(((module207_145"
" id:module-name208_146"
" initial-require209_147"
" body210_148)"
"(let-values(((s_149)"
"(if(syntax?$1 s_143)"
"(syntax-e$1 s_143)"
" s_143)))"
"(if(pair? s_149)"
"(let-values(((module211_150)"
"(let-values(((s_154)(car s_149)))"
" s_154))"
"((id:module-name212_151"
" initial-require213_152"
" body214_153)"
"(let-values(((s_155)(cdr s_149)))"
"(let-values(((s_156)"
"(if(syntax?$1 s_155)"
"(syntax-e$1 s_155)"
" s_155)))"
"(if(pair? s_156)"
"(let-values(((id:module-name215_157)"
"(let-values(((s_160)"
"(car"
" s_156)))"
"(if(let-values(((or-part_161)"
"(if(syntax?$1"
" s_160)"
"(symbol?"
"(syntax-e$1"
" s_160))"
" #f)))"
"(if or-part_161"
" or-part_161"
"(symbol?"
" s_160)))"
" s_160"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"not an identifier\""
" orig-s_144"
" s_160))))"
"((initial-require216_158"
" body217_159)"
"(let-values(((s_162)"
"(cdr"
" s_156)))"
"(let-values(((s_163)"
"(if(syntax?$1"
" s_162)"
"(syntax-e$1"
" s_162)"
" s_162)))"
"(if(pair? s_163)"
"(let-values(((initial-require218_164)"
"(let-values(((s_166)"
"(car"
" s_163)))"
" s_166))"
"((body219_165)"
"(let-values(((s_167)"
"(cdr"
" s_163)))"
"(let-values(((s_168)"
"(if(syntax?$1"
" s_167)"
"(syntax-e$1"
" s_167)"
" s_167)))"
"(let-values(((flat-s_169)"
"(to-syntax-list.1"
" s_168)))"
"(if(not"
" flat-s_169)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_144))"
"(let-values()"
" flat-s_169)))))))"
"(values"
" initial-require218_164"
" body219_165))"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_144))))))"
"(values"
" id:module-name215_157"
" initial-require216_158"
" body217_159))"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_144))))))"
"(values"
" module211_150"
" id:module-name212_151"
" initial-require213_152"
" body214_153))"
"                                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_144)))))"
"(values"
" #t"
" module207_145"
" id:module-name208_146"
" initial-require209_147"
" body210_148))))))"
"(let-values(((initial-require_112)(syntax->datum$1 initial-require209_96)))"
"(let-values((()"
"(begin"
"(if(let-values()"
"(if or-part_170 or-part_170(1/module-path? initial-require_112)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                     \"not a module path\""
" s_83"
" initial-require209_96)))"
"(values))))"
"(let-values(((phase_113) 0))"
"(let-values(((module-name-sym_114)(syntax-e$1 id:module-name208_95)))"
"(let-values(((outside-scope_115)(new-scope 'module)))"
"(let-values(((inside-scope_116)(new-multi-scope module-name-sym_114)))"
"(let-values(((self_117)"
"(make-self-module-path-index"
"(if enclosing-self_85"
" module-name-sym_114"
"(string->uninterned-symbol"
"(symbol->string module-name-sym_114)))"
" enclosing-self_85)))"
"(let-values(((enclosing-mod_118)"
"(if enclosing-self_85"
"                                                            (1/module-path-index-join '(submod \"..\") self_117)"
" #f)))"
"(let-values((()"
"(begin"
"(if(if enclosing-mod_118 mpis-for-enclosing-reset_91 #f)"
"(let-values()"
"(set-box!"
" mpis-for-enclosing-reset_91"
"(cons"
" enclosing-mod_118"
"(unbox mpis-for-enclosing-reset_91))))"
"(void))"
"(values))))"
"(let-values(((apply-module-scopes_119)"
"(make-apply-module-scopes"
" outside-scope_115"
" inside-scope_116"
" init-ctx_84"
" keep-enclosing-scope-at-phase_87"
" self_117"
" enclosing-self_85"
" enclosing-mod_118)))"
"(let-values(((all-scopes-s_120)"
"(apply-module-scopes_119"
"(if enclosing-all-scopes-stx_88"
"(syntax-shift-phase-level$1"
" enclosing-all-scopes-stx_88"
" keep-enclosing-scope-at-phase_87)"
" initial-require209_96))))"
"(let-values(((initial-require-s_121)"
"(apply-module-scopes_119 initial-require209_96)))"
"(let-values(((root-ctx_122)"
"(let-values(((temp220_172)"
"(if keep-enclosing-scope-at-phase_87"
"(root-expand-context-module-scopes"
" init-ctx_84)"
" null)))"
"(make-root-expand-context10.1"
" all-scopes-s223_175"
" #t"
" temp220_172"
" #t"
" outside-scope221_173"
" #t"
" inside-scope222_174"
" #t))))"
"(let-values(((new-module-scopes_123)"
"(root-expand-context-module-scopes root-ctx_122)))"
"(let-values(((frame-id_124)"
"(root-expand-context-frame-id root-ctx_122)))"
"(let-values(((m-ns_125)"
"(let-values(((temp224_177)"
"(expand-context-namespace"
" init-ctx_84))"
"((temp227_180)"
"(if enclosing-self_85 #t #f)))"
"(make-module-namespace48.1"
" temp227_180"
" self225_178"
" root-ctx226_179"
" temp224_177))))"
"(let-values(((ctx_126)"
"(let-values(((the-struct_181)"
"(copy-root-expand-context"
" init-ctx_84"
" root-ctx_122)))"
"(if(expand-context? the-struct_181)"
"(let-values(((allow-unbound?228_182)"
" #f)"
"((just-once?232_186) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_181)"
"(root-expand-context-post-expansion-scope"
" the-struct_181)"
"(root-expand-context-top-level-bind-scope"
" the-struct_181)"
"(root-expand-context-all-scopes-stx"
" the-struct_181)"
"(root-expand-context-use-site-scopes"
" the-struct_181)"
"(root-expand-context-defined-syms"
" the-struct_181)"
"(root-expand-context-frame-id"
" the-struct_181)"
"(root-expand-context-counter"
" the-struct_181)"
"(root-expand-context-lift-key"
" the-struct_181)"
"(expand-context-to-parsed?"
" the-struct_181)"
"(expand-context-context"
" the-struct_181)"
" phase231_185"
" namespace229_183"
"(expand-context-env the-struct_181)"
"(expand-context-user-env"
" the-struct_181)"
" post-expansion-scope-action230_184"
"(expand-context-scopes"
" the-struct_181)"
"(expand-context-def-ctx-scopes"
" the-struct_181)"
"(expand-context-binding-layer"
" the-struct_181)"
"(expand-context-reference-records"
" the-struct_181)"
"(expand-context-only-immediate?"
" the-struct_181)"
" just-once?232_186"
"(expand-context-module-begin-k"
" the-struct_181)"
"(expand-context-need-eventually-defined"
" the-struct_181)"
" allow-unbound?228_182"
"(expand-context-in-local-expand?"
" the-struct_181)"
"(expand-context-stops the-struct_181)"
"(expand-context-current-introduction-scopes"
" the-struct_181)"
"(expand-context-declared-submodule-names"
" the-struct_181)"
"(expand-context-lifts the-struct_181)"
"(expand-context-lift-envs"
" the-struct_181)"
"(expand-context-module-lifts"
" the-struct_181)"
"(expand-context-require-lifts"
" the-struct_181)"
"(expand-context-to-module-lifts"
" the-struct_181)"
"(expand-context-requires+provides"
" the-struct_181)"
"(expand-context-name the-struct_181)"
"(expand-context-observer"
" the-struct_181)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                 \"expand-context?\""
" the-struct_181)))))"
"(let-values(((bodys_127)"
"(let-values(((scoped-s_187)"
"(apply-module-scopes_119"
" disarmed-s_92)))"
"(let-values(((ok?_188"
" _233_189"
" _234_190"
" _235_191"
" body236_192)"
"(let-values()"
"(let-values()"
"(let-values(((_233_209"
" _234_210"
" _235_211"
" body236_212)"
"(let-values(((s_213)"
"(if(syntax?$1"
" s_207)"
"(syntax-e$1"
" s_207)"
" s_207)))"
"(if(pair?"
" s_213)"
"(let-values(((_237_214)"
"(let-values(((s_218)"
"(car"
" s_213)))"
" s_218))"
"((_238_215"
" _239_216"
" body240_217)"
"(let-values(((s_219)"
"(cdr"
" s_213)))"
"(let-values(((s_220)"
"(if(syntax?$1"
" s_219)"
"(syntax-e$1"
" s_219)"
" s_219)))"
"(if(pair?"
" s_220)"
"(let-values(((_241_221)"
"(let-values(((s_224)"
"(car"
" s_220)))"
" s_224))"
"((_242_222"
" body243_223)"
"(let-values(((s_225)"
"(cdr"
" s_220)))"
"(let-values(((s_226)"
"(if(syntax?$1"
" s_225)"
"(syntax-e$1"
" s_225)"
" s_225)))"
"(if(pair?"
" s_226)"
"(let-values(((_244_227)"
"(let-values(((s_229)"
"(car"
" s_226)))"
" s_229))"
"((body245_228)"
"(let-values(((s_230)"
"(cdr"
" s_226)))"
"(let-values(((s_231)"
"(if(syntax?$1"
" s_230)"
"(syntax-e$1"
" s_230)"
" s_230)))"
"(let-values(((flat-s_232)"
"(to-syntax-list.1"
" s_231)))"
"(if(not"
" flat-s_232)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                     \"bad syntax\""
" orig-s_208))"
"(let-values()"
" flat-s_232)))))))"
"(values"
" _244_227"
" body245_228))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_208))))))"
"(values"
" _241_221"
" _242_222"
" body243_223))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_208))))))"
"(values"
" _237_214"
" _238_215"
" _239_216"
" body240_217))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_208)))))"
"(values"
" #t"
" _233_209"
" _234_210"
" _235_211"
" body236_212))))))"
" body236_192))))"
"(let-values(((requires+provides_128)"
"(make-requires+provides self_117)))"
"(let-values(((defined-syms_129)"
"(root-expand-context-defined-syms"
" root-ctx_122)))"
"(let-values(((mpis-to-reset_130)(box null)))"
"(let-values(((initial-require!_131)"
"(lambda()"
"(if(not"
" keep-enclosing-scope-at-phase_87)"
"(let-values()"
"(let-values(((temp251_239)"
" 'module))"
"(perform-initial-require!38.1"
" temp251_239"
" initial-require246_234"
" self247_235"
" all-scopes-s248_236"
" m-ns249_237"
" requires+provides250_238)))"
"(let-values()"
"(begin"
"(add-required-module!"
" requires+provides_128"
" enclosing-mod_118"
" keep-enclosing-scope-at-phase_87"
" enclosing-is-cross-phase-persistent?_89)"
"(let-values()"
"(add-enclosing-module-defined-and-required!61.1"
" enclosing-r+p253_242"
" requires+provides252_241"
" enclosing-mod254_243"
" keep-enclosing-scope-at-phase255_244))"
"(let-values()"
"(namespace-module-visit!102.1"
" #f"
" #f"
" m-ns256_245"
" enclosing-mod257_246"
" keep-enclosing-scope-at-phase258_247))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_248)"
"(expand-context-observer"
" init-ctx_84)))"
"(if obs_248"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_248"
" 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(initial-require!_131)"
"(values))))"
"(let-values(((again?_132) #f))"
"(let-values(((module-begin-k_133)"
"(lambda(mb-s_249 ctx_250)"
"(let-values((()"
"(begin"
"(if again?_132"
"(let-values()"
"(begin"
"(requires+provides-reset!"
" requires+provides_128)"
"(initial-require!_131)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(set! again?_132"
" #t)"
"(values))))"
"(let-values(((added-s_251)"
"(add-scope"
" mb-s_249"
" inside-scope_116)))"
"(let-values((()"
"(begin"
"(let-values(((obs_277)"
"(expand-context-observer"
" ctx_250)))"
"(if obs_277"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_277"
" 'rename-one"
" added-s_251)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-mb-s_252)"
"(syntax-disarm$1"
" added-s_251)))"
"(let-values(((ok?_253"
" #%module-begin259_254"
" body260_255)"
"(let-values()"
"(let-values()"
"(let-values(((#%module-begin259_280"
" body260_281)"
"(let-values(((s_282)"
"(if(syntax?$1"
" s_278)"
"(syntax-e$1"
" s_278)"
" s_278)))"
"(if(pair?"
" s_282)"
"(let-values(((#%module-begin261_283)"
"(let-values(((s_285)"
"(car"
" s_282)))"
" s_285))"
"((body262_284)"
"(let-values(((s_286)"
"(cdr"
" s_282)))"
"(let-values(((s_287)"
"(if(syntax?$1"
" s_286)"
"(syntax-e$1"
" s_286)"
" s_286)))"
"(let-values(((flat-s_288)"
"(to-syntax-list.1"
" s_287)))"
"(if(not"
" flat-s_288)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_279))"
"(let-values()"
" flat-s_288)))))))"
"(values"
" #%module-begin261_283"
" body262_284))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                               \"bad syntax\""
" orig-s_279)))))"
"(values"
" #t"
" #%module-begin259_280"
" body260_281))))))"
"(let-values()"
"(let-values(((need-eventually-defined_267)"
"(make-hasheqv)))"
"(let-values(((module-ends_268)"
"(make-shared-module-ends)))"
"(let-values(((declared-keywords_269)"
"(make-hasheq)))"
"(let-values(((declared-submodule-names_270)"
"(make-hasheq)))"
"(let-values(((expression-expanded-bodys_271)"
"((letrec-values(((pass-1-and-2-loop_289)"
"(lambda(bodys_290"
" phase_291)"
"(let-values(((def-ctx-scopes_292)"
"(box"
" null)))"
"(let-values(((partial-body-ctx_293)"
"(let-values()"
"(if(expand-context?"
" the-struct_296)"
"(let-values(((context270_297)"
" 'module)"
"((namespace272_299)"
"(namespace->namespace-at-phase"
" m-ns_125"
" phase_291))"
"((only-immediate?273_300)"
" #t)"
"((lifts277_304)"
"(let-values(((temp281_308)"
"(make-wrap-as-definition"
" self_117"
" frame-id_124"
" inside-scope_116"
" all-scopes-s_120"
" defined-syms_129"
" requires+provides_128)))"
"(make-lift-context6.1"
" #f"
" #f"
" temp281_308)))"
"((module-lifts278_305)"
"(make-module-lift-context"
" phase_291"
" #t))"
"((require-lifts279_306)"
"(make-require-lift-context"
" phase_291"
"(let-values(((...er/expand/module.rkt:273:63_309)"
" make-parse-lifted-require202.1))"
"(make-parse-lifted-require200.1"
" declared-submodule-names285_313"
" m-ns282_310"
" self283_311"
" requires+provides284_312))))"
"((to-module-lifts280_307)"
"(let-values(((temp288_317)"
" #f))"
"(make-to-module-lift-context26.1"
" temp288_317"
" module-ends287_316"
" phase286_315))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_296)"
"(root-expand-context-post-expansion-scope"
" the-struct_296)"
"(root-expand-context-top-level-bind-scope"
" the-struct_296)"
"(root-expand-context-all-scopes-stx"
" the-struct_296)"
"(root-expand-context-use-site-scopes"
" the-struct_296)"
"(root-expand-context-defined-syms"
" the-struct_296)"
"(root-expand-context-frame-id"
" the-struct_296)"
"(root-expand-context-counter"
" the-struct_296)"
"(root-expand-context-lift-key"
" the-struct_296)"
"(expand-context-to-parsed?"
" the-struct_296)"
" context270_297"
" phase271_298"
" namespace272_299"
"(expand-context-env"
" the-struct_296)"
"(expand-context-user-env"
" the-struct_296)"
"(expand-context-post-expansion-scope-action"
" the-struct_296)"
"(expand-context-scopes"
" the-struct_296)"
" def-ctx-scopes274_301"
"(expand-context-binding-layer"
" the-struct_296)"
"(expand-context-reference-records"
" the-struct_296)"
" only-immediate?273_300"
"(expand-context-just-once?"
" the-struct_296)"
"(expand-context-module-begin-k"
" the-struct_296)"
" need-eventually-defined275_302"
"(expand-context-allow-unbound?"
" the-struct_296)"
"(expand-context-in-local-expand?"
" the-struct_296)"
"(expand-context-stops"
" the-struct_296)"
"(expand-context-current-introduction-scopes"
" the-struct_296)"
" declared-submodule-names276_303"
" lifts277_304"
"(expand-context-lift-envs"
" the-struct_296)"
" module-lifts278_305"
" require-lifts279_306"
" to-module-lifts280_307"
"(expand-context-requires+provides"
" the-struct_296)"
"(expand-context-name"
" the-struct_296)"
"(expand-context-observer"
" the-struct_296)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                             \"expand-context?\""
" the-struct_296)))))"
"(let-values(((partially-expanded-bodys_294)"
"(let-values(((...er/expand/module.rkt:283:11_318)"
" partially-expand-bodys79.1)"
"((temp291_321)"
"(zero?"
" phase_291))"
"((pass-1-and-2-loop304_334)"
" pass-1-and-2-loop_289))"
"(partially-expand-bodys77.1"
" all-scopes-s299_329"
" partial-body-ctx293_323"
" declared-keywords301_331"
" declared-submodule-names302_332"
" defined-syms300_330"
" frame-id296_326"
" pass-1-and-2-loop304_334"
" mpis-to-reset303_333"
" m-ns294_324"
" need-eventually-defined298_328"
" s290_320"
" phase292_322"
" requires+provides297_327"
" self295_325"
" temp291_321"
" bodys289_319))))"
"(let-values((()"
"(begin"
"(let-values(((obs_335)"
"(expand-context-observer"
" partial-body-ctx_293)))"
"(if obs_335"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_335"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_295)"
"(let-values(((the-struct_336)"
"(accumulate-def-ctx-scopes"
" partial-body-ctx_293"
" def-ctx-scopes_292)))"
"(if(expand-context?"
" the-struct_336)"
"(let-values(((only-immediate?305_337)"
" #f)"
"((def-ctx-scopes306_338)"
" #f)"
"((post-expansion-scope307_339)"
" #f)"
"((to-module-lifts308_340)"
"(let-values(((temp311_344)"
" #t))"
"(make-to-module-lift-context26.1"
" temp311_344"
" module-ends310_343"
" phase309_342))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_336)"
" post-expansion-scope307_339"
"(root-expand-context-top-level-bind-scope"
" the-struct_336)"
"(root-expand-context-all-scopes-stx"
" the-struct_336)"
"(root-expand-context-use-site-scopes"
" the-struct_336)"
"(root-expand-context-defined-syms"
" the-struct_336)"
"(root-expand-context-frame-id"
" the-struct_336)"
"(root-expand-context-counter"
" the-struct_336)"
"(root-expand-context-lift-key"
" the-struct_336)"
"(expand-context-to-parsed?"
" the-struct_336)"
"(expand-context-context"
" the-struct_336)"
"(expand-context-phase"
" the-struct_336)"
"(expand-context-namespace"
" the-struct_336)"
"(expand-context-env"
" the-struct_336)"
"(expand-context-user-env"
" the-struct_336)"
"(expand-context-post-expansion-scope-action"
" the-struct_336)"
"(expand-context-scopes"
" the-struct_336)"
" def-ctx-scopes306_338"
"(expand-context-binding-layer"
" the-struct_336)"
"(expand-context-reference-records"
" the-struct_336)"
" only-immediate?305_337"
"(expand-context-just-once?"
" the-struct_336)"
"(expand-context-module-begin-k"
" the-struct_336)"
"(expand-context-need-eventually-defined"
" the-struct_336)"
"(expand-context-allow-unbound?"
" the-struct_336)"
"(expand-context-in-local-expand?"
" the-struct_336)"
"(expand-context-stops"
" the-struct_336)"
"(expand-context-current-introduction-scopes"
" the-struct_336)"
"(expand-context-declared-submodule-names"
" the-struct_336)"
"(expand-context-lifts"
" the-struct_336)"
"(expand-context-lift-envs"
" the-struct_336)"
"(expand-context-module-lifts"
" the-struct_336)"
"(expand-context-require-lifts"
" the-struct_336)"
" to-module-lifts308_340"
"(expand-context-requires+provides"
" the-struct_336)"
"(expand-context-name"
" the-struct_336)"
"(expand-context-observer"
" the-struct_336)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                   \"expand-context?\""
" the-struct_336)))))"
"(let-values(((...er/expand/module.rkt:313:9_345)"
" finish-expanding-body-expressons95.1)"
"((temp264_347)"
"(zero?"
" phase_291)))"
"(finish-expanding-body-expressons93.1"
" body-ctx266_349"
" declared-submodule-names268_351"
" mpis-to-reset269_352"
" phase265_348"
" self267_350"
" temp264_347"
" partially-expanded-bodys263_346))))))))))"
" pass-1-and-2-loop_289)"
" bodys_266"
" phase_113)))"
"(let-values((()"
"(begin"
"(check-defined-by-now"
" need-eventually-defined_267"
" self_117)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_353)"
"(expand-context-observer"
" ctx_250)))"
"(if obs_353"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_353"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((fully-expanded-bodys-except-post-submodules_272)"
"(let-values(((...er/expand/module.rkt:330:7_354)"
" resolve-provides113.1))"
"(resolve-provides111.1"
" ctx319_362"
" declared-submodule-names315_358"
" m-ns316_359"
" s313_356"
" phase317_360"
" requires+provides314_357"
" self318_361"
" expression-expanded-bodys312_355))))"
"(let-values(((is-cross-phase-persistent?_273)"
"(hash-ref"
" declared-keywords_269"
" '#:cross-phase-persistent"
" #f)))"
"(let-values((()"
"(begin"
"(if is-cross-phase-persistent?_273"
"(let-values()"
"(begin"
"(if(requires+provides-can-cross-phase-persistent?"
" requires+provides_128)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"cannot be cross-phase persistent due to required modules\""
" s_83"
"(hash-ref"
" declared-keywords_269"
" '#:cross-phase-persistent))))"
"(check-cross-phase-persistent-form"
" fully-expanded-bodys-except-post-submodules_272)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_363)"
"(expand-context-observer"
" ctx_250)))"
"(if obs_363"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_363"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((submod-ctx_274)"
"(let-values()"
"(if(expand-context?"
" the-struct_364)"
"(let-values(((frame-id320_365)"
" #f)"
"((post-expansion-scope321_366)"
" #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_364)"
" post-expansion-scope321_366"
"(root-expand-context-top-level-bind-scope"
" the-struct_364)"
"(root-expand-context-all-scopes-stx"
" the-struct_364)"
"(root-expand-context-use-site-scopes"
" the-struct_364)"
"(root-expand-context-defined-syms"
" the-struct_364)"
" frame-id320_365"
"(root-expand-context-counter"
" the-struct_364)"
"(root-expand-context-lift-key"
" the-struct_364)"
"(expand-context-to-parsed?"
" the-struct_364)"
"(expand-context-context"
" the-struct_364)"
"(expand-context-phase"
" the-struct_364)"
"(expand-context-namespace"
" the-struct_364)"
"(expand-context-env"
" the-struct_364)"
"(expand-context-user-env"
" the-struct_364)"
"(expand-context-post-expansion-scope-action"
" the-struct_364)"
"(expand-context-scopes"
" the-struct_364)"
"(expand-context-def-ctx-scopes"
" the-struct_364)"
"(expand-context-binding-layer"
" the-struct_364)"
"(expand-context-reference-records"
" the-struct_364)"
"(expand-context-only-immediate?"
" the-struct_364)"
"(expand-context-just-once?"
" the-struct_364)"
"(expand-context-module-begin-k"
" the-struct_364)"
"(expand-context-need-eventually-defined"
" the-struct_364)"
"(expand-context-allow-unbound?"
" the-struct_364)"
"(expand-context-in-local-expand?"
" the-struct_364)"
"(expand-context-stops"
" the-struct_364)"
"(expand-context-current-introduction-scopes"
" the-struct_364)"
"(expand-context-declared-submodule-names"
" the-struct_364)"
"(expand-context-lifts"
" the-struct_364)"
"(expand-context-lift-envs"
" the-struct_364)"
"(expand-context-module-lifts"
" the-struct_364)"
"(expand-context-require-lifts"
" the-struct_364)"
"(expand-context-to-module-lifts"
" the-struct_364)"
"(expand-context-requires+provides"
" the-struct_364)"
"(expand-context-name"
" the-struct_364)"
"(expand-context-observer"
" the-struct_364)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                       \"expand-context?\""
" the-struct_364)))))"
"(let-values(((declare-enclosing-module_275)"
"(delay"
"(lambda()"
"(let-values(((...er/expand/module.rkt:358:14_367)"
" declare-module-for-expansion131.1))"
"(declare-module-for-expansion129.1"
" enclosing-self328_374"
" temp323_369"
" m-ns326_372"
" s324_370"
" requires+provides325_371"
" root-ctx329_375"
" self327_373"
" fully-expanded-bodys-except-post-submodules322_368))))))"
"(let-values(((fully-expanded-bodys_276)"
"(if(stop-at-module*?"
" ctx_250)"
"(let-values()"
" fully-expanded-bodys-except-post-submodules_272)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:372:9_376)"
" expand-post-submodules155.1))"
"(expand-post-submodules153.1"
" all-scopes-s337_384"
" ctx340_387"
" declare-enclosing-module331_378"
" declared-submodule-names339_386"
" is-cross-phase-persistent?336_383"
" mpis-to-reset338_385"
" s332_379"
" phase333_380"
" requires+provides335_382"
" self334_381"
" fully-expanded-bodys-except-post-submodules330_377))))))"
"(if(expand-context-to-parsed?"
" ctx_250)"
"(let-values()"
"(parsed-#%module-begin24.1"
"(keep-properties-only"
" mb-s_249)"
"(parsed-only"
" fully-expanded-bodys_276)))"
"(let-values()"
"(let-values(((mb-result-s_388)"
"(let-values(((temp342_390)"
"(list*"
" #%module-begin259_254"
"(syntax-only"
" fully-expanded-bodys_276))))"
"(rebuild62.1"
" #f"
" #f"
" mb-s341_389"
" temp342_390))))"
"(if(not"
"(expand-context-in-local-expand?"
" ctx_250))"
"(let-values()"
"(expanded+parsed1.1"
" mb-result-s_388"
"(parsed-#%module-begin24.1"
"(keep-properties-only"
" mb-s_249)"
"(parsed-only"
" fully-expanded-bodys_276))))"
"(let-values()"
" mb-result-s_388)))))))))))))))))))))))))))))"
"(let-values(((mb-ctx_134)"
"(let-values()"
"(if(expand-context?"
" the-struct_391)"
"(let-values(((context343_392)"
" 'module-begin)"
"((in-local-expand?345_394)"
" #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_391)"
"(root-expand-context-post-expansion-scope"
" the-struct_391)"
"(root-expand-context-top-level-bind-scope"
" the-struct_391)"
"(root-expand-context-all-scopes-stx"
" the-struct_391)"
"(root-expand-context-use-site-scopes"
" the-struct_391)"
"(root-expand-context-defined-syms"
" the-struct_391)"
"(root-expand-context-frame-id"
" the-struct_391)"
"(root-expand-context-counter"
" the-struct_391)"
"(root-expand-context-lift-key"
" the-struct_391)"
"(expand-context-to-parsed?"
" the-struct_391)"
" context343_392"
"(expand-context-phase"
" the-struct_391)"
"(expand-context-namespace"
" the-struct_391)"
"(expand-context-env"
" the-struct_391)"
"(expand-context-user-env"
" the-struct_391)"
"(expand-context-post-expansion-scope-action"
" the-struct_391)"
"(expand-context-scopes"
" the-struct_391)"
"(expand-context-def-ctx-scopes"
" the-struct_391)"
"(expand-context-binding-layer"
" the-struct_391)"
"(expand-context-reference-records"
" the-struct_391)"
"(expand-context-only-immediate?"
" the-struct_391)"
"(expand-context-just-once?"
" the-struct_391)"
" module-begin-k344_393"
"(expand-context-need-eventually-defined"
" the-struct_391)"
"(expand-context-allow-unbound?"
" the-struct_391)"
" in-local-expand?345_394"
"(expand-context-stops"
" the-struct_391)"
"(expand-context-current-introduction-scopes"
" the-struct_391)"
"(expand-context-declared-submodule-names"
" the-struct_391)"
"(expand-context-lifts"
" the-struct_391)"
"(expand-context-lift-envs"
" the-struct_391)"
"(expand-context-module-lifts"
" the-struct_391)"
"(expand-context-require-lifts"
" the-struct_391)"
"(expand-context-to-module-lifts"
" the-struct_391)"
"(expand-context-requires+provides"
" the-struct_391)"
"(expand-context-name"
" the-struct_391)"
"(expand-context-observer"
" the-struct_391)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                     \"expand-context?\""
" the-struct_391)))))"
"(let-values(((mb-scopes-s_135)"
"(if keep-enclosing-scope-at-phase_87"
" disarmed-s_92"
" all-scopes-s_120)))"
"(let-values(((mb_136)"
"(let-values(((...er/expand/module.rkt:424:5_395)"
" ensure-module-begin34.1))"
"(ensure-module-begin32.1"
" mb-ctx350_400"
" m-ns349_399"
" module-name-sym347_397"
" phase351_401"
" s352_402"
" mb-scopes-s348_398"
" bodys346_396))))"
"(let-values(((expanded-mb_137)"
"(let-values()"
"(let-values()"
"(expand5.1"
" #f"
" #f"
" mb353_403"
" mb-ctx354_404)))))"
"(let-values(((requires_138"
" provides_139)"
"(extract-requires-and-provides"
" requires+provides_128"
" self_117"
" self_117)))"
"(let-values(((result-form_140)"
"(if(let-values(((or-part_405)"
"(expand-context-to-parsed?"
" ctx_126)))"
"(if or-part_405"
" or-part_405"
" always-produce-compiled?_86))"
"(parsed-module25.1"
"(keep-properties-only"
" s_83)"
" #f"
" id:module-name208_95"
" self_117"
" requires_138"
" provides_139"
"(requires+provides-all-bindings-simple?"
" requires+provides_128)"
"(root-expand-context-encode-for-module"
" root-ctx_122"
" self_117"
" self_117)"
"(parsed-#%module-begin-body"
"(if(expanded+parsed?"
" expanded-mb_137)"
"(expanded+parsed-parsed"
" expanded-mb_137)"
" expanded-mb_137)))"
" #f)))"
"(let-values(((result-s_141)"
"(if(not"
"(expand-context-to-parsed?"
" ctx_126))"
"(let-values()"
"(let-values(((generic-self_406)"
"(make-generic-self-module-path-index"
" self_117)))"
"(begin"
"(imitate-generic-module-path-index!"
" self_117)"
"(let-values(((lst_407)"
"(unbox"
" mpis-to-reset_130)))"
"(begin"
"(if(list?"
" lst_407)"
"(void)"
"(let-values()"
"(in-list"
" lst_407)))"
"((letrec-values(((for-loop_408)"
"(lambda(fold-var_409"
" lst_410)"
"(if(pair?"
" lst_410)"
"(let-values(((mpi_411)"
"(unsafe-car"
" lst_410)))"
"(let-values(((fold-var_412)"
"(let-values()"
"(let-values(((fold-var_414)"
"(let-values()"
"(begin"
"(let-values()"
"(imitate-generic-module-path-index!"
" mpi_411))"
"(void)))))"
"(values"
" fold-var_414)))))"
"(for-loop_408"
" fold-var_412"
"(unsafe-cdr"
" lst_410))))"
" fold-var_409))))"
" for-loop_408)"
"(void)"
" lst_407)))"
"(let-values(((result-s_415)"
"(let-values(((temp356_417)"
"(list"
" module207_94"
" id:module-name208_95"
" initial-require-s_121"
"(expanded+parsed-s"
" expanded-mb_137))))"
"(rebuild62.1"
" #f"
" #f"
" s355_416"
" temp356_417))))"
"(let-values(((result-s_418)"
"(let-values()"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" result-s357_419"
" self358_420"
" generic-self359_421"
" #f"
" #f))))"
"(let-values(((result-s_422)"
"(attach-root-expand-context-properties"
" result-s_418"
" root-ctx_122"
" self_117"
" generic-self_406)))"
"(let-values(((result-s_423)"
"(if(requires+provides-all-bindings-simple?"
" requires+provides_128)"
"(syntax-property$1"
" result-s_422"
" 'module-body-context-simple?"
" #t)"
" result-s_422)))"
"(begin"
"(let-values(((obs_424)"
"(expand-context-observer"
" ctx_126)))"
"(if obs_424"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_424"
" 'rename-one"
" result-s_423)))"
"(void)))"
" result-s_423))))))))"
"(void))))"
"(if(expand-context-to-parsed?"
" ctx_126)"
"(let-values()"
" result-form_140)"
"(if always-produce-compiled?_86"
"(let-values()"
"(expanded+parsed1.1"
" result-s_141"
" result-form_140))"
"(let-values()"
" result-s_141)))))))))))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(lifted/1.1 lifted/2.1 lifted/3.1 lifted/4.1 lifted/5.1)"
"(make-struct-type"
" 'ensure-module-begin"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'ensure-module-begin(case-lambda((self_475 bodys_476)(apply missing-kw self_475 bodys_476 null))))))"
"(current-inspector)"
"(case-lambda((self_477 bodys_478)(apply missing-kw self_477 bodys_478 null)))))"
"(define-values"
"(ensure-module-begin32.1)"
"(lambda(ctx22_479 m-ns21_480 module-name-sym19_481 phase23_482 s24_483 scopes-s20_484 bodys31_485)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((make-mb-ctx_493)"
"(lambda()"
"(let-values()"
"(if(expand-context? the-struct_495)"
"(let-values(((context360_496) 'module-begin)((only-immediate?361_497) #t))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_495)"
"(root-expand-context-post-expansion-scope the-struct_495)"
"(root-expand-context-top-level-bind-scope the-struct_495)"
"(root-expand-context-all-scopes-stx the-struct_495)"
"(root-expand-context-use-site-scopes the-struct_495)"
"(root-expand-context-defined-syms the-struct_495)"
"(root-expand-context-frame-id the-struct_495)"
"(root-expand-context-counter the-struct_495)"
"(root-expand-context-lift-key the-struct_495)"
"(expand-context-to-parsed? the-struct_495)"
" context360_496"
"(expand-context-phase the-struct_495)"
"(expand-context-namespace the-struct_495)"
"(expand-context-env the-struct_495)"
"(expand-context-user-env the-struct_495)"
"(expand-context-post-expansion-scope-action the-struct_495)"
"(expand-context-scopes the-struct_495)"
"(expand-context-def-ctx-scopes the-struct_495)"
"(expand-context-binding-layer the-struct_495)"
"(expand-context-reference-records the-struct_495)"
" only-immediate?361_497"
"(expand-context-just-once? the-struct_495)"
"(expand-context-module-begin-k the-struct_495)"
"(expand-context-need-eventually-defined the-struct_495)"
"(expand-context-allow-unbound? the-struct_495)"
"(expand-context-in-local-expand? the-struct_495)"
"(expand-context-stops the-struct_495)"
"(expand-context-current-introduction-scopes the-struct_495)"
"(expand-context-declared-submodule-names the-struct_495)"
"(expand-context-lifts the-struct_495)"
"(expand-context-lift-envs the-struct_495)"
"(expand-context-module-lifts the-struct_495)"
"(expand-context-require-lifts the-struct_495)"
"(expand-context-to-module-lifts the-struct_495)"
"(expand-context-requires+provides the-struct_495)"
"(expand-context-name the-struct_495)"
"(expand-context-observer the-struct_495)))"
"                                        (raise-argument-error 'struct-copy \"expand-context?\" the-struct_495))))))"
"(let-values(((mb_494)"
"(if(= 1(length bodys_486))"
"(let-values()"
"(begin"
"(let-values(((obs_498)(expand-context-observer ctx_490)))"
"(if obs_498"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_498 'rename-one(car bodys_486))))"
"(void)))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1(car bodys_486)) phase_491))"
"(let-values()(car bodys_486))"
"(let-values()"
"(let-values(((partly-expanded-body_499)"
"(let-values()"
"(let-values(((temp362_500)"
"(add-enclosing-name-property"
"(car bodys_486)"
" module-name-sym_487))"
"((temp363_501)(make-mb-ctx_493)))"
"(expand5.1 #f #f temp362_500 temp363_501)))))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym"
"(syntax-disarm$1 partly-expanded-body_499)"
" phase_491))"
"(let-values() partly-expanded-body_499)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:531:10_502)"
" add-module-begin45.1)"
"((temp364_503)(list partly-expanded-body_499))"
"((temp369_508)(make-mb-ctx_493))"
"((temp370_509) #f))"
"(add-module-begin43.1"
" temp370_509"
" #t"
" temp364_503"
" s365_504"
" scopes-s366_505"
" phase367_506"
" module-name-sym368_507"
" temp369_508)))))))))"
"(let-values()"
"(let-values(((temp376_515)(make-mb-ctx_493)))"
"(add-module-begin43.1"
" #f"
" #f"
" bodys371_510"
" s372_511"
" scopes-s373_512"
" phase374_513"
" module-name-sym375_514"
" temp376_515))))))"
"(add-enclosing-name-property mb_494 module-name-sym_487)))))))))))))"
"(define-values"
"(unpack33.1)"
"(lambda(given-kws_516 given-args_517 bodys31_518)"
"(let-values(((ctx22_519)(car given-args_517))"
"((given-kws_520)(cdr given-kws_516))"
"((given-args_521)(cdr given-args_517)))"
"(let-values(((m-ns21_522)(car given-args_521))"
"((given-kws_523)(cdr given-kws_520))"
"((given-args_524)(cdr given-args_521)))"
"(let-values(((module-name-sym19_525)(car given-args_524))"
"((given-kws_526)(cdr given-kws_523))"
"((given-args_527)(cdr given-args_524)))"
"(let-values(((phase23_528)(car given-args_527))"
"((given-kws_529)(cdr given-kws_526))"
"((given-args_530)(cdr given-args_527)))"
"(let-values(((s24_531)(car given-args_530))"
"((given-kws_532)(cdr given-kws_529))"
"((given-args_533)(cdr given-args_530)))"
"(let-values(((scopes-s20_534)(car given-args_533)))"
"(ensure-module-begin32.1"
" ctx22_519"
" m-ns21_522"
" module-name-sym19_525"
" phase23_528"
" s24_531"
" scopes-s20_534"
" bodys31_518)))))))))"
"(define-values"
"(ensure-module-begin34.1)"
"(lifted/2.1"
"(lambda(given-kws_535 given-argc_536)"
"(if(= given-argc_536 3)"
"(let-values()"
"(if(pair? l2_537)"
"(if(eq?(car l2_537) '#:ctx)"
"(let-values(((l2_538)(cdr l2_537)))"
"(if(pair? l2_538)"
"(if(eq?(car l2_538) '#:m-ns)"
"(let-values(((l2_539)(cdr l2_538)))"
"(if(pair? l2_539)"
"(if(eq?(car l2_539) '#:module-name-sym)"
"(let-values(((l2_540)(cdr l2_539)))"
"(if(pair? l2_540)"
"(if(eq?(car l2_540) '#:phase)"
"(let-values(((l2_541)(cdr l2_540)))"
"(if(pair? l2_541)"
"(if(eq?(car l2_541) '#:s)"
"(let-values(((l2_542)(cdr l2_541)))"
"(if(pair? l2_542)"
"(if(eq?(car l2_542) '#:scopes-s)(null?(cdr l2_542)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_543 given-args_544 bodys_545)(unpack33.1 given-kws_543 given-args_544 bodys_545)))"
" '(#:ctx #:m-ns #:module-name-sym #:phase #:s #:scopes-s)"
" '(#:ctx #:m-ns #:module-name-sym #:phase #:s #:scopes-s)))"
"(define-values"
"(add-module-begin43.1)"
"(lambda(log-rename-one?35_546"
" log-rename-one?36_547"
" bodys37_548"
" s38_549"
" scopes-s39_550"
" phase40_551"
" module-name-sym41_552"
" mb-ctx42_553)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((log-rename-one?_560)(if log-rename-one?36_547 log-rename-one?35_546 #t)))"
"(let-values()"
"(let-values(((disarmed-scopes-s_561)(syntax-disarm$1 scopes-s_556)))"
"(let-values(((mb-id_562)(datum->syntax$1 disarmed-scopes-s_561 '#%module-begin)))"
"(let-values((()"
"(begin"
"(if(let-values()"
"(resolve29.1 #f #f #f #f #f #f #f #f mb-id377_565 phase378_566))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                             \"no #%module-begin binding in the module's language\""
" s_555)))"
"(values))))"
"(let-values(((mb_563)"
"(datum->syntax$1 disarmed-scopes-s_561(list* mb-id_562 bodys_554) s_555)))"
"(let-values((()"
"(begin"
"(let-values(((obs_567)(expand-context-observer mb-ctx_559)))"
"(if obs_567"
"(let-values()"
"(let-values()(call-expand-observe obs_567 'tag mb_563)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if log-rename-one?_560"
"(let-values()"
"(let-values(((obs_568)(expand-context-observer mb-ctx_559)))"
"(if obs_568"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_568 'rename-one mb_563)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((partly-expanded-mb_564)"
"(let-values()"
"(let-values(((temp379_569)"
"(add-enclosing-name-property mb_563 module-name-sym_558)))"
"(expand5.1 #f #f temp379_569 mb-ctx380_570)))))"
"(begin"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1 partly-expanded-mb_564) phase_557))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                         \"expansion of #%module-begin is not a #%plain-module-begin form\""
" s_555"
" partly-expanded-mb_564)))"
" partly-expanded-mb_564))))))))))))))))))"
"(define-values"
"(unpack44.1)"
"(lambda(given-kws_571"
" given-args_572"
" bodys37_573"
" s38_574"
" scopes-s39_575"
" phase40_576"
" module-name-sym41_577"
" mb-ctx42_578)"
"(let-values(((log-rename-one?36_579)(pair? given-kws_571)))"
"(let-values(((log-rename-one?35_580)(if log-rename-one?36_579(car given-args_572)(void))))"
"(add-module-begin43.1"
" log-rename-one?35_580"
" log-rename-one?36_579"
" bodys37_573"
" s38_574"
" scopes-s39_575"
" phase40_576"
" module-name-sym41_577"
" mb-ctx42_578)))))"
"(define-values"
"(add-module-begin45.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_581 given-argc_582)"
"(if(= given-argc_582 8)"
"(let-values()"
"(let-values(((l1_584)"
"(if(null? l1_583) l1_583(if(eq?(car l1_583) '#:log-rename-one?)(cdr l1_583) l1_583))))"
"(null? l1_584)))"
" #f))"
"(case-lambda"
"((given-kws_585 given-args_586 bodys_587 s_588 scopes-s_589 phase_590 module-name-sym_591 mb-ctx_592)"
"(unpack44.1 given-kws_585 given-args_586 bodys_587 s_588 scopes-s_589 phase_590 module-name-sym_591 mb-ctx_592)))"
" null"
" '(#:log-rename-one?)"
"(let-values(((add-module-begin_593)"
"(case-lambda"
"((bodys_594 s_595 scopes-s_596 phase_597 module-name-sym_598 mb-ctx_599)"
"(unpack44.1 null null bodys_594 s_595 scopes-s_596 phase_597 module-name-sym_598 mb-ctx_599)))))"
" add-module-begin_593)))"
"(define-values"
"(add-enclosing-name-property)"
"(lambda(stx_600 module-name-sym_601)(syntax-property$1 stx_600 'enclosing-module-name module-name-sym_601)))"
"(define-values"
"(make-apply-module-scopes)"
"(lambda(inside-scope_602"
" outside-scope_603"
" init-ctx_604"
" keep-enclosing-scope-at-phase_605"
" self_606"
" enclosing-self_607"
" enclosing-mod_608)"
"(lambda(s_609)"
"(let-values()"
"(let-values(((s-without-enclosing_610)"
"(if keep-enclosing-scope-at-phase_605"
" s_609"
"(remove-use-site-scopes"
"(let-values(((lst_613)(root-expand-context-module-scopes init-ctx_604)))"
"(begin"
"(if(list? lst_613)(void)(let-values()(in-list lst_613)))"
"((letrec-values(((for-loop_614)"
"(lambda(s_615 lst_616)"
"(if(pair? lst_616)"
"(let-values(((sc_617)(unsafe-car lst_616)))"
"(let-values(((s_618)"
"(let-values()"
"(let-values(((s_620)"
"(let-values()"
"(remove-scope s_619 sc_617))))"
"(values s_620)))))"
"(for-loop_614 s_618(unsafe-cdr lst_616))))"
" s_615))))"
" for-loop_614)"
" s_609"
" lst_613)))"
" init-ctx_604))))"
"(let-values(((s-with-edges_611)"
"(add-scope(add-scope s-without-enclosing_610 outside-scope_603) inside-scope_602)))"
"(let-values(((s-with-suitable-enclosing_612)"
"(if keep-enclosing-scope-at-phase_605"
"(let-values()"
"(let-values()"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" s-with-edges385_621"
" enclosing-self386_622"
" enclosing-mod387_623"
" #f"
" #f)))"
"(let-values() s-with-edges_611))))"
"(let-values(((temp382_625)(make-generic-self-module-path-index self_606))"
"((temp384_627)(current-code-inspector)))"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" s-with-suitable-enclosing381_624"
" temp382_625"
" self383_626"
" temp384_627"
" #t)))))))))"
"(define-values"
"(lifted/6.1 lifted/7.1 lifted/8.1 lifted/9.1 lifted/10.1)"
"(make-struct-type"
" 'partially-expand-bodys"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'partially-expand-bodys(case-lambda((self_628 bodys_629)(apply missing-kw self_628 bodys_629 null))))))"
"(current-inspector)"
"(case-lambda((self_630 bodys_631)(apply missing-kw self_630 bodys_631 null)))))"
"(define-values"
"(partially-expand-bodys77.1)"
"(lambda(all-scopes-stx55_632"
" ctx49_633"
" declared-keywords57_634"
" declared-submodule-names58_635"
" defined-syms56_636"
" frame-id52_637"
" loop60_638"
" mpis-to-reset59_639"
" namespace50_640"
" need-eventually-defined54_641"
" original46_642"
" phase48_643"
" requires-and-provides53_644"
" self51_645"
" tail?47_646"
" bodys76_647)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(namespace-visit-available-modules! m-ns_653 phase_651)"
"((letrec-values(((loop_664)"
"(lambda(tail?_665 bodys_666)"
"(if(null? bodys_666)"
"(let-values()"
"(if tail?_665"
"(let-values()"
"(let-values(((bodys_667)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_652))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_652)))))"
"(if(null? bodys_667)"
" null"
"(loop_664"
" #t"
"(add-post-expansion-scope"
" bodys_667"
" partial-body-ctx_652)))))"
"(let-values() null)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_671)"
"(expand-context-observer"
" partial-body-ctx_652)))"
"(if obs_671"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_671"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_668)"
"(let-values()"
"(let-values(((temp388_672)"
"(car bodys_666)))"
"(expand5.1"
" #f"
" #f"
" temp388_672"
" partial-body-ctx389_673)))))"
"(let-values(((disarmed-exp-body_669)"
"(syntax-disarm$1 exp-body_668)))"
"(let-values(((lifted-defns_670)"
"(get-and-clear-lifts!"
"(expand-context-lifts"
" partial-body-ctx_652))))"
"(begin"
"(if(null? lifted-defns_670)"
"(let-values()"
"(begin"
"(let-values(((obs_674)"
"(expand-context-observer"
" partial-body-ctx_652)))"
"(if obs_674"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_674"
" 'rename-list"
" lifted-defns_670)))"
"(void)))"
"(let-values(((obs_675)"
"(expand-context-observer"
" partial-body-ctx_652)))"
"(if obs_675"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_675"
" 'module-lift-loop"
"(append"
" lifted-defns_670"
"(cons"
" exp-body_668"
"(cdr bodys_666))))))"
"(void)))))"
"(let-values()"
"(let-values(((obs_676)"
"(expand-context-observer"
" partial-body-ctx_652)))"
"(if obs_676"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_676"
" 'module-lift-end-loop"
"(cons"
" exp-body_668"
"(cdr bodys_666)))))"
"(void)))))"
"(let-values(((obs_677)"
"(expand-context-observer"
" partial-body-ctx_652)))"
"(if obs_677"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_677"
" 'rename-one"
" exp-body_668)))"
"(void)))"
"(let-values(((finish_678)"
"(lambda()"
"(let-values(((tmp_679)"
"(core-form-sym"
" disarmed-exp-body_669"
" phase_651)))"
"(if(equal? tmp_679 'begin)"
"(let-values()"
"(let-values(((ok?_680"
" begin390_681"
" e391_682)"
"(let-values()"
"(let-values()"
"(let-values(((begin390_697"
" e391_698)"
"(let-values(((s_699)"
"(if(syntax?$1"
" s_695)"
"(syntax-e$1"
" s_695)"
" s_695)))"
"(if(pair?"
" s_699)"
"(let-values(((begin392_700)"
"(let-values(((s_702)"
"(car"
" s_699)))"
" s_702))"
"((e393_701)"
"(let-values(((s_703)"
"(cdr"
" s_699)))"
"(let-values(((s_704)"
"(if(syntax?$1"
" s_703)"
"(syntax-e$1"
" s_703)"
" s_703)))"
"(let-values(((flat-s_705)"
"(to-syntax-list.1"
" s_704)))"
"(if(not"
" flat-s_705)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_696))"
"(let-values()"
" flat-s_705)))))))"
"(values"
" begin392_700"
" e393_701))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_696)))))"
"(values"
" #t"
" begin390_697"
" e391_698))))))"
"(let-values(((track_693)"
"(lambda(e_706)"
"(syntax-track-origin$1"
" e_706"
" exp-body_668))))"
"(let-values(((spliced-bodys_694)"
"(append"
"(map2"
" track_693"
" e391_682)"
"(cdr"
" bodys_666))))"
"(begin"
"(let-values(((obs_707)"
"(expand-context-observer"
" partial-body-ctx_652)))"
"(if obs_707"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_707"
" 'splice"
" spliced-bodys_694)))"
"(void)))"
"(loop_664"
" tail?_665"
" spliced-bodys_694))))))"
"(if(equal?"
" tmp_679"
" 'begin-for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_723)"
"(expand-context-observer"
" partial-body-ctx_652)))"
"(if obs_723"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_723"
" 'enter-prim"
" exp-body_668)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_724)"
"(expand-context-observer"
" partial-body-ctx_652)))"
"(if obs_724"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_724"
" 'enter-prim-begin-for-syntax)))"
"(void)))"
"(values))))"
"(let-values(((ok?_708"
" begin-for-syntax394_709"
" e395_710)"
"(let-values()"
"(let-values()"
"(let-values(((begin-for-syntax394_727"
" e395_728)"
"(let-values(((s_729)"
"(if(syntax?$1"
" s_725)"
"(syntax-e$1"
" s_725)"
" s_725)))"
"(if(pair?"
" s_729)"
"(let-values(((begin-for-syntax396_730)"
"(let-values(((s_732)"
"(car"
" s_729)))"
" s_732))"
"((e397_731)"
"(let-values(((s_733)"
"(cdr"
" s_729)))"
"(let-values(((s_734)"
"(if(syntax?$1"
" s_733)"
"(syntax-e$1"
" s_733)"
" s_733)))"
"(let-values(((flat-s_735)"
"(to-syntax-list.1"
" s_734)))"
"(if(not"
" flat-s_735)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_726))"
"(let-values()"
" flat-s_735)))))))"
"(values"
" begin-for-syntax396_730"
" e397_731))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_726)))))"
"(values"
" #t"
" begin-for-syntax394_727"
" e395_728))))))"
"(let-values(((nested-bodys_721)"
"(pass-1-and-2-loop_663"
" e395_710"
"(add1"
" phase_651))))"
"(let-values(((ct-m-ns_722)"
"(namespace->namespace-at-phase"
" m-ns_653"
"(add1"
" phase_651))))"
"(begin"
"(namespace-run-available-modules!"
" m-ns_653"
"(add1"
" phase_651))"
"(eval-nested-bodys"
" nested-bodys_721"
"(add1"
" phase_651)"
" ct-m-ns_722"
" self_654"
" partial-body-ctx_652)"
"(namespace-visit-available-modules!"
" m-ns_653"
" phase_651)"
"(let-values(((obs_736)"
"(expand-context-observer"
" partial-body-ctx_652)))"
"(if obs_736"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_736"
" 'exit-prim)))"
"(void)))"
"(cons"
"(semi-parsed-begin-for-syntax3.1"
" exp-body_668"
" nested-bodys_721)"
"(loop_664"
" tail?_665"
"(cdr"
" bodys_666))))))))))"
"(if(equal?"
" tmp_679"
" 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_755)"
"(expand-context-observer"
" partial-body-ctx_652)))"
"(if obs_755"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_755"
" 'enter-prim"
" exp-body_668)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_756)"
"(expand-context-observer"
" partial-body-ctx_652)))"
"(if obs_756"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_756"
" 'enter-prim-define-values)))"
"(void)))"
"(values))))"
"(let-values(((ok?_737"
" define-values398_738"
" id399_739"
" rhs400_740)"
"(let-values()"
"(let-values()"
"(let-values(((define-values398_759"
" id399_760"
" rhs400_761)"
"(let-values(((s_762)"
"(if(syntax?$1"
" s_757)"
"(syntax-e$1"
" s_757)"
" s_757)))"
"(if(pair?"
" s_762)"
"(let-values(((define-values401_763)"
"(let-values(((s_766)"
"(car"
" s_762)))"
" s_766))"
"((id402_764"
" rhs403_765)"
"(let-values(((s_767)"
"(cdr"
" s_762)))"
"(let-values(((s_768)"
"(if(syntax?$1"
" s_767)"
"(syntax-e$1"
" s_767)"
" s_767)))"
"(if(pair?"
" s_768)"
"(let-values(((id404_769)"
"(let-values(((s_771)"
"(car"
" s_768)))"
"(let-values(((s_772)"
"(if(syntax?$1"
" s_771)"
"(syntax-e$1"
" s_771)"
" s_771)))"
"(let-values(((flat-s_773)"
"(to-syntax-list.1"
" s_772)))"
"(if(not"
" flat-s_773)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                         \"bad syntax\""
" orig-s_758))"
"(let-values()"
"(let-values(((id_774)"
"(let-values()"
"(begin"
"(if(list?"
" lst_775)"
"(void)"
"(let-values()"
"(in-list"
" lst_775)))"
"((letrec-values(((for-loop_776)"
"(lambda(id_777"
" lst_778)"
"(if(pair?"
" lst_778)"
"(let-values(((s_779)"
"(unsafe-car"
" lst_778)))"
"(let-values(((id_780)"
"(let-values()"
"(let-values(((id_782)"
"(let-values()"
"(let-values(((id414_783)"
"(let-values()"
"(if(let-values(((or-part_784)"
"(if(syntax?$1"
" s_779)"
"(symbol?"
"(syntax-e$1"
" s_779))"
" #f)))"
"(if or-part_784"
" or-part_784"
"(symbol?"
" s_779)))"
" s_779"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_758"
" s_779)))))"
"(cons"
" id414_783"
" id_781)))))"
"(values"
" id_782)))))"
"(for-loop_776"
" id_780"
"(unsafe-cdr"
" lst_778))))"
" id_777))))"
" for-loop_776)"
" null"
" lst_775)))))"
"(alt-reverse"
" id_774))))))))"
"((rhs405_770)"
"(let-values(((s_785)"
"(cdr"
" s_768)))"
"(let-values(((s_786)"
"(if(syntax?$1"
" s_785)"
"(syntax-e$1"
" s_785)"
" s_785)))"
"(if(pair?"
" s_786)"
"(let-values(((rhs406_787)"
"(let-values(((s_788)"
"(car"
" s_786)))"
" s_788))"
"(()"
"(let-values(((s_789)"
"(cdr"
" s_786)))"
"(let-values(((s_790)"
"(if(syntax?$1"
" s_789)"
"(syntax-e$1"
" s_789)"
" s_789)))"
"(if(null?"
" s_790)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_758))))))"
"(values"
" rhs406_787))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                     \"bad syntax\""
" orig-s_758))))))"
"(values"
" id404_769"
" rhs405_770))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_758))))))"
"(values"
" define-values401_763"
" id402_764"
" rhs403_765))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_758)))))"
"(values"
" #t"
" define-values398_759"
" id399_760"
" rhs400_761))))))"
"(let-values(((ids_753)"
"(remove-use-site-scopes"
" id399_739"
" partial-body-ctx_652)))"
"(let-values((()"
"(begin"
"(let-values()"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids407_791"
" phase408_792"
" exp-body409_793"
" #f"
" #f))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...er/expand/module.rkt:691:10_794)"
" check-ids-unbound163.1))"
"(check-ids-unbound161.1"
" exp-body413_798"
" ids410_795"
" phase411_796"
" requires+provides412_797))"
"(values))))"
"(let-values(((syms_754)"
"(let-values()"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" frame-id420_805"
" exp-body422_807"
" #t"
" requires+provides421_806"
" #t"
" #f"
" #f"
" ids415_800"
" defined-syms416_801"
" self417_802"
" phase418_803"
" all-scopes-stx419_804))))"
"(begin"
"(add-defined-syms!"
" requires+provides_656"
" syms_754"
" phase_651)"
"(let-values(((obs_808)"
"(expand-context-observer"
" partial-body-ctx_652)))"
"(if obs_808"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_808"
" 'exit-prim)))"
"(void)))"
"(cons"
"(semi-parsed-define-values2.1"
" exp-body_668"
" syms_754"
" ids_753"
" rhs400_740)"
"(loop_664"
" tail?_665"
"(cdr"
" bodys_666))))))))))))"
"(if(equal?"
" tmp_679"
" 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_831)"
"(expand-context-observer"
" partial-body-ctx_652)))"
"(if obs_831"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_831"
" 'enter-prim"
" exp-body_668)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_832)"
"(expand-context-observer"
" partial-body-ctx_652)))"
"(if obs_832"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_832"
" 'enter-prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values(((ok?_809"
" define-syntaxes423_810"
" id424_811"
" rhs425_812)"
"(let-values()"
"(let-values()"
"(let-values(((define-syntaxes423_835"
" id424_836"
" rhs425_837)"
"(let-values(((s_838)"
"(if(syntax?$1"
" s_833)"
"(syntax-e$1"
" s_833)"
" s_833)))"
"(if(pair?"
" s_838)"
"(let-values(((define-syntaxes426_839)"
"(let-values(((s_842)"
"(car"
" s_838)))"
" s_842))"
"((id427_840"
" rhs428_841)"
"(let-values(((s_843)"
"(cdr"
" s_838)))"
"(let-values(((s_844)"
"(if(syntax?$1"
" s_843)"
"(syntax-e$1"
" s_843)"
" s_843)))"
"(if(pair?"
" s_844)"
"(let-values(((id429_845)"
"(let-values(((s_847)"
"(car"
" s_844)))"
"(let-values(((s_848)"
"(if(syntax?$1"
" s_847)"
"(syntax-e$1"
" s_847)"
" s_847)))"
"(let-values(((flat-s_849)"
"(to-syntax-list.1"
" s_848)))"
"(if(not"
" flat-s_849)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_834))"
"(let-values()"
"(let-values(((id_850)"
"(let-values()"
"(begin"
"(if(list?"
" lst_851)"
"(void)"
"(let-values()"
"(in-list"
" lst_851)))"
"((letrec-values(((for-loop_852)"
"(lambda(id_853"
" lst_854)"
"(if(pair?"
" lst_854)"
"(let-values(((s_855)"
"(unsafe-car"
" lst_854)))"
"(let-values(((id_856)"
"(let-values()"
"(let-values(((id_858)"
"(let-values()"
"(let-values(((id439_859)"
"(let-values()"
"(if(let-values(((or-part_860)"
"(if(syntax?$1"
" s_855)"
"(symbol?"
"(syntax-e$1"
" s_855))"
" #f)))"
"(if or-part_860"
" or-part_860"
"(symbol?"
" s_855)))"
" s_855"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_834"
" s_855)))))"
"(cons"
" id439_859"
" id_857)))))"
"(values"
" id_858)))))"
"(for-loop_852"
" id_856"
"(unsafe-cdr"
" lst_854))))"
" id_853))))"
" for-loop_852)"
" null"
" lst_851)))))"
"(alt-reverse"
" id_850))))))))"
"((rhs430_846)"
"(let-values(((s_861)"
"(cdr"
" s_844)))"
"(let-values(((s_862)"
"(if(syntax?$1"
" s_861)"
"(syntax-e$1"
" s_861)"
" s_861)))"
"(if(pair?"
" s_862)"
"(let-values(((rhs431_863)"
"(let-values(((s_864)"
"(car"
" s_862)))"
" s_864))"
"(()"
"(let-values(((s_865)"
"(cdr"
" s_862)))"
"(let-values(((s_866)"
"(if(syntax?$1"
" s_865)"
"(syntax-e$1"
" s_865)"
" s_865)))"
"(if(null?"
" s_866)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_834))))))"
"(values"
" rhs431_863))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                       \"bad syntax\""
" orig-s_834))))))"
"(values"
" id429_845"
" rhs430_846))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_834))))))"
"(values"
" define-syntaxes426_839"
" id427_840"
" rhs428_841))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                               \"bad syntax\""
" orig-s_834)))))"
"(values"
" #t"
" define-syntaxes423_835"
" id424_836"
" rhs425_837))))))"
"(let-values(((ids_825)"
"(remove-use-site-scopes"
" id424_811"
" partial-body-ctx_652)))"
"(let-values((()"
"(begin"
"(let-values()"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids432_867"
" phase433_868"
" exp-body434_869"
" #f"
" #f))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...er/expand/module.rkt:708:10_870)"
" check-ids-unbound163.1))"
"(check-ids-unbound161.1"
" exp-body438_874"
" ids435_871"
" phase436_872"
" requires+provides437_873))"
"(values))))"
"(let-values(((syms_826)"
"(let-values(((temp448_884)"
" #t))"
"(select-defined-syms-and-bind!16.1"
" temp448_884"
" #t"
" frame-id445_881"
" exp-body447_883"
" #t"
" requires+provides446_882"
" #t"
" #f"
" #f"
" ids440_876"
" defined-syms441_877"
" self442_878"
" phase443_879"
" all-scopes-stx444_880))))"
"(let-values((()"
"(begin"
"(add-defined-syms!"
" requires+provides_656"
" syms_826"
" phase_651)"
"(values))))"
"(let-values(((exp-rhs_827"
" parsed-rhs_828"
" vals_829)"
"(expand+eval-for-syntaxes-binding"
" rhs425_812"
" ids_825"
"(let-values()"
"(if(expand-context?"
" the-struct_885)"
"(let-values()"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_885)"
"(root-expand-context-post-expansion-scope"
" the-struct_885)"
"(root-expand-context-top-level-bind-scope"
" the-struct_885)"
"(root-expand-context-all-scopes-stx"
" the-struct_885)"
"(root-expand-context-use-site-scopes"
" the-struct_885)"
"(root-expand-context-defined-syms"
" the-struct_885)"
"(root-expand-context-frame-id"
" the-struct_885)"
"(root-expand-context-counter"
" the-struct_885)"
"(root-expand-context-lift-key"
" the-struct_885)"
"(expand-context-to-parsed?"
" the-struct_885)"
"(expand-context-context"
" the-struct_885)"
"(expand-context-phase"
" the-struct_885)"
"(expand-context-namespace"
" the-struct_885)"
"(expand-context-env"
" the-struct_885)"
"(expand-context-user-env"
" the-struct_885)"
"(expand-context-post-expansion-scope-action"
" the-struct_885)"
"(expand-context-scopes"
" the-struct_885)"
"(expand-context-def-ctx-scopes"
" the-struct_885)"
"(expand-context-binding-layer"
" the-struct_885)"
"(expand-context-reference-records"
" the-struct_885)"
"(expand-context-only-immediate?"
" the-struct_885)"
"(expand-context-just-once?"
" the-struct_885)"
"(expand-context-module-begin-k"
" the-struct_885)"
" need-eventually-defined449_886"
"(expand-context-allow-unbound?"
" the-struct_885)"
"(expand-context-in-local-expand?"
" the-struct_885)"
"(expand-context-stops"
" the-struct_885)"
"(expand-context-current-introduction-scopes"
" the-struct_885)"
"(expand-context-declared-submodule-names"
" the-struct_885)"
"(expand-context-lifts"
" the-struct_885)"
"(expand-context-lift-envs"
" the-struct_885)"
"(expand-context-module-lifts"
" the-struct_885)"
"(expand-context-require-lifts"
" the-struct_885)"
"(expand-context-to-module-lifts"
" the-struct_885)"
"(expand-context-requires+provides"
" the-struct_885)"
"(expand-context-name"
" the-struct_885)"
"(expand-context-observer"
" the-struct_885)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                          \"expand-context?\""
" the-struct_885))))))"
"(let-values((()"
"(begin"
"(let-values()"
"(begin"
"(if(list?"
" lst_887)"
"(void)"
"(let-values()"
"(in-list"
" lst_887)))"
"(if(list?"
" lst_888)"
"(void)"
"(let-values()"
"(in-list"
" lst_888)))"
"(if(list?"
" lst_889)"
"(void)"
"(let-values()"
"(in-list"
" lst_889)))"
"((letrec-values(((for-loop_890)"
"(lambda(fold-var_891"
" lst_892"
" lst_893"
" lst_894)"
"(if(if(pair?"
" lst_892)"
"(if(pair?"
" lst_893)"
"(pair?"
" lst_894)"
" #f)"
" #f)"
"(let-values(((sym_895)"
"(unsafe-car"
" lst_892))"
"((val_896)"
"(unsafe-car"
" lst_893))"
"((id_897)"
"(unsafe-car"
" lst_894)))"
"(let-values(((fold-var_898)"
"(let-values()"
"(let-values(((fold-var_900)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_896"
" id_897"
" phase_651)"
"(namespace-set-transformer!"
" m-ns_653"
" phase_651"
" sym_895"
" val_896)))"
"(void)))))"
"(values"
" fold-var_900)))))"
"(for-loop_890"
" fold-var_898"
"(unsafe-cdr"
" lst_892)"
"(unsafe-cdr"
" lst_893)"
"(unsafe-cdr"
" lst_894))))"
" fold-var_891))))"
" for-loop_890)"
"(void)"
" lst_887"
" lst_888"
" lst_889)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_901)"
"(expand-context-observer"
" partial-body-ctx_652)))"
"(if obs_901"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_901"
" 'exit-prim)))"
"(void)))"
"(values))))"
"(let-values(((parsed-body_830)"
"(parsed-define-syntaxes20.1"
"(keep-properties-only"
" exp-body_668)"
" ids_825"
" syms_826"
" parsed-rhs_828)))"
"(cons"
"(if(expand-context-to-parsed?"
" partial-body-ctx_652)"
" parsed-body_830"
"(expanded+parsed1.1"
"(let-values(((temp451_903)"
"(list"
" define-syntaxes423_810"
" ids_825"
" exp-rhs_827)))"
"(rebuild62.1"
" #f"
" #f"
" exp-body450_902"
" temp451_903))"
" parsed-body_830))"
"(loop_664"
" tail?_665"
"(cdr"
" bodys_666))))))))))))))))"
"(if(equal?"
" tmp_679"
" '#%require)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_918)"
"(expand-context-observer"
" partial-body-ctx_652)))"
"(if obs_918"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_918"
" 'enter-prim"
" exp-body_668)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_919)"
"(expand-context-observer"
" partial-body-ctx_652)))"
"(if obs_919"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_919"
" 'enter-prim-require)))"
"(void)))"
"(values))))"
"(let-values(((ready-body_904)"
"(remove-use-site-scopes"
" disarmed-exp-body_669"
" partial-body-ctx_652)))"
"(let-values(((ok?_905"
" #%require452_906"
" req453_907)"
"(let-values()"
"(let-values()"
"(let-values(((#%require452_922"
" req453_923)"
"(let-values(((s_924)"
"(if(syntax?$1"
" s_920)"
"(syntax-e$1"
" s_920)"
" s_920)))"
"(if(pair?"
" s_924)"
"(let-values(((#%require454_925)"
"(let-values(((s_927)"
"(car"
" s_924)))"
" s_927))"
"((req455_926)"
"(let-values(((s_928)"
"(cdr"
" s_924)))"
"(let-values(((s_929)"
"(if(syntax?$1"
" s_928)"
"(syntax-e$1"
" s_928)"
" s_928)))"
"(let-values(((flat-s_930)"
"(to-syntax-list.1"
" s_929)))"
"(if(not"
" flat-s_930)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                           \"bad syntax\""
" orig-s_921))"
"(let-values()"
" flat-s_930)))))))"
"(values"
" #%require454_925"
" req455_926))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                   \"bad syntax\""
" orig-s_921)))))"
"(values"
" #t"
" #%require452_922"
" req453_923))))))"
"(begin"
"(let-values(((temp464_940)"
" 'module))"
"(parse-and-perform-requires!28.1"
" #f"
" #f"
" #f"
" #f"
" declared-submodule-names463_939"
" #t"
" phase461_937"
" #t"
" #f"
" #f"
" self458_934"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp464_940"
" temp456_932"
" exp-body457_933"
" m-ns459_935"
" phase460_936"
" requires+provides462_938))"
"(let-values(((obs_941)"
"(expand-context-observer"
" partial-body-ctx_652)))"
"(if obs_941"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_941"
" 'exit-prim)))"
"(void)))"
"(cons"
" exp-body_668"
"(loop_664"
" tail?_665"
"(cdr"
" bodys_666)))))))))"
"(if(equal?"
" tmp_679"
" '#%provide)"
"(let-values()"
"(cons"
" exp-body_668"
"(loop_664"
" tail?_665"
"(cdr"
" bodys_666))))"
"(if(equal?"
" tmp_679"
" 'module)"
"(let-values()"
"(let-values(((ready-body_942)"
"(remove-use-site-scopes"
" exp-body_668"
" partial-body-ctx_652)))"
"(let-values(((submod_943)"
"(let-values(((...er/expand/module.rkt:758:12_944)"
" expand-submodule183.1)"
"((temp468_948)"
" #f))"
"(expand-submodule181.1"
" declared-submodule-names469_949"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp468_948"
" #f"
" #f"
" mpis-to-reset470_950"
" ready-body465_945"
" self466_946"
" partial-body-ctx467_947))))"
"(cons"
" submod_943"
"(loop_664"
" tail?_665"
"(cdr"
" bodys_666))))))"
"(if(equal?"
" tmp_679"
" 'module*)"
"(let-values()"
"(cons"
" exp-body_668"
"(loop_664"
" tail?_665"
"(cdr"
" bodys_666))))"
"(if(equal?"
" tmp_679"
" '#%declare)"
"(let-values()"
"(let-values(((ok?_951"
" #%declare471_952"
" kw472_953)"
"(let-values()"
"(let-values()"
"(let-values(((#%declare471_967"
" kw472_968)"
"(let-values(((s_969)"
"(if(syntax?$1"
" s_965)"
"(syntax-e$1"
" s_965)"
" s_965)))"
"(if(pair?"
" s_969)"
"(let-values(((#%declare473_970)"
"(let-values(((s_972)"
"(car"
" s_969)))"
" s_972))"
"((kw474_971)"
"(let-values(((s_973)"
"(cdr"
" s_969)))"
"(let-values(((s_974)"
"(if(syntax?$1"
" s_973)"
"(syntax-e$1"
" s_973)"
" s_973)))"
"(let-values(((flat-s_975)"
"(to-syntax-list.1"
" s_974)))"
"(if(not"
" flat-s_975)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_966))"
"(let-values()"
" flat-s_975)))))))"
"(values"
" #%declare473_970"
" kw474_971))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                     \"bad syntax\""
" orig-s_966)))))"
"(values"
" #t"
" #%declare471_967"
" kw472_968))))))"
"(let-values((()"
"(begin"
"(let-values()"
"(begin"
"(if(list?"
" lst_976)"
"(void)"
"(let-values()"
"(in-list"
" lst_976)))"
"((letrec-values(((for-loop_977)"
"(lambda(fold-var_978"
" lst_979)"
"(if(pair?"
" lst_979)"
"(let-values(((kw_980)"
"(unsafe-car"
" lst_979)))"
"(let-values(((fold-var_981)"
"(let-values()"
"(let-values(((fold-var_983)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(keyword?"
"(syntax-e$1"
" kw_980))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"expected a keyword\""
" exp-body_668"
" kw_980)))"
"(if(memq"
"(syntax-e$1"
" kw_980)"
" '(#:cross-phase-persistent"
" #:empty-namespace))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"not an allowed declaration keyword\""
" exp-body_668"
" kw_980)))"
"(if(hash-ref"
" declared-keywords_660"
"(syntax-e$1"
" kw_980)"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"keyword declared multiple times\""
" exp-body_668"
" kw_980))"
"(void))"
"(hash-set!"
" declared-keywords_660"
"(syntax-e$1"
" kw_980)"
" kw_980)))"
"(void)))))"
"(values"
" fold-var_983)))))"
"(for-loop_977"
" fold-var_981"
"(unsafe-cdr"
" lst_979))))"
" fold-var_978))))"
" for-loop_977)"
"(void)"
" lst_976)))"
"(values))))"
"(let-values(((parsed-body_964)"
"(parsed-#%declare22.1"
" exp-body_668)))"
"(cons"
"(if(expand-context-to-parsed?"
" partial-body-ctx_652)"
" parsed-body_964"
"(expanded+parsed1.1"
" exp-body_668"
" parsed-body_964))"
"(loop_664"
" tail?_665"
"(cdr"
" bodys_666)))))))"
"(let-values()"
"(cons"
" exp-body_668"
"(loop_664"
" tail?_665"
"(cdr"
" bodys_666)))))))))))))))))"
"(let-values(((l_984)"
"(append"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts"
" partial-body-ctx_652))"
" lifted-defns_670"
"(loop_664"
" #f"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" partial-body-ctx_652))))))"
"(if(null? l_984)"
"(finish_678)"
"(append l_984(finish_678)))))))))))))))"
" loop_664)"
" tail?_650"
" bodys_648)))))))))))))))))))))"
"(define-values"
"(unpack78.1)"
"(lambda(given-kws_985 given-args_986 bodys76_987)"
"(let-values(((all-scopes-stx55_988)(car given-args_986))"
"((given-kws_989)(cdr given-kws_985))"
"((given-args_990)(cdr given-args_986)))"
"(let-values(((ctx49_991)(car given-args_990))"
"((given-kws_992)(cdr given-kws_989))"
"((given-args_993)(cdr given-args_990)))"
"(let-values(((declared-keywords57_994)(car given-args_993))"
"((given-kws_995)(cdr given-kws_992))"
"((given-args_996)(cdr given-args_993)))"
"(let-values(((declared-submodule-names58_997)(car given-args_996))"
"((given-kws_998)(cdr given-kws_995))"
"((given-args_999)(cdr given-args_996)))"
"(let-values(((defined-syms56_1000)(car given-args_999))"
"((given-kws_1001)(cdr given-kws_998))"
"((given-args_1002)(cdr given-args_999)))"
"(let-values(((frame-id52_1003)(car given-args_1002))"
"((given-kws_1004)(cdr given-kws_1001))"
"((given-args_1005)(cdr given-args_1002)))"
"(let-values(((loop60_1006)(car given-args_1005))"
"((given-kws_1007)(cdr given-kws_1004))"
"((given-args_1008)(cdr given-args_1005)))"
"(let-values(((mpis-to-reset59_1009)(car given-args_1008))"
"((given-kws_1010)(cdr given-kws_1007))"
"((given-args_1011)(cdr given-args_1008)))"
"(let-values(((namespace50_1012)(car given-args_1011))"
"((given-kws_1013)(cdr given-kws_1010))"
"((given-args_1014)(cdr given-args_1011)))"
"(let-values(((need-eventually-defined54_1015)(car given-args_1014))"
"((given-kws_1016)(cdr given-kws_1013))"
"((given-args_1017)(cdr given-args_1014)))"
"(let-values(((original46_1018)(car given-args_1017))"
"((given-kws_1019)(cdr given-kws_1016))"
"((given-args_1020)(cdr given-args_1017)))"
"(let-values(((phase48_1021)(car given-args_1020))"
"((given-kws_1022)(cdr given-kws_1019))"
"((given-args_1023)(cdr given-args_1020)))"
"(let-values(((requires-and-provides53_1024)(car given-args_1023))"
"((given-kws_1025)(cdr given-kws_1022))"
"((given-args_1026)(cdr given-args_1023)))"
"(let-values(((self51_1027)(car given-args_1026))"
"((given-kws_1028)(cdr given-kws_1025))"
"((given-args_1029)(cdr given-args_1026)))"
"(let-values(((tail?47_1030)(car given-args_1029)))"
"(partially-expand-bodys77.1"
" all-scopes-stx55_988"
" ctx49_991"
" declared-keywords57_994"
" declared-submodule-names58_997"
" defined-syms56_1000"
" frame-id52_1003"
" loop60_1006"
" mpis-to-reset59_1009"
" namespace50_1012"
" need-eventually-defined54_1015"
" original46_1018"
" phase48_1021"
" requires-and-provides53_1024"
" self51_1027"
" tail?47_1030"
" bodys76_987))))))))))))))))))"
"(define-values"
"(partially-expand-bodys79.1)"
"(lifted/7.1"
"(lambda(given-kws_1031 given-argc_1032)"
"(if(= given-argc_1032 3)"
"(let-values()"
"(if(pair? l2_1033)"
"(if(eq?(car l2_1033) '#:all-scopes-stx)"
"(let-values(((l2_1034)(cdr l2_1033)))"
"(if(pair? l2_1034)"
"(if(eq?(car l2_1034) '#:ctx)"
"(let-values(((l2_1035)(cdr l2_1034)))"
"(if(pair? l2_1035)"
"(if(eq?(car l2_1035) '#:declared-keywords)"
"(let-values(((l2_1036)(cdr l2_1035)))"
"(if(pair? l2_1036)"
"(if(eq?(car l2_1036) '#:declared-submodule-names)"
"(let-values(((l2_1037)(cdr l2_1036)))"
"(if(pair? l2_1037)"
"(if(eq?(car l2_1037) '#:defined-syms)"
"(let-values(((l2_1038)(cdr l2_1037)))"
"(if(pair? l2_1038)"
"(if(eq?(car l2_1038) '#:frame-id)"
"(let-values(((l2_1039)(cdr l2_1038)))"
"(if(pair? l2_1039)"
"(if(eq?(car l2_1039) '#:loop)"
"(let-values(((l2_1040)(cdr l2_1039)))"
"(if(pair? l2_1040)"
"(if(eq?(car l2_1040) '#:mpis-to-reset)"
"(let-values(((l2_1041)(cdr l2_1040)))"
"(if(pair? l2_1041)"
"(if(eq?(car l2_1041) '#:namespace)"
"(let-values(((l2_1042)(cdr l2_1041)))"
"(if(pair? l2_1042)"
"(if(eq?(car l2_1042) '#:need-eventually-defined)"
"(let-values(((l2_1043)(cdr l2_1042)))"
"(if(pair? l2_1043)"
"(if(eq?(car l2_1043) '#:original)"
"(let-values(((l2_1044)(cdr l2_1043)))"
"(if(pair? l2_1044)"
"(if(eq?(car l2_1044) '#:phase)"
"(let-values(((l2_1045)(cdr l2_1044)))"
"(if(pair? l2_1045)"
"(if(eq?"
"(car l2_1045)"
" '#:requires-and-provides)"
"(let-values(((l2_1046)"
"(cdr l2_1045)))"
"(if(pair? l2_1046)"
"(if(eq?(car l2_1046) '#:self)"
"(let-values(((l2_1047)"
"(cdr l2_1046)))"
"(if(pair? l2_1047)"
"(if(eq?"
"(car l2_1047)"
" '#:tail?)"
"(null?(cdr l2_1047))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_1048 given-args_1049 bodys_1050)(unpack78.1 given-kws_1048 given-args_1049 bodys_1050)))"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)))"
"(define-values"
"(make-wrap-as-definition)"
"(lambda(self_1051 frame-id_1052 inside-scope_1053 all-scopes-stx_1054 defined-syms_1055 requires+provides_1056)"
"(lambda(ids_1057 rhs_1058 phase_1059)"
"(let-values(((scoped-ids_1060)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_1063)(void)(let-values()(in-list lst_1063)))"
"((letrec-values(((for-loop_1064)"
"(lambda(fold-var_1065 lst_1066)"
"(if(pair? lst_1066)"
"(let-values(((id_1067)(unsafe-car lst_1066)))"
"(let-values(((fold-var_1068)"
"(let-values()"
"(let-values(((fold-var_1070)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_1067"
" inside-scope_1053))"
" fold-var_1069))))"
"(values fold-var_1070)))))"
"(for-loop_1064 fold-var_1068(unsafe-cdr lst_1066))))"
" fold-var_1065))))"
" for-loop_1064)"
" null"
" lst_1063))))))"
"(let-values(((syms_1061)"
"(let-values()"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" frame-id480_1077"
" #f"
" #f"
" requires+provides481_1078"
" #t"
" #f"
" #f"
" scoped-ids475_1072"
" defined-syms476_1073"
" self477_1074"
" phase478_1075"
" all-scopes-stx479_1076))))"
"(let-values(((s_1062)"
"(add-scope"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_1059) 'define-values)"
" scoped-ids_1060"
" rhs_1058))"
" inside-scope_1053)))"
"(values scoped-ids_1060(semi-parsed-define-values2.1 s_1062 syms_1061 scoped-ids_1060 rhs_1058))))))))"
"(define-values"
"(add-post-expansion-scope)"
"(lambda(bodys_1079 ctx_1080)"
"(let-values(((sc_1081)(root-expand-context-post-expansion-scope ctx_1080)))"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_1082)(void)(let-values()(in-list lst_1082)))"
"((letrec-values(((for-loop_1083)"
"(lambda(fold-var_1084 lst_1085)"
"(if(pair? lst_1085)"
"(let-values(((body_1086)(unsafe-car lst_1085)))"
"(let-values(((fold-var_1087)"
"(let-values()"
"(let-values(((fold-var_1089)"
"(let-values()"
"(cons"
"(let-values()(add-scope body_1086 sc_1081))"
" fold-var_1088))))"
"(values fold-var_1089)))))"
"(for-loop_1083 fold-var_1087(unsafe-cdr lst_1085))))"
" fold-var_1084))))"
" for-loop_1083)"
" null"
" lst_1082)))))))"
"(define-values"
"(lifted/11.1 lifted/12.1 lifted/13.1 lifted/14.1 lifted/15.1)"
"(make-struct-type"
" 'finish-expanding-body-expressons"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'finish-expanding-body-expressons"
"(case-lambda"
"((self_1090 partially-expanded-bodys_1091)(apply missing-kw self_1090 partially-expanded-bodys_1091 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1092 partially-expanded-bodys_1093)(apply missing-kw self_1092 partially-expanded-bodys_1093 null)))))"
"(define-values"
"(finish-expanding-body-expressons93.1)"
"(lambda(ctx82_1094"
" declared-submodule-names84_1095"
" mpis-to-reset85_1096"
" phase81_1097"
" self83_1098"
" tail?80_1099"
" partially-expanded-bodys92_1100)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"((letrec-values(((loop_1108)"
"(lambda(tail?_1109 bodys_1110)"
"(if(null? bodys_1110)"
"(let-values()"
"(if tail?_1109"
"(let-values()"
"(let-values(((bodys_1111)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts body-ctx_1104))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts body-ctx_1104)))))"
"(if(null? bodys_1111) null(loop_1108 #t bodys_1111))))"
"(let-values() bodys_1110)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1117)"
"(expand-context-observer body-ctx_1104)))"
"(if obs_1117"
"(let-values()"
"(let-values()(call-expand-observe obs_1117 'next)))"
"(void)))"
"(values))))"
"(let-values(((body_1112)(car bodys_1110)))"
"(let-values(((exp-body_1113)"
"(if(let-values(((or-part_1118)(parsed? body_1112)))"
"(if or-part_1118"
" or-part_1118"
"(let-values(((or-part_1119)"
"(expanded+parsed? body_1112)))"
"(if or-part_1119"
" or-part_1119"
"(semi-parsed-begin-for-syntax? body_1112)))))"
"(let-values() body_1112)"
"(if(semi-parsed-define-values? body_1112)"
"(let-values()"
"(let-values(((ids_1120)"
"(semi-parsed-define-values-ids"
" body_1112)))"
"(let-values(((rhs-ctx_1121)"
"(as-named-context"
"(as-expression-context"
" body-ctx_1104)"
" ids_1120)))"
"(let-values(((exp-rhs_1122)"
"(let-values()"
"(let-values(((temp482_1126)"
"(semi-parsed-define-values-rhs"
" body_1112)))"
"(expand5.1"
" #f"
" #f"
" temp482_1126"
" rhs-ctx483_1127)))))"
"(let-values(((syms_1123)"
"(semi-parsed-define-values-syms"
" body_1112)))"
"(let-values(((s_1124)"
"(semi-parsed-define-values-s"
" body_1112)))"
"(let-values(((comp-form_1125)"
"(parsed-define-values19.1"
"(keep-properties-only"
" s_1124)"
" ids_1120"
" syms_1123"
"(if(expand-context-to-parsed?"
" rhs-ctx_1121)"
" exp-rhs_1122"
"(let-values(((temp485_1129)"
"(as-to-parsed-context"
" rhs-ctx_1121)))"
"(expand5.1"
" #f"
" #f"
" exp-rhs484_1128"
" temp485_1129))))))"
"(if(expand-context-to-parsed?"
" rhs-ctx_1121)"
" comp-form_1125"
"(expanded+parsed1.1"
"(let-values(((disarmed-s_1130)"
"(syntax-disarm$1"
" s_1124)))"
"(let-values(((ok?_1131"
" define-values486_1132"
" _487_1133"
" _488_1134)"
"(let-values()"
"(let-values()"
"(let-values(((define-values486_1149"
" _487_1150"
" _488_1151)"
"(let-values(((s_1152)"
"(if(syntax?$1"
" s_1147)"
"(syntax-e$1"
" s_1147)"
" s_1147)))"
"(if(pair?"
" s_1152)"
"(let-values(((define-values489_1153)"
"(let-values(((s_1156)"
"(car"
" s_1152)))"
" s_1156))"
"((_490_1154"
" _491_1155)"
"(let-values(((s_1157)"
"(cdr"
" s_1152)))"
"(let-values(((s_1158)"
"(if(syntax?$1"
" s_1157)"
"(syntax-e$1"
" s_1157)"
" s_1157)))"
"(if(pair?"
" s_1158)"
"(let-values(((_492_1159)"
"(let-values(((s_1161)"
"(car"
" s_1158)))"
" s_1161))"
"((_493_1160)"
"(let-values(((s_1162)"
"(cdr"
" s_1158)))"
"(let-values(((s_1163)"
"(if(syntax?$1"
" s_1162)"
"(syntax-e$1"
" s_1162)"
" s_1162)))"
"(if(pair?"
" s_1163)"
"(let-values(((_494_1164)"
"(let-values(((s_1165)"
"(car"
" s_1163)))"
" s_1165))"
"(()"
"(let-values(((s_1166)"
"(cdr"
" s_1163)))"
"(let-values(((s_1167)"
"(if(syntax?$1"
" s_1166)"
"(syntax-e$1"
" s_1166)"
" s_1166)))"
"(if(null?"
" s_1167)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                      \"bad syntax\""
" orig-s_1148))))))"
"(values"
" _494_1164))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                  \"bad syntax\""
" orig-s_1148))))))"
"(values"
" _492_1159"
" _493_1160))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                              \"bad syntax\""
" orig-s_1148))))))"
"(values"
" define-values489_1153"
" _490_1154"
" _491_1155))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                          \"bad syntax\""
" orig-s_1148)))))"
"(values"
" #t"
" define-values486_1149"
" _487_1150"
" _488_1151))))))"
"(let-values(((temp496_1169)"
"(list"
" define-values486_1132"
" ids_1120"
" exp-rhs_1122)))"
"(rebuild62.1"
" #f"
" #f"
" s495_1168"
" temp496_1169))))"
" comp-form_1125)))))))))"
"(let-values()"
"(let-values(((disarmed-body_1170)"
"(syntax-disarm$1 body_1112)))"
"(let-values(((tmp_1171)"
"(core-form-sym"
" disarmed-body_1170"
" phase_1103)))"
"(if(if(equal? tmp_1171 '#%require)"
" #t"
"(if(equal? tmp_1171 '#%provide)"
" #t"
"(equal? tmp_1171 'module*)))"
"(let-values()(car bodys_1110))"
"(let-values()"
"(let-values()"
"(let-values(((exp-body_1172)"
"(let-values(((temp497_1173)"
"(car"
" bodys_1110))"
"((temp498_1174)"
"(as-expression-context"
" body-ctx_1104)))"
"(expand5.1"
" #f"
" #f"
" temp497_1173"
" temp498_1174))))"
"(if(expand-context-to-parsed?"
" body-ctx_1104)"
" exp-body_1172"
"(expanded+parsed1.1"
" exp-body_1172"
"(let-values(((temp500_1176)"
"(as-to-parsed-context"
" body-ctx_1104)))"
"(expand5.1"
" #f"
" #f"
" exp-body499_1175"
" temp500_1176)))))))))))))))"
"(let-values(((lifted-defns_1114)"
"(loop_1108"
" #f"
"(get-and-clear-lifts!"
"(expand-context-lifts body-ctx_1104)))))"
"(let-values(((lifted-requires_1115)"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts body-ctx_1104))))"
"(let-values(((lifted-modules_1116)"
"(let-values(((...er/expand/module.rkt:900:8_1177)"
" expand-non-module*-submodules194.1)"
"((temp501_1178)"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" body-ctx_1104))))"
"(expand-non-module*-submodules192.1"
" declared-submodule-names506_1183"
" mpis-to-reset505_1182"
" temp501_1178"
" phase502_1179"
" self503_1180"
" body-ctx504_1181))))"
"(begin"
"(if(null? lifted-defns_1114)"
"(let-values()"
"(let-values(((obs_1184)"
"(expand-context-observer body-ctx_1104)))"
"(if obs_1184"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1184"
" 'module-lift-loop"
" lifted-defns_1114)))"
"(void))))"
"(let-values()"
"(let-values(((obs_1185)"
"(expand-context-observer body-ctx_1104)))"
"(if obs_1185"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1185"
" 'module-lift-end-loop"
"(cons exp-body_1113(cdr bodys_1110)))))"
"(void)))))"
"(append"
" lifted-requires_1115"
" lifted-defns_1114"
" lifted-modules_1116"
"(cons"
" exp-body_1113"
"(loop_1108 tail?_1109(cdr bodys_1110))))))))))))))))"
" loop_1108)"
" tail?_1102"
" partially-expanded-bodys_1101)))))))))))"
"(define-values"
"(unpack94.1)"
"(lambda(given-kws_1186 given-args_1187 partially-expanded-bodys92_1188)"
"(let-values(((ctx82_1189)(car given-args_1187))"
"((given-kws_1190)(cdr given-kws_1186))"
"((given-args_1191)(cdr given-args_1187)))"
"(let-values(((declared-submodule-names84_1192)(car given-args_1191))"
"((given-kws_1193)(cdr given-kws_1190))"
"((given-args_1194)(cdr given-args_1191)))"
"(let-values(((mpis-to-reset85_1195)(car given-args_1194))"
"((given-kws_1196)(cdr given-kws_1193))"
"((given-args_1197)(cdr given-args_1194)))"
"(let-values(((phase81_1198)(car given-args_1197))"
"((given-kws_1199)(cdr given-kws_1196))"
"((given-args_1200)(cdr given-args_1197)))"
"(let-values(((self83_1201)(car given-args_1200))"
"((given-kws_1202)(cdr given-kws_1199))"
"((given-args_1203)(cdr given-args_1200)))"
"(let-values(((tail?80_1204)(car given-args_1203)))"
"(finish-expanding-body-expressons93.1"
" ctx82_1189"
" declared-submodule-names84_1192"
" mpis-to-reset85_1195"
" phase81_1198"
" self83_1201"
" tail?80_1204"
" partially-expanded-bodys92_1188)))))))))"
"(define-values"
"(finish-expanding-body-expressons95.1)"
"(lifted/12.1"
"(lambda(given-kws_1205 given-argc_1206)"
"(if(= given-argc_1206 3)"
"(let-values()"
"(if(pair? l2_1207)"
"(if(eq?(car l2_1207) '#:ctx)"
"(let-values(((l2_1208)(cdr l2_1207)))"
"(if(pair? l2_1208)"
"(if(eq?(car l2_1208) '#:declared-submodule-names)"
"(let-values(((l2_1209)(cdr l2_1208)))"
"(if(pair? l2_1209)"
"(if(eq?(car l2_1209) '#:mpis-to-reset)"
"(let-values(((l2_1210)(cdr l2_1209)))"
"(if(pair? l2_1210)"
"(if(eq?(car l2_1210) '#:phase)"
"(let-values(((l2_1211)(cdr l2_1210)))"
"(if(pair? l2_1211)"
"(if(eq?(car l2_1211) '#:self)"
"(let-values(((l2_1212)(cdr l2_1211)))"
"(if(pair? l2_1212)"
"(if(eq?(car l2_1212) '#:tail?)(null?(cdr l2_1212)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1213 given-args_1214 partially-expanded-bodys_1215)"
"(unpack94.1 given-kws_1213 given-args_1214 partially-expanded-bodys_1215)))"
" '(#:ctx #:declared-submodule-names #:mpis-to-reset #:phase #:self #:tail?)"
" '(#:ctx #:declared-submodule-names #:mpis-to-reset #:phase #:self #:tail?)))"
"(define-values"
"(check-defined-by-now)"
"(lambda(need-eventually-defined_1216 self_1217)"
"(let-values()"
"(begin"
"(if((lambda(ht_1219)(hash? ht_1219)) ht_1218)(void)(let-values()(default-in-hash ht_1218)))"
"((letrec-values(((for-loop_1220)"
"(lambda(fold-var_1221 i_1222)"
"(if i_1222"
"(let-values(((phase_1223 l_1224)(hash-iterate-key+value ht_1218 i_1222)))"
"(let-values(((fold-var_1225)"
"(let-values()"
"(let-values(((fold-var_1227)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values()"
"(begin"
"(if(list? lst_1228)"
"(void)"
"(let-values()(in-list lst_1228)))"
"((letrec-values(((for-loop_1229)"
"(lambda(fold-var_1230"
" lst_1231)"
"(if(pair? lst_1231)"
"(let-values(((id_1232)"
"(unsafe-car"
" lst_1231)))"
"(let-values(((fold-var_1233)"
"(let-values()"
"(let-values(((fold-var_1235)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((b_1236)"
"(let-values()"
"(resolve+shift30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id507_1237"
" phase508_1238))))"
"(if(if b_1236"
"(if(module-binding?"
" b_1236)"
"(if(eq?"
"(module-binding-sym"
" b_1236)"
"(syntax-e$1"
" id_1232))"
"(eq?"
"(module-binding-module"
" b_1236)"
" self_1217)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"reference to an unbound identifier\""
" id_1232)))))"
"(void)))))"
"(values"
" fold-var_1235)))))"
"(for-loop_1229"
" fold-var_1233"
"(unsafe-cdr"
" lst_1231))))"
" fold-var_1230))))"
" for-loop_1229)"
"(void)"
" lst_1228))))"
"(void)))))"
"(values fold-var_1227)))))"
"(for-loop_1220 fold-var_1225(hash-iterate-next ht_1218 i_1222))))"
" fold-var_1221))))"
" for-loop_1220)"
"(void)"
"(hash-iterate-first ht_1218))))))"
"(define-values"
"(lifted/16.1 lifted/17.1 lifted/18.1 lifted/19.1 lifted/20.1)"
"(make-struct-type"
" 'resolve-provides"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'resolve-provides"
"(case-lambda"
"((self_1239 expression-expanded-bodys_1240)(apply missing-kw self_1239 expression-expanded-bodys_1240 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1241 expression-expanded-bodys_1242)(apply missing-kw self_1241 expression-expanded-bodys_1242 null)))))"
"(define-values"
"(resolve-provides111.1)"
"(lambda(ctx102_1243"
" declared-submodule-names98_1244"
" namespace99_1245"
" original96_1246"
" phase100_1247"
" requires-and-provides97_1248"
" self101_1249"
" expression-expanded-bodys110_1250)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"((letrec-values(((loop_1259)"
"(lambda(bodys_1260 phase_1261)"
"(if(null? bodys_1260)"
"(let-values() null)"
"(if(let-values(((or-part_1262)(parsed?(car bodys_1260))))"
"(if or-part_1262 or-part_1262(expanded+parsed?(car bodys_1260))))"
"(let-values()"
"(cons(car bodys_1260)(loop_1259(cdr bodys_1260) phase_1261)))"
"(if(semi-parsed-begin-for-syntax?(car bodys_1260))"
"(let-values()"
"(let-values(((nested-bodys_1263)"
"(loop_1259"
"(semi-parsed-begin-for-syntax-body(car bodys_1260))"
"(add1 phase_1261))))"
"(cons"
"(let-values(((the-struct_1264)(car bodys_1260)))"
"(if(semi-parsed-begin-for-syntax? the-struct_1264)"
"(let-values()"
"(semi-parsed-begin-for-syntax3.1"
"(semi-parsed-begin-for-syntax-s the-struct_1264)"
" body509_1265))"
"(raise-argument-error"
" 'struct-copy"
"                                                            \"semi-parsed-begin-for-syntax?\""
" the-struct_1264)))"
"(loop_1259(cdr bodys_1260) phase_1261))))"
"(let-values()"
"(let-values(((disarmed-body_1266)"
"(syntax-disarm$1(car bodys_1260))))"
"(let-values(((tmp_1267)"
"(core-form-sym disarmed-body_1266 phase_1261)))"
"(if(equal? tmp_1267 '#%provide)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1283)"
"(expand-context-observer"
" ctx_1258)))"
"(if obs_1283"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1283"
" 'enter-prim"
"(car bodys_1260))))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1284)"
"(expand-context-observer"
" ctx_1258)))"
"(if obs_1284"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1284"
" 'enter-prim-provide)))"
"(void)))"
"(values))))"
"(let-values(((ok?_1268 #%provide510_1269 spec511_1270)"
"(let-values()"
"(let-values()"
"(let-values(((#%provide510_1287"
" spec511_1288)"
"(let-values(((s_1289)"
"(if(syntax?$1"
" s_1285)"
"(syntax-e$1"
" s_1285)"
" s_1285)))"
"(if(pair? s_1289)"
"(let-values(((#%provide512_1290)"
"(let-values(((s_1292)"
"(car"
" s_1289)))"
" s_1292))"
"((spec513_1291)"
"(let-values(((s_1293)"
"(cdr"
" s_1289)))"
"(let-values(((s_1294)"
"(if(syntax?$1"
" s_1293)"
"(syntax-e$1"
" s_1293)"
" s_1293)))"
"(let-values(((flat-s_1295)"
"(to-syntax-list.1"
" s_1294)))"
"(if(not"
" flat-s_1295)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_1286))"
"(let-values()"
" flat-s_1295)))))))"
"(values"
" #%provide512_1290"
" spec513_1291))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_1286)))))"
"(values"
" #t"
" #%provide510_1287"
" spec511_1288))))))"
"(let-values(((track-stxes_1281 specs_1282)"
"(parse-and-expand-provides!"
" spec511_1270"
"(car bodys_1260)"
" requires+provides_1253"
" self_1257"
" phase_1261"
"(let-values()"
"(if(expand-context? the-struct_1296)"
"(let-values(((context514_1297)"
" 'top-level)"
"((namespace516_1299)"
"(namespace->namespace-at-phase"
" m-ns_1255"
" phase_1261)))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_1296)"
"(root-expand-context-post-expansion-scope"
" the-struct_1296)"
"(root-expand-context-top-level-bind-scope"
" the-struct_1296)"
"(root-expand-context-all-scopes-stx"
" the-struct_1296)"
"(root-expand-context-use-site-scopes"
" the-struct_1296)"
"(root-expand-context-defined-syms"
" the-struct_1296)"
"(root-expand-context-frame-id"
" the-struct_1296)"
"(root-expand-context-counter"
" the-struct_1296)"
"(root-expand-context-lift-key"
" the-struct_1296)"
"(expand-context-to-parsed?"
" the-struct_1296)"
" context514_1297"
" phase515_1298"
" namespace516_1299"
"(expand-context-env"
" the-struct_1296)"
"(expand-context-user-env"
" the-struct_1296)"
"(expand-context-post-expansion-scope-action"
" the-struct_1296)"
"(expand-context-scopes"
" the-struct_1296)"
"(expand-context-def-ctx-scopes"
" the-struct_1296)"
"(expand-context-binding-layer"
" the-struct_1296)"
"(expand-context-reference-records"
" the-struct_1296)"
"(expand-context-only-immediate?"
" the-struct_1296)"
"(expand-context-just-once?"
" the-struct_1296)"
"(expand-context-module-begin-k"
" the-struct_1296)"
"(expand-context-need-eventually-defined"
" the-struct_1296)"
"(expand-context-allow-unbound?"
" the-struct_1296)"
"(expand-context-in-local-expand?"
" the-struct_1296)"
"(expand-context-stops"
" the-struct_1296)"
"(expand-context-current-introduction-scopes"
" the-struct_1296)"
" declared-submodule-names518_1301"
"(expand-context-lifts"
" the-struct_1296)"
"(expand-context-lift-envs"
" the-struct_1296)"
"(expand-context-module-lifts"
" the-struct_1296)"
"(expand-context-require-lifts"
" the-struct_1296)"
"(expand-context-to-module-lifts"
" the-struct_1296)"
" requires+provides517_1300"
"(expand-context-name"
" the-struct_1296)"
"(expand-context-observer"
" the-struct_1296)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                      \"expand-context?\""
" the-struct_1296))))))"
"(begin"
"(let-values(((obs_1302)"
"(expand-context-observer ctx_1258)))"
"(if obs_1302"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1302"
" 'exit-prim)))"
"(void)))"
"(if(expand-context-to-parsed? ctx_1258)"
"(let-values()"
"(loop_1259(cdr bodys_1260) phase_1261))"
"(let-values()"
"(cons"
"(syntax-track-origin*"
" track-stxes_1281"
"(let-values(((temp519_1303)"
"(car bodys_1260))"
"((temp520_1304)"
"(list*"
" #%provide510_1269"
" specs_1282)))"
"(rebuild62.1"
" #f"
" #f"
" temp519_1303"
" temp520_1304)))"
"(loop_1259"
"(cdr bodys_1260)"
" phase_1261))))))))))"
"(let-values()"
"(cons"
"(car bodys_1260)"
"(loop_1259(cdr bodys_1260) phase_1261)))))))))))))"
" loop_1259)"
" expression-expanded-bodys_1251"
" phase_1256)))))))))))))"
"(define-values"
"(unpack112.1)"
"(lambda(given-kws_1305 given-args_1306 expression-expanded-bodys110_1307)"
"(let-values(((ctx102_1308)(car given-args_1306))"
"((given-kws_1309)(cdr given-kws_1305))"
"((given-args_1310)(cdr given-args_1306)))"
"(let-values(((declared-submodule-names98_1311)(car given-args_1310))"
"((given-kws_1312)(cdr given-kws_1309))"
"((given-args_1313)(cdr given-args_1310)))"
"(let-values(((namespace99_1314)(car given-args_1313))"
"((given-kws_1315)(cdr given-kws_1312))"
"((given-args_1316)(cdr given-args_1313)))"
"(let-values(((original96_1317)(car given-args_1316))"
"((given-kws_1318)(cdr given-kws_1315))"
"((given-args_1319)(cdr given-args_1316)))"
"(let-values(((phase100_1320)(car given-args_1319))"
"((given-kws_1321)(cdr given-kws_1318))"
"((given-args_1322)(cdr given-args_1319)))"
"(let-values(((requires-and-provides97_1323)(car given-args_1322))"
"((given-kws_1324)(cdr given-kws_1321))"
"((given-args_1325)(cdr given-args_1322)))"
"(let-values(((self101_1326)(car given-args_1325)))"
"(resolve-provides111.1"
" ctx102_1308"
" declared-submodule-names98_1311"
" namespace99_1314"
" original96_1317"
" phase100_1320"
" requires-and-provides97_1323"
" self101_1326"
" expression-expanded-bodys110_1307))))))))))"
"(define-values"
"(resolve-provides113.1)"
"(lifted/17.1"
"(lambda(given-kws_1327 given-argc_1328)"
"(if(= given-argc_1328 3)"
"(let-values()"
"(if(pair? l2_1329)"
"(if(eq?(car l2_1329) '#:ctx)"
"(let-values(((l2_1330)(cdr l2_1329)))"
"(if(pair? l2_1330)"
"(if(eq?(car l2_1330) '#:declared-submodule-names)"
"(let-values(((l2_1331)(cdr l2_1330)))"
"(if(pair? l2_1331)"
"(if(eq?(car l2_1331) '#:namespace)"
"(let-values(((l2_1332)(cdr l2_1331)))"
"(if(pair? l2_1332)"
"(if(eq?(car l2_1332) '#:original)"
"(let-values(((l2_1333)(cdr l2_1332)))"
"(if(pair? l2_1333)"
"(if(eq?(car l2_1333) '#:phase)"
"(let-values(((l2_1334)(cdr l2_1333)))"
"(if(pair? l2_1334)"
"(if(eq?(car l2_1334) '#:requires-and-provides)"
"(let-values(((l2_1335)(cdr l2_1334)))"
"(if(pair? l2_1335)"
"(if(eq?(car l2_1335) '#:self)(null?(cdr l2_1335)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1336 given-args_1337 expression-expanded-bodys_1338)"
"(unpack112.1 given-kws_1336 given-args_1337 expression-expanded-bodys_1338)))"
" '(#:ctx #:declared-submodule-names #:namespace #:original #:phase #:requires-and-provides #:self)"
" '(#:ctx #:declared-submodule-names #:namespace #:original #:phase #:requires-and-provides #:self)))"
"(define-values"
"(lifted/21.1 lifted/22.1 lifted/23.1 lifted/24.1 lifted/25.1)"
"(make-struct-type"
" 'declare-module-for-expansion"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'declare-module-for-expansion"
"(case-lambda"
"((self_1339 fully-expanded-bodys-except-post-submodules_1340)"
"(apply missing-kw self_1339 fully-expanded-bodys-except-post-submodules_1340 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1341 fully-expanded-bodys-except-post-submodules_1342)"
"(apply missing-kw self_1341 fully-expanded-bodys-except-post-submodules_1342 null)))))"
"(define-values"
"(declare-module-for-expansion129.1)"
"(lambda(enclosing119_1343"
" module-name-id114_1344"
" namespace117_1345"
" orig-s115_1346"
" requires-and-provides116_1347"
" root-ctx120_1348"
" self118_1349"
" fully-expanded-bodys-except-post-submodules128_1350)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((requires_1359 provides_1360)"
"(extract-requires-and-provides requires+provides_1354 self_1356 self_1356)))"
"(let-values(((parsed-mod_1361)"
"(parsed-module25.1"
"(keep-properties-only orig-s_1353)"
" #f"
" module-name-id_1352"
" self_1356"
" requires_1359"
" provides_1360"
"(requires+provides-all-bindings-simple? requires+provides_1354)"
"(root-expand-context-encode-for-module root-ctx_1358 self_1356 self_1356)"
"(parsed-only fully-expanded-bodys-except-post-submodules_1351))))"
"(let-values(((module-name_1362)"
"(1/module-path-index-resolve"
"(let-values()(if or-part_1364 or-part_1364 self_1356)))))"
"(let-values(((root-module-name_1363)(resolved-module-path-root-name module-name_1362)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" m-ns_1355"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1363))"
"(let-values()"
"(let-values(((temp521_1366)"
"(let-values(((temp524_1370)"
"(let-values(((temp528_1375)"
"(if enclosing-self_1357"
"(1/resolved-module-path-name"
" module-name_1362)"
" #f)))"
"(make-compile-context14.1"
" temp528_1375"
" #t"
" #f"
" #f"
" enclosing-self527_1374"
" #t"
" m-ns526_1373"
" #t"
" #f"
" #f"
" #f"
" #f)))"
"((temp525_1371) #f))"
"(compile-module13.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp525_1371"
" #t"
" parsed-mod523_1369"
" temp524_1370)))"
"((temp522_1367) #f))"
"(eval-module8.1 #f #f #f #f temp522_1367 #t temp521_1366)))))))))))))))))))"
"(define-values"
"(unpack130.1)"
"(lambda(given-kws_1376 given-args_1377 fully-expanded-bodys-except-post-submodules128_1378)"
"(let-values(((enclosing119_1379)(car given-args_1377))"
"((given-kws_1380)(cdr given-kws_1376))"
"((given-args_1381)(cdr given-args_1377)))"
"(let-values(((module-name-id114_1382)(car given-args_1381))"
"((given-kws_1383)(cdr given-kws_1380))"
"((given-args_1384)(cdr given-args_1381)))"
"(let-values(((namespace117_1385)(car given-args_1384))"
"((given-kws_1386)(cdr given-kws_1383))"
"((given-args_1387)(cdr given-args_1384)))"
"(let-values(((orig-s115_1388)(car given-args_1387))"
"((given-kws_1389)(cdr given-kws_1386))"
"((given-args_1390)(cdr given-args_1387)))"
"(let-values(((requires-and-provides116_1391)(car given-args_1390))"
"((given-kws_1392)(cdr given-kws_1389))"
"((given-args_1393)(cdr given-args_1390)))"
"(let-values(((root-ctx120_1394)(car given-args_1393))"
"((given-kws_1395)(cdr given-kws_1392))"
"((given-args_1396)(cdr given-args_1393)))"
"(let-values(((self118_1397)(car given-args_1396)))"
"(declare-module-for-expansion129.1"
" enclosing119_1379"
" module-name-id114_1382"
" namespace117_1385"
" orig-s115_1388"
" requires-and-provides116_1391"
" root-ctx120_1394"
" self118_1397"
" fully-expanded-bodys-except-post-submodules128_1378))))))))))"
"(define-values"
"(declare-module-for-expansion131.1)"
"(lifted/22.1"
"(lambda(given-kws_1398 given-argc_1399)"
"(if(= given-argc_1399 3)"
"(let-values()"
"(if(pair? l2_1400)"
"(if(eq?(car l2_1400) '#:enclosing)"
"(let-values(((l2_1401)(cdr l2_1400)))"
"(if(pair? l2_1401)"
"(if(eq?(car l2_1401) '#:module-name-id)"
"(let-values(((l2_1402)(cdr l2_1401)))"
"(if(pair? l2_1402)"
"(if(eq?(car l2_1402) '#:namespace)"
"(let-values(((l2_1403)(cdr l2_1402)))"
"(if(pair? l2_1403)"
"(if(eq?(car l2_1403) '#:orig-s)"
"(let-values(((l2_1404)(cdr l2_1403)))"
"(if(pair? l2_1404)"
"(if(eq?(car l2_1404) '#:requires-and-provides)"
"(let-values(((l2_1405)(cdr l2_1404)))"
"(if(pair? l2_1405)"
"(if(eq?(car l2_1405) '#:root-ctx)"
"(let-values(((l2_1406)(cdr l2_1405)))"
"(if(pair? l2_1406)"
"(if(eq?(car l2_1406) '#:self)(null?(cdr l2_1406)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1407 given-args_1408 fully-expanded-bodys-except-post-submodules_1409)"
"(unpack130.1 given-kws_1407 given-args_1408 fully-expanded-bodys-except-post-submodules_1409)))"
" '(#:enclosing #:module-name-id #:namespace #:orig-s #:requires-and-provides #:root-ctx #:self)"
" '(#:enclosing #:module-name-id #:namespace #:orig-s #:requires-and-provides #:root-ctx #:self)))"
"(define-values"
"(attach-root-expand-context-properties)"
"(lambda(s_1410 root-ctx_1411 orig-self_1412 new-self_1413)"
"(let-values(((s_1414)"
"(syntax-property$1 s_1410 'module-body-context(root-expand-context-all-scopes-stx root-ctx_1411))))"
"(let-values(((s_1415)"
"(syntax-property$1"
" s_1414"
" 'module-body-inside-context"
"(add-scope empty-syntax(root-expand-context-post-expansion-scope root-ctx_1411)))))"
" s_1415))))"
"(define-values"
"(lifted/26.1 lifted/27.1 lifted/28.1 lifted/29.1 lifted/30.1)"
"(make-struct-type"
" 'expand-post-submodules"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'expand-post-submodules"
"(case-lambda"
"((self_1416 fully-expanded-bodys-except-post-submodules_1417)"
"(apply missing-kw self_1416 fully-expanded-bodys-except-post-submodules_1417 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1418 fully-expanded-bodys-except-post-submodules_1419)"
"(apply missing-kw self_1418 fully-expanded-bodys-except-post-submodules_1419 null)))))"
"(define-values"
"(expand-post-submodules153.1)"
"(lambda(all-scopes-s138_1420"
" ctx141_1421"
" declare-enclosing132_1422"
" declared-submodule-names140_1423"
" enclosing-is-cross-phase-persistent?137_1424"
" mpis-to-reset139_1425"
" original133_1426"
" phase134_1427"
" requires-and-provides136_1428"
" self135_1429"
" fully-expanded-bodys-except-post-submodules152_1430)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"((letrec-values(((loop_1442)"
"(lambda(bodys_1443 phase_1444)"
"(if(null? bodys_1443)"
"(let-values() null)"
"(let-values()"
"(let-values(((body_1445)(car bodys_1443)))"
"(if(semi-parsed-begin-for-syntax? body_1445)"
"(let-values()"
"(let-values(((body-s_1446)"
"(semi-parsed-begin-for-syntax-s body_1445)))"
"(let-values(((nested-bodys_1447)"
"(loop_1442"
"(semi-parsed-begin-for-syntax-body body_1445)"
"(add1 phase_1444))))"
"(let-values(((parsed-bfs_1448)"
"(parsed-begin-for-syntax21.1"
"(keep-properties-only body-s_1446)"
"(parsed-only nested-bodys_1447))))"
"(cons"
"(if(expand-context-to-parsed? submod-ctx_1441)"
" parsed-bfs_1448"
"(expanded+parsed1.1"
"(let-values(((disarmed-body_1449)"
"(syntax-disarm$1 body-s_1446)))"
"(let-values(((ok?_1450"
" begin-for-syntax529_1451"
" _530_1452)"
"(let-values()"
"(let-values()"
"(let-values(((begin-for-syntax529_1465"
" _530_1466)"
"(let-values(((s_1467)"
"(if(syntax?$1"
" s_1463)"
"(syntax-e$1"
" s_1463)"
" s_1463)))"
"(if(pair?"
" s_1467)"
"(let-values(((begin-for-syntax531_1468)"
"(let-values(((s_1470)"
"(car"
" s_1467)))"
" s_1470))"
"((_532_1469)"
"(let-values(((s_1471)"
"(cdr"
" s_1467)))"
"(let-values(((s_1472)"
"(if(syntax?$1"
" s_1471)"
"(syntax-e$1"
" s_1471)"
" s_1471)))"
"(let-values(((flat-s_1473)"
"(to-syntax-list.1"
" s_1472)))"
"(if(not"
" flat-s_1473)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_1464))"
"(let-values()"
" flat-s_1473)))))))"
"(values"
" begin-for-syntax531_1468"
" _532_1469))"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_1464)))))"
"(values"
" #t"
" begin-for-syntax529_1465"
" _530_1466))))))"
"(let-values(((temp534_1475)"
"(list*"
" begin-for-syntax529_1451"
"(syntax-only"
" nested-bodys_1447))))"
"(rebuild62.1"
" #f"
" #f"
" body-s533_1474"
" temp534_1475))))"
" parsed-bfs_1448))"
"(loop_1442(cdr bodys_1443) phase_1444))))))"
"(if(let-values(((or-part_1476)(parsed? body_1445)))"
"(if or-part_1476"
" or-part_1476"
"(expanded+parsed? body_1445)))"
"(let-values()"
"(cons body_1445(loop_1442(cdr bodys_1443) phase_1444)))"
"(let-values()"
"(let-values(((disarmed-body_1477)"
"(syntax-disarm$1(car bodys_1443))))"
"(let-values(((tmp_1478)"
"(core-form-sym"
" disarmed-body_1477"
" phase_1444)))"
"(if(equal? tmp_1478 'module*)"
"(let-values()"
"(let-values((()"
"(begin"
"(force"
" declare-enclosing-module_1432)"
"(values))))"
"(let-values(((ready-body_1479)"
"(remove-use-site-scopes"
"(car bodys_1443)"
" submod-ctx_1441)))"
"(let-values(((ok?_1480"
" module*535_1481"
" name536_1482"
" _537_1483)"
"(let-values()"
"(if(let-values(((s_1498)"
"(if(syntax?$1"
" s_1497)"
"(syntax-e$1"
" s_1497)"
" s_1497)))"
"(if(pair? s_1498)"
"(if(let-values(((s_1499)"
"(car"
" s_1498)))"
" #t)"
"(let-values(((s_1500)"
"(cdr"
" s_1498)))"
"(let-values(((s_1501)"
"(if(syntax?$1"
" s_1500)"
"(syntax-e$1"
" s_1500)"
" s_1500)))"
"(if(pair? s_1501)"
"(if(let-values(((s_1502)"
"(car"
" s_1501)))"
" #t)"
"(let-values(((s_1503)"
"(cdr"
" s_1501)))"
"(let-values(((s_1504)"
"(if(syntax?$1"
" s_1503)"
"(syntax-e$1"
" s_1503)"
" s_1503)))"
"(if(pair?"
" s_1504)"
"(if(let-values(((s_1505)"
"(car"
" s_1504)))"
"(let-values(((s_1506)"
"(if(syntax?$1"
" s_1505)"
"(syntax-e$1"
" s_1505)"
" s_1505)))"
"(eq?"
" #f"
" s_1506)))"
"(let-values(((s_1507)"
"(cdr"
" s_1504)))"
" #t)"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((module*535_1509"
" name536_1510"
" _537_1511)"
"(let-values(((s_1512)"
"(if(syntax?$1"
" s_1497)"
"(syntax-e$1"
" s_1497)"
" s_1497)))"
"(let-values(((module*538_1513)"
"(let-values(((s_1516)"
"(car"
" s_1512)))"
" s_1516))"
"((name539_1514"
" _540_1515)"
"(let-values(((s_1517)"
"(cdr"
" s_1512)))"
"(let-values(((s_1518)"
"(if(syntax?$1"
" s_1517)"
"(syntax-e$1"
" s_1517)"
" s_1517)))"
"(let-values(((name541_1519)"
"(let-values(((s_1521)"
"(car"
" s_1518)))"
" s_1521))"
"((_542_1520)"
"(let-values(((s_1522)"
"(cdr"
" s_1518)))"
"(let-values(((s_1523)"
"(if(syntax?$1"
" s_1522)"
"(syntax-e$1"
" s_1522)"
" s_1522)))"
"(let-values((()"
"(let-values(((s_1525)"
"(car"
" s_1523)))"
"(let-values(((s_1526)"
"(if(syntax?$1"
" s_1525)"
"(syntax-e$1"
" s_1525)"
" s_1525)))"
"(values))))"
"((_543_1524)"
"(let-values(((s_1527)"
"(cdr"
" s_1523)))"
" s_1527)))"
"(values"
" _543_1524))))))"
"(values"
" name541_1519"
" _542_1520))))))"
"(values"
" module*538_1513"
" name539_1514"
" _540_1515)))))"
"(values"
" #t"
" module*535_1509"
" name536_1510"
" _537_1511)))"
"(values #f #f #f #f)))))"
"(let-values(((submod_1496)"
"(if ok?_1480"
"(let-values()"
"(let-values(((neg-phase_1528)"
"(phase-"
" 0"
" phase_1444)))"
"(let-values(((shifted-s_1529)"
"(syntax-shift-phase-level$1"
" ready-body_1479"
" neg-phase_1528)))"
"(let-values(((submod_1530)"
"(let-values(((...er/expand/module.rkt:1095:17_1531)"
" expand-submodule183.1)"
"((temp547_1535)"
" #t))"
"(expand-submodule181.1"
" declared-submodule-names553_1541"
" all-scopes-s549_1537"
" #t"
" enclosing-is-cross-phase-persistent?551_1539"
" #t"
" requires+provides550_1538"
" #t"
" temp547_1535"
" neg-phase548_1536"
" #t"
" mpis-to-reset552_1540"
" shifted-s544_1532"
" self545_1533"
" submod-ctx546_1534))))"
"(if(parsed?"
" submod_1530)"
"(let-values()"
" submod_1530)"
"(if(expanded+parsed?"
" submod_1530)"
"(let-values()"
"(let-values()"
"(if(expanded+parsed?"
" the-struct_1542)"
"(let-values(((s554_1543)"
"(syntax-shift-phase-level$1"
"(expanded+parsed-s"
" submod_1530)"
" phase_1444)))"
"(expanded+parsed1.1"
" s554_1543"
"(expanded+parsed-parsed"
" the-struct_1542)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                             \"expanded+parsed?\""
" the-struct_1542))))"
"(let-values()"
"(syntax-shift-phase-level$1"
" submod_1530"
" phase_1444))))))))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:1110:15_1544)"
" expand-submodule183.1)"
"((temp558_1548)"
" #t))"
"(expand-submodule181.1"
" declared-submodule-names560_1550"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp558_1548"
" #f"
" #f"
" mpis-to-reset559_1549"
" ready-body555_1545"
" self556_1546"
" submod-ctx557_1547))))))"
"(cons"
" submod_1496"
"(loop_1442"
"(cdr bodys_1443)"
" phase_1444)))))))"
"(let-values()"
"(cons"
"(car bodys_1443)"
"(loop_1442"
"(cdr bodys_1443)"
" phase_1444)))))))))))))))"
" loop_1442)"
" fully-expanded-bodys-except-post-submodules_1431"
" phase_1434)))))))))))))))"
"(define-values"
"(unpack154.1)"
"(lambda(given-kws_1551 given-args_1552 fully-expanded-bodys-except-post-submodules152_1553)"
"(let-values(((all-scopes-s138_1554)(car given-args_1552))"
"((given-kws_1555)(cdr given-kws_1551))"
"((given-args_1556)(cdr given-args_1552)))"
"(let-values(((ctx141_1557)(car given-args_1556))"
"((given-kws_1558)(cdr given-kws_1555))"
"((given-args_1559)(cdr given-args_1556)))"
"(let-values(((declare-enclosing132_1560)(car given-args_1559))"
"((given-kws_1561)(cdr given-kws_1558))"
"((given-args_1562)(cdr given-args_1559)))"
"(let-values(((declared-submodule-names140_1563)(car given-args_1562))"
"((given-kws_1564)(cdr given-kws_1561))"
"((given-args_1565)(cdr given-args_1562)))"
"(let-values(((enclosing-is-cross-phase-persistent?137_1566)(car given-args_1565))"
"((given-kws_1567)(cdr given-kws_1564))"
"((given-args_1568)(cdr given-args_1565)))"
"(let-values(((mpis-to-reset139_1569)(car given-args_1568))"
"((given-kws_1570)(cdr given-kws_1567))"
"((given-args_1571)(cdr given-args_1568)))"
"(let-values(((original133_1572)(car given-args_1571))"
"((given-kws_1573)(cdr given-kws_1570))"
"((given-args_1574)(cdr given-args_1571)))"
"(let-values(((phase134_1575)(car given-args_1574))"
"((given-kws_1576)(cdr given-kws_1573))"
"((given-args_1577)(cdr given-args_1574)))"
"(let-values(((requires-and-provides136_1578)(car given-args_1577))"
"((given-kws_1579)(cdr given-kws_1576))"
"((given-args_1580)(cdr given-args_1577)))"
"(let-values(((self135_1581)(car given-args_1580)))"
"(expand-post-submodules153.1"
" all-scopes-s138_1554"
" ctx141_1557"
" declare-enclosing132_1560"
" declared-submodule-names140_1563"
" enclosing-is-cross-phase-persistent?137_1566"
" mpis-to-reset139_1569"
" original133_1572"
" phase134_1575"
" requires-and-provides136_1578"
" self135_1581"
" fully-expanded-bodys-except-post-submodules152_1553)))))))))))))"
"(define-values"
"(expand-post-submodules155.1)"
"(lifted/27.1"
"(lambda(given-kws_1582 given-argc_1583)"
"(if(= given-argc_1583 3)"
"(let-values()"
"(if(pair? l2_1584)"
"(if(eq?(car l2_1584) '#:all-scopes-s)"
"(let-values(((l2_1585)(cdr l2_1584)))"
"(if(pair? l2_1585)"
"(if(eq?(car l2_1585) '#:ctx)"
"(let-values(((l2_1586)(cdr l2_1585)))"
"(if(pair? l2_1586)"
"(if(eq?(car l2_1586) '#:declare-enclosing)"
"(let-values(((l2_1587)(cdr l2_1586)))"
"(if(pair? l2_1587)"
"(if(eq?(car l2_1587) '#:declared-submodule-names)"
"(let-values(((l2_1588)(cdr l2_1587)))"
"(if(pair? l2_1588)"
"(if(eq?(car l2_1588) '#:enclosing-is-cross-phase-persistent?)"
"(let-values(((l2_1589)(cdr l2_1588)))"
"(if(pair? l2_1589)"
"(if(eq?(car l2_1589) '#:mpis-to-reset)"
"(let-values(((l2_1590)(cdr l2_1589)))"
"(if(pair? l2_1590)"
"(if(eq?(car l2_1590) '#:original)"
"(let-values(((l2_1591)(cdr l2_1590)))"
"(if(pair? l2_1591)"
"(if(eq?(car l2_1591) '#:phase)"
"(let-values(((l2_1592)(cdr l2_1591)))"
"(if(pair? l2_1592)"
"(if(eq?(car l2_1592) '#:requires-and-provides)"
"(let-values(((l2_1593)(cdr l2_1592)))"
"(if(pair? l2_1593)"
"(if(eq?(car l2_1593) '#:self)"
"(null?(cdr l2_1593))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1594 given-args_1595 fully-expanded-bodys-except-post-submodules_1596)"
"(unpack154.1 given-kws_1594 given-args_1595 fully-expanded-bodys-except-post-submodules_1596)))"
" '(#:all-scopes-s"
" #:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
" '(#:all-scopes-s"
" #:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)))"
"(define-values"
"(stop-at-module*?)"
"(lambda(ctx_1597)"
"(free-id-set-member?"
"(expand-context-stops ctx_1597)"
"(expand-context-phase ctx_1597)"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx 'module*)(expand-context-phase ctx_1597)))))"
"(define-values"
"(lifted/31.1 lifted/32.1 lifted/33.1 lifted/34.1 lifted/35.1)"
"(make-struct-type"
" 'check-ids-unbound"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'check-ids-unbound"
"(case-lambda"
"((self_1598 ids_1599 phase_1600 requires+provides_1601)"
"(apply missing-kw self_1598 ids_1599 phase_1600 requires+provides_1601 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1602 ids_1603 phase_1604 requires+provides_1605)"
"(apply missing-kw self_1602 ids_1603 phase_1604 requires+provides_1605 null)))))"
"(define-values"
"(check-ids-unbound161.1)"
"(lambda(in156_1606 ids158_1607 phase159_1608 requires+provides160_1609)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(list? lst_1614)(void)(let-values()(in-list lst_1614)))"
"((letrec-values(((for-loop_1615)"
"(lambda(fold-var_1616 lst_1617)"
"(if(pair? lst_1617)"
"(let-values(((id_1618)(unsafe-car lst_1617)))"
"(let-values(((fold-var_1619)"
"(let-values()"
"(let-values(((fold-var_1621)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((temp565_1627) 'module))"
"(check-not-defined87.1"
" #f"
" #f"
" #f"
" #f"
" s564_1626"
" #f"
" #f"
" #f"
" #f"
" temp565_1627"
" requires+provides561_1623"
" id562_1624"
" phase563_1625)))"
"(void)))))"
"(values fold-var_1621)))))"
"(for-loop_1615 fold-var_1619(unsafe-cdr lst_1617))))"
" fold-var_1616))))"
" for-loop_1615)"
"(void)"
" lst_1614))))))))))"
"(define-values"
"(unpack162.1)"
"(lambda(given-kws_1628 given-args_1629 ids158_1630 phase159_1631 requires+provides160_1632)"
"(let-values(((in156_1633)(car given-args_1629)))"
"(check-ids-unbound161.1 in156_1633 ids158_1630 phase159_1631 requires+provides160_1632))))"
"(define-values"
"(check-ids-unbound163.1)"
"(lifted/32.1"
"(lambda(given-kws_1634 given-argc_1635)"
"(if(= given-argc_1635 5)"
"(let-values()(if(pair? l2_1636)(if(eq?(car l2_1636) '#:in)(null?(cdr l2_1636)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_1637 given-args_1638 ids_1639 phase_1640 requires+provides_1641)"
"(unpack162.1 given-kws_1637 given-args_1638 ids_1639 phase_1640 requires+provides_1641)))"
" '(#:in)"
" '(#:in)))"
"(define-values"
"(eval-nested-bodys)"
"(lambda(bodys_1642 phase_1643 m-ns_1644 self_1645 ctx_1646)"
"(let-values()"
"(begin"
"(if(list? lst_1647)(void)(let-values()(in-list lst_1647)))"
"((letrec-values(((for-loop_1648)"
"(lambda(fold-var_1649 lst_1650)"
"(if(pair? lst_1650)"
"(let-values(((body_1651)(unsafe-car lst_1650)))"
"(let-values(((fold-var_1652)"
"(let-values()"
"(let-values(((fold-var_1654)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((p_1655)"
"(if(expanded+parsed? body_1651)"
"(expanded+parsed-parsed body_1651)"
" body_1651)))"
"(if(parsed-define-values? p_1655)"
"(let-values()"
"(let-values(((ids_1656)"
"(parsed-define-values-ids"
" p_1655)))"
"(let-values(((vals_1657)"
"(eval-for-bindings"
" ids_1656"
"(parsed-define-values-rhs"
" p_1655)"
" phase_1643"
" m-ns_1644"
" ctx_1646)))"
"(let-values(((lst_1659)"
"(parsed-define-values-syms"
" p_1655)))"
"(begin"
"(if(list? lst_1658)"
"(void)"
"(let-values()(in-list lst_1658)))"
"(if(list? lst_1659)"
"(void)"
"(let-values()(in-list lst_1659)))"
"(if(list? lst_1660)"
"(void)"
"(let-values()(in-list lst_1660)))"
"((letrec-values(((for-loop_1661)"
"(lambda(fold-var_1662"
" lst_1663"
" lst_1664"
" lst_1665)"
"(if(if(pair?"
" lst_1663)"
"(if(pair?"
" lst_1664)"
"(pair?"
" lst_1665)"
" #f)"
" #f)"
"(let-values(((id_1666)"
"(unsafe-car"
" lst_1663))"
"((sym_1667)"
"(unsafe-car"
" lst_1664))"
"((val_1668)"
"(unsafe-car"
" lst_1665)))"
"(let-values(((fold-var_1669)"
"(let-values()"
"(let-values(((fold-var_1671)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" m-ns_1644"
" phase_1643"
" sym_1667"
" val_1668))"
"(void)))))"
"(values"
" fold-var_1671)))))"
"(for-loop_1661"
" fold-var_1669"
"(unsafe-cdr"
" lst_1663)"
"(unsafe-cdr"
" lst_1664)"
"(unsafe-cdr"
" lst_1665))))"
" fold-var_1662))))"
" for-loop_1661)"
"(void)"
" lst_1658"
" lst_1659"
" lst_1660))))))"
"(if(let-values(((or-part_1672)"
"(parsed-define-syntaxes?"
" p_1655)))"
"(if or-part_1672"
" or-part_1672"
"(semi-parsed-begin-for-syntax? p_1655)))"
"(let-values()(void))"
"(if(let-values(((or-part_1673)"
"(parsed-#%declare? p_1655)))"
"(if or-part_1673"
" or-part_1673"
"(syntax?$1 p_1655)))"
"(let-values()(void))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
" ctx_1646"
" 1/current-namespace"
" m-ns_1644)"
"(let-values()"
"(eval-single-top"
"(compile-single"
" p_1655"
"(let-values()"
"(make-compile-context14.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" m-ns566_1675"
" #t"
" phase567_1676"
" #t"
" #f"
" #f)))"
" m-ns_1644)))))))))"
"(void)))))"
"(values fold-var_1654)))))"
"(for-loop_1648 fold-var_1652(unsafe-cdr lst_1650))))"
" fold-var_1649))))"
" for-loop_1648)"
"(void)"
" lst_1647)))))"
"(define-values"
"(lifted/36.1 lifted/37.1 lifted/38.1 lifted/39.1 lifted/40.1)"
"(make-struct-type"
" 'expand-submodule"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'expand-submodule"
"(case-lambda"
"((self_1677 s_1678 self_1679 ctx_1680)(apply missing-kw self_1677 s_1678 self_1679 ctx_1680 null))))))"
"(current-inspector)"
"(case-lambda((self_1681 s_1682 self_1683 ctx_1684)(apply missing-kw self_1681 s_1682 self_1683 ctx_1684 null)))))"
"(define-values"
"(expand-submodule181.1)"
"(lambda(declared-submodule-names170_1685"
" enclosing-all-scopes-stx168_1686"
" enclosing-all-scopes-stx175_1687"
" enclosing-is-cross-phase-persistent?167_1688"
" enclosing-is-cross-phase-persistent?174_1689"
" enclosing-requires+provides166_1690"
" enclosing-requires+provides173_1691"
" is-star?164_1692"
" keep-enclosing-scope-at-phase165_1693"
" keep-enclosing-scope-at-phase172_1694"
" mpis-to-reset169_1695"
" s178_1696"
" self179_1697"
" ctx180_1698)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((keep-enclosing-scope-at-phase_1703)"
"(if keep-enclosing-scope-at-phase172_1694 keep-enclosing-scope-at-phase165_1693 #f)))"
"(let-values(((enclosing-r+p_1704)"
"(if enclosing-requires+provides173_1691 enclosing-requires+provides166_1690 #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_1705)"
"(if enclosing-is-cross-phase-persistent?174_1689"
" enclosing-is-cross-phase-persistent?167_1688"
" #f)))"
"(let-values(((enclosing-all-scopes-stx_1706)"
"(if enclosing-all-scopes-stx175_1687 enclosing-all-scopes-stx168_1686 #f)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1730)(expand-context-observer ctx_1701)))"
"(if obs_1730"
"(let-values()"
"(let-values()(call-expand-observe obs_1730 'enter-prim s_1699)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1731)(expand-context-observer ctx_1701)))"
"(if obs_1731"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1731"
"(if is-star?_1702 'enter-prim-submodule* 'enter-prim-submodule))))"
"(void)))"
"(values))))"
"(let-values(((ok?_1709 module568_1710 name569_1711 _570_1712)"
"(let-values()"
"(let-values()"
"(let-values(((module568_1734 name569_1735 _570_1736)"
"(let-values(((s_1737)"
"(if(syntax?$1 s_1732)"
"(syntax-e$1 s_1732)"
" s_1732)))"
"(if(pair? s_1737)"
"(let-values(((module571_1738)"
"(let-values(((s_1741)(car s_1737)))"
" s_1741))"
"((name572_1739 _573_1740)"
"(let-values(((s_1742)(cdr s_1737)))"
"(let-values(((s_1743)"
"(if(syntax?$1 s_1742)"
"(syntax-e$1 s_1742)"
" s_1742)))"
"(if(pair? s_1743)"
"(let-values(((name574_1744)"
"(let-values(((s_1746)"
"(car"
" s_1743)))"
" s_1746))"
"((_575_1745)"
"(let-values(((s_1747)"
"(cdr"
" s_1743)))"
" s_1747)))"
"(values name574_1744 _575_1745))"
"(raise-syntax-error$1"
" #f"
"                                                                                       \"bad syntax\""
" orig-s_1733))))))"
"(values module571_1738 name572_1739 _573_1740))"
"                                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_1733)))))"
"(values #t module568_1734 name569_1735 _570_1736))))))"
"(let-values(((name_1725)(syntax-e$1 name569_1711)))"
"(let-values((()"
"(begin"
"(if(hash-ref declared-submodule-names_1708 name_1725 #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                       \"submodule already declared with the same name\""
" s_1699"
" name_1725))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
" declared-submodule-names_1708"
" name_1725"
"(syntax-e$1 module568_1710))"
"(values))))"
"(let-values(((submod_1726)"
"(let-values(((temp577_1750)"
"(let-values()"
"(if(expand-context? the-struct_1758)"
"(let-values(((context585_1759) 'module)"
"((only-immediate?586_1760) #f)"
"((post-expansion-scope587_1761) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_1758)"
" post-expansion-scope587_1761"
"(root-expand-context-top-level-bind-scope"
" the-struct_1758)"
"(root-expand-context-all-scopes-stx"
" the-struct_1758)"
"(root-expand-context-use-site-scopes"
" the-struct_1758)"
"(root-expand-context-defined-syms"
" the-struct_1758)"
"(root-expand-context-frame-id the-struct_1758)"
"(root-expand-context-counter the-struct_1758)"
"(root-expand-context-lift-key the-struct_1758)"
"(expand-context-to-parsed? the-struct_1758)"
" context585_1759"
"(expand-context-phase the-struct_1758)"
"(expand-context-namespace the-struct_1758)"
"(expand-context-env the-struct_1758)"
"(expand-context-user-env the-struct_1758)"
"(expand-context-post-expansion-scope-action"
" the-struct_1758)"
"(expand-context-scopes the-struct_1758)"
"(expand-context-def-ctx-scopes the-struct_1758)"
"(expand-context-binding-layer the-struct_1758)"
"(expand-context-reference-records"
" the-struct_1758)"
" only-immediate?586_1760"
"(expand-context-just-once? the-struct_1758)"
"(expand-context-module-begin-k the-struct_1758)"
"(expand-context-need-eventually-defined"
" the-struct_1758)"
"(expand-context-allow-unbound? the-struct_1758)"
"(expand-context-in-local-expand?"
" the-struct_1758)"
"(expand-context-stops the-struct_1758)"
"(expand-context-current-introduction-scopes"
" the-struct_1758)"
"(expand-context-declared-submodule-names"
" the-struct_1758)"
"(expand-context-lifts the-struct_1758)"
"(expand-context-lift-envs the-struct_1758)"
"(expand-context-module-lifts the-struct_1758)"
"(expand-context-require-lifts the-struct_1758)"
"(expand-context-to-module-lifts"
" the-struct_1758)"
"(expand-context-requires+provides"
" the-struct_1758)"
"(expand-context-name the-struct_1758)"
"(expand-context-observer the-struct_1758)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                       \"expand-context?\""
" the-struct_1758))))"
"((temp579_1752) #t))"
"(expand-module16.1"
" temp579_1752"
" #t"
" enclosing-all-scopes-stx581_1754"
" #t"
" enclosing-is-cross-phase-persistent?583_1756"
" #t"
" enclosing-r+p582_1755"
" #t"
" keep-enclosing-scope-at-phase580_1753"
" #t"
" mpis-to-reset584_1757"
" #t"
" s576_1749"
" temp577_1750"
" self578_1751))))"
"(let-values(((ns_1727)(expand-context-namespace ctx_1701)))"
"(let-values(((module-name_1728)(1/module-path-index-resolve self_1700)))"
"(let-values(((root-module-name_1729)"
"(resolved-module-path-root-name module-name_1728)))"
"(begin"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" ns_1727"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1729))"
"(let-values()"
"(let-values(((temp588_1763)"
"(let-values(((temp590_1766)"
"(if(expanded+parsed? submod_1726)"
"(expanded+parsed-parsed submod_1726)"
" submod_1726))"
"((temp591_1767)"
"(let-values(((temp595_1772)"
"(1/resolved-module-path-name"
" module-name_1728)))"
"(make-compile-context14.1"
" temp595_1772"
" #t"
" #f"
" #f"
" self594_1771"
" #t"
" ns593_1770"
" #t"
" #f"
" #f"
" #f"
" #f)))"
"((temp592_1768) #f))"
"(compile-module13.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp592_1768"
" #t"
" temp590_1766"
" temp591_1767)))"
"((temp589_1764) #f))"
"(eval-module8.1 #f #f #f #f temp589_1764 #t temp588_1763))))"
"(let-values(((obs_1773)(expand-context-observer ctx_1701)))"
"(if obs_1773"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_1773 'exit-prim submod_1726)))"
"(void)))"
"(if(not is-star?_1702)"
"(let-values() submod_1726)"
"(if(expanded+parsed? submod_1726)"
"(let-values()"
"(let-values()"
"(if(expanded+parsed? the-struct_1774)"
"(let-values(((parsed596_1775)"
"(let-values(((the-struct_1776)"
"(expanded+parsed-parsed"
" submod_1726)))"
"(if(parsed-module? the-struct_1776)"
"(let-values(((star?597_1777) #t))"
"(parsed-module25.1"
"(parsed-s the-struct_1776)"
" star?597_1777"
"(parsed-module-name-id the-struct_1776)"
"(parsed-module-self the-struct_1776)"
"(parsed-module-requires the-struct_1776)"
"(parsed-module-provides the-struct_1776)"
"(parsed-module-root-ctx-simple?"
" the-struct_1776)"
"(parsed-module-encoded-root-ctx"
" the-struct_1776)"
"(parsed-module-body the-struct_1776)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                             \"parsed-module?\""
" the-struct_1776)))))"
"(expanded+parsed1.1"
"(expanded+parsed-s the-struct_1774)"
" parsed596_1775))"
"(raise-argument-error"
" 'struct-copy"
"                                                           \"expanded+parsed?\""
" the-struct_1774))))"
"(let-values()"
"(let-values()"
"(if(parsed-module? the-struct_1778)"
"(let-values(((star?598_1779) #t))"
"(parsed-module25.1"
"(parsed-s the-struct_1778)"
" star?598_1779"
"(parsed-module-name-id the-struct_1778)"
"(parsed-module-self the-struct_1778)"
"(parsed-module-requires the-struct_1778)"
"(parsed-module-provides the-struct_1778)"
"(parsed-module-root-ctx-simple? the-struct_1778)"
"(parsed-module-encoded-root-ctx the-struct_1778)"
"(parsed-module-body the-struct_1778)))"
"(raise-argument-error"
" 'struct-copy"
"                                                           \"parsed-module?\""
" the-struct_1778))))))))))))))))))))))))))))))"
"(define-values"
"(unpack182.1)"
"(lambda(given-kws_1780 given-args_1781 s178_1782 self179_1783 ctx180_1784)"
"(let-values(((declared-submodule-names170_1785)(car given-args_1781))"
"((given-kws_1786)(cdr given-kws_1780))"
"((given-args_1787)(cdr given-args_1781)))"
"(let-values(((enclosing-all-scopes-stx175_1788)"
"(if(pair? given-kws_1786)(eq? '#:enclosing-all-scopes-stx(car given-kws_1786)) #f)))"
"(let-values(((enclosing-all-scopes-stx168_1789)"
"(if enclosing-all-scopes-stx175_1788(car given-args_1787)(void)))"
"((given-kws_1790)(if enclosing-all-scopes-stx175_1788(cdr given-kws_1786) given-kws_1786))"
"((given-args_1791)(if enclosing-all-scopes-stx175_1788(cdr given-args_1787) given-args_1787)))"
"(let-values(((enclosing-is-cross-phase-persistent?174_1792)"
"(if(pair? given-kws_1790)"
"(eq? '#:enclosing-is-cross-phase-persistent?(car given-kws_1790))"
" #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?167_1793)"
"(if enclosing-is-cross-phase-persistent?174_1792(car given-args_1791)(void)))"
"((given-kws_1794)"
"(if enclosing-is-cross-phase-persistent?174_1792(cdr given-kws_1790) given-kws_1790))"
"((given-args_1795)"
"(if enclosing-is-cross-phase-persistent?174_1792(cdr given-args_1791) given-args_1791)))"
"(let-values(((enclosing-requires+provides173_1796)"
"(if(pair? given-kws_1794)(eq? '#:enclosing-requires+provides(car given-kws_1794)) #f)))"
"(let-values(((enclosing-requires+provides166_1797)"
"(if enclosing-requires+provides173_1796(car given-args_1795)(void)))"
"((given-kws_1798)"
"(if enclosing-requires+provides173_1796(cdr given-kws_1794) given-kws_1794))"
"((given-args_1799)"
"(if enclosing-requires+provides173_1796(cdr given-args_1795) given-args_1795)))"
"(let-values(((is-star?164_1800)(car given-args_1799))"
"((given-kws_1801)(cdr given-kws_1798))"
"((given-args_1802)(cdr given-args_1799)))"
"(let-values(((keep-enclosing-scope-at-phase172_1803)"
"(if(pair? given-kws_1801)"
"(eq? '#:keep-enclosing-scope-at-phase(car given-kws_1801))"
" #f)))"
"(let-values(((keep-enclosing-scope-at-phase165_1804)"
"(if keep-enclosing-scope-at-phase172_1803(car given-args_1802)(void)))"
"((given-kws_1805)"
"(if keep-enclosing-scope-at-phase172_1803(cdr given-kws_1801) given-kws_1801))"
"((given-args_1806)"
"(if keep-enclosing-scope-at-phase172_1803(cdr given-args_1802) given-args_1802)))"
"(let-values(((mpis-to-reset169_1807)(car given-args_1806)))"
"(expand-submodule181.1"
" declared-submodule-names170_1785"
" enclosing-all-scopes-stx168_1789"
" enclosing-all-scopes-stx175_1788"
" enclosing-is-cross-phase-persistent?167_1793"
" enclosing-is-cross-phase-persistent?174_1792"
" enclosing-requires+provides166_1797"
" enclosing-requires+provides173_1796"
" is-star?164_1800"
" keep-enclosing-scope-at-phase165_1804"
" keep-enclosing-scope-at-phase172_1803"
" mpis-to-reset169_1807"
" s178_1782"
" self179_1783"
" ctx180_1784))))))))))))))"
"(define-values"
"(expand-submodule183.1)"
"(lifted/37.1"
"(lambda(given-kws_1808 given-argc_1809)"
"(if(= given-argc_1809 5)"
"(subsets?"
" '(#:declared-submodule-names #:is-star? #:mpis-to-reset)"
" given-kws_1808"
" '(#:declared-submodule-names"
" #:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset))"
" #f))"
"(case-lambda"
"((given-kws_1810 given-args_1811 s_1812 self_1813 ctx_1814)"
"(unpack182.1 given-kws_1810 given-args_1811 s_1812 self_1813 ctx_1814)))"
" '(#:declared-submodule-names #:is-star? #:mpis-to-reset)"
" '(#:declared-submodule-names"
" #:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset)))"
"(define-values"
"(lifted/41.1 lifted/42.1 lifted/43.1 lifted/44.1 lifted/45.1)"
"(make-struct-type"
" 'expand-non-module*-submodules"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'expand-non-module*-submodules"
"(case-lambda"
"((self_1815 bodys_1816 phase_1817 self_1818 ctx_1819)"
"(apply missing-kw self_1815 bodys_1816 phase_1817 self_1818 ctx_1819 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1820 bodys_1821 phase_1822 self_1823 ctx_1824)"
"(apply missing-kw self_1820 bodys_1821 phase_1822 self_1823 ctx_1824 null)))))"
"(define-values"
"(expand-non-module*-submodules192.1)"
"(lambda(declared-submodule-names185_1825 mpis-to-reset184_1826 bodys188_1827 phase189_1828 self190_1829 ctx191_1830)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_1837)(void)(let-values()(in-list lst_1837)))"
"((letrec-values(((for-loop_1838)"
"(lambda(fold-var_1839 lst_1840)"
"(if(pair? lst_1840)"
"(let-values(((body_1841)(unsafe-car lst_1840)))"
"(let-values(((fold-var_1842)"
"(let-values()"
"(let-values(((fold-var_1844)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((tmp_1845)"
"(core-form-sym"
"(syntax-disarm$1"
" body_1841)"
" phase_1832)))"
"(if(equal? tmp_1845 'module)"
"(let-values()"
"(let-values(((temp602_1850)"
" #f))"
"(expand-submodule181.1"
" declared-submodule-names604_1852"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp602_1850"
" #f"
" #f"
" mpis-to-reset603_1851"
" body599_1847"
" self600_1848"
" ctx601_1849)))"
"(let-values() body_1841))))"
" fold-var_1843))))"
"(values fold-var_1844)))))"
"(for-loop_1838 fold-var_1842(unsafe-cdr lst_1840))))"
" fold-var_1839))))"
" for-loop_1838)"
" null"
" lst_1837)))))))))))))"
"(define-values"
"(unpack193.1)"
"(lambda(given-kws_1853 given-args_1854 bodys188_1855 phase189_1856 self190_1857 ctx191_1858)"
"(let-values(((declared-submodule-names185_1859)(car given-args_1854))"
"((given-kws_1860)(cdr given-kws_1853))"
"((given-args_1861)(cdr given-args_1854)))"
"(let-values(((mpis-to-reset184_1862)(car given-args_1861)))"
"(expand-non-module*-submodules192.1"
" declared-submodule-names185_1859"
" mpis-to-reset184_1862"
" bodys188_1855"
" phase189_1856"
" self190_1857"
" ctx191_1858)))))"
"(define-values"
"(expand-non-module*-submodules194.1)"
"(lifted/42.1"
"(lambda(given-kws_1863 given-argc_1864)"
"(if(= given-argc_1864 6)"
"(let-values()"
"(if(pair? l2_1865)"
"(if(eq?(car l2_1865) '#:declared-submodule-names)"
"(let-values(((l2_1866)(cdr l2_1865)))"
"(if(pair? l2_1866)(if(eq?(car l2_1866) '#:mpis-to-reset)(null?(cdr l2_1866)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1867 given-args_1868 bodys_1869 phase_1870 self_1871 ctx_1872)"
"(unpack193.1 given-kws_1867 given-args_1868 bodys_1869 phase_1870 self_1871 ctx_1872)))"
" '(#:declared-submodule-names #:mpis-to-reset)"
" '(#:declared-submodule-names #:mpis-to-reset)))"
"(define-values"
"(lifted/46.1 lifted/47.1 lifted/48.1 lifted/49.1 lifted/50.1)"
"(make-struct-type"
" 'make-parse-lifted-require"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'make-parse-lifted-require"
"(case-lambda"
"((self_1873 m-ns_1874 self_1875 requires+provides_1876)"
"(apply missing-kw self_1873 m-ns_1874 self_1875 requires+provides_1876 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1877 m-ns_1878 self_1879 requires+provides_1880)"
"(apply missing-kw self_1877 m-ns_1878 self_1879 requires+provides_1880 null)))))"
"(define-values"
"(make-parse-lifted-require200.1)"
"(lambda(declared-submodule-names195_1881 m-ns197_1882 self198_1883 requires+provides199_1884)"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(lambda(s_1889 phase_1890)"
"(let-values(((ok?_1891 #%require605_1892 req606_1893)"
"(let-values(((s_1904)(syntax-disarm$1 s_1889)))"
"(let-values()"
"(let-values(((#%require605_1906 req606_1907)"
"(let-values(((s_1908)"
"(if(syntax?$1 s_1904)(syntax-e$1 s_1904) s_1904)))"
"(if(pair? s_1908)"
"(let-values(((#%require607_1909)"
"(let-values(((s_1911)(car s_1908))) s_1911))"
"((req608_1910)"
"(let-values(((s_1912)(cdr s_1908)))"
"(let-values(((s_1913)"
"(if(syntax?$1 s_1912)"
"(syntax-e$1 s_1912)"
" s_1912)))"
"(if(pair? s_1913)"
"(let-values(((req609_1914)"
"(let-values(((s_1915)"
"(car s_1913)))"
" s_1915))"
"(()"
"(let-values(((s_1916)"
"(cdr s_1913)))"
"(let-values(((s_1917)"
"(if(syntax?$1"
" s_1916)"
"(syntax-e$1"
" s_1916)"
" s_1916)))"
"(if(null? s_1917)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_1905))))))"
"(values req609_1914))"
"(raise-syntax-error$1"
" #f"
"                                                                         \"bad syntax\""
" orig-s_1905))))))"
"(values #%require607_1909 req608_1910))"
"                                                    (raise-syntax-error$1 #f \"bad syntax\" orig-s_1905)))))"
"(values #t #%require605_1906 req606_1907))))))"
"(let-values(((temp610_1919)(list req606_1893))((temp618_1927) 'require))"
"(parse-and-perform-requires!28.1"
" #f"
" #f"
" #f"
" #f"
" declared-submodule-names617_1926"
" #t"
" phase615_1924"
" #t"
" #f"
" #f"
" self612_1921"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp618_1927"
" temp610_1919"
" s611_1920"
" m-ns613_1922"
" phase614_1923"
" requires+provides616_1925)))))))))))"
"(define-values"
"(unpack201.1)"
"(lambda(given-kws_1928 given-args_1929 m-ns197_1930 self198_1931 requires+provides199_1932)"
"(let-values(((declared-submodule-names195_1933)(car given-args_1929)))"
"(make-parse-lifted-require200.1"
" declared-submodule-names195_1933"
" m-ns197_1930"
" self198_1931"
" requires+provides199_1932))))"
"(define-values"
"(make-parse-lifted-require202.1)"
"(lifted/47.1"
"(lambda(given-kws_1934 given-argc_1935)"
"(if(= given-argc_1935 5)"
"(let-values()"
"(if(pair? l2_1936)(if(eq?(car l2_1936) '#:declared-submodule-names)(null?(cdr l2_1936)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_1937 given-args_1938 m-ns_1939 self_1940 requires+provides_1941)"
"(unpack201.1 given-kws_1937 given-args_1938 m-ns_1939 self_1940 requires+provides_1941)))"
" '(#:declared-submodule-names)"
" '(#:declared-submodule-names)))"
"(void)"
"(void)"
"(define-values"
"(as-expand-time-top-level-bindings)"
"(lambda(ids_1 s_2 ctx_3)"
"(let-values(((top-level-bind-scope_4)(root-expand-context-top-level-bind-scope ctx_3)))"
"(let-values(((tl-ids_5)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_7)(void)(let-values()(in-list lst_7)))"
"((letrec-values(((for-loop_8)"
"(lambda(fold-var_9 lst_10)"
"(if(pair? lst_10)"
"(let-values(((id_11)(unsafe-car lst_10)))"
"(let-values(((fold-var_12)"
"(let-values()"
"(let-values(((fold-var_14)"
"(let-values()"
"(cons"
"(let-values()"
"(remove-use-site-scopes"
" id_11"
" ctx_3))"
" fold-var_13))))"
"(values fold-var_14)))))"
"(for-loop_8 fold-var_12(unsafe-cdr lst_10))))"
" fold-var_9))))"
" for-loop_8)"
" null"
" lst_7))))))"
"(let-values((()"
"(begin"
"(let-values(((temp2_16)(expand-context-phase ctx_3)))"
"(check-no-duplicate-ids8.1 #f #f tl-ids1_15 temp2_16 s3_17 #f #f))"
"(values))))"
"(let-values(((tmp-bind-ids_6)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_18)(void)(let-values()(in-list lst_18)))"
"((letrec-values(((for-loop_19)"
"(lambda(fold-var_20 lst_21)"
"(if(pair? lst_21)"
"(let-values(((id_22)(unsafe-car lst_21)))"
"(let-values(((fold-var_23)"
"(let-values()"
"(let-values(((fold-var_25)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_22"
" top-level-bind-scope_4))"
" fold-var_24))))"
"(values fold-var_25)))))"
"(for-loop_19 fold-var_23(unsafe-cdr lst_21))))"
" fold-var_20))))"
" for-loop_19)"
" null"
" lst_18))))))"
"(values tl-ids_5(select-defined-syms-and-bind!/ctx tmp-bind-ids_6 ctx_3))))))))"
"(void)"
"(void)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'define-values"
"(lambda(s_1 ctx_2)"
"(let-values((()"
"(begin"
"(let-values(((obs_23)(expand-context-observer ctx_2)))"
"(if obs_23"
"(let-values()(let-values()(call-expand-observe obs_23 'prim-define-values)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_2) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_1)))"
"(values))))"
"(let-values(((disarmed-s_3)(syntax-disarm$1 s_1)))"
"(let-values(((ok?_4 define-values1_5 id2_6 rhs3_7)"
"(let-values()"
"(let-values()"
"(let-values(((define-values1_26 id2_27 rhs3_28)"
"(let-values(((s_29)(if(syntax?$1 s_24)(syntax-e$1 s_24) s_24)))"
"(if(pair? s_29)"
"(let-values(((define-values4_30)"
"(let-values(((s_33)(car s_29))) s_33))"
"((id5_31 rhs6_32)"
"(let-values(((s_34)(cdr s_29)))"
"(let-values(((s_35)"
"(if(syntax?$1 s_34)"
"(syntax-e$1 s_34)"
" s_34)))"
"(if(pair? s_35)"
"(let-values(((id7_36)"
"(let-values(((s_38)(car s_35)))"
"(let-values(((s_39)"
"(if(syntax?$1 s_38)"
"(syntax-e$1 s_38)"
" s_38)))"
"(let-values(((flat-s_40)"
"(to-syntax-list.1"
" s_39)))"
"(if(not flat-s_40)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                              \"bad syntax\""
" orig-s_25))"
"(let-values()"
"(let-values(((id_41)"
"(let-values()"
"(begin"
"(if(list?"
" lst_42)"
"(void)"
"(let-values()"
"(in-list"
" lst_42)))"
"((letrec-values(((for-loop_43)"
"(lambda(id_44"
" lst_45)"
"(if(pair?"
" lst_45)"
"(let-values(((s_46)"
"(unsafe-car"
" lst_45)))"
"(let-values(((id_47)"
"(let-values()"
"(let-values(((id_49)"
"(let-values()"
"(let-values(((id10_50)"
"(let-values()"
"(if(let-values(((or-part_51)"
"(if(syntax?$1"
" s_46)"
"(symbol?"
"(syntax-e$1"
" s_46))"
" #f)))"
"(if or-part_51"
" or-part_51"
"(symbol?"
" s_46)))"
" s_46"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                          \"not an identifier\""
" orig-s_25"
" s_46)))))"
"(cons"
" id10_50"
" id_48)))))"
"(values"
" id_49)))))"
"(for-loop_43"
" id_47"
"(unsafe-cdr"
" lst_45))))"
" id_44))))"
" for-loop_43)"
" null"
" lst_42)))))"
"(alt-reverse"
" id_41))))))))"
"((rhs8_37)"
"(let-values(((s_52)(cdr s_35)))"
"(let-values(((s_53)"
"(if(syntax?$1 s_52)"
"(syntax-e$1 s_52)"
" s_52)))"
"(if(pair? s_53)"
"(let-values(((rhs9_54)"
"(let-values(((s_55)"
"(car"
" s_53)))"
" s_55))"
"(()"
"(let-values(((s_56)"
"(cdr"
" s_53)))"
"(let-values(((s_57)"
"(if(syntax?$1"
" s_56)"
"(syntax-e$1"
" s_56)"
" s_56)))"
"(if(null?"
" s_57)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_25))))))"
"(values rhs9_54))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_25))))))"
"(values id7_36 rhs8_37))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_25))))))"
"(values define-values4_30 id5_31 rhs6_32))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_25)))))"
"(values #t define-values1_26 id2_27 rhs3_28))))))"
"(let-values(((ids_20 syms_21)(as-expand-time-top-level-bindings id2_6 s_1 ctx_2)))"
"(let-values(((exp-rhs_22)"
"(let-values(((temp12_59)(as-named-context ctx_2 ids_20)))"
"(expand5.1 #f #f temp11_58 temp12_59))))"
"(if(expand-context-to-parsed? ctx_2)"
"(parsed-define-values19.1 s_1 ids_20 syms_21 exp-rhs_22)"
"(let-values(((temp14_61)(list define-values1_5 ids_20 exp-rhs_22)))"
"(rebuild62.1 #f #f s13_60 temp14_61))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'define-syntaxes"
"(lambda(s_62 ctx_63)"
"(let-values((()"
"(begin"
"(let-values(((obs_84)(expand-context-observer ctx_63)))"
"(if obs_84"
"(let-values()(let-values()(call-expand-observe obs_84 'prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_85)(expand-context-observer ctx_63)))"
"(if obs_85(let-values()(let-values()(call-expand-observe obs_85 'prepare-env)))(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_63) 'top-level)"
"(void)"
"                             (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_62)))"
"(values))))"
"(let-values(((disarmed-s_64)(syntax-disarm$1 s_62)))"
"(let-values(((ok?_65 define-syntaxes15_66 id16_67 rhs17_68)"
"(let-values()"
"(let-values()"
"(let-values(((define-syntaxes15_88 id16_89 rhs17_90)"
"(let-values(((s_91)(if(syntax?$1 s_86)(syntax-e$1 s_86) s_86)))"
"(if(pair? s_91)"
"(let-values(((define-syntaxes18_92)"
"(let-values(((s_95)(car s_91))) s_95))"
"((id19_93 rhs20_94)"
"(let-values(((s_96)(cdr s_91)))"
"(let-values(((s_97)"
"(if(syntax?$1 s_96)"
"(syntax-e$1 s_96)"
" s_96)))"
"(if(pair? s_97)"
"(let-values(((id21_98)"
"(let-values(((s_100)(car s_97)))"
"(let-values(((s_101)"
"(if(syntax?$1"
" s_100)"
"(syntax-e$1"
" s_100)"
" s_100)))"
"(let-values(((flat-s_102)"
"(to-syntax-list.1"
" s_101)))"
"(if(not flat-s_102)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                \"bad syntax\""
" orig-s_87))"
"(let-values()"
"(let-values(((id_103)"
"(let-values()"
"(begin"
"(if(list?"
" lst_104)"
"(void)"
"(let-values()"
"(in-list"
" lst_104)))"
"((letrec-values(((for-loop_105)"
"(lambda(id_106"
" lst_107)"
"(if(pair?"
" lst_107)"
"(let-values(((s_108)"
"(unsafe-car"
" lst_107)))"
"(let-values(((id_109)"
"(let-values()"
"(let-values(((id_111)"
"(let-values()"
"(let-values(((id24_112)"
"(let-values()"
"(if(let-values(((or-part_113)"
"(if(syntax?$1"
" s_108)"
"(symbol?"
"(syntax-e$1"
" s_108))"
" #f)))"
"(if or-part_113"
" or-part_113"
"(symbol?"
" s_108)))"
" s_108"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                            \"not an identifier\""
" orig-s_87"
" s_108)))))"
"(cons"
" id24_112"
" id_110)))))"
"(values"
" id_111)))))"
"(for-loop_105"
" id_109"
"(unsafe-cdr"
" lst_107))))"
" id_106))))"
" for-loop_105)"
" null"
" lst_104)))))"
"(alt-reverse"
" id_103))))))))"
"((rhs22_99)"
"(let-values(((s_114)(cdr s_97)))"
"(let-values(((s_115)"
"(if(syntax?$1"
" s_114)"
"(syntax-e$1"
" s_114)"
" s_114)))"
"(if(pair? s_115)"
"(let-values(((rhs23_116)"
"(let-values(((s_117)"
"(car"
" s_115)))"
" s_117))"
"(()"
"(let-values(((s_118)"
"(cdr"
" s_115)))"
"(let-values(((s_119)"
"(if(syntax?$1"
" s_118)"
"(syntax-e$1"
" s_118)"
" s_118)))"
"(if(null?"
" s_119)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                \"bad syntax\""
" orig-s_87))))))"
"(values rhs23_116))"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_87))))))"
"(values id21_98 rhs22_99))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_87))))))"
"(values define-syntaxes18_92 id19_93 rhs20_94))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_87)))))"
"(values #t define-syntaxes15_88 id16_89 rhs17_90))))))"
"(let-values(((ids_81 syms_82)(as-expand-time-top-level-bindings id16_67 s_62 ctx_63)))"
"(let-values(((exp-rhs_83)"
"(let-values(((temp26_121)(as-named-context ctx_63 ids_81)))"
"(expand-transformer43.1 #f #f #f #f #f #f #f #f #f #f temp25_120 temp26_121))))"
"(if(expand-context-to-parsed? ctx_63)"
"(parsed-define-syntaxes20.1 s_62 ids_81 syms_82 exp-rhs_83)"
"(let-values(((temp28_123)(list define-syntaxes15_66 ids_81 exp-rhs_83)))"
"(rebuild62.1 #f #f s27_122 temp28_123)))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin-for-syntax"
"     (lambda (s_124 ctx_125) (raise-syntax-error$1 #f \"not allowed in an expression position\" s_124))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%require"
"(lambda(s_126 ctx_127)"
"(let-values((()"
"(begin"
"(let-values(((obs_143)(expand-context-observer ctx_127)))"
"(if obs_143"
"(let-values()(let-values()(call-expand-observe obs_143 'prim-require)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_127) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"allowed only in a module or the top level\" s_126)))"
"(values))))"
"(let-values(((disarmed-s_128)(syntax-disarm$1 s_126)))"
"(let-values(((ok?_129 #%require29_130 req30_131)"
"(let-values()"
"(let-values()"
"(let-values(((#%require29_146 req30_147)"
"(let-values(((s_148)(if(syntax?$1 s_144)(syntax-e$1 s_144) s_144)))"
"(if(pair? s_148)"
"(let-values(((#%require31_149)"
"(let-values(((s_151)(car s_148))) s_151))"
"((req32_150)"
"(let-values(((s_152)(cdr s_148)))"
"(let-values(((s_153)"
"(if(syntax?$1 s_152)"
"(syntax-e$1 s_152)"
" s_152)))"
"(let-values(((flat-s_154)(to-syntax-list.1 s_153)))"
"(if(not flat-s_154)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_145))"
"(let-values() flat-s_154)))))))"
"(values #%require31_149 req32_150))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_145)))))"
"(values #t #%require29_146 req30_147))))))"
"(let-values(((sc_142)(new-scope 'macro)))"
"(begin"
"(let-values(((temp33_156)"
"(alt-reverse"
"(let-values()"
"(begin"
"(if(list? lst_163)(void)(let-values()(in-list lst_163)))"
"((letrec-values(((for-loop_164)"
"(lambda(fold-var_165 lst_166)"
"(if(pair? lst_166)"
"(let-values(((req_167)(unsafe-car lst_166)))"
"(let-values(((fold-var_168)"
"(let-values()"
"(let-values(((fold-var_170)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" req_167"
" sc_142))"
" fold-var_169))))"
"(values fold-var_170)))))"
"(for-loop_164 fold-var_168(unsafe-cdr lst_166))))"
" fold-var_165))))"
" for-loop_164)"
" null"
" lst_163)))))"
"((temp35_158) #f)"
"((temp36_159)(expand-context-namespace ctx_127))"
"((temp37_160)(expand-context-phase ctx_127))"
"((temp38_161)(make-requires+provides #f))"
"((temp39_162) 'require))"
"(parse-and-perform-requires!28.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp35_158"
" #t"
" temp39_162"
" temp33_156"
" s34_157"
" temp36_159"
" temp37_160"
" temp38_161))"
"(if(expand-context-to-parsed? ctx_127)(parsed-require23.1 s_126) s_126))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%provide"
"(lambda(s_171 ctx_172)"
"(begin"
"(let-values(((obs_173)(expand-context-observer ctx_172)))"
"(if obs_173(let-values()(let-values()(call-expand-observe obs_173 'prim-provide)))(void)))"
"         (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_171)))))"
" print-values)"
"(void)"
"(void)"
"(define-values(ns)(make-namespace))"
"(call-with-values(lambda()(declare-core-module! ns)) print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp1_2) '#%main))"
"(declare-hash-based-module!39.1 ns3_4 #f #f #f #f #f #f #f #f temp1_2 main-primitives2_3)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp4_6) '#%utils))"
"(declare-hash-based-module!39.1 ns6_8 #f #f #f #f #f #f #f #f temp4_6 utils-primitives5_7)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp7_10) '#%place-struct)((temp10_13) '(dynamic-place)))"
"(declare-hash-based-module!39.1 ns9_12 #f #f temp10_13 #t #f #f #f #f temp7_10 place-struct-primitives8_11)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp11_15) '#%boot))"
"(declare-hash-based-module!39.1 ns13_17 #f #f #f #f #f #f #f #f temp11_15 boot-primitives12_16)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((linklet-primitives_18)"
"(hash-remove(hash-remove linklet-primitives 'variable-reference?) 'variable-reference-constant?)))"
"(let-values(((temp25_20) '#%linklet)((temp28_23) #t)((temp29_24) #t))"
"(declare-hash-based-module!39.1"
" ns27_22"
" temp28_23"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp29_24"
" #t"
" temp25_20"
" linklet-primitives26_21))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp14_26) '#%expobs)((temp17_29) #t))"
"(declare-hash-based-module!39.1 ns16_28 #f #f #f #f temp17_29 #t #f #f temp14_26 expobs-primitives15_27)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp20_33)"
"(let-values()"
"(begin"
"(if((lambda(ht_35)(hash? ht_35)) ht_34)(void)(let-values()(default-in-hash-keys ht_34)))"
"((letrec-values(((for-loop_36)"
"(lambda(table_37 i_38)"
"(if i_38"
"(let-values(((name_39)(hash-iterate-key ht_34 i_38)))"
"(let-values(((table_40)"
"(let-values()"
"(let-values(((table_42)"
"(let-values()"
"(let-values(((key_43 val_44)"
"(let-values()"
"(values"
"(let-values() name_39)"
" #t))))"
"(hash-set table_41 key_43 val_44)))))"
"(values table_42)))))"
"(for-loop_36 table_40(hash-iterate-next ht_34 i_38))))"
" table_37))))"
" for-loop_36)"
" '#hash()"
"(hash-iterate-first ht_34))))))"
"(declare-kernel-module!6.1 eval19_32 temp20_33 ns18_31)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values()"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"((letrec-values(((for-loop_46)"
"(lambda(fold-var_47 lst_48)"
"(if(pair? lst_48)"
"(let-values(((name_49)(unsafe-car lst_48)))"
"(let-values(((fold-var_50)"
"(let-values()"
"(if(eq? name_49 '#%kernel)"
" fold-var_51"
"(let-values()"
"(let-values(((fold-var_53)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((temp32_57)"
"(let-values(((or-part_58)"
"(eq?"
" name_49"
" '#%foreign)))"
"(if or-part_58"
" or-part_58"
"(let-values(((or-part_59)"
"(eq?"
" name_49"
" '#%futures)))"
"(if or-part_59"
" or-part_59"
"(eq?"
" name_49"
" '#%unsafe)))))))"
"(copy-runtime-module!24.1"
" #f"
" #f"
" #f"
" #f"
" ns31_56"
" #f"
" #f"
" temp32_57"
" #t"
" #f"
" #f"
" #f"
" #f"
" name30_55)))"
"(void)))))"
"(values fold-var_53)))))))"
"(for-loop_46 fold-var_50(unsafe-cdr lst_48))))"
" fold-var_47))))"
" for-loop_46)"
"(void)"
" lst_45))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp21_61) '#%builtin)"
"((temp22_62)(list* '#%place-struct '#%utils '#%boot '#%expobs '#%linklet runtime-instances))"
"((temp24_64) #f))"
"(declare-reexporting-module!48.1 ns23_63 temp24_64 #t temp21_61 temp22_62)))"
" print-values)"
"(call-with-values(lambda()(1/current-namespace ns)) print-values)"
"(call-with-values(lambda()(1/dynamic-require ''#%kernel 0)) print-values)"
"(define-values(datum->kernel-syntax)(lambda(s_65)(1/datum->syntax core-stx s_65)))"
"(void))"
);
